"use strict";(self.webpackChunk_cli_forge_docs_site=self.webpackChunk_cli_forge_docs_site||[]).push([[7188],{56273:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>t,toc:()=>c});var o=i(62540),r=i(43023);const a={id:"configuration-files",title:"Configuration Files",description:"This example demonstrates how to enable loading arguments from a configuration file. The `.config()` method configures the CLI to load arguments from a configuration file. The method takes a single argument, a `ConfigurationProvider`. [See the docs for `ConfigurationProvider` here](/api/parser/namespaces/ConfigurationFiles/type-aliases/ConfigurationProvider).\n\nFor convenience, `cli-forge` exports some built-in configuration providers. Currently, there are two built-in configuration providers: `JsonFile` and `PackageJson`.\n\nUsage of each of these is demonstrated below. Note that when using multiple configuration files, the order in which they are loaded is important. The last configuration file loaded will override any previously loaded configuration files.\n\nWhen both environment variables and configuration files are used, the order of precedence is as follows:\n- CLI Arguments\n- Environment Variables\n- Configuration Files\n- Default Values\n\nThis is based on the idea of highest specificity. CLI Arguments are always provided directly by the user. Environment variables can change system-to-system. Configuration files are specific to the project. Default values are equal for all instances of the CLI.\n",hide_title:!0},s="Configuration Files",t={id:"examples/configuration-files",title:"Configuration Files",description:"This example demonstrates how to enable loading arguments from a configuration file. The `.config()` method configures the CLI to load arguments from a configuration file. The method takes a single argument, a `ConfigurationProvider`. [See the docs for `ConfigurationProvider` here](/api/parser/namespaces/ConfigurationFiles/type-aliases/ConfigurationProvider).\n\nFor convenience, `cli-forge` exports some built-in configuration providers. Currently, there are two built-in configuration providers: `JsonFile` and `PackageJson`.\n\nUsage of each of these is demonstrated below. Note that when using multiple configuration files, the order in which they are loaded is important. The last configuration file loaded will override any previously loaded configuration files.\n\nWhen both environment variables and configuration files are used, the order of precedence is as follows:\n- CLI Arguments\n- Environment Variables\n- Configuration Files\n- Default Values\n\nThis is based on the idea of highest specificity. CLI Arguments are always provided directly by the user. Environment variables can change system-to-system. Configuration files are specific to the project. Default values are equal for all instances of the CLI.\n",source:"@site/docs/examples/configuration-files.md",sourceDirName:"examples",slug:"/examples/configuration-files",permalink:"/cli-forge/examples/configuration-files",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"configuration-files",title:"Configuration Files",description:"This example demonstrates how to enable loading arguments from a configuration file. The `.config()` method configures the CLI to load arguments from a configuration file. The method takes a single argument, a `ConfigurationProvider`. [See the docs for `ConfigurationProvider` here](/api/parser/namespaces/ConfigurationFiles/type-aliases/ConfigurationProvider).\n\nFor convenience, `cli-forge` exports some built-in configuration providers. Currently, there are two built-in configuration providers: `JsonFile` and `PackageJson`.\n\nUsage of each of these is demonstrated below. Note that when using multiple configuration files, the order in which they are loaded is important. The last configuration file loaded will override any previously loaded configuration files.\n\nWhen both environment variables and configuration files are used, the order of precedence is as follows:\n- CLI Arguments\n- Environment Variables\n- Configuration Files\n- Default Values\n\nThis is based on the idea of highest specificity. CLI Arguments are always provided directly by the user. Environment variables can change system-to-system. Configuration files are specific to the project. Default values are equal for all instances of the CLI.\n",hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Composable Options",permalink:"/cli-forge/examples/composable-options"},next:{title:"Conflicts and Implications",permalink:"/cli-forge/examples/conflicts-and-implications"}},l={},c=[{value:"Code",id:"code",level:2},{value:"Usage",id:"usage",level:2},{value:"Pure Config",id:"pure-config",level:3},{value:"CLI Arguments",id:"cli-arguments",level:3}];function g(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"configuration-files",children:"Configuration Files"})}),"\n",(0,o.jsxs)(n.p,{children:["This example demonstrates how to enable loading arguments from a configuration file. The ",(0,o.jsx)(n.code,{children:".config()"})," method configures the CLI to load arguments from a configuration file. The method takes a single argument, a ",(0,o.jsx)(n.code,{children:"ConfigurationProvider"}),". ",(0,o.jsxs)(n.a,{href:"/api/parser/namespaces/ConfigurationFiles/type-aliases/ConfigurationProvider",children:["See the docs for ",(0,o.jsx)(n.code,{children:"ConfigurationProvider"})," here"]}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["For convenience, ",(0,o.jsx)(n.code,{children:"cli-forge"})," exports some built-in configuration providers. Currently, there are two built-in configuration providers: ",(0,o.jsx)(n.code,{children:"JsonFile"})," and ",(0,o.jsx)(n.code,{children:"PackageJson"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Usage of each of these is demonstrated below. Note that when using multiple configuration files, the order in which they are loaded is important. The last configuration file loaded will override any previously loaded configuration files."}),"\n",(0,o.jsx)(n.p,{children:"When both environment variables and configuration files are used, the order of precedence is as follows:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"CLI Arguments"}),"\n",(0,o.jsx)(n.li,{children:"Environment Variables"}),"\n",(0,o.jsx)(n.li,{children:"Configuration Files"}),"\n",(0,o.jsx)(n.li,{children:"Default Values"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"This is based on the idea of highest specificity. CLI Arguments are always provided directly by the user. Environment variables can change system-to-system. Configuration files are specific to the project. Default values are equal for all instances of the CLI."}),"\n",(0,o.jsx)(n.h2,{id:"code",children:"Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="configured-cli.ts" showLineNumbers',children:"import { ConfigurationProviders, cli } from 'cli-forge';\n\n(async () =>\n  await cli('configured-cli', {\n    builder: (args) =>\n      args\n        .option('name', { type: 'string' })\n        .option('greeting', { type: 'string' })\n        .option('farewell', { type: 'string' })\n\n        // Allows loading configuration values from the 'configured-cli' entry in package.json.\n        .config(ConfigurationProviders.PackageJson('configured-cli'))\n\n        // Allows loading configuration values from the root of 'configured-cli.config.json'.\n        .config(ConfigurationProviders.JsonFile('configured-cli.config.json'))\n\n        // Allows loading configuration values from the 'configured-cli' entry in 'other.config.json'.\n        .config(\n          ConfigurationProviders.JsonFile('other.config.json', 'configured-cli')\n        ),\n\n    handler: (args) => {\n      console.log(`${args.greeting}, ${args.name}!`);\n      console.log(`${args.farewell}, ${args.name}!`);\n    },\n  }).forge())();\n\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="configured-cli.config.json" showLineNumbers',children:'{\n  "greeting": "Hello!"\n}\n\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="other.config.json" showLineNumbers',children:'{\n  "configured-cli": { "farewell": "Goodbye" }\n}\n\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="package.json" showLineNumbers',children:'{\n  "name": "some-package",\n  "configured-cli": {\n    "name": "bar"\n  }\n}\n\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"/playground/#PTAEBUAsFNQMwPYBskIO4EsB2BzUTtYATBaAZywHIAXUE0AQywE9rJs8AnaBlZgGlCcGbaJ1AZa1aCjIAoEKFERmAB2gBlAMacMq2qqQNmOTggCuWIksgibGMqDI69tMpAtJrAI1jQAbrzmItDWDI4MoFgIRNAAVo7OuvoAdHIYALaqCJy0AN4AvvBmGaCU0bEAXHBklHLpWTn5oADCCFhwGDjmwtQY7QAKZv4YsZxkgloEoEVwJWVTGAC0iJw40JQA3PUAFOHMWFqgOwCUoAC8AHxyoIxoDJKgizuUWu2d3dxES4uUgnk3W6gbzmDBeMSVY4MNZkM5XQFAxgwhGI0ApBD6fpYF5YBgZDb-JRqaCQyhkai6XCUGYnFGI9GY9ovUzQaB9KmE6jE0nkyk4akFWmooEMvpMyhwaHQNAyJB-UB5InqHkUjgC2l0oGKACCKHQjlQDCIHCe7y6PREWNAgSQ5nIxQQpWUrzNn1CPwI1OgWApzAkWFAqgYWgA1gx1ikEu00sLbik3h0ujs2onPpbBsNRmIyCkBsGw+sAFJkcUJj49d2-E4a2OgHV6tAGhBGk1l829K02u2OOaOmywMwIWgIOALV0V76LeOuyMlqgx2PT1PJ8cdjMIEZjHPF9oAMTB0Bebbdk4IS4+s-alGr9Vr9dQjfwzeNuFNqYtYoDXftvadMDH75fB6GBej6nB+tgZRDjAnDnl0l7zpqcbHjsSFAim5ZrlgQwblm4wpDuWD7kgh6UNBYhwTgCHyi6gGVp6Qqxic-C3kCthWCRnCQnsMJwpcCqagmJYkSkqA4DsAAGAAkeTQjgOYsmyHAFIIMlyTmuL4gUACEEknNswpCcg0CiQg4nSbJMIpJK3AyigKmgGpVmadAOl6QZQIqYCgrWTk6ynCcpzbEAA",children:"View on TypeScript Playground"})}),"\n",(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(n.h3,{id:"pure-config",children:"Pure Config"}),"\n",(0,o.jsx)(n.p,{children:"Note that no arguments are provided to the CLI. In this case, all arguments are being loaded from the configuration files."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"node ./configuration-files.js\n"})}),"\n",(0,o.jsx)(n.h3,{id:"cli-arguments",children:"CLI Arguments"}),"\n",(0,o.jsx)(n.p,{children:"In this case, the CLI arguments are being used to override the configuration file."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:'node ./configuration-files.js --greeting "Welcome"\n'})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"These examples are ran as e2e tests on pull-requests and releases to verify they are accurate and up to date. If you see any issues, please open an issue on the github repo."}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(g,{...e})}):g(e)}},43023:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>t});var o=i(63696);const r={},a=o.createContext(r);function s(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);