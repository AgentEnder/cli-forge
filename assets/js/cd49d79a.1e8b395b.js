"use strict";(self.webpackChunk_cli_forge_docs_site=self.webpackChunk_cli_forge_docs_site||[]).push([[8562],{13321:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var t=a(62540),o=a(43023);const r={id:"middleware",title:"Middleware",description:"This is a simple example that demonstrates how to register middleware that run before the command handler.\nMiddleware can do **a lot** of things.  Almost everything that middleware can do could be done at the beginning\nof the handler function, but middleware keeps the handler clean and focused on the command's behavior as well\nas being much more composable.\n\nSome things middleware can do:\n- Modify the arguments object\n- Perform validation that takes multiple arguments into account\n- Perform side effects\n",hide_title:!0},i="Middleware",s={id:"examples/middleware",title:"Middleware",description:"This is a simple example that demonstrates how to register middleware that run before the command handler.\nMiddleware can do **a lot** of things.  Almost everything that middleware can do could be done at the beginning\nof the handler function, but middleware keeps the handler clean and focused on the command's behavior as well\nas being much more composable.\n\nSome things middleware can do:\n- Modify the arguments object\n- Perform validation that takes multiple arguments into account\n- Perform side effects\n",source:"@site/docs/examples/middleware.md",sourceDirName:"examples",slug:"/examples/middleware",permalink:"/cli-forge/examples/middleware",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"middleware",title:"Middleware",description:"This is a simple example that demonstrates how to register middleware that run before the command handler.\nMiddleware can do **a lot** of things.  Almost everything that middleware can do could be done at the beginning\nof the handler function, but middleware keeps the handler clean and focused on the command's behavior as well\nas being much more composable.\n\nSome things middleware can do:\n- Modify the arguments object\n- Perform validation that takes multiple arguments into account\n- Perform side effects\n",hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Interactive Subshell",permalink:"/cli-forge/examples/interactive-subshell"},next:{title:"Object Arguments",permalink:"/cli-forge/examples/object-dot-notation"}},d={},l=[{value:"Code",id:"code",level:2},{value:"Usage",id:"usage",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"middleware",children:"Middleware"})}),"\n",(0,t.jsxs)(n.p,{children:["This is a simple example that demonstrates how to register middleware that run before the command handler.\nMiddleware can do ",(0,t.jsx)(n.strong,{children:"a lot"})," of things.  Almost everything that middleware can do could be done at the beginning\nof the handler function, but middleware keeps the handler clean and focused on the command's behavior as well\nas being much more composable."]}),"\n",(0,t.jsx)(n.p,{children:"Some things middleware can do:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Modify the arguments object"}),"\n",(0,t.jsx)(n.li,{children:"Perform validation that takes multiple arguments into account"}),"\n",(0,t.jsx)(n.li,{children:"Perform side effects"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"code",children:"Code"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="Middleware" showLineNumbers',children:"import cliForge from 'cli-forge';\n\nconst cli = cliForge('basic-cli')\n  // Requires a command to be provided\n  .demandCommand()\n\n  // Middleware registered on parent commands will be invoked before the child command's middleware\n  .middleware(() => {\n    console.log('ABOUT TO RUN A COMMAND');\n  })\n\n  // Registers \"hello\" command\n  .command('hello', {\n    // Builder is used to define the command's options\n    builder: (args) =>\n      args\n        .option('name', {\n          type: 'string',\n          description: 'The name to say hello to',\n          default: 'World',\n        })\n        // Middleware can mutate the args object\n        .middleware((args) => {\n          args.name = args.name.toUpperCase();\n        })\n        // Multiple middleware can be registered\n        .middleware(() => {\n          console.log('HELLO MIDDLEWARE');\n        }),\n    // Handler is used to define the command's behavior\n    handler: (args) => {\n      console.log(`Hello, ${args.name}!`);\n    },\n  });\n\n// We export the CLI for a few reasons:\n// - Testing\n// - Composition (a CLI can be a subcommand of another CLI)\n// - Docs generation\nexport default cli;\n\n// Calling `.forge()` executes the CLI. It's single parameter is the CLI args\n// and they default to `process.argv.slice(2)`.\nif (require.main === module) {\n  (async () => {\n    await cli.forge();\n  })();\n}\n\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"/playground/#PTAEBUAsFNQMwPYBskIO4EsB2BzUTtYATBaAZywHIAXUE0AQywE9rJs8AnaBlZgGlCcGbaJ1AZa1aCjIAoEKFERmAB2gBlAMacMq2qqQNmOTggCuWIksgibGMqDI69tMpAtJrAI1jQAbrzmItDWDI4MoFgIRNAAVo7OuvoAdHIYALaqCJy0AN4AvvBmGaCU0bEAXHBklHLpWTm0WgQAYjk4sHAlZS0YALSInJ2UANz1WghYZM0EoAC8oH3tw9AAFJTe4Rha-X2UAJRyoKCKAErQAI7mGNwRSwgZGUzW1AigvqCqZv4YsUTHUApWLPKwAYUeoKIayOgMUAFk-kQkNA0AxuEJoDgHNJuNYpl90dAsM1IS9HJgUB9YNh-AgANahalDWDKLTsLwPJ4vSiODJIlFo7iAlL8ojI1FEtYwhYAPlAeUBJ0m02Q0BSqBwGwAggAhADyAFVwBB9aAzoaAHKgbWgMH6+Hw7WWgAih3GJwKsJO5yxOLEjgARDAUAhA1yoSLJtyrBsQ6hKIJFScfWBdTcvGIJI5zGQmW86NA4IQbLBo1DeaAEPoMFN5CmPhnYpxKqA1uicGQDnKlSmO-WGymUtXqLWsBssAwMtBEwre4OlGpoK3edRdLhE-PB7Ekq4xyuoLBJ9OlO8yMZQPH3m9NwuG7E4AxzEhqCuAOo5Ly3u9erep0CIuKgpEksTCgBk5jUCEpaMMMjgIN4cTQFo1B-kCYoSkK6ztnB3bzPKyZ3ic-YpMesCLCRZEpG8hqqOonBguE6wHB6P5HERCLPqOhiwBhwEYloYGfNw2IzGIoRoaKAqStw0p4QRaHKnWaoaggWqUAAEgAogAMjpZrwgAki6Lo6Vpb7amcWnumhXr8L2igaS8KLiA4oC5vm7wPiWbJklYla+LYvw5L2thWC5rY4Z28lzguKpkCpmprAABhpMioIIAAkeSUVO0AFAAhMlLG9gU9meiVChgG+fgAB7ZLkMFgjphnwDkjDwKimLhHWlRVaA-QQOQo64P1g0Qo0ZCSGObaRM1rWCVg1IdWQ5jeOWLxVnAjDRKI4jzUciiDS6CBaI4nRYGIIhjnI0D1U0haPlxSwEOM-WMSgHCgMlKRDJ0MLJaAd3IZB5BNS1KSgIZ1CVlNuAooSwjTri2bg61-b9ZtojMI9T4vqe33fKd5BkCkHb+CkZAEFo6wAEwHD96TbWs3DXLc6rPNgCzzIsGQxM+0DdoR7ZkMwWBaG2MWEcRaKSC9GC-R0zGsV6MLjAUchAA",children:"View on TypeScript Playground"})}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"node ./middleware.js hello --name sir\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"These examples are ran as e2e tests on pull-requests and releases to verify they are accurate and up to date. If you see any issues, please open an issue on the github repo."}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},43023:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>s});var t=a(63696);const o={},r=t.createContext(o);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);