"use strict";(self.webpackChunk_cli_forge_docs_site=self.webpackChunk_cli_forge_docs_site||[]).push([[9877],{28887:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var n=o(62540),s=o(43023);const a={id:"object-dot-notation",title:"Object Arguments",description:"This is a simple example that demonstrates passing object-valued options to a command. Note that\nthe object-valued options are passed as dot-notation strings. These can be nested for complex option\nstructures that contain object properties that are themselves objects.\n\n> Note: This example is a bit more abstract that the others, as real world use cases for object-valued\n> options and especially nested objects are less common. This example is included to demonstrate the\n> flexibility of the CLI Forge APIs and the ability to handle complex option structures with type safety.\n",hide_title:!0},r="Object Arguments",i={id:"examples/object-dot-notation",title:"Object Arguments",description:"This is a simple example that demonstrates passing object-valued options to a command. Note that\nthe object-valued options are passed as dot-notation strings. These can be nested for complex option\nstructures that contain object properties that are themselves objects.\n\n> Note: This example is a bit more abstract that the others, as real world use cases for object-valued\n> options and especially nested objects are less common. This example is included to demonstrate the\n> flexibility of the CLI Forge APIs and the ability to handle complex option structures with type safety.\n",source:"@site/docs/examples/object-dot-notation.md",sourceDirName:"examples",slug:"/examples/object-dot-notation",permalink:"/cli-forge/examples/object-dot-notation",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"object-dot-notation",title:"Object Arguments",description:"This is a simple example that demonstrates passing object-valued options to a command. Note that\nthe object-valued options are passed as dot-notation strings. These can be nested for complex option\nstructures that contain object properties that are themselves objects.\n\n> Note: This example is a bit more abstract that the others, as real world use cases for object-valued\n> options and especially nested objects are less common. This example is included to demonstrate the\n> flexibility of the CLI Forge APIs and the ability to handle complex option structures with type safety.\n",hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Middleware",permalink:"/cli-forge/examples/middleware"},next:{title:"Option Groups",permalink:"/cli-forge/examples/option-groups"}},c={},l=[{value:"Code",id:"code",level:2},{value:"Usage",id:"usage",level:2}];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"object-arguments",children:"Object Arguments"})}),"\n",(0,n.jsx)(t.p,{children:"This is a simple example that demonstrates passing object-valued options to a command. Note that\nthe object-valued options are passed as dot-notation strings. These can be nested for complex option\nstructures that contain object properties that are themselves objects."}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsx)(t.p,{children:"Note: This example is a bit more abstract that the others, as real world use cases for object-valued\noptions and especially nested objects are less common. This example is included to demonstrate the\nflexibility of the CLI Forge APIs and the ability to handle complex option structures with type safety."}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"code",children:"Code"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",metastring:'title="Object Arguments" showLineNumbers',children:"import cliForge from 'cli-forge';\n\nconst cli = cliForge('object-notation', {\n  builder: (args) =>\n    args.option('foo', {\n      type: 'object',\n      properties: {\n        bar: {\n          type: 'object',\n          properties: {\n            baz: {\n              type: 'number',\n            },\n          },\n        },\n        qux: {\n          type: 'number',\n        },\n        arr: {\n          type: 'array',\n          items: 'number',\n        },\n      },\n      additionalProperties: 'string',\n    }),\n  handler: (args) => {\n    // Types should be inferred correctly\n    args.foo?.bar?.baz?.toFixed();\n    args.foo?.['blam'].charAt(0);\n    // It's an array of numbers\n    args.foo?.arr?.reduce((acc, val) => acc + val, 0);\n  },\n});\n\n// We export the CLI for a few reasons:\n// - Testing\n// - Composition (a CLI can be a subcommand of another CLI)\n// - Docs generation\nexport default cli;\n\n// Calling `.forge()` executes the CLI. It's single parameter is the CLI args\n// and they default to `process.argv.slice(2)`.\nif (require.main === module) {\n  (async () => {\n    await cli.forge();\n  })();\n}\n\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"/playground/#PTAEBUAsFNQMwPYBskIO4EsB2BzUTtYATBaAZywHIAXUE0AQywE9rJs8AnaBlZgGlCcGbaJ1AZa1aCjIAoEKFERmAB2gBlAMacMq2qqQNmOTggCuWIksgibGMqDI69tMpAtJrAI1jQAbrzmItDWDI4MoFgIRNAAVo7OuvoAdHIYALaqCJy0AN4AvvBmGaCU0bEAXHBklHLpWTm0WgQAYjk4sHAlZS0YALSInJ2UANz1WghYZM0EoAC8oH3tw9AAFJQI3nHQWtT90dQiGFOUgnlyoKDe5hheYpWgawzDZACUCwB8l1eMrykIfQnLAbRAIM6gC6-X7UNTQR6bba7ahnH7Q1RmdS5DDkR5Q6G-bwvPFoglXWHqBFbHZ7VFk9GYsTUHFkEn0glEgBebPZBIp8LKWHMGV8nDpvKuBX4pLJUplvzl7IAjuYAB489n8hFCkVicWy6Xsl6cDX0rVlY3GfX0yTQDKswXC0XW6GKglu6EMIhESTA3gABUZ2NxZRmulw1oKb0NoFsViQDyeLxw7y+kNJinAcMSHnMXmusGwcDE3Gsk043D2SGYpOTZBSYIA-CkiZxm1zm9QEK0MKrQms3uNPf8mykANqUbxGDKUAC6KS0tk4AEFqGsAAyDjNgACSKIiWD+wmYoAQcCiTrE8mHKYbCAQzeNzdL5i062eWi0gkCSA+80+jCfqAADUoA-oIm5DqAcpRuMChgAA6n4qrZLkNiwAAwgAMju8A5Iw8DQGgQg8GQUysvBoD9BA5DMrglHURhCCNGQvpTEmoDYbhWhMAWBFkOY3iTBkGRMNYZ6MIcMDiFxbwMaAAAiCBaI4nRYGIxxTHI0AoU0dDQHADB5rMGBwYoGG8AQuCgAABneqwDjZoA6bs5jSI4yhcSkoB7pQiQcAmoCqC8DAZNA0jiA46GcThfwppRYnoSesSGcZSgILZGLKeQ9bJv4KRkAQb5rAATG8dnpOeazcCqGDcCkonYAs8yLBkMR5tAHz4s8ZDMFgWhPH+AH4lcDBoAwkhLAQ9mdAOUFRnNcgFHIQA",children:"View on TypeScript Playground"})}),"\n",(0,n.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-shell",children:"node ./object-dot-notation.js --foo.bar.baz 42 --foo.qux 42 --foo.arr 1 2 3 --foo.blam hello\n"})}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsx)(t.p,{children:"These examples are ran as e2e tests on pull-requests and releases to verify they are accurate and up to date. If you see any issues, please open an issue on the github repo."}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},43023:(e,t,o)=>{o.d(t,{R:()=>r,x:()=>i});var n=o(63696);const s={},a=n.createContext(s);function r(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);