"use strict";(self.webpackChunk_cli_forge_docs_site=self.webpackChunk_cli_forge_docs_site||[]).push([[2259],{52755:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var n=a(62540),l=a(43023);const i={id:"default-values",title:"Default Values",description:"This is a simple example that demonstrates the various ways you can set default values for options.\n\nThe default value can be set via the `default` property in an option definition. This can be done in three ways:\n- Setting the `default` property to a value directly\n- Setting the `default` property to an object containing function that returns a value and a description\n- Setting the `default` property to an object containing a value and a description\n\nSetting the `default` property to a value directly is the simplest way to set a default value, but can lead to some odd behavior if the value isn't consistent. For example, if the default value is the value of an environment variable that may differ among users then the actual default value will be different for each user. In this case in documentation, it would be better to tell users a description of the default value rather than the actual value.\n",hide_title:!0},o="Default Values",s={id:"examples/default-values",title:"Default Values",description:"This is a simple example that demonstrates the various ways you can set default values for options.\n\nThe default value can be set via the `default` property in an option definition. This can be done in three ways:\n- Setting the `default` property to a value directly\n- Setting the `default` property to an object containing function that returns a value and a description\n- Setting the `default` property to an object containing a value and a description\n\nSetting the `default` property to a value directly is the simplest way to set a default value, but can lead to some odd behavior if the value isn't consistent. For example, if the default value is the value of an environment variable that may differ among users then the actual default value will be different for each user. In this case in documentation, it would be better to tell users a description of the default value rather than the actual value.\n",source:"@site/docs/examples/default-values.md",sourceDirName:"examples",slug:"/examples/default-values",permalink:"/cli-forge/examples/default-values",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"default-values",title:"Default Values",description:"This is a simple example that demonstrates the various ways you can set default values for options.\n\nThe default value can be set via the `default` property in an option definition. This can be done in three ways:\n- Setting the `default` property to a value directly\n- Setting the `default` property to an object containing function that returns a value and a description\n- Setting the `default` property to an object containing a value and a description\n\nSetting the `default` property to a value directly is the simplest way to set a default value, but can lead to some odd behavior if the value isn't consistent. For example, if the default value is the value of an environment variable that may differ among users then the actual default value will be different for each user. In this case in documentation, it would be better to tell users a description of the default value rather than the actual value.\n",hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Conflicts and Implications",permalink:"/cli-forge/examples/conflicts-and-implications"},next:{title:"Environment Options",permalink:"/cli-forge/examples/env-options"}},r={},u=[{value:"Code",id:"code",level:2},{value:"Usage",id:"usage",level:2}];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"default-values",children:"Default Values"})}),"\n",(0,n.jsx)(t.p,{children:"This is a simple example that demonstrates the various ways you can set default values for options."}),"\n",(0,n.jsxs)(t.p,{children:["The default value can be set via the ",(0,n.jsx)(t.code,{children:"default"})," property in an option definition. This can be done in three ways:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Setting the ",(0,n.jsx)(t.code,{children:"default"})," property to a value directly"]}),"\n",(0,n.jsxs)(t.li,{children:["Setting the ",(0,n.jsx)(t.code,{children:"default"})," property to an object containing function that returns a value and a description"]}),"\n",(0,n.jsxs)(t.li,{children:["Setting the ",(0,n.jsx)(t.code,{children:"default"})," property to an object containing a value and a description"]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["Setting the ",(0,n.jsx)(t.code,{children:"default"})," property to a value directly is the simplest way to set a default value, but can lead to some odd behavior if the value isn't consistent. For example, if the default value is the value of an environment variable that may differ among users then the actual default value will be different for each user. In this case in documentation, it would be better to tell users a description of the default value rather than the actual value."]}),"\n",(0,n.jsx)(t.h2,{id:"code",children:"Code"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",metastring:'title="Default Values" showLineNumbers',children:"import cliForge from 'cli-forge';\n\nconst cli = cliForge('default-values').command('$0', {\n  builder: (args) =>\n    args\n      .option('name', {\n        type: 'string',\n        description: 'The name to say hello to',\n        // Setting the default value directly\n        default: 'World',\n      })\n      .option('greeting', {\n        type: 'string',\n        description: 'The greeting to use',\n        // Setting the default value to an object containing a value and a description\n        default: {\n          // The value here may be different across command runs. In docs,\n          // we want a consistent description of the default value.\n          value: process.env['DEFAULT_VALUES_HELLO'] ?? 'Hello',\n          description: 'The default greeting',\n        },\n      })\n      .option('farewell', {\n        type: 'string',\n        description: 'The farewell to use',\n        // Setting the default value to an object containing a function that returns a value and a description\n        default: {\n          // The value here may be different across command runs. In docs,\n          // we want a consistent description of the default. Using a factory function\n          // gives more flexibility compared to the value + description method above.\n          factory: () => {\n            if (process.arch === 'x64') {\n              return 'Goodbye';\n            } else {\n              return 'Goodnight';\n            }\n          },\n          description: 'The default farewell',\n        },\n      }),\n  handler: (args) => {\n    console.log(`${args.greeting}, ${args.name}!`);\n    console.log(`${args.farewell}, ${args.name}!`);\n  },\n});\n\nexport default cli;\n\nif (require.main === module) {\n  (async () => {\n    await cli.forge();\n  })();\n}\n\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"/playground/#PTAEBUAsFNQMwPYBskIO4EsB2BzUTtYATBaAZywHIAXUE0AQywE9rJs8AnaBlZgGlCcGbaJ1AZa1aCjIAoEKFERmAB2gBlAMacMq2qqQNmOTggCuWIksgibGMqDI69tMpAtJrAI1jQAbrzmItDWDI4MoFgIRNAAVo7OuvoAdHIYALaqCJy0AN4AvvBmGaCU0bEAXHBklHLpWTm0WgQAYjk4sHAlZS0YALSInJ2UANz1WghYZM0EoAC8oH3tw9AAFJSxcAzmSNT9gUjm5JQAlCmTGRlMRBsAJAAMlIJ5cqCg3uYYXmKVoGsMYZkU4LAB8b3ejCBEMhoBSCH0GCmGywDAy0GeoFesNh1DU0D+lBmulwzxhONiSVcSKwhKgsFR6KUCCcxlAMBQLOoCDJOMhig00Go1A4NmI0G2u1oh2OdAw3C01CQzHJsK2Oz2hIA6jkvLycQVTqq4QiRcjKKZoEKOJjsXylPjCcSbfxje9KS5EVM6TBQJbrbhmaBzGQMa77aABUKRYHlOqpaAZbBuYwsKAEN44tBFUsptQGNhRZEk6mwnRyJ6zVg3eXJZqsTX3op6YmgrAYNxQNdmB9iBg4HAxNAsLQGDoEGRHJdrlYhJYyClQABJNMkLRkcMRyNgNCwNBMUe56YOaQj8tUr1phBwMW1jXSttpLeto4E0CqMxacgL4f+ADalAACIAKKtAAggAqgAMuAAD6ABqYFQRBwEaLBAASwFQVBADylAALqgAA-ERZToTIqD6hGHrJFWPrinWtD+jGOBUQam6woaxrwpeGzbNwu4oLaNZ4uoTrUCSrEcRSFa0TS9HwIC0CCUgQYhmGNZRsKopxhK94vrKKZMOmmbZs0eYFlgRbwJYio0jYdjcNQ5icNMjAGbANzuTR1JTDW8b1naEbNr6JYdrA3a9nKA5DmeY5mJOuZXF5nDzouK50Ag67SXyii7qA+5xUeZAnsOtA+Ze6Y3rpjGLhBJWBpE2yKjkPZwLZVaNtufoYP45BdjkXRINAAAeGDeN8kg9pcqhKdYKbKCWADU56VvZ6JsDEjDeAgfVPluzXcpwzB-GsILzKCDbPu8-b-B+WXfikgJaJACzzIslAjQAbAALGcV3Xe8TkuWmlAAOIIDE3jMBi4yA0UMihgDgPA65ZQQzEVk4JA1BjF17wFF1BQ5TJF50WULYBbQ-HKRRbGcSThqbrYVjDZwp2AjgwJgsjxXINAKSoDgawAAZ3HknMLsxHDE6A4uSykjLQAUACEIunHDkKTNM-OCwgwtixLQIpDTKmy-LxtK6r6ua8TciGuMcijdkuR3gmfSO7dazcAAjl83ApNc2BvYsGQxLs0AgnaAJkMwWBaP852XUFjD7pISwECbHTrBrEKGmd4yE0AA",children:"View on TypeScript Playground"})}),"\n",(0,n.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-shell",children:"node ./default-values.js\n"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-shell",children:"node ./default-values.js --name sir\n"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-shell",children:'node ./default-values.js --greeting "Good day"\n'})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-shell",children:'DEFAULT_VALUES_HELLO=Greetings node ./default-values.js --farewell "Goodbye"\n'})}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsx)(t.p,{children:"These examples are ran as e2e tests on pull-requests and releases to verify they are accurate and up to date. If you see any issues, please open an issue on the github repo."}),"\n"]})]})}function c(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},43023:(e,t,a)=>{a.d(t,{R:()=>o,x:()=>s});var n=a(63696);const l={},i=n.createContext(l);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);