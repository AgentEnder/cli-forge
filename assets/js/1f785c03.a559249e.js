"use strict";(self.webpackChunk_cli_forge_docs_site=self.webpackChunk_cli_forge_docs_site||[]).push([[1292],{8988:e=>{e.exports=JSON.parse("{\"file:///node_modules/cli-forge/bin/cli.d.ts\":\"#!/usr/bin/env node\\ndeclare const mycli: import(\\\"../src\\\").CLI<{\\n    unmatched: string[];\\n    '--'?: string[];\\n}>;\\nexport default mycli;\\n\",\"file:///node_modules/cli-forge/src/index.d.ts\":\"export { TestHarness } from './lib/test-harness';\\nexport * from './lib/public-api';\\nexport { default } from './lib/public-api';\\nexport { chain } from '@cli-forge/parser';\\nexport { makeComposableBuilder } from './lib/composable-builder';\\nexport { ArgumentsOf } from './lib/utils';\\nexport { ConfigurationProviders } from './lib/configuration-providers';\\n\",\"file:///node_modules/cli-forge/bin/commands/generate-documentation.d.ts\":\"import type { ParsedArgs } from '@cli-forge/parser';\\nimport { CLI } from '../../src';\\nexport declare function withGenerateDocumentationArgs<T extends ParsedArgs>(cmd: CLI<T>): CLI<T & {\\n    cli: string;\\n} & {\\n    output: string;\\n} & {\\n    format: \\\"md\\\" | \\\"json\\\";\\n} & {\\n    export: string | undefined;\\n} & {\\n    tsconfig: string | undefined;\\n}>;\\nexport declare const generateDocumentationCommand: CLI;\\n\",\"file:///node_modules/cli-forge/bin/commands/init.d.ts\":\"import type { ParsedArgs } from '@cli-forge/parser';\\nimport { CLI } from '../../src';\\nexport declare function withInitArgs<T extends ParsedArgs>(cmd: CLI<T>): CLI<T & {\\n    cliName: string;\\n} & {\\n    output: string | undefined;\\n} & {\\n    format: \\\"ts\\\" | \\\"js\\\";\\n} & {\\n    initialVersion: string;\\n}>;\\nexport declare const initCommand: CLI<{\\n    unmatched: string[];\\n    '--'?: string[];\\n} & {\\n    cliName: string;\\n} & {\\n    output: string | undefined;\\n} & {\\n    format: \\\"ts\\\" | \\\"js\\\";\\n} & {\\n    initialVersion: string;\\n}>;\\n\",\"file:///node_modules/cli-forge/bin/utils/fs.d.ts\":\"export declare function ensureDirSync(dir: string): void;\\n\",\"file:///node_modules/cli-forge/src/lib/cli-option-groups.d.ts\":\"import { InternalOptionConfig } from '@cli-forge/parser';\\nimport { InternalCLI } from './internal-cli';\\nexport declare function readOptionGroupsForCLI(parentCLI: InternalCLI<any>): {\\n    label: string;\\n    sortOrder: number;\\n    keys: Array<InternalOptionConfig>;\\n}[];\\n\",\"file:///node_modules/cli-forge/src/lib/composable-builder.d.ts\":\"import { ParsedArgs } from '@cli-forge/parser';\\nimport { CLI } from './public-api';\\nexport declare function makeComposableBuilder<T2 extends ParsedArgs>(fn: (init: CLI<ParsedArgs>) => CLI<T2>): <TInit extends ParsedArgs>(init: CLI<TInit>) => CLI<TInit & T2>;\\n\",\"file:///node_modules/cli-forge/src/lib/configuration-providers.d.ts\":\"import { ConfigurationFiles } from '@cli-forge/parser';\\n/**\\n * A collection of built-in configuration provider factories. These should be invoked and passed to\\n * {@link CLI.config} to load configuration from various sources. For custom configuration providers, see\\n * https://craigory.dev/cli-forge/api/parser/namespaces/ConfigurationFiles/type-aliases/ConfigurationProvider\\n *\\n * @example\\n * ```typescript\\n * import { cli, ConfigurationProviders } from 'cli-forge';\\n *\\n * cli(...).config(ConfigurationProviders.PackageJson('myConfig'));\\n * ```\\n */\\nexport declare const ConfigurationProviders: {\\n    /**\\n     * Load configuration from a package.json file.\\n     *\\n     * @param key The key in the package.json file to load as configuration.\\n     */\\n    PackageJson<T>(key: string): ConfigurationFiles.ConfigurationProvider<T>;\\n    /**\\n     * Load configuration from a JSON file.\\n     *\\n     * @param filename The filename of the JSON file to load.\\n     * @param key The key in the JSON file to load as configuration. By default, the entire JSON object is loaded.\\n     */\\n    JsonFile<T>(filename: string, key?: string): ConfigurationFiles.ConfigurationProvider<T>;\\n};\\n\",\"file:///node_modules/cli-forge/src/lib/documentation.d.ts\":\"import { OptionConfig, OptionConfigToType } from '@cli-forge/parser';\\nimport { InternalCLI } from './internal-cli';\\nexport type Documentation = {\\n    name: string;\\n    description?: string;\\n    epilogue?: string;\\n    usage: string;\\n    examples: string[];\\n    options: Readonly<Record<string, NormalizedOptionConfig>>;\\n    positionals: readonly Readonly<NormalizedOptionConfig>[];\\n    groupedOptions: Array<{\\n        label: string;\\n        keys: Array<NormalizedOptionConfig>;\\n    }>;\\n    subcommands: Documentation[];\\n};\\ndeclare function normalizeOptionConfigForDocumentation<T extends OptionConfig>(option: T, key: string): Omit<T, \\\"default\\\"> & {\\n    key: string;\\n    default?: OptionConfigToType<T> | string | undefined;\\n};\\ntype NormalizedOptionConfig<T extends OptionConfig = OptionConfig> = ReturnType<typeof normalizeOptionConfigForDocumentation<T>>;\\nexport declare function generateDocumentation(cli: InternalCLI, commandChain?: string[]): Documentation;\\nexport {};\\n\",\"file:///node_modules/cli-forge/src/lib/format-help.d.ts\":\"import { InternalCLI } from './internal-cli';\\nexport declare function formatHelp(parentCLI: InternalCLI<any>): string;\\n\",\"file:///node_modules/cli-forge/src/lib/interactive-shell.d.ts\":\"import { InternalCLI } from './internal-cli';\\nexport interface InteractiveShellOptions {\\n    prompt?: string;\\n    prependArgs?: string[];\\n}\\nexport declare let INTERACTIVE_SHELL: InteractiveShell | undefined;\\nexport declare class InteractiveShell {\\n    private readonly rl;\\n    private listeners;\\n    constructor(cli: InternalCLI<any>, opts?: InteractiveShellOptions);\\n    registerLineListener(callback: (line: string) => Promise<void>): void;\\n    close(): void;\\n}\\n\",\"file:///node_modules/cli-forge/src/lib/internal-cli.d.ts\":\"import { ArgvParser, EnvOptionConfig, OptionConfig, ParsedArgs, type ConfigurationFiles } from '@cli-forge/parser';\\nimport { CLI, CLICommandOptions, Command, ErrorHandler } from './public-api';\\n/**\\n * The base class for a CLI application. This class is used to define the structure of the CLI.\\n *\\n * {@link cli} is provided as a small helper function to create a new CLI instance.\\n *\\n * @example\\n * ```ts\\n * import { cli } from 'cli-forge';\\n *\\n * cli('basic-cli').command('hello', {\\n *   builder: (args) =>\\n *    args.option('name', {\\n *      type: 'string',\\n *    }),\\n *   handler: (args) => {\\n *     console.log(`Hello, ${args.name}!`);\\n *   }).forge();\\n * ```\\n */\\nexport declare class InternalCLI<TArgs extends ParsedArgs = ParsedArgs> implements CLI<TArgs> {\\n    name: string;\\n    /**\\n     * For internal use only. Stick to properties available on {@link CLI}.\\n     */\\n    registeredCommands: Record<string, InternalCLI<any>>;\\n    /**\\n     * For internal use only. Stick to properties available on {@link CLI}.\\n     */\\n    commandChain: string[];\\n    private requiresCommand;\\n    private _configuration?;\\n    private _versionOverride?;\\n    private registeredErrorHandlers;\\n    private registeredMiddleware;\\n    /**\\n     * A list of option groups that have been registered with the CLI. Grouped Options are displayed together in the help text.\\n     *\\n     * For internal use only. Stick to properties available on {@link CLI}.\\n     */\\n    registeredOptionGroups: Array<{\\n        label: string;\\n        sortOrder: number;\\n        keys: Array<keyof TArgs>;\\n    }>;\\n    getGroupedOptions(): {\\n        label: string;\\n        sortOrder: number;\\n        keys: Array<import(\\\"@cli-forge/parser\\\").InternalOptionConfig>;\\n    }[];\\n    get configuration(): CLICommandOptions<any, any> | undefined;\\n    private set configuration(value);\\n    /**\\n     * The parser used to parse the arguments for the current command.\\n     *\\n     * Meant for internal use only. Stick to properties available on {@link CLI}.\\n     *\\n     * If you need this kind of info, please open an issue on the GitHub repo with\\n     * your use case.\\n     */\\n    parser: ArgvParser<TArgs & {\\n        help: boolean | undefined;\\n    } & {\\n        version: boolean | undefined;\\n    }>;\\n    /**\\n     * @param name What should the name of the cli command be?\\n     * @param configuration Configuration for the current CLI command.\\n     */\\n    constructor(name: string, rootCommandConfiguration?: CLICommandOptions<TArgs>);\\n    withRootCommandConfiguration<TRootCommandArgs extends TArgs>(configuration: CLICommandOptions<TArgs, TRootCommandArgs>): InternalCLI<TArgs>;\\n    command<TCommandArgs extends TArgs>(keyOrCommand: string | Command<TArgs, TCommandArgs>, options?: CLICommandOptions<TArgs, TCommandArgs>): CLI<TArgs>;\\n    commands(...a0: Command[] | Command[][]): CLI<TArgs>;\\n    option<TOption extends string, TOptionConfig extends OptionConfig>(name: TOption, config: TOptionConfig): any;\\n    positional<TOption extends string, TOptionConfig extends OptionConfig>(name: TOption, config: TOptionConfig): any;\\n    conflicts(...args: [string, string, ...string[]]): CLI<TArgs>;\\n    implies(option: string, ...impliedOptions: string[]): CLI<TArgs>;\\n    env(a0?: string | EnvOptionConfig | undefined): this;\\n    demandCommand(): this;\\n    usage(usageText: string): this;\\n    examples(...examples: string[]): this;\\n    version(version?: string): this;\\n    /**\\n     * Gets help text for the current command as a string.\\n     * @returns Help text for the current command.\\n     */\\n    formatHelp(): string;\\n    /**\\n     * Prints help text for the current command to the console.\\n     */\\n    printHelp(): void;\\n    middleware(callback: (args: TArgs) => void): CLI<TArgs>;\\n    /**\\n     * Runs the current command.\\n     * @param cmd The command to run.\\n     * @param args The arguments to pass to the command.\\n     */\\n    runCommand<T extends ParsedArgs>(args: T, originalArgV: string[]): Promise<void>;\\n    enableInteractiveShell(): this;\\n    private versionHandler;\\n    private withErrorHandlers;\\n    errorHandler(handler: ErrorHandler): this;\\n    group(labelOrConfigObject: string | {\\n        label: string;\\n        keys: (keyof TArgs)[];\\n        sortOrder: number;\\n    }, keys?: (keyof TArgs)[]): CLI<TArgs>;\\n    config(provider: ConfigurationFiles.ConfigurationProvider<TArgs>): CLI<TArgs>;\\n    /**\\n     * Parses argv and executes the CLI\\n     * @param args argv. Defaults to process.argv.slice(2)\\n     * @returns Promise that resolves when the handler completes.\\n     */\\n    forge: (args?: string[]) => Promise<Awaited<TArgs>>;\\n    getParser(): import(\\\"@cli-forge/parser\\\").ReadonlyArgvParser<TArgs & {\\n        help: boolean | undefined;\\n    } & {\\n        version: boolean | undefined;\\n    }>;\\n    getSubcommands(): Readonly<Record<string, InternalCLI>>;\\n    clone(): InternalCLI<TArgs>;\\n}\\n\",\"file:///node_modules/cli-forge/src/lib/public-api.d.ts\":\"import { type ConfigurationFiles, OptionConfig, OptionConfigToType, ParsedArgs, EnvOptionConfig } from '@cli-forge/parser';\\n/**\\n * The interface for a CLI application or subcommands.\\n *\\n * {@link cli} is provided as a small helper function to create a new CLI instance.\\n *\\n * @example\\n * ```ts\\n * import { cli } from 'cli-forge';\\n *\\n * cli('basic-cli').command('hello', {\\n *   builder: (args) =>\\n *    args.option('name', {\\n *      type: 'string',\\n *    }),\\n *   handler: (args) => {\\n *     console.log(`Hello, ${args.name}!`);\\n *   }).forge();\\n * ```\\n */\\nexport interface CLI<TArgs extends ParsedArgs = ParsedArgs> {\\n    command<TCommandArgs extends TArgs>(cmd: Command<TArgs, TCommandArgs>): CLI<TArgs>;\\n    /**\\n     * Registers a new command with the CLI.\\n     * @param key What should the new command be called?\\n     * @param options Settings for the new command. See {@link CLICommandOptions}.\\n     * @returns Updated CLI instance with the new command registered.\\n     */\\n    command<TCommandArgs extends TArgs>(key: string, options: CLICommandOptions<TArgs, TCommandArgs>): CLI<TArgs>;\\n    /**\\n     * Registers multiple subcommands with the CLI.\\n     * @param commands Several commands to register. Can be the result of a call to {@link cli} or a configuration object.\\n     */\\n    commands(commands: Command[]): CLI<TArgs>;\\n    /**\\n     * Registers multiple subcommands with the CLI.\\n     * @param commands Several commands to register. Can be the result of a call to {@link cli} or a configuration object.\\n     */\\n    commands(...commands: Command[]): CLI<TArgs>;\\n    /**\\n     * Register's a configuration provider for the CLI. See {@link ConfigurationProviders} for built-in providers.\\n     *\\n     * @param provider Provider to register.\\n     */\\n    config(provider: ConfigurationFiles.ConfigurationProvider<TArgs>): CLI<TArgs>;\\n    /**\\n     * Enables the ability to run CLI commands that contain subcommands as an interactive shell.\\n     * This presents as a small shell that only knows the current command and its subcommands.\\n     * Any flags already consumed by the command will be passed to every subcommand invocation.\\n     */\\n    enableInteractiveShell(): CLI<TArgs>;\\n    /**\\n     * Registers a custom global error handler for the CLI. This handler will be called when an error is thrown\\n     * during the execution of the CLI and not otherwise handled. Error handlers should re-throw the error if they\\n     * cannot handle it, s.t. the next error handler can attempt to handle it.\\n     *\\n     * @param handler Typically called with an Error object, but you should be prepared to handle any type of error.\\n     * @param actions Actions that can be taken by the error handler. Prefer using these over process.exit for better support of interactive shells.\\n     */\\n    errorHandler(handler: ErrorHandler): CLI<TArgs>;\\n    /**\\n     * Registers a new option for the CLI command. This option will be accessible\\n     * within the command handler, as well as any subcommands.\\n     *\\n     * @param name The name of the option.\\n     * @param config Configuration for the option. See {@link OptionConfig}.\\n     * @returns Updated CLI instance with the new option registered.\\n     */\\n    option<TOption extends string, const TOptionConfig extends OptionConfig>(name: TOption, config: TOptionConfig): CLI<TArgs & {\\n        [key in TOption]: OptionConfigToType<TOptionConfig>;\\n    }>;\\n    /**\\n     * Registers a new positional argument for the CLI command. This argument will be accessible\\n     * within the command handler, as well as any subcommands.\\n     * @param name The name of the positional argument.\\n     * @param config Configuration for the positional argument. See {@link OptionConfig}.\\n     * @returns Updated CLI instance with the new positional argument registered.\\n     */\\n    positional<TOption extends string, const TOptionConfig extends OptionConfig>(name: TOption, config: TOptionConfig): CLI<TArgs & {\\n        [key in TOption]: OptionConfigToType<TOptionConfig>;\\n    }>;\\n    /**\\n     * Adds support for reading CLI options from environment variables.\\n     * @param prefix The prefix to use when looking up environment variables. Defaults to the command name.\\n     */\\n    env(prefix?: string): CLI<TArgs>;\\n    env(options: EnvOptionConfig): CLI<TArgs>;\\n    /**\\n     * Sets a group of options as mutually exclusive. If more than one option is provided, there will be a validation error.\\n     * @param options The options that should be mutually exclusive.\\n     */\\n    conflicts(...options: [string, string, ...string[]]): CLI<TArgs>;\\n    /**\\n     * Sets a group of options as mutually inclusive. If one option is provided, all other options must also be provided.\\n     * @param option The option that implies the other options.\\n     * @param impliedOptions The options which become required when the option is provided.\\n     */\\n    implies(option: string, ...impliedOptions: string[]): CLI<TArgs>;\\n    /**\\n     * Requires a command to be provided when executing the CLI. Useful if your parent command\\n     * cannot be executed on its own.\\n     * @returns Updated CLI instance.\\n     */\\n    demandCommand(): CLI<TArgs>;\\n    /**\\n     * Sets the usage text for the CLI. This text will be displayed in place of the default usage text\\n     * @param usageText Text displayed in place of the default usage text for `--help` and in generated docs.\\n     */\\n    usage(usageText: string): CLI<TArgs>;\\n    /**\\n     * Sets the description for the CLI. This text will be displayed in the help text and generated docs.\\n     * @param examples Examples to display in the help text and generated docs.\\n     */\\n    examples(...examples: string[]): CLI<TArgs>;\\n    /**\\n     * Allows overriding the version displayed when passing `--version`. Defaults to crawling\\n     * the file system to get the package.json of the currently executing command.\\n     * @param override\\n     */\\n    version(override?: string): CLI<TArgs>;\\n    /**\\n     * Prints help text to stdout.\\n     */\\n    printHelp(): void;\\n    group({ label, keys, sortOrder, }: {\\n        label: string;\\n        keys: (keyof TArgs)[];\\n        sortOrder: number;\\n    }): CLI<TArgs>;\\n    group(label: string, keys: (keyof TArgs)[]): CLI<TArgs>;\\n    middleware(callback: (args: TArgs) => void): CLI<TArgs>;\\n    /**\\n     * Parses argv and executes the CLI\\n     * @param args argv. Defaults to process.argv.slice(2)\\n     * @returns Promise that resolves when the handler completes.\\n     */\\n    forge(args?: string[]): Promise<TArgs>;\\n}\\nexport interface CLIHandlerContext {\\n    command: CLI<any>;\\n}\\n/**\\n * Represents the configuration needed to create a CLI command.\\n */\\nexport interface CLICommandOptions<\\n/**\\n * The type of the arguments that are already registered before `builder` is invoked.\\n */\\nTInitial extends ParsedArgs, \\n/**\\n * The type of the arguments that are registered after `builder` is invoked, and the type that is passed to the handler.\\n */\\nTArgs extends TInitial = TInitial> {\\n    /**\\n     * If set the command will be registered under the provided name and any aliases.\\n     *\\n     * This can be useful if a command should be executed under more than one name, e.g. `npx my-cli` and `npx my-cli hello`.\\n     */\\n    alias?: string[];\\n    /**\\n     * The command description. This will be displayed in the help text and generated docs.\\n     */\\n    description?: string;\\n    /**\\n     * The command builder. This function is called before the command is executed, and is used to register options and positional parameters.\\n     * @param parser The parser instance to register options and positionals with.\\n     */\\n    builder?: (parser: CLI<TInitial>) => CLI<TArgs>;\\n    /**\\n     * The command handler. This function is called when the command is executed.\\n     * @param args The parsed arguments.\\n     * @param context Context for the handler. Contains the command instance.\\n     */\\n    handler?: (args: TArgs, context: CLIHandlerContext) => void | Promise<void>;\\n    /**\\n     * The usage text for the command. This text will be displayed in place of the default usage text in the help text and generated docs.\\n     */\\n    usage?: string;\\n    /**\\n     * Examples to display in the help text and generated docs.\\n     */\\n    examples?: string[];\\n    /**\\n     * Hides the command from the help text and generated docs. Useful primarily for experimental or internal commands.\\n     */\\n    hidden?: boolean;\\n    /**\\n     * The epilogue text for the command. This text will be displayed at the end of the help text and generated docs.\\n     */\\n    epilogue?: string;\\n}\\nexport type Command<TInitial extends ParsedArgs = any, TArgs extends TInitial = TInitial> = ({\\n    name: string;\\n} & CLICommandOptions<TInitial, TArgs>) | CLI<TArgs>;\\n/**\\n * Error Handler for CLI applications. Error handlers should re-throw the error if they cannot handle it.\\n *\\n * @param e The error that was thrown.\\n * @param actions Actions that can be taken by the error handler. Prefer using these over process.exit for better support of interactive shells.\\n */\\nexport type ErrorHandler = (e: unknown, actions: {\\n    /**\\n     * Exits the process immediately.\\n     * @param code\\n     */\\n    exit: (code?: number) => void;\\n}) => void;\\n/**\\n * Constructs a CLI instance. See {@link CLI} for more information.\\n * @param name Name for the top level CLI\\n * @param rootCommandConfiguration Configuration used when running the bare CLI. e.g. npx my-cli, rather than npx my-cli [cmd]\\n * @returns A {@link CLI} instance.\\n */\\nexport declare function cli<TArgs extends ParsedArgs>(name: string, rootCommandConfiguration?: CLICommandOptions<ParsedArgs, TArgs>): CLI<TArgs>;\\nexport default cli;\\n\",\"file:///node_modules/cli-forge/src/lib/test-harness.d.ts\":\"import { ParsedArgs } from '@cli-forge/parser';\\nimport { CLI } from './public-api';\\nexport type TestHarnessParseResult<T extends ParsedArgs> = {\\n    /**\\n     * Parsed arguments. Note the the typing of this is based on the CLI typings,\\n     * but no runtime validation outside of the configured validation checks on\\n     * individual options will be performed. If you want to validate the arguments,\\n     * you should do so in your test or configure a `validate` callback for the option.\\n     */\\n    args: T;\\n    /**\\n     * The command chain that was resolved during parsing. This is used for testing\\n     * that the correct command is ran when resolving a subcommand. A test that checks\\n     * this may look like:\\n     *\\n     * ```ts\\n     * const harness = new TestHarness(cli);\\n     * const { args, commandChain } = await harness.parse(['hello', '--name=sir']);\\n     * expect(commandChain).toEqual(['hello']);\\n     * ```\\n     *\\n     * The above test would check that the `hello` command was resolved when parsing\\n     * the argstring, and since only one command's handler will ever be called, this\\n     * can be used to ensure that the correct command is ran.\\n     */\\n    commandChain: string[];\\n};\\n/**\\n * Utility for testing CLI instances. Can check argument parsing and validation, including\\n * command chain resolution.\\n */\\nexport declare class TestHarness<T extends ParsedArgs> {\\n    private cli;\\n    constructor(cli: CLI<T>);\\n    parse(args: string[]): Promise<TestHarnessParseResult<T>>;\\n}\\n\",\"file:///node_modules/cli-forge/src/lib/utils.d.ts\":\"import { CLI } from './public-api';\\nexport declare function getCallingFile(): string | undefined;\\nexport declare function getParentPackageJson(searchPath: string): {\\n    name: string;\\n    version: string;\\n    bin?: {\\n        [cmd: string]: string;\\n    };\\n    dependencies?: Record<string, string>;\\n};\\nexport declare function stringToArgs(str: string): string[];\\n/**\\n * Resolves the arguments added to a CLI instance by a builder function. Useful\\n * for typing the arguments of a command handler when using composable builders.\\n *\\n * @typeParam T - A function that takes a CLI instance and returns a new CLI instance with additional options, commands etc.\\n */\\nexport type ArgumentsOf<T> = T extends (...args: any[]) => CLI<infer TArgs> ? TArgs : never;\\n\",\"file:///node_modules/cli-forge/package.json\":\"{\\n  \\\"name\\\": \\\"cli-forge\\\",\\n  \\\"version\\\": \\\"0.0.1\\\",\\n  \\\"dependencies\\\": {\\n    \\\"tslib\\\": \\\"^2.3.0\\\",\\n    \\\"@cli-forge/parser\\\": \\\"file:../parser\\\"\\n  },\\n  \\\"peerDependencies\\\": {\\n    \\\"markdown-factory\\\": \\\"0.2.0\\\",\\n    \\\"tsx\\\": \\\"4.19.0\\\"\\n  },\\n  \\\"peerDependenciesMeta\\\": {\\n    \\\"markdown-factory\\\": {\\n      \\\"optional\\\": true,\\n      \\\"dev\\\": true\\n    },\\n    \\\"tsx\\\": {\\n      \\\"optional\\\": true,\\n      \\\"dev\\\": true\\n    }\\n  },\\n  \\\"type\\\": \\\"commonjs\\\",\\n  \\\"main\\\": \\\"./src/index.js\\\",\\n  \\\"typings\\\": \\\"./src/index.d.ts\\\",\\n  \\\"license\\\": \\\"ISC\\\",\\n  \\\"repository\\\": {\\n    \\\"type\\\": \\\"git\\\",\\n    \\\"directory\\\": \\\"packages/cli-forge\\\",\\n    \\\"url\\\": \\\"https://github.com/AgentEnder/cli-forge\\\"\\n  },\\n  \\\"bin\\\": {\\n    \\\"cli-forge\\\": \\\"./bin/cli.js\\\"\\n  },\\n  \\\"publishConfig\\\": {\\n    \\\"access\\\": \\\"public\\\"\\n  },\\n  \\\"types\\\": \\\"./src/index.d.ts\\\"\\n}\",\"file:///node_modules/@cli-forge/parser/src/index.d.ts\":\"export * from './lib/parser';\\nexport * from './lib/utils/case-transformations';\\nexport * from './lib/helpers';\\nexport * from './lib/option-types';\\nexport * from './lib/utils/read-default-value';\\nexport * from './lib/utils/chain';\\n/**\\n * Types and utilities for working with configuration files.\\n */\\nexport * as ConfigurationFiles from './lib/config-files';\\n\",\"file:///node_modules/@cli-forge/parser/src/lib/helpers.d.ts\":\"export declare function hideBin(argv: string[]): string[];\\nexport declare function getBin(argv: string[]): string;\\n\",\"file:///node_modules/@cli-forge/parser/src/lib/parser.d.ts\":\"import { OptionConfigToType } from './option-types/option-config-to-type';\\nimport { InternalOptionConfig, OptionConfig } from './option-types';\\nimport { Parser, ParserContext } from './parsers/typings';\\nimport { ConfigurationProvider } from './config-files/configuration-loader';\\n/**\\n * Defines the option configuration passed to {@link ArgvParser.env}.\\n */\\nexport type EnvOptionConfig = {\\n    prefix?: string;\\n    reflect?: boolean;\\n    populate?: boolean;\\n};\\n/**\\n * Base type for parsed arguments.\\n */\\nexport type ParsedArgs<T = never> = [T] extends [never] ? {\\n    /**\\n     * Contains any unmatched arguments as originally passed to the parser.\\n     */\\n    unmatched: string[];\\n    /**\\n     * Contains any arguments passed after `--`, which halts parsing of flags.\\n     */\\n    '--'?: string[];\\n} : {\\n    /**\\n     * Contains any unmatched arguments as originally passed to the parser.\\n     */\\n    unmatched: string[];\\n    /**\\n     * Contains any arguments passed after `--`, which halts parsing of flags.\\n     */\\n    '--'?: string[];\\n} & T;\\n/**\\n * Extra options for the parser\\n */\\nexport type ParserOptions<T extends ParsedArgs = ParsedArgs> = {\\n    /**\\n     * Can be used to implement custom parser types.\\n     */\\n    extraParsers?: Record<string, Parser<any>>;\\n    /**\\n     * Can be used to implement custom handling for unmatched arguments.\\n     * @returns true if the argument was handled, false if it was not\\n     */\\n    unmatchedParser?: (arg: string, tokens: string[], parser: ArgvParser<T>) => boolean;\\n};\\nexport interface ReadonlyArgvParser<TArgs extends ParsedArgs> {\\n    configuredOptions: Readonly<{\\n        [key in keyof TArgs]: InternalOptionConfig;\\n    }>;\\n    configuredPositionals: readonly Readonly<InternalOptionConfig>[];\\n    options: Readonly<Required<ParserOptions<TArgs>>>;\\n}\\n/**\\n * The main parser class. This class is used to configure and parse arguments.\\n *\\n * {@link parser} is a small helper function to create a new parser instance.\\n */\\nexport declare class ArgvParser<TArgs extends ParsedArgs = {\\n    unmatched: string[];\\n}> implements ReadonlyArgvParser<TArgs> {\\n    /**\\n     * The configured options for the parser.\\n     */\\n    configuredOptions: {\\n        [key in keyof TArgs]: InternalOptionConfig;\\n    };\\n    /**\\n     * The configured positional arguments for the parser\\n     */\\n    configuredPositionals: InternalOptionConfig[];\\n    /**\\n     * The configured conflicts for the parser. If an option is set, and a conflicting option is also set, an error will be thrown.\\n     */\\n    configuredConflicts: Record<string, Set<string>>;\\n    /**\\n     * The configured implies for the parser. If an option is set, the implied option must also be set.\\n     */\\n    configuredImplies: Record<string, Set<string>>;\\n    /**\\n     * The configuration for the parser itself\\n     */\\n    options: Required<ParserOptions<TArgs>>;\\n    /**\\n     * The parsers used to parse individual option types.\\n     */\\n    parserMap: Record<string, Parser<any>>;\\n    private configuredConfigurationProviders;\\n    /**\\n     * If set, options can be populated from environment variables of the form `${envPrefix}_${optionName}`.\\n     */\\n    private envPrefix?;\\n    private shouldReadFromEnv?;\\n    private shouldReflectEnv?;\\n    /**\\n     * Creates a new parser. Normally using {@link parser} is preferred.\\n     * @param options\\n     */\\n    constructor(options?: ParserOptions<TArgs>);\\n    /**\\n     * Registers a new option with the parser.\\n     * @param name The name of the option\\n     * @param config The configuration for the option. See {@link OptionConfig}\\n     * @returns Updated parser instance with the new option registered.\\n     */\\n    option<TOption extends string, const TOptionConfig extends OptionConfig<any>>(name: TOption, config: TOptionConfig): ArgvParser<TArgs & { [key in TOption]: OptionConfigToType<TOptionConfig>; }>;\\n    /**\\n     * Registers a new positional argument with the parser.\\n     * @param name The name of the positional argument\\n     * @param config The configuration for the positional argument. See {@link OptionConfig}\\n     * @returns Updated parser instance with the new positional argument registered.\\n     */\\n    positional<TOption extends string, const TOptionConfig extends OptionConfig<any>>(name: TOption, config: TOptionConfig): ArgvParser<TArgs & { [key in TOption]: import(\\\"./option-types\\\").UndefinedIfRequiredAndNoDefault<TOptionConfig & {\\n        readonly positional: true;\\n    }, (\\\"choices\\\" extends \\\"positional\\\" | keyof TOptionConfig ? (TOptionConfig & {\\n        readonly positional: true;\\n    })[keyof TOptionConfig & \\\"choices\\\"] extends (infer TChoice)[] ? TChoice : (TOptionConfig & {\\n        readonly positional: true;\\n    })[keyof TOptionConfig & \\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never) extends [never] ? (TOptionConfig & {\\n        readonly positional: true;\\n    })[\\\"coerce\\\"] extends (s: any) => any ? ReturnType<(TOptionConfig & {\\n        readonly positional: true;\\n    })[\\\"coerce\\\"]> : {\\n        string: string;\\n        number: number;\\n        boolean: boolean;\\n        array: (TOptionConfig & {\\n            readonly positional: true;\\n        } extends infer T ? T extends TOptionConfig & {\\n            readonly positional: true;\\n        } ? T extends import(\\\"./option-types\\\").ArrayOptionConfig<string | number> ? T[\\\"items\\\"] extends \\\"string\\\" ? string : number : never : never : never)[];\\n        object: TOptionConfig & {\\n            readonly positional: true;\\n        } extends infer T_1 ? T_1 extends TOptionConfig & {\\n            readonly positional: true;\\n        } ? T_1 extends import(\\\"./option-types\\\").ObjectOptionConfig<Record<string, string>, Record<string, any>> ? (T_1[\\\"properties\\\"] extends infer T_2 extends Record<string, OptionConfig> ? { [key_1 in keyof T_2]: import(\\\"./option-types\\\").UndefinedIfRequiredAndNoDefault<T_1[\\\"properties\\\"][key_1], (\\\"choices\\\" extends keyof T_1[\\\"properties\\\"][key_1] ? T_1[\\\"properties\\\"][key_1][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_1[\\\"properties\\\"][key_1][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never) extends [never] ? T_1[\\\"properties\\\"][key_1][\\\"coerce\\\"] extends (s: any) => any ? ReturnType<T_1[\\\"properties\\\"][key_1][\\\"coerce\\\"]> : {\\n            string: string;\\n            number: number;\\n            boolean: boolean;\\n            array: (T_1[\\\"properties\\\"][key_1] extends infer T_3 ? T_3 extends T_1[\\\"properties\\\"][key_1] ? T_3 extends import(\\\"./option-types\\\").ArrayOptionConfig<string | number> ? T_3[\\\"items\\\"] extends \\\"string\\\" ? string : number : never : never : never)[];\\n            object: T_1[\\\"properties\\\"][key_1] extends infer T_4 ? T_4 extends T_1[\\\"properties\\\"][key_1] ? T_4 extends import(\\\"./option-types\\\").ObjectOptionConfig<Record<string, string>, Record<string, any>> ? (T_4[\\\"properties\\\"] extends infer T_5 extends Record<string, OptionConfig> ? { [key_2 in keyof T_5]: import(\\\"./option-types\\\").UndefinedIfRequiredAndNoDefault<T_4[\\\"properties\\\"][key_2], (\\\"choices\\\" extends keyof T_4[\\\"properties\\\"][key_2] ? T_4[\\\"properties\\\"][key_2][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_4[\\\"properties\\\"][key_2][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never) extends [never] ? T_4[\\\"properties\\\"][key_2][\\\"coerce\\\"] extends (s: any) => any ? ReturnType<T_4[\\\"properties\\\"][key_2][\\\"coerce\\\"]> : {\\n                string: string;\\n                number: number;\\n                boolean: boolean;\\n                array: (T_4[\\\"properties\\\"][key_2] extends infer T_6 ? T_6 extends T_4[\\\"properties\\\"][key_2] ? T_6 extends import(\\\"./option-types\\\").ArrayOptionConfig<string | number> ? T_6[\\\"items\\\"] extends \\\"string\\\" ? string : number : never : never : never)[];\\n                object: T_4[\\\"properties\\\"][key_2] extends infer T_7 ? T_7 extends T_4[\\\"properties\\\"][key_2] ? T_7 extends import(\\\"./option-types\\\").ObjectOptionConfig<Record<string, string>, Record<string, any>> ? (T_7[\\\"properties\\\"] extends infer T_8 extends Record<string, OptionConfig> ? { [key_3 in keyof T_8]: import(\\\"./option-types\\\").UndefinedIfRequiredAndNoDefault<T_7[\\\"properties\\\"][key_3], (\\\"choices\\\" extends keyof T_7[\\\"properties\\\"][key_3] ? T_7[\\\"properties\\\"][key_3][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_7[\\\"properties\\\"][key_3][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never) extends [never] ? T_7[\\\"properties\\\"][key_3][\\\"coerce\\\"] extends (s: any) => any ? ReturnType<T_7[\\\"properties\\\"][key_3][\\\"coerce\\\"]> : {\\n                    string: string;\\n                    number: number;\\n                    boolean: boolean;\\n                    array: (T_7[\\\"properties\\\"][key_3] extends infer T_9 ? T_9 extends T_7[\\\"properties\\\"][key_3] ? T_9 extends import(\\\"./option-types\\\").ArrayOptionConfig<string | number> ? T_9[\\\"items\\\"] extends \\\"string\\\" ? string : number : never : never : never)[];\\n                    object: T_7[\\\"properties\\\"][key_3] extends infer T_10 ? T_10 extends T_7[\\\"properties\\\"][key_3] ? T_10 extends import(\\\"./option-types\\\").ObjectOptionConfig<Record<string, string>, Record<string, any>> ? (T_10[\\\"properties\\\"] extends infer T_11 extends Record<string, OptionConfig> ? { [key_4 in keyof T_11]: import(\\\"./option-types\\\").UndefinedIfRequiredAndNoDefault<T_10[\\\"properties\\\"][key_4], (\\\"choices\\\" extends keyof T_10[\\\"properties\\\"][key_4] ? T_10[\\\"properties\\\"][key_4][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_10[\\\"properties\\\"][key_4][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never) extends [never] ? T_10[\\\"properties\\\"][key_4][\\\"coerce\\\"] extends (s: any) => any ? ReturnType<T_10[\\\"properties\\\"][key_4][\\\"coerce\\\"]> : {\\n                        string: string;\\n                        number: number;\\n                        boolean: boolean;\\n                        array: (T_10[\\\"properties\\\"][key_4] extends infer T_12 ? T_12 extends T_10[\\\"properties\\\"][key_4] ? T_12 extends import(\\\"./option-types\\\").ArrayOptionConfig<string | number> ? T_12[\\\"items\\\"] extends \\\"string\\\" ? string : number : never : never : never)[];\\n                        object: T_10[\\\"properties\\\"][key_4] extends infer T_13 ? T_13 extends T_10[\\\"properties\\\"][key_4] ? T_13 extends import(\\\"./option-types\\\").ObjectOptionConfig<Record<string, string>, Record<string, any>> ? (T_13[\\\"properties\\\"] extends infer T_14 extends Record<string, OptionConfig> ? { [key_5 in keyof T_14]: import(\\\"./option-types\\\").UndefinedIfRequiredAndNoDefault<T_13[\\\"properties\\\"][key_5], (\\\"choices\\\" extends keyof T_13[\\\"properties\\\"][key_5] ? T_13[\\\"properties\\\"][key_5][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_13[\\\"properties\\\"][key_5][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never) extends [never] ? T_13[\\\"properties\\\"][key_5][\\\"coerce\\\"] extends (s: any) => any ? ReturnType<T_13[\\\"properties\\\"][key_5][\\\"coerce\\\"]> : {\\n                            string: string;\\n                            number: number;\\n                            boolean: boolean;\\n                            array: (T_13[\\\"properties\\\"][key_5] extends infer T_15 ? T_15 extends T_13[\\\"properties\\\"][key_5] ? T_15 extends import(\\\"./option-types\\\").ArrayOptionConfig<string | number> ? T_15[\\\"items\\\"] extends \\\"string\\\" ? string : number : never : never : never)[];\\n                            object: T_13[\\\"properties\\\"][key_5] extends infer T_16 ? T_16 extends T_13[\\\"properties\\\"][key_5] ? T_16 extends import(\\\"./option-types\\\").ObjectOptionConfig<Record<string, string>, Record<string, any>> ? (T_16[\\\"properties\\\"] extends infer T_17 extends Record<string, OptionConfig> ? { [key_6 in keyof T_17]: import(\\\"./option-types\\\").UndefinedIfRequiredAndNoDefault<T_16[\\\"properties\\\"][key_6], (\\\"choices\\\" extends keyof T_16[\\\"properties\\\"][key_6] ? T_16[\\\"properties\\\"][key_6][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_16[\\\"properties\\\"][key_6][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never) extends [never] ? T_16[\\\"properties\\\"][key_6][\\\"coerce\\\"] extends (s: any) => any ? ReturnType<T_16[\\\"properties\\\"][key_6][\\\"coerce\\\"]> : {\\n                                string: string;\\n                                number: number;\\n                                boolean: boolean;\\n                                array: (T_16[\\\"properties\\\"][key_6] extends infer T_18 ? T_18 extends T_16[\\\"properties\\\"][key_6] ? T_18 extends import(\\\"./option-types\\\").ArrayOptionConfig<string | number> ? T_18[\\\"items\\\"] extends \\\"string\\\" ? string : number : never : never : never)[];\\n                                object: T_16[\\\"properties\\\"][key_6] extends infer T_19 ? T_19 extends T_16[\\\"properties\\\"][key_6] ? T_19 extends import(\\\"./option-types\\\").ObjectOptionConfig<Record<string, string>, Record<string, any>> ? (T_19[\\\"properties\\\"] extends infer T_20 extends Record<string, OptionConfig> ? { [key_7 in keyof T_20]: import(\\\"./option-types\\\").UndefinedIfRequiredAndNoDefault<T_19[\\\"properties\\\"][key_7], (\\\"choices\\\" extends keyof T_19[\\\"properties\\\"][key_7] ? T_19[\\\"properties\\\"][key_7][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_19[\\\"properties\\\"][key_7][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never) extends [never] ? T_19[\\\"properties\\\"][key_7][\\\"coerce\\\"] extends (s: any) => any ? ReturnType<T_19[\\\"properties\\\"][key_7][\\\"coerce\\\"]> : {\\n                                    string: string;\\n                                    number: number;\\n                                    boolean: boolean;\\n                                    array: (T_19[\\\"properties\\\"][key_7] extends infer T_21 ? T_21 extends T_19[\\\"properties\\\"][key_7] ? T_21 extends import(\\\"./option-types\\\").ArrayOptionConfig<string | number> ? T_21[\\\"items\\\"] extends \\\"string\\\" ? string : number : never : never : never)[];\\n                                    object: T_19[\\\"properties\\\"][key_7] extends infer T_22 ? T_22 extends T_19[\\\"properties\\\"][key_7] ? T_22 extends import(\\\"./option-types\\\").ObjectOptionConfig<Record<string, string>, Record<string, any>> ? (T_22[\\\"properties\\\"] extends infer T_23 extends Record<string, OptionConfig> ? { [key_8 in keyof T_23]: import(\\\"./option-types\\\").UndefinedIfRequiredAndNoDefault<T_22[\\\"properties\\\"][key_8], (\\\"choices\\\" extends keyof T_22[\\\"properties\\\"][key_8] ? T_22[\\\"properties\\\"][key_8][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_22[\\\"properties\\\"][key_8][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never) extends [never] ? T_22[\\\"properties\\\"][key_8][\\\"coerce\\\"] extends (s: any) => any ? ReturnType<T_22[\\\"properties\\\"][key_8][\\\"coerce\\\"]> : {\\n                                        string: string;\\n                                        number: number;\\n                                        boolean: boolean;\\n                                        array: (T_22[\\\"properties\\\"][key_8] extends infer T_24 ? T_24 extends T_22[\\\"properties\\\"][key_8] ? T_24 extends import(\\\"./option-types\\\").ArrayOptionConfig<string | number> ? T_24[\\\"items\\\"] extends \\\"string\\\" ? string : number : never : never : never)[];\\n                                        object: T_22[\\\"properties\\\"][key_8] extends infer T_25 ? T_25 extends T_22[\\\"properties\\\"][key_8] ? T_25 extends import(\\\"./option-types\\\").ObjectOptionConfig<Record<string, string>, Record<string, any>> ? (T_25[\\\"properties\\\"] extends infer T_26 extends Record<string, OptionConfig> ? { [key_9 in keyof T_26]: import(\\\"./option-types\\\").UndefinedIfRequiredAndNoDefault<T_25[\\\"properties\\\"][key_9], (\\\"choices\\\" extends keyof T_25[\\\"properties\\\"][key_9] ? T_25[\\\"properties\\\"][key_9][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_25[\\\"properties\\\"][key_9][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never) extends [never] ? T_25[\\\"properties\\\"][key_9][\\\"coerce\\\"] extends (s: any) => any ? ReturnType<T_25[\\\"properties\\\"][key_9][\\\"coerce\\\"]> : {\\n                                            string: string;\\n                                            number: number;\\n                                            boolean: boolean;\\n                                            array: (T_25[\\\"properties\\\"][key_9] extends infer T_27 ? T_27 extends T_25[\\\"properties\\\"][key_9] ? T_27 extends import(\\\"./option-types\\\").ArrayOptionConfig<string | number> ? T_27[\\\"items\\\"] extends \\\"string\\\" ? string : number : never : never : never)[];\\n                                            object: T_25[\\\"properties\\\"][key_9] extends infer T_28 ? T_28 extends T_25[\\\"properties\\\"][key_9] ? T_28 extends import(\\\"./option-types\\\").ObjectOptionConfig<Record<string, string>, Record<string, any>> ? (T_28[\\\"properties\\\"] extends infer T_29 extends Record<string, OptionConfig> ? { [key_10 in keyof T_29]: import(\\\"./option-types\\\").UndefinedIfRequiredAndNoDefault<T_28[\\\"properties\\\"][key_10], (\\\"choices\\\" extends keyof T_28[\\\"properties\\\"][key_10] ? T_28[\\\"properties\\\"][key_10][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_28[\\\"properties\\\"][key_10][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never) extends [never] ? T_28[\\\"properties\\\"][key_10][\\\"coerce\\\"] extends (s: any) => any ? ReturnType<T_28[\\\"properties\\\"][key_10][\\\"coerce\\\"]> : {\\n                                                string: string;\\n                                                number: number;\\n                                                boolean: boolean;\\n                                                array: (T_28[\\\"properties\\\"][key_10] extends infer T_30 ? T_30 extends T_28[\\\"properties\\\"][key_10] ? T_30 extends import(\\\"./option-types\\\").ArrayOptionConfig<string | number> ? T_30[\\\"items\\\"] extends \\\"string\\\" ? string : number : never : never : never)[];\\n                                                object: T_28[\\\"properties\\\"][key_10] extends infer T_31 ? T_31 extends T_28[\\\"properties\\\"][key_10] ? T_31 extends import(\\\"./option-types\\\").ObjectOptionConfig<Record<string, string>, Record<string, any>> ? (T_31[\\\"properties\\\"] extends infer T_32 extends Record<string, OptionConfig> ? { [key_11 in keyof T_32]: import(\\\"./option-types\\\").UndefinedIfRequiredAndNoDefault<T_31[\\\"properties\\\"][key_11], any>; } : never) & (T_31[\\\"additionalProperties\\\"] extends \\\"string\\\" ? Record<string, string> : T_31[\\\"additionalProperties\\\"] extends \\\"number\\\" ? Record<string, number> : T_31[\\\"additionalProperties\\\"] extends \\\"boolean\\\" ? Record<string, boolean> : Record<string, never>) : never : never : never;\\n                                            }[T_28[\\\"properties\\\"][key_10][\\\"type\\\"]] : \\\"choices\\\" extends keyof T_28[\\\"properties\\\"][key_10] ? T_28[\\\"properties\\\"][key_10][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_28[\\\"properties\\\"][key_10][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never>; } : never) & (T_28[\\\"additionalProperties\\\"] extends \\\"string\\\" ? Record<string, string> : T_28[\\\"additionalProperties\\\"] extends \\\"number\\\" ? Record<string, number> : T_28[\\\"additionalProperties\\\"] extends \\\"boolean\\\" ? Record<string, boolean> : Record<string, never>) : never : never : never;\\n                                        }[T_25[\\\"properties\\\"][key_9][\\\"type\\\"]] : \\\"choices\\\" extends keyof T_25[\\\"properties\\\"][key_9] ? T_25[\\\"properties\\\"][key_9][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_25[\\\"properties\\\"][key_9][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never>; } : never) & (T_25[\\\"additionalProperties\\\"] extends \\\"string\\\" ? Record<string, string> : T_25[\\\"additionalProperties\\\"] extends \\\"number\\\" ? Record<string, number> : T_25[\\\"additionalProperties\\\"] extends \\\"boolean\\\" ? Record<string, boolean> : Record<string, never>) : never : never : never;\\n                                    }[T_22[\\\"properties\\\"][key_8][\\\"type\\\"]] : \\\"choices\\\" extends keyof T_22[\\\"properties\\\"][key_8] ? T_22[\\\"properties\\\"][key_8][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_22[\\\"properties\\\"][key_8][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never>; } : never) & (T_22[\\\"additionalProperties\\\"] extends \\\"string\\\" ? Record<string, string> : T_22[\\\"additionalProperties\\\"] extends \\\"number\\\" ? Record<string, number> : T_22[\\\"additionalProperties\\\"] extends \\\"boolean\\\" ? Record<string, boolean> : Record<string, never>) : never : never : never;\\n                                }[T_19[\\\"properties\\\"][key_7][\\\"type\\\"]] : \\\"choices\\\" extends keyof T_19[\\\"properties\\\"][key_7] ? T_19[\\\"properties\\\"][key_7][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_19[\\\"properties\\\"][key_7][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never>; } : never) & (T_19[\\\"additionalProperties\\\"] extends \\\"string\\\" ? Record<string, string> : T_19[\\\"additionalProperties\\\"] extends \\\"number\\\" ? Record<string, number> : T_19[\\\"additionalProperties\\\"] extends \\\"boolean\\\" ? Record<string, boolean> : Record<string, never>) : never : never : never;\\n                            }[T_16[\\\"properties\\\"][key_6][\\\"type\\\"]] : \\\"choices\\\" extends keyof T_16[\\\"properties\\\"][key_6] ? T_16[\\\"properties\\\"][key_6][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_16[\\\"properties\\\"][key_6][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never>; } : never) & (T_16[\\\"additionalProperties\\\"] extends \\\"string\\\" ? Record<string, string> : T_16[\\\"additionalProperties\\\"] extends \\\"number\\\" ? Record<string, number> : T_16[\\\"additionalProperties\\\"] extends \\\"boolean\\\" ? Record<string, boolean> : Record<string, never>) : never : never : never;\\n                        }[T_13[\\\"properties\\\"][key_5][\\\"type\\\"]] : \\\"choices\\\" extends keyof T_13[\\\"properties\\\"][key_5] ? T_13[\\\"properties\\\"][key_5][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_13[\\\"properties\\\"][key_5][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never>; } : never) & (T_13[\\\"additionalProperties\\\"] extends \\\"string\\\" ? Record<string, string> : T_13[\\\"additionalProperties\\\"] extends \\\"number\\\" ? Record<string, number> : T_13[\\\"additionalProperties\\\"] extends \\\"boolean\\\" ? Record<string, boolean> : Record<string, never>) : never : never : never;\\n                    }[T_10[\\\"properties\\\"][key_4][\\\"type\\\"]] : \\\"choices\\\" extends keyof T_10[\\\"properties\\\"][key_4] ? T_10[\\\"properties\\\"][key_4][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_10[\\\"properties\\\"][key_4][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never>; } : never) & (T_10[\\\"additionalProperties\\\"] extends \\\"string\\\" ? Record<string, string> : T_10[\\\"additionalProperties\\\"] extends \\\"number\\\" ? Record<string, number> : T_10[\\\"additionalProperties\\\"] extends \\\"boolean\\\" ? Record<string, boolean> : Record<string, never>) : never : never : never;\\n                }[T_7[\\\"properties\\\"][key_3][\\\"type\\\"]] : \\\"choices\\\" extends keyof T_7[\\\"properties\\\"][key_3] ? T_7[\\\"properties\\\"][key_3][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_7[\\\"properties\\\"][key_3][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never>; } : never) & (T_7[\\\"additionalProperties\\\"] extends \\\"string\\\" ? Record<string, string> : T_7[\\\"additionalProperties\\\"] extends \\\"number\\\" ? Record<string, number> : T_7[\\\"additionalProperties\\\"] extends \\\"boolean\\\" ? Record<string, boolean> : Record<string, never>) : never : never : never;\\n            }[T_4[\\\"properties\\\"][key_2][\\\"type\\\"]] : \\\"choices\\\" extends keyof T_4[\\\"properties\\\"][key_2] ? T_4[\\\"properties\\\"][key_2][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_4[\\\"properties\\\"][key_2][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never>; } : never) & (T_4[\\\"additionalProperties\\\"] extends \\\"string\\\" ? Record<string, string> : T_4[\\\"additionalProperties\\\"] extends \\\"number\\\" ? Record<string, number> : T_4[\\\"additionalProperties\\\"] extends \\\"boolean\\\" ? Record<string, boolean> : Record<string, never>) : never : never : never;\\n        }[T_1[\\\"properties\\\"][key_1][\\\"type\\\"]] : \\\"choices\\\" extends keyof T_1[\\\"properties\\\"][key_1] ? T_1[\\\"properties\\\"][key_1][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_1[\\\"properties\\\"][key_1][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never>; } : never) & (T_1[\\\"additionalProperties\\\"] extends \\\"string\\\" ? Record<string, string> : T_1[\\\"additionalProperties\\\"] extends \\\"number\\\" ? Record<string, number> : T_1[\\\"additionalProperties\\\"] extends \\\"boolean\\\" ? Record<string, boolean> : Record<string, never>) : never : never : never;\\n    }[(TOptionConfig & {\\n        readonly positional: true;\\n    })[\\\"type\\\"]] : \\\"choices\\\" extends \\\"positional\\\" | keyof TOptionConfig ? (TOptionConfig & {\\n        readonly positional: true;\\n    })[keyof TOptionConfig & \\\"choices\\\"] extends (infer TChoice)[] ? TChoice : (TOptionConfig & {\\n        readonly positional: true;\\n    })[keyof TOptionConfig & \\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never>; }>;\\n    /**\\n     * Enables environment variable population for options.\\n     * @param envPrefix Prefix for environment variables. The full environment variable name will be `${envPrefix}_${optionName}`.\\n     */\\n    env(envPrefix?: string): typeof this;\\n    env(options: EnvOptionConfig): typeof this;\\n    /**\\n     * Registers a configuration provider to read configuration from.\\n     * @param provider The configuration provider to register.\\n     */\\n    config(provider: ConfigurationProvider<TArgs>): this;\\n    /**\\n     * Parses an array of arguments into a structured object.\\n     * @param argv The array of arguments to parse\\n     * @returns The parsed arguments\\n     */\\n    parse(argv?: string[]): TArgs;\\n    private normalizeOptions;\\n    private validateAndNormalizeResults;\\n    private readFromEnv;\\n    private reflectEnv;\\n    private cachedConfigKey;\\n    private cachedConfig;\\n    private getEnvKey;\\n    private readFromConfig;\\n    /**\\n     * Registers that a set of options cannot be provided at the same time.\\n     * @param options The options that cannot be provided together.\\n     */\\n    conflicts(...options: [string, string, ...string[]]): this;\\n    /**\\n     * Registers that the presence of one option implies the presence of one or more other options.\\n     * @param options The options that imply the other option.\\n     */\\n    implies(option: string, ...options: string[]): this;\\n    /**\\n     * Used to combine two parsers into a single parser. Mutates `this`, but returns with updated typings\\n     * @param parser The parser to augment the current parser with.\\n     * @returns The updated parser instance.\\n     */\\n    augment<TAugment extends ParsedArgs>(parser: ArgvParser<TAugment>): ArgvParser<TArgs & TAugment>;\\n    clone(parserOptions?: ParserOptions<TArgs>): ArgvParser<TArgs>;\\n    asReadonly(): ReadonlyArgvParser<TArgs>;\\n}\\n/**\\n * Small helper function to create a new parser instance.\\n * @param opts see {@link ParserOptions}\\n * @returns new parser, see {@link ArgvParser}\\n */\\nexport declare function parser(opts?: ParserOptions): ArgvParser<{\\n    /**\\n     * Contains any unmatched arguments as originally passed to the parser.\\n     */\\n    unmatched: string[];\\n    /**\\n     * Contains any arguments passed after `--`, which halts parsing of flags.\\n     */\\n    '--'?: string[];\\n}>;\\nexport declare function tryParseValue(parser: Parser<InternalOptionConfig>, input: ParserContext<InternalOptionConfig>): any;\\nexport declare class ValidationFailedError<T> extends AggregateError {\\n    partialArgV: Partial<T>;\\n    constructor(errors: Error[], message: string, partialArgV: Partial<T>);\\n}\\n\",\"file:///node_modules/@cli-forge/parser/src/lib/config-files/configuration-loader.d.ts\":\"/**\\n * Implement this type to create a custom configuration provider.\\n */\\nexport type ConfigurationProvider<T> = {\\n    /**\\n     * A function that searches for a configuration file in the given directory and returns the path to the file.\\n     * Should handle being passed either a directory to search, or a file to check.\\n     * @param configurationRoot\\n     * @returns The path to the configuration file, or undefined if no applicable file was found.\\n     */\\n    resolve: (configurationRoot: string) => string | undefined;\\n    /**\\n     * A function that loads the configuration from the given file.\\n     * @param filename The path to the configuration file (resolved by {@link ConfigurationProvider#resolve}).\\n     * @returns The loaded configuration object.\\n     */\\n    load: (filename: string) => T & {\\n        extends?: string;\\n    };\\n};\\nexport declare function resolveConfiguration<T>(configurationRoot: string, loaders: ConfigurationProvider<T>[]): T;\\n\",\"file:///node_modules/@cli-forge/parser/src/lib/config-files/index.d.ts\":\"export * from './configuration-loader';\\nexport * from './json-file-loader';\\nexport * from './package-json-loader';\\n\",\"file:///node_modules/@cli-forge/parser/src/lib/config-files/json-file-loader.d.ts\":\"import { ConfigurationProvider } from './configuration-loader';\\n/**\\n * A factory function to create simple configuration providers that load configuration from a JSON file.\\n * @param filename The filename of the JSON file to load.\\n * @param transform The function to transform the loaded JSON object into the desired configuration object.\\n * @returns A `{@link ConfigurationProvider}` that loads configuration from the specified JSON file.\\n */\\nexport declare function getJsonFileConfigLoader<T>(filename: string, transform?: (json: any) => T): ConfigurationProvider<T>;\\n\",\"file:///node_modules/@cli-forge/parser/src/lib/config-files/package-json-loader.d.ts\":\"import { ConfigurationProvider } from './configuration-loader';\\n/**\\n * A factory function to create a configuration provider that loads configuration from a package.json file.\\n * @param key The key in the package.json file to load as configuration.\\n * @returns A `{@link ConfigurationProvider}` that loads configuration from the specified package.json file.\\n */\\nexport declare function getPackageJsonConfigurationLoader<T>(key: string): ConfigurationProvider<T>;\\n\",\"file:///node_modules/@cli-forge/parser/src/lib/config-files/utils.d.ts\":\"export declare function traverseForFile(configFileName: string, searchDir?: string): string | undefined;\\n\",\"file:///node_modules/@cli-forge/parser/src/lib/option-types/array.d.ts\":\"import { CommonOptionConfig } from './common';\\n/**\\n * Configuration for array options. Arrays are parsed from\\n * comma separated, space separated, or multiple values.\\n *\\n * e.g. `--foo a b c`, `--foo a,b,c`, or `--foo a --foo b --foo c`\\n */\\nexport type ArrayOptionConfig<TCoerce = string | number, TChoices = TCoerce[]> = StringArrayOptionConfig<TCoerce, TChoices> | NumberArrayOptionConfig<TCoerce, TChoices>;\\nexport type NumberArrayOptionConfig<TCoerce = number, TChoices = number[]> = {\\n    type: 'array';\\n    items: 'number';\\n} & CommonOptionConfig<number[], TCoerce, TChoices>;\\nexport type StringArrayOptionConfig<TCoerce = string, TChoices = TCoerce[]> = {\\n    type: 'array';\\n    items: 'string';\\n} & CommonOptionConfig<string[], TCoerce, TChoices>;\\n\",\"file:///node_modules/@cli-forge/parser/src/lib/option-types/boolean.d.ts\":\"import { CommonOptionConfig } from './common';\\nexport type BooleanOptionConfig<TCoerce = boolean, TChoices = TCoerce[]> = {\\n    type: 'boolean';\\n} & CommonOptionConfig<boolean, TCoerce, TChoices>;\\n\",\"file:///node_modules/@cli-forge/parser/src/lib/option-types/common.d.ts\":\"export type PlainDefaultValue<T> = T;\\nexport type DefaultValueWithDescription<T> = {\\n    value: PlainDefaultValue<T>;\\n    description: string;\\n};\\nexport type DefaultValueWithFactory<T> = {\\n    factory: () => PlainDefaultValue<T>;\\n    description: string;\\n};\\nexport type Default<T> = PlainDefaultValue<T> | DefaultValueWithDescription<T> | DefaultValueWithFactory<T>;\\nexport type CommonOptionConfig<T, TCoerce = T, TChoices = T[]> = {\\n    /**\\n     * If set to true, the option will be treated as a positional argument.\\n     */\\n    positional?: boolean;\\n    /**\\n     * Provide an array of aliases for the option.\\n     */\\n    alias?: string[];\\n    /**\\n     * Provide an array of choices for the option. Values not in the array will throw an error.\\n     */\\n    choices?: TChoices | (() => TChoices);\\n    /**\\n     * Provide a default value for the option.\\n     *\\n     * If the default value is a tuple, the first value will be used as the default value, and the second value will be used as the description.\\n     */\\n    default?: Default<T>;\\n    /**\\n     * Provide a description for the option.\\n     */\\n    description?: string;\\n    /**\\n     * Provide a function to coerce the value of the option.\\n     * @param value Value of the option\\n     * @returns Coerced value of the option\\n     */\\n    coerce?: (value: T) => TCoerce;\\n    /**\\n     * Provide a function to validate the value of the option.\\n     * @param value Coerced value of the option\\n     * @returns If the value is valid, return true. If the value is invalid, return false or a string with an error message.\\n     */\\n    validate?: (value: TCoerce) => boolean | string;\\n    /**\\n     * If true, the option is required.\\n     */\\n    required?: boolean;\\n    /**\\n     * If set, the option will be populated from the environment variable `${env}_${optionName}`.\\n     * If set to true, the environment variable will be `${optionName}`.\\n     * If explicitly set to false, environment variable population will be disabled for this option.\\n     */\\n    env?: string | boolean | {\\n        /**\\n         * What key should the value be read from in process.env\\n         */\\n        key?: string;\\n        /**\\n         * If set to false, ignore prefix provided by .env() call.\\n         */\\n        prefix?: boolean;\\n        /**\\n         * If set to false, the option will not be set in process.env, even if the global env option is set to reflect.\\n         * If set to true, the option will be set in process.env, even if the global env option is set to ignore.\\n         */\\n        reflect?: boolean;\\n        /**\\n         * If set to false the option will not be read from process.env. This is useful if you\\n         * want to set the value in process.env, but not read it from there.\\n         *\\n         * @default true\\n         */\\n        populate?: boolean;\\n    };\\n    /**\\n     * If set, the option will be marked as deprecated, with the provided message. This will not effect runtime behavior,\\n     * but will be displayed in help output and generated docs.\\n     */\\n    deprecated?: string;\\n    /**\\n     * If true, the option will not be displayed in help output or generated docs.\\n     */\\n    hidden?: boolean;\\n    /**\\n     * Can be set to group options in help output and generated docs.\\n     */\\n    group?: string;\\n};\\n\",\"file:///node_modules/@cli-forge/parser/src/lib/option-types/index.d.ts\":\"import { OptionConfig } from './option-config';\\nexport * from './option-config-to-type';\\nexport * from './common';\\nexport * from './array';\\nexport * from './boolean';\\nexport * from './number';\\nexport * from './object';\\nexport * from './string';\\nexport { OptionConfig };\\nexport type Internal<T extends OptionConfig> = T & InternalOptionConfig;\\nexport type InternalOptionConfig = OptionConfig & {\\n    key: string;\\n    position?: number;\\n};\\n\",\"file:///node_modules/@cli-forge/parser/src/lib/option-types/number.d.ts\":\"import { CommonOptionConfig } from './common';\\nexport type NumberOptionConfig<TCoerce = number, TChoices = TCoerce[]> = {\\n    type: 'number';\\n} & CommonOptionConfig<number, TCoerce, TChoices>;\\n\",\"file:///node_modules/@cli-forge/parser/src/lib/option-types/object.d.ts\":\"import { CommonOptionConfig } from './common';\\nimport { OptionConfig } from './option-config';\\nexport interface ObjectOptionConfig<TCoerce = Record<string, string>, TProperties extends {\\n    [key: string]: Readonly<OptionConfig>;\\n} = Record<string, any>> extends Omit<CommonOptionConfig<Record<string, string>, TCoerce>, 'choices'> {\\n    type: 'object';\\n    /** */\\n    properties: TProperties;\\n    additionalProperties?: false | 'string' | 'number' | 'boolean';\\n}\\n\",\"file:///node_modules/@cli-forge/parser/src/lib/option-types/option-config-to-type.d.ts\":\"import { OptionConfig } from './option-config';\\nimport { ArrayOptionConfig } from './array';\\nimport { ObjectOptionConfig } from './object';\\n/**\\n * Converts an OptionConfig to the TypeScript type for the parsed value.\\n */\\nexport type OptionConfigToType<TOptionConfig extends OptionConfig> = UndefinedIfRequiredAndNoDefault<TOptionConfig, InferTChoice<TOptionConfig> extends [never] ? TOptionConfig['coerce'] extends (s: any) => any ? ReturnType<TOptionConfig['coerce']> : {\\n    string: string;\\n    number: number;\\n    boolean: boolean;\\n    array: ArrayItems<TOptionConfig>[];\\n    object: TOptionConfig extends ObjectOptionConfig ? ResolveTProperties<TOptionConfig['properties']> & AdditionalProperties<TOptionConfig> : never;\\n}[TOptionConfig['type']] : InferTChoice<TOptionConfig>>;\\nexport type UndefinedIfRequiredAndNoDefault<TOptionConfig extends OptionConfig, ResolvedValue> = TOptionConfig extends {\\n    required: true;\\n} ? ResolvedValue : TOptionConfig extends {\\n    default: unknown;\\n} ? ResolvedValue : // Option is not required and has no default value\\nResolvedValue | undefined;\\ntype ArrayItems<TOptionConfig extends OptionConfig> = TOptionConfig extends ArrayOptionConfig<string | number> ? TOptionConfig['items'] extends 'string' ? string : number : never;\\ntype AdditionalProperties<TOptionConfig extends ObjectOptionConfig> = TOptionConfig['additionalProperties'] extends 'string' ? Record<string, string> : TOptionConfig['additionalProperties'] extends 'number' ? Record<string, number> : TOptionConfig['additionalProperties'] extends 'boolean' ? Record<string, boolean> : Record<string, never>;\\ntype ResolveTProperties<TProperties extends Record<string, OptionConfig>> = {\\n    [key in keyof TProperties]: OptionConfigToType<TProperties[key]>;\\n};\\ntype InferTChoice<TOptionConfig> = 'choices' extends keyof TOptionConfig ? TOptionConfig['choices'] extends Array<infer TChoice> ? TChoice : TOptionConfig['choices'] extends () => Array<infer TChoice> ? TChoice : never : never;\\nexport {};\\n\",\"file:///node_modules/@cli-forge/parser/src/lib/option-types/option-config.d.ts\":\"import { ArrayOptionConfig } from './array';\\nimport { BooleanOptionConfig } from './boolean';\\nimport { NumberOptionConfig } from './number';\\nimport { ObjectOptionConfig } from './object';\\nimport { StringOptionConfig } from './string';\\n/**\\n * Configures an option for the parser. See subtypes for more information.\\n * - {@link StringOptionConfig}\\n * - {@link NumberOptionConfig}\\n * - {@link ArrayOptionConfig}\\n * - {@link BooleanOptionConfig}\\n *\\n * @typeParam TCoerce The return type of the `coerce` function if provided.\\n */\\nexport type OptionConfig<TCoerce = any, TChoices = any[], TObjectProps extends Record<string, OptionConfig> = Record<string, any>> = StringOptionConfig<TCoerce, TChoices> | NumberOptionConfig<TCoerce, TChoices> | ArrayOptionConfig<TCoerce, TChoices> | BooleanOptionConfig<TCoerce, TChoices> | ObjectOptionConfig<TCoerce, TObjectProps>;\\n\",\"file:///node_modules/@cli-forge/parser/src/lib/option-types/string.d.ts\":\"import { CommonOptionConfig } from './common';\\nexport type StringOptionConfig<TCoerce = string, TChoices = TCoerce[]> = {\\n    type: 'string';\\n} & CommonOptionConfig<string, TCoerce, TChoices>;\\n\",\"file:///node_modules/@cli-forge/parser/src/lib/parsers/array.d.ts\":\"import { Internal, ArrayOptionConfig } from '../option-types';\\nimport { Parser } from './typings';\\nexport declare const arrayParser: Parser<Internal<ArrayOptionConfig>>;\\n\",\"file:///node_modules/@cli-forge/parser/src/lib/parsers/boolean.d.ts\":\"import { Internal, BooleanOptionConfig } from '../option-types';\\nimport { Parser } from './typings';\\nexport declare const booleanParser: Parser<Internal<BooleanOptionConfig>>;\\n\",\"file:///node_modules/@cli-forge/parser/src/lib/parsers/number.d.ts\":\"import { Internal, NumberOptionConfig } from '../option-types';\\nimport { Parser } from './typings';\\nexport declare const numberParser: Parser<Internal<NumberOptionConfig>>;\\n\",\"file:///node_modules/@cli-forge/parser/src/lib/parsers/object.d.ts\":\"import { Internal, ObjectOptionConfig } from '../option-types';\\nimport { Parser } from './typings';\\nexport declare const objectParser: Parser<Internal<ObjectOptionConfig>>;\\n\",\"file:///node_modules/@cli-forge/parser/src/lib/parsers/parser-map.d.ts\":\"import { Parser } from './typings';\\nexport declare const parserMap: Record<string, Parser<any>>;\\n\",\"file:///node_modules/@cli-forge/parser/src/lib/parsers/string.d.ts\":\"import { Internal, StringOptionConfig } from '../option-types';\\nimport { Parser } from './typings';\\nexport declare const stringParser: Parser<Internal<StringOptionConfig>>;\\n\",\"file:///node_modules/@cli-forge/parser/src/lib/parsers/typings.d.ts\":\"import { OptionConfig } from '../option-types';\\nexport type ParserContext<TConfig extends OptionConfig> = {\\n    config: TConfig;\\n    tokens: string[];\\n    current?: any;\\n    providedFlag?: string;\\n};\\nexport type Parser<TConfig extends OptionConfig, T = any> = (input: ParserContext<TConfig>) => T;\\nexport declare class NoValueError extends Error {\\n    constructor();\\n}\\n\",\"file:///node_modules/@cli-forge/parser/src/lib/utils/case-transformations.d.ts\":\"export declare function fromDashedToCamelCase(str: string): string;\\nexport declare function fromCamelOrDashedCaseToConstCase(str: string): string;\\nexport declare function getEnvKey(prefix: string | undefined, key: string): string;\\n\",\"file:///node_modules/@cli-forge/parser/src/lib/utils/chain.d.ts\":\"import { OptionConfig } from '../option-types';\\nimport { ArgvParser, ParsedArgs } from '../parser';\\ntype UnaryFunction<T, R> = (arg: T) => R;\\n/**\\n * Applies a series of functions to an initial value, passing the result of each function to the next.\\n *\\n * Used to convert code that looks like:\\n * ```typescript\\n * const a = addB(addC({ a: 'a' }));\\n * ```\\n * to:\\n * ```typescript\\n * const a = chain({ a: 'a' }, addB, addC);\\n * ```\\n *\\n * See [composable-options](/examples/composable-options) for an example of how this can be used.\\n *\\n * @param initial Initial value to pass through the chain\\n * @param fns Functions to apply to the initial value, and each subsequent value\\n * @returns Updated value after all functions have been applied\\n * @hidden docs for {@link chain} are found on the main signature.\\n */\\nexport declare function chain<T0, R>(initial: T0, fn0: UnaryFunction<T0, R>): R;\\n/**\\n * Applies a series of functions to an initial value, passing the result of each function to the next.\\n *\\n * Used to convert code that looks like:\\n * ```typescript\\n * const a = addB(addC({ a: 'a' }));\\n * ```\\n * to:\\n * ```typescript\\n * const a = chain({ a: 'a' }, addB, addC);\\n * ```\\n *\\n * See [composable-options](/examples/composable-options) for an example of how this can be used.\\n *\\n * @param initial Initial value to pass through the chain\\n * @param fns Functions to apply to the initial value, and each subsequent value\\n * @returns Updated value after all functions have been applied\\n * @hidden docs for {@link chain} are found on the main signature.\\n */\\nexport declare function chain<T0, T1, R>(initial: T0, fn0: UnaryFunction<T0, T1>, fn1: UnaryFunction<T1, R>): R;\\n/**\\n * Applies a series of functions to an initial value, passing the result of each function to the next.\\n *\\n * Used to convert code that looks like:\\n * ```typescript\\n * const a = addB(addC({ a: 'a' }));\\n * ```\\n * to:\\n * ```typescript\\n * const a = chain({ a: 'a' }, addB, addC);\\n * ```\\n *\\n * See [composable-options](/examples/composable-options) for an example of how this can be used.\\n *\\n * @param initial Initial value to pass through the chain\\n * @param fns Functions to apply to the initial value, and each subsequent value\\n * @returns Updated value after all functions have been applied\\n * @hidden docs for {@link chain} are found on the main signature.\\n */\\nexport declare function chain<T0, T1, T2, R>(initial: T0, fn0: UnaryFunction<T0, T1>, fn1: UnaryFunction<T1, T2>, fn2: UnaryFunction<T2, R>): R;\\n/**\\n * Applies a series of functions to an initial value, passing the result of each function to the next.\\n *\\n * Used to convert code that looks like:\\n * ```typescript\\n * const a = addB(addC({ a: 'a' }));\\n * ```\\n * to:\\n * ```typescript\\n * const a = chain({ a: 'a' }, addB, addC);\\n * ```\\n *\\n * See [composable-options](/examples/composable-options) for an example of how this can be used.\\n *\\n * @param initial Initial value to pass through the chain\\n * @param fns Functions to apply to the initial value, and each subsequent value\\n * @returns Updated value after all functions have been applied\\n * @hidden docs for {@link chain} are found on the main signature.\\n */\\nexport declare function chain<T0, T1, T2, T3, R>(initial: T0, fn0: UnaryFunction<T0, T1>, fn1: UnaryFunction<T1, T2>, fn2: UnaryFunction<T2, T3>, fn3: UnaryFunction<T3, R>): R;\\n/**\\n * Applies a series of functions to an initial value, passing the result of each function to the next.\\n *\\n * Used to convert code that looks like:\\n * ```typescript\\n * const a = addB(addC({ a: 'a' }));\\n * ```\\n * to:\\n * ```typescript\\n * const a = chain({ a: 'a' }, addB, addC);\\n * ```\\n *\\n * See [composable-options](/examples/composable-options) for an example of how this can be used.\\n *\\n * @param initial Initial value to pass through the chain\\n * @param fns Functions to apply to the initial value, and each subsequent value\\n * @returns Updated value after all functions have been applied\\n * @hidden docs for {@link chain} are found on the main signature.\\n */\\nexport declare function chain<T0, T1, T2, T3, T4, R>(initial: T0, fn0: UnaryFunction<T0, T1>, fn1: UnaryFunction<T1, T2>, fn2: UnaryFunction<T2, T3>, fn3: UnaryFunction<T3, T4>, fn4: UnaryFunction<T4, R>): R;\\n/**\\n * Applies a series of functions to an initial value, passing the result of each function to the next.\\n *\\n * Used to convert code that looks like:\\n * ```typescript\\n * const a = addB(addC({ a: 'a' }));\\n * ```\\n * to:\\n * ```typescript\\n * const a = chain({ a: 'a' }, addB, addC);\\n * ```\\n *\\n * See [composable-options](/examples/composable-options) for an example of how this can be used.\\n *\\n * @param initial Initial value to pass through the chain\\n * @param fns Functions to apply to the initial value, and each subsequent value\\n * @returns Updated value after all functions have been applied\\n * @hidden docs for {@link chain} are found on the main signature.\\n */\\nexport declare function chain<T0, T1, T2, T3, T4, T5, R>(initial: T0, fn0: UnaryFunction<T0, T1>, fn1: UnaryFunction<T1, T2>, fn2: UnaryFunction<T2, T3>, fn3: UnaryFunction<T3, T4>, fn4: UnaryFunction<T4, T5>, fn5: UnaryFunction<T5, R>): R;\\n/**\\n * Applies a series of functions to an initial value, passing the result of each function to the next.\\n *\\n * Used to convert code that looks like:\\n * ```typescript\\n * const a = addB(addC({ a: 'a' }));\\n * ```\\n * to:\\n * ```typescript\\n * const a = chain({ a: 'a' }, addB, addC);\\n * ```\\n *\\n * See [composable-options](/examples/composable-options) for an example of how this can be used.\\n *\\n * @param initial Initial value to pass through the chain\\n * @param fns Functions to apply to the initial value, and each subsequent value\\n * @returns Updated value after all functions have been applied\\n * @hidden docs for {@link chain} are found on the main signature.\\n */\\nexport declare function chain<T0, T1, T2, T3, T4, T5, T6, R>(initial: T0, fn0: UnaryFunction<T0, T1>, fn1: UnaryFunction<T1, T2>, fn2: UnaryFunction<T2, T3>, fn3: UnaryFunction<T3, T4>, fn4: UnaryFunction<T4, T5>, fn5: UnaryFunction<T5, T6>, fn6: UnaryFunction<T6, R>): R;\\n/**\\n * Applies a series of functions to an initial value, passing the result of each function to the next.\\n *\\n * Used to convert code that looks like:\\n * ```typescript\\n * const a = addB(addC({ a: 'a' }));\\n * ```\\n * to:\\n * ```typescript\\n * const a = chain({ a: 'a' }, addB, addC);\\n * ```\\n *\\n * See [composable-options](/examples/composable-options) for an example of how this can be used.\\n *\\n * @param initial Initial value to pass through the chain\\n * @param fns Functions to apply to the initial value, and each subsequent value\\n * @returns Updated value after all functions have been applied\\n * @hidden docs for {@link chain} are found on the main signature.\\n */\\nexport declare function chain<T0, T1, T2, T3, T4, T5, T6, T7, R>(initial: T0, fn0: UnaryFunction<T0, T1>, fn1: UnaryFunction<T1, T2>, fn2: UnaryFunction<T2, T3>, fn3: UnaryFunction<T3, T4>, fn4: UnaryFunction<T4, T5>, fn5: UnaryFunction<T5, T6>, fn6: UnaryFunction<T6, T7>, fn7: UnaryFunction<T7, R>): R;\\n/**\\n * Applies a series of functions to an initial value, passing the result of each function to the next.\\n *\\n * Used to convert code that looks like:\\n * ```typescript\\n * const a = addB(addC({ a: 'a' }));\\n * ```\\n * to:\\n * ```typescript\\n * const a = chain({ a: 'a' }, addB, addC);\\n * ```\\n *\\n * See [composable-options](/examples/composable-options) for an example of how this can be used.\\n *\\n * @param initial Initial value to pass through the chain\\n * @param fns Functions to apply to the initial value, and each subsequent value\\n * @returns Updated value after all functions have been applied\\n * @hidden docs for {@link chain} are found on the main signature.\\n */\\nexport declare function chain<T0, T1, T2, T3, T4, T5, T6, T7, T8, R>(initial: T0, fn0: UnaryFunction<T0, T1>, fn1: UnaryFunction<T1, T2>, fn2: UnaryFunction<T2, T3>, fn3: UnaryFunction<T3, T4>, fn4: UnaryFunction<T4, T5>, fn5: UnaryFunction<T5, T6>, fn6: UnaryFunction<T6, T7>, fn7: UnaryFunction<T7, T8>, fn8: UnaryFunction<T8, R>): R;\\n/**\\n * Applies a series of functions to an initial value, passing the result of each function to the next.\\n *\\n * Used to convert code that looks like:\\n * ```typescript\\n * const a = addB(addC({ a: 'a' }));\\n * ```\\n * to:\\n * ```typescript\\n * const a = chain({ a: 'a' }, addB, addC);\\n * ```\\n *\\n * See [composable-options](/examples/composable-options) for an example of how this can be used.\\n *\\n * @param initial Initial value to pass through the chain\\n * @param fns Functions to apply to the initial value, and each subsequent value\\n * @returns Updated value after all functions have been applied\\n * @hidden docs for {@link chain} are found on the main signature.\\n */\\nexport declare function chain<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, R>(initial: T0, fn0: UnaryFunction<T0, T1>, fn1: UnaryFunction<T1, T2>, fn2: UnaryFunction<T2, T3>, fn3: UnaryFunction<T3, T4>, fn4: UnaryFunction<T4, T5>, fn5: UnaryFunction<T5, T6>, fn6: UnaryFunction<T6, T7>, fn7: UnaryFunction<T7, T8>, fn8: UnaryFunction<T8, T9>, fn9: UnaryFunction<T9, R>): R;\\n/**\\n * Applies a series of functions to an initial value, passing the result of each function to the next.\\n *\\n * Used to convert code that looks like:\\n * ```typescript\\n * const a = addB(addC({ a: 'a' }));\\n * ```\\n * to:\\n * ```typescript\\n * const a = chain({ a: 'a' }, addB, addC);\\n * ```\\n *\\n * See [composable-options](/examples/composable-options) for an example of how this can be used.\\n *\\n * @param initial Initial value to pass through the chain\\n * @param fns Functions to apply to the initial value, and each subsequent value\\n * @returns Updated value after all functions have been applied\\n * @hidden docs for {@link chain} are found on the main signature.\\n */\\nexport declare function chain<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>(initial: T0, fn0: UnaryFunction<T0, T1>, fn1: UnaryFunction<T1, T2>, fn2: UnaryFunction<T2, T3>, fn3: UnaryFunction<T3, T4>, fn4: UnaryFunction<T4, T5>, fn5: UnaryFunction<T5, T6>, fn6: UnaryFunction<T6, T7>, fn7: UnaryFunction<T7, T8>, fn8: UnaryFunction<T8, T9>, fn9: UnaryFunction<T9, T10>, fn10: UnaryFunction<T10, R>): R;\\n/**\\n * Applies a series of functions to an initial value, passing the result of each function to the next.\\n *\\n * Used to convert code that looks like:\\n * ```typescript\\n * const a = addB(addC({ a: 'a' }));\\n * ```\\n * to:\\n * ```typescript\\n * const a = chain({ a: 'a' }, addB, addC);\\n * ```\\n *\\n * See [composable-options](/examples/composable-options) for an example of how this can be used.\\n *\\n * @param initial Initial value to pass through the chain\\n * @param fns Functions to apply to the initial value, and each subsequent value\\n * @returns Updated value after all functions have been applied\\n * @hidden docs for {@link chain} are found on the main signature.\\n */\\nexport declare function chain<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>(initial: T0, fn0: UnaryFunction<T0, T1>, fn1: UnaryFunction<T1, T2>, fn2: UnaryFunction<T2, T3>, fn3: UnaryFunction<T3, T4>, fn4: UnaryFunction<T4, T5>, fn5: UnaryFunction<T5, T6>, fn6: UnaryFunction<T6, T7>, fn7: UnaryFunction<T7, T8>, fn8: UnaryFunction<T8, T9>, fn9: UnaryFunction<T9, T10>, fn10: UnaryFunction<T10, T11>, fn11: UnaryFunction<T11, R>): R;\\n/**\\n * Applies a series of functions to an initial value, passing the result of each function to the next.\\n *\\n * Used to convert code that looks like:\\n * ```typescript\\n * const a = addB(addC({ a: 'a' }));\\n * ```\\n * to:\\n * ```typescript\\n * const a = chain({ a: 'a' }, addB, addC);\\n * ```\\n *\\n * See [composable-options](/examples/composable-options) for an example of how this can be used.\\n *\\n * @param initial Initial value to pass through the chain\\n * @param fns Functions to apply to the initial value, and each subsequent value\\n * @returns Updated value after all functions have been applied\\n * @hidden docs for {@link chain} are found on the main signature.\\n */\\nexport declare function chain<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>(initial: T0, fn0: UnaryFunction<T0, T1>, fn1: UnaryFunction<T1, T2>, fn2: UnaryFunction<T2, T3>, fn3: UnaryFunction<T3, T4>, fn4: UnaryFunction<T4, T5>, fn5: UnaryFunction<T5, T6>, fn6: UnaryFunction<T6, T7>, fn7: UnaryFunction<T7, T8>, fn8: UnaryFunction<T8, T9>, fn9: UnaryFunction<T9, T10>, fn10: UnaryFunction<T10, T11>, fn11: UnaryFunction<T11, T12>, fn12: UnaryFunction<T12, R>): R;\\n/**\\n * Applies a series of functions to an initial value, passing the result of each function to the next.\\n *\\n * Used to convert code that looks like:\\n * ```typescript\\n * const a = addB(addC({ a: 'a' }));\\n * ```\\n * to:\\n * ```typescript\\n * const a = chain({ a: 'a' }, addB, addC);\\n * ```\\n *\\n * See [composable-options](/examples/composable-options) for an example of how this can be used.\\n *\\n * @param initial Initial value to pass through the chain\\n * @param fns Functions to apply to the initial value, and each subsequent value\\n * @returns Updated value after all functions have been applied\\n * @hidden docs for {@link chain} are found on the main signature.\\n */\\nexport declare function chain<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>(initial: T0, fn0: UnaryFunction<T0, T1>, fn1: UnaryFunction<T1, T2>, fn2: UnaryFunction<T2, T3>, fn3: UnaryFunction<T3, T4>, fn4: UnaryFunction<T4, T5>, fn5: UnaryFunction<T5, T6>, fn6: UnaryFunction<T6, T7>, fn7: UnaryFunction<T7, T8>, fn8: UnaryFunction<T8, T9>, fn9: UnaryFunction<T9, T10>, fn10: UnaryFunction<T10, T11>, fn11: UnaryFunction<T11, T12>, fn12: UnaryFunction<T12, T13>, fn13: UnaryFunction<T13, R>): R;\\n/**\\n * Applies a series of functions to an initial value, passing the result of each function to the next.\\n *\\n * Used to convert code that looks like:\\n * ```typescript\\n * const a = addB(addC({ a: 'a' }));\\n * ```\\n * to:\\n * ```typescript\\n * const a = chain({ a: 'a' }, addB, addC);\\n * ```\\n *\\n * See [composable-options](/examples/composable-options) for an example of how this can be used.\\n *\\n * @param initial Initial value to pass through the chain\\n * @param fns Functions to apply to the initial value, and each subsequent value\\n * @returns Updated value after all functions have been applied\\n * @hidden docs for {@link chain} are found on the main signature.\\n */\\nexport declare function chain<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>(initial: T0, fn0: UnaryFunction<T0, T1>, fn1: UnaryFunction<T1, T2>, fn2: UnaryFunction<T2, T3>, fn3: UnaryFunction<T3, T4>, fn4: UnaryFunction<T4, T5>, fn5: UnaryFunction<T5, T6>, fn6: UnaryFunction<T6, T7>, fn7: UnaryFunction<T7, T8>, fn8: UnaryFunction<T8, T9>, fn9: UnaryFunction<T9, T10>, fn10: UnaryFunction<T10, T11>, fn11: UnaryFunction<T11, T12>, fn12: UnaryFunction<T12, T13>, fn13: UnaryFunction<T13, T14>, fn14: UnaryFunction<T14, R>): R;\\n/**\\n * Applies a series of functions to an initial value, passing the result of each function to the next.\\n *\\n * Used to convert code that looks like:\\n * ```typescript\\n * const a = addB(addC({ a: 'a' }));\\n * ```\\n * to:\\n * ```typescript\\n * const a = chain({ a: 'a' }, addB, addC);\\n * ```\\n *\\n * See [composable-options](/examples/composable-options) for an example of how this can be used.\\n *\\n * @param {T0} initial Initial value to pass through the chain\\n * @param fns Functions to apply to the initial value, and each subsequent value\\n * @returns {R} Updated value after all functions have been applied\\n */\\nexport declare function chain<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>(initial: T0, fn0: UnaryFunction<T0, T1>, fn1: UnaryFunction<T1, T2>, fn2: UnaryFunction<T2, T3>, fn3: UnaryFunction<T3, T4>, fn4: UnaryFunction<T4, T5>, fn5: UnaryFunction<T5, T6>, fn6: UnaryFunction<T6, T7>, fn7: UnaryFunction<T7, T8>, fn8: UnaryFunction<T8, T9>, fn9: UnaryFunction<T9, T10>, fn10: UnaryFunction<T10, T11>, fn11: UnaryFunction<T11, T12>, fn12: UnaryFunction<T12, T13>, fn13: UnaryFunction<T13, T14>, fn14: UnaryFunction<T14, T15>, fn15: UnaryFunction<T15, R>): R;\\n/**\\n * A composition helper to be used with {@link chain}.\\n *\\n * @param name The name of the option to add\\n * @param config The configuration for the option\\n * @returns A unary function that adds an option to an {@link ArgvParser}.\\n */\\nexport declare function makeComposableOption<const TKey extends string, const TOptionConfig extends OptionConfig>(name: TKey, config: TOptionConfig): <const T extends ParsedArgs>(argv: ArgvParser<T>) => ArgvParser<T & { [key in TKey]: import(\\\"../option-types\\\").UndefinedIfRequiredAndNoDefault<TOptionConfig, (\\\"choices\\\" extends keyof TOptionConfig ? TOptionConfig[keyof TOptionConfig & \\\"choices\\\"] extends (infer TChoice)[] ? TChoice : TOptionConfig[keyof TOptionConfig & \\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never) extends [never] ? TOptionConfig[\\\"coerce\\\"] extends (s: any) => any ? ReturnType<TOptionConfig[\\\"coerce\\\"]> : {\\n    string: string;\\n    number: number;\\n    boolean: boolean;\\n    array: (TOptionConfig extends import(\\\"../option-types\\\").ArrayOptionConfig<string | number> ? TOptionConfig[\\\"items\\\"] extends \\\"string\\\" ? string : number : never)[];\\n    object: TOptionConfig extends import(\\\"../option-types\\\").ObjectOptionConfig<Record<string, string>, Record<string, any>> ? (TOptionConfig[\\\"properties\\\"] extends infer T_1 extends Record<string, OptionConfig> ? { [key_1 in keyof T_1]: import(\\\"../option-types\\\").UndefinedIfRequiredAndNoDefault<TOptionConfig[\\\"properties\\\"][key_1], (\\\"choices\\\" extends keyof TOptionConfig[\\\"properties\\\"][key_1] ? TOptionConfig[\\\"properties\\\"][key_1][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : TOptionConfig[\\\"properties\\\"][key_1][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never) extends [never] ? TOptionConfig[\\\"properties\\\"][key_1][\\\"coerce\\\"] extends (s: any) => any ? ReturnType<TOptionConfig[\\\"properties\\\"][key_1][\\\"coerce\\\"]> : {\\n        string: string;\\n        number: number;\\n        boolean: boolean;\\n        array: (TOptionConfig[\\\"properties\\\"][key_1] extends infer T_2 ? T_2 extends TOptionConfig[\\\"properties\\\"][key_1] ? T_2 extends import(\\\"../option-types\\\").ArrayOptionConfig<string | number> ? T_2[\\\"items\\\"] extends \\\"string\\\" ? string : number : never : never : never)[];\\n        object: TOptionConfig[\\\"properties\\\"][key_1] extends infer T_3 ? T_3 extends TOptionConfig[\\\"properties\\\"][key_1] ? T_3 extends import(\\\"../option-types\\\").ObjectOptionConfig<Record<string, string>, Record<string, any>> ? (T_3[\\\"properties\\\"] extends infer T_4 extends Record<string, OptionConfig> ? { [key_2 in keyof T_4]: import(\\\"../option-types\\\").UndefinedIfRequiredAndNoDefault<T_3[\\\"properties\\\"][key_2], (\\\"choices\\\" extends keyof T_3[\\\"properties\\\"][key_2] ? T_3[\\\"properties\\\"][key_2][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_3[\\\"properties\\\"][key_2][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never) extends [never] ? T_3[\\\"properties\\\"][key_2][\\\"coerce\\\"] extends (s: any) => any ? ReturnType<T_3[\\\"properties\\\"][key_2][\\\"coerce\\\"]> : {\\n            string: string;\\n            number: number;\\n            boolean: boolean;\\n            array: (T_3[\\\"properties\\\"][key_2] extends infer T_5 ? T_5 extends T_3[\\\"properties\\\"][key_2] ? T_5 extends import(\\\"../option-types\\\").ArrayOptionConfig<string | number> ? T_5[\\\"items\\\"] extends \\\"string\\\" ? string : number : never : never : never)[];\\n            object: T_3[\\\"properties\\\"][key_2] extends infer T_6 ? T_6 extends T_3[\\\"properties\\\"][key_2] ? T_6 extends import(\\\"../option-types\\\").ObjectOptionConfig<Record<string, string>, Record<string, any>> ? (T_6[\\\"properties\\\"] extends infer T_7 extends Record<string, OptionConfig> ? { [key_3 in keyof T_7]: import(\\\"../option-types\\\").UndefinedIfRequiredAndNoDefault<T_6[\\\"properties\\\"][key_3], (\\\"choices\\\" extends keyof T_6[\\\"properties\\\"][key_3] ? T_6[\\\"properties\\\"][key_3][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_6[\\\"properties\\\"][key_3][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never) extends [never] ? T_6[\\\"properties\\\"][key_3][\\\"coerce\\\"] extends (s: any) => any ? ReturnType<T_6[\\\"properties\\\"][key_3][\\\"coerce\\\"]> : {\\n                string: string;\\n                number: number;\\n                boolean: boolean;\\n                array: (T_6[\\\"properties\\\"][key_3] extends infer T_8 ? T_8 extends T_6[\\\"properties\\\"][key_3] ? T_8 extends import(\\\"../option-types\\\").ArrayOptionConfig<string | number> ? T_8[\\\"items\\\"] extends \\\"string\\\" ? string : number : never : never : never)[];\\n                object: T_6[\\\"properties\\\"][key_3] extends infer T_9 ? T_9 extends T_6[\\\"properties\\\"][key_3] ? T_9 extends import(\\\"../option-types\\\").ObjectOptionConfig<Record<string, string>, Record<string, any>> ? (T_9[\\\"properties\\\"] extends infer T_10 extends Record<string, OptionConfig> ? { [key_4 in keyof T_10]: import(\\\"../option-types\\\").UndefinedIfRequiredAndNoDefault<T_9[\\\"properties\\\"][key_4], (\\\"choices\\\" extends keyof T_9[\\\"properties\\\"][key_4] ? T_9[\\\"properties\\\"][key_4][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_9[\\\"properties\\\"][key_4][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never) extends [never] ? T_9[\\\"properties\\\"][key_4][\\\"coerce\\\"] extends (s: any) => any ? ReturnType<T_9[\\\"properties\\\"][key_4][\\\"coerce\\\"]> : {\\n                    string: string;\\n                    number: number;\\n                    boolean: boolean;\\n                    array: (T_9[\\\"properties\\\"][key_4] extends infer T_11 ? T_11 extends T_9[\\\"properties\\\"][key_4] ? T_11 extends import(\\\"../option-types\\\").ArrayOptionConfig<string | number> ? T_11[\\\"items\\\"] extends \\\"string\\\" ? string : number : never : never : never)[];\\n                    object: T_9[\\\"properties\\\"][key_4] extends infer T_12 ? T_12 extends T_9[\\\"properties\\\"][key_4] ? T_12 extends import(\\\"../option-types\\\").ObjectOptionConfig<Record<string, string>, Record<string, any>> ? (T_12[\\\"properties\\\"] extends infer T_13 extends Record<string, OptionConfig> ? { [key_5 in keyof T_13]: import(\\\"../option-types\\\").UndefinedIfRequiredAndNoDefault<T_12[\\\"properties\\\"][key_5], (\\\"choices\\\" extends keyof T_12[\\\"properties\\\"][key_5] ? T_12[\\\"properties\\\"][key_5][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_12[\\\"properties\\\"][key_5][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never) extends [never] ? T_12[\\\"properties\\\"][key_5][\\\"coerce\\\"] extends (s: any) => any ? ReturnType<T_12[\\\"properties\\\"][key_5][\\\"coerce\\\"]> : {\\n                        string: string;\\n                        number: number;\\n                        boolean: boolean;\\n                        array: (T_12[\\\"properties\\\"][key_5] extends infer T_14 ? T_14 extends T_12[\\\"properties\\\"][key_5] ? T_14 extends import(\\\"../option-types\\\").ArrayOptionConfig<string | number> ? T_14[\\\"items\\\"] extends \\\"string\\\" ? string : number : never : never : never)[];\\n                        object: T_12[\\\"properties\\\"][key_5] extends infer T_15 ? T_15 extends T_12[\\\"properties\\\"][key_5] ? T_15 extends import(\\\"../option-types\\\").ObjectOptionConfig<Record<string, string>, Record<string, any>> ? (T_15[\\\"properties\\\"] extends infer T_16 extends Record<string, OptionConfig> ? { [key_6 in keyof T_16]: import(\\\"../option-types\\\").UndefinedIfRequiredAndNoDefault<T_15[\\\"properties\\\"][key_6], (\\\"choices\\\" extends keyof T_15[\\\"properties\\\"][key_6] ? T_15[\\\"properties\\\"][key_6][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_15[\\\"properties\\\"][key_6][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never) extends [never] ? T_15[\\\"properties\\\"][key_6][\\\"coerce\\\"] extends (s: any) => any ? ReturnType<T_15[\\\"properties\\\"][key_6][\\\"coerce\\\"]> : {\\n                            string: string;\\n                            number: number;\\n                            boolean: boolean;\\n                            array: (T_15[\\\"properties\\\"][key_6] extends infer T_17 ? T_17 extends T_15[\\\"properties\\\"][key_6] ? T_17 extends import(\\\"../option-types\\\").ArrayOptionConfig<string | number> ? T_17[\\\"items\\\"] extends \\\"string\\\" ? string : number : never : never : never)[];\\n                            object: T_15[\\\"properties\\\"][key_6] extends infer T_18 ? T_18 extends T_15[\\\"properties\\\"][key_6] ? T_18 extends import(\\\"../option-types\\\").ObjectOptionConfig<Record<string, string>, Record<string, any>> ? (T_18[\\\"properties\\\"] extends infer T_19 extends Record<string, OptionConfig> ? { [key_7 in keyof T_19]: import(\\\"../option-types\\\").UndefinedIfRequiredAndNoDefault<T_18[\\\"properties\\\"][key_7], (\\\"choices\\\" extends keyof T_18[\\\"properties\\\"][key_7] ? T_18[\\\"properties\\\"][key_7][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_18[\\\"properties\\\"][key_7][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never) extends [never] ? T_18[\\\"properties\\\"][key_7][\\\"coerce\\\"] extends (s: any) => any ? ReturnType<T_18[\\\"properties\\\"][key_7][\\\"coerce\\\"]> : {\\n                                string: string;\\n                                number: number;\\n                                boolean: boolean;\\n                                array: (T_18[\\\"properties\\\"][key_7] extends infer T_20 ? T_20 extends T_18[\\\"properties\\\"][key_7] ? T_20 extends import(\\\"../option-types\\\").ArrayOptionConfig<string | number> ? T_20[\\\"items\\\"] extends \\\"string\\\" ? string : number : never : never : never)[];\\n                                object: T_18[\\\"properties\\\"][key_7] extends infer T_21 ? T_21 extends T_18[\\\"properties\\\"][key_7] ? T_21 extends import(\\\"../option-types\\\").ObjectOptionConfig<Record<string, string>, Record<string, any>> ? (T_21[\\\"properties\\\"] extends infer T_22 extends Record<string, OptionConfig> ? { [key_8 in keyof T_22]: import(\\\"../option-types\\\").UndefinedIfRequiredAndNoDefault<T_21[\\\"properties\\\"][key_8], (\\\"choices\\\" extends keyof T_21[\\\"properties\\\"][key_8] ? T_21[\\\"properties\\\"][key_8][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_21[\\\"properties\\\"][key_8][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never) extends [never] ? T_21[\\\"properties\\\"][key_8][\\\"coerce\\\"] extends (s: any) => any ? ReturnType<T_21[\\\"properties\\\"][key_8][\\\"coerce\\\"]> : {\\n                                    string: string;\\n                                    number: number;\\n                                    boolean: boolean;\\n                                    array: (T_21[\\\"properties\\\"][key_8] extends infer T_23 ? T_23 extends T_21[\\\"properties\\\"][key_8] ? T_23 extends import(\\\"../option-types\\\").ArrayOptionConfig<string | number> ? T_23[\\\"items\\\"] extends \\\"string\\\" ? string : number : never : never : never)[];\\n                                    object: T_21[\\\"properties\\\"][key_8] extends infer T_24 ? T_24 extends T_21[\\\"properties\\\"][key_8] ? T_24 extends import(\\\"../option-types\\\").ObjectOptionConfig<Record<string, string>, Record<string, any>> ? (T_24[\\\"properties\\\"] extends infer T_25 extends Record<string, OptionConfig> ? { [key_9 in keyof T_25]: import(\\\"../option-types\\\").UndefinedIfRequiredAndNoDefault<T_24[\\\"properties\\\"][key_9], (\\\"choices\\\" extends keyof T_24[\\\"properties\\\"][key_9] ? T_24[\\\"properties\\\"][key_9][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_24[\\\"properties\\\"][key_9][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never) extends [never] ? T_24[\\\"properties\\\"][key_9][\\\"coerce\\\"] extends (s: any) => any ? ReturnType<T_24[\\\"properties\\\"][key_9][\\\"coerce\\\"]> : {\\n                                        string: string;\\n                                        number: number;\\n                                        boolean: boolean;\\n                                        array: (T_24[\\\"properties\\\"][key_9] extends infer T_26 ? T_26 extends T_24[\\\"properties\\\"][key_9] ? T_26 extends import(\\\"../option-types\\\").ArrayOptionConfig<string | number> ? T_26[\\\"items\\\"] extends \\\"string\\\" ? string : number : never : never : never)[];\\n                                        object: T_24[\\\"properties\\\"][key_9] extends infer T_27 ? T_27 extends T_24[\\\"properties\\\"][key_9] ? T_27 extends import(\\\"../option-types\\\").ObjectOptionConfig<Record<string, string>, Record<string, any>> ? (T_27[\\\"properties\\\"] extends infer T_28 extends Record<string, OptionConfig> ? { [key_10 in keyof T_28]: import(\\\"../option-types\\\").UndefinedIfRequiredAndNoDefault<T_27[\\\"properties\\\"][key_10], (\\\"choices\\\" extends keyof T_27[\\\"properties\\\"][key_10] ? T_27[\\\"properties\\\"][key_10][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_27[\\\"properties\\\"][key_10][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never) extends [never] ? T_27[\\\"properties\\\"][key_10][\\\"coerce\\\"] extends (s: any) => any ? ReturnType<T_27[\\\"properties\\\"][key_10][\\\"coerce\\\"]> : {\\n                                            string: string;\\n                                            number: number;\\n                                            boolean: boolean;\\n                                            array: (T_27[\\\"properties\\\"][key_10] extends infer T_29 ? T_29 extends T_27[\\\"properties\\\"][key_10] ? T_29 extends import(\\\"../option-types\\\").ArrayOptionConfig<string | number> ? T_29[\\\"items\\\"] extends \\\"string\\\" ? string : number : never : never : never)[];\\n                                            object: T_27[\\\"properties\\\"][key_10] extends infer T_30 ? T_30 extends T_27[\\\"properties\\\"][key_10] ? T_30 extends import(\\\"../option-types\\\").ObjectOptionConfig<Record<string, string>, Record<string, any>> ? (T_30[\\\"properties\\\"] extends infer T_31 extends Record<string, OptionConfig> ? { [key_11 in keyof T_31]: import(\\\"../option-types\\\").UndefinedIfRequiredAndNoDefault<T_30[\\\"properties\\\"][key_11], any>; } : never) & (T_30[\\\"additionalProperties\\\"] extends \\\"string\\\" ? Record<string, string> : T_30[\\\"additionalProperties\\\"] extends \\\"number\\\" ? Record<string, number> : T_30[\\\"additionalProperties\\\"] extends \\\"boolean\\\" ? Record<string, boolean> : Record<string, never>) : never : never : never;\\n                                        }[T_27[\\\"properties\\\"][key_10][\\\"type\\\"]] : \\\"choices\\\" extends keyof T_27[\\\"properties\\\"][key_10] ? T_27[\\\"properties\\\"][key_10][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_27[\\\"properties\\\"][key_10][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never>; } : never) & (T_27[\\\"additionalProperties\\\"] extends \\\"string\\\" ? Record<string, string> : T_27[\\\"additionalProperties\\\"] extends \\\"number\\\" ? Record<string, number> : T_27[\\\"additionalProperties\\\"] extends \\\"boolean\\\" ? Record<string, boolean> : Record<string, never>) : never : never : never;\\n                                    }[T_24[\\\"properties\\\"][key_9][\\\"type\\\"]] : \\\"choices\\\" extends keyof T_24[\\\"properties\\\"][key_9] ? T_24[\\\"properties\\\"][key_9][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_24[\\\"properties\\\"][key_9][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never>; } : never) & (T_24[\\\"additionalProperties\\\"] extends \\\"string\\\" ? Record<string, string> : T_24[\\\"additionalProperties\\\"] extends \\\"number\\\" ? Record<string, number> : T_24[\\\"additionalProperties\\\"] extends \\\"boolean\\\" ? Record<string, boolean> : Record<string, never>) : never : never : never;\\n                                }[T_21[\\\"properties\\\"][key_8][\\\"type\\\"]] : \\\"choices\\\" extends keyof T_21[\\\"properties\\\"][key_8] ? T_21[\\\"properties\\\"][key_8][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_21[\\\"properties\\\"][key_8][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never>; } : never) & (T_21[\\\"additionalProperties\\\"] extends \\\"string\\\" ? Record<string, string> : T_21[\\\"additionalProperties\\\"] extends \\\"number\\\" ? Record<string, number> : T_21[\\\"additionalProperties\\\"] extends \\\"boolean\\\" ? Record<string, boolean> : Record<string, never>) : never : never : never;\\n                            }[T_18[\\\"properties\\\"][key_7][\\\"type\\\"]] : \\\"choices\\\" extends keyof T_18[\\\"properties\\\"][key_7] ? T_18[\\\"properties\\\"][key_7][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_18[\\\"properties\\\"][key_7][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never>; } : never) & (T_18[\\\"additionalProperties\\\"] extends \\\"string\\\" ? Record<string, string> : T_18[\\\"additionalProperties\\\"] extends \\\"number\\\" ? Record<string, number> : T_18[\\\"additionalProperties\\\"] extends \\\"boolean\\\" ? Record<string, boolean> : Record<string, never>) : never : never : never;\\n                        }[T_15[\\\"properties\\\"][key_6][\\\"type\\\"]] : \\\"choices\\\" extends keyof T_15[\\\"properties\\\"][key_6] ? T_15[\\\"properties\\\"][key_6][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_15[\\\"properties\\\"][key_6][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never>; } : never) & (T_15[\\\"additionalProperties\\\"] extends \\\"string\\\" ? Record<string, string> : T_15[\\\"additionalProperties\\\"] extends \\\"number\\\" ? Record<string, number> : T_15[\\\"additionalProperties\\\"] extends \\\"boolean\\\" ? Record<string, boolean> : Record<string, never>) : never : never : never;\\n                    }[T_12[\\\"properties\\\"][key_5][\\\"type\\\"]] : \\\"choices\\\" extends keyof T_12[\\\"properties\\\"][key_5] ? T_12[\\\"properties\\\"][key_5][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_12[\\\"properties\\\"][key_5][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never>; } : never) & (T_12[\\\"additionalProperties\\\"] extends \\\"string\\\" ? Record<string, string> : T_12[\\\"additionalProperties\\\"] extends \\\"number\\\" ? Record<string, number> : T_12[\\\"additionalProperties\\\"] extends \\\"boolean\\\" ? Record<string, boolean> : Record<string, never>) : never : never : never;\\n                }[T_9[\\\"properties\\\"][key_4][\\\"type\\\"]] : \\\"choices\\\" extends keyof T_9[\\\"properties\\\"][key_4] ? T_9[\\\"properties\\\"][key_4][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_9[\\\"properties\\\"][key_4][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never>; } : never) & (T_9[\\\"additionalProperties\\\"] extends \\\"string\\\" ? Record<string, string> : T_9[\\\"additionalProperties\\\"] extends \\\"number\\\" ? Record<string, number> : T_9[\\\"additionalProperties\\\"] extends \\\"boolean\\\" ? Record<string, boolean> : Record<string, never>) : never : never : never;\\n            }[T_6[\\\"properties\\\"][key_3][\\\"type\\\"]] : \\\"choices\\\" extends keyof T_6[\\\"properties\\\"][key_3] ? T_6[\\\"properties\\\"][key_3][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_6[\\\"properties\\\"][key_3][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never>; } : never) & (T_6[\\\"additionalProperties\\\"] extends \\\"string\\\" ? Record<string, string> : T_6[\\\"additionalProperties\\\"] extends \\\"number\\\" ? Record<string, number> : T_6[\\\"additionalProperties\\\"] extends \\\"boolean\\\" ? Record<string, boolean> : Record<string, never>) : never : never : never;\\n        }[T_3[\\\"properties\\\"][key_2][\\\"type\\\"]] : \\\"choices\\\" extends keyof T_3[\\\"properties\\\"][key_2] ? T_3[\\\"properties\\\"][key_2][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : T_3[\\\"properties\\\"][key_2][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never>; } : never) & (T_3[\\\"additionalProperties\\\"] extends \\\"string\\\" ? Record<string, string> : T_3[\\\"additionalProperties\\\"] extends \\\"number\\\" ? Record<string, number> : T_3[\\\"additionalProperties\\\"] extends \\\"boolean\\\" ? Record<string, boolean> : Record<string, never>) : never : never : never;\\n    }[TOptionConfig[\\\"properties\\\"][key_1][\\\"type\\\"]] : \\\"choices\\\" extends keyof TOptionConfig[\\\"properties\\\"][key_1] ? TOptionConfig[\\\"properties\\\"][key_1][\\\"choices\\\"] extends (infer TChoice)[] ? TChoice : TOptionConfig[\\\"properties\\\"][key_1][\\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never>; } : never) & (TOptionConfig[\\\"additionalProperties\\\"] extends \\\"string\\\" ? Record<string, string> : TOptionConfig[\\\"additionalProperties\\\"] extends \\\"number\\\" ? Record<string, number> : TOptionConfig[\\\"additionalProperties\\\"] extends \\\"boolean\\\" ? Record<string, boolean> : Record<string, never>) : never;\\n}[TOptionConfig[\\\"type\\\"]] : \\\"choices\\\" extends keyof TOptionConfig ? TOptionConfig[keyof TOptionConfig & \\\"choices\\\"] extends (infer TChoice)[] ? TChoice : TOptionConfig[keyof TOptionConfig & \\\"choices\\\"] extends () => Array<infer TChoice_1> ? TChoice_1 : never : never>; }>;\\nexport {};\\n\",\"file:///node_modules/@cli-forge/parser/src/lib/utils/flags.d.ts\":\"export declare function isFlag(str: string): str is `-${string}`;\\nexport declare function readArgKeys(str: `-${string}`): string[];\\nexport declare function isNextFlag(str: string): boolean;\\n\",\"file:///node_modules/@cli-forge/parser/src/lib/utils/get-configured-key.d.ts\":\"import { OptionConfig } from '../option-types';\\nimport { ParsedArgs } from '../parser';\\nexport declare function getConfiguredOptionKey<T extends ParsedArgs>(key: string, configuredOptions: Partial<Record<keyof T, OptionConfig>>): keyof T | undefined;\\n\",\"file:///node_modules/@cli-forge/parser/src/lib/utils/read-default-value.d.ts\":\"import { OptionConfig, OptionConfigToType } from '../option-types';\\nexport declare function readDefaultValue<const T extends OptionConfig>(option: T): [OptionConfigToType<T> | undefined, string | undefined];\\n\",\"file:///node_modules/@cli-forge/parser/package.json\":\"{\\n  \\\"name\\\": \\\"@cli-forge/parser\\\",\\n  \\\"version\\\": \\\"0.0.1\\\",\\n  \\\"dependencies\\\": {\\n    \\\"tslib\\\": \\\"^2.3.0\\\"\\n  },\\n  \\\"type\\\": \\\"commonjs\\\",\\n  \\\"main\\\": \\\"./src/index.js\\\",\\n  \\\"typings\\\": \\\"./src/index.d.ts\\\",\\n  \\\"license\\\": \\\"ISC\\\",\\n  \\\"repository\\\": {\\n    \\\"type\\\": \\\"git\\\",\\n    \\\"directory\\\": \\\"packages/parser\\\",\\n    \\\"url\\\": \\\"https://github.com/AgentEnder/cli-forge\\\"\\n  },\\n  \\\"publishConfig\\\": {\\n    \\\"access\\\": \\\"public\\\"\\n  },\\n  \\\"types\\\": \\\"./src/index.d.ts\\\"\\n}\",\"file:///node_modules/@types/node/assert.d.ts\":\"/**\\n * The `assert` module provides a set of assertion functions for verifying\\n * invariants.\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/assert.js)\\n */\\ndeclare module 'assert' {\\n    /**\\n     * An alias of {@link ok}.\\n     * @since v0.5.9\\n     * @param value The input that is checked for being truthy.\\n     */\\n    function assert(value: unknown, message?: string | Error): asserts value;\\n    namespace assert {\\n        /**\\n         * Indicates the failure of an assertion. All errors thrown by the `assert` module\\n         * will be instances of the `AssertionError` class.\\n         */\\n        class AssertionError extends Error {\\n            actual: unknown;\\n            expected: unknown;\\n            operator: string;\\n            generatedMessage: boolean;\\n            code: 'ERR_ASSERTION';\\n            constructor(options?: {\\n                /** If provided, the error message is set to this value. */\\n                message?: string | undefined;\\n                /** The `actual` property on the error instance. */\\n                actual?: unknown | undefined;\\n                /** The `expected` property on the error instance. */\\n                expected?: unknown | undefined;\\n                /** The `operator` property on the error instance. */\\n                operator?: string | undefined;\\n                /** If provided, the generated stack trace omits frames before this function. */\\n                // tslint:disable-next-line:ban-types\\n                stackStartFn?: Function | undefined;\\n            });\\n        }\\n        /**\\n         * This feature is currently experimental and behavior might still change.\\n         * @since v14.2.0, v12.19.0\\n         * @experimental\\n         */\\n        class CallTracker {\\n            /**\\n             * The wrapper function is expected to be called exactly `exact` times. If the\\n             * function has not been called exactly `exact` times when `tracker.verify()` is called, then `tracker.verify()` will throw an\\n             * error.\\n             *\\n             * ```js\\n             * import assert from 'assert';\\n             *\\n             * // Creates call tracker.\\n             * const tracker = new assert.CallTracker();\\n             *\\n             * function func() {}\\n             *\\n             * // Returns a function that wraps func() that must be called exact times\\n             * // before tracker.verify().\\n             * const callsfunc = tracker.calls(func);\\n             * ```\\n             * @since v14.2.0, v12.19.0\\n             * @param [fn='A no-op function']\\n             * @param [exact=1]\\n             * @return that wraps `fn`.\\n             */\\n            calls(exact?: number): () => void;\\n            calls<Func extends (...args: any[]) => any>(fn?: Func, exact?: number): Func;\\n            /**\\n             * Example:\\n             *\\n             * ```js\\n             * import assert from 'node:assert';\\n             *\\n             * const tracker = new assert.CallTracker();\\n             *\\n             * function func() {}\\n             * const callsfunc = tracker.calls(func);\\n             * callsfunc(1, 2, 3);\\n             *\\n             * assert.deepStrictEqual(tracker.getCalls(callsfunc),\\n             *                        [{ thisArg: this, arguments: [1, 2, 3 ] }]);\\n             * ```\\n             *\\n             * @since v18.8.0, v16.18.0\\n             * @params fn\\n             * @returns An Array with the calls to a tracked function.\\n             */\\n            getCalls(fn: Function): CallTrackerCall[];\\n            /**\\n             * The arrays contains information about the expected and actual number of calls of\\n             * the functions that have not been called the expected number of times.\\n             *\\n             * ```js\\n             * import assert from 'assert';\\n             *\\n             * // Creates call tracker.\\n             * const tracker = new assert.CallTracker();\\n             *\\n             * function func() {}\\n             *\\n             * function foo() {}\\n             *\\n             * // Returns a function that wraps func() that must be called exact times\\n             * // before tracker.verify().\\n             * const callsfunc = tracker.calls(func, 2);\\n             *\\n             * // Returns an array containing information on callsfunc()\\n             * tracker.report();\\n             * // [\\n             * //  {\\n             * //    message: 'Expected the func function to be executed 2 time(s) but was\\n             * //    executed 0 time(s).',\\n             * //    actual: 0,\\n             * //    expected: 2,\\n             * //    operator: 'func',\\n             * //    stack: stack trace\\n             * //  }\\n             * // ]\\n             * ```\\n             * @since v14.2.0, v12.19.0\\n             * @return of objects containing information about the wrapper functions returned by `calls`.\\n             */\\n            report(): CallTrackerReportInformation[];\\n            /**\\n             * Reset calls of the call tracker.\\n             * If a tracked function is passed as an argument, the calls will be reset for it.\\n             * If no arguments are passed, all tracked functions will be reset.\\n             *\\n             * ```js\\n             * import assert from 'node:assert';\\n             *\\n             * const tracker = new assert.CallTracker();\\n             *\\n             * function func() {}\\n             * const callsfunc = tracker.calls(func);\\n             *\\n             * callsfunc();\\n             * // Tracker was called once\\n             * tracker.getCalls(callsfunc).length === 1;\\n             *\\n             * tracker.reset(callsfunc);\\n             * tracker.getCalls(callsfunc).length === 0;\\n             * ```\\n             *\\n             * @since v18.8.0, v16.18.0\\n             * @param fn a tracked function to reset.\\n             */\\n            reset(fn?: Function): void;\\n            /**\\n             * Iterates through the list of functions passed to `tracker.calls()` and will throw an error for functions that\\n             * have not been called the expected number of times.\\n             *\\n             * ```js\\n             * import assert from 'assert';\\n             *\\n             * // Creates call tracker.\\n             * const tracker = new assert.CallTracker();\\n             *\\n             * function func() {}\\n             *\\n             * // Returns a function that wraps func() that must be called exact times\\n             * // before tracker.verify().\\n             * const callsfunc = tracker.calls(func, 2);\\n             *\\n             * callsfunc();\\n             *\\n             * // Will throw an error since callsfunc() was only called once.\\n             * tracker.verify();\\n             * ```\\n             * @since v14.2.0, v12.19.0\\n             */\\n            verify(): void;\\n        }\\n        interface CallTrackerCall {\\n            thisArg: object;\\n            arguments: unknown[];\\n        }\\n        interface CallTrackerReportInformation {\\n            message: string;\\n            /** The actual number of times the function was called. */\\n            actual: number;\\n            /** The number of times the function was expected to be called. */\\n            expected: number;\\n            /** The name of the function that is wrapped. */\\n            operator: string;\\n            /** A stack trace of the function. */\\n            stack: object;\\n        }\\n        type AssertPredicate = RegExp | (new () => object) | ((thrown: unknown) => boolean) | object | Error;\\n        /**\\n         * Throws an `AssertionError` with the provided error message or a default\\n         * error message. If the `message` parameter is an instance of an `Error` then\\n         * it will be thrown instead of the `AssertionError`.\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.fail();\\n         * // AssertionError [ERR_ASSERTION]: Failed\\n         *\\n         * assert.fail('boom');\\n         * // AssertionError [ERR_ASSERTION]: boom\\n         *\\n         * assert.fail(new TypeError('need array'));\\n         * // TypeError: need array\\n         * ```\\n         *\\n         * Using `assert.fail()` with more than two arguments is possible but deprecated.\\n         * See below for further details.\\n         * @since v0.1.21\\n         * @param [message='Failed']\\n         */\\n        function fail(message?: string | Error): never;\\n        /** @deprecated since v10.0.0 - use fail([message]) or other assert functions instead. */\\n        function fail(\\n            actual: unknown,\\n            expected: unknown,\\n            message?: string | Error,\\n            operator?: string,\\n            // tslint:disable-next-line:ban-types\\n            stackStartFn?: Function\\n        ): never;\\n        /**\\n         * Tests if `value` is truthy. It is equivalent to`assert.equal(!!value, true, message)`.\\n         *\\n         * If `value` is not truthy, an `AssertionError` is thrown with a `message`property set equal to the value of the `message` parameter. If the `message`parameter is `undefined`, a default\\n         * error message is assigned. If the `message`parameter is an instance of an `Error` then it will be thrown instead of the`AssertionError`.\\n         * If no arguments are passed in at all `message` will be set to the string:`` 'No value argument passed to `assert.ok()`' ``.\\n         *\\n         * Be aware that in the `repl` the error message will be different to the one\\n         * thrown in a file! See below for further details.\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.ok(true);\\n         * // OK\\n         * assert.ok(1);\\n         * // OK\\n         *\\n         * assert.ok();\\n         * // AssertionError: No value argument passed to `assert.ok()`\\n         *\\n         * assert.ok(false, 'it\\\\'s false');\\n         * // AssertionError: it's false\\n         *\\n         * // In the repl:\\n         * assert.ok(typeof 123 === 'string');\\n         * // AssertionError: false == true\\n         *\\n         * // In a file (e.g. test.js):\\n         * assert.ok(typeof 123 === 'string');\\n         * // AssertionError: The expression evaluated to a falsy value:\\n         * //\\n         * //   assert.ok(typeof 123 === 'string')\\n         *\\n         * assert.ok(false);\\n         * // AssertionError: The expression evaluated to a falsy value:\\n         * //\\n         * //   assert.ok(false)\\n         *\\n         * assert.ok(0);\\n         * // AssertionError: The expression evaluated to a falsy value:\\n         * //\\n         * //   assert.ok(0)\\n         * ```\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * // Using `assert()` works the same:\\n         * assert(0);\\n         * // AssertionError: The expression evaluated to a falsy value:\\n         * //\\n         * //   assert(0)\\n         * ```\\n         * @since v0.1.21\\n         */\\n        function ok(value: unknown, message?: string | Error): asserts value;\\n        /**\\n         * **Strict assertion mode**\\n         *\\n         * An alias of {@link strictEqual}.\\n         *\\n         * **Legacy assertion mode**\\n         *\\n         * > Stability: 3 - Legacy: Use {@link strictEqual} instead.\\n         *\\n         * Tests shallow, coercive equality between the `actual` and `expected` parameters\\n         * using the [`==` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality). `NaN` is specially handled\\n         * and treated as being identical if both sides are `NaN`.\\n         *\\n         * ```js\\n         * import assert from 'assert';\\n         *\\n         * assert.equal(1, 1);\\n         * // OK, 1 == 1\\n         * assert.equal(1, '1');\\n         * // OK, 1 == '1'\\n         * assert.equal(NaN, NaN);\\n         * // OK\\n         *\\n         * assert.equal(1, 2);\\n         * // AssertionError: 1 == 2\\n         * assert.equal({ a: { b: 1 } }, { a: { b: 1 } });\\n         * // AssertionError: { a: { b: 1 } } == { a: { b: 1 } }\\n         * ```\\n         *\\n         * If the values are not equal, an `AssertionError` is thrown with a `message`property set equal to the value of the `message` parameter. If the `message`parameter is undefined, a default\\n         * error message is assigned. If the `message`parameter is an instance of an `Error` then it will be thrown instead of the`AssertionError`.\\n         * @since v0.1.21\\n         */\\n        function equal(actual: unknown, expected: unknown, message?: string | Error): void;\\n        /**\\n         * **Strict assertion mode**\\n         *\\n         * An alias of {@link notStrictEqual}.\\n         *\\n         * **Legacy assertion mode**\\n         *\\n         * > Stability: 3 - Legacy: Use {@link notStrictEqual} instead.\\n         *\\n         * Tests shallow, coercive inequality with the [`!=` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Inequality). `NaN` is\\n         * specially handled and treated as being identical if both sides are `NaN`.\\n         *\\n         * ```js\\n         * import assert from 'assert';\\n         *\\n         * assert.notEqual(1, 2);\\n         * // OK\\n         *\\n         * assert.notEqual(1, 1);\\n         * // AssertionError: 1 != 1\\n         *\\n         * assert.notEqual(1, '1');\\n         * // AssertionError: 1 != '1'\\n         * ```\\n         *\\n         * If the values are equal, an `AssertionError` is thrown with a `message`property set equal to the value of the `message` parameter. If the `message`parameter is undefined, a default error\\n         * message is assigned. If the `message`parameter is an instance of an `Error` then it will be thrown instead of the`AssertionError`.\\n         * @since v0.1.21\\n         */\\n        function notEqual(actual: unknown, expected: unknown, message?: string | Error): void;\\n        /**\\n         * **Strict assertion mode**\\n         *\\n         * An alias of {@link deepStrictEqual}.\\n         *\\n         * **Legacy assertion mode**\\n         *\\n         * > Stability: 3 - Legacy: Use {@link deepStrictEqual} instead.\\n         *\\n         * Tests for deep equality between the `actual` and `expected` parameters. Consider\\n         * using {@link deepStrictEqual} instead. {@link deepEqual} can have\\n         * surprising results.\\n         *\\n         * _Deep equality_ means that the enumerable \\\"own\\\" properties of child objects\\n         * are also recursively evaluated by the following rules.\\n         * @since v0.1.21\\n         */\\n        function deepEqual(actual: unknown, expected: unknown, message?: string | Error): void;\\n        /**\\n         * **Strict assertion mode**\\n         *\\n         * An alias of {@link notDeepStrictEqual}.\\n         *\\n         * **Legacy assertion mode**\\n         *\\n         * > Stability: 3 - Legacy: Use {@link notDeepStrictEqual} instead.\\n         *\\n         * Tests for any deep inequality. Opposite of {@link deepEqual}.\\n         *\\n         * ```js\\n         * import assert from 'assert';\\n         *\\n         * const obj1 = {\\n         *   a: {\\n         *     b: 1\\n         *   }\\n         * };\\n         * const obj2 = {\\n         *   a: {\\n         *     b: 2\\n         *   }\\n         * };\\n         * const obj3 = {\\n         *   a: {\\n         *     b: 1\\n         *   }\\n         * };\\n         * const obj4 = Object.create(obj1);\\n         *\\n         * assert.notDeepEqual(obj1, obj1);\\n         * // AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }\\n         *\\n         * assert.notDeepEqual(obj1, obj2);\\n         * // OK\\n         *\\n         * assert.notDeepEqual(obj1, obj3);\\n         * // AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }\\n         *\\n         * assert.notDeepEqual(obj1, obj4);\\n         * // OK\\n         * ```\\n         *\\n         * If the values are deeply equal, an `AssertionError` is thrown with a`message` property set equal to the value of the `message` parameter. If the`message` parameter is undefined, a default\\n         * error message is assigned. If the`message` parameter is an instance of an `Error` then it will be thrown\\n         * instead of the `AssertionError`.\\n         * @since v0.1.21\\n         */\\n        function notDeepEqual(actual: unknown, expected: unknown, message?: string | Error): void;\\n        /**\\n         * Tests strict equality between the `actual` and `expected` parameters as\\n         * determined by [`Object.is()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.strictEqual(1, 2);\\n         * // AssertionError [ERR_ASSERTION]: Expected inputs to be strictly equal:\\n         * //\\n         * // 1 !== 2\\n         *\\n         * assert.strictEqual(1, 1);\\n         * // OK\\n         *\\n         * assert.strictEqual('Hello foobar', 'Hello World!');\\n         * // AssertionError [ERR_ASSERTION]: Expected inputs to be strictly equal:\\n         * // + actual - expected\\n         * //\\n         * // + 'Hello foobar'\\n         * // - 'Hello World!'\\n         * //          ^\\n         *\\n         * const apples = 1;\\n         * const oranges = 2;\\n         * assert.strictEqual(apples, oranges, `apples ${apples} !== oranges ${oranges}`);\\n         * // AssertionError [ERR_ASSERTION]: apples 1 !== oranges 2\\n         *\\n         * assert.strictEqual(1, '1', new TypeError('Inputs are not identical'));\\n         * // TypeError: Inputs are not identical\\n         * ```\\n         *\\n         * If the values are not strictly equal, an `AssertionError` is thrown with a`message` property set equal to the value of the `message` parameter. If the`message` parameter is undefined, a\\n         * default error message is assigned. If the`message` parameter is an instance of an `Error` then it will be thrown\\n         * instead of the `AssertionError`.\\n         * @since v0.1.21\\n         */\\n        function strictEqual<T>(actual: unknown, expected: T, message?: string | Error): asserts actual is T;\\n        /**\\n         * Tests strict inequality between the `actual` and `expected` parameters as\\n         * determined by [`Object.is()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.notStrictEqual(1, 2);\\n         * // OK\\n         *\\n         * assert.notStrictEqual(1, 1);\\n         * // AssertionError [ERR_ASSERTION]: Expected \\\"actual\\\" to be strictly unequal to:\\n         * //\\n         * // 1\\n         *\\n         * assert.notStrictEqual(1, '1');\\n         * // OK\\n         * ```\\n         *\\n         * If the values are strictly equal, an `AssertionError` is thrown with a`message` property set equal to the value of the `message` parameter. If the`message` parameter is undefined, a\\n         * default error message is assigned. If the`message` parameter is an instance of an `Error` then it will be thrown\\n         * instead of the `AssertionError`.\\n         * @since v0.1.21\\n         */\\n        function notStrictEqual(actual: unknown, expected: unknown, message?: string | Error): void;\\n        /**\\n         * Tests for deep equality between the `actual` and `expected` parameters.\\n         * \\\"Deep\\\" equality means that the enumerable \\\"own\\\" properties of child objects\\n         * are recursively evaluated also by the following rules.\\n         * @since v1.2.0\\n         */\\n        function deepStrictEqual<T>(actual: unknown, expected: T, message?: string | Error): asserts actual is T;\\n        /**\\n         * Tests for deep strict inequality. Opposite of {@link deepStrictEqual}.\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.notDeepStrictEqual({ a: 1 }, { a: '1' });\\n         * // OK\\n         * ```\\n         *\\n         * If the values are deeply and strictly equal, an `AssertionError` is thrown\\n         * with a `message` property set equal to the value of the `message` parameter. If\\n         * the `message` parameter is undefined, a default error message is assigned. If\\n         * the `message` parameter is an instance of an `Error` then it will be thrown\\n         * instead of the `AssertionError`.\\n         * @since v1.2.0\\n         */\\n        function notDeepStrictEqual(actual: unknown, expected: unknown, message?: string | Error): void;\\n        /**\\n         * Expects the function `fn` to throw an error.\\n         *\\n         * If specified, `error` can be a [`Class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes),\\n         * [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions), a validation function,\\n         * a validation object where each property will be tested for strict deep equality,\\n         * or an instance of error where each property will be tested for strict deep\\n         * equality including the non-enumerable `message` and `name` properties. When\\n         * using an object, it is also possible to use a regular expression, when\\n         * validating against a string property. See below for examples.\\n         *\\n         * If specified, `message` will be appended to the message provided by the`AssertionError` if the `fn` call fails to throw or in case the error validation\\n         * fails.\\n         *\\n         * Custom validation object/error instance:\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * const err = new TypeError('Wrong value');\\n         * err.code = 404;\\n         * err.foo = 'bar';\\n         * err.info = {\\n         *   nested: true,\\n         *   baz: 'text'\\n         * };\\n         * err.reg = /abc/i;\\n         *\\n         * assert.throws(\\n         *   () => {\\n         *     throw err;\\n         *   },\\n         *   {\\n         *     name: 'TypeError',\\n         *     message: 'Wrong value',\\n         *     info: {\\n         *       nested: true,\\n         *       baz: 'text'\\n         *     }\\n         *     // Only properties on the validation object will be tested for.\\n         *     // Using nested objects requires all properties to be present. Otherwise\\n         *     // the validation is going to fail.\\n         *   }\\n         * );\\n         *\\n         * // Using regular expressions to validate error properties:\\n         * throws(\\n         *   () => {\\n         *     throw err;\\n         *   },\\n         *   {\\n         *     // The `name` and `message` properties are strings and using regular\\n         *     // expressions on those will match against the string. If they fail, an\\n         *     // error is thrown.\\n         *     name: /^TypeError$/,\\n         *     message: /Wrong/,\\n         *     foo: 'bar',\\n         *     info: {\\n         *       nested: true,\\n         *       // It is not possible to use regular expressions for nested properties!\\n         *       baz: 'text'\\n         *     },\\n         *     // The `reg` property contains a regular expression and only if the\\n         *     // validation object contains an identical regular expression, it is going\\n         *     // to pass.\\n         *     reg: /abc/i\\n         *   }\\n         * );\\n         *\\n         * // Fails due to the different `message` and `name` properties:\\n         * throws(\\n         *   () => {\\n         *     const otherErr = new Error('Not found');\\n         *     // Copy all enumerable properties from `err` to `otherErr`.\\n         *     for (const [key, value] of Object.entries(err)) {\\n         *       otherErr[key] = value;\\n         *     }\\n         *     throw otherErr;\\n         *   },\\n         *   // The error's `message` and `name` properties will also be checked when using\\n         *   // an error as validation object.\\n         *   err\\n         * );\\n         * ```\\n         *\\n         * Validate instanceof using constructor:\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.throws(\\n         *   () => {\\n         *     throw new Error('Wrong value');\\n         *   },\\n         *   Error\\n         * );\\n         * ```\\n         *\\n         * Validate error message using [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions):\\n         *\\n         * Using a regular expression runs `.toString` on the error object, and will\\n         * therefore also include the error name.\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.throws(\\n         *   () => {\\n         *     throw new Error('Wrong value');\\n         *   },\\n         *   /^Error: Wrong value$/\\n         * );\\n         * ```\\n         *\\n         * Custom error validation:\\n         *\\n         * The function must return `true` to indicate all internal validations passed.\\n         * It will otherwise fail with an `AssertionError`.\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.throws(\\n         *   () => {\\n         *     throw new Error('Wrong value');\\n         *   },\\n         *   (err) => {\\n         *     assert(err instanceof Error);\\n         *     assert(/value/.test(err));\\n         *     // Avoid returning anything from validation functions besides `true`.\\n         *     // Otherwise, it's not clear what part of the validation failed. Instead,\\n         *     // throw an error about the specific validation that failed (as done in this\\n         *     // example) and add as much helpful debugging information to that error as\\n         *     // possible.\\n         *     return true;\\n         *   },\\n         *   'unexpected error'\\n         * );\\n         * ```\\n         *\\n         * `error` cannot be a string. If a string is provided as the second\\n         * argument, then `error` is assumed to be omitted and the string will be used for`message` instead. This can lead to easy-to-miss mistakes. Using the same\\n         * message as the thrown error message is going to result in an`ERR_AMBIGUOUS_ARGUMENT` error. Please read the example below carefully if using\\n         * a string as the second argument gets considered:\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * function throwingFirst() {\\n         *   throw new Error('First');\\n         * }\\n         *\\n         * function throwingSecond() {\\n         *   throw new Error('Second');\\n         * }\\n         *\\n         * function notThrowing() {}\\n         *\\n         * // The second argument is a string and the input function threw an Error.\\n         * // The first case will not throw as it does not match for the error message\\n         * // thrown by the input function!\\n         * assert.throws(throwingFirst, 'Second');\\n         * // In the next example the message has no benefit over the message from the\\n         * // error and since it is not clear if the user intended to actually match\\n         * // against the error message, Node.js throws an `ERR_AMBIGUOUS_ARGUMENT` error.\\n         * assert.throws(throwingSecond, 'Second');\\n         * // TypeError [ERR_AMBIGUOUS_ARGUMENT]\\n         *\\n         * // The string is only used (as message) in case the function does not throw:\\n         * assert.throws(notThrowing, 'Second');\\n         * // AssertionError [ERR_ASSERTION]: Missing expected exception: Second\\n         *\\n         * // If it was intended to match for the error message do this instead:\\n         * // It does not throw because the error messages match.\\n         * assert.throws(throwingSecond, /Second$/);\\n         *\\n         * // If the error message does not match, an AssertionError is thrown.\\n         * assert.throws(throwingFirst, /Second$/);\\n         * // AssertionError [ERR_ASSERTION]\\n         * ```\\n         *\\n         * Due to the confusing error-prone notation, avoid a string as the second\\n         * argument.\\n         * @since v0.1.21\\n         */\\n        function throws(block: () => unknown, message?: string | Error): void;\\n        function throws(block: () => unknown, error: AssertPredicate, message?: string | Error): void;\\n        /**\\n         * Asserts that the function `fn` does not throw an error.\\n         *\\n         * Using `assert.doesNotThrow()` is actually not useful because there\\n         * is no benefit in catching an error and then rethrowing it. Instead, consider\\n         * adding a comment next to the specific code path that should not throw and keep\\n         * error messages as expressive as possible.\\n         *\\n         * When `assert.doesNotThrow()` is called, it will immediately call the `fn`function.\\n         *\\n         * If an error is thrown and it is the same type as that specified by the `error`parameter, then an `AssertionError` is thrown. If the error is of a\\n         * different type, or if the `error` parameter is undefined, the error is\\n         * propagated back to the caller.\\n         *\\n         * If specified, `error` can be a [`Class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes),\\n         * [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions) or a validation\\n         * function. See {@link throws} for more details.\\n         *\\n         * The following, for instance, will throw the `TypeError` because there is no\\n         * matching error type in the assertion:\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.doesNotThrow(\\n         *   () => {\\n         *     throw new TypeError('Wrong value');\\n         *   },\\n         *   SyntaxError\\n         * );\\n         * ```\\n         *\\n         * However, the following will result in an `AssertionError` with the message\\n         * 'Got unwanted exception...':\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.doesNotThrow(\\n         *   () => {\\n         *     throw new TypeError('Wrong value');\\n         *   },\\n         *   TypeError\\n         * );\\n         * ```\\n         *\\n         * If an `AssertionError` is thrown and a value is provided for the `message`parameter, the value of `message` will be appended to the `AssertionError` message:\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.doesNotThrow(\\n         *   () => {\\n         *     throw new TypeError('Wrong value');\\n         *   },\\n         *   /Wrong value/,\\n         *   'Whoops'\\n         * );\\n         * // Throws: AssertionError: Got unwanted exception: Whoops\\n         * ```\\n         * @since v0.1.21\\n         */\\n        function doesNotThrow(block: () => unknown, message?: string | Error): void;\\n        function doesNotThrow(block: () => unknown, error: AssertPredicate, message?: string | Error): void;\\n        /**\\n         * Throws `value` if `value` is not `undefined` or `null`. This is useful when\\n         * testing the `error` argument in callbacks. The stack trace contains all frames\\n         * from the error passed to `ifError()` including the potential new frames for`ifError()` itself.\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.ifError(null);\\n         * // OK\\n         * assert.ifError(0);\\n         * // AssertionError [ERR_ASSERTION]: ifError got unwanted exception: 0\\n         * assert.ifError('error');\\n         * // AssertionError [ERR_ASSERTION]: ifError got unwanted exception: 'error'\\n         * assert.ifError(new Error());\\n         * // AssertionError [ERR_ASSERTION]: ifError got unwanted exception: Error\\n         *\\n         * // Create some random error frames.\\n         * let err;\\n         * (function errorFrame() {\\n         *   err = new Error('test error');\\n         * })();\\n         *\\n         * (function ifErrorFrame() {\\n         *   assert.ifError(err);\\n         * })();\\n         * // AssertionError [ERR_ASSERTION]: ifError got unwanted exception: test error\\n         * //     at ifErrorFrame\\n         * //     at errorFrame\\n         * ```\\n         * @since v0.1.97\\n         */\\n        function ifError(value: unknown): asserts value is null | undefined;\\n        /**\\n         * Awaits the `asyncFn` promise or, if `asyncFn` is a function, immediately\\n         * calls the function and awaits the returned promise to complete. It will then\\n         * check that the promise is rejected.\\n         *\\n         * If `asyncFn` is a function and it throws an error synchronously,`assert.rejects()` will return a rejected `Promise` with that error. If the\\n         * function does not return a promise, `assert.rejects()` will return a rejected`Promise` with an `ERR_INVALID_RETURN_VALUE` error. In both cases the error\\n         * handler is skipped.\\n         *\\n         * Besides the async nature to await the completion behaves identically to {@link throws}.\\n         *\\n         * If specified, `error` can be a [`Class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes),\\n         * [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions), a validation function,\\n         * an object where each property will be tested for, or an instance of error where\\n         * each property will be tested for including the non-enumerable `message` and`name` properties.\\n         *\\n         * If specified, `message` will be the message provided by the `AssertionError` if the `asyncFn` fails to reject.\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * await assert.rejects(\\n         *   async () => {\\n         *     throw new TypeError('Wrong value');\\n         *   },\\n         *   {\\n         *     name: 'TypeError',\\n         *     message: 'Wrong value'\\n         *   }\\n         * );\\n         * ```\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * await assert.rejects(\\n         *   async () => {\\n         *     throw new TypeError('Wrong value');\\n         *   },\\n         *   (err) => {\\n         *     assert.strictEqual(err.name, 'TypeError');\\n         *     assert.strictEqual(err.message, 'Wrong value');\\n         *     return true;\\n         *   }\\n         * );\\n         * ```\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.rejects(\\n         *   Promise.reject(new Error('Wrong value')),\\n         *   Error\\n         * ).then(() => {\\n         *   // ...\\n         * });\\n         * ```\\n         *\\n         * `error` cannot be a string. If a string is provided as the second\\n         * argument, then `error` is assumed to be omitted and the string will be used for`message` instead. This can lead to easy-to-miss mistakes. Please read the\\n         * example in {@link throws} carefully if using a string as the second\\n         * argument gets considered.\\n         * @since v10.0.0\\n         */\\n        function rejects(block: (() => Promise<unknown>) | Promise<unknown>, message?: string | Error): Promise<void>;\\n        function rejects(block: (() => Promise<unknown>) | Promise<unknown>, error: AssertPredicate, message?: string | Error): Promise<void>;\\n        /**\\n         * Awaits the `asyncFn` promise or, if `asyncFn` is a function, immediately\\n         * calls the function and awaits the returned promise to complete. It will then\\n         * check that the promise is not rejected.\\n         *\\n         * If `asyncFn` is a function and it throws an error synchronously,`assert.doesNotReject()` will return a rejected `Promise` with that error. If\\n         * the function does not return a promise, `assert.doesNotReject()` will return a\\n         * rejected `Promise` with an `ERR_INVALID_RETURN_VALUE` error. In both cases\\n         * the error handler is skipped.\\n         *\\n         * Using `assert.doesNotReject()` is actually not useful because there is little\\n         * benefit in catching a rejection and then rejecting it again. Instead, consider\\n         * adding a comment next to the specific code path that should not reject and keep\\n         * error messages as expressive as possible.\\n         *\\n         * If specified, `error` can be a [`Class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes),\\n         * [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions) or a validation\\n         * function. See {@link throws} for more details.\\n         *\\n         * Besides the async nature to await the completion behaves identically to {@link doesNotThrow}.\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * await assert.doesNotReject(\\n         *   async () => {\\n         *     throw new TypeError('Wrong value');\\n         *   },\\n         *   SyntaxError\\n         * );\\n         * ```\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.doesNotReject(Promise.reject(new TypeError('Wrong value')))\\n         *   .then(() => {\\n         *     // ...\\n         *   });\\n         * ```\\n         * @since v10.0.0\\n         */\\n        function doesNotReject(block: (() => Promise<unknown>) | Promise<unknown>, message?: string | Error): Promise<void>;\\n        function doesNotReject(block: (() => Promise<unknown>) | Promise<unknown>, error: AssertPredicate, message?: string | Error): Promise<void>;\\n        /**\\n         * Expects the `string` input to match the regular expression.\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.match('I will fail', /pass/);\\n         * // AssertionError [ERR_ASSERTION]: The input did not match the regular ...\\n         *\\n         * assert.match(123, /pass/);\\n         * // AssertionError [ERR_ASSERTION]: The \\\"string\\\" argument must be of type string.\\n         *\\n         * assert.match('I will pass', /pass/);\\n         * // OK\\n         * ```\\n         *\\n         * If the values do not match, or if the `string` argument is of another type than`string`, an `AssertionError` is thrown with a `message` property set equal\\n         * to the value of the `message` parameter. If the `message` parameter is\\n         * undefined, a default error message is assigned. If the `message` parameter is an\\n         * instance of an `Error` then it will be thrown instead of the `AssertionError`.\\n         * @since v13.6.0, v12.16.0\\n         */\\n        function match(value: string, regExp: RegExp, message?: string | Error): void;\\n        /**\\n         * Expects the `string` input not to match the regular expression.\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.doesNotMatch('I will fail', /fail/);\\n         * // AssertionError [ERR_ASSERTION]: The input was expected to not match the ...\\n         *\\n         * assert.doesNotMatch(123, /pass/);\\n         * // AssertionError [ERR_ASSERTION]: The \\\"string\\\" argument must be of type string.\\n         *\\n         * assert.doesNotMatch('I will pass', /different/);\\n         * // OK\\n         * ```\\n         *\\n         * If the values do match, or if the `string` argument is of another type than`string`, an `AssertionError` is thrown with a `message` property set equal\\n         * to the value of the `message` parameter. If the `message` parameter is\\n         * undefined, a default error message is assigned. If the `message` parameter is an\\n         * instance of an `Error` then it will be thrown instead of the `AssertionError`.\\n         * @since v13.6.0, v12.16.0\\n         */\\n        function doesNotMatch(value: string, regExp: RegExp, message?: string | Error): void;\\n        const strict: Omit<typeof assert, 'equal' | 'notEqual' | 'deepEqual' | 'notDeepEqual' | 'ok' | 'strictEqual' | 'deepStrictEqual' | 'ifError' | 'strict'> & {\\n            (value: unknown, message?: string | Error): asserts value;\\n            equal: typeof strictEqual;\\n            notEqual: typeof notStrictEqual;\\n            deepEqual: typeof deepStrictEqual;\\n            notDeepEqual: typeof notDeepStrictEqual;\\n            // Mapped types and assertion functions are incompatible?\\n            // TS2775: Assertions require every name in the call target\\n            // to be declared with an explicit type annotation.\\n            ok: typeof ok;\\n            strictEqual: typeof strictEqual;\\n            deepStrictEqual: typeof deepStrictEqual;\\n            ifError: typeof ifError;\\n            strict: typeof strict;\\n        };\\n    }\\n    export = assert;\\n}\\ndeclare module 'node:assert' {\\n    import assert = require('assert');\\n    export = assert;\\n}\\n\",\"file:///node_modules/@types/node/async_hooks.d.ts\":\"/**\\n * The `async_hooks` module provides an API to track asynchronous resources. It\\n * can be accessed using:\\n *\\n * ```js\\n * import async_hooks from 'async_hooks';\\n * ```\\n * @experimental\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/async_hooks.js)\\n */\\ndeclare module 'async_hooks' {\\n    /**\\n     * ```js\\n     * import { executionAsyncId } from 'async_hooks';\\n     *\\n     * console.log(executionAsyncId());  // 1 - bootstrap\\n     * fs.open(path, 'r', (err, fd) => {\\n     *   console.log(executionAsyncId());  // 6 - open()\\n     * });\\n     * ```\\n     *\\n     * The ID returned from `executionAsyncId()` is related to execution timing, not\\n     * causality (which is covered by `triggerAsyncId()`):\\n     *\\n     * ```js\\n     * const server = net.createServer((conn) => {\\n     *   // Returns the ID of the server, not of the new connection, because the\\n     *   // callback runs in the execution scope of the server's MakeCallback().\\n     *   async_hooks.executionAsyncId();\\n     *\\n     * }).listen(port, () => {\\n     *   // Returns the ID of a TickObject (process.nextTick()) because all\\n     *   // callbacks passed to .listen() are wrapped in a nextTick().\\n     *   async_hooks.executionAsyncId();\\n     * });\\n     * ```\\n     *\\n     * Promise contexts may not get precise `executionAsyncIds` by default.\\n     * See the section on `promise execution tracking`.\\n     * @since v8.1.0\\n     * @return The `asyncId` of the current execution context. Useful to track when something calls.\\n     */\\n    function executionAsyncId(): number;\\n    /**\\n     * Resource objects returned by `executionAsyncResource()` are most often internal\\n     * Node.js handle objects with undocumented APIs. Using any functions or properties\\n     * on the object is likely to crash your application and should be avoided.\\n     *\\n     * Using `executionAsyncResource()` in the top-level execution context will\\n     * return an empty object as there is no handle or request object to use,\\n     * but having an object representing the top-level can be helpful.\\n     *\\n     * ```js\\n     * import { open } from 'fs';\\n     * import { executionAsyncId, executionAsyncResource } from 'async_hooks';\\n     *\\n     * console.log(executionAsyncId(), executionAsyncResource());  // 1 {}\\n     * open(new URL(import.meta.url), 'r', (err, fd) => {\\n     *   console.log(executionAsyncId(), executionAsyncResource());  // 7 FSReqWrap\\n     * });\\n     * ```\\n     *\\n     * This can be used to implement continuation local storage without the\\n     * use of a tracking `Map` to store the metadata:\\n     *\\n     * ```js\\n     * import { createServer } from 'http';\\n     * import {\\n     *   executionAsyncId,\\n     *   executionAsyncResource,\\n     *   createHook\\n     * } from 'async_hooks';\\n     * const sym = Symbol('state'); // Private symbol to avoid pollution\\n     *\\n     * createHook({\\n     *   init(asyncId, type, triggerAsyncId, resource) {\\n     *     const cr = executionAsyncResource();\\n     *     if (cr) {\\n     *       resource[sym] = cr[sym];\\n     *     }\\n     *   }\\n     * }).enable();\\n     *\\n     * const server = createServer((req, res) => {\\n     *   executionAsyncResource()[sym] = { state: req.url };\\n     *   setTimeout(function() {\\n     *     res.end(JSON.stringify(executionAsyncResource()[sym]));\\n     *   }, 100);\\n     * }).listen(3000);\\n     * ```\\n     * @since v13.9.0, v12.17.0\\n     * @return The resource representing the current execution. Useful to store data within the resource.\\n     */\\n    function executionAsyncResource(): object;\\n    /**\\n     * ```js\\n     * const server = net.createServer((conn) => {\\n     *   // The resource that caused (or triggered) this callback to be called\\n     *   // was that of the new connection. Thus the return value of triggerAsyncId()\\n     *   // is the asyncId of \\\"conn\\\".\\n     *   async_hooks.triggerAsyncId();\\n     *\\n     * }).listen(port, () => {\\n     *   // Even though all callbacks passed to .listen() are wrapped in a nextTick()\\n     *   // the callback itself exists because the call to the server's .listen()\\n     *   // was made. So the return value would be the ID of the server.\\n     *   async_hooks.triggerAsyncId();\\n     * });\\n     * ```\\n     *\\n     * Promise contexts may not get valid `triggerAsyncId`s by default. See\\n     * the section on `promise execution tracking`.\\n     * @return The ID of the resource responsible for calling the callback that is currently being executed.\\n     */\\n    function triggerAsyncId(): number;\\n    interface HookCallbacks {\\n        /**\\n         * Called when a class is constructed that has the possibility to emit an asynchronous event.\\n         * @param asyncId a unique ID for the async resource\\n         * @param type the type of the async resource\\n         * @param triggerAsyncId the unique ID of the async resource in whose execution context this async resource was created\\n         * @param resource reference to the resource representing the async operation, needs to be released during destroy\\n         */\\n        init?(asyncId: number, type: string, triggerAsyncId: number, resource: object): void;\\n        /**\\n         * When an asynchronous operation is initiated or completes a callback is called to notify the user.\\n         * The before callback is called just before said callback is executed.\\n         * @param asyncId the unique identifier assigned to the resource about to execute the callback.\\n         */\\n        before?(asyncId: number): void;\\n        /**\\n         * Called immediately after the callback specified in before is completed.\\n         * @param asyncId the unique identifier assigned to the resource which has executed the callback.\\n         */\\n        after?(asyncId: number): void;\\n        /**\\n         * Called when a promise has resolve() called. This may not be in the same execution id\\n         * as the promise itself.\\n         * @param asyncId the unique id for the promise that was resolve()d.\\n         */\\n        promiseResolve?(asyncId: number): void;\\n        /**\\n         * Called after the resource corresponding to asyncId is destroyed\\n         * @param asyncId a unique ID for the async resource\\n         */\\n        destroy?(asyncId: number): void;\\n    }\\n    interface AsyncHook {\\n        /**\\n         * Enable the callbacks for a given AsyncHook instance. If no callbacks are provided enabling is a noop.\\n         */\\n        enable(): this;\\n        /**\\n         * Disable the callbacks for a given AsyncHook instance from the global pool of AsyncHook callbacks to be executed. Once a hook has been disabled it will not be called again until enabled.\\n         */\\n        disable(): this;\\n    }\\n    /**\\n     * Registers functions to be called for different lifetime events of each async\\n     * operation.\\n     *\\n     * The callbacks `init()`/`before()`/`after()`/`destroy()` are called for the\\n     * respective asynchronous event during a resource's lifetime.\\n     *\\n     * All callbacks are optional. For example, if only resource cleanup needs to\\n     * be tracked, then only the `destroy` callback needs to be passed. The\\n     * specifics of all functions that can be passed to `callbacks` is in the `Hook Callbacks` section.\\n     *\\n     * ```js\\n     * import { createHook } from 'async_hooks';\\n     *\\n     * const asyncHook = createHook({\\n     *   init(asyncId, type, triggerAsyncId, resource) { },\\n     *   destroy(asyncId) { }\\n     * });\\n     * ```\\n     *\\n     * The callbacks will be inherited via the prototype chain:\\n     *\\n     * ```js\\n     * class MyAsyncCallbacks {\\n     *   init(asyncId, type, triggerAsyncId, resource) { }\\n     *   destroy(asyncId) {}\\n     * }\\n     *\\n     * class MyAddedCallbacks extends MyAsyncCallbacks {\\n     *   before(asyncId) { }\\n     *   after(asyncId) { }\\n     * }\\n     *\\n     * const asyncHook = async_hooks.createHook(new MyAddedCallbacks());\\n     * ```\\n     *\\n     * Because promises are asynchronous resources whose lifecycle is tracked\\n     * via the async hooks mechanism, the `init()`, `before()`, `after()`, and`destroy()` callbacks _must not_ be async functions that return promises.\\n     * @since v8.1.0\\n     * @param callbacks The `Hook Callbacks` to register\\n     * @return Instance used for disabling and enabling hooks\\n     */\\n    function createHook(callbacks: HookCallbacks): AsyncHook;\\n    interface AsyncResourceOptions {\\n        /**\\n         * The ID of the execution context that created this async event.\\n         * @default executionAsyncId()\\n         */\\n        triggerAsyncId?: number | undefined;\\n        /**\\n         * Disables automatic `emitDestroy` when the object is garbage collected.\\n         * This usually does not need to be set (even if `emitDestroy` is called\\n         * manually), unless the resource's `asyncId` is retrieved and the\\n         * sensitive API's `emitDestroy` is called with it.\\n         * @default false\\n         */\\n        requireManualDestroy?: boolean | undefined;\\n    }\\n    /**\\n     * The class `AsyncResource` is designed to be extended by the embedder's async\\n     * resources. Using this, users can easily trigger the lifetime events of their\\n     * own resources.\\n     *\\n     * The `init` hook will trigger when an `AsyncResource` is instantiated.\\n     *\\n     * The following is an overview of the `AsyncResource` API.\\n     *\\n     * ```js\\n     * import { AsyncResource, executionAsyncId } from 'async_hooks';\\n     *\\n     * // AsyncResource() is meant to be extended. Instantiating a\\n     * // new AsyncResource() also triggers init. If triggerAsyncId is omitted then\\n     * // async_hook.executionAsyncId() is used.\\n     * const asyncResource = new AsyncResource(\\n     *   type, { triggerAsyncId: executionAsyncId(), requireManualDestroy: false }\\n     * );\\n     *\\n     * // Run a function in the execution context of the resource. This will\\n     * // * establish the context of the resource\\n     * // * trigger the AsyncHooks before callbacks\\n     * // * call the provided function `fn` with the supplied arguments\\n     * // * trigger the AsyncHooks after callbacks\\n     * // * restore the original execution context\\n     * asyncResource.runInAsyncScope(fn, thisArg, ...args);\\n     *\\n     * // Call AsyncHooks destroy callbacks.\\n     * asyncResource.emitDestroy();\\n     *\\n     * // Return the unique ID assigned to the AsyncResource instance.\\n     * asyncResource.asyncId();\\n     *\\n     * // Return the trigger ID for the AsyncResource instance.\\n     * asyncResource.triggerAsyncId();\\n     * ```\\n     */\\n    class AsyncResource {\\n        /**\\n         * AsyncResource() is meant to be extended. Instantiating a\\n         * new AsyncResource() also triggers init. If triggerAsyncId is omitted then\\n         * async_hook.executionAsyncId() is used.\\n         * @param type The type of async event.\\n         * @param triggerAsyncId The ID of the execution context that created\\n         *   this async event (default: `executionAsyncId()`), or an\\n         *   AsyncResourceOptions object (since v9.3.0)\\n         */\\n        constructor(type: string, triggerAsyncId?: number | AsyncResourceOptions);\\n        /**\\n         * Binds the given function to the current execution context.\\n         *\\n         * The returned function will have an `asyncResource` property referencing\\n         * the `AsyncResource` to which the function is bound.\\n         * @since v14.8.0, v12.19.0\\n         * @param fn The function to bind to the current execution context.\\n         * @param type An optional name to associate with the underlying `AsyncResource`.\\n         */\\n        static bind<Func extends (this: ThisArg, ...args: any[]) => any, ThisArg>(\\n            fn: Func,\\n            type?: string,\\n            thisArg?: ThisArg\\n        ): Func & {\\n            asyncResource: AsyncResource;\\n        };\\n        /**\\n         * Binds the given function to execute to this `AsyncResource`'s scope.\\n         *\\n         * The returned function will have an `asyncResource` property referencing\\n         * the `AsyncResource` to which the function is bound.\\n         * @since v14.8.0, v12.19.0\\n         * @param fn The function to bind to the current `AsyncResource`.\\n         */\\n        bind<Func extends (...args: any[]) => any>(\\n            fn: Func\\n        ): Func & {\\n            asyncResource: AsyncResource;\\n        };\\n        /**\\n         * Call the provided function with the provided arguments in the execution context\\n         * of the async resource. This will establish the context, trigger the AsyncHooks\\n         * before callbacks, call the function, trigger the AsyncHooks after callbacks, and\\n         * then restore the original execution context.\\n         * @since v9.6.0\\n         * @param fn The function to call in the execution context of this async resource.\\n         * @param thisArg The receiver to be used for the function call.\\n         * @param args Optional arguments to pass to the function.\\n         */\\n        runInAsyncScope<This, Result>(fn: (this: This, ...args: any[]) => Result, thisArg?: This, ...args: any[]): Result;\\n        /**\\n         * Call all `destroy` hooks. This should only ever be called once. An error will\\n         * be thrown if it is called more than once. This **must** be manually called. If\\n         * the resource is left to be collected by the GC then the `destroy` hooks will\\n         * never be called.\\n         * @return A reference to `asyncResource`.\\n         */\\n        emitDestroy(): this;\\n        /**\\n         * @return The unique `asyncId` assigned to the resource.\\n         */\\n        asyncId(): number;\\n        /**\\n         *\\n         * @return The same `triggerAsyncId` that is passed to the `AsyncResource` constructor.\\n         */\\n        triggerAsyncId(): number;\\n    }\\n    /**\\n     * This class creates stores that stay coherent through asynchronous operations.\\n     *\\n     * While you can create your own implementation on top of the `async_hooks` module,`AsyncLocalStorage` should be preferred as it is a performant and memory safe\\n     * implementation that involves significant optimizations that are non-obvious to\\n     * implement.\\n     *\\n     * The following example uses `AsyncLocalStorage` to build a simple logger\\n     * that assigns IDs to incoming HTTP requests and includes them in messages\\n     * logged within each request.\\n     *\\n     * ```js\\n     * import http from 'http';\\n     * import { AsyncLocalStorage } from 'async_hooks';\\n     *\\n     * const asyncLocalStorage = new AsyncLocalStorage();\\n     *\\n     * function logWithId(msg) {\\n     *   const id = asyncLocalStorage.getStore();\\n     *   console.log(`${id !== undefined ? id : '-'}:`, msg);\\n     * }\\n     *\\n     * let idSeq = 0;\\n     * http.createServer((req, res) => {\\n     *   asyncLocalStorage.run(idSeq++, () => {\\n     *     logWithId('start');\\n     *     // Imagine any chain of async operations here\\n     *     setImmediate(() => {\\n     *       logWithId('finish');\\n     *       res.end();\\n     *     });\\n     *   });\\n     * }).listen(8080);\\n     *\\n     * http.get('http://localhost:8080');\\n     * http.get('http://localhost:8080');\\n     * // Prints:\\n     * //   0: start\\n     * //   1: start\\n     * //   0: finish\\n     * //   1: finish\\n     * ```\\n     *\\n     * Each instance of `AsyncLocalStorage` maintains an independent storage context.\\n     * Multiple instances can safely exist simultaneously without risk of interfering\\n     * with each other's data.\\n     * @since v13.10.0, v12.17.0\\n     */\\n    class AsyncLocalStorage<T> {\\n        /**\\n         * Binds the given function to the current execution context.\\n         * @since v18.16.0\\n         * @param fn The function to bind to the current execution context.\\n         * @returns A new function that calls `fn` within the captured execution context.\\n         */\\n        static bind<Func extends (...args: any[]) => any>(fn: Func): Func & {\\n            asyncResource: AsyncResource;\\n        };\\n        /**\\n         * Captures the current execution context and returns a function that accepts a function as an argument.\\n         * Whenever the returned function is called, it calls the function passed to it within the captured context.\\n         * @since v18.16.0\\n         */\\n        static snapshot(): (<R, TArgs extends any[]>(fn: (...args: TArgs) => R, ...args: TArgs) => R) & {\\n            asyncResource: AsyncResource;\\n        };\\n        /**\\n         * Disables the instance of `AsyncLocalStorage`. All subsequent calls\\n         * to `asyncLocalStorage.getStore()` will return `undefined` until`asyncLocalStorage.run()` or `asyncLocalStorage.enterWith()` is called again.\\n         *\\n         * When calling `asyncLocalStorage.disable()`, all current contexts linked to the\\n         * instance will be exited.\\n         *\\n         * Calling `asyncLocalStorage.disable()` is required before the`asyncLocalStorage` can be garbage collected. This does not apply to stores\\n         * provided by the `asyncLocalStorage`, as those objects are garbage collected\\n         * along with the corresponding async resources.\\n         *\\n         * Use this method when the `asyncLocalStorage` is not in use anymore\\n         * in the current process.\\n         * @since v13.10.0, v12.17.0\\n         * @experimental\\n         */\\n        disable(): void;\\n        /**\\n         * Returns the current store.\\n         * If called outside of an asynchronous context initialized by\\n         * calling `asyncLocalStorage.run()` or `asyncLocalStorage.enterWith()`, it\\n         * returns `undefined`.\\n         * @since v13.10.0, v12.17.0\\n         */\\n        getStore(): T | undefined;\\n        /**\\n         * Runs a function synchronously within a context and returns its\\n         * return value. The store is not accessible outside of the callback function.\\n         * The store is accessible to any asynchronous operations created within the\\n         * callback.\\n         *\\n         * The optional `args` are passed to the callback function.\\n         *\\n         * If the callback function throws an error, the error is thrown by `run()` too.\\n         * The stacktrace is not impacted by this call and the context is exited.\\n         *\\n         * Example:\\n         *\\n         * ```js\\n         * const store = { id: 2 };\\n         * try {\\n         *   asyncLocalStorage.run(store, () => {\\n         *     asyncLocalStorage.getStore(); // Returns the store object\\n         *     setTimeout(() => {\\n         *       asyncLocalStorage.getStore(); // Returns the store object\\n         *     }, 200);\\n         *     throw new Error();\\n         *   });\\n         * } catch (e) {\\n         *   asyncLocalStorage.getStore(); // Returns undefined\\n         *   // The error will be caught here\\n         * }\\n         * ```\\n         * @since v13.10.0, v12.17.0\\n         */\\n        run<R, TArgs extends any[]>(store: T, callback: (...args: TArgs) => R, ...args: TArgs): R;\\n        /**\\n         * Runs a function synchronously outside of a context and returns its\\n         * return value. The store is not accessible within the callback function or\\n         * the asynchronous operations created within the callback. Any `getStore()`call done within the callback function will always return `undefined`.\\n         *\\n         * The optional `args` are passed to the callback function.\\n         *\\n         * If the callback function throws an error, the error is thrown by `exit()` too.\\n         * The stacktrace is not impacted by this call and the context is re-entered.\\n         *\\n         * Example:\\n         *\\n         * ```js\\n         * // Within a call to run\\n         * try {\\n         *   asyncLocalStorage.getStore(); // Returns the store object or value\\n         *   asyncLocalStorage.exit(() => {\\n         *     asyncLocalStorage.getStore(); // Returns undefined\\n         *     throw new Error();\\n         *   });\\n         * } catch (e) {\\n         *   asyncLocalStorage.getStore(); // Returns the same object or value\\n         *   // The error will be caught here\\n         * }\\n         * ```\\n         * @since v13.10.0, v12.17.0\\n         * @experimental\\n         */\\n        exit<R, TArgs extends any[]>(callback: (...args: TArgs) => R, ...args: TArgs): R;\\n        /**\\n         * Transitions into the context for the remainder of the current\\n         * synchronous execution and then persists the store through any following\\n         * asynchronous calls.\\n         *\\n         * Example:\\n         *\\n         * ```js\\n         * const store = { id: 1 };\\n         * // Replaces previous store with the given store object\\n         * asyncLocalStorage.enterWith(store);\\n         * asyncLocalStorage.getStore(); // Returns the store object\\n         * someAsyncOperation(() => {\\n         *   asyncLocalStorage.getStore(); // Returns the same object\\n         * });\\n         * ```\\n         *\\n         * This transition will continue for the _entire_ synchronous execution.\\n         * This means that if, for example, the context is entered within an event\\n         * handler subsequent event handlers will also run within that context unless\\n         * specifically bound to another context with an `AsyncResource`. That is why`run()` should be preferred over `enterWith()` unless there are strong reasons\\n         * to use the latter method.\\n         *\\n         * ```js\\n         * const store = { id: 1 };\\n         *\\n         * emitter.on('my-event', () => {\\n         *   asyncLocalStorage.enterWith(store);\\n         * });\\n         * emitter.on('my-event', () => {\\n         *   asyncLocalStorage.getStore(); // Returns the same object\\n         * });\\n         *\\n         * asyncLocalStorage.getStore(); // Returns undefined\\n         * emitter.emit('my-event');\\n         * asyncLocalStorage.getStore(); // Returns the same object\\n         * ```\\n         * @since v13.11.0, v12.17.0\\n         * @experimental\\n         */\\n        enterWith(store: T): void;\\n    }\\n}\\ndeclare module 'node:async_hooks' {\\n    export * from 'async_hooks';\\n}\\n\",\"file:///node_modules/@types/node/buffer.d.ts\":\"/**\\n * `Buffer` objects are used to represent a fixed-length sequence of bytes. Many\\n * Node.js APIs support `Buffer`s.\\n *\\n * The `Buffer` class is a subclass of JavaScript's [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) class and\\n * extends it with methods that cover additional use cases. Node.js APIs accept\\n * plain [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) s wherever `Buffer`s are supported as well.\\n *\\n * While the `Buffer` class is available within the global scope, it is still\\n * recommended to explicitly reference it via an import or require statement.\\n *\\n * ```js\\n * import { Buffer } from 'buffer';\\n *\\n * // Creates a zero-filled Buffer of length 10.\\n * const buf1 = Buffer.alloc(10);\\n *\\n * // Creates a Buffer of length 10,\\n * // filled with bytes which all have the value `1`.\\n * const buf2 = Buffer.alloc(10, 1);\\n *\\n * // Creates an uninitialized buffer of length 10.\\n * // This is faster than calling Buffer.alloc() but the returned\\n * // Buffer instance might contain old data that needs to be\\n * // overwritten using fill(), write(), or other functions that fill the Buffer's\\n * // contents.\\n * const buf3 = Buffer.allocUnsafe(10);\\n *\\n * // Creates a Buffer containing the bytes [1, 2, 3].\\n * const buf4 = Buffer.from([1, 2, 3]);\\n *\\n * // Creates a Buffer containing the bytes [1, 1, 1, 1] \u2013 the entries\\n * // are all truncated using `(value &#x26; 255)` to fit into the range 0\u2013255.\\n * const buf5 = Buffer.from([257, 257.5, -255, '1']);\\n *\\n * // Creates a Buffer containing the UTF-8-encoded bytes for the string 't\xe9st':\\n * // [0x74, 0xc3, 0xa9, 0x73, 0x74] (in hexadecimal notation)\\n * // [116, 195, 169, 115, 116] (in decimal notation)\\n * const buf6 = Buffer.from('t\xe9st');\\n *\\n * // Creates a Buffer containing the Latin-1 bytes [0x74, 0xe9, 0x73, 0x74].\\n * const buf7 = Buffer.from('t\xe9st', 'latin1');\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/buffer.js)\\n */\\ndeclare module 'buffer' {\\n    import { BinaryLike } from 'node:crypto';\\n    import { ReadableStream as WebReadableStream } from 'node:stream/web';\\n    export function isUtf8(input: Buffer | ArrayBuffer | NodeJS.TypedArray): boolean;\\n    export function isAscii(input: Buffer | ArrayBuffer | NodeJS.TypedArray): boolean;\\n    export const INSPECT_MAX_BYTES: number;\\n    export const kMaxLength: number;\\n    export const kStringMaxLength: number;\\n    export const constants: {\\n        MAX_LENGTH: number;\\n        MAX_STRING_LENGTH: number;\\n    };\\n    export type TranscodeEncoding = 'ascii' | 'utf8' | 'utf16le' | 'ucs2' | 'latin1' | 'binary';\\n    /**\\n     * Re-encodes the given `Buffer` or `Uint8Array` instance from one character\\n     * encoding to another. Returns a new `Buffer` instance.\\n     *\\n     * Throws if the `fromEnc` or `toEnc` specify invalid character encodings or if\\n     * conversion from `fromEnc` to `toEnc` is not permitted.\\n     *\\n     * Encodings supported by `buffer.transcode()` are: `'ascii'`, `'utf8'`,`'utf16le'`, `'ucs2'`, `'latin1'`, and `'binary'`.\\n     *\\n     * The transcoding process will use substitution characters if a given byte\\n     * sequence cannot be adequately represented in the target encoding. For instance:\\n     *\\n     * ```js\\n     * import { Buffer, transcode } from 'buffer';\\n     *\\n     * const newBuf = transcode(Buffer.from('\u20ac'), 'utf8', 'ascii');\\n     * console.log(newBuf.toString('ascii'));\\n     * // Prints: '?'\\n     * ```\\n     *\\n     * Because the Euro (`\u20ac`) sign is not representable in US-ASCII, it is replaced\\n     * with `?` in the transcoded `Buffer`.\\n     * @since v7.1.0\\n     * @param source A `Buffer` or `Uint8Array` instance.\\n     * @param fromEnc The current encoding.\\n     * @param toEnc To target encoding.\\n     */\\n    export function transcode(source: Uint8Array, fromEnc: TranscodeEncoding, toEnc: TranscodeEncoding): Buffer;\\n    export const SlowBuffer: {\\n        /** @deprecated since v6.0.0, use `Buffer.allocUnsafeSlow()` */\\n        new (size: number): Buffer;\\n        prototype: Buffer;\\n    };\\n    /**\\n     * Resolves a `'blob:nodedata:...'` an associated `Blob` object registered using\\n     * a prior call to `URL.createObjectURL()`.\\n     * @since v16.7.0\\n     * @experimental\\n     * @param id A `'blob:nodedata:...` URL string returned by a prior call to `URL.createObjectURL()`.\\n     */\\n    export function resolveObjectURL(id: string): Blob | undefined;\\n    export { Buffer };\\n    /**\\n     * @experimental\\n     */\\n    export interface BlobOptions {\\n        /**\\n         * @default 'utf8'\\n         */\\n        encoding?: BufferEncoding | undefined;\\n        /**\\n         * The Blob content-type. The intent is for `type` to convey\\n         * the MIME media type of the data, however no validation of the type format\\n         * is performed.\\n         */\\n        type?: string | undefined;\\n    }\\n    /**\\n     * A [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) encapsulates immutable, raw data that can be safely shared across\\n     * multiple worker threads.\\n     * @since v15.7.0, v14.18.0\\n     */\\n    export class Blob {\\n        /**\\n         * The total size of the `Blob` in bytes.\\n         * @since v15.7.0, v14.18.0\\n         */\\n        readonly size: number;\\n        /**\\n         * The content-type of the `Blob`.\\n         * @since v15.7.0, v14.18.0\\n         */\\n        readonly type: string;\\n        /**\\n         * Creates a new `Blob` object containing a concatenation of the given sources.\\n         *\\n         * {ArrayBuffer}, {TypedArray}, {DataView}, and {Buffer} sources are copied into\\n         * the 'Blob' and can therefore be safely modified after the 'Blob' is created.\\n         *\\n         * String sources are also copied into the `Blob`.\\n         */\\n        constructor(sources: Array<BinaryLike | Blob>, options?: BlobOptions);\\n        /**\\n         * Returns a promise that fulfills with an [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) containing a copy of\\n         * the `Blob` data.\\n         * @since v15.7.0, v14.18.0\\n         */\\n        arrayBuffer(): Promise<ArrayBuffer>;\\n        /**\\n         * Creates and returns a new `Blob` containing a subset of this `Blob` objects\\n         * data. The original `Blob` is not altered.\\n         * @since v15.7.0, v14.18.0\\n         * @param start The starting index.\\n         * @param end The ending index.\\n         * @param type The content-type for the new `Blob`\\n         */\\n        slice(start?: number, end?: number, type?: string): Blob;\\n        /**\\n         * Returns a promise that fulfills with the contents of the `Blob` decoded as a\\n         * UTF-8 string.\\n         * @since v15.7.0, v14.18.0\\n         */\\n        text(): Promise<string>;\\n        /**\\n         * Returns a new (WHATWG) `ReadableStream` that allows the content of the `Blob` to be read.\\n         * @since v16.7.0\\n         */\\n        stream(): WebReadableStream;\\n    }\\n    export interface FileOptions {\\n        /**\\n         * One of either `'transparent'` or `'native'`. When set to `'native'`, line endings in string source parts will be\\n         * converted to the platform native line-ending as specified by `require('node:os').EOL`.\\n         */\\n        endings?: 'native' | 'transparent';\\n        /** The File content-type. */\\n        type?: string;\\n        /** The last modified date of the file. `Default`: Date.now(). */\\n        lastModified?: number;\\n    }\\n    /**\\n     * A [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File) provides information about files.\\n     * @experimental\\n     * @since v18.13.0\\n     */\\n    export class File extends Blob {\\n        constructor(sources: Array<BinaryLike | Blob>, fileName: string, options?: FileOptions);\\n        /**\\n         * The name of the `File`.\\n         * @since v18.13.0\\n         */\\n        readonly name: string;\\n        /**\\n         * The last modified date of the `File`.\\n         * @since v18.13.0\\n         */\\n        readonly lastModified: number;\\n    }\\n    export import atob = globalThis.atob;\\n    export import btoa = globalThis.btoa;\\n\\n    import { Blob as NodeBlob } from 'buffer';\\n    // This conditional type will be the existing global Blob in a browser, or\\n    // the copy below in a Node environment.\\n    type __Blob = typeof globalThis extends { onmessage: any; Blob: infer T } ? T : NodeBlob;\\n    global {\\n        // Buffer class\\n        type BufferEncoding =\\n            | 'ascii'\\n            | 'utf8'\\n            | 'utf-8'\\n            | 'utf16le'\\n            | 'ucs2'\\n            | 'ucs-2'\\n            | 'base64'\\n            | 'base64url'\\n            | 'latin1'\\n            | 'binary'\\n            | 'hex';\\n        type WithImplicitCoercion<T> =\\n            | T\\n            | {\\n                  valueOf(): T;\\n              };\\n        /**\\n         * Raw data is stored in instances of the Buffer class.\\n         * A Buffer is similar to an array of integers but corresponds to a raw memory allocation outside the V8 heap.  A Buffer cannot be resized.\\n         * Valid string encodings: 'ascii'|'utf8'|'utf16le'|'ucs2'(alias of 'utf16le')|'base64'|'base64url'|'binary'(deprecated)|'hex'\\n         */\\n        interface BufferConstructor {\\n            /**\\n             * Allocates a new buffer containing the given {str}.\\n             *\\n             * @param str String to store in buffer.\\n             * @param encoding encoding to use, optional.  Default is 'utf8'\\n             * @deprecated since v10.0.0 - Use `Buffer.from(string[, encoding])` instead.\\n             */\\n            new (str: string, encoding?: BufferEncoding): Buffer;\\n            /**\\n             * Allocates a new buffer of {size} octets.\\n             *\\n             * @param size count of octets to allocate.\\n             * @deprecated since v10.0.0 - Use `Buffer.alloc()` instead (also see `Buffer.allocUnsafe()`).\\n             */\\n            new (size: number): Buffer;\\n            /**\\n             * Allocates a new buffer containing the given {array} of octets.\\n             *\\n             * @param array The octets to store.\\n             * @deprecated since v10.0.0 - Use `Buffer.from(array)` instead.\\n             */\\n            new (array: Uint8Array): Buffer;\\n            /**\\n             * Produces a Buffer backed by the same allocated memory as\\n             * the given {ArrayBuffer}/{SharedArrayBuffer}.\\n             *\\n             *\\n             * @param arrayBuffer The ArrayBuffer with which to share memory.\\n             * @deprecated since v10.0.0 - Use `Buffer.from(arrayBuffer[, byteOffset[, length]])` instead.\\n             */\\n            new (arrayBuffer: ArrayBuffer | SharedArrayBuffer): Buffer;\\n            /**\\n             * Allocates a new buffer containing the given {array} of octets.\\n             *\\n             * @param array The octets to store.\\n             * @deprecated since v10.0.0 - Use `Buffer.from(array)` instead.\\n             */\\n            new (array: ReadonlyArray<any>): Buffer;\\n            /**\\n             * Copies the passed {buffer} data onto a new {Buffer} instance.\\n             *\\n             * @param buffer The buffer to copy.\\n             * @deprecated since v10.0.0 - Use `Buffer.from(buffer)` instead.\\n             */\\n            new (buffer: Buffer): Buffer;\\n            /**\\n             * Allocates a new `Buffer` using an `array` of bytes in the range `0` \u2013 `255`.\\n             * Array entries outside that range will be truncated to fit into it.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * // Creates a new Buffer containing the UTF-8 bytes of the string 'buffer'.\\n             * const buf = Buffer.from([0x62, 0x75, 0x66, 0x66, 0x65, 0x72]);\\n             * ```\\n             *\\n             * A `TypeError` will be thrown if `array` is not an `Array` or another type\\n             * appropriate for `Buffer.from()` variants.\\n             *\\n             * `Buffer.from(array)` and `Buffer.from(string)` may also use the internal`Buffer` pool like `Buffer.allocUnsafe()` does.\\n             * @since v5.10.0\\n             */\\n            from(\\n                arrayBuffer: WithImplicitCoercion<ArrayBuffer | SharedArrayBuffer>,\\n                byteOffset?: number,\\n                length?: number,\\n            ): Buffer;\\n            /**\\n             * Creates a new Buffer using the passed {data}\\n             * @param data data to create a new Buffer\\n             */\\n            from(data: Uint8Array | ReadonlyArray<number>): Buffer;\\n            from(data: WithImplicitCoercion<Uint8Array | ReadonlyArray<number> | string>): Buffer;\\n            /**\\n             * Creates a new Buffer containing the given JavaScript string {str}.\\n             * If provided, the {encoding} parameter identifies the character encoding.\\n             * If not provided, {encoding} defaults to 'utf8'.\\n             */\\n            from(\\n                str:\\n                    | WithImplicitCoercion<string>\\n                    | {\\n                          [Symbol.toPrimitive](hint: 'string'): string;\\n                      },\\n                encoding?: BufferEncoding,\\n            ): Buffer;\\n            /**\\n             * Creates a new Buffer using the passed {data}\\n             * @param values to create a new Buffer\\n             */\\n            of(...items: number[]): Buffer;\\n            /**\\n             * Returns `true` if `obj` is a `Buffer`, `false` otherwise.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * Buffer.isBuffer(Buffer.alloc(10)); // true\\n             * Buffer.isBuffer(Buffer.from('foo')); // true\\n             * Buffer.isBuffer('a string'); // false\\n             * Buffer.isBuffer([]); // false\\n             * Buffer.isBuffer(new Uint8Array(1024)); // false\\n             * ```\\n             * @since v0.1.101\\n             */\\n            isBuffer(obj: any): obj is Buffer;\\n            /**\\n             * Returns `true` if `encoding` is the name of a supported character encoding,\\n             * or `false` otherwise.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * console.log(Buffer.isEncoding('utf8'));\\n             * // Prints: true\\n             *\\n             * console.log(Buffer.isEncoding('hex'));\\n             * // Prints: true\\n             *\\n             * console.log(Buffer.isEncoding('utf/8'));\\n             * // Prints: false\\n             *\\n             * console.log(Buffer.isEncoding(''));\\n             * // Prints: false\\n             * ```\\n             * @since v0.9.1\\n             * @param encoding A character encoding name to check.\\n             */\\n            isEncoding(encoding: string): encoding is BufferEncoding;\\n            /**\\n             * Returns the byte length of a string when encoded using `encoding`.\\n             * This is not the same as [`String.prototype.length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length), which does not account\\n             * for the encoding that is used to convert the string into bytes.\\n             *\\n             * For `'base64'`, `'base64url'`, and `'hex'`, this function assumes valid input.\\n             * For strings that contain non-base64/hex-encoded data (e.g. whitespace), the\\n             * return value might be greater than the length of a `Buffer` created from the\\n             * string.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const str = '\\\\u00bd + \\\\u00bc = \\\\u00be';\\n             *\\n             * console.log(`${str}: ${str.length} characters, ` +\\n             *             `${Buffer.byteLength(str, 'utf8')} bytes`);\\n             * // Prints: \xbd + \xbc = \xbe: 9 characters, 12 bytes\\n             * ```\\n             *\\n             * When `string` is a\\n             * `Buffer`/[`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView)/[`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/-\\n             * Reference/Global_Objects/TypedArray)/[`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer)/[`SharedArrayBuffer`](https://develop-\\n             * er.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer), the byte length as reported by `.byteLength`is returned.\\n             * @since v0.1.90\\n             * @param string A value to calculate the length of.\\n             * @param [encoding='utf8'] If `string` is a string, this is its encoding.\\n             * @return The number of bytes contained within `string`.\\n             */\\n            byteLength(\\n                string: string | NodeJS.ArrayBufferView | ArrayBuffer | SharedArrayBuffer,\\n                encoding?: BufferEncoding,\\n            ): number;\\n            /**\\n             * Returns a new `Buffer` which is the result of concatenating all the `Buffer`instances in the `list` together.\\n             *\\n             * If the list has no items, or if the `totalLength` is 0, then a new zero-length`Buffer` is returned.\\n             *\\n             * If `totalLength` is not provided, it is calculated from the `Buffer` instances\\n             * in `list` by adding their lengths.\\n             *\\n             * If `totalLength` is provided, it is coerced to an unsigned integer. If the\\n             * combined length of the `Buffer`s in `list` exceeds `totalLength`, the result is\\n             * truncated to `totalLength`.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * // Create a single `Buffer` from a list of three `Buffer` instances.\\n             *\\n             * const buf1 = Buffer.alloc(10);\\n             * const buf2 = Buffer.alloc(14);\\n             * const buf3 = Buffer.alloc(18);\\n             * const totalLength = buf1.length + buf2.length + buf3.length;\\n             *\\n             * console.log(totalLength);\\n             * // Prints: 42\\n             *\\n             * const bufA = Buffer.concat([buf1, buf2, buf3], totalLength);\\n             *\\n             * console.log(bufA);\\n             * // Prints: <Buffer 00 00 00 00 ...>\\n             * console.log(bufA.length);\\n             * // Prints: 42\\n             * ```\\n             *\\n             * `Buffer.concat()` may also use the internal `Buffer` pool like `Buffer.allocUnsafe()` does.\\n             * @since v0.7.11\\n             * @param list List of `Buffer` or {@link Uint8Array} instances to concatenate.\\n             * @param totalLength Total length of the `Buffer` instances in `list` when concatenated.\\n             */\\n            concat(list: ReadonlyArray<Uint8Array>, totalLength?: number): Buffer;\\n            /**\\n             * Copies the underlying memory of `view` into a new `Buffer`.\\n             * @since v18.16.0\\n             * @param view The `TypedArray` to copy.\\n             * @param offset The starting offset within `view`.\\n             * @param length The number of elements from `view` to copy.\\n             */\\n            copyBytesFrom(view: NodeJS.TypedArray, offset?: number, length?: number): Buffer;\\n            /**\\n             * Compares `buf1` to `buf2`, typically for the purpose of sorting arrays of`Buffer` instances. This is equivalent to calling `buf1.compare(buf2)`.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf1 = Buffer.from('1234');\\n             * const buf2 = Buffer.from('0123');\\n             * const arr = [buf1, buf2];\\n             *\\n             * console.log(arr.sort(Buffer.compare));\\n             * // Prints: [ <Buffer 30 31 32 33>, <Buffer 31 32 33 34> ]\\n             * // (This result is equal to: [buf2, buf1].)\\n             * ```\\n             * @since v0.11.13\\n             * @return Either `-1`, `0`, or `1`, depending on the result of the comparison. See `compare` for details.\\n             */\\n            compare(buf1: Uint8Array, buf2: Uint8Array): -1 | 0 | 1;\\n            /**\\n             * Allocates a new `Buffer` of `size` bytes. If `fill` is `undefined`, the`Buffer` will be zero-filled.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.alloc(5);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 00 00 00 00 00>\\n             * ```\\n             *\\n             * If `size` is larger than {@link constants.MAX_LENGTH} or smaller than 0, `ERR_INVALID_ARG_VALUE` is thrown.\\n             *\\n             * If `fill` is specified, the allocated `Buffer` will be initialized by calling `buf.fill(fill)`.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.alloc(5, 'a');\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 61 61 61 61 61>\\n             * ```\\n             *\\n             * If both `fill` and `encoding` are specified, the allocated `Buffer` will be\\n             * initialized by calling `buf.fill(fill, encoding)`.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.alloc(11, 'aGVsbG8gd29ybGQ=', 'base64');\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64>\\n             * ```\\n             *\\n             * Calling `Buffer.alloc()` can be measurably slower than the alternative `Buffer.allocUnsafe()` but ensures that the newly created `Buffer` instance\\n             * contents will never contain sensitive data from previous allocations, including\\n             * data that might not have been allocated for `Buffer`s.\\n             *\\n             * A `TypeError` will be thrown if `size` is not a number.\\n             * @since v5.10.0\\n             * @param size The desired length of the new `Buffer`.\\n             * @param [fill=0] A value to pre-fill the new `Buffer` with.\\n             * @param [encoding='utf8'] If `fill` is a string, this is its encoding.\\n             */\\n            alloc(size: number, fill?: string | Buffer | number, encoding?: BufferEncoding): Buffer;\\n            /**\\n             * Allocates a new `Buffer` of `size` bytes. If `size` is larger than {@link constants.MAX_LENGTH} or smaller than 0, `ERR_INVALID_ARG_VALUE` is thrown.\\n             *\\n             * The underlying memory for `Buffer` instances created in this way is _not_\\n             * _initialized_. The contents of the newly created `Buffer` are unknown and _may contain sensitive data_. Use `Buffer.alloc()` instead to initialize`Buffer` instances with zeroes.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(10);\\n             *\\n             * console.log(buf);\\n             * // Prints (contents may vary): <Buffer a0 8b 28 3f 01 00 00 00 50 32>\\n             *\\n             * buf.fill(0);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 00 00 00 00 00 00 00 00 00 00>\\n             * ```\\n             *\\n             * A `TypeError` will be thrown if `size` is not a number.\\n             *\\n             * The `Buffer` module pre-allocates an internal `Buffer` instance of\\n             * size `Buffer.poolSize` that is used as a pool for the fast allocation of new`Buffer` instances created using `Buffer.allocUnsafe()`,`Buffer.from(array)`, `Buffer.concat()`, and the\\n             * deprecated`new Buffer(size)` constructor only when `size` is less than or equal\\n             * to `Buffer.poolSize >> 1` (floor of `Buffer.poolSize` divided by two).\\n             *\\n             * Use of this pre-allocated internal memory pool is a key difference between\\n             * calling `Buffer.alloc(size, fill)` vs. `Buffer.allocUnsafe(size).fill(fill)`.\\n             * Specifically, `Buffer.alloc(size, fill)` will _never_ use the internal `Buffer`pool, while `Buffer.allocUnsafe(size).fill(fill)`_will_ use the internal`Buffer` pool if `size` is less\\n             * than or equal to half `Buffer.poolSize`. The\\n             * difference is subtle but can be important when an application requires the\\n             * additional performance that `Buffer.allocUnsafe()` provides.\\n             * @since v5.10.0\\n             * @param size The desired length of the new `Buffer`.\\n             */\\n            allocUnsafe(size: number): Buffer;\\n            /**\\n             * Allocates a new `Buffer` of `size` bytes. If `size` is larger than {@link constants.MAX_LENGTH} or smaller than 0, `ERR_INVALID_ARG_VALUE` is thrown. A zero-length `Buffer` is created\\n             * if `size` is 0.\\n             *\\n             * The underlying memory for `Buffer` instances created in this way is _not_\\n             * _initialized_. The contents of the newly created `Buffer` are unknown and _may contain sensitive data_. Use `buf.fill(0)` to initialize\\n             * such `Buffer` instances with zeroes.\\n             *\\n             * When using `Buffer.allocUnsafe()` to allocate new `Buffer` instances,\\n             * allocations under 4 KB are sliced from a single pre-allocated `Buffer`. This\\n             * allows applications to avoid the garbage collection overhead of creating many\\n             * individually allocated `Buffer` instances. This approach improves both\\n             * performance and memory usage by eliminating the need to track and clean up as\\n             * many individual `ArrayBuffer` objects.\\n             *\\n             * However, in the case where a developer may need to retain a small chunk of\\n             * memory from a pool for an indeterminate amount of time, it may be appropriate\\n             * to create an un-pooled `Buffer` instance using `Buffer.allocUnsafeSlow()` and\\n             * then copying out the relevant bits.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * // Need to keep around a few small chunks of memory.\\n             * const store = [];\\n             *\\n             * socket.on('readable', () => {\\n             *   let data;\\n             *   while (null !== (data = readable.read())) {\\n             *     // Allocate for retained data.\\n             *     const sb = Buffer.allocUnsafeSlow(10);\\n             *\\n             *     // Copy the data into the new allocation.\\n             *     data.copy(sb, 0, 0, 10);\\n             *\\n             *     store.push(sb);\\n             *   }\\n             * });\\n             * ```\\n             *\\n             * A `TypeError` will be thrown if `size` is not a number.\\n             * @since v5.12.0\\n             * @param size The desired length of the new `Buffer`.\\n             */\\n            allocUnsafeSlow(size: number): Buffer;\\n            /**\\n             * This is the size (in bytes) of pre-allocated internal `Buffer` instances used\\n             * for pooling. This value may be modified.\\n             * @since v0.11.3\\n             */\\n            poolSize: number;\\n        }\\n        interface Buffer extends Uint8Array {\\n            /**\\n             * Writes `string` to `buf` at `offset` according to the character encoding in`encoding`. The `length` parameter is the number of bytes to write. If `buf` did\\n             * not contain enough space to fit the entire string, only part of `string` will be\\n             * written. However, partially encoded characters will not be written.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.alloc(256);\\n             *\\n             * const len = buf.write('\\\\u00bd + \\\\u00bc = \\\\u00be', 0);\\n             *\\n             * console.log(`${len} bytes: ${buf.toString('utf8', 0, len)}`);\\n             * // Prints: 12 bytes: \xbd + \xbc = \xbe\\n             *\\n             * const buffer = Buffer.alloc(10);\\n             *\\n             * const length = buffer.write('abcd', 8);\\n             *\\n             * console.log(`${length} bytes: ${buffer.toString('utf8', 8, 10)}`);\\n             * // Prints: 2 bytes : ab\\n             * ```\\n             * @since v0.1.90\\n             * @param string String to write to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write `string`.\\n             * @param [length=buf.length - offset] Maximum number of bytes to write (written bytes will not exceed `buf.length - offset`).\\n             * @param [encoding='utf8'] The character encoding of `string`.\\n             * @return Number of bytes written.\\n             */\\n            write(string: string, encoding?: BufferEncoding): number;\\n            write(string: string, offset: number, encoding?: BufferEncoding): number;\\n            write(string: string, offset: number, length: number, encoding?: BufferEncoding): number;\\n            /**\\n             * Decodes `buf` to a string according to the specified character encoding in`encoding`. `start` and `end` may be passed to decode only a subset of `buf`.\\n             *\\n             * If `encoding` is `'utf8'` and a byte sequence in the input is not valid UTF-8,\\n             * then each invalid byte is replaced with the replacement character `U+FFFD`.\\n             *\\n             * The maximum length of a string instance (in UTF-16 code units) is available\\n             * as {@link constants.MAX_STRING_LENGTH}.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf1 = Buffer.allocUnsafe(26);\\n             *\\n             * for (let i = 0; i < 26; i++) {\\n             *   // 97 is the decimal ASCII value for 'a'.\\n             *   buf1[i] = i + 97;\\n             * }\\n             *\\n             * console.log(buf1.toString('utf8'));\\n             * // Prints: abcdefghijklmnopqrstuvwxyz\\n             * console.log(buf1.toString('utf8', 0, 5));\\n             * // Prints: abcde\\n             *\\n             * const buf2 = Buffer.from('t\xe9st');\\n             *\\n             * console.log(buf2.toString('hex'));\\n             * // Prints: 74c3a97374\\n             * console.log(buf2.toString('utf8', 0, 3));\\n             * // Prints: t\xe9\\n             * console.log(buf2.toString(undefined, 0, 3));\\n             * // Prints: t\xe9\\n             * ```\\n             * @since v0.1.90\\n             * @param [encoding='utf8'] The character encoding to use.\\n             * @param [start=0] The byte offset to start decoding at.\\n             * @param [end=buf.length] The byte offset to stop decoding at (not inclusive).\\n             */\\n            toString(encoding?: BufferEncoding, start?: number, end?: number): string;\\n            /**\\n             * Returns a JSON representation of `buf`. [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) implicitly calls\\n             * this function when stringifying a `Buffer` instance.\\n             *\\n             * `Buffer.from()` accepts objects in the format returned from this method.\\n             * In particular, `Buffer.from(buf.toJSON())` works like `Buffer.from(buf)`.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5]);\\n             * const json = JSON.stringify(buf);\\n             *\\n             * console.log(json);\\n             * // Prints: {\\\"type\\\":\\\"Buffer\\\",\\\"data\\\":[1,2,3,4,5]}\\n             *\\n             * const copy = JSON.parse(json, (key, value) => {\\n             *   return value &#x26;&#x26; value.type === 'Buffer' ?\\n             *     Buffer.from(value) :\\n             *     value;\\n             * });\\n             *\\n             * console.log(copy);\\n             * // Prints: <Buffer 01 02 03 04 05>\\n             * ```\\n             * @since v0.9.2\\n             */\\n            toJSON(): {\\n                type: 'Buffer';\\n                data: number[];\\n            };\\n            /**\\n             * Returns `true` if both `buf` and `otherBuffer` have exactly the same bytes,`false` otherwise. Equivalent to `buf.compare(otherBuffer) === 0`.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf1 = Buffer.from('ABC');\\n             * const buf2 = Buffer.from('414243', 'hex');\\n             * const buf3 = Buffer.from('ABCD');\\n             *\\n             * console.log(buf1.equals(buf2));\\n             * // Prints: true\\n             * console.log(buf1.equals(buf3));\\n             * // Prints: false\\n             * ```\\n             * @since v0.11.13\\n             * @param otherBuffer A `Buffer` or {@link Uint8Array} with which to compare `buf`.\\n             */\\n            equals(otherBuffer: Uint8Array): boolean;\\n            /**\\n             * Compares `buf` with `target` and returns a number indicating whether `buf`comes before, after, or is the same as `target` in sort order.\\n             * Comparison is based on the actual sequence of bytes in each `Buffer`.\\n             *\\n             * * `0` is returned if `target` is the same as `buf`\\n             * * `1` is returned if `target` should come _before_`buf` when sorted.\\n             * * `-1` is returned if `target` should come _after_`buf` when sorted.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf1 = Buffer.from('ABC');\\n             * const buf2 = Buffer.from('BCD');\\n             * const buf3 = Buffer.from('ABCD');\\n             *\\n             * console.log(buf1.compare(buf1));\\n             * // Prints: 0\\n             * console.log(buf1.compare(buf2));\\n             * // Prints: -1\\n             * console.log(buf1.compare(buf3));\\n             * // Prints: -1\\n             * console.log(buf2.compare(buf1));\\n             * // Prints: 1\\n             * console.log(buf2.compare(buf3));\\n             * // Prints: 1\\n             * console.log([buf1, buf2, buf3].sort(Buffer.compare));\\n             * // Prints: [ <Buffer 41 42 43>, <Buffer 41 42 43 44>, <Buffer 42 43 44> ]\\n             * // (This result is equal to: [buf1, buf3, buf2].)\\n             * ```\\n             *\\n             * The optional `targetStart`, `targetEnd`, `sourceStart`, and `sourceEnd`arguments can be used to limit the comparison to specific ranges within `target`and `buf` respectively.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf1 = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8, 9]);\\n             * const buf2 = Buffer.from([5, 6, 7, 8, 9, 1, 2, 3, 4]);\\n             *\\n             * console.log(buf1.compare(buf2, 5, 9, 0, 4));\\n             * // Prints: 0\\n             * console.log(buf1.compare(buf2, 0, 6, 4));\\n             * // Prints: -1\\n             * console.log(buf1.compare(buf2, 5, 6, 5));\\n             * // Prints: 1\\n             * ```\\n             *\\n             * `ERR_OUT_OF_RANGE` is thrown if `targetStart < 0`, `sourceStart < 0`,`targetEnd > target.byteLength`, or `sourceEnd > source.byteLength`.\\n             * @since v0.11.13\\n             * @param target A `Buffer` or {@link Uint8Array} with which to compare `buf`.\\n             * @param [targetStart=0] The offset within `target` at which to begin comparison.\\n             * @param [targetEnd=target.length] The offset within `target` at which to end comparison (not inclusive).\\n             * @param [sourceStart=0] The offset within `buf` at which to begin comparison.\\n             * @param [sourceEnd=buf.length] The offset within `buf` at which to end comparison (not inclusive).\\n             */\\n            compare(\\n                target: Uint8Array,\\n                targetStart?: number,\\n                targetEnd?: number,\\n                sourceStart?: number,\\n                sourceEnd?: number,\\n            ): -1 | 0 | 1;\\n            /**\\n             * Copies data from a region of `buf` to a region in `target`, even if the `target`memory region overlaps with `buf`.\\n             *\\n             * [`TypedArray.prototype.set()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set) performs the same operation, and is available\\n             * for all TypedArrays, including Node.js `Buffer`s, although it takes\\n             * different function arguments.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * // Create two `Buffer` instances.\\n             * const buf1 = Buffer.allocUnsafe(26);\\n             * const buf2 = Buffer.allocUnsafe(26).fill('!');\\n             *\\n             * for (let i = 0; i < 26; i++) {\\n             *   // 97 is the decimal ASCII value for 'a'.\\n             *   buf1[i] = i + 97;\\n             * }\\n             *\\n             * // Copy `buf1` bytes 16 through 19 into `buf2` starting at byte 8 of `buf2`.\\n             * buf1.copy(buf2, 8, 16, 20);\\n             * // This is equivalent to:\\n             * // buf2.set(buf1.subarray(16, 20), 8);\\n             *\\n             * console.log(buf2.toString('ascii', 0, 25));\\n             * // Prints: !!!!!!!!qrst!!!!!!!!!!!!!\\n             * ```\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * // Create a `Buffer` and copy data from one region to an overlapping region\\n             * // within the same `Buffer`.\\n             *\\n             * const buf = Buffer.allocUnsafe(26);\\n             *\\n             * for (let i = 0; i < 26; i++) {\\n             *   // 97 is the decimal ASCII value for 'a'.\\n             *   buf[i] = i + 97;\\n             * }\\n             *\\n             * buf.copy(buf, 0, 4, 10);\\n             *\\n             * console.log(buf.toString());\\n             * // Prints: efghijghijklmnopqrstuvwxyz\\n             * ```\\n             * @since v0.1.90\\n             * @param target A `Buffer` or {@link Uint8Array} to copy into.\\n             * @param [targetStart=0] The offset within `target` at which to begin writing.\\n             * @param [sourceStart=0] The offset within `buf` from which to begin copying.\\n             * @param [sourceEnd=buf.length] The offset within `buf` at which to stop copying (not inclusive).\\n             * @return The number of bytes copied.\\n             */\\n            copy(target: Uint8Array, targetStart?: number, sourceStart?: number, sourceEnd?: number): number;\\n            /**\\n             * Returns a new `Buffer` that references the same memory as the original, but\\n             * offset and cropped by the `start` and `end` indices.\\n             *\\n             * This method is not compatible with the `Uint8Array.prototype.slice()`,\\n             * which is a superclass of `Buffer`. To copy the slice, use`Uint8Array.prototype.slice()`.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from('buffer');\\n             *\\n             * const copiedBuf = Uint8Array.prototype.slice.call(buf);\\n             * copiedBuf[0]++;\\n             * console.log(copiedBuf.toString());\\n             * // Prints: cuffer\\n             *\\n             * console.log(buf.toString());\\n             * // Prints: buffer\\n             *\\n             * // With buf.slice(), the original buffer is modified.\\n             * const notReallyCopiedBuf = buf.slice();\\n             * notReallyCopiedBuf[0]++;\\n             * console.log(notReallyCopiedBuf.toString());\\n             * // Prints: cuffer\\n             * console.log(buf.toString());\\n             * // Also prints: cuffer (!)\\n             * ```\\n             * @since v0.3.0\\n             * @deprecated Use `subarray` instead.\\n             * @param [start=0] Where the new `Buffer` will start.\\n             * @param [end=buf.length] Where the new `Buffer` will end (not inclusive).\\n             */\\n            slice(start?: number, end?: number): Buffer;\\n            /**\\n             * Returns a new `Buffer` that references the same memory as the original, but\\n             * offset and cropped by the `start` and `end` indices.\\n             *\\n             * Specifying `end` greater than `buf.length` will return the same result as\\n             * that of `end` equal to `buf.length`.\\n             *\\n             * This method is inherited from [`TypedArray.prototype.subarray()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray).\\n             *\\n             * Modifying the new `Buffer` slice will modify the memory in the original `Buffer`because the allocated memory of the two objects overlap.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * // Create a `Buffer` with the ASCII alphabet, take a slice, and modify one byte\\n             * // from the original `Buffer`.\\n             *\\n             * const buf1 = Buffer.allocUnsafe(26);\\n             *\\n             * for (let i = 0; i < 26; i++) {\\n             *   // 97 is the decimal ASCII value for 'a'.\\n             *   buf1[i] = i + 97;\\n             * }\\n             *\\n             * const buf2 = buf1.subarray(0, 3);\\n             *\\n             * console.log(buf2.toString('ascii', 0, buf2.length));\\n             * // Prints: abc\\n             *\\n             * buf1[0] = 33;\\n             *\\n             * console.log(buf2.toString('ascii', 0, buf2.length));\\n             * // Prints: !bc\\n             * ```\\n             *\\n             * Specifying negative indexes causes the slice to be generated relative to the\\n             * end of `buf` rather than the beginning.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from('buffer');\\n             *\\n             * console.log(buf.subarray(-6, -1).toString());\\n             * // Prints: buffe\\n             * // (Equivalent to buf.subarray(0, 5).)\\n             *\\n             * console.log(buf.subarray(-6, -2).toString());\\n             * // Prints: buff\\n             * // (Equivalent to buf.subarray(0, 4).)\\n             *\\n             * console.log(buf.subarray(-5, -2).toString());\\n             * // Prints: uff\\n             * // (Equivalent to buf.subarray(1, 4).)\\n             * ```\\n             * @since v3.0.0\\n             * @param [start=0] Where the new `Buffer` will start.\\n             * @param [end=buf.length] Where the new `Buffer` will end (not inclusive).\\n             */\\n            subarray(start?: number, end?: number): Buffer;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as big-endian.\\n             *\\n             * `value` is interpreted and written as a two's complement signed integer.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(8);\\n             *\\n             * buf.writeBigInt64BE(0x0102030405060708n, 0);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 01 02 03 04 05 06 07 08>\\n             * ```\\n             * @since v12.0.0, v10.20.0\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy: `0 <= offset <= buf.length - 8`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeBigInt64BE(value: bigint, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as little-endian.\\n             *\\n             * `value` is interpreted and written as a two's complement signed integer.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(8);\\n             *\\n             * buf.writeBigInt64LE(0x0102030405060708n, 0);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 08 07 06 05 04 03 02 01>\\n             * ```\\n             * @since v12.0.0, v10.20.0\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy: `0 <= offset <= buf.length - 8`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeBigInt64LE(value: bigint, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as big-endian.\\n             *\\n             * This function is also available under the `writeBigUint64BE` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(8);\\n             *\\n             * buf.writeBigUInt64BE(0xdecafafecacefaden, 0);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer de ca fa fe ca ce fa de>\\n             * ```\\n             * @since v12.0.0, v10.20.0\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy: `0 <= offset <= buf.length - 8`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeBigUInt64BE(value: bigint, offset?: number): number;\\n            /**\\n             * @alias Buffer.writeBigUInt64BE\\n             * @since v14.10.0, v12.19.0\\n             */\\n            writeBigUint64BE(value: bigint, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as little-endian\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(8);\\n             *\\n             * buf.writeBigUInt64LE(0xdecafafecacefaden, 0);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer de fa ce ca fe fa ca de>\\n             * ```\\n             *\\n             * This function is also available under the `writeBigUint64LE` alias.\\n             * @since v12.0.0, v10.20.0\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy: `0 <= offset <= buf.length - 8`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeBigUInt64LE(value: bigint, offset?: number): number;\\n            /**\\n             * @alias Buffer.writeBigUInt64LE\\n             * @since v14.10.0, v12.19.0\\n             */\\n            writeBigUint64LE(value: bigint, offset?: number): number;\\n            /**\\n             * Writes `byteLength` bytes of `value` to `buf` at the specified `offset`as little-endian. Supports up to 48 bits of accuracy. Behavior is undefined\\n             * when `value` is anything other than an unsigned integer.\\n             *\\n             * This function is also available under the `writeUintLE` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(6);\\n             *\\n             * buf.writeUIntLE(0x1234567890ab, 0, 6);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer ab 90 78 56 34 12>\\n             * ```\\n             * @since v0.5.5\\n             * @param value Number to be written to `buf`.\\n             * @param offset Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - byteLength`.\\n             * @param byteLength Number of bytes to write. Must satisfy `0 < byteLength <= 6`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeUIntLE(value: number, offset: number, byteLength: number): number;\\n            /**\\n             * @alias Buffer.writeUIntLE\\n             * @since v14.9.0, v12.19.0\\n             */\\n            writeUintLE(value: number, offset: number, byteLength: number): number;\\n            /**\\n             * Writes `byteLength` bytes of `value` to `buf` at the specified `offset`as big-endian. Supports up to 48 bits of accuracy. Behavior is undefined\\n             * when `value` is anything other than an unsigned integer.\\n             *\\n             * This function is also available under the `writeUintBE` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(6);\\n             *\\n             * buf.writeUIntBE(0x1234567890ab, 0, 6);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 12 34 56 78 90 ab>\\n             * ```\\n             * @since v0.5.5\\n             * @param value Number to be written to `buf`.\\n             * @param offset Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - byteLength`.\\n             * @param byteLength Number of bytes to write. Must satisfy `0 < byteLength <= 6`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeUIntBE(value: number, offset: number, byteLength: number): number;\\n            /**\\n             * @alias Buffer.writeUIntBE\\n             * @since v14.9.0, v12.19.0\\n             */\\n            writeUintBE(value: number, offset: number, byteLength: number): number;\\n            /**\\n             * Writes `byteLength` bytes of `value` to `buf` at the specified `offset`as little-endian. Supports up to 48 bits of accuracy. Behavior is undefined\\n             * when `value` is anything other than a signed integer.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(6);\\n             *\\n             * buf.writeIntLE(0x1234567890ab, 0, 6);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer ab 90 78 56 34 12>\\n             * ```\\n             * @since v0.11.15\\n             * @param value Number to be written to `buf`.\\n             * @param offset Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - byteLength`.\\n             * @param byteLength Number of bytes to write. Must satisfy `0 < byteLength <= 6`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeIntLE(value: number, offset: number, byteLength: number): number;\\n            /**\\n             * Writes `byteLength` bytes of `value` to `buf` at the specified `offset`as big-endian. Supports up to 48 bits of accuracy. Behavior is undefined when`value` is anything other than a\\n             * signed integer.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(6);\\n             *\\n             * buf.writeIntBE(0x1234567890ab, 0, 6);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 12 34 56 78 90 ab>\\n             * ```\\n             * @since v0.11.15\\n             * @param value Number to be written to `buf`.\\n             * @param offset Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - byteLength`.\\n             * @param byteLength Number of bytes to write. Must satisfy `0 < byteLength <= 6`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeIntBE(value: number, offset: number, byteLength: number): number;\\n            /**\\n             * Reads an unsigned, big-endian 64-bit integer from `buf` at the specified`offset`.\\n             *\\n             * This function is also available under the `readBigUint64BE` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff]);\\n             *\\n             * console.log(buf.readBigUInt64BE(0));\\n             * // Prints: 4294967295n\\n             * ```\\n             * @since v12.0.0, v10.20.0\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy: `0 <= offset <= buf.length - 8`.\\n             */\\n            readBigUInt64BE(offset?: number): bigint;\\n            /**\\n             * @alias Buffer.readBigUInt64BE\\n             * @since v14.10.0, v12.19.0\\n             */\\n            readBigUint64BE(offset?: number): bigint;\\n            /**\\n             * Reads an unsigned, little-endian 64-bit integer from `buf` at the specified`offset`.\\n             *\\n             * This function is also available under the `readBigUint64LE` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff]);\\n             *\\n             * console.log(buf.readBigUInt64LE(0));\\n             * // Prints: 18446744069414584320n\\n             * ```\\n             * @since v12.0.0, v10.20.0\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy: `0 <= offset <= buf.length - 8`.\\n             */\\n            readBigUInt64LE(offset?: number): bigint;\\n            /**\\n             * @alias Buffer.readBigUInt64LE\\n             * @since v14.10.0, v12.19.0\\n             */\\n            readBigUint64LE(offset?: number): bigint;\\n            /**\\n             * Reads a signed, big-endian 64-bit integer from `buf` at the specified `offset`.\\n             *\\n             * Integers read from a `Buffer` are interpreted as two's complement signed\\n             * values.\\n             * @since v12.0.0, v10.20.0\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy: `0 <= offset <= buf.length - 8`.\\n             */\\n            readBigInt64BE(offset?: number): bigint;\\n            /**\\n             * Reads a signed, little-endian 64-bit integer from `buf` at the specified`offset`.\\n             *\\n             * Integers read from a `Buffer` are interpreted as two's complement signed\\n             * values.\\n             * @since v12.0.0, v10.20.0\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy: `0 <= offset <= buf.length - 8`.\\n             */\\n            readBigInt64LE(offset?: number): bigint;\\n            /**\\n             * Reads `byteLength` number of bytes from `buf` at the specified `offset`and interprets the result as an unsigned, little-endian integer supporting\\n             * up to 48 bits of accuracy.\\n             *\\n             * This function is also available under the `readUintLE` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\\n             *\\n             * console.log(buf.readUIntLE(0, 6).toString(16));\\n             * // Prints: ab9078563412\\n             * ```\\n             * @since v0.11.15\\n             * @param offset Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - byteLength`.\\n             * @param byteLength Number of bytes to read. Must satisfy `0 < byteLength <= 6`.\\n             */\\n            readUIntLE(offset: number, byteLength: number): number;\\n            /**\\n             * @alias Buffer.readUIntLE\\n             * @since v14.9.0, v12.19.0\\n             */\\n            readUintLE(offset: number, byteLength: number): number;\\n            /**\\n             * Reads `byteLength` number of bytes from `buf` at the specified `offset`and interprets the result as an unsigned big-endian integer supporting\\n             * up to 48 bits of accuracy.\\n             *\\n             * This function is also available under the `readUintBE` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\\n             *\\n             * console.log(buf.readUIntBE(0, 6).toString(16));\\n             * // Prints: 1234567890ab\\n             * console.log(buf.readUIntBE(1, 6).toString(16));\\n             * // Throws ERR_OUT_OF_RANGE.\\n             * ```\\n             * @since v0.11.15\\n             * @param offset Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - byteLength`.\\n             * @param byteLength Number of bytes to read. Must satisfy `0 < byteLength <= 6`.\\n             */\\n            readUIntBE(offset: number, byteLength: number): number;\\n            /**\\n             * @alias Buffer.readUIntBE\\n             * @since v14.9.0, v12.19.0\\n             */\\n            readUintBE(offset: number, byteLength: number): number;\\n            /**\\n             * Reads `byteLength` number of bytes from `buf` at the specified `offset`and interprets the result as a little-endian, two's complement signed value\\n             * supporting up to 48 bits of accuracy.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\\n             *\\n             * console.log(buf.readIntLE(0, 6).toString(16));\\n             * // Prints: -546f87a9cbee\\n             * ```\\n             * @since v0.11.15\\n             * @param offset Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - byteLength`.\\n             * @param byteLength Number of bytes to read. Must satisfy `0 < byteLength <= 6`.\\n             */\\n            readIntLE(offset: number, byteLength: number): number;\\n            /**\\n             * Reads `byteLength` number of bytes from `buf` at the specified `offset`and interprets the result as a big-endian, two's complement signed value\\n             * supporting up to 48 bits of accuracy.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\\n             *\\n             * console.log(buf.readIntBE(0, 6).toString(16));\\n             * // Prints: 1234567890ab\\n             * console.log(buf.readIntBE(1, 6).toString(16));\\n             * // Throws ERR_OUT_OF_RANGE.\\n             * console.log(buf.readIntBE(1, 0).toString(16));\\n             * // Throws ERR_OUT_OF_RANGE.\\n             * ```\\n             * @since v0.11.15\\n             * @param offset Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - byteLength`.\\n             * @param byteLength Number of bytes to read. Must satisfy `0 < byteLength <= 6`.\\n             */\\n            readIntBE(offset: number, byteLength: number): number;\\n            /**\\n             * Reads an unsigned 8-bit integer from `buf` at the specified `offset`.\\n             *\\n             * This function is also available under the `readUint8` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([1, -2]);\\n             *\\n             * console.log(buf.readUInt8(0));\\n             * // Prints: 1\\n             * console.log(buf.readUInt8(1));\\n             * // Prints: 254\\n             * console.log(buf.readUInt8(2));\\n             * // Throws ERR_OUT_OF_RANGE.\\n             * ```\\n             * @since v0.5.0\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 1`.\\n             */\\n            readUInt8(offset?: number): number;\\n            /**\\n             * @alias Buffer.readUInt8\\n             * @since v14.9.0, v12.19.0\\n             */\\n            readUint8(offset?: number): number;\\n            /**\\n             * Reads an unsigned, little-endian 16-bit integer from `buf` at the specified`offset`.\\n             *\\n             * This function is also available under the `readUint16LE` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([0x12, 0x34, 0x56]);\\n             *\\n             * console.log(buf.readUInt16LE(0).toString(16));\\n             * // Prints: 3412\\n             * console.log(buf.readUInt16LE(1).toString(16));\\n             * // Prints: 5634\\n             * console.log(buf.readUInt16LE(2).toString(16));\\n             * // Throws ERR_OUT_OF_RANGE.\\n             * ```\\n             * @since v0.5.5\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 2`.\\n             */\\n            readUInt16LE(offset?: number): number;\\n            /**\\n             * @alias Buffer.readUInt16LE\\n             * @since v14.9.0, v12.19.0\\n             */\\n            readUint16LE(offset?: number): number;\\n            /**\\n             * Reads an unsigned, big-endian 16-bit integer from `buf` at the specified`offset`.\\n             *\\n             * This function is also available under the `readUint16BE` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([0x12, 0x34, 0x56]);\\n             *\\n             * console.log(buf.readUInt16BE(0).toString(16));\\n             * // Prints: 1234\\n             * console.log(buf.readUInt16BE(1).toString(16));\\n             * // Prints: 3456\\n             * ```\\n             * @since v0.5.5\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 2`.\\n             */\\n            readUInt16BE(offset?: number): number;\\n            /**\\n             * @alias Buffer.readUInt16BE\\n             * @since v14.9.0, v12.19.0\\n             */\\n            readUint16BE(offset?: number): number;\\n            /**\\n             * Reads an unsigned, little-endian 32-bit integer from `buf` at the specified`offset`.\\n             *\\n             * This function is also available under the `readUint32LE` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([0x12, 0x34, 0x56, 0x78]);\\n             *\\n             * console.log(buf.readUInt32LE(0).toString(16));\\n             * // Prints: 78563412\\n             * console.log(buf.readUInt32LE(1).toString(16));\\n             * // Throws ERR_OUT_OF_RANGE.\\n             * ```\\n             * @since v0.5.5\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`.\\n             */\\n            readUInt32LE(offset?: number): number;\\n            /**\\n             * @alias Buffer.readUInt32LE\\n             * @since v14.9.0, v12.19.0\\n             */\\n            readUint32LE(offset?: number): number;\\n            /**\\n             * Reads an unsigned, big-endian 32-bit integer from `buf` at the specified`offset`.\\n             *\\n             * This function is also available under the `readUint32BE` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([0x12, 0x34, 0x56, 0x78]);\\n             *\\n             * console.log(buf.readUInt32BE(0).toString(16));\\n             * // Prints: 12345678\\n             * ```\\n             * @since v0.5.5\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`.\\n             */\\n            readUInt32BE(offset?: number): number;\\n            /**\\n             * @alias Buffer.readUInt32BE\\n             * @since v14.9.0, v12.19.0\\n             */\\n            readUint32BE(offset?: number): number;\\n            /**\\n             * Reads a signed 8-bit integer from `buf` at the specified `offset`.\\n             *\\n             * Integers read from a `Buffer` are interpreted as two's complement signed values.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([-1, 5]);\\n             *\\n             * console.log(buf.readInt8(0));\\n             * // Prints: -1\\n             * console.log(buf.readInt8(1));\\n             * // Prints: 5\\n             * console.log(buf.readInt8(2));\\n             * // Throws ERR_OUT_OF_RANGE.\\n             * ```\\n             * @since v0.5.0\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 1`.\\n             */\\n            readInt8(offset?: number): number;\\n            /**\\n             * Reads a signed, little-endian 16-bit integer from `buf` at the specified`offset`.\\n             *\\n             * Integers read from a `Buffer` are interpreted as two's complement signed values.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([0, 5]);\\n             *\\n             * console.log(buf.readInt16LE(0));\\n             * // Prints: 1280\\n             * console.log(buf.readInt16LE(1));\\n             * // Throws ERR_OUT_OF_RANGE.\\n             * ```\\n             * @since v0.5.5\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 2`.\\n             */\\n            readInt16LE(offset?: number): number;\\n            /**\\n             * Reads a signed, big-endian 16-bit integer from `buf` at the specified `offset`.\\n             *\\n             * Integers read from a `Buffer` are interpreted as two's complement signed values.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([0, 5]);\\n             *\\n             * console.log(buf.readInt16BE(0));\\n             * // Prints: 5\\n             * ```\\n             * @since v0.5.5\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 2`.\\n             */\\n            readInt16BE(offset?: number): number;\\n            /**\\n             * Reads a signed, little-endian 32-bit integer from `buf` at the specified`offset`.\\n             *\\n             * Integers read from a `Buffer` are interpreted as two's complement signed values.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([0, 0, 0, 5]);\\n             *\\n             * console.log(buf.readInt32LE(0));\\n             * // Prints: 83886080\\n             * console.log(buf.readInt32LE(1));\\n             * // Throws ERR_OUT_OF_RANGE.\\n             * ```\\n             * @since v0.5.5\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`.\\n             */\\n            readInt32LE(offset?: number): number;\\n            /**\\n             * Reads a signed, big-endian 32-bit integer from `buf` at the specified `offset`.\\n             *\\n             * Integers read from a `Buffer` are interpreted as two's complement signed values.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([0, 0, 0, 5]);\\n             *\\n             * console.log(buf.readInt32BE(0));\\n             * // Prints: 5\\n             * ```\\n             * @since v0.5.5\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`.\\n             */\\n            readInt32BE(offset?: number): number;\\n            /**\\n             * Reads a 32-bit, little-endian float from `buf` at the specified `offset`.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([1, 2, 3, 4]);\\n             *\\n             * console.log(buf.readFloatLE(0));\\n             * // Prints: 1.539989614439558e-36\\n             * console.log(buf.readFloatLE(1));\\n             * // Throws ERR_OUT_OF_RANGE.\\n             * ```\\n             * @since v0.11.15\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`.\\n             */\\n            readFloatLE(offset?: number): number;\\n            /**\\n             * Reads a 32-bit, big-endian float from `buf` at the specified `offset`.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([1, 2, 3, 4]);\\n             *\\n             * console.log(buf.readFloatBE(0));\\n             * // Prints: 2.387939260590663e-38\\n             * ```\\n             * @since v0.11.15\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`.\\n             */\\n            readFloatBE(offset?: number): number;\\n            /**\\n             * Reads a 64-bit, little-endian double from `buf` at the specified `offset`.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8]);\\n             *\\n             * console.log(buf.readDoubleLE(0));\\n             * // Prints: 5.447603722011605e-270\\n             * console.log(buf.readDoubleLE(1));\\n             * // Throws ERR_OUT_OF_RANGE.\\n             * ```\\n             * @since v0.11.15\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 8`.\\n             */\\n            readDoubleLE(offset?: number): number;\\n            /**\\n             * Reads a 64-bit, big-endian double from `buf` at the specified `offset`.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8]);\\n             *\\n             * console.log(buf.readDoubleBE(0));\\n             * // Prints: 8.20788039913184e-304\\n             * ```\\n             * @since v0.11.15\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 8`.\\n             */\\n            readDoubleBE(offset?: number): number;\\n            reverse(): this;\\n            /**\\n             * Interprets `buf` as an array of unsigned 16-bit integers and swaps the\\n             * byte order _in-place_. Throws `ERR_INVALID_BUFFER_SIZE` if `buf.length` is not a multiple of 2.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\\n             *\\n             * console.log(buf1);\\n             * // Prints: <Buffer 01 02 03 04 05 06 07 08>\\n             *\\n             * buf1.swap16();\\n             *\\n             * console.log(buf1);\\n             * // Prints: <Buffer 02 01 04 03 06 05 08 07>\\n             *\\n             * const buf2 = Buffer.from([0x1, 0x2, 0x3]);\\n             *\\n             * buf2.swap16();\\n             * // Throws ERR_INVALID_BUFFER_SIZE.\\n             * ```\\n             *\\n             * One convenient use of `buf.swap16()` is to perform a fast in-place conversion\\n             * between UTF-16 little-endian and UTF-16 big-endian:\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from('This is little-endian UTF-16', 'utf16le');\\n             * buf.swap16(); // Convert to big-endian UTF-16 text.\\n             * ```\\n             * @since v5.10.0\\n             * @return A reference to `buf`.\\n             */\\n            swap16(): Buffer;\\n            /**\\n             * Interprets `buf` as an array of unsigned 32-bit integers and swaps the\\n             * byte order _in-place_. Throws `ERR_INVALID_BUFFER_SIZE` if `buf.length` is not a multiple of 4.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\\n             *\\n             * console.log(buf1);\\n             * // Prints: <Buffer 01 02 03 04 05 06 07 08>\\n             *\\n             * buf1.swap32();\\n             *\\n             * console.log(buf1);\\n             * // Prints: <Buffer 04 03 02 01 08 07 06 05>\\n             *\\n             * const buf2 = Buffer.from([0x1, 0x2, 0x3]);\\n             *\\n             * buf2.swap32();\\n             * // Throws ERR_INVALID_BUFFER_SIZE.\\n             * ```\\n             * @since v5.10.0\\n             * @return A reference to `buf`.\\n             */\\n            swap32(): Buffer;\\n            /**\\n             * Interprets `buf` as an array of 64-bit numbers and swaps byte order _in-place_.\\n             * Throws `ERR_INVALID_BUFFER_SIZE` if `buf.length` is not a multiple of 8.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\\n             *\\n             * console.log(buf1);\\n             * // Prints: <Buffer 01 02 03 04 05 06 07 08>\\n             *\\n             * buf1.swap64();\\n             *\\n             * console.log(buf1);\\n             * // Prints: <Buffer 08 07 06 05 04 03 02 01>\\n             *\\n             * const buf2 = Buffer.from([0x1, 0x2, 0x3]);\\n             *\\n             * buf2.swap64();\\n             * // Throws ERR_INVALID_BUFFER_SIZE.\\n             * ```\\n             * @since v6.3.0\\n             * @return A reference to `buf`.\\n             */\\n            swap64(): Buffer;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset`. `value` must be a\\n             * valid unsigned 8-bit integer. Behavior is undefined when `value` is anything\\n             * other than an unsigned 8-bit integer.\\n             *\\n             * This function is also available under the `writeUint8` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(4);\\n             *\\n             * buf.writeUInt8(0x3, 0);\\n             * buf.writeUInt8(0x4, 1);\\n             * buf.writeUInt8(0x23, 2);\\n             * buf.writeUInt8(0x42, 3);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 03 04 23 42>\\n             * ```\\n             * @since v0.5.0\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 1`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeUInt8(value: number, offset?: number): number;\\n            /**\\n             * @alias Buffer.writeUInt8\\n             * @since v14.9.0, v12.19.0\\n             */\\n            writeUint8(value: number, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as little-endian. The `value`must be a valid unsigned 16-bit integer. Behavior is undefined when `value` is\\n             * anything other than an unsigned 16-bit integer.\\n             *\\n             * This function is also available under the `writeUint16LE` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(4);\\n             *\\n             * buf.writeUInt16LE(0xdead, 0);\\n             * buf.writeUInt16LE(0xbeef, 2);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer ad de ef be>\\n             * ```\\n             * @since v0.5.5\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 2`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeUInt16LE(value: number, offset?: number): number;\\n            /**\\n             * @alias Buffer.writeUInt16LE\\n             * @since v14.9.0, v12.19.0\\n             */\\n            writeUint16LE(value: number, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as big-endian. The `value`must be a valid unsigned 16-bit integer. Behavior is undefined when `value`is anything other than an\\n             * unsigned 16-bit integer.\\n             *\\n             * This function is also available under the `writeUint16BE` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(4);\\n             *\\n             * buf.writeUInt16BE(0xdead, 0);\\n             * buf.writeUInt16BE(0xbeef, 2);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer de ad be ef>\\n             * ```\\n             * @since v0.5.5\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 2`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeUInt16BE(value: number, offset?: number): number;\\n            /**\\n             * @alias Buffer.writeUInt16BE\\n             * @since v14.9.0, v12.19.0\\n             */\\n            writeUint16BE(value: number, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as little-endian. The `value`must be a valid unsigned 32-bit integer. Behavior is undefined when `value` is\\n             * anything other than an unsigned 32-bit integer.\\n             *\\n             * This function is also available under the `writeUint32LE` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(4);\\n             *\\n             * buf.writeUInt32LE(0xfeedface, 0);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer ce fa ed fe>\\n             * ```\\n             * @since v0.5.5\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeUInt32LE(value: number, offset?: number): number;\\n            /**\\n             * @alias Buffer.writeUInt32LE\\n             * @since v14.9.0, v12.19.0\\n             */\\n            writeUint32LE(value: number, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as big-endian. The `value`must be a valid unsigned 32-bit integer. Behavior is undefined when `value`is anything other than an\\n             * unsigned 32-bit integer.\\n             *\\n             * This function is also available under the `writeUint32BE` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(4);\\n             *\\n             * buf.writeUInt32BE(0xfeedface, 0);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer fe ed fa ce>\\n             * ```\\n             * @since v0.5.5\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeUInt32BE(value: number, offset?: number): number;\\n            /**\\n             * @alias Buffer.writeUInt32BE\\n             * @since v14.9.0, v12.19.0\\n             */\\n            writeUint32BE(value: number, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset`. `value` must be a valid\\n             * signed 8-bit integer. Behavior is undefined when `value` is anything other than\\n             * a signed 8-bit integer.\\n             *\\n             * `value` is interpreted and written as a two's complement signed integer.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(2);\\n             *\\n             * buf.writeInt8(2, 0);\\n             * buf.writeInt8(-2, 1);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 02 fe>\\n             * ```\\n             * @since v0.5.0\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 1`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeInt8(value: number, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as little-endian.  The `value`must be a valid signed 16-bit integer. Behavior is undefined when `value` is\\n             * anything other than a signed 16-bit integer.\\n             *\\n             * The `value` is interpreted and written as a two's complement signed integer.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(2);\\n             *\\n             * buf.writeInt16LE(0x0304, 0);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 04 03>\\n             * ```\\n             * @since v0.5.5\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 2`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeInt16LE(value: number, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as big-endian.  The `value`must be a valid signed 16-bit integer. Behavior is undefined when `value` is\\n             * anything other than a signed 16-bit integer.\\n             *\\n             * The `value` is interpreted and written as a two's complement signed integer.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(2);\\n             *\\n             * buf.writeInt16BE(0x0102, 0);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 01 02>\\n             * ```\\n             * @since v0.5.5\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 2`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeInt16BE(value: number, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as little-endian. The `value`must be a valid signed 32-bit integer. Behavior is undefined when `value` is\\n             * anything other than a signed 32-bit integer.\\n             *\\n             * The `value` is interpreted and written as a two's complement signed integer.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(4);\\n             *\\n             * buf.writeInt32LE(0x05060708, 0);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 08 07 06 05>\\n             * ```\\n             * @since v0.5.5\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeInt32LE(value: number, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as big-endian. The `value`must be a valid signed 32-bit integer. Behavior is undefined when `value` is\\n             * anything other than a signed 32-bit integer.\\n             *\\n             * The `value` is interpreted and written as a two's complement signed integer.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(4);\\n             *\\n             * buf.writeInt32BE(0x01020304, 0);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 01 02 03 04>\\n             * ```\\n             * @since v0.5.5\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeInt32BE(value: number, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as little-endian. Behavior is\\n             * undefined when `value` is anything other than a JavaScript number.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(4);\\n             *\\n             * buf.writeFloatLE(0xcafebabe, 0);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer bb fe 4a 4f>\\n             * ```\\n             * @since v0.11.15\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeFloatLE(value: number, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as big-endian. Behavior is\\n             * undefined when `value` is anything other than a JavaScript number.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(4);\\n             *\\n             * buf.writeFloatBE(0xcafebabe, 0);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 4f 4a fe bb>\\n             * ```\\n             * @since v0.11.15\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeFloatBE(value: number, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as little-endian. The `value`must be a JavaScript number. Behavior is undefined when `value` is anything\\n             * other than a JavaScript number.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(8);\\n             *\\n             * buf.writeDoubleLE(123.456, 0);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 77 be 9f 1a 2f dd 5e 40>\\n             * ```\\n             * @since v0.11.15\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 8`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeDoubleLE(value: number, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as big-endian. The `value`must be a JavaScript number. Behavior is undefined when `value` is anything\\n             * other than a JavaScript number.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(8);\\n             *\\n             * buf.writeDoubleBE(123.456, 0);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 40 5e dd 2f 1a 9f be 77>\\n             * ```\\n             * @since v0.11.15\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 8`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeDoubleBE(value: number, offset?: number): number;\\n            /**\\n             * Fills `buf` with the specified `value`. If the `offset` and `end` are not given,\\n             * the entire `buf` will be filled:\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * // Fill a `Buffer` with the ASCII character 'h'.\\n             *\\n             * const b = Buffer.allocUnsafe(50).fill('h');\\n             *\\n             * console.log(b.toString());\\n             * // Prints: hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh\\n             * ```\\n             *\\n             * `value` is coerced to a `uint32` value if it is not a string, `Buffer`, or\\n             * integer. If the resulting integer is greater than `255` (decimal), `buf` will be\\n             * filled with `value &#x26; 255`.\\n             *\\n             * If the final write of a `fill()` operation falls on a multi-byte character,\\n             * then only the bytes of that character that fit into `buf` are written:\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * // Fill a `Buffer` with character that takes up two bytes in UTF-8.\\n             *\\n             * console.log(Buffer.allocUnsafe(5).fill('\\\\u0222'));\\n             * // Prints: <Buffer c8 a2 c8 a2 c8>\\n             * ```\\n             *\\n             * If `value` contains invalid characters, it is truncated; if no valid\\n             * fill data remains, an exception is thrown:\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(5);\\n             *\\n             * console.log(buf.fill('a'));\\n             * // Prints: <Buffer 61 61 61 61 61>\\n             * console.log(buf.fill('aazz', 'hex'));\\n             * // Prints: <Buffer aa aa aa aa aa>\\n             * console.log(buf.fill('zz', 'hex'));\\n             * // Throws an exception.\\n             * ```\\n             * @since v0.5.0\\n             * @param value The value with which to fill `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to fill `buf`.\\n             * @param [end=buf.length] Where to stop filling `buf` (not inclusive).\\n             * @param [encoding='utf8'] The encoding for `value` if `value` is a string.\\n             * @return A reference to `buf`.\\n             */\\n            fill(value: string | Uint8Array | number, offset?: number, end?: number, encoding?: BufferEncoding): this;\\n            /**\\n             * If `value` is:\\n             *\\n             * * a string, `value` is interpreted according to the character encoding in`encoding`.\\n             * * a `Buffer` or [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array), `value` will be used in its entirety.\\n             * To compare a partial `Buffer`, use `buf.subarray`.\\n             * * a number, `value` will be interpreted as an unsigned 8-bit integer\\n             * value between `0` and `255`.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from('this is a buffer');\\n             *\\n             * console.log(buf.indexOf('this'));\\n             * // Prints: 0\\n             * console.log(buf.indexOf('is'));\\n             * // Prints: 2\\n             * console.log(buf.indexOf(Buffer.from('a buffer')));\\n             * // Prints: 8\\n             * console.log(buf.indexOf(97));\\n             * // Prints: 8 (97 is the decimal ASCII value for 'a')\\n             * console.log(buf.indexOf(Buffer.from('a buffer example')));\\n             * // Prints: -1\\n             * console.log(buf.indexOf(Buffer.from('a buffer example').slice(0, 8)));\\n             * // Prints: 8\\n             *\\n             * const utf16Buffer = Buffer.from('\\\\u039a\\\\u0391\\\\u03a3\\\\u03a3\\\\u0395', 'utf16le');\\n             *\\n             * console.log(utf16Buffer.indexOf('\\\\u03a3', 0, 'utf16le'));\\n             * // Prints: 4\\n             * console.log(utf16Buffer.indexOf('\\\\u03a3', -4, 'utf16le'));\\n             * // Prints: 6\\n             * ```\\n             *\\n             * If `value` is not a string, number, or `Buffer`, this method will throw a`TypeError`. If `value` is a number, it will be coerced to a valid byte value,\\n             * an integer between 0 and 255.\\n             *\\n             * If `byteOffset` is not a number, it will be coerced to a number. If the result\\n             * of coercion is `NaN` or `0`, then the entire buffer will be searched. This\\n             * behavior matches [`String.prototype.indexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf).\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const b = Buffer.from('abcdef');\\n             *\\n             * // Passing a value that's a number, but not a valid byte.\\n             * // Prints: 2, equivalent to searching for 99 or 'c'.\\n             * console.log(b.indexOf(99.9));\\n             * console.log(b.indexOf(256 + 99));\\n             *\\n             * // Passing a byteOffset that coerces to NaN or 0.\\n             * // Prints: 1, searching the whole buffer.\\n             * console.log(b.indexOf('b', undefined));\\n             * console.log(b.indexOf('b', {}));\\n             * console.log(b.indexOf('b', null));\\n             * console.log(b.indexOf('b', []));\\n             * ```\\n             *\\n             * If `value` is an empty string or empty `Buffer` and `byteOffset` is less\\n             * than `buf.length`, `byteOffset` will be returned. If `value` is empty and`byteOffset` is at least `buf.length`, `buf.length` will be returned.\\n             * @since v1.5.0\\n             * @param value What to search for.\\n             * @param [byteOffset=0] Where to begin searching in `buf`. If negative, then offset is calculated from the end of `buf`.\\n             * @param [encoding='utf8'] If `value` is a string, this is the encoding used to determine the binary representation of the string that will be searched for in `buf`.\\n             * @return The index of the first occurrence of `value` in `buf`, or `-1` if `buf` does not contain `value`.\\n             */\\n            indexOf(value: string | number | Uint8Array, byteOffset?: number, encoding?: BufferEncoding): number;\\n            /**\\n             * Identical to `buf.indexOf()`, except the last occurrence of `value` is found\\n             * rather than the first occurrence.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from('this buffer is a buffer');\\n             *\\n             * console.log(buf.lastIndexOf('this'));\\n             * // Prints: 0\\n             * console.log(buf.lastIndexOf('buffer'));\\n             * // Prints: 17\\n             * console.log(buf.lastIndexOf(Buffer.from('buffer')));\\n             * // Prints: 17\\n             * console.log(buf.lastIndexOf(97));\\n             * // Prints: 15 (97 is the decimal ASCII value for 'a')\\n             * console.log(buf.lastIndexOf(Buffer.from('yolo')));\\n             * // Prints: -1\\n             * console.log(buf.lastIndexOf('buffer', 5));\\n             * // Prints: 5\\n             * console.log(buf.lastIndexOf('buffer', 4));\\n             * // Prints: -1\\n             *\\n             * const utf16Buffer = Buffer.from('\\\\u039a\\\\u0391\\\\u03a3\\\\u03a3\\\\u0395', 'utf16le');\\n             *\\n             * console.log(utf16Buffer.lastIndexOf('\\\\u03a3', undefined, 'utf16le'));\\n             * // Prints: 6\\n             * console.log(utf16Buffer.lastIndexOf('\\\\u03a3', -5, 'utf16le'));\\n             * // Prints: 4\\n             * ```\\n             *\\n             * If `value` is not a string, number, or `Buffer`, this method will throw a`TypeError`. If `value` is a number, it will be coerced to a valid byte value,\\n             * an integer between 0 and 255.\\n             *\\n             * If `byteOffset` is not a number, it will be coerced to a number. Any arguments\\n             * that coerce to `NaN`, like `{}` or `undefined`, will search the whole buffer.\\n             * This behavior matches [`String.prototype.lastIndexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf).\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const b = Buffer.from('abcdef');\\n             *\\n             * // Passing a value that's a number, but not a valid byte.\\n             * // Prints: 2, equivalent to searching for 99 or 'c'.\\n             * console.log(b.lastIndexOf(99.9));\\n             * console.log(b.lastIndexOf(256 + 99));\\n             *\\n             * // Passing a byteOffset that coerces to NaN.\\n             * // Prints: 1, searching the whole buffer.\\n             * console.log(b.lastIndexOf('b', undefined));\\n             * console.log(b.lastIndexOf('b', {}));\\n             *\\n             * // Passing a byteOffset that coerces to 0.\\n             * // Prints: -1, equivalent to passing 0.\\n             * console.log(b.lastIndexOf('b', null));\\n             * console.log(b.lastIndexOf('b', []));\\n             * ```\\n             *\\n             * If `value` is an empty string or empty `Buffer`, `byteOffset` will be returned.\\n             * @since v6.0.0\\n             * @param value What to search for.\\n             * @param [byteOffset=buf.length - 1] Where to begin searching in `buf`. If negative, then offset is calculated from the end of `buf`.\\n             * @param [encoding='utf8'] If `value` is a string, this is the encoding used to determine the binary representation of the string that will be searched for in `buf`.\\n             * @return The index of the last occurrence of `value` in `buf`, or `-1` if `buf` does not contain `value`.\\n             */\\n            lastIndexOf(value: string | number | Uint8Array, byteOffset?: number, encoding?: BufferEncoding): number;\\n            /**\\n             * Creates and returns an [iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) of `[index, byte]` pairs from the contents\\n             * of `buf`.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * // Log the entire contents of a `Buffer`.\\n             *\\n             * const buf = Buffer.from('buffer');\\n             *\\n             * for (const pair of buf.entries()) {\\n             *   console.log(pair);\\n             * }\\n             * // Prints:\\n             * //   [0, 98]\\n             * //   [1, 117]\\n             * //   [2, 102]\\n             * //   [3, 102]\\n             * //   [4, 101]\\n             * //   [5, 114]\\n             * ```\\n             * @since v1.1.0\\n             */\\n            entries(): IterableIterator<[number, number]>;\\n            /**\\n             * Equivalent to `buf.indexOf() !== -1`.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from('this is a buffer');\\n             *\\n             * console.log(buf.includes('this'));\\n             * // Prints: true\\n             * console.log(buf.includes('is'));\\n             * // Prints: true\\n             * console.log(buf.includes(Buffer.from('a buffer')));\\n             * // Prints: true\\n             * console.log(buf.includes(97));\\n             * // Prints: true (97 is the decimal ASCII value for 'a')\\n             * console.log(buf.includes(Buffer.from('a buffer example')));\\n             * // Prints: false\\n             * console.log(buf.includes(Buffer.from('a buffer example').slice(0, 8)));\\n             * // Prints: true\\n             * console.log(buf.includes('this', 4));\\n             * // Prints: false\\n             * ```\\n             * @since v5.3.0\\n             * @param value What to search for.\\n             * @param [byteOffset=0] Where to begin searching in `buf`. If negative, then offset is calculated from the end of `buf`.\\n             * @param [encoding='utf8'] If `value` is a string, this is its encoding.\\n             * @return `true` if `value` was found in `buf`, `false` otherwise.\\n             */\\n            includes(value: string | number | Buffer, byteOffset?: number, encoding?: BufferEncoding): boolean;\\n            /**\\n             * Creates and returns an [iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) of `buf` keys (indices).\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from('buffer');\\n             *\\n             * for (const key of buf.keys()) {\\n             *   console.log(key);\\n             * }\\n             * // Prints:\\n             * //   0\\n             * //   1\\n             * //   2\\n             * //   3\\n             * //   4\\n             * //   5\\n             * ```\\n             * @since v1.1.0\\n             */\\n            keys(): IterableIterator<number>;\\n            /**\\n             * Creates and returns an [iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) for `buf` values (bytes). This function is\\n             * called automatically when a `Buffer` is used in a `for..of` statement.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from('buffer');\\n             *\\n             * for (const value of buf.values()) {\\n             *   console.log(value);\\n             * }\\n             * // Prints:\\n             * //   98\\n             * //   117\\n             * //   102\\n             * //   102\\n             * //   101\\n             * //   114\\n             *\\n             * for (const value of buf) {\\n             *   console.log(value);\\n             * }\\n             * // Prints:\\n             * //   98\\n             * //   117\\n             * //   102\\n             * //   102\\n             * //   101\\n             * //   114\\n             * ```\\n             * @since v1.1.0\\n             */\\n            values(): IterableIterator<number>;\\n        }\\n        var Buffer: BufferConstructor;\\n        /**\\n         * Decodes a string of Base64-encoded data into bytes, and encodes those bytes\\n         * into a string using Latin-1 (ISO-8859-1).\\n         *\\n         * The `data` may be any JavaScript-value that can be coerced into a string.\\n         *\\n         * **This function is only provided for compatibility with legacy web platform APIs**\\n         * **and should never be used in new code, because they use strings to represent**\\n         * **binary data and predate the introduction of typed arrays in JavaScript.**\\n         * **For code running using Node.js APIs, converting between base64-encoded strings**\\n         * **and binary data should be performed using `Buffer.from(str, 'base64')` and`buf.toString('base64')`.**\\n         * @since v15.13.0, v14.17.0\\n         * @deprecated Use `Buffer.from(data, 'base64')` instead.\\n         * @param data The Base64-encoded input string.\\n         */\\n        function atob(data: string): string;\\n        /**\\n         * Decodes a string into bytes using Latin-1 (ISO-8859), and encodes those bytes\\n         * into a string using Base64.\\n         *\\n         * The `data` may be any JavaScript-value that can be coerced into a string.\\n         *\\n         * **This function is only provided for compatibility with legacy web platform APIs**\\n         * **and should never be used in new code, because they use strings to represent**\\n         * **binary data and predate the introduction of typed arrays in JavaScript.**\\n         * **For code running using Node.js APIs, converting between base64-encoded strings**\\n         * **and binary data should be performed using `Buffer.from(str, 'base64')` and`buf.toString('base64')`.**\\n         * @since v15.13.0, v14.17.0\\n         * @deprecated Use `buf.toString('base64')` instead.\\n         * @param data An ASCII (Latin1) string.\\n         */\\n        function btoa(data: string): string;\\n\\n        interface Blob extends __Blob {}\\n        /**\\n         * `Blob` class is a global reference for `require('node:buffer').Blob`\\n         * https://nodejs.org/api/buffer.html#class-blob\\n         * @since v18.0.0\\n         */\\n        var Blob: typeof globalThis extends {\\n            onmessage: any;\\n            Blob: infer T;\\n        }\\n            ? T\\n            : typeof NodeBlob;\\n    }\\n}\\ndeclare module 'node:buffer' {\\n    export * from 'buffer';\\n}\\n\",\"file:///node_modules/@types/node/child_process.d.ts\":\"/**\\n * The `child_process` module provides the ability to spawn subprocesses in\\n * a manner that is similar, but not identical, to [`popen(3)`](http://man7.org/linux/man-pages/man3/popen.3.html). This capability\\n * is primarily provided by the {@link spawn} function:\\n *\\n * ```js\\n * const { spawn } = require('child_process');\\n * const ls = spawn('ls', ['-lh', '/usr']);\\n *\\n * ls.stdout.on('data', (data) => {\\n *   console.log(`stdout: ${data}`);\\n * });\\n *\\n * ls.stderr.on('data', (data) => {\\n *   console.error(`stderr: ${data}`);\\n * });\\n *\\n * ls.on('close', (code) => {\\n *   console.log(`child process exited with code ${code}`);\\n * });\\n * ```\\n *\\n * By default, pipes for `stdin`, `stdout`, and `stderr` are established between\\n * the parent Node.js process and the spawned subprocess. These pipes have\\n * limited (and platform-specific) capacity. If the subprocess writes to\\n * stdout in excess of that limit without the output being captured, the\\n * subprocess blocks waiting for the pipe buffer to accept more data. This is\\n * identical to the behavior of pipes in the shell. Use the `{ stdio: 'ignore' }`option if the output will not be consumed.\\n *\\n * The command lookup is performed using the `options.env.PATH` environment\\n * variable if `env` is in the `options` object. Otherwise, `process.env.PATH` is\\n * used. If `options.env` is set without `PATH`, lookup on Unix is performed\\n * on a default search path search of `/usr/bin:/bin` (see your operating system's\\n * manual for execvpe/execvp), on Windows the current processes environment\\n * variable `PATH` is used.\\n *\\n * On Windows, environment variables are case-insensitive. Node.js\\n * lexicographically sorts the `env` keys and uses the first one that\\n * case-insensitively matches. Only first (in lexicographic order) entry will be\\n * passed to the subprocess. This might lead to issues on Windows when passing\\n * objects to the `env` option that have multiple variants of the same key, such as`PATH` and `Path`.\\n *\\n * The {@link spawn} method spawns the child process asynchronously,\\n * without blocking the Node.js event loop. The {@link spawnSync} function provides equivalent functionality in a synchronous manner that blocks\\n * the event loop until the spawned process either exits or is terminated.\\n *\\n * For convenience, the `child_process` module provides a handful of synchronous\\n * and asynchronous alternatives to {@link spawn} and {@link spawnSync}. Each of these alternatives are implemented on\\n * top of {@link spawn} or {@link spawnSync}.\\n *\\n * * {@link exec}: spawns a shell and runs a command within that\\n * shell, passing the `stdout` and `stderr` to a callback function when\\n * complete.\\n * * {@link execFile}: similar to {@link exec} except\\n * that it spawns the command directly without first spawning a shell by\\n * default.\\n * * {@link fork}: spawns a new Node.js process and invokes a\\n * specified module with an IPC communication channel established that allows\\n * sending messages between parent and child.\\n * * {@link execSync}: a synchronous version of {@link exec} that will block the Node.js event loop.\\n * * {@link execFileSync}: a synchronous version of {@link execFile} that will block the Node.js event loop.\\n *\\n * For certain use cases, such as automating shell scripts, the `synchronous counterparts` may be more convenient. In many cases, however,\\n * the synchronous methods can have significant impact on performance due to\\n * stalling the event loop while spawned processes complete.\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/child_process.js)\\n */\\ndeclare module 'child_process' {\\n    import { ObjectEncodingOptions } from 'node:fs';\\n    import { EventEmitter, Abortable } from 'node:events';\\n    import * as net from 'node:net';\\n    import { Writable, Readable, Stream, Pipe } from 'node:stream';\\n    import { URL } from 'node:url';\\n    type Serializable = string | object | number | boolean | bigint;\\n    type SendHandle = net.Socket | net.Server;\\n    /**\\n     * Instances of the `ChildProcess` represent spawned child processes.\\n     *\\n     * Instances of `ChildProcess` are not intended to be created directly. Rather,\\n     * use the {@link spawn}, {@link exec},{@link execFile}, or {@link fork} methods to create\\n     * instances of `ChildProcess`.\\n     * @since v2.2.0\\n     */\\n    class ChildProcess extends EventEmitter {\\n        /**\\n         * A `Writable Stream` that represents the child process's `stdin`.\\n         *\\n         * If a child process waits to read all of its input, the child will not continue\\n         * until this stream has been closed via `end()`.\\n         *\\n         * If the child was spawned with `stdio[0]` set to anything other than `'pipe'`,\\n         * then this will be `null`.\\n         *\\n         * `subprocess.stdin` is an alias for `subprocess.stdio[0]`. Both properties will\\n         * refer to the same value.\\n         *\\n         * The `subprocess.stdin` property can be `undefined` if the child process could\\n         * not be successfully spawned.\\n         * @since v0.1.90\\n         */\\n        stdin: Writable | null;\\n        /**\\n         * A `Readable Stream` that represents the child process's `stdout`.\\n         *\\n         * If the child was spawned with `stdio[1]` set to anything other than `'pipe'`,\\n         * then this will be `null`.\\n         *\\n         * `subprocess.stdout` is an alias for `subprocess.stdio[1]`. Both properties will\\n         * refer to the same value.\\n         *\\n         * ```js\\n         * const { spawn } = require('child_process');\\n         *\\n         * const subprocess = spawn('ls');\\n         *\\n         * subprocess.stdout.on('data', (data) => {\\n         *   console.log(`Received chunk ${data}`);\\n         * });\\n         * ```\\n         *\\n         * The `subprocess.stdout` property can be `null` if the child process could\\n         * not be successfully spawned.\\n         * @since v0.1.90\\n         */\\n        stdout: Readable | null;\\n        /**\\n         * A `Readable Stream` that represents the child process's `stderr`.\\n         *\\n         * If the child was spawned with `stdio[2]` set to anything other than `'pipe'`,\\n         * then this will be `null`.\\n         *\\n         * `subprocess.stderr` is an alias for `subprocess.stdio[2]`. Both properties will\\n         * refer to the same value.\\n         *\\n         * The `subprocess.stderr` property can be `null` if the child process could\\n         * not be successfully spawned.\\n         * @since v0.1.90\\n         */\\n        stderr: Readable | null;\\n        /**\\n         * The `subprocess.channel` property is a reference to the child's IPC channel. If\\n         * no IPC channel currently exists, this property is `undefined`.\\n         * @since v7.1.0\\n         */\\n        readonly channel?: Pipe | null | undefined;\\n        /**\\n         * A sparse array of pipes to the child process, corresponding with positions in\\n         * the `stdio` option passed to {@link spawn} that have been set\\n         * to the value `'pipe'`. `subprocess.stdio[0]`, `subprocess.stdio[1]`, and`subprocess.stdio[2]` are also available as `subprocess.stdin`,`subprocess.stdout`, and `subprocess.stderr`,\\n         * respectively.\\n         *\\n         * In the following example, only the child's fd `1` (stdout) is configured as a\\n         * pipe, so only the parent's `subprocess.stdio[1]` is a stream, all other values\\n         * in the array are `null`.\\n         *\\n         * ```js\\n         * const assert = require('assert');\\n         * const fs = require('fs');\\n         * const child_process = require('child_process');\\n         *\\n         * const subprocess = child_process.spawn('ls', {\\n         *   stdio: [\\n         *     0, // Use parent's stdin for child.\\n         *     'pipe', // Pipe child's stdout to parent.\\n         *     fs.openSync('err.out', 'w'), // Direct child's stderr to a file.\\n         *   ]\\n         * });\\n         *\\n         * assert.strictEqual(subprocess.stdio[0], null);\\n         * assert.strictEqual(subprocess.stdio[0], subprocess.stdin);\\n         *\\n         * assert(subprocess.stdout);\\n         * assert.strictEqual(subprocess.stdio[1], subprocess.stdout);\\n         *\\n         * assert.strictEqual(subprocess.stdio[2], null);\\n         * assert.strictEqual(subprocess.stdio[2], subprocess.stderr);\\n         * ```\\n         *\\n         * The `subprocess.stdio` property can be `undefined` if the child process could\\n         * not be successfully spawned.\\n         * @since v0.7.10\\n         */\\n        readonly stdio: [\\n            Writable | null,\\n            // stdin\\n            Readable | null,\\n            // stdout\\n            Readable | null,\\n            // stderr\\n            Readable | Writable | null | undefined,\\n            // extra\\n            Readable | Writable | null | undefined // extra\\n        ];\\n        /**\\n         * The `subprocess.killed` property indicates whether the child process\\n         * successfully received a signal from `subprocess.kill()`. The `killed` property\\n         * does not indicate that the child process has been terminated.\\n         * @since v0.5.10\\n         */\\n        readonly killed: boolean;\\n        /**\\n         * Returns the process identifier (PID) of the child process. If the child process\\n         * fails to spawn due to errors, then the value is `undefined` and `error` is\\n         * emitted.\\n         *\\n         * ```js\\n         * const { spawn } = require('child_process');\\n         * const grep = spawn('grep', ['ssh']);\\n         *\\n         * console.log(`Spawned child pid: ${grep.pid}`);\\n         * grep.stdin.end();\\n         * ```\\n         * @since v0.1.90\\n         */\\n        readonly pid?: number | undefined;\\n        /**\\n         * The `subprocess.connected` property indicates whether it is still possible to\\n         * send and receive messages from a child process. When `subprocess.connected` is`false`, it is no longer possible to send or receive messages.\\n         * @since v0.7.2\\n         */\\n        readonly connected: boolean;\\n        /**\\n         * The `subprocess.exitCode` property indicates the exit code of the child process.\\n         * If the child process is still running, the field will be `null`.\\n         */\\n        readonly exitCode: number | null;\\n        /**\\n         * The `subprocess.signalCode` property indicates the signal received by\\n         * the child process if any, else `null`.\\n         */\\n        readonly signalCode: NodeJS.Signals | null;\\n        /**\\n         * The `subprocess.spawnargs` property represents the full list of command-line\\n         * arguments the child process was launched with.\\n         */\\n        readonly spawnargs: string[];\\n        /**\\n         * The `subprocess.spawnfile` property indicates the executable file name of\\n         * the child process that is launched.\\n         *\\n         * For {@link fork}, its value will be equal to `process.execPath`.\\n         * For {@link spawn}, its value will be the name of\\n         * the executable file.\\n         * For {@link exec},  its value will be the name of the shell\\n         * in which the child process is launched.\\n         */\\n        readonly spawnfile: string;\\n        /**\\n         * The `subprocess.kill()` method sends a signal to the child process. If no\\n         * argument is given, the process will be sent the `'SIGTERM'` signal. See [`signal(7)`](http://man7.org/linux/man-pages/man7/signal.7.html) for a list of available signals. This function\\n         * returns `true` if [`kill(2)`](http://man7.org/linux/man-pages/man2/kill.2.html) succeeds, and `false` otherwise.\\n         *\\n         * ```js\\n         * const { spawn } = require('child_process');\\n         * const grep = spawn('grep', ['ssh']);\\n         *\\n         * grep.on('close', (code, signal) => {\\n         *   console.log(\\n         *     `child process terminated due to receipt of signal ${signal}`);\\n         * });\\n         *\\n         * // Send SIGHUP to process.\\n         * grep.kill('SIGHUP');\\n         * ```\\n         *\\n         * The `ChildProcess` object may emit an `'error'` event if the signal\\n         * cannot be delivered. Sending a signal to a child process that has already exited\\n         * is not an error but may have unforeseen consequences. Specifically, if the\\n         * process identifier (PID) has been reassigned to another process, the signal will\\n         * be delivered to that process instead which can have unexpected results.\\n         *\\n         * While the function is called `kill`, the signal delivered to the child process\\n         * may not actually terminate the process.\\n         *\\n         * See [`kill(2)`](http://man7.org/linux/man-pages/man2/kill.2.html) for reference.\\n         *\\n         * On Windows, where POSIX signals do not exist, the `signal` argument will be\\n         * ignored, and the process will be killed forcefully and abruptly (similar to`'SIGKILL'`).\\n         * See `Signal Events` for more details.\\n         *\\n         * On Linux, child processes of child processes will not be terminated\\n         * when attempting to kill their parent. This is likely to happen when running a\\n         * new process in a shell or with the use of the `shell` option of `ChildProcess`:\\n         *\\n         * ```js\\n         * 'use strict';\\n         * const { spawn } = require('child_process');\\n         *\\n         * const subprocess = spawn(\\n         *   'sh',\\n         *   [\\n         *     '-c',\\n         *     `node -e \\\"setInterval(() => {\\n         *       console.log(process.pid, 'is alive')\\n         *     }, 500);\\\"`,\\n         *   ], {\\n         *     stdio: ['inherit', 'inherit', 'inherit']\\n         *   }\\n         * );\\n         *\\n         * setTimeout(() => {\\n         *   subprocess.kill(); // Does not terminate the Node.js process in the shell.\\n         * }, 2000);\\n         * ```\\n         * @since v0.1.90\\n         */\\n        kill(signal?: NodeJS.Signals | number): boolean;\\n        /**\\n         * When an IPC channel has been established between the parent and child (\\n         * i.e. when using {@link fork}), the `subprocess.send()` method can\\n         * be used to send messages to the child process. When the child process is a\\n         * Node.js instance, these messages can be received via the `'message'` event.\\n         *\\n         * The message goes through serialization and parsing. The resulting\\n         * message might not be the same as what is originally sent.\\n         *\\n         * For example, in the parent script:\\n         *\\n         * ```js\\n         * const cp = require('child_process');\\n         * const n = cp.fork(`${__dirname}/sub.js`);\\n         *\\n         * n.on('message', (m) => {\\n         *   console.log('PARENT got message:', m);\\n         * });\\n         *\\n         * // Causes the child to print: CHILD got message: { hello: 'world' }\\n         * n.send({ hello: 'world' });\\n         * ```\\n         *\\n         * And then the child script, `'sub.js'` might look like this:\\n         *\\n         * ```js\\n         * process.on('message', (m) => {\\n         *   console.log('CHILD got message:', m);\\n         * });\\n         *\\n         * // Causes the parent to print: PARENT got message: { foo: 'bar', baz: null }\\n         * process.send({ foo: 'bar', baz: NaN });\\n         * ```\\n         *\\n         * Child Node.js processes will have a `process.send()` method of their own\\n         * that allows the child to send messages back to the parent.\\n         *\\n         * There is a special case when sending a `{cmd: 'NODE_foo'}` message. Messages\\n         * containing a `NODE_` prefix in the `cmd` property are reserved for use within\\n         * Node.js core and will not be emitted in the child's `'message'` event. Rather, such messages are emitted using the`'internalMessage'` event and are consumed internally by Node.js.\\n         * Applications should avoid using such messages or listening for`'internalMessage'` events as it is subject to change without notice.\\n         *\\n         * The optional `sendHandle` argument that may be passed to `subprocess.send()` is\\n         * for passing a TCP server or socket object to the child process. The child will\\n         * receive the object as the second argument passed to the callback function\\n         * registered on the `'message'` event. Any data that is received\\n         * and buffered in the socket will not be sent to the child.\\n         *\\n         * The optional `callback` is a function that is invoked after the message is\\n         * sent but before the child may have received it. The function is called with a\\n         * single argument: `null` on success, or an `Error` object on failure.\\n         *\\n         * If no `callback` function is provided and the message cannot be sent, an`'error'` event will be emitted by the `ChildProcess` object. This can\\n         * happen, for instance, when the child process has already exited.\\n         *\\n         * `subprocess.send()` will return `false` if the channel has closed or when the\\n         * backlog of unsent messages exceeds a threshold that makes it unwise to send\\n         * more. Otherwise, the method returns `true`. The `callback` function can be\\n         * used to implement flow control.\\n         *\\n         * #### Example: sending a server object\\n         *\\n         * The `sendHandle` argument can be used, for instance, to pass the handle of\\n         * a TCP server object to the child process as illustrated in the example below:\\n         *\\n         * ```js\\n         * const subprocess = require('child_process').fork('subprocess.js');\\n         *\\n         * // Open up the server object and send the handle.\\n         * const server = require('net').createServer();\\n         * server.on('connection', (socket) => {\\n         *   socket.end('handled by parent');\\n         * });\\n         * server.listen(1337, () => {\\n         *   subprocess.send('server', server);\\n         * });\\n         * ```\\n         *\\n         * The child would then receive the server object as:\\n         *\\n         * ```js\\n         * process.on('message', (m, server) => {\\n         *   if (m === 'server') {\\n         *     server.on('connection', (socket) => {\\n         *       socket.end('handled by child');\\n         *     });\\n         *   }\\n         * });\\n         * ```\\n         *\\n         * Once the server is now shared between the parent and child, some connections\\n         * can be handled by the parent and some by the child.\\n         *\\n         * While the example above uses a server created using the `net` module, `dgram`module servers use exactly the same workflow with the exceptions of listening on\\n         * a `'message'` event instead of `'connection'` and using `server.bind()` instead\\n         * of `server.listen()`. This is, however, currently only supported on Unix\\n         * platforms.\\n         *\\n         * #### Example: sending a socket object\\n         *\\n         * Similarly, the `sendHandler` argument can be used to pass the handle of a\\n         * socket to the child process. The example below spawns two children that each\\n         * handle connections with \\\"normal\\\" or \\\"special\\\" priority:\\n         *\\n         * ```js\\n         * const { fork } = require('child_process');\\n         * const normal = fork('subprocess.js', ['normal']);\\n         * const special = fork('subprocess.js', ['special']);\\n         *\\n         * // Open up the server and send sockets to child. Use pauseOnConnect to prevent\\n         * // the sockets from being read before they are sent to the child process.\\n         * const server = require('net').createServer({ pauseOnConnect: true });\\n         * server.on('connection', (socket) => {\\n         *\\n         *   // If this is special priority...\\n         *   if (socket.remoteAddress === '74.125.127.100') {\\n         *     special.send('socket', socket);\\n         *     return;\\n         *   }\\n         *   // This is normal priority.\\n         *   normal.send('socket', socket);\\n         * });\\n         * server.listen(1337);\\n         * ```\\n         *\\n         * The `subprocess.js` would receive the socket handle as the second argument\\n         * passed to the event callback function:\\n         *\\n         * ```js\\n         * process.on('message', (m, socket) => {\\n         *   if (m === 'socket') {\\n         *     if (socket) {\\n         *       // Check that the client socket exists.\\n         *       // It is possible for the socket to be closed between the time it is\\n         *       // sent and the time it is received in the child process.\\n         *       socket.end(`Request handled with ${process.argv[2]} priority`);\\n         *     }\\n         *   }\\n         * });\\n         * ```\\n         *\\n         * Do not use `.maxConnections` on a socket that has been passed to a subprocess.\\n         * The parent cannot track when the socket is destroyed.\\n         *\\n         * Any `'message'` handlers in the subprocess should verify that `socket` exists,\\n         * as the connection may have been closed during the time it takes to send the\\n         * connection to the child.\\n         * @since v0.5.9\\n         * @param options The `options` argument, if present, is an object used to parameterize the sending of certain types of handles. `options` supports the following properties:\\n         */\\n        send(message: Serializable, callback?: (error: Error | null) => void): boolean;\\n        send(message: Serializable, sendHandle?: SendHandle, callback?: (error: Error | null) => void): boolean;\\n        send(message: Serializable, sendHandle?: SendHandle, options?: MessageOptions, callback?: (error: Error | null) => void): boolean;\\n        /**\\n         * Closes the IPC channel between parent and child, allowing the child to exit\\n         * gracefully once there are no other connections keeping it alive. After calling\\n         * this method the `subprocess.connected` and `process.connected` properties in\\n         * both the parent and child (respectively) will be set to `false`, and it will be\\n         * no longer possible to pass messages between the processes.\\n         *\\n         * The `'disconnect'` event will be emitted when there are no messages in the\\n         * process of being received. This will most often be triggered immediately after\\n         * calling `subprocess.disconnect()`.\\n         *\\n         * When the child process is a Node.js instance (e.g. spawned using {@link fork}), the `process.disconnect()` method can be invoked\\n         * within the child process to close the IPC channel as well.\\n         * @since v0.7.2\\n         */\\n        disconnect(): void;\\n        /**\\n         * By default, the parent will wait for the detached child to exit. To prevent the\\n         * parent from waiting for a given `subprocess` to exit, use the`subprocess.unref()` method. Doing so will cause the parent's event loop to not\\n         * include the child in its reference count, allowing the parent to exit\\n         * independently of the child, unless there is an established IPC channel between\\n         * the child and the parent.\\n         *\\n         * ```js\\n         * const { spawn } = require('child_process');\\n         *\\n         * const subprocess = spawn(process.argv[0], ['child_program.js'], {\\n         *   detached: true,\\n         *   stdio: 'ignore'\\n         * });\\n         *\\n         * subprocess.unref();\\n         * ```\\n         * @since v0.7.10\\n         */\\n        unref(): void;\\n        /**\\n         * Calling `subprocess.ref()` after making a call to `subprocess.unref()` will\\n         * restore the removed reference count for the child process, forcing the parent\\n         * to wait for the child to exit before exiting itself.\\n         *\\n         * ```js\\n         * const { spawn } = require('child_process');\\n         *\\n         * const subprocess = spawn(process.argv[0], ['child_program.js'], {\\n         *   detached: true,\\n         *   stdio: 'ignore'\\n         * });\\n         *\\n         * subprocess.unref();\\n         * subprocess.ref();\\n         * ```\\n         * @since v0.7.10\\n         */\\n        ref(): void;\\n        /**\\n         * events.EventEmitter\\n         * 1. close\\n         * 2. disconnect\\n         * 3. error\\n         * 4. exit\\n         * 5. message\\n         * 6. spawn\\n         */\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        addListener(event: 'close', listener: (code: number | null, signal: NodeJS.Signals | null) => void): this;\\n        addListener(event: 'disconnect', listener: () => void): this;\\n        addListener(event: 'error', listener: (err: Error) => void): this;\\n        addListener(event: 'exit', listener: (code: number | null, signal: NodeJS.Signals | null) => void): this;\\n        addListener(event: 'message', listener: (message: Serializable, sendHandle: SendHandle) => void): this;\\n        addListener(event: 'spawn', listener: () => void): this;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        emit(event: 'close', code: number | null, signal: NodeJS.Signals | null): boolean;\\n        emit(event: 'disconnect'): boolean;\\n        emit(event: 'error', err: Error): boolean;\\n        emit(event: 'exit', code: number | null, signal: NodeJS.Signals | null): boolean;\\n        emit(event: 'message', message: Serializable, sendHandle: SendHandle): boolean;\\n        emit(event: 'spawn', listener: () => void): boolean;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        on(event: 'close', listener: (code: number | null, signal: NodeJS.Signals | null) => void): this;\\n        on(event: 'disconnect', listener: () => void): this;\\n        on(event: 'error', listener: (err: Error) => void): this;\\n        on(event: 'exit', listener: (code: number | null, signal: NodeJS.Signals | null) => void): this;\\n        on(event: 'message', listener: (message: Serializable, sendHandle: SendHandle) => void): this;\\n        on(event: 'spawn', listener: () => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        once(event: 'close', listener: (code: number | null, signal: NodeJS.Signals | null) => void): this;\\n        once(event: 'disconnect', listener: () => void): this;\\n        once(event: 'error', listener: (err: Error) => void): this;\\n        once(event: 'exit', listener: (code: number | null, signal: NodeJS.Signals | null) => void): this;\\n        once(event: 'message', listener: (message: Serializable, sendHandle: SendHandle) => void): this;\\n        once(event: 'spawn', listener: () => void): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'close', listener: (code: number | null, signal: NodeJS.Signals | null) => void): this;\\n        prependListener(event: 'disconnect', listener: () => void): this;\\n        prependListener(event: 'error', listener: (err: Error) => void): this;\\n        prependListener(event: 'exit', listener: (code: number | null, signal: NodeJS.Signals | null) => void): this;\\n        prependListener(event: 'message', listener: (message: Serializable, sendHandle: SendHandle) => void): this;\\n        prependListener(event: 'spawn', listener: () => void): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'close', listener: (code: number | null, signal: NodeJS.Signals | null) => void): this;\\n        prependOnceListener(event: 'disconnect', listener: () => void): this;\\n        prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n        prependOnceListener(event: 'exit', listener: (code: number | null, signal: NodeJS.Signals | null) => void): this;\\n        prependOnceListener(event: 'message', listener: (message: Serializable, sendHandle: SendHandle) => void): this;\\n        prependOnceListener(event: 'spawn', listener: () => void): this;\\n    }\\n    // return this object when stdio option is undefined or not specified\\n    interface ChildProcessWithoutNullStreams extends ChildProcess {\\n        stdin: Writable;\\n        stdout: Readable;\\n        stderr: Readable;\\n        readonly stdio: [\\n            Writable,\\n            Readable,\\n            Readable,\\n            // stderr\\n            Readable | Writable | null | undefined,\\n            // extra, no modification\\n            Readable | Writable | null | undefined // extra, no modification\\n        ];\\n    }\\n    // return this object when stdio option is a tuple of 3\\n    interface ChildProcessByStdio<I extends null | Writable, O extends null | Readable, E extends null | Readable> extends ChildProcess {\\n        stdin: I;\\n        stdout: O;\\n        stderr: E;\\n        readonly stdio: [\\n            I,\\n            O,\\n            E,\\n            Readable | Writable | null | undefined,\\n            // extra, no modification\\n            Readable | Writable | null | undefined // extra, no modification\\n        ];\\n    }\\n    interface MessageOptions {\\n        keepOpen?: boolean | undefined;\\n    }\\n    type IOType = 'overlapped' | 'pipe' | 'ignore' | 'inherit';\\n    type StdioOptions = IOType | Array<IOType | 'ipc' | Stream | number | null | undefined>;\\n    type SerializationType = 'json' | 'advanced';\\n    interface MessagingOptions extends Abortable {\\n        /**\\n         * Specify the kind of serialization used for sending messages between processes.\\n         * @default 'json'\\n         */\\n        serialization?: SerializationType | undefined;\\n        /**\\n         * The signal value to be used when the spawned process will be killed by the abort signal.\\n         * @default 'SIGTERM'\\n         */\\n        killSignal?: NodeJS.Signals | number | undefined;\\n        /**\\n         * In milliseconds the maximum amount of time the process is allowed to run.\\n         */\\n        timeout?: number | undefined;\\n    }\\n    interface ProcessEnvOptions {\\n        uid?: number | undefined;\\n        gid?: number | undefined;\\n        cwd?: string | URL | undefined;\\n        env?: NodeJS.ProcessEnv | undefined;\\n    }\\n    interface CommonOptions extends ProcessEnvOptions {\\n        /**\\n         * @default false\\n         */\\n        windowsHide?: boolean | undefined;\\n        /**\\n         * @default 0\\n         */\\n        timeout?: number | undefined;\\n    }\\n    interface CommonSpawnOptions extends CommonOptions, MessagingOptions, Abortable {\\n        argv0?: string | undefined;\\n        /**\\n         * Can be set to 'pipe', 'inherit', 'overlapped', or 'ignore', or an array of these strings.\\n         * If passed as an array, the first element is used for `stdin`, the second for\\n         * `stdout`, and the third for `stderr`. A fourth element can be used to\\n         * specify the `stdio` behavior beyond the standard streams. See\\n         * {@link ChildProcess.stdio} for more information.\\n         *\\n         * @default 'pipe'\\n         */\\n        stdio?: StdioOptions | undefined;\\n        shell?: boolean | string | undefined;\\n        windowsVerbatimArguments?: boolean | undefined;\\n    }\\n    interface SpawnOptions extends CommonSpawnOptions {\\n        detached?: boolean | undefined;\\n    }\\n    interface SpawnOptionsWithoutStdio extends SpawnOptions {\\n        stdio?: StdioPipeNamed | StdioPipe[] | undefined;\\n    }\\n    type StdioNull = 'inherit' | 'ignore' | Stream;\\n    type StdioPipeNamed = 'pipe' | 'overlapped';\\n    type StdioPipe = undefined | null | StdioPipeNamed;\\n    interface SpawnOptionsWithStdioTuple<Stdin extends StdioNull | StdioPipe, Stdout extends StdioNull | StdioPipe, Stderr extends StdioNull | StdioPipe> extends SpawnOptions {\\n        stdio: [Stdin, Stdout, Stderr];\\n    }\\n    /**\\n     * The `child_process.spawn()` method spawns a new process using the given`command`, with command-line arguments in `args`. If omitted, `args` defaults\\n     * to an empty array.\\n     *\\n     * **If the `shell` option is enabled, do not pass unsanitized user input to this**\\n     * **function. Any input containing shell metacharacters may be used to trigger**\\n     * **arbitrary command execution.**\\n     *\\n     * A third argument may be used to specify additional options, with these defaults:\\n     *\\n     * ```js\\n     * const defaults = {\\n     *   cwd: undefined,\\n     *   env: process.env\\n     * };\\n     * ```\\n     *\\n     * Use `cwd` to specify the working directory from which the process is spawned.\\n     * If not given, the default is to inherit the current working directory. If given,\\n     * but the path does not exist, the child process emits an `ENOENT` error\\n     * and exits immediately. `ENOENT` is also emitted when the command\\n     * does not exist.\\n     *\\n     * Use `env` to specify environment variables that will be visible to the new\\n     * process, the default is `process.env`.\\n     *\\n     * `undefined` values in `env` will be ignored.\\n     *\\n     * Example of running `ls -lh /usr`, capturing `stdout`, `stderr`, and the\\n     * exit code:\\n     *\\n     * ```js\\n     * const { spawn } = require('child_process');\\n     * const ls = spawn('ls', ['-lh', '/usr']);\\n     *\\n     * ls.stdout.on('data', (data) => {\\n     *   console.log(`stdout: ${data}`);\\n     * });\\n     *\\n     * ls.stderr.on('data', (data) => {\\n     *   console.error(`stderr: ${data}`);\\n     * });\\n     *\\n     * ls.on('close', (code) => {\\n     *   console.log(`child process exited with code ${code}`);\\n     * });\\n     * ```\\n     *\\n     * Example: A very elaborate way to run `ps ax | grep ssh`\\n     *\\n     * ```js\\n     * const { spawn } = require('child_process');\\n     * const ps = spawn('ps', ['ax']);\\n     * const grep = spawn('grep', ['ssh']);\\n     *\\n     * ps.stdout.on('data', (data) => {\\n     *   grep.stdin.write(data);\\n     * });\\n     *\\n     * ps.stderr.on('data', (data) => {\\n     *   console.error(`ps stderr: ${data}`);\\n     * });\\n     *\\n     * ps.on('close', (code) => {\\n     *   if (code !== 0) {\\n     *     console.log(`ps process exited with code ${code}`);\\n     *   }\\n     *   grep.stdin.end();\\n     * });\\n     *\\n     * grep.stdout.on('data', (data) => {\\n     *   console.log(data.toString());\\n     * });\\n     *\\n     * grep.stderr.on('data', (data) => {\\n     *   console.error(`grep stderr: ${data}`);\\n     * });\\n     *\\n     * grep.on('close', (code) => {\\n     *   if (code !== 0) {\\n     *     console.log(`grep process exited with code ${code}`);\\n     *   }\\n     * });\\n     * ```\\n     *\\n     * Example of checking for failed `spawn`:\\n     *\\n     * ```js\\n     * const { spawn } = require('child_process');\\n     * const subprocess = spawn('bad_command');\\n     *\\n     * subprocess.on('error', (err) => {\\n     *   console.error('Failed to start subprocess.');\\n     * });\\n     * ```\\n     *\\n     * Certain platforms (macOS, Linux) will use the value of `argv[0]` for the process\\n     * title while others (Windows, SunOS) will use `command`.\\n     *\\n     * Node.js currently overwrites `argv[0]` with `process.execPath` on startup, so`process.argv[0]` in a Node.js child process will not match the `argv0`parameter passed to `spawn` from the parent,\\n     * retrieve it with the`process.argv0` property instead.\\n     *\\n     * If the `signal` option is enabled, calling `.abort()` on the corresponding`AbortController` is similar to calling `.kill()` on the child process except\\n     * the error passed to the callback will be an `AbortError`:\\n     *\\n     * ```js\\n     * const { spawn } = require('child_process');\\n     * const controller = new AbortController();\\n     * const { signal } = controller;\\n     * const grep = spawn('grep', ['ssh'], { signal });\\n     * grep.on('error', (err) => {\\n     *   // This will be called with err being an AbortError if the controller aborts\\n     * });\\n     * controller.abort(); // Stops the child process\\n     * ```\\n     * @since v0.1.90\\n     * @param command The command to run.\\n     * @param args List of string arguments.\\n     */\\n    function spawn(command: string, options?: SpawnOptionsWithoutStdio): ChildProcessWithoutNullStreams;\\n    function spawn(command: string, options: SpawnOptionsWithStdioTuple<StdioPipe, StdioPipe, StdioPipe>): ChildProcessByStdio<Writable, Readable, Readable>;\\n    function spawn(command: string, options: SpawnOptionsWithStdioTuple<StdioPipe, StdioPipe, StdioNull>): ChildProcessByStdio<Writable, Readable, null>;\\n    function spawn(command: string, options: SpawnOptionsWithStdioTuple<StdioPipe, StdioNull, StdioPipe>): ChildProcessByStdio<Writable, null, Readable>;\\n    function spawn(command: string, options: SpawnOptionsWithStdioTuple<StdioNull, StdioPipe, StdioPipe>): ChildProcessByStdio<null, Readable, Readable>;\\n    function spawn(command: string, options: SpawnOptionsWithStdioTuple<StdioPipe, StdioNull, StdioNull>): ChildProcessByStdio<Writable, null, null>;\\n    function spawn(command: string, options: SpawnOptionsWithStdioTuple<StdioNull, StdioPipe, StdioNull>): ChildProcessByStdio<null, Readable, null>;\\n    function spawn(command: string, options: SpawnOptionsWithStdioTuple<StdioNull, StdioNull, StdioPipe>): ChildProcessByStdio<null, null, Readable>;\\n    function spawn(command: string, options: SpawnOptionsWithStdioTuple<StdioNull, StdioNull, StdioNull>): ChildProcessByStdio<null, null, null>;\\n    function spawn(command: string, options: SpawnOptions): ChildProcess;\\n    // overloads of spawn with 'args'\\n    function spawn(command: string, args?: ReadonlyArray<string>, options?: SpawnOptionsWithoutStdio): ChildProcessWithoutNullStreams;\\n    function spawn(command: string, args: ReadonlyArray<string>, options: SpawnOptionsWithStdioTuple<StdioPipe, StdioPipe, StdioPipe>): ChildProcessByStdio<Writable, Readable, Readable>;\\n    function spawn(command: string, args: ReadonlyArray<string>, options: SpawnOptionsWithStdioTuple<StdioPipe, StdioPipe, StdioNull>): ChildProcessByStdio<Writable, Readable, null>;\\n    function spawn(command: string, args: ReadonlyArray<string>, options: SpawnOptionsWithStdioTuple<StdioPipe, StdioNull, StdioPipe>): ChildProcessByStdio<Writable, null, Readable>;\\n    function spawn(command: string, args: ReadonlyArray<string>, options: SpawnOptionsWithStdioTuple<StdioNull, StdioPipe, StdioPipe>): ChildProcessByStdio<null, Readable, Readable>;\\n    function spawn(command: string, args: ReadonlyArray<string>, options: SpawnOptionsWithStdioTuple<StdioPipe, StdioNull, StdioNull>): ChildProcessByStdio<Writable, null, null>;\\n    function spawn(command: string, args: ReadonlyArray<string>, options: SpawnOptionsWithStdioTuple<StdioNull, StdioPipe, StdioNull>): ChildProcessByStdio<null, Readable, null>;\\n    function spawn(command: string, args: ReadonlyArray<string>, options: SpawnOptionsWithStdioTuple<StdioNull, StdioNull, StdioPipe>): ChildProcessByStdio<null, null, Readable>;\\n    function spawn(command: string, args: ReadonlyArray<string>, options: SpawnOptionsWithStdioTuple<StdioNull, StdioNull, StdioNull>): ChildProcessByStdio<null, null, null>;\\n    function spawn(command: string, args: ReadonlyArray<string>, options: SpawnOptions): ChildProcess;\\n    interface ExecOptions extends CommonOptions {\\n        shell?: string | undefined;\\n        signal?: AbortSignal | undefined;\\n        maxBuffer?: number | undefined;\\n        killSignal?: NodeJS.Signals | number | undefined;\\n    }\\n    interface ExecOptionsWithStringEncoding extends ExecOptions {\\n        encoding: BufferEncoding;\\n    }\\n    interface ExecOptionsWithBufferEncoding extends ExecOptions {\\n        encoding: BufferEncoding | null; // specify `null`.\\n    }\\n    interface ExecException extends Error {\\n        cmd?: string | undefined;\\n        killed?: boolean | undefined;\\n        code?: number | undefined;\\n        signal?: NodeJS.Signals | undefined;\\n    }\\n    /**\\n     * Spawns a shell then executes the `command` within that shell, buffering any\\n     * generated output. The `command` string passed to the exec function is processed\\n     * directly by the shell and special characters (vary based on [shell](https://en.wikipedia.org/wiki/List_of_command-line_interpreters))\\n     * need to be dealt with accordingly:\\n     *\\n     * ```js\\n     * const { exec } = require('child_process');\\n     *\\n     * exec('\\\"/path/to/test file/test.sh\\\" arg1 arg2');\\n     * // Double quotes are used so that the space in the path is not interpreted as\\n     * // a delimiter of multiple arguments.\\n     *\\n     * exec('echo \\\"The \\\\\\\\$HOME variable is $HOME\\\"');\\n     * // The $HOME variable is escaped in the first instance, but not in the second.\\n     * ```\\n     *\\n     * **Never pass unsanitized user input to this function. Any input containing shell**\\n     * **metacharacters may be used to trigger arbitrary command execution.**\\n     *\\n     * If a `callback` function is provided, it is called with the arguments`(error, stdout, stderr)`. On success, `error` will be `null`. On error,`error` will be an instance of `Error`. The\\n     * `error.code` property will be\\n     * the exit code of the process. By convention, any exit code other than `0`indicates an error. `error.signal` will be the signal that terminated the\\n     * process.\\n     *\\n     * The `stdout` and `stderr` arguments passed to the callback will contain the\\n     * stdout and stderr output of the child process. By default, Node.js will decode\\n     * the output as UTF-8 and pass strings to the callback. The `encoding` option\\n     * can be used to specify the character encoding used to decode the stdout and\\n     * stderr output. If `encoding` is `'buffer'`, or an unrecognized character\\n     * encoding, `Buffer` objects will be passed to the callback instead.\\n     *\\n     * ```js\\n     * const { exec } = require('child_process');\\n     * exec('cat *.js missing_file | wc -l', (error, stdout, stderr) => {\\n     *   if (error) {\\n     *     console.error(`exec error: ${error}`);\\n     *     return;\\n     *   }\\n     *   console.log(`stdout: ${stdout}`);\\n     *   console.error(`stderr: ${stderr}`);\\n     * });\\n     * ```\\n     *\\n     * If `timeout` is greater than `0`, the parent will send the signal\\n     * identified by the `killSignal` property (the default is `'SIGTERM'`) if the\\n     * child runs longer than `timeout` milliseconds.\\n     *\\n     * Unlike the [`exec(3)`](http://man7.org/linux/man-pages/man3/exec.3.html) POSIX system call, `child_process.exec()` does not replace\\n     * the existing process and uses a shell to execute the command.\\n     *\\n     * If this method is invoked as its `util.promisify()` ed version, it returns\\n     * a `Promise` for an `Object` with `stdout` and `stderr` properties. The returned`ChildProcess` instance is attached to the `Promise` as a `child` property. In\\n     * case of an error (including any error resulting in an exit code other than 0), a\\n     * rejected promise is returned, with the same `error` object given in the\\n     * callback, but with two additional properties `stdout` and `stderr`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     * const exec = util.promisify(require('child_process').exec);\\n     *\\n     * async function lsExample() {\\n     *   const { stdout, stderr } = await exec('ls');\\n     *   console.log('stdout:', stdout);\\n     *   console.error('stderr:', stderr);\\n     * }\\n     * lsExample();\\n     * ```\\n     *\\n     * If the `signal` option is enabled, calling `.abort()` on the corresponding`AbortController` is similar to calling `.kill()` on the child process except\\n     * the error passed to the callback will be an `AbortError`:\\n     *\\n     * ```js\\n     * const { exec } = require('child_process');\\n     * const controller = new AbortController();\\n     * const { signal } = controller;\\n     * const child = exec('grep ssh', { signal }, (error) => {\\n     *   console.log(error); // an AbortError\\n     * });\\n     * controller.abort();\\n     * ```\\n     * @since v0.1.90\\n     * @param command The command to run, with space-separated arguments.\\n     * @param callback called with the output when process terminates.\\n     */\\n    function exec(command: string, callback?: (error: ExecException | null, stdout: string, stderr: string) => void): ChildProcess;\\n    // `options` with `\\\"buffer\\\"` or `null` for `encoding` means stdout/stderr are definitely `Buffer`.\\n    function exec(\\n        command: string,\\n        options: {\\n            encoding: 'buffer' | null;\\n        } & ExecOptions,\\n        callback?: (error: ExecException | null, stdout: Buffer, stderr: Buffer) => void\\n    ): ChildProcess;\\n    // `options` with well known `encoding` means stdout/stderr are definitely `string`.\\n    function exec(\\n        command: string,\\n        options: {\\n            encoding: BufferEncoding;\\n        } & ExecOptions,\\n        callback?: (error: ExecException | null, stdout: string, stderr: string) => void\\n    ): ChildProcess;\\n    // `options` with an `encoding` whose type is `string` means stdout/stderr could either be `Buffer` or `string`.\\n    // There is no guarantee the `encoding` is unknown as `string` is a superset of `BufferEncoding`.\\n    function exec(\\n        command: string,\\n        options: {\\n            encoding: BufferEncoding;\\n        } & ExecOptions,\\n        callback?: (error: ExecException | null, stdout: string | Buffer, stderr: string | Buffer) => void\\n    ): ChildProcess;\\n    // `options` without an `encoding` means stdout/stderr are definitely `string`.\\n    function exec(command: string, options: ExecOptions, callback?: (error: ExecException | null, stdout: string, stderr: string) => void): ChildProcess;\\n    // fallback if nothing else matches. Worst case is always `string | Buffer`.\\n    function exec(\\n        command: string,\\n        options: (ObjectEncodingOptions & ExecOptions) | undefined | null,\\n        callback?: (error: ExecException | null, stdout: string | Buffer, stderr: string | Buffer) => void\\n    ): ChildProcess;\\n    interface PromiseWithChild<T> extends Promise<T> {\\n        child: ChildProcess;\\n    }\\n    namespace exec {\\n        function __promisify__(command: string): PromiseWithChild<{\\n            stdout: string;\\n            stderr: string;\\n        }>;\\n        function __promisify__(\\n            command: string,\\n            options: {\\n                encoding: 'buffer' | null;\\n            } & ExecOptions\\n        ): PromiseWithChild<{\\n            stdout: Buffer;\\n            stderr: Buffer;\\n        }>;\\n        function __promisify__(\\n            command: string,\\n            options: {\\n                encoding: BufferEncoding;\\n            } & ExecOptions\\n        ): PromiseWithChild<{\\n            stdout: string;\\n            stderr: string;\\n        }>;\\n        function __promisify__(\\n            command: string,\\n            options: ExecOptions\\n        ): PromiseWithChild<{\\n            stdout: string;\\n            stderr: string;\\n        }>;\\n        function __promisify__(\\n            command: string,\\n            options?: (ObjectEncodingOptions & ExecOptions) | null\\n        ): PromiseWithChild<{\\n            stdout: string | Buffer;\\n            stderr: string | Buffer;\\n        }>;\\n    }\\n    interface ExecFileOptions extends CommonOptions, Abortable {\\n        maxBuffer?: number | undefined;\\n        killSignal?: NodeJS.Signals | number | undefined;\\n        windowsVerbatimArguments?: boolean | undefined;\\n        shell?: boolean | string | undefined;\\n        signal?: AbortSignal | undefined;\\n    }\\n    interface ExecFileOptionsWithStringEncoding extends ExecFileOptions {\\n        encoding: BufferEncoding;\\n    }\\n    interface ExecFileOptionsWithBufferEncoding extends ExecFileOptions {\\n        encoding: 'buffer' | null;\\n    }\\n    interface ExecFileOptionsWithOtherEncoding extends ExecFileOptions {\\n        encoding: BufferEncoding;\\n    }\\n    type ExecFileException =\\n        & Omit<ExecException, 'code'>\\n        & Omit<NodeJS.ErrnoException, 'code'>\\n        & { code?: string | number | undefined | null };\\n    /**\\n     * The `child_process.execFile()` function is similar to {@link exec} except that it does not spawn a shell by default. Rather, the specified\\n     * executable `file` is spawned directly as a new process making it slightly more\\n     * efficient than {@link exec}.\\n     *\\n     * The same options as {@link exec} are supported. Since a shell is\\n     * not spawned, behaviors such as I/O redirection and file globbing are not\\n     * supported.\\n     *\\n     * ```js\\n     * const { execFile } = require('child_process');\\n     * const child = execFile('node', ['--version'], (error, stdout, stderr) => {\\n     *   if (error) {\\n     *     throw error;\\n     *   }\\n     *   console.log(stdout);\\n     * });\\n     * ```\\n     *\\n     * The `stdout` and `stderr` arguments passed to the callback will contain the\\n     * stdout and stderr output of the child process. By default, Node.js will decode\\n     * the output as UTF-8 and pass strings to the callback. The `encoding` option\\n     * can be used to specify the character encoding used to decode the stdout and\\n     * stderr output. If `encoding` is `'buffer'`, or an unrecognized character\\n     * encoding, `Buffer` objects will be passed to the callback instead.\\n     *\\n     * If this method is invoked as its `util.promisify()` ed version, it returns\\n     * a `Promise` for an `Object` with `stdout` and `stderr` properties. The returned`ChildProcess` instance is attached to the `Promise` as a `child` property. In\\n     * case of an error (including any error resulting in an exit code other than 0), a\\n     * rejected promise is returned, with the same `error` object given in the\\n     * callback, but with two additional properties `stdout` and `stderr`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     * const execFile = util.promisify(require('child_process').execFile);\\n     * async function getVersion() {\\n     *   const { stdout } = await execFile('node', ['--version']);\\n     *   console.log(stdout);\\n     * }\\n     * getVersion();\\n     * ```\\n     *\\n     * **If the `shell` option is enabled, do not pass unsanitized user input to this**\\n     * **function. Any input containing shell metacharacters may be used to trigger**\\n     * **arbitrary command execution.**\\n     *\\n     * If the `signal` option is enabled, calling `.abort()` on the corresponding`AbortController` is similar to calling `.kill()` on the child process except\\n     * the error passed to the callback will be an `AbortError`:\\n     *\\n     * ```js\\n     * const { execFile } = require('child_process');\\n     * const controller = new AbortController();\\n     * const { signal } = controller;\\n     * const child = execFile('node', ['--version'], { signal }, (error) => {\\n     *   console.log(error); // an AbortError\\n     * });\\n     * controller.abort();\\n     * ```\\n     * @since v0.1.91\\n     * @param file The name or path of the executable file to run.\\n     * @param args List of string arguments.\\n     * @param callback Called with the output when process terminates.\\n     */\\n    function execFile(file: string): ChildProcess;\\n    function execFile(file: string, options: (ObjectEncodingOptions & ExecFileOptions) | undefined | null): ChildProcess;\\n    function execFile(file: string, args?: ReadonlyArray<string> | null): ChildProcess;\\n    function execFile(file: string, args: ReadonlyArray<string> | undefined | null, options: (ObjectEncodingOptions & ExecFileOptions) | undefined | null): ChildProcess;\\n    // no `options` definitely means stdout/stderr are `string`.\\n    function execFile(file: string, callback: (error: ExecFileException | null, stdout: string, stderr: string) => void): ChildProcess;\\n    function execFile(file: string, args: ReadonlyArray<string> | undefined | null, callback: (error: ExecFileException | null, stdout: string, stderr: string) => void): ChildProcess;\\n    // `options` with `\\\"buffer\\\"` or `null` for `encoding` means stdout/stderr are definitely `Buffer`.\\n    function execFile(file: string, options: ExecFileOptionsWithBufferEncoding, callback: (error: ExecFileException | null, stdout: Buffer, stderr: Buffer) => void): ChildProcess;\\n    function execFile(\\n        file: string,\\n        args: ReadonlyArray<string> | undefined | null,\\n        options: ExecFileOptionsWithBufferEncoding,\\n        callback: (error: ExecFileException | null, stdout: Buffer, stderr: Buffer) => void\\n    ): ChildProcess;\\n    // `options` with well known `encoding` means stdout/stderr are definitely `string`.\\n    function execFile(file: string, options: ExecFileOptionsWithStringEncoding, callback: (error: ExecFileException | null, stdout: string, stderr: string) => void): ChildProcess;\\n    function execFile(\\n        file: string,\\n        args: ReadonlyArray<string> | undefined | null,\\n        options: ExecFileOptionsWithStringEncoding,\\n        callback: (error: ExecFileException | null, stdout: string, stderr: string) => void\\n    ): ChildProcess;\\n    // `options` with an `encoding` whose type is `string` means stdout/stderr could either be `Buffer` or `string`.\\n    // There is no guarantee the `encoding` is unknown as `string` is a superset of `BufferEncoding`.\\n    function execFile(file: string, options: ExecFileOptionsWithOtherEncoding, callback: (error: ExecFileException | null, stdout: string | Buffer, stderr: string | Buffer) => void): ChildProcess;\\n    function execFile(\\n        file: string,\\n        args: ReadonlyArray<string> | undefined | null,\\n        options: ExecFileOptionsWithOtherEncoding,\\n        callback: (error: ExecFileException | null, stdout: string | Buffer, stderr: string | Buffer) => void\\n    ): ChildProcess;\\n    // `options` without an `encoding` means stdout/stderr are definitely `string`.\\n    function execFile(file: string, options: ExecFileOptions, callback: (error: ExecFileException | null, stdout: string, stderr: string) => void): ChildProcess;\\n    function execFile(\\n        file: string,\\n        args: ReadonlyArray<string> | undefined | null,\\n        options: ExecFileOptions,\\n        callback: (error: ExecFileException | null, stdout: string, stderr: string) => void\\n    ): ChildProcess;\\n    // fallback if nothing else matches. Worst case is always `string | Buffer`.\\n    function execFile(\\n        file: string,\\n        options: (ObjectEncodingOptions & ExecFileOptions) | undefined | null,\\n        callback: ((error: ExecFileException | null, stdout: string | Buffer, stderr: string | Buffer) => void) | undefined | null\\n    ): ChildProcess;\\n    function execFile(\\n        file: string,\\n        args: ReadonlyArray<string> | undefined | null,\\n        options: (ObjectEncodingOptions & ExecFileOptions) | undefined | null,\\n        callback: ((error: ExecFileException | null, stdout: string | Buffer, stderr: string | Buffer) => void) | undefined | null\\n    ): ChildProcess;\\n    namespace execFile {\\n        function __promisify__(file: string): PromiseWithChild<{\\n            stdout: string;\\n            stderr: string;\\n        }>;\\n        function __promisify__(\\n            file: string,\\n            args: ReadonlyArray<string> | undefined | null\\n        ): PromiseWithChild<{\\n            stdout: string;\\n            stderr: string;\\n        }>;\\n        function __promisify__(\\n            file: string,\\n            options: ExecFileOptionsWithBufferEncoding\\n        ): PromiseWithChild<{\\n            stdout: Buffer;\\n            stderr: Buffer;\\n        }>;\\n        function __promisify__(\\n            file: string,\\n            args: ReadonlyArray<string> | undefined | null,\\n            options: ExecFileOptionsWithBufferEncoding\\n        ): PromiseWithChild<{\\n            stdout: Buffer;\\n            stderr: Buffer;\\n        }>;\\n        function __promisify__(\\n            file: string,\\n            options: ExecFileOptionsWithStringEncoding\\n        ): PromiseWithChild<{\\n            stdout: string;\\n            stderr: string;\\n        }>;\\n        function __promisify__(\\n            file: string,\\n            args: ReadonlyArray<string> | undefined | null,\\n            options: ExecFileOptionsWithStringEncoding\\n        ): PromiseWithChild<{\\n            stdout: string;\\n            stderr: string;\\n        }>;\\n        function __promisify__(\\n            file: string,\\n            options: ExecFileOptionsWithOtherEncoding\\n        ): PromiseWithChild<{\\n            stdout: string | Buffer;\\n            stderr: string | Buffer;\\n        }>;\\n        function __promisify__(\\n            file: string,\\n            args: ReadonlyArray<string> | undefined | null,\\n            options: ExecFileOptionsWithOtherEncoding\\n        ): PromiseWithChild<{\\n            stdout: string | Buffer;\\n            stderr: string | Buffer;\\n        }>;\\n        function __promisify__(\\n            file: string,\\n            options: ExecFileOptions\\n        ): PromiseWithChild<{\\n            stdout: string;\\n            stderr: string;\\n        }>;\\n        function __promisify__(\\n            file: string,\\n            args: ReadonlyArray<string> | undefined | null,\\n            options: ExecFileOptions\\n        ): PromiseWithChild<{\\n            stdout: string;\\n            stderr: string;\\n        }>;\\n        function __promisify__(\\n            file: string,\\n            options: (ObjectEncodingOptions & ExecFileOptions) | undefined | null\\n        ): PromiseWithChild<{\\n            stdout: string | Buffer;\\n            stderr: string | Buffer;\\n        }>;\\n        function __promisify__(\\n            file: string,\\n            args: ReadonlyArray<string> | undefined | null,\\n            options: (ObjectEncodingOptions & ExecFileOptions) | undefined | null\\n        ): PromiseWithChild<{\\n            stdout: string | Buffer;\\n            stderr: string | Buffer;\\n        }>;\\n    }\\n    interface ForkOptions extends ProcessEnvOptions, MessagingOptions, Abortable {\\n        execPath?: string | undefined;\\n        execArgv?: string[] | undefined;\\n        silent?: boolean | undefined;\\n        /**\\n         * Can be set to 'pipe', 'inherit', 'overlapped', or 'ignore', or an array of these strings.\\n         * If passed as an array, the first element is used for `stdin`, the second for\\n         * `stdout`, and the third for `stderr`. A fourth element can be used to\\n         * specify the `stdio` behavior beyond the standard streams. See\\n         * {@link ChildProcess.stdio} for more information.\\n         *\\n         * @default 'pipe'\\n         */\\n        stdio?: StdioOptions | undefined;\\n        detached?: boolean | undefined;\\n        windowsVerbatimArguments?: boolean | undefined;\\n    }\\n    /**\\n     * The `child_process.fork()` method is a special case of {@link spawn} used specifically to spawn new Node.js processes.\\n     * Like {@link spawn}, a `ChildProcess` object is returned. The\\n     * returned `ChildProcess` will have an additional communication channel\\n     * built-in that allows messages to be passed back and forth between the parent and\\n     * child. See `subprocess.send()` for details.\\n     *\\n     * Keep in mind that spawned Node.js child processes are\\n     * independent of the parent with exception of the IPC communication channel\\n     * that is established between the two. Each process has its own memory, with\\n     * their own V8 instances. Because of the additional resource allocations\\n     * required, spawning a large number of child Node.js processes is not\\n     * recommended.\\n     *\\n     * By default, `child_process.fork()` will spawn new Node.js instances using the `process.execPath` of the parent process. The `execPath` property in the`options` object allows for an alternative\\n     * execution path to be used.\\n     *\\n     * Node.js processes launched with a custom `execPath` will communicate with the\\n     * parent process using the file descriptor (fd) identified using the\\n     * environment variable `NODE_CHANNEL_FD` on the child process.\\n     *\\n     * Unlike the [`fork(2)`](http://man7.org/linux/man-pages/man2/fork.2.html) POSIX system call, `child_process.fork()` does not clone the\\n     * current process.\\n     *\\n     * The `shell` option available in {@link spawn} is not supported by`child_process.fork()` and will be ignored if set.\\n     *\\n     * If the `signal` option is enabled, calling `.abort()` on the corresponding`AbortController` is similar to calling `.kill()` on the child process except\\n     * the error passed to the callback will be an `AbortError`:\\n     *\\n     * ```js\\n     * if (process.argv[2] === 'child') {\\n     *   setTimeout(() => {\\n     *     console.log(`Hello from ${process.argv[2]}!`);\\n     *   }, 1_000);\\n     * } else {\\n     *   const { fork } = require('child_process');\\n     *   const controller = new AbortController();\\n     *   const { signal } = controller;\\n     *   const child = fork(__filename, ['child'], { signal });\\n     *   child.on('error', (err) => {\\n     *     // This will be called with err being an AbortError if the controller aborts\\n     *   });\\n     *   controller.abort(); // Stops the child process\\n     * }\\n     * ```\\n     * @since v0.5.0\\n     * @param modulePath The module to run in the child.\\n     * @param args List of string arguments.\\n     */\\n    function fork(modulePath: string, options?: ForkOptions): ChildProcess;\\n    function fork(modulePath: string, args?: ReadonlyArray<string>, options?: ForkOptions): ChildProcess;\\n    interface SpawnSyncOptions extends CommonSpawnOptions {\\n        input?: string | NodeJS.ArrayBufferView | undefined;\\n        maxBuffer?: number | undefined;\\n        encoding?: BufferEncoding | 'buffer' | null | undefined;\\n    }\\n    interface SpawnSyncOptionsWithStringEncoding extends SpawnSyncOptions {\\n        encoding: BufferEncoding;\\n    }\\n    interface SpawnSyncOptionsWithBufferEncoding extends SpawnSyncOptions {\\n        encoding?: 'buffer' | null | undefined;\\n    }\\n    interface SpawnSyncReturns<T> {\\n        pid: number;\\n        output: Array<T | null>;\\n        stdout: T;\\n        stderr: T;\\n        status: number | null;\\n        signal: NodeJS.Signals | null;\\n        error?: Error | undefined;\\n    }\\n    /**\\n     * The `child_process.spawnSync()` method is generally identical to {@link spawn} with the exception that the function will not return\\n     * until the child process has fully closed. When a timeout has been encountered\\n     * and `killSignal` is sent, the method won't return until the process has\\n     * completely exited. If the process intercepts and handles the `SIGTERM` signal\\n     * and doesn't exit, the parent process will wait until the child process has\\n     * exited.\\n     *\\n     * **If the `shell` option is enabled, do not pass unsanitized user input to this**\\n     * **function. Any input containing shell metacharacters may be used to trigger**\\n     * **arbitrary command execution.**\\n     * @since v0.11.12\\n     * @param command The command to run.\\n     * @param args List of string arguments.\\n     */\\n    function spawnSync(command: string): SpawnSyncReturns<Buffer>;\\n    function spawnSync(command: string, options: SpawnSyncOptionsWithStringEncoding): SpawnSyncReturns<string>;\\n    function spawnSync(command: string, options: SpawnSyncOptionsWithBufferEncoding): SpawnSyncReturns<Buffer>;\\n    function spawnSync(command: string, options?: SpawnSyncOptions): SpawnSyncReturns<string | Buffer>;\\n    function spawnSync(command: string, args: ReadonlyArray<string>): SpawnSyncReturns<Buffer>;\\n    function spawnSync(command: string, args: ReadonlyArray<string>, options: SpawnSyncOptionsWithStringEncoding): SpawnSyncReturns<string>;\\n    function spawnSync(command: string, args: ReadonlyArray<string>, options: SpawnSyncOptionsWithBufferEncoding): SpawnSyncReturns<Buffer>;\\n    function spawnSync(command: string, args?: ReadonlyArray<string>, options?: SpawnSyncOptions): SpawnSyncReturns<string | Buffer>;\\n    interface CommonExecOptions extends CommonOptions {\\n        input?: string | NodeJS.ArrayBufferView | undefined;\\n        /**\\n         * Can be set to 'pipe', 'inherit', 'overlapped', or 'ignore', or an array of these strings.\\n         * If passed as an array, the first element is used for `stdin`, the second for\\n         * `stdout`, and the third for `stderr`. A fourth element can be used to\\n         * specify the `stdio` behavior beyond the standard streams. See\\n         * {@link ChildProcess.stdio} for more information.\\n         *\\n         * @default 'pipe'\\n         */\\n        stdio?: StdioOptions | undefined;\\n        killSignal?: NodeJS.Signals | number | undefined;\\n        maxBuffer?: number | undefined;\\n        encoding?: BufferEncoding | 'buffer' | null | undefined;\\n    }\\n    interface ExecSyncOptions extends CommonExecOptions {\\n        shell?: string | undefined;\\n    }\\n    interface ExecSyncOptionsWithStringEncoding extends ExecSyncOptions {\\n        encoding: BufferEncoding;\\n    }\\n    interface ExecSyncOptionsWithBufferEncoding extends ExecSyncOptions {\\n        encoding?: 'buffer' | null | undefined;\\n    }\\n    /**\\n     * The `child_process.execSync()` method is generally identical to {@link exec} with the exception that the method will not return\\n     * until the child process has fully closed. When a timeout has been encountered\\n     * and `killSignal` is sent, the method won't return until the process has\\n     * completely exited. If the child process intercepts and handles the `SIGTERM`signal and doesn't exit, the parent process will wait until the child process\\n     * has exited.\\n     *\\n     * If the process times out or has a non-zero exit code, this method will throw.\\n     * The `Error` object will contain the entire result from {@link spawnSync}.\\n     *\\n     * **Never pass unsanitized user input to this function. Any input containing shell**\\n     * **metacharacters may be used to trigger arbitrary command execution.**\\n     * @since v0.11.12\\n     * @param command The command to run.\\n     * @return The stdout from the command.\\n     */\\n    function execSync(command: string): Buffer;\\n    function execSync(command: string, options: ExecSyncOptionsWithStringEncoding): string;\\n    function execSync(command: string, options: ExecSyncOptionsWithBufferEncoding): Buffer;\\n    function execSync(command: string, options?: ExecSyncOptions): string | Buffer;\\n    interface ExecFileSyncOptions extends CommonExecOptions {\\n        shell?: boolean | string | undefined;\\n    }\\n    interface ExecFileSyncOptionsWithStringEncoding extends ExecFileSyncOptions {\\n        encoding: BufferEncoding;\\n    }\\n    interface ExecFileSyncOptionsWithBufferEncoding extends ExecFileSyncOptions {\\n        encoding?: 'buffer' | null; // specify `null`.\\n    }\\n    /**\\n     * The `child_process.execFileSync()` method is generally identical to {@link execFile} with the exception that the method will not\\n     * return until the child process has fully closed. When a timeout has been\\n     * encountered and `killSignal` is sent, the method won't return until the process\\n     * has completely exited.\\n     *\\n     * If the child process intercepts and handles the `SIGTERM` signal and\\n     * does not exit, the parent process will still wait until the child process has\\n     * exited.\\n     *\\n     * If the process times out or has a non-zero exit code, this method will throw an `Error` that will include the full result of the underlying {@link spawnSync}.\\n     *\\n     * **If the `shell` option is enabled, do not pass unsanitized user input to this**\\n     * **function. Any input containing shell metacharacters may be used to trigger**\\n     * **arbitrary command execution.**\\n     * @since v0.11.12\\n     * @param file The name or path of the executable file to run.\\n     * @param args List of string arguments.\\n     * @return The stdout from the command.\\n     */\\n    function execFileSync(file: string): Buffer;\\n    function execFileSync(file: string, options: ExecFileSyncOptionsWithStringEncoding): string;\\n    function execFileSync(file: string, options: ExecFileSyncOptionsWithBufferEncoding): Buffer;\\n    function execFileSync(file: string, options?: ExecFileSyncOptions): string | Buffer;\\n    function execFileSync(file: string, args: ReadonlyArray<string>): Buffer;\\n    function execFileSync(file: string, args: ReadonlyArray<string>, options: ExecFileSyncOptionsWithStringEncoding): string;\\n    function execFileSync(file: string, args: ReadonlyArray<string>, options: ExecFileSyncOptionsWithBufferEncoding): Buffer;\\n    function execFileSync(file: string, args?: ReadonlyArray<string>, options?: ExecFileSyncOptions): string | Buffer;\\n}\\ndeclare module 'node:child_process' {\\n    export * from 'child_process';\\n}\\n\",\"file:///node_modules/@types/node/cluster.d.ts\":\"/**\\n * Clusters of Node.js processes can be used to run multiple instances of Node.js\\n * that can distribute workloads among their application threads. When process\\n * isolation is not needed, use the `worker_threads` module instead, which\\n * allows running multiple application threads within a single Node.js instance.\\n *\\n * The cluster module allows easy creation of child processes that all share\\n * server ports.\\n *\\n * ```js\\n * import cluster from 'cluster';\\n * import http from 'http';\\n * import { cpus } from 'os';\\n * import process from 'process';\\n *\\n * const numCPUs = cpus().length;\\n *\\n * if (cluster.isPrimary) {\\n *   console.log(`Primary ${process.pid} is running`);\\n *\\n *   // Fork workers.\\n *   for (let i = 0; i < numCPUs; i++) {\\n *     cluster.fork();\\n *   }\\n *\\n *   cluster.on('exit', (worker, code, signal) => {\\n *     console.log(`worker ${worker.process.pid} died`);\\n *   });\\n * } else {\\n *   // Workers can share any TCP connection\\n *   // In this case it is an HTTP server\\n *   http.createServer((req, res) => {\\n *     res.writeHead(200);\\n *     res.end('hello world\\\\n');\\n *   }).listen(8000);\\n *\\n *   console.log(`Worker ${process.pid} started`);\\n * }\\n * ```\\n *\\n * Running Node.js will now share port 8000 between the workers:\\n *\\n * ```console\\n * $ node server.js\\n * Primary 3596 is running\\n * Worker 4324 started\\n * Worker 4520 started\\n * Worker 6056 started\\n * Worker 5644 started\\n * ```\\n *\\n * On Windows, it is not yet possible to set up a named pipe server in a worker.\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/cluster.js)\\n */\\ndeclare module 'cluster' {\\n    import * as child from 'node:child_process';\\n    import EventEmitter = require('node:events');\\n    import * as net from 'node:net';\\n    export interface ClusterSettings {\\n        execArgv?: string[] | undefined; // default: process.execArgv\\n        exec?: string | undefined;\\n        args?: string[] | undefined;\\n        silent?: boolean | undefined;\\n        stdio?: any[] | undefined;\\n        uid?: number | undefined;\\n        gid?: number | undefined;\\n        inspectPort?: number | (() => number) | undefined;\\n    }\\n    export interface Address {\\n        address: string;\\n        port: number;\\n        addressType: number | 'udp4' | 'udp6'; // 4, 6, -1, \\\"udp4\\\", \\\"udp6\\\"\\n    }\\n    /**\\n     * A `Worker` object contains all public information and method about a worker.\\n     * In the primary it can be obtained using `cluster.workers`. In a worker\\n     * it can be obtained using `cluster.worker`.\\n     * @since v0.7.0\\n     */\\n    export class Worker extends EventEmitter {\\n        /**\\n         * Each new worker is given its own unique id, this id is stored in the`id`.\\n         *\\n         * While a worker is alive, this is the key that indexes it in`cluster.workers`.\\n         * @since v0.8.0\\n         */\\n        id: number;\\n        /**\\n         * All workers are created using `child_process.fork()`, the returned object\\n         * from this function is stored as `.process`. In a worker, the global `process`is stored.\\n         *\\n         * See: `Child Process module`.\\n         *\\n         * Workers will call `process.exit(0)` if the `'disconnect'` event occurs\\n         * on `process` and `.exitedAfterDisconnect` is not `true`. This protects against\\n         * accidental disconnection.\\n         * @since v0.7.0\\n         */\\n        process: child.ChildProcess;\\n        /**\\n         * Send a message to a worker or primary, optionally with a handle.\\n         *\\n         * In the primary, this sends a message to a specific worker. It is identical to `ChildProcess.send()`.\\n         *\\n         * In a worker, this sends a message to the primary. It is identical to`process.send()`.\\n         *\\n         * This example will echo back all messages from the primary:\\n         *\\n         * ```js\\n         * if (cluster.isPrimary) {\\n         *   const worker = cluster.fork();\\n         *   worker.send('hi there');\\n         *\\n         * } else if (cluster.isWorker) {\\n         *   process.on('message', (msg) => {\\n         *     process.send(msg);\\n         *   });\\n         * }\\n         * ```\\n         * @since v0.7.0\\n         * @param options The `options` argument, if present, is an object used to parameterize the sending of certain types of handles. `options` supports the following properties:\\n         */\\n        send(message: child.Serializable, callback?: (error: Error | null) => void): boolean;\\n        send(message: child.Serializable, sendHandle: child.SendHandle, callback?: (error: Error | null) => void): boolean;\\n        send(message: child.Serializable, sendHandle: child.SendHandle, options?: child.MessageOptions, callback?: (error: Error | null) => void): boolean;\\n        /**\\n         * This function will kill the worker. In the primary worker, it does this by\\n         * disconnecting the `worker.process`, and once disconnected, killing with`signal`. In the worker, it does it by killing the process with `signal`.\\n         *\\n         * The `kill()` function kills the worker process without waiting for a graceful\\n         * disconnect, it has the same behavior as `worker.process.kill()`.\\n         *\\n         * This method is aliased as `worker.destroy()` for backwards compatibility.\\n         *\\n         * In a worker, `process.kill()` exists, but it is not this function;\\n         * it is `kill()`.\\n         * @since v0.9.12\\n         * @param [signal='SIGTERM'] Name of the kill signal to send to the worker process.\\n         */\\n        kill(signal?: string): void;\\n        destroy(signal?: string): void;\\n        /**\\n         * In a worker, this function will close all servers, wait for the `'close'` event\\n         * on those servers, and then disconnect the IPC channel.\\n         *\\n         * In the primary, an internal message is sent to the worker causing it to call`.disconnect()` on itself.\\n         *\\n         * Causes `.exitedAfterDisconnect` to be set.\\n         *\\n         * After a server is closed, it will no longer accept new connections,\\n         * but connections may be accepted by any other listening worker. Existing\\n         * connections will be allowed to close as usual. When no more connections exist,\\n         * see `server.close()`, the IPC channel to the worker will close allowing it\\n         * to die gracefully.\\n         *\\n         * The above applies _only_ to server connections, client connections are not\\n         * automatically closed by workers, and disconnect does not wait for them to close\\n         * before exiting.\\n         *\\n         * In a worker, `process.disconnect` exists, but it is not this function;\\n         * it is `disconnect()`.\\n         *\\n         * Because long living server connections may block workers from disconnecting, it\\n         * may be useful to send a message, so application specific actions may be taken to\\n         * close them. It also may be useful to implement a timeout, killing a worker if\\n         * the `'disconnect'` event has not been emitted after some time.\\n         *\\n         * ```js\\n         * if (cluster.isPrimary) {\\n         *   const worker = cluster.fork();\\n         *   let timeout;\\n         *\\n         *   worker.on('listening', (address) => {\\n         *     worker.send('shutdown');\\n         *     worker.disconnect();\\n         *     timeout = setTimeout(() => {\\n         *       worker.kill();\\n         *     }, 2000);\\n         *   });\\n         *\\n         *   worker.on('disconnect', () => {\\n         *     clearTimeout(timeout);\\n         *   });\\n         *\\n         * } else if (cluster.isWorker) {\\n         *   const net = require('net');\\n         *   const server = net.createServer((socket) => {\\n         *     // Connections never end\\n         *   });\\n         *\\n         *   server.listen(8000);\\n         *\\n         *   process.on('message', (msg) => {\\n         *     if (msg === 'shutdown') {\\n         *       // Initiate graceful close of any connections to server\\n         *     }\\n         *   });\\n         * }\\n         * ```\\n         * @since v0.7.7\\n         * @return A reference to `worker`.\\n         */\\n        disconnect(): void;\\n        /**\\n         * This function returns `true` if the worker is connected to its primary via its\\n         * IPC channel, `false` otherwise. A worker is connected to its primary after it\\n         * has been created. It is disconnected after the `'disconnect'` event is emitted.\\n         * @since v0.11.14\\n         */\\n        isConnected(): boolean;\\n        /**\\n         * This function returns `true` if the worker's process has terminated (either\\n         * because of exiting or being signaled). Otherwise, it returns `false`.\\n         *\\n         * ```js\\n         * import cluster from 'cluster';\\n         * import http from 'http';\\n         * import { cpus } from 'os';\\n         * import process from 'process';\\n         *\\n         * const numCPUs = cpus().length;\\n         *\\n         * if (cluster.isPrimary) {\\n         *   console.log(`Primary ${process.pid} is running`);\\n         *\\n         *   // Fork workers.\\n         *   for (let i = 0; i < numCPUs; i++) {\\n         *     cluster.fork();\\n         *   }\\n         *\\n         *   cluster.on('fork', (worker) => {\\n         *     console.log('worker is dead:', worker.isDead());\\n         *   });\\n         *\\n         *   cluster.on('exit', (worker, code, signal) => {\\n         *     console.log('worker is dead:', worker.isDead());\\n         *   });\\n         * } else {\\n         *   // Workers can share any TCP connection. In this case, it is an HTTP server.\\n         *   http.createServer((req, res) => {\\n         *     res.writeHead(200);\\n         *     res.end(`Current process\\\\n ${process.pid}`);\\n         *     process.kill(process.pid);\\n         *   }).listen(8000);\\n         * }\\n         * ```\\n         * @since v0.11.14\\n         */\\n        isDead(): boolean;\\n        /**\\n         * This property is `true` if the worker exited due to `.disconnect()`.\\n         * If the worker exited any other way, it is `false`. If the\\n         * worker has not exited, it is `undefined`.\\n         *\\n         * The boolean `worker.exitedAfterDisconnect` allows distinguishing between\\n         * voluntary and accidental exit, the primary may choose not to respawn a worker\\n         * based on this value.\\n         *\\n         * ```js\\n         * cluster.on('exit', (worker, code, signal) => {\\n         *   if (worker.exitedAfterDisconnect === true) {\\n         *     console.log('Oh, it was just voluntary \u2013 no need to worry');\\n         *   }\\n         * });\\n         *\\n         * // kill worker\\n         * worker.kill();\\n         * ```\\n         * @since v6.0.0\\n         */\\n        exitedAfterDisconnect: boolean;\\n        /**\\n         * events.EventEmitter\\n         *   1. disconnect\\n         *   2. error\\n         *   3. exit\\n         *   4. listening\\n         *   5. message\\n         *   6. online\\n         */\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        addListener(event: 'disconnect', listener: () => void): this;\\n        addListener(event: 'error', listener: (error: Error) => void): this;\\n        addListener(event: 'exit', listener: (code: number, signal: string) => void): this;\\n        addListener(event: 'listening', listener: (address: Address) => void): this;\\n        addListener(event: 'message', listener: (message: any, handle: net.Socket | net.Server) => void): this; // the handle is a net.Socket or net.Server object, or undefined.\\n        addListener(event: 'online', listener: () => void): this;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        emit(event: 'disconnect'): boolean;\\n        emit(event: 'error', error: Error): boolean;\\n        emit(event: 'exit', code: number, signal: string): boolean;\\n        emit(event: 'listening', address: Address): boolean;\\n        emit(event: 'message', message: any, handle: net.Socket | net.Server): boolean;\\n        emit(event: 'online'): boolean;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        on(event: 'disconnect', listener: () => void): this;\\n        on(event: 'error', listener: (error: Error) => void): this;\\n        on(event: 'exit', listener: (code: number, signal: string) => void): this;\\n        on(event: 'listening', listener: (address: Address) => void): this;\\n        on(event: 'message', listener: (message: any, handle: net.Socket | net.Server) => void): this; // the handle is a net.Socket or net.Server object, or undefined.\\n        on(event: 'online', listener: () => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        once(event: 'disconnect', listener: () => void): this;\\n        once(event: 'error', listener: (error: Error) => void): this;\\n        once(event: 'exit', listener: (code: number, signal: string) => void): this;\\n        once(event: 'listening', listener: (address: Address) => void): this;\\n        once(event: 'message', listener: (message: any, handle: net.Socket | net.Server) => void): this; // the handle is a net.Socket or net.Server object, or undefined.\\n        once(event: 'online', listener: () => void): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'disconnect', listener: () => void): this;\\n        prependListener(event: 'error', listener: (error: Error) => void): this;\\n        prependListener(event: 'exit', listener: (code: number, signal: string) => void): this;\\n        prependListener(event: 'listening', listener: (address: Address) => void): this;\\n        prependListener(event: 'message', listener: (message: any, handle: net.Socket | net.Server) => void): this; // the handle is a net.Socket or net.Server object, or undefined.\\n        prependListener(event: 'online', listener: () => void): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'disconnect', listener: () => void): this;\\n        prependOnceListener(event: 'error', listener: (error: Error) => void): this;\\n        prependOnceListener(event: 'exit', listener: (code: number, signal: string) => void): this;\\n        prependOnceListener(event: 'listening', listener: (address: Address) => void): this;\\n        prependOnceListener(event: 'message', listener: (message: any, handle: net.Socket | net.Server) => void): this; // the handle is a net.Socket or net.Server object, or undefined.\\n        prependOnceListener(event: 'online', listener: () => void): this;\\n    }\\n    export interface Cluster extends EventEmitter {\\n        disconnect(callback?: () => void): void;\\n        fork(env?: any): Worker;\\n        /** @deprecated since v16.0.0 - use isPrimary. */\\n        readonly isMaster: boolean;\\n        readonly isPrimary: boolean;\\n        readonly isWorker: boolean;\\n        schedulingPolicy: number;\\n        readonly settings: ClusterSettings;\\n        /** @deprecated since v16.0.0 - use setupPrimary. */\\n        setupMaster(settings?: ClusterSettings): void;\\n        /**\\n         * `setupPrimary` is used to change the default 'fork' behavior. Once called, the settings will be present in cluster.settings.\\n         */\\n        setupPrimary(settings?: ClusterSettings): void;\\n        readonly worker?: Worker | undefined;\\n        readonly workers?: NodeJS.Dict<Worker> | undefined;\\n        readonly SCHED_NONE: number;\\n        readonly SCHED_RR: number;\\n        /**\\n         * events.EventEmitter\\n         *   1. disconnect\\n         *   2. exit\\n         *   3. fork\\n         *   4. listening\\n         *   5. message\\n         *   6. online\\n         *   7. setup\\n         */\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        addListener(event: 'disconnect', listener: (worker: Worker) => void): this;\\n        addListener(event: 'exit', listener: (worker: Worker, code: number, signal: string) => void): this;\\n        addListener(event: 'fork', listener: (worker: Worker) => void): this;\\n        addListener(event: 'listening', listener: (worker: Worker, address: Address) => void): this;\\n        addListener(event: 'message', listener: (worker: Worker, message: any, handle: net.Socket | net.Server) => void): this; // the handle is a net.Socket or net.Server object, or undefined.\\n        addListener(event: 'online', listener: (worker: Worker) => void): this;\\n        addListener(event: 'setup', listener: (settings: ClusterSettings) => void): this;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        emit(event: 'disconnect', worker: Worker): boolean;\\n        emit(event: 'exit', worker: Worker, code: number, signal: string): boolean;\\n        emit(event: 'fork', worker: Worker): boolean;\\n        emit(event: 'listening', worker: Worker, address: Address): boolean;\\n        emit(event: 'message', worker: Worker, message: any, handle: net.Socket | net.Server): boolean;\\n        emit(event: 'online', worker: Worker): boolean;\\n        emit(event: 'setup', settings: ClusterSettings): boolean;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        on(event: 'disconnect', listener: (worker: Worker) => void): this;\\n        on(event: 'exit', listener: (worker: Worker, code: number, signal: string) => void): this;\\n        on(event: 'fork', listener: (worker: Worker) => void): this;\\n        on(event: 'listening', listener: (worker: Worker, address: Address) => void): this;\\n        on(event: 'message', listener: (worker: Worker, message: any, handle: net.Socket | net.Server) => void): this; // the handle is a net.Socket or net.Server object, or undefined.\\n        on(event: 'online', listener: (worker: Worker) => void): this;\\n        on(event: 'setup', listener: (settings: ClusterSettings) => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        once(event: 'disconnect', listener: (worker: Worker) => void): this;\\n        once(event: 'exit', listener: (worker: Worker, code: number, signal: string) => void): this;\\n        once(event: 'fork', listener: (worker: Worker) => void): this;\\n        once(event: 'listening', listener: (worker: Worker, address: Address) => void): this;\\n        once(event: 'message', listener: (worker: Worker, message: any, handle: net.Socket | net.Server) => void): this; // the handle is a net.Socket or net.Server object, or undefined.\\n        once(event: 'online', listener: (worker: Worker) => void): this;\\n        once(event: 'setup', listener: (settings: ClusterSettings) => void): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'disconnect', listener: (worker: Worker) => void): this;\\n        prependListener(event: 'exit', listener: (worker: Worker, code: number, signal: string) => void): this;\\n        prependListener(event: 'fork', listener: (worker: Worker) => void): this;\\n        prependListener(event: 'listening', listener: (worker: Worker, address: Address) => void): this;\\n        // the handle is a net.Socket or net.Server object, or undefined.\\n        prependListener(event: 'message', listener: (worker: Worker, message: any, handle?: net.Socket | net.Server) => void): this;\\n        prependListener(event: 'online', listener: (worker: Worker) => void): this;\\n        prependListener(event: 'setup', listener: (settings: ClusterSettings) => void): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'disconnect', listener: (worker: Worker) => void): this;\\n        prependOnceListener(event: 'exit', listener: (worker: Worker, code: number, signal: string) => void): this;\\n        prependOnceListener(event: 'fork', listener: (worker: Worker) => void): this;\\n        prependOnceListener(event: 'listening', listener: (worker: Worker, address: Address) => void): this;\\n        // the handle is a net.Socket or net.Server object, or undefined.\\n        prependOnceListener(event: 'message', listener: (worker: Worker, message: any, handle: net.Socket | net.Server) => void): this;\\n        prependOnceListener(event: 'online', listener: (worker: Worker) => void): this;\\n        prependOnceListener(event: 'setup', listener: (settings: ClusterSettings) => void): this;\\n    }\\n    const cluster: Cluster;\\n    export default cluster;\\n}\\ndeclare module 'node:cluster' {\\n    export * from 'cluster';\\n    export { default as default } from 'cluster';\\n}\\n\",\"file:///node_modules/@types/node/console.d.ts\":\"/**\\n * The `console` module provides a simple debugging console that is similar to the\\n * JavaScript console mechanism provided by web browsers.\\n *\\n * The module exports two specific components:\\n *\\n * * A `Console` class with methods such as `console.log()`, `console.error()` and`console.warn()` that can be used to write to any Node.js stream.\\n * * A global `console` instance configured to write to `process.stdout` and `process.stderr`. The global `console` can be used without calling`require('console')`.\\n *\\n * _**Warning**_: The global console object's methods are neither consistently\\n * synchronous like the browser APIs they resemble, nor are they consistently\\n * asynchronous like all other Node.js streams. See the `note on process I/O` for\\n * more information.\\n *\\n * Example using the global `console`:\\n *\\n * ```js\\n * console.log('hello world');\\n * // Prints: hello world, to stdout\\n * console.log('hello %s', 'world');\\n * // Prints: hello world, to stdout\\n * console.error(new Error('Whoops, something bad happened'));\\n * // Prints error message and stack trace to stderr:\\n * //   Error: Whoops, something bad happened\\n * //     at [eval]:5:15\\n * //     at Script.runInThisContext (node:vm:132:18)\\n * //     at Object.runInThisContext (node:vm:309:38)\\n * //     at node:internal/process/execution:77:19\\n * //     at [eval]-wrapper:6:22\\n * //     at evalScript (node:internal/process/execution:76:60)\\n * //     at node:internal/main/eval_string:23:3\\n *\\n * const name = 'Will Robinson';\\n * console.warn(`Danger ${name}! Danger!`);\\n * // Prints: Danger Will Robinson! Danger!, to stderr\\n * ```\\n *\\n * Example using the `Console` class:\\n *\\n * ```js\\n * const out = getStreamSomehow();\\n * const err = getStreamSomehow();\\n * const myConsole = new console.Console(out, err);\\n *\\n * myConsole.log('hello world');\\n * // Prints: hello world, to out\\n * myConsole.log('hello %s', 'world');\\n * // Prints: hello world, to out\\n * myConsole.error(new Error('Whoops, something bad happened'));\\n * // Prints: [Error: Whoops, something bad happened], to err\\n *\\n * const name = 'Will Robinson';\\n * myConsole.warn(`Danger ${name}! Danger!`);\\n * // Prints: Danger Will Robinson! Danger!, to err\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/console.js)\\n */\\ndeclare module 'console' {\\n    import console = require('node:console');\\n    export = console;\\n}\\ndeclare module 'node:console' {\\n    import { InspectOptions } from 'node:util';\\n    global {\\n        // This needs to be global to avoid TS2403 in case lib.dom.d.ts is present in the same build\\n        interface Console {\\n            Console: console.ConsoleConstructor;\\n            /**\\n             * `console.assert()` writes a message if `value` is [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) or omitted. It only\\n             * writes a message and does not otherwise affect execution. The output always\\n             * starts with `\\\"Assertion failed\\\"`. If provided, `message` is formatted using `util.format()`.\\n             *\\n             * If `value` is [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy), nothing happens.\\n             *\\n             * ```js\\n             * console.assert(true, 'does nothing');\\n             *\\n             * console.assert(false, 'Whoops %s work', 'didn\\\\'t');\\n             * // Assertion failed: Whoops didn't work\\n             *\\n             * console.assert();\\n             * // Assertion failed\\n             * ```\\n             * @since v0.1.101\\n             * @param value The value tested for being truthy.\\n             * @param message All arguments besides `value` are used as error message.\\n             */\\n            assert(value: any, message?: string, ...optionalParams: any[]): void;\\n            /**\\n             * When `stdout` is a TTY, calling `console.clear()` will attempt to clear the\\n             * TTY. When `stdout` is not a TTY, this method does nothing.\\n             *\\n             * The specific operation of `console.clear()` can vary across operating systems\\n             * and terminal types. For most Linux operating systems, `console.clear()`operates similarly to the `clear` shell command. On Windows, `console.clear()`will clear only the output in the\\n             * current terminal viewport for the Node.js\\n             * binary.\\n             * @since v8.3.0\\n             */\\n            clear(): void;\\n            /**\\n             * Maintains an internal counter specific to `label` and outputs to `stdout` the\\n             * number of times `console.count()` has been called with the given `label`.\\n             *\\n             * ```js\\n             * > console.count()\\n             * default: 1\\n             * undefined\\n             * > console.count('default')\\n             * default: 2\\n             * undefined\\n             * > console.count('abc')\\n             * abc: 1\\n             * undefined\\n             * > console.count('xyz')\\n             * xyz: 1\\n             * undefined\\n             * > console.count('abc')\\n             * abc: 2\\n             * undefined\\n             * > console.count()\\n             * default: 3\\n             * undefined\\n             * >\\n             * ```\\n             * @since v8.3.0\\n             * @param label The display label for the counter.\\n             */\\n            count(label?: string): void;\\n            /**\\n             * Resets the internal counter specific to `label`.\\n             *\\n             * ```js\\n             * > console.count('abc');\\n             * abc: 1\\n             * undefined\\n             * > console.countReset('abc');\\n             * undefined\\n             * > console.count('abc');\\n             * abc: 1\\n             * undefined\\n             * >\\n             * ```\\n             * @since v8.3.0\\n             * @param label The display label for the counter.\\n             */\\n            countReset(label?: string): void;\\n            /**\\n             * The `console.debug()` function is an alias for {@link log}.\\n             * @since v8.0.0\\n             */\\n            debug(message?: any, ...optionalParams: any[]): void;\\n            /**\\n             * Uses `util.inspect()` on `obj` and prints the resulting string to `stdout`.\\n             * This function bypasses any custom `inspect()` function defined on `obj`.\\n             * @since v0.1.101\\n             */\\n            dir(obj: any, options?: InspectOptions): void;\\n            /**\\n             * This method calls `console.log()` passing it the arguments received.\\n             * This method does not produce any XML formatting.\\n             * @since v8.0.0\\n             */\\n            dirxml(...data: any[]): void;\\n            /**\\n             * Prints to `stderr` with newline. Multiple arguments can be passed, with the\\n             * first used as the primary message and all additional used as substitution\\n             * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n             *\\n             * ```js\\n             * const code = 5;\\n             * console.error('error #%d', code);\\n             * // Prints: error #5, to stderr\\n             * console.error('error', code);\\n             * // Prints: error 5, to stderr\\n             * ```\\n             *\\n             * If formatting elements (e.g. `%d`) are not found in the first string then `util.inspect()` is called on each argument and the resulting string\\n             * values are concatenated. See `util.format()` for more information.\\n             * @since v0.1.100\\n             */\\n            error(message?: any, ...optionalParams: any[]): void;\\n            /**\\n             * Increases indentation of subsequent lines by spaces for `groupIndentation`length.\\n             *\\n             * If one or more `label`s are provided, those are printed first without the\\n             * additional indentation.\\n             * @since v8.5.0\\n             */\\n            group(...label: any[]): void;\\n            /**\\n             * An alias for {@link group}.\\n             * @since v8.5.0\\n             */\\n            groupCollapsed(...label: any[]): void;\\n            /**\\n             * Decreases indentation of subsequent lines by spaces for `groupIndentation`length.\\n             * @since v8.5.0\\n             */\\n            groupEnd(): void;\\n            /**\\n             * The `console.info()` function is an alias for {@link log}.\\n             * @since v0.1.100\\n             */\\n            info(message?: any, ...optionalParams: any[]): void;\\n            /**\\n             * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n             * first used as the primary message and all additional used as substitution\\n             * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n             *\\n             * ```js\\n             * const count = 5;\\n             * console.log('count: %d', count);\\n             * // Prints: count: 5, to stdout\\n             * console.log('count:', count);\\n             * // Prints: count: 5, to stdout\\n             * ```\\n             *\\n             * See `util.format()` for more information.\\n             * @since v0.1.100\\n             */\\n            log(message?: any, ...optionalParams: any[]): void;\\n            /**\\n             * Try to construct a table with the columns of the properties of `tabularData`(or use `properties`) and rows of `tabularData` and log it. Falls back to just\\n             * logging the argument if it can\u2019t be parsed as tabular.\\n             *\\n             * ```js\\n             * // These can't be parsed as tabular data\\n             * console.table(Symbol());\\n             * // Symbol()\\n             *\\n             * console.table(undefined);\\n             * // undefined\\n             *\\n             * console.table([{ a: 1, b: 'Y' }, { a: 'Z', b: 2 }]);\\n             * // \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\\n             * // \u2502 (index) \u2502  a  \u2502  b  \u2502\\n             * // \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\\n             * // \u2502    0    \u2502  1  \u2502 'Y' \u2502\\n             * // \u2502    1    \u2502 'Z' \u2502  2  \u2502\\n             * // \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\\n             *\\n             * console.table([{ a: 1, b: 'Y' }, { a: 'Z', b: 2 }], ['a']);\\n             * // \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\\n             * // \u2502 (index) \u2502  a  \u2502\\n             * // \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\\n             * // \u2502    0    \u2502  1  \u2502\\n             * // \u2502    1    \u2502 'Z' \u2502\\n             * // \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\\n             * ```\\n             * @since v10.0.0\\n             * @param properties Alternate properties for constructing the table.\\n             */\\n            table(tabularData: any, properties?: ReadonlyArray<string>): void;\\n            /**\\n             * Starts a timer that can be used to compute the duration of an operation. Timers\\n             * are identified by a unique `label`. Use the same `label` when calling {@link timeEnd} to stop the timer and output the elapsed time in\\n             * suitable time units to `stdout`. For example, if the elapsed\\n             * time is 3869ms, `console.timeEnd()` displays \\\"3.869s\\\".\\n             * @since v0.1.104\\n             */\\n            time(label?: string): void;\\n            /**\\n             * Stops a timer that was previously started by calling {@link time} and\\n             * prints the result to `stdout`:\\n             *\\n             * ```js\\n             * console.time('100-elements');\\n             * for (let i = 0; i < 100; i++) {}\\n             * console.timeEnd('100-elements');\\n             * // prints 100-elements: 225.438ms\\n             * ```\\n             * @since v0.1.104\\n             */\\n            timeEnd(label?: string): void;\\n            /**\\n             * For a timer that was previously started by calling {@link time}, prints\\n             * the elapsed time and other `data` arguments to `stdout`:\\n             *\\n             * ```js\\n             * console.time('process');\\n             * const value = expensiveProcess1(); // Returns 42\\n             * console.timeLog('process', value);\\n             * // Prints \\\"process: 365.227ms 42\\\".\\n             * doExpensiveProcess2(value);\\n             * console.timeEnd('process');\\n             * ```\\n             * @since v10.7.0\\n             */\\n            timeLog(label?: string, ...data: any[]): void;\\n            /**\\n             * Prints to `stderr` the string `'Trace: '`, followed by the `util.format()` formatted message and stack trace to the current position in the code.\\n             *\\n             * ```js\\n             * console.trace('Show me');\\n             * // Prints: (stack trace will vary based on where trace is called)\\n             * //  Trace: Show me\\n             * //    at repl:2:9\\n             * //    at REPLServer.defaultEval (repl.js:248:27)\\n             * //    at bound (domain.js:287:14)\\n             * //    at REPLServer.runBound [as eval] (domain.js:300:12)\\n             * //    at REPLServer.<anonymous> (repl.js:412:12)\\n             * //    at emitOne (events.js:82:20)\\n             * //    at REPLServer.emit (events.js:169:7)\\n             * //    at REPLServer.Interface._onLine (readline.js:210:10)\\n             * //    at REPLServer.Interface._line (readline.js:549:8)\\n             * //    at REPLServer.Interface._ttyWrite (readline.js:826:14)\\n             * ```\\n             * @since v0.1.104\\n             */\\n            trace(message?: any, ...optionalParams: any[]): void;\\n            /**\\n             * The `console.warn()` function is an alias for {@link error}.\\n             * @since v0.1.100\\n             */\\n            warn(message?: any, ...optionalParams: any[]): void;\\n            // --- Inspector mode only ---\\n            /**\\n             * This method does not display anything unless used in the inspector.\\n             *  Starts a JavaScript CPU profile with an optional label.\\n             */\\n            profile(label?: string): void;\\n            /**\\n             * This method does not display anything unless used in the inspector.\\n             *  Stops the current JavaScript CPU profiling session if one has been started and prints the report to the Profiles panel of the inspector.\\n             */\\n            profileEnd(label?: string): void;\\n            /**\\n             * This method does not display anything unless used in the inspector.\\n             *  Adds an event with the label `label` to the Timeline panel of the inspector.\\n             */\\n            timeStamp(label?: string): void;\\n        }\\n        /**\\n         * The `console` module provides a simple debugging console that is similar to the\\n         * JavaScript console mechanism provided by web browsers.\\n         *\\n         * The module exports two specific components:\\n         *\\n         * * A `Console` class with methods such as `console.log()`, `console.error()` and`console.warn()` that can be used to write to any Node.js stream.\\n         * * A global `console` instance configured to write to `process.stdout` and `process.stderr`. The global `console` can be used without calling`require('console')`.\\n         *\\n         * _**Warning**_: The global console object's methods are neither consistently\\n         * synchronous like the browser APIs they resemble, nor are they consistently\\n         * asynchronous like all other Node.js streams. See the `note on process I/O` for\\n         * more information.\\n         *\\n         * Example using the global `console`:\\n         *\\n         * ```js\\n         * console.log('hello world');\\n         * // Prints: hello world, to stdout\\n         * console.log('hello %s', 'world');\\n         * // Prints: hello world, to stdout\\n         * console.error(new Error('Whoops, something bad happened'));\\n         * // Prints error message and stack trace to stderr:\\n         * //   Error: Whoops, something bad happened\\n         * //     at [eval]:5:15\\n         * //     at Script.runInThisContext (node:vm:132:18)\\n         * //     at Object.runInThisContext (node:vm:309:38)\\n         * //     at node:internal/process/execution:77:19\\n         * //     at [eval]-wrapper:6:22\\n         * //     at evalScript (node:internal/process/execution:76:60)\\n         * //     at node:internal/main/eval_string:23:3\\n         *\\n         * const name = 'Will Robinson';\\n         * console.warn(`Danger ${name}! Danger!`);\\n         * // Prints: Danger Will Robinson! Danger!, to stderr\\n         * ```\\n         *\\n         * Example using the `Console` class:\\n         *\\n         * ```js\\n         * const out = getStreamSomehow();\\n         * const err = getStreamSomehow();\\n         * const myConsole = new console.Console(out, err);\\n         *\\n         * myConsole.log('hello world');\\n         * // Prints: hello world, to out\\n         * myConsole.log('hello %s', 'world');\\n         * // Prints: hello world, to out\\n         * myConsole.error(new Error('Whoops, something bad happened'));\\n         * // Prints: [Error: Whoops, something bad happened], to err\\n         *\\n         * const name = 'Will Robinson';\\n         * myConsole.warn(`Danger ${name}! Danger!`);\\n         * // Prints: Danger Will Robinson! Danger!, to err\\n         * ```\\n         * @see [source](https://github.com/nodejs/node/blob/v16.4.2/lib/console.js)\\n         */\\n        namespace console {\\n            interface ConsoleConstructorOptions {\\n                stdout: NodeJS.WritableStream;\\n                stderr?: NodeJS.WritableStream | undefined;\\n                ignoreErrors?: boolean | undefined;\\n                colorMode?: boolean | 'auto' | undefined;\\n                inspectOptions?: InspectOptions | undefined;\\n                /**\\n                 * Set group indentation\\n                 * @default 2\\n                 */\\n                groupIndentation?: number | undefined;\\n            }\\n            interface ConsoleConstructor {\\n                prototype: Console;\\n                new (stdout: NodeJS.WritableStream, stderr?: NodeJS.WritableStream, ignoreErrors?: boolean): Console;\\n                new (options: ConsoleConstructorOptions): Console;\\n            }\\n        }\\n        var console: Console;\\n    }\\n    export = globalThis.console;\\n}\\n\",\"file:///node_modules/@types/node/constants.d.ts\":\"/** @deprecated since v6.3.0 - use constants property exposed by the relevant module instead. */\\ndeclare module 'constants' {\\n    import { constants as osConstants, SignalConstants } from 'node:os';\\n    import { constants as cryptoConstants } from 'node:crypto';\\n    import { constants as fsConstants } from 'node:fs';\\n\\n    const exp: typeof osConstants.errno &\\n        typeof osConstants.priority &\\n        SignalConstants &\\n        typeof cryptoConstants &\\n        typeof fsConstants;\\n    export = exp;\\n}\\n\\ndeclare module 'node:constants' {\\n    import constants = require('constants');\\n    export = constants;\\n}\\n\",\"file:///node_modules/@types/node/crypto.d.ts\":\"/**\\n * The `crypto` module provides cryptographic functionality that includes a set of\\n * wrappers for OpenSSL's hash, HMAC, cipher, decipher, sign, and verify functions.\\n *\\n * ```js\\n * const { createHmac } = await import('crypto');\\n *\\n * const secret = 'abcdefg';\\n * const hash = createHmac('sha256', secret)\\n *                .update('I love cupcakes')\\n *                .digest('hex');\\n * console.log(hash);\\n * // Prints:\\n * //   c0fa1bc00531bd78ef38c628449c5102aeabd49b5dc3a2a516ea6ea959d6658e\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/crypto.js)\\n */\\ndeclare module 'crypto' {\\n    import * as stream from 'node:stream';\\n    import { PeerCertificate } from 'node:tls';\\n    /**\\n     * SPKAC is a Certificate Signing Request mechanism originally implemented by\\n     * Netscape and was specified formally as part of [HTML5's `keygen` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/keygen).\\n     *\\n     * `<keygen>` is deprecated since [HTML 5.2](https://www.w3.org/TR/html52/changes.html#features-removed) and new projects\\n     * should not use this element anymore.\\n     *\\n     * The `crypto` module provides the `Certificate` class for working with SPKAC\\n     * data. The most common usage is handling output generated by the HTML5`<keygen>` element. Node.js uses [OpenSSL's SPKAC\\n     * implementation](https://www.openssl.org/docs/man1.1.0/apps/openssl-spkac.html) internally.\\n     * @since v0.11.8\\n     */\\n    class Certificate {\\n        /**\\n         * ```js\\n         * const { Certificate } = await import('crypto');\\n         * const spkac = getSpkacSomehow();\\n         * const challenge = Certificate.exportChallenge(spkac);\\n         * console.log(challenge.toString('utf8'));\\n         * // Prints: the challenge as a UTF8 string\\n         * ```\\n         * @since v9.0.0\\n         * @param encoding The `encoding` of the `spkac` string.\\n         * @return The challenge component of the `spkac` data structure, which includes a public key and a challenge.\\n         */\\n        static exportChallenge(spkac: BinaryLike): Buffer;\\n        /**\\n         * ```js\\n         * const { Certificate } = await import('crypto');\\n         * const spkac = getSpkacSomehow();\\n         * const publicKey = Certificate.exportPublicKey(spkac);\\n         * console.log(publicKey);\\n         * // Prints: the public key as <Buffer ...>\\n         * ```\\n         * @since v9.0.0\\n         * @param encoding The `encoding` of the `spkac` string.\\n         * @return The public key component of the `spkac` data structure, which includes a public key and a challenge.\\n         */\\n        static exportPublicKey(spkac: BinaryLike, encoding?: string): Buffer;\\n        /**\\n         * ```js\\n         * import { Buffer } from 'buffer';\\n         * const { Certificate } = await import('crypto');\\n         *\\n         * const spkac = getSpkacSomehow();\\n         * console.log(Certificate.verifySpkac(Buffer.from(spkac)));\\n         * // Prints: true or false\\n         * ```\\n         * @since v9.0.0\\n         * @param encoding The `encoding` of the `spkac` string.\\n         * @return `true` if the given `spkac` data structure is valid, `false` otherwise.\\n         */\\n        static verifySpkac(spkac: NodeJS.ArrayBufferView): boolean;\\n        /**\\n         * @deprecated\\n         * @param spkac\\n         * @returns The challenge component of the `spkac` data structure,\\n         * which includes a public key and a challenge.\\n         */\\n        exportChallenge(spkac: BinaryLike): Buffer;\\n        /**\\n         * @deprecated\\n         * @param spkac\\n         * @param encoding The encoding of the spkac string.\\n         * @returns The public key component of the `spkac` data structure,\\n         * which includes a public key and a challenge.\\n         */\\n        exportPublicKey(spkac: BinaryLike, encoding?: string): Buffer;\\n        /**\\n         * @deprecated\\n         * @param spkac\\n         * @returns `true` if the given `spkac` data structure is valid,\\n         * `false` otherwise.\\n         */\\n        verifySpkac(spkac: NodeJS.ArrayBufferView): boolean;\\n    }\\n    namespace constants {\\n        // https://nodejs.org/dist/latest-v10.x/docs/api/crypto.html#crypto_crypto_constants\\n        const OPENSSL_VERSION_NUMBER: number;\\n        /** Applies multiple bug workarounds within OpenSSL. See https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html for detail. */\\n        const SSL_OP_ALL: number;\\n        /** Allows legacy insecure renegotiation between OpenSSL and unpatched clients or servers. See https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html. */\\n        const SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION: number;\\n        /** Attempts to use the server's preferences instead of the client's when selecting a cipher. See https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html. */\\n        const SSL_OP_CIPHER_SERVER_PREFERENCE: number;\\n        /** Instructs OpenSSL to use Cisco's \\\"speshul\\\" version of DTLS_BAD_VER. */\\n        const SSL_OP_CISCO_ANYCONNECT: number;\\n        /** Instructs OpenSSL to turn on cookie exchange. */\\n        const SSL_OP_COOKIE_EXCHANGE: number;\\n        /** Instructs OpenSSL to add server-hello extension from an early version of the cryptopro draft. */\\n        const SSL_OP_CRYPTOPRO_TLSEXT_BUG: number;\\n        /** Instructs OpenSSL to disable a SSL 3.0/TLS 1.0 vulnerability workaround added in OpenSSL 0.9.6d. */\\n        const SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS: number;\\n        /** Instructs OpenSSL to always use the tmp_rsa key when performing RSA operations. */\\n        const SSL_OP_EPHEMERAL_RSA: number;\\n        /** Allows initial connection to servers that do not support RI. */\\n        const SSL_OP_LEGACY_SERVER_CONNECT: number;\\n        const SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER: number;\\n        const SSL_OP_MICROSOFT_SESS_ID_BUG: number;\\n        /** Instructs OpenSSL to disable the workaround for a man-in-the-middle protocol-version vulnerability in the SSL 2.0 server implementation. */\\n        const SSL_OP_MSIE_SSLV2_RSA_PADDING: number;\\n        const SSL_OP_NETSCAPE_CA_DN_BUG: number;\\n        const SSL_OP_NETSCAPE_CHALLENGE_BUG: number;\\n        const SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG: number;\\n        const SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG: number;\\n        /** Instructs OpenSSL to disable support for SSL/TLS compression. */\\n        const SSL_OP_NO_COMPRESSION: number;\\n        const SSL_OP_NO_QUERY_MTU: number;\\n        /** Instructs OpenSSL to always start a new session when performing renegotiation. */\\n        const SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION: number;\\n        const SSL_OP_NO_SSLv2: number;\\n        const SSL_OP_NO_SSLv3: number;\\n        const SSL_OP_NO_TICKET: number;\\n        const SSL_OP_NO_TLSv1: number;\\n        const SSL_OP_NO_TLSv1_1: number;\\n        const SSL_OP_NO_TLSv1_2: number;\\n        const SSL_OP_PKCS1_CHECK_1: number;\\n        const SSL_OP_PKCS1_CHECK_2: number;\\n        /** Instructs OpenSSL to always create a new key when using temporary/ephemeral DH parameters. */\\n        const SSL_OP_SINGLE_DH_USE: number;\\n        /** Instructs OpenSSL to always create a new key when using temporary/ephemeral ECDH parameters. */\\n        const SSL_OP_SINGLE_ECDH_USE: number;\\n        const SSL_OP_SSLEAY_080_CLIENT_DH_BUG: number;\\n        const SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG: number;\\n        const SSL_OP_TLS_BLOCK_PADDING_BUG: number;\\n        const SSL_OP_TLS_D5_BUG: number;\\n        /** Instructs OpenSSL to disable version rollback attack detection. */\\n        const SSL_OP_TLS_ROLLBACK_BUG: number;\\n        const ENGINE_METHOD_RSA: number;\\n        const ENGINE_METHOD_DSA: number;\\n        const ENGINE_METHOD_DH: number;\\n        const ENGINE_METHOD_RAND: number;\\n        const ENGINE_METHOD_EC: number;\\n        const ENGINE_METHOD_CIPHERS: number;\\n        const ENGINE_METHOD_DIGESTS: number;\\n        const ENGINE_METHOD_PKEY_METHS: number;\\n        const ENGINE_METHOD_PKEY_ASN1_METHS: number;\\n        const ENGINE_METHOD_ALL: number;\\n        const ENGINE_METHOD_NONE: number;\\n        const DH_CHECK_P_NOT_SAFE_PRIME: number;\\n        const DH_CHECK_P_NOT_PRIME: number;\\n        const DH_UNABLE_TO_CHECK_GENERATOR: number;\\n        const DH_NOT_SUITABLE_GENERATOR: number;\\n        const ALPN_ENABLED: number;\\n        const RSA_PKCS1_PADDING: number;\\n        const RSA_SSLV23_PADDING: number;\\n        const RSA_NO_PADDING: number;\\n        const RSA_PKCS1_OAEP_PADDING: number;\\n        const RSA_X931_PADDING: number;\\n        const RSA_PKCS1_PSS_PADDING: number;\\n        /** Sets the salt length for RSA_PKCS1_PSS_PADDING to the digest size when signing or verifying. */\\n        const RSA_PSS_SALTLEN_DIGEST: number;\\n        /** Sets the salt length for RSA_PKCS1_PSS_PADDING to the maximum permissible value when signing data. */\\n        const RSA_PSS_SALTLEN_MAX_SIGN: number;\\n        /** Causes the salt length for RSA_PKCS1_PSS_PADDING to be determined automatically when verifying a signature. */\\n        const RSA_PSS_SALTLEN_AUTO: number;\\n        const POINT_CONVERSION_COMPRESSED: number;\\n        const POINT_CONVERSION_UNCOMPRESSED: number;\\n        const POINT_CONVERSION_HYBRID: number;\\n        /** Specifies the built-in default cipher list used by Node.js (colon-separated values). */\\n        const defaultCoreCipherList: string;\\n        /** Specifies the active default cipher list used by the current Node.js process  (colon-separated values). */\\n        const defaultCipherList: string;\\n    }\\n    interface HashOptions extends stream.TransformOptions {\\n        /**\\n         * For XOF hash functions such as `shake256`, the\\n         * outputLength option can be used to specify the desired output length in bytes.\\n         */\\n        outputLength?: number | undefined;\\n    }\\n    /** @deprecated since v10.0.0 */\\n    const fips: boolean;\\n    /**\\n     * Creates and returns a `Hash` object that can be used to generate hash digests\\n     * using the given `algorithm`. Optional `options` argument controls stream\\n     * behavior. For XOF hash functions such as `'shake256'`, the `outputLength` option\\n     * can be used to specify the desired output length in bytes.\\n     *\\n     * The `algorithm` is dependent on the available algorithms supported by the\\n     * version of OpenSSL on the platform. Examples are `'sha256'`, `'sha512'`, etc.\\n     * On recent releases of OpenSSL, `openssl list -digest-algorithms` will\\n     * display the available digest algorithms.\\n     *\\n     * Example: generating the sha256 sum of a file\\n     *\\n     * ```js\\n     * import {\\n     *   createReadStream\\n     * } from 'fs';\\n     * import { argv } from 'process';\\n     * const {\\n     *   createHash\\n     * } = await import('crypto');\\n     *\\n     * const filename = argv[2];\\n     *\\n     * const hash = createHash('sha256');\\n     *\\n     * const input = createReadStream(filename);\\n     * input.on('readable', () => {\\n     *   // Only one element is going to be produced by the\\n     *   // hash stream.\\n     *   const data = input.read();\\n     *   if (data)\\n     *     hash.update(data);\\n     *   else {\\n     *     console.log(`${hash.digest('hex')} ${filename}`);\\n     *   }\\n     * });\\n     * ```\\n     * @since v0.1.92\\n     * @param options `stream.transform` options\\n     */\\n    function createHash(algorithm: string, options?: HashOptions): Hash;\\n    /**\\n     * Creates and returns an `Hmac` object that uses the given `algorithm` and `key`.\\n     * Optional `options` argument controls stream behavior.\\n     *\\n     * The `algorithm` is dependent on the available algorithms supported by the\\n     * version of OpenSSL on the platform. Examples are `'sha256'`, `'sha512'`, etc.\\n     * On recent releases of OpenSSL, `openssl list -digest-algorithms` will\\n     * display the available digest algorithms.\\n     *\\n     * The `key` is the HMAC key used to generate the cryptographic HMAC hash. If it is\\n     * a `KeyObject`, its type must be `secret`.\\n     *\\n     * Example: generating the sha256 HMAC of a file\\n     *\\n     * ```js\\n     * import {\\n     *   createReadStream\\n     * } from 'fs';\\n     * import { argv } from 'process';\\n     * const {\\n     *   createHmac\\n     * } = await import('crypto');\\n     *\\n     * const filename = argv[2];\\n     *\\n     * const hmac = createHmac('sha256', 'a secret');\\n     *\\n     * const input = createReadStream(filename);\\n     * input.on('readable', () => {\\n     *   // Only one element is going to be produced by the\\n     *   // hash stream.\\n     *   const data = input.read();\\n     *   if (data)\\n     *     hmac.update(data);\\n     *   else {\\n     *     console.log(`${hmac.digest('hex')} ${filename}`);\\n     *   }\\n     * });\\n     * ```\\n     * @since v0.1.94\\n     * @param options `stream.transform` options\\n     */\\n    function createHmac(algorithm: string, key: BinaryLike | KeyObject, options?: stream.TransformOptions): Hmac;\\n    // https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings\\n    type BinaryToTextEncoding = 'base64' | 'base64url' | 'hex' | 'binary';\\n    type CharacterEncoding = 'utf8' | 'utf-8' | 'utf16le' | 'latin1';\\n    type LegacyCharacterEncoding = 'ascii' | 'binary' | 'ucs2' | 'ucs-2';\\n    type Encoding = BinaryToTextEncoding | CharacterEncoding | LegacyCharacterEncoding;\\n    type ECDHKeyFormat = 'compressed' | 'uncompressed' | 'hybrid';\\n    /**\\n     * The `Hash` class is a utility for creating hash digests of data. It can be\\n     * used in one of two ways:\\n     *\\n     * * As a `stream` that is both readable and writable, where data is written\\n     * to produce a computed hash digest on the readable side, or\\n     * * Using the `hash.update()` and `hash.digest()` methods to produce the\\n     * computed hash.\\n     *\\n     * The {@link createHash} method is used to create `Hash` instances. `Hash`objects are not to be created directly using the `new` keyword.\\n     *\\n     * Example: Using `Hash` objects as streams:\\n     *\\n     * ```js\\n     * const {\\n     *   createHash\\n     * } = await import('crypto');\\n     *\\n     * const hash = createHash('sha256');\\n     *\\n     * hash.on('readable', () => {\\n     *   // Only one element is going to be produced by the\\n     *   // hash stream.\\n     *   const data = hash.read();\\n     *   if (data) {\\n     *     console.log(data.toString('hex'));\\n     *     // Prints:\\n     *     //   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50\\n     *   }\\n     * });\\n     *\\n     * hash.write('some data to hash');\\n     * hash.end();\\n     * ```\\n     *\\n     * Example: Using `Hash` and piped streams:\\n     *\\n     * ```js\\n     * import { createReadStream } from 'fs';\\n     * import { stdout } from 'process';\\n     * const { createHash } = await import('crypto');\\n     *\\n     * const hash = createHash('sha256');\\n     *\\n     * const input = createReadStream('test.js');\\n     * input.pipe(hash).setEncoding('hex').pipe(stdout);\\n     * ```\\n     *\\n     * Example: Using the `hash.update()` and `hash.digest()` methods:\\n     *\\n     * ```js\\n     * const {\\n     *   createHash\\n     * } = await import('crypto');\\n     *\\n     * const hash = createHash('sha256');\\n     *\\n     * hash.update('some data to hash');\\n     * console.log(hash.digest('hex'));\\n     * // Prints:\\n     * //   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50\\n     * ```\\n     * @since v0.1.92\\n     */\\n    class Hash extends stream.Transform {\\n        private constructor();\\n        /**\\n         * Creates a new `Hash` object that contains a deep copy of the internal state\\n         * of the current `Hash` object.\\n         *\\n         * The optional `options` argument controls stream behavior. For XOF hash\\n         * functions such as `'shake256'`, the `outputLength` option can be used to\\n         * specify the desired output length in bytes.\\n         *\\n         * An error is thrown when an attempt is made to copy the `Hash` object after\\n         * its `hash.digest()` method has been called.\\n         *\\n         * ```js\\n         * // Calculate a rolling hash.\\n         * const {\\n         *   createHash\\n         * } = await import('crypto');\\n         *\\n         * const hash = createHash('sha256');\\n         *\\n         * hash.update('one');\\n         * console.log(hash.copy().digest('hex'));\\n         *\\n         * hash.update('two');\\n         * console.log(hash.copy().digest('hex'));\\n         *\\n         * hash.update('three');\\n         * console.log(hash.copy().digest('hex'));\\n         *\\n         * // Etc.\\n         * ```\\n         * @since v13.1.0\\n         * @param options `stream.transform` options\\n         */\\n        copy(options?: stream.TransformOptions): Hash;\\n        /**\\n         * Updates the hash content with the given `data`, the encoding of which\\n         * is given in `inputEncoding`.\\n         * If `encoding` is not provided, and the `data` is a string, an\\n         * encoding of `'utf8'` is enforced. If `data` is a `Buffer`, `TypedArray`, or`DataView`, then `inputEncoding` is ignored.\\n         *\\n         * This can be called many times with new data as it is streamed.\\n         * @since v0.1.92\\n         * @param inputEncoding The `encoding` of the `data` string.\\n         */\\n        update(data: BinaryLike): Hash;\\n        update(data: string, inputEncoding: Encoding): Hash;\\n        /**\\n         * Calculates the digest of all of the data passed to be hashed (using the `hash.update()` method).\\n         * If `encoding` is provided a string will be returned; otherwise\\n         * a `Buffer` is returned.\\n         *\\n         * The `Hash` object can not be used again after `hash.digest()` method has been\\n         * called. Multiple calls will cause an error to be thrown.\\n         * @since v0.1.92\\n         * @param encoding The `encoding` of the return value.\\n         */\\n        digest(): Buffer;\\n        digest(encoding: BinaryToTextEncoding): string;\\n    }\\n    /**\\n     * The `Hmac` class is a utility for creating cryptographic HMAC digests. It can\\n     * be used in one of two ways:\\n     *\\n     * * As a `stream` that is both readable and writable, where data is written\\n     * to produce a computed HMAC digest on the readable side, or\\n     * * Using the `hmac.update()` and `hmac.digest()` methods to produce the\\n     * computed HMAC digest.\\n     *\\n     * The {@link createHmac} method is used to create `Hmac` instances. `Hmac`objects are not to be created directly using the `new` keyword.\\n     *\\n     * Example: Using `Hmac` objects as streams:\\n     *\\n     * ```js\\n     * const {\\n     *   createHmac\\n     * } = await import('crypto');\\n     *\\n     * const hmac = createHmac('sha256', 'a secret');\\n     *\\n     * hmac.on('readable', () => {\\n     *   // Only one element is going to be produced by the\\n     *   // hash stream.\\n     *   const data = hmac.read();\\n     *   if (data) {\\n     *     console.log(data.toString('hex'));\\n     *     // Prints:\\n     *     //   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e\\n     *   }\\n     * });\\n     *\\n     * hmac.write('some data to hash');\\n     * hmac.end();\\n     * ```\\n     *\\n     * Example: Using `Hmac` and piped streams:\\n     *\\n     * ```js\\n     * import { createReadStream } from 'fs';\\n     * import { stdout } from 'process';\\n     * const {\\n     *   createHmac\\n     * } = await import('crypto');\\n     *\\n     * const hmac = createHmac('sha256', 'a secret');\\n     *\\n     * const input = createReadStream('test.js');\\n     * input.pipe(hmac).pipe(stdout);\\n     * ```\\n     *\\n     * Example: Using the `hmac.update()` and `hmac.digest()` methods:\\n     *\\n     * ```js\\n     * const {\\n     *   createHmac\\n     * } = await import('crypto');\\n     *\\n     * const hmac = createHmac('sha256', 'a secret');\\n     *\\n     * hmac.update('some data to hash');\\n     * console.log(hmac.digest('hex'));\\n     * // Prints:\\n     * //   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e\\n     * ```\\n     * @since v0.1.94\\n     */\\n    class Hmac extends stream.Transform {\\n        private constructor();\\n        /**\\n         * Updates the `Hmac` content with the given `data`, the encoding of which\\n         * is given in `inputEncoding`.\\n         * If `encoding` is not provided, and the `data` is a string, an\\n         * encoding of `'utf8'` is enforced. If `data` is a `Buffer`, `TypedArray`, or`DataView`, then `inputEncoding` is ignored.\\n         *\\n         * This can be called many times with new data as it is streamed.\\n         * @since v0.1.94\\n         * @param inputEncoding The `encoding` of the `data` string.\\n         */\\n        update(data: BinaryLike): Hmac;\\n        update(data: string, inputEncoding: Encoding): Hmac;\\n        /**\\n         * Calculates the HMAC digest of all of the data passed using `hmac.update()`.\\n         * If `encoding` is\\n         * provided a string is returned; otherwise a `Buffer` is returned;\\n         *\\n         * The `Hmac` object can not be used again after `hmac.digest()` has been\\n         * called. Multiple calls to `hmac.digest()` will result in an error being thrown.\\n         * @since v0.1.94\\n         * @param encoding The `encoding` of the return value.\\n         */\\n        digest(): Buffer;\\n        digest(encoding: BinaryToTextEncoding): string;\\n    }\\n    type KeyObjectType = 'secret' | 'public' | 'private';\\n    interface KeyExportOptions<T extends KeyFormat> {\\n        type: 'pkcs1' | 'spki' | 'pkcs8' | 'sec1';\\n        format: T;\\n        cipher?: string | undefined;\\n        passphrase?: string | Buffer | undefined;\\n    }\\n    interface JwkKeyExportOptions {\\n        format: 'jwk';\\n    }\\n    interface JsonWebKey {\\n        crv?: string | undefined;\\n        d?: string | undefined;\\n        dp?: string | undefined;\\n        dq?: string | undefined;\\n        e?: string | undefined;\\n        k?: string | undefined;\\n        kty?: string | undefined;\\n        n?: string | undefined;\\n        p?: string | undefined;\\n        q?: string | undefined;\\n        qi?: string | undefined;\\n        x?: string | undefined;\\n        y?: string | undefined;\\n        [key: string]: unknown;\\n    }\\n    interface AsymmetricKeyDetails {\\n        /**\\n         * Key size in bits (RSA, DSA).\\n         */\\n        modulusLength?: number | undefined;\\n        /**\\n         * Public exponent (RSA).\\n         */\\n        publicExponent?: bigint | undefined;\\n        /**\\n         * Name of the message digest (RSA-PSS).\\n         */\\n        hashAlgorithm?: string | undefined;\\n        /**\\n         * Name of the message digest used by MGF1 (RSA-PSS).\\n         */\\n        mgf1HashAlgorithm?: string | undefined;\\n        /**\\n         * Minimal salt length in bytes (RSA-PSS).\\n         */\\n        saltLength?: number | undefined;\\n        /**\\n         * Size of q in bits (DSA).\\n         */\\n        divisorLength?: number | undefined;\\n        /**\\n         * Name of the curve (EC).\\n         */\\n        namedCurve?: string | undefined;\\n    }\\n    /**\\n     * Node.js uses a `KeyObject` class to represent a symmetric or asymmetric key,\\n     * and each kind of key exposes different functions. The {@link createSecretKey}, {@link createPublicKey} and {@link createPrivateKey} methods are used to create `KeyObject`instances. `KeyObject`\\n     * objects are not to be created directly using the `new`keyword.\\n     *\\n     * Most applications should consider using the new `KeyObject` API instead of\\n     * passing keys as strings or `Buffer`s due to improved security features.\\n     *\\n     * `KeyObject` instances can be passed to other threads via `postMessage()`.\\n     * The receiver obtains a cloned `KeyObject`, and the `KeyObject` does not need to\\n     * be listed in the `transferList` argument.\\n     * @since v11.6.0\\n     */\\n    class KeyObject {\\n        private constructor();\\n        /**\\n         * Example: Converting a `CryptoKey` instance to a `KeyObject`:\\n         *\\n         * ```js\\n         * const { webcrypto, KeyObject } = await import('crypto');\\n         * const { subtle } = webcrypto;\\n         *\\n         * const key = await subtle.generateKey({\\n         *   name: 'HMAC',\\n         *   hash: 'SHA-256',\\n         *   length: 256\\n         * }, true, ['sign', 'verify']);\\n         *\\n         * const keyObject = KeyObject.from(key);\\n         * console.log(keyObject.symmetricKeySize);\\n         * // Prints: 32 (symmetric key size in bytes)\\n         * ```\\n         * @since v15.0.0\\n         */\\n        static from(key: webcrypto.CryptoKey): KeyObject;\\n        /**\\n         * For asymmetric keys, this property represents the type of the key. Supported key\\n         * types are:\\n         *\\n         * * `'rsa'` (OID 1.2.840.113549.1.1.1)\\n         * * `'rsa-pss'` (OID 1.2.840.113549.1.1.10)\\n         * * `'dsa'` (OID 1.2.840.10040.4.1)\\n         * * `'ec'` (OID 1.2.840.10045.2.1)\\n         * * `'x25519'` (OID 1.3.101.110)\\n         * * `'x448'` (OID 1.3.101.111)\\n         * * `'ed25519'` (OID 1.3.101.112)\\n         * * `'ed448'` (OID 1.3.101.113)\\n         * * `'dh'` (OID 1.2.840.113549.1.3.1)\\n         *\\n         * This property is `undefined` for unrecognized `KeyObject` types and symmetric\\n         * keys.\\n         * @since v11.6.0\\n         */\\n        asymmetricKeyType?: KeyType | undefined;\\n        /**\\n         * For asymmetric keys, this property represents the size of the embedded key in\\n         * bytes. This property is `undefined` for symmetric keys.\\n         */\\n        asymmetricKeySize?: number | undefined;\\n        /**\\n         * This property exists only on asymmetric keys. Depending on the type of the key,\\n         * this object contains information about the key. None of the information obtained\\n         * through this property can be used to uniquely identify a key or to compromise\\n         * the security of the key.\\n         *\\n         * For RSA-PSS keys, if the key material contains a `RSASSA-PSS-params` sequence,\\n         * the `hashAlgorithm`, `mgf1HashAlgorithm`, and `saltLength` properties will be\\n         * set.\\n         *\\n         * Other key details might be exposed via this API using additional attributes.\\n         * @since v15.7.0\\n         */\\n        asymmetricKeyDetails?: AsymmetricKeyDetails | undefined;\\n        /**\\n         * For symmetric keys, the following encoding options can be used:\\n         *\\n         * For public keys, the following encoding options can be used:\\n         *\\n         * For private keys, the following encoding options can be used:\\n         *\\n         * The result type depends on the selected encoding format, when PEM the\\n         * result is a string, when DER it will be a buffer containing the data\\n         * encoded as DER, when [JWK](https://tools.ietf.org/html/rfc7517) it will be an object.\\n         *\\n         * When [JWK](https://tools.ietf.org/html/rfc7517) encoding format was selected, all other encoding options are\\n         * ignored.\\n         *\\n         * PKCS#1, SEC1, and PKCS#8 type keys can be encrypted by using a combination of\\n         * the `cipher` and `format` options. The PKCS#8 `type` can be used with any`format` to encrypt any key algorithm (RSA, EC, or DH) by specifying a`cipher`. PKCS#1 and SEC1 can only be\\n         * encrypted by specifying a `cipher`when the PEM `format` is used. For maximum compatibility, use PKCS#8 for\\n         * encrypted private keys. Since PKCS#8 defines its own\\n         * encryption mechanism, PEM-level encryption is not supported when encrypting\\n         * a PKCS#8 key. See [RFC 5208](https://www.rfc-editor.org/rfc/rfc5208.txt) for PKCS#8 encryption and [RFC 1421](https://www.rfc-editor.org/rfc/rfc1421.txt) for\\n         * PKCS#1 and SEC1 encryption.\\n         * @since v11.6.0\\n         */\\n        export(options: KeyExportOptions<'pem'>): string | Buffer;\\n        export(options?: KeyExportOptions<'der'>): Buffer;\\n        export(options?: JwkKeyExportOptions): JsonWebKey;\\n        /**\\n         * For secret keys, this property represents the size of the key in bytes. This\\n         * property is `undefined` for asymmetric keys.\\n         * @since v11.6.0\\n         */\\n        symmetricKeySize?: number | undefined;\\n        /**\\n         * Depending on the type of this `KeyObject`, this property is either`'secret'` for secret (symmetric) keys, `'public'` for public (asymmetric) keys\\n         * or `'private'` for private (asymmetric) keys.\\n         * @since v11.6.0\\n         */\\n        type: KeyObjectType;\\n    }\\n    type CipherCCMTypes = 'aes-128-ccm' | 'aes-192-ccm' | 'aes-256-ccm' | 'chacha20-poly1305';\\n    type CipherGCMTypes = 'aes-128-gcm' | 'aes-192-gcm' | 'aes-256-gcm';\\n    type CipherOCBTypes = 'aes-128-ocb' | 'aes-192-ocb' | 'aes-256-ocb';\\n    type BinaryLike = string | NodeJS.ArrayBufferView;\\n    type CipherKey = BinaryLike | KeyObject;\\n    interface CipherCCMOptions extends stream.TransformOptions {\\n        authTagLength: number;\\n    }\\n    interface CipherGCMOptions extends stream.TransformOptions {\\n        authTagLength?: number | undefined;\\n    }\\n    interface CipherOCBOptions extends stream.TransformOptions {\\n        authTagLength: number;\\n    }\\n    /**\\n     * Creates and returns a `Cipher` object that uses the given `algorithm` and`password`.\\n     *\\n     * The `options` argument controls stream behavior and is optional except when a\\n     * cipher in CCM or OCB mode (e.g. `'aes-128-ccm'`) is used. In that case, the`authTagLength` option is required and specifies the length of the\\n     * authentication tag in bytes, see `CCM mode`. In GCM mode, the `authTagLength`option is not required but can be used to set the length of the authentication\\n     * tag that will be returned by `getAuthTag()` and defaults to 16 bytes.\\n     * For `chacha20-poly1305`, the `authTagLength` option defaults to 16 bytes.\\n     *\\n     * The `algorithm` is dependent on OpenSSL, examples are `'aes192'`, etc. On\\n     * recent OpenSSL releases, `openssl list -cipher-algorithms` will\\n     * display the available cipher algorithms.\\n     *\\n     * The `password` is used to derive the cipher key and initialization vector (IV).\\n     * The value must be either a `'latin1'` encoded string, a `Buffer`, a`TypedArray`, or a `DataView`.\\n     *\\n     * The implementation of `crypto.createCipher()` derives keys using the OpenSSL\\n     * function [`EVP_BytesToKey`](https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html) with the digest algorithm set to MD5, one\\n     * iteration, and no salt. The lack of salt allows dictionary attacks as the same\\n     * password always creates the same key. The low iteration count and\\n     * non-cryptographically secure hash algorithm allow passwords to be tested very\\n     * rapidly.\\n     *\\n     * In line with OpenSSL's recommendation to use a more modern algorithm instead of [`EVP_BytesToKey`](https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html) it is recommended that\\n     * developers derive a key and IV on\\n     * their own using {@link scrypt} and to use {@link createCipheriv} to create the `Cipher` object. Users should not use ciphers with counter mode\\n     * (e.g. CTR, GCM, or CCM) in `crypto.createCipher()`. A warning is emitted when\\n     * they are used in order to avoid the risk of IV reuse that causes\\n     * vulnerabilities. For the case when IV is reused in GCM, see [Nonce-Disrespecting Adversaries](https://github.com/nonce-disrespect/nonce-disrespect) for details.\\n     * @since v0.1.94\\n     * @deprecated Since v10.0.0 - Use {@link createCipheriv} instead.\\n     * @param options `stream.transform` options\\n     */\\n    function createCipher(algorithm: CipherCCMTypes, password: BinaryLike, options: CipherCCMOptions): CipherCCM;\\n    /** @deprecated since v10.0.0 use `createCipheriv()` */\\n    function createCipher(algorithm: CipherGCMTypes, password: BinaryLike, options?: CipherGCMOptions): CipherGCM;\\n    /** @deprecated since v10.0.0 use `createCipheriv()` */\\n    function createCipher(algorithm: string, password: BinaryLike, options?: stream.TransformOptions): Cipher;\\n    /**\\n     * Creates and returns a `Cipher` object, with the given `algorithm`, `key` and\\n     * initialization vector (`iv`).\\n     *\\n     * The `options` argument controls stream behavior and is optional except when a\\n     * cipher in CCM or OCB mode (e.g. `'aes-128-ccm'`) is used. In that case, the`authTagLength` option is required and specifies the length of the\\n     * authentication tag in bytes, see `CCM mode`. In GCM mode, the `authTagLength`option is not required but can be used to set the length of the authentication\\n     * tag that will be returned by `getAuthTag()` and defaults to 16 bytes.\\n     * For `chacha20-poly1305`, the `authTagLength` option defaults to 16 bytes.\\n     *\\n     * The `algorithm` is dependent on OpenSSL, examples are `'aes192'`, etc. On\\n     * recent OpenSSL releases, `openssl list -cipher-algorithms` will\\n     * display the available cipher algorithms.\\n     *\\n     * The `key` is the raw key used by the `algorithm` and `iv` is an [initialization vector](https://en.wikipedia.org/wiki/Initialization_vector). Both arguments must be `'utf8'` encoded\\n     * strings,`Buffers`, `TypedArray`, or `DataView`s. The `key` may optionally be\\n     * a `KeyObject` of type `secret`. If the cipher does not need\\n     * an initialization vector, `iv` may be `null`.\\n     *\\n     * When passing strings for `key` or `iv`, please consider `caveats when using strings as inputs to cryptographic APIs`.\\n     *\\n     * Initialization vectors should be unpredictable and unique; ideally, they will be\\n     * cryptographically random. They do not have to be secret: IVs are typically just\\n     * added to ciphertext messages unencrypted. It may sound contradictory that\\n     * something has to be unpredictable and unique, but does not have to be secret;\\n     * remember that an attacker must not be able to predict ahead of time what a\\n     * given IV will be.\\n     * @since v0.1.94\\n     * @param options `stream.transform` options\\n     */\\n    function createCipheriv(algorithm: CipherCCMTypes, key: CipherKey, iv: BinaryLike, options: CipherCCMOptions): CipherCCM;\\n    function createCipheriv(algorithm: CipherOCBTypes, key: CipherKey, iv: BinaryLike, options: CipherOCBOptions): CipherOCB;\\n    function createCipheriv(algorithm: CipherGCMTypes, key: CipherKey, iv: BinaryLike, options?: CipherGCMOptions): CipherGCM;\\n    function createCipheriv(algorithm: string, key: CipherKey, iv: BinaryLike | null, options?: stream.TransformOptions): Cipher;\\n    /**\\n     * Instances of the `Cipher` class are used to encrypt data. The class can be\\n     * used in one of two ways:\\n     *\\n     * * As a `stream` that is both readable and writable, where plain unencrypted\\n     * data is written to produce encrypted data on the readable side, or\\n     * * Using the `cipher.update()` and `cipher.final()` methods to produce\\n     * the encrypted data.\\n     *\\n     * The {@link createCipher} or {@link createCipheriv} methods are\\n     * used to create `Cipher` instances. `Cipher` objects are not to be created\\n     * directly using the `new` keyword.\\n     *\\n     * Example: Using `Cipher` objects as streams:\\n     *\\n     * ```js\\n     * const {\\n     *   scrypt,\\n     *   randomFill,\\n     *   createCipheriv\\n     * } = await import('crypto');\\n     *\\n     * const algorithm = 'aes-192-cbc';\\n     * const password = 'Password used to generate key';\\n     *\\n     * // First, we'll generate the key. The key length is dependent on the algorithm.\\n     * // In this case for aes192, it is 24 bytes (192 bits).\\n     * scrypt(password, 'salt', 24, (err, key) => {\\n     *   if (err) throw err;\\n     *   // Then, we'll generate a random initialization vector\\n     *   randomFill(new Uint8Array(16), (err, iv) => {\\n     *     if (err) throw err;\\n     *\\n     *     // Once we have the key and iv, we can create and use the cipher...\\n     *     const cipher = createCipheriv(algorithm, key, iv);\\n     *\\n     *     let encrypted = '';\\n     *     cipher.setEncoding('hex');\\n     *\\n     *     cipher.on('data', (chunk) => encrypted += chunk);\\n     *     cipher.on('end', () => console.log(encrypted));\\n     *\\n     *     cipher.write('some clear text data');\\n     *     cipher.end();\\n     *   });\\n     * });\\n     * ```\\n     *\\n     * Example: Using `Cipher` and piped streams:\\n     *\\n     * ```js\\n     * import {\\n     *   createReadStream,\\n     *   createWriteStream,\\n     * } from 'fs';\\n     *\\n     * import {\\n     *   pipeline\\n     * } from 'stream';\\n     *\\n     * const {\\n     *   scrypt,\\n     *   randomFill,\\n     *   createCipheriv\\n     * } = await import('crypto');\\n     *\\n     * const algorithm = 'aes-192-cbc';\\n     * const password = 'Password used to generate key';\\n     *\\n     * // First, we'll generate the key. The key length is dependent on the algorithm.\\n     * // In this case for aes192, it is 24 bytes (192 bits).\\n     * scrypt(password, 'salt', 24, (err, key) => {\\n     *   if (err) throw err;\\n     *   // Then, we'll generate a random initialization vector\\n     *   randomFill(new Uint8Array(16), (err, iv) => {\\n     *     if (err) throw err;\\n     *\\n     *     const cipher = createCipheriv(algorithm, key, iv);\\n     *\\n     *     const input = createReadStream('test.js');\\n     *     const output = createWriteStream('test.enc');\\n     *\\n     *     pipeline(input, cipher, output, (err) => {\\n     *       if (err) throw err;\\n     *     });\\n     *   });\\n     * });\\n     * ```\\n     *\\n     * Example: Using the `cipher.update()` and `cipher.final()` methods:\\n     *\\n     * ```js\\n     * const {\\n     *   scrypt,\\n     *   randomFill,\\n     *   createCipheriv\\n     * } = await import('crypto');\\n     *\\n     * const algorithm = 'aes-192-cbc';\\n     * const password = 'Password used to generate key';\\n     *\\n     * // First, we'll generate the key. The key length is dependent on the algorithm.\\n     * // In this case for aes192, it is 24 bytes (192 bits).\\n     * scrypt(password, 'salt', 24, (err, key) => {\\n     *   if (err) throw err;\\n     *   // Then, we'll generate a random initialization vector\\n     *   randomFill(new Uint8Array(16), (err, iv) => {\\n     *     if (err) throw err;\\n     *\\n     *     const cipher = createCipheriv(algorithm, key, iv);\\n     *\\n     *     let encrypted = cipher.update('some clear text data', 'utf8', 'hex');\\n     *     encrypted += cipher.final('hex');\\n     *     console.log(encrypted);\\n     *   });\\n     * });\\n     * ```\\n     * @since v0.1.94\\n     */\\n    class Cipher extends stream.Transform {\\n        private constructor();\\n        /**\\n         * Updates the cipher with `data`. If the `inputEncoding` argument is given,\\n         * the `data`argument is a string using the specified encoding. If the `inputEncoding`argument is not given, `data` must be a `Buffer`, `TypedArray`, or`DataView`. If `data` is a `Buffer`,\\n         * `TypedArray`, or `DataView`, then`inputEncoding` is ignored.\\n         *\\n         * The `outputEncoding` specifies the output format of the enciphered\\n         * data. If the `outputEncoding`is specified, a string using the specified encoding is returned. If no`outputEncoding` is provided, a `Buffer` is returned.\\n         *\\n         * The `cipher.update()` method can be called multiple times with new data until `cipher.final()` is called. Calling `cipher.update()` after `cipher.final()` will result in an error being\\n         * thrown.\\n         * @since v0.1.94\\n         * @param inputEncoding The `encoding` of the data.\\n         * @param outputEncoding The `encoding` of the return value.\\n         */\\n        update(data: BinaryLike): Buffer;\\n        update(data: string, inputEncoding: Encoding): Buffer;\\n        update(data: NodeJS.ArrayBufferView, inputEncoding: undefined, outputEncoding: Encoding): string;\\n        update(data: string, inputEncoding: Encoding | undefined, outputEncoding: Encoding): string;\\n        /**\\n         * Once the `cipher.final()` method has been called, the `Cipher` object can no\\n         * longer be used to encrypt data. Attempts to call `cipher.final()` more than\\n         * once will result in an error being thrown.\\n         * @since v0.1.94\\n         * @param outputEncoding The `encoding` of the return value.\\n         * @return Any remaining enciphered contents. If `outputEncoding` is specified, a string is returned. If an `outputEncoding` is not provided, a {@link Buffer} is returned.\\n         */\\n        final(): Buffer;\\n        final(outputEncoding: BufferEncoding): string;\\n        /**\\n         * When using block encryption algorithms, the `Cipher` class will automatically\\n         * add padding to the input data to the appropriate block size. To disable the\\n         * default padding call `cipher.setAutoPadding(false)`.\\n         *\\n         * When `autoPadding` is `false`, the length of the entire input data must be a\\n         * multiple of the cipher's block size or `cipher.final()` will throw an error.\\n         * Disabling automatic padding is useful for non-standard padding, for instance\\n         * using `0x0` instead of PKCS padding.\\n         *\\n         * The `cipher.setAutoPadding()` method must be called before `cipher.final()`.\\n         * @since v0.7.1\\n         * @param [autoPadding=true]\\n         * @return for method chaining.\\n         */\\n        setAutoPadding(autoPadding?: boolean): this;\\n    }\\n    interface CipherCCM extends Cipher {\\n        setAAD(\\n            buffer: NodeJS.ArrayBufferView,\\n            options: {\\n                plaintextLength: number;\\n            }\\n        ): this;\\n        getAuthTag(): Buffer;\\n    }\\n    interface CipherGCM extends Cipher {\\n        setAAD(\\n            buffer: NodeJS.ArrayBufferView,\\n            options?: {\\n                plaintextLength: number;\\n            }\\n        ): this;\\n        getAuthTag(): Buffer;\\n    }\\n    interface CipherOCB extends Cipher {\\n        setAAD(\\n            buffer: NodeJS.ArrayBufferView,\\n            options?: {\\n                plaintextLength: number;\\n            }\\n        ): this;\\n        getAuthTag(): Buffer;\\n    }\\n    /**\\n     * Creates and returns a `Decipher` object that uses the given `algorithm` and`password` (key).\\n     *\\n     * The `options` argument controls stream behavior and is optional except when a\\n     * cipher in CCM or OCB mode (e.g. `'aes-128-ccm'`) is used. In that case, the`authTagLength` option is required and specifies the length of the\\n     * authentication tag in bytes, see `CCM mode`.\\n     * For `chacha20-poly1305`, the `authTagLength` option defaults to 16 bytes.\\n     *\\n     * The implementation of `crypto.createDecipher()` derives keys using the OpenSSL\\n     * function [`EVP_BytesToKey`](https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html) with the digest algorithm set to MD5, one\\n     * iteration, and no salt. The lack of salt allows dictionary attacks as the same\\n     * password always creates the same key. The low iteration count and\\n     * non-cryptographically secure hash algorithm allow passwords to be tested very\\n     * rapidly.\\n     *\\n     * In line with OpenSSL's recommendation to use a more modern algorithm instead of [`EVP_BytesToKey`](https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html) it is recommended that\\n     * developers derive a key and IV on\\n     * their own using {@link scrypt} and to use {@link createDecipheriv} to create the `Decipher` object.\\n     * @since v0.1.94\\n     * @deprecated Since v10.0.0 - Use {@link createDecipheriv} instead.\\n     * @param options `stream.transform` options\\n     */\\n    function createDecipher(algorithm: CipherCCMTypes, password: BinaryLike, options: CipherCCMOptions): DecipherCCM;\\n    /** @deprecated since v10.0.0 use `createDecipheriv()` */\\n    function createDecipher(algorithm: CipherGCMTypes, password: BinaryLike, options?: CipherGCMOptions): DecipherGCM;\\n    /** @deprecated since v10.0.0 use `createDecipheriv()` */\\n    function createDecipher(algorithm: string, password: BinaryLike, options?: stream.TransformOptions): Decipher;\\n    /**\\n     * Creates and returns a `Decipher` object that uses the given `algorithm`, `key`and initialization vector (`iv`).\\n     *\\n     * The `options` argument controls stream behavior and is optional except when a\\n     * cipher in CCM or OCB mode (e.g. `'aes-128-ccm'`) is used. In that case, the`authTagLength` option is required and specifies the length of the\\n     * authentication tag in bytes, see `CCM mode`. In GCM mode, the `authTagLength`option is not required but can be used to restrict accepted authentication tags\\n     * to those with the specified length.\\n     * For `chacha20-poly1305`, the `authTagLength` option defaults to 16 bytes.\\n     *\\n     * The `algorithm` is dependent on OpenSSL, examples are `'aes192'`, etc. On\\n     * recent OpenSSL releases, `openssl list -cipher-algorithms` will\\n     * display the available cipher algorithms.\\n     *\\n     * The `key` is the raw key used by the `algorithm` and `iv` is an [initialization vector](https://en.wikipedia.org/wiki/Initialization_vector). Both arguments must be `'utf8'` encoded\\n     * strings,`Buffers`, `TypedArray`, or `DataView`s. The `key` may optionally be\\n     * a `KeyObject` of type `secret`. If the cipher does not need\\n     * an initialization vector, `iv` may be `null`.\\n     *\\n     * When passing strings for `key` or `iv`, please consider `caveats when using strings as inputs to cryptographic APIs`.\\n     *\\n     * Initialization vectors should be unpredictable and unique; ideally, they will be\\n     * cryptographically random. They do not have to be secret: IVs are typically just\\n     * added to ciphertext messages unencrypted. It may sound contradictory that\\n     * something has to be unpredictable and unique, but does not have to be secret;\\n     * remember that an attacker must not be able to predict ahead of time what a given\\n     * IV will be.\\n     * @since v0.1.94\\n     * @param options `stream.transform` options\\n     */\\n    function createDecipheriv(algorithm: CipherCCMTypes, key: CipherKey, iv: BinaryLike, options: CipherCCMOptions): DecipherCCM;\\n    function createDecipheriv(algorithm: CipherOCBTypes, key: CipherKey, iv: BinaryLike, options: CipherOCBOptions): DecipherOCB;\\n    function createDecipheriv(algorithm: CipherGCMTypes, key: CipherKey, iv: BinaryLike, options?: CipherGCMOptions): DecipherGCM;\\n    function createDecipheriv(algorithm: string, key: CipherKey, iv: BinaryLike | null, options?: stream.TransformOptions): Decipher;\\n    /**\\n     * Instances of the `Decipher` class are used to decrypt data. The class can be\\n     * used in one of two ways:\\n     *\\n     * * As a `stream` that is both readable and writable, where plain encrypted\\n     * data is written to produce unencrypted data on the readable side, or\\n     * * Using the `decipher.update()` and `decipher.final()` methods to\\n     * produce the unencrypted data.\\n     *\\n     * The {@link createDecipher} or {@link createDecipheriv} methods are\\n     * used to create `Decipher` instances. `Decipher` objects are not to be created\\n     * directly using the `new` keyword.\\n     *\\n     * Example: Using `Decipher` objects as streams:\\n     *\\n     * ```js\\n     * import { Buffer } from 'buffer';\\n     * const {\\n     *   scryptSync,\\n     *   createDecipheriv\\n     * } = await import('crypto');\\n     *\\n     * const algorithm = 'aes-192-cbc';\\n     * const password = 'Password used to generate key';\\n     * // Key length is dependent on the algorithm. In this case for aes192, it is\\n     * // 24 bytes (192 bits).\\n     * // Use the async `crypto.scrypt()` instead.\\n     * const key = scryptSync(password, 'salt', 24);\\n     * // The IV is usually passed along with the ciphertext.\\n     * const iv = Buffer.alloc(16, 0); // Initialization vector.\\n     *\\n     * const decipher = createDecipheriv(algorithm, key, iv);\\n     *\\n     * let decrypted = '';\\n     * decipher.on('readable', () => {\\n     *   while (null !== (chunk = decipher.read())) {\\n     *     decrypted += chunk.toString('utf8');\\n     *   }\\n     * });\\n     * decipher.on('end', () => {\\n     *   console.log(decrypted);\\n     *   // Prints: some clear text data\\n     * });\\n     *\\n     * // Encrypted with same algorithm, key and iv.\\n     * const encrypted =\\n     *   'e5f79c5915c02171eec6b212d5520d44480993d7d622a7c4c2da32f6efda0ffa';\\n     * decipher.write(encrypted, 'hex');\\n     * decipher.end();\\n     * ```\\n     *\\n     * Example: Using `Decipher` and piped streams:\\n     *\\n     * ```js\\n     * import {\\n     *   createReadStream,\\n     *   createWriteStream,\\n     * } from 'fs';\\n     * import { Buffer } from 'buffer';\\n     * const {\\n     *   scryptSync,\\n     *   createDecipheriv\\n     * } = await import('crypto');\\n     *\\n     * const algorithm = 'aes-192-cbc';\\n     * const password = 'Password used to generate key';\\n     * // Use the async `crypto.scrypt()` instead.\\n     * const key = scryptSync(password, 'salt', 24);\\n     * // The IV is usually passed along with the ciphertext.\\n     * const iv = Buffer.alloc(16, 0); // Initialization vector.\\n     *\\n     * const decipher = createDecipheriv(algorithm, key, iv);\\n     *\\n     * const input = createReadStream('test.enc');\\n     * const output = createWriteStream('test.js');\\n     *\\n     * input.pipe(decipher).pipe(output);\\n     * ```\\n     *\\n     * Example: Using the `decipher.update()` and `decipher.final()` methods:\\n     *\\n     * ```js\\n     * import { Buffer } from 'buffer';\\n     * const {\\n     *   scryptSync,\\n     *   createDecipheriv\\n     * } = await import('crypto');\\n     *\\n     * const algorithm = 'aes-192-cbc';\\n     * const password = 'Password used to generate key';\\n     * // Use the async `crypto.scrypt()` instead.\\n     * const key = scryptSync(password, 'salt', 24);\\n     * // The IV is usually passed along with the ciphertext.\\n     * const iv = Buffer.alloc(16, 0); // Initialization vector.\\n     *\\n     * const decipher = createDecipheriv(algorithm, key, iv);\\n     *\\n     * // Encrypted using same algorithm, key and iv.\\n     * const encrypted =\\n     *   'e5f79c5915c02171eec6b212d5520d44480993d7d622a7c4c2da32f6efda0ffa';\\n     * let decrypted = decipher.update(encrypted, 'hex', 'utf8');\\n     * decrypted += decipher.final('utf8');\\n     * console.log(decrypted);\\n     * // Prints: some clear text data\\n     * ```\\n     * @since v0.1.94\\n     */\\n    class Decipher extends stream.Transform {\\n        private constructor();\\n        /**\\n         * Updates the decipher with `data`. If the `inputEncoding` argument is given,\\n         * the `data`argument is a string using the specified encoding. If the `inputEncoding`argument is not given, `data` must be a `Buffer`. If `data` is a `Buffer` then `inputEncoding` is\\n         * ignored.\\n         *\\n         * The `outputEncoding` specifies the output format of the enciphered\\n         * data. If the `outputEncoding`is specified, a string using the specified encoding is returned. If no`outputEncoding` is provided, a `Buffer` is returned.\\n         *\\n         * The `decipher.update()` method can be called multiple times with new data until `decipher.final()` is called. Calling `decipher.update()` after `decipher.final()` will result in an error\\n         * being thrown.\\n         * @since v0.1.94\\n         * @param inputEncoding The `encoding` of the `data` string.\\n         * @param outputEncoding The `encoding` of the return value.\\n         */\\n        update(data: NodeJS.ArrayBufferView): Buffer;\\n        update(data: string, inputEncoding: Encoding): Buffer;\\n        update(data: NodeJS.ArrayBufferView, inputEncoding: undefined, outputEncoding: Encoding): string;\\n        update(data: string, inputEncoding: Encoding | undefined, outputEncoding: Encoding): string;\\n        /**\\n         * Once the `decipher.final()` method has been called, the `Decipher` object can\\n         * no longer be used to decrypt data. Attempts to call `decipher.final()` more\\n         * than once will result in an error being thrown.\\n         * @since v0.1.94\\n         * @param outputEncoding The `encoding` of the return value.\\n         * @return Any remaining deciphered contents. If `outputEncoding` is specified, a string is returned. If an `outputEncoding` is not provided, a {@link Buffer} is returned.\\n         */\\n        final(): Buffer;\\n        final(outputEncoding: BufferEncoding): string;\\n        /**\\n         * When data has been encrypted without standard block padding, calling`decipher.setAutoPadding(false)` will disable automatic padding to prevent `decipher.final()` from checking for and\\n         * removing padding.\\n         *\\n         * Turning auto padding off will only work if the input data's length is a\\n         * multiple of the ciphers block size.\\n         *\\n         * The `decipher.setAutoPadding()` method must be called before `decipher.final()`.\\n         * @since v0.7.1\\n         * @param [autoPadding=true]\\n         * @return for method chaining.\\n         */\\n        setAutoPadding(auto_padding?: boolean): this;\\n    }\\n    interface DecipherCCM extends Decipher {\\n        setAuthTag(buffer: NodeJS.ArrayBufferView): this;\\n        setAAD(\\n            buffer: NodeJS.ArrayBufferView,\\n            options: {\\n                plaintextLength: number;\\n            }\\n        ): this;\\n    }\\n    interface DecipherGCM extends Decipher {\\n        setAuthTag(buffer: NodeJS.ArrayBufferView): this;\\n        setAAD(\\n            buffer: NodeJS.ArrayBufferView,\\n            options?: {\\n                plaintextLength: number;\\n            }\\n        ): this;\\n    }\\n    interface DecipherOCB extends Decipher {\\n        setAuthTag(buffer: NodeJS.ArrayBufferView): this;\\n        setAAD(\\n            buffer: NodeJS.ArrayBufferView,\\n            options?: {\\n                plaintextLength: number;\\n            }\\n        ): this;\\n    }\\n    interface PrivateKeyInput {\\n        key: string | Buffer;\\n        format?: KeyFormat | undefined;\\n        type?: 'pkcs1' | 'pkcs8' | 'sec1' | undefined;\\n        passphrase?: string | Buffer | undefined;\\n        encoding?: string | undefined;\\n    }\\n    interface PublicKeyInput {\\n        key: string | Buffer;\\n        format?: KeyFormat | undefined;\\n        type?: 'pkcs1' | 'spki' | undefined;\\n        encoding?: string | undefined;\\n    }\\n    /**\\n     * Asynchronously generates a new random secret key of the given `length`. The`type` will determine which validations will be performed on the `length`.\\n     *\\n     * ```js\\n     * const {\\n     *   generateKey\\n     * } = await import('crypto');\\n     *\\n     * generateKey('hmac', { length: 64 }, (err, key) => {\\n     *   if (err) throw err;\\n     *   console.log(key.export().toString('hex'));  // 46e..........620\\n     * });\\n     * ```\\n     * @since v15.0.0\\n     * @param type The intended use of the generated secret key. Currently accepted values are `'hmac'` and `'aes'`.\\n     */\\n    function generateKey(\\n        type: 'hmac' | 'aes',\\n        options: {\\n            length: number;\\n        },\\n        callback: (err: Error | null, key: KeyObject) => void\\n    ): void;\\n    /**\\n     * Synchronously generates a new random secret key of the given `length`. The`type` will determine which validations will be performed on the `length`.\\n     *\\n     * ```js\\n     * const {\\n     *   generateKeySync\\n     * } = await import('crypto');\\n     *\\n     * const key = generateKeySync('hmac', { length: 64 });\\n     * console.log(key.export().toString('hex'));  // e89..........41e\\n     * ```\\n     * @since v15.0.0\\n     * @param type The intended use of the generated secret key. Currently accepted values are `'hmac'` and `'aes'`.\\n     */\\n    function generateKeySync(\\n        type: 'hmac' | 'aes',\\n        options: {\\n            length: number;\\n        }\\n    ): KeyObject;\\n    interface JsonWebKeyInput {\\n        key: JsonWebKey;\\n        format: 'jwk';\\n    }\\n    /**\\n     * Creates and returns a new key object containing a private key. If `key` is a\\n     * string or `Buffer`, `format` is assumed to be `'pem'`; otherwise, `key`must be an object with the properties described above.\\n     *\\n     * If the private key is encrypted, a `passphrase` must be specified. The length\\n     * of the passphrase is limited to 1024 bytes.\\n     * @since v11.6.0\\n     */\\n    function createPrivateKey(key: PrivateKeyInput | string | Buffer | JsonWebKeyInput): KeyObject;\\n    /**\\n     * Creates and returns a new key object containing a public key. If `key` is a\\n     * string or `Buffer`, `format` is assumed to be `'pem'`; if `key` is a `KeyObject`with type `'private'`, the public key is derived from the given private key;\\n     * otherwise, `key` must be an object with the properties described above.\\n     *\\n     * If the format is `'pem'`, the `'key'` may also be an X.509 certificate.\\n     *\\n     * Because public keys can be derived from private keys, a private key may be\\n     * passed instead of a public key. In that case, this function behaves as if {@link createPrivateKey} had been called, except that the type of the\\n     * returned `KeyObject` will be `'public'` and that the private key cannot be\\n     * extracted from the returned `KeyObject`. Similarly, if a `KeyObject` with type`'private'` is given, a new `KeyObject` with type `'public'` will be returned\\n     * and it will be impossible to extract the private key from the returned object.\\n     * @since v11.6.0\\n     */\\n    function createPublicKey(key: PublicKeyInput | string | Buffer | KeyObject | JsonWebKeyInput): KeyObject;\\n    /**\\n     * Creates and returns a new key object containing a secret key for symmetric\\n     * encryption or `Hmac`.\\n     * @since v11.6.0\\n     * @param encoding The string encoding when `key` is a string.\\n     */\\n    function createSecretKey(key: NodeJS.ArrayBufferView): KeyObject;\\n    function createSecretKey(key: string, encoding: BufferEncoding): KeyObject;\\n    /**\\n     * Creates and returns a `Sign` object that uses the given `algorithm`. Use {@link getHashes} to obtain the names of the available digest algorithms.\\n     * Optional `options` argument controls the `stream.Writable` behavior.\\n     *\\n     * In some cases, a `Sign` instance can be created using the name of a signature\\n     * algorithm, such as `'RSA-SHA256'`, instead of a digest algorithm. This will use\\n     * the corresponding digest algorithm. This does not work for all signature\\n     * algorithms, such as `'ecdsa-with-SHA256'`, so it is best to always use digest\\n     * algorithm names.\\n     * @since v0.1.92\\n     * @param options `stream.Writable` options\\n     */\\n    function createSign(algorithm: string, options?: stream.WritableOptions): Sign;\\n    type DSAEncoding = 'der' | 'ieee-p1363';\\n    interface SigningOptions {\\n        /**\\n         * @See crypto.constants.RSA_PKCS1_PADDING\\n         */\\n        padding?: number | undefined;\\n        saltLength?: number | undefined;\\n        dsaEncoding?: DSAEncoding | undefined;\\n    }\\n    interface SignPrivateKeyInput extends PrivateKeyInput, SigningOptions {}\\n    interface SignKeyObjectInput extends SigningOptions {\\n        key: KeyObject;\\n    }\\n    interface VerifyPublicKeyInput extends PublicKeyInput, SigningOptions {}\\n    interface VerifyKeyObjectInput extends SigningOptions {\\n        key: KeyObject;\\n    }\\n    interface VerifyJsonWebKeyInput extends JsonWebKeyInput, SigningOptions {}\\n    type KeyLike = string | Buffer | KeyObject;\\n    /**\\n     * The `Sign` class is a utility for generating signatures. It can be used in one\\n     * of two ways:\\n     *\\n     * * As a writable `stream`, where data to be signed is written and the `sign.sign()` method is used to generate and return the signature, or\\n     * * Using the `sign.update()` and `sign.sign()` methods to produce the\\n     * signature.\\n     *\\n     * The {@link createSign} method is used to create `Sign` instances. The\\n     * argument is the string name of the hash function to use. `Sign` objects are not\\n     * to be created directly using the `new` keyword.\\n     *\\n     * Example: Using `Sign` and `Verify` objects as streams:\\n     *\\n     * ```js\\n     * const {\\n     *   generateKeyPairSync,\\n     *   createSign,\\n     *   createVerify\\n     * } = await import('crypto');\\n     *\\n     * const { privateKey, publicKey } = generateKeyPairSync('ec', {\\n     *   namedCurve: 'sect239k1'\\n     * });\\n     *\\n     * const sign = createSign('SHA256');\\n     * sign.write('some data to sign');\\n     * sign.end();\\n     * const signature = sign.sign(privateKey, 'hex');\\n     *\\n     * const verify = createVerify('SHA256');\\n     * verify.write('some data to sign');\\n     * verify.end();\\n     * console.log(verify.verify(publicKey, signature, 'hex'));\\n     * // Prints: true\\n     * ```\\n     *\\n     * Example: Using the `sign.update()` and `verify.update()` methods:\\n     *\\n     * ```js\\n     * const {\\n     *   generateKeyPairSync,\\n     *   createSign,\\n     *   createVerify\\n     * } = await import('crypto');\\n     *\\n     * const { privateKey, publicKey } = generateKeyPairSync('rsa', {\\n     *   modulusLength: 2048,\\n     * });\\n     *\\n     * const sign = createSign('SHA256');\\n     * sign.update('some data to sign');\\n     * sign.end();\\n     * const signature = sign.sign(privateKey);\\n     *\\n     * const verify = createVerify('SHA256');\\n     * verify.update('some data to sign');\\n     * verify.end();\\n     * console.log(verify.verify(publicKey, signature));\\n     * // Prints: true\\n     * ```\\n     * @since v0.1.92\\n     */\\n    class Sign extends stream.Writable {\\n        private constructor();\\n        /**\\n         * Updates the `Sign` content with the given `data`, the encoding of which\\n         * is given in `inputEncoding`.\\n         * If `encoding` is not provided, and the `data` is a string, an\\n         * encoding of `'utf8'` is enforced. If `data` is a `Buffer`, `TypedArray`, or`DataView`, then `inputEncoding` is ignored.\\n         *\\n         * This can be called many times with new data as it is streamed.\\n         * @since v0.1.92\\n         * @param inputEncoding The `encoding` of the `data` string.\\n         */\\n        update(data: BinaryLike): this;\\n        update(data: string, inputEncoding: Encoding): this;\\n        /**\\n         * Calculates the signature on all the data passed through using either `sign.update()` or `sign.write()`.\\n         *\\n         * If `privateKey` is not a `KeyObject`, this function behaves as if`privateKey` had been passed to {@link createPrivateKey}. If it is an\\n         * object, the following additional properties can be passed:\\n         *\\n         * If `outputEncoding` is provided a string is returned; otherwise a `Buffer` is returned.\\n         *\\n         * The `Sign` object can not be again used after `sign.sign()` method has been\\n         * called. Multiple calls to `sign.sign()` will result in an error being thrown.\\n         * @since v0.1.92\\n         */\\n        sign(privateKey: KeyLike | SignKeyObjectInput | SignPrivateKeyInput): Buffer;\\n        sign(privateKey: KeyLike | SignKeyObjectInput | SignPrivateKeyInput, outputFormat: BinaryToTextEncoding): string;\\n    }\\n    /**\\n     * Creates and returns a `Verify` object that uses the given algorithm.\\n     * Use {@link getHashes} to obtain an array of names of the available\\n     * signing algorithms. Optional `options` argument controls the`stream.Writable` behavior.\\n     *\\n     * In some cases, a `Verify` instance can be created using the name of a signature\\n     * algorithm, such as `'RSA-SHA256'`, instead of a digest algorithm. This will use\\n     * the corresponding digest algorithm. This does not work for all signature\\n     * algorithms, such as `'ecdsa-with-SHA256'`, so it is best to always use digest\\n     * algorithm names.\\n     * @since v0.1.92\\n     * @param options `stream.Writable` options\\n     */\\n    function createVerify(algorithm: string, options?: stream.WritableOptions): Verify;\\n    /**\\n     * The `Verify` class is a utility for verifying signatures. It can be used in one\\n     * of two ways:\\n     *\\n     * * As a writable `stream` where written data is used to validate against the\\n     * supplied signature, or\\n     * * Using the `verify.update()` and `verify.verify()` methods to verify\\n     * the signature.\\n     *\\n     * The {@link createVerify} method is used to create `Verify` instances.`Verify` objects are not to be created directly using the `new` keyword.\\n     *\\n     * See `Sign` for examples.\\n     * @since v0.1.92\\n     */\\n    class Verify extends stream.Writable {\\n        private constructor();\\n        /**\\n         * Updates the `Verify` content with the given `data`, the encoding of which\\n         * is given in `inputEncoding`.\\n         * If `inputEncoding` is not provided, and the `data` is a string, an\\n         * encoding of `'utf8'` is enforced. If `data` is a `Buffer`, `TypedArray`, or`DataView`, then `inputEncoding` is ignored.\\n         *\\n         * This can be called many times with new data as it is streamed.\\n         * @since v0.1.92\\n         * @param inputEncoding The `encoding` of the `data` string.\\n         */\\n        update(data: BinaryLike): Verify;\\n        update(data: string, inputEncoding: Encoding): Verify;\\n        /**\\n         * Verifies the provided data using the given `object` and `signature`.\\n         *\\n         * If `object` is not a `KeyObject`, this function behaves as if`object` had been passed to {@link createPublicKey}. If it is an\\n         * object, the following additional properties can be passed:\\n         *\\n         * The `signature` argument is the previously calculated signature for the data, in\\n         * the `signatureEncoding`.\\n         * If a `signatureEncoding` is specified, the `signature` is expected to be a\\n         * string; otherwise `signature` is expected to be a `Buffer`,`TypedArray`, or `DataView`.\\n         *\\n         * The `verify` object can not be used again after `verify.verify()` has been\\n         * called. Multiple calls to `verify.verify()` will result in an error being\\n         * thrown.\\n         *\\n         * Because public keys can be derived from private keys, a private key may\\n         * be passed instead of a public key.\\n         * @since v0.1.92\\n         */\\n        verify(object: KeyLike | VerifyKeyObjectInput | VerifyPublicKeyInput | VerifyJsonWebKeyInput, signature: NodeJS.ArrayBufferView): boolean;\\n        verify(object: KeyLike | VerifyKeyObjectInput | VerifyPublicKeyInput | VerifyJsonWebKeyInput, signature: string, signature_format?: BinaryToTextEncoding): boolean;\\n    }\\n    /**\\n     * Creates a `DiffieHellman` key exchange object using the supplied `prime` and an\\n     * optional specific `generator`.\\n     *\\n     * The `generator` argument can be a number, string, or `Buffer`. If`generator` is not specified, the value `2` is used.\\n     *\\n     * If `primeEncoding` is specified, `prime` is expected to be a string; otherwise\\n     * a `Buffer`, `TypedArray`, or `DataView` is expected.\\n     *\\n     * If `generatorEncoding` is specified, `generator` is expected to be a string;\\n     * otherwise a number, `Buffer`, `TypedArray`, or `DataView` is expected.\\n     * @since v0.11.12\\n     * @param primeEncoding The `encoding` of the `prime` string.\\n     * @param [generator=2]\\n     * @param generatorEncoding The `encoding` of the `generator` string.\\n     */\\n    function createDiffieHellman(primeLength: number, generator?: number): DiffieHellman;\\n    function createDiffieHellman(prime: ArrayBuffer | NodeJS.ArrayBufferView, generator?: number | ArrayBuffer | NodeJS.ArrayBufferView): DiffieHellman;\\n    function createDiffieHellman(prime: ArrayBuffer | NodeJS.ArrayBufferView, generator: string, generatorEncoding: BinaryToTextEncoding): DiffieHellman;\\n    function createDiffieHellman(prime: string, primeEncoding: BinaryToTextEncoding, generator?: number | ArrayBuffer | NodeJS.ArrayBufferView): DiffieHellman;\\n    function createDiffieHellman(prime: string, primeEncoding: BinaryToTextEncoding, generator: string, generatorEncoding: BinaryToTextEncoding): DiffieHellman;\\n    /**\\n     * The `DiffieHellman` class is a utility for creating Diffie-Hellman key\\n     * exchanges.\\n     *\\n     * Instances of the `DiffieHellman` class can be created using the {@link createDiffieHellman} function.\\n     *\\n     * ```js\\n     * import assert from 'assert';\\n     *\\n     * const {\\n     *   createDiffieHellman\\n     * } = await import('crypto');\\n     *\\n     * // Generate Alice's keys...\\n     * const alice = createDiffieHellman(2048);\\n     * const aliceKey = alice.generateKeys();\\n     *\\n     * // Generate Bob's keys...\\n     * const bob = createDiffieHellman(alice.getPrime(), alice.getGenerator());\\n     * const bobKey = bob.generateKeys();\\n     *\\n     * // Exchange and generate the secret...\\n     * const aliceSecret = alice.computeSecret(bobKey);\\n     * const bobSecret = bob.computeSecret(aliceKey);\\n     *\\n     * // OK\\n     * assert.strictEqual(aliceSecret.toString('hex'), bobSecret.toString('hex'));\\n     * ```\\n     * @since v0.5.0\\n     */\\n    class DiffieHellman {\\n        private constructor();\\n        /**\\n         * Generates private and public Diffie-Hellman key values, and returns\\n         * the public key in the specified `encoding`. This key should be\\n         * transferred to the other party.\\n         * If `encoding` is provided a string is returned; otherwise a `Buffer` is returned.\\n         * @since v0.5.0\\n         * @param encoding The `encoding` of the return value.\\n         */\\n        generateKeys(): Buffer;\\n        generateKeys(encoding: BinaryToTextEncoding): string;\\n        /**\\n         * Computes the shared secret using `otherPublicKey` as the other\\n         * party's public key and returns the computed shared secret. The supplied\\n         * key is interpreted using the specified `inputEncoding`, and secret is\\n         * encoded using specified `outputEncoding`.\\n         * If the `inputEncoding` is not\\n         * provided, `otherPublicKey` is expected to be a `Buffer`,`TypedArray`, or `DataView`.\\n         *\\n         * If `outputEncoding` is given a string is returned; otherwise, a `Buffer` is returned.\\n         * @since v0.5.0\\n         * @param inputEncoding The `encoding` of an `otherPublicKey` string.\\n         * @param outputEncoding The `encoding` of the return value.\\n         */\\n        computeSecret(otherPublicKey: NodeJS.ArrayBufferView, inputEncoding?: null, outputEncoding?: null): Buffer;\\n        computeSecret(otherPublicKey: string, inputEncoding: BinaryToTextEncoding, outputEncoding?: null): Buffer;\\n        computeSecret(otherPublicKey: NodeJS.ArrayBufferView, inputEncoding: null, outputEncoding: BinaryToTextEncoding): string;\\n        computeSecret(otherPublicKey: string, inputEncoding: BinaryToTextEncoding, outputEncoding: BinaryToTextEncoding): string;\\n        /**\\n         * Returns the Diffie-Hellman prime in the specified `encoding`.\\n         * If `encoding` is provided a string is\\n         * returned; otherwise a `Buffer` is returned.\\n         * @since v0.5.0\\n         * @param encoding The `encoding` of the return value.\\n         */\\n        getPrime(): Buffer;\\n        getPrime(encoding: BinaryToTextEncoding): string;\\n        /**\\n         * Returns the Diffie-Hellman generator in the specified `encoding`.\\n         * If `encoding` is provided a string is\\n         * returned; otherwise a `Buffer` is returned.\\n         * @since v0.5.0\\n         * @param encoding The `encoding` of the return value.\\n         */\\n        getGenerator(): Buffer;\\n        getGenerator(encoding: BinaryToTextEncoding): string;\\n        /**\\n         * Returns the Diffie-Hellman public key in the specified `encoding`.\\n         * If `encoding` is provided a\\n         * string is returned; otherwise a `Buffer` is returned.\\n         * @since v0.5.0\\n         * @param encoding The `encoding` of the return value.\\n         */\\n        getPublicKey(): Buffer;\\n        getPublicKey(encoding: BinaryToTextEncoding): string;\\n        /**\\n         * Returns the Diffie-Hellman private key in the specified `encoding`.\\n         * If `encoding` is provided a\\n         * string is returned; otherwise a `Buffer` is returned.\\n         * @since v0.5.0\\n         * @param encoding The `encoding` of the return value.\\n         */\\n        getPrivateKey(): Buffer;\\n        getPrivateKey(encoding: BinaryToTextEncoding): string;\\n        /**\\n         * Sets the Diffie-Hellman public key. If the `encoding` argument is provided,`publicKey` is expected\\n         * to be a string. If no `encoding` is provided, `publicKey` is expected\\n         * to be a `Buffer`, `TypedArray`, or `DataView`.\\n         * @since v0.5.0\\n         * @param encoding The `encoding` of the `publicKey` string.\\n         */\\n        setPublicKey(publicKey: NodeJS.ArrayBufferView): void;\\n        setPublicKey(publicKey: string, encoding: BufferEncoding): void;\\n        /**\\n         * Sets the Diffie-Hellman private key. If the `encoding` argument is provided,`privateKey` is expected\\n         * to be a string. If no `encoding` is provided, `privateKey` is expected\\n         * to be a `Buffer`, `TypedArray`, or `DataView`.\\n         * @since v0.5.0\\n         * @param encoding The `encoding` of the `privateKey` string.\\n         */\\n        setPrivateKey(privateKey: NodeJS.ArrayBufferView): void;\\n        setPrivateKey(privateKey: string, encoding: BufferEncoding): void;\\n        /**\\n         * A bit field containing any warnings and/or errors resulting from a check\\n         * performed during initialization of the `DiffieHellman` object.\\n         *\\n         * The following values are valid for this property (as defined in `constants`module):\\n         *\\n         * * `DH_CHECK_P_NOT_SAFE_PRIME`\\n         * * `DH_CHECK_P_NOT_PRIME`\\n         * * `DH_UNABLE_TO_CHECK_GENERATOR`\\n         * * `DH_NOT_SUITABLE_GENERATOR`\\n         * @since v0.11.12\\n         */\\n        verifyError: number;\\n    }\\n    /**\\n     * The `DiffieHellmanGroup` class takes a well-known modp group as its argument.\\n     * It works the same as `DiffieHellman`, except that it does not allow changing its keys after creation.\\n     * In other words, it does not implement `setPublicKey()` or `setPrivateKey()` methods.\\n     *\\n     * ```js\\n     * const { createDiffieHellmanGroup } = await import('node:crypto');\\n     * const dh = createDiffieHellmanGroup('modp1');\\n     * ```\\n     * The name (e.g. `'modp1'`) is taken from [RFC 2412](https://www.rfc-editor.org/rfc/rfc2412.txt) (modp1 and 2) and [RFC 3526](https://www.rfc-editor.org/rfc/rfc3526.txt):\\n     * ```bash\\n     * $ perl -ne 'print \\\"$1\\\\n\\\" if /\\\"(modp\\\\d+)\\\"/' src/node_crypto_groups.h\\n     * modp1  #  768 bits\\n     * modp2  # 1024 bits\\n     * modp5  # 1536 bits\\n     * modp14 # 2048 bits\\n     * modp15 # etc.\\n     * modp16\\n     * modp17\\n     * modp18\\n     * ```\\n     * @since v0.7.5\\n     */\\n    const DiffieHellmanGroup: DiffieHellmanGroupConstructor;\\n    interface DiffieHellmanGroupConstructor {\\n        new(name: string): DiffieHellmanGroup;\\n        (name: string): DiffieHellmanGroup;\\n        readonly prototype: DiffieHellmanGroup;\\n    }\\n    type DiffieHellmanGroup = Omit<DiffieHellman, 'setPublicKey' | 'setPrivateKey'>;\\n    /**\\n     * Creates a predefined `DiffieHellmanGroup` key exchange object. The\\n     * supported groups are: `'modp1'`, `'modp2'`, `'modp5'` (defined in [RFC 2412](https://www.rfc-editor.org/rfc/rfc2412.txt), but see `Caveats`) and `'modp14'`, `'modp15'`,`'modp16'`, `'modp17'`,\\n     * `'modp18'` (defined in [RFC 3526](https://www.rfc-editor.org/rfc/rfc3526.txt)). The\\n     * returned object mimics the interface of objects created by {@link createDiffieHellman}, but will not allow changing\\n     * the keys (with `diffieHellman.setPublicKey()`, for example). The\\n     * advantage of using this method is that the parties do not have to\\n     * generate nor exchange a group modulus beforehand, saving both processor\\n     * and communication time.\\n     *\\n     * Example (obtaining a shared secret):\\n     *\\n     * ```js\\n     * const {\\n     *   getDiffieHellman\\n     * } = await import('crypto');\\n     * const alice = getDiffieHellman('modp14');\\n     * const bob = getDiffieHellman('modp14');\\n     *\\n     * alice.generateKeys();\\n     * bob.generateKeys();\\n     *\\n     * const aliceSecret = alice.computeSecret(bob.getPublicKey(), null, 'hex');\\n     * const bobSecret = bob.computeSecret(alice.getPublicKey(), null, 'hex');\\n     *\\n     * // aliceSecret and bobSecret should be the same\\n     * console.log(aliceSecret === bobSecret);\\n     * ```\\n     * @since v0.7.5\\n     */\\n    function getDiffieHellman(groupName: string): DiffieHellmanGroup;\\n    /**\\n     * An alias for {@link getDiffieHellman}\\n     * @since v0.9.3\\n     */\\n    function createDiffieHellmanGroup(name: string): DiffieHellmanGroup;\\n    /**\\n     * Provides an asynchronous Password-Based Key Derivation Function 2 (PBKDF2)\\n     * implementation. A selected HMAC digest algorithm specified by `digest` is\\n     * applied to derive a key of the requested byte length (`keylen`) from the`password`, `salt` and `iterations`.\\n     *\\n     * The supplied `callback` function is called with two arguments: `err` and`derivedKey`. If an error occurs while deriving the key, `err` will be set;\\n     * otherwise `err` will be `null`. By default, the successfully generated`derivedKey` will be passed to the callback as a `Buffer`. An error will be\\n     * thrown if any of the input arguments specify invalid values or types.\\n     *\\n     * If `digest` is `null`, `'sha1'` will be used. This behavior is deprecated,\\n     * please specify a `digest` explicitly.\\n     *\\n     * The `iterations` argument must be a number set as high as possible. The\\n     * higher the number of iterations, the more secure the derived key will be,\\n     * but will take a longer amount of time to complete.\\n     *\\n     * The `salt` should be as unique as possible. It is recommended that a salt is\\n     * random and at least 16 bytes long. See [NIST SP 800-132](https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf) for details.\\n     *\\n     * When passing strings for `password` or `salt`, please consider `caveats when using strings as inputs to cryptographic APIs`.\\n     *\\n     * ```js\\n     * const {\\n     *   pbkdf2\\n     * } = await import('crypto');\\n     *\\n     * pbkdf2('secret', 'salt', 100000, 64, 'sha512', (err, derivedKey) => {\\n     *   if (err) throw err;\\n     *   console.log(derivedKey.toString('hex'));  // '3745e48...08d59ae'\\n     * });\\n     * ```\\n     *\\n     * The `crypto.DEFAULT_ENCODING` property can be used to change the way the`derivedKey` is passed to the callback. This property, however, has been\\n     * deprecated and use should be avoided.\\n     *\\n     * ```js\\n     * import crypto from 'crypto';\\n     * crypto.DEFAULT_ENCODING = 'hex';\\n     * crypto.pbkdf2('secret', 'salt', 100000, 512, 'sha512', (err, derivedKey) => {\\n     *   if (err) throw err;\\n     *   console.log(derivedKey);  // '3745e48...aa39b34'\\n     * });\\n     * ```\\n     *\\n     * An array of supported digest functions can be retrieved using {@link getHashes}.\\n     *\\n     * This API uses libuv's threadpool, which can have surprising and\\n     * negative performance implications for some applications; see the `UV_THREADPOOL_SIZE` documentation for more information.\\n     * @since v0.5.5\\n     */\\n    function pbkdf2(password: BinaryLike, salt: BinaryLike, iterations: number, keylen: number, digest: string, callback: (err: Error | null, derivedKey: Buffer) => void): void;\\n    /**\\n     * Provides a synchronous Password-Based Key Derivation Function 2 (PBKDF2)\\n     * implementation. A selected HMAC digest algorithm specified by `digest` is\\n     * applied to derive a key of the requested byte length (`keylen`) from the`password`, `salt` and `iterations`.\\n     *\\n     * If an error occurs an `Error` will be thrown, otherwise the derived key will be\\n     * returned as a `Buffer`.\\n     *\\n     * If `digest` is `null`, `'sha1'` will be used. This behavior is deprecated,\\n     * please specify a `digest` explicitly.\\n     *\\n     * The `iterations` argument must be a number set as high as possible. The\\n     * higher the number of iterations, the more secure the derived key will be,\\n     * but will take a longer amount of time to complete.\\n     *\\n     * The `salt` should be as unique as possible. It is recommended that a salt is\\n     * random and at least 16 bytes long. See [NIST SP 800-132](https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf) for details.\\n     *\\n     * When passing strings for `password` or `salt`, please consider `caveats when using strings as inputs to cryptographic APIs`.\\n     *\\n     * ```js\\n     * const {\\n     *   pbkdf2Sync\\n     * } = await import('crypto');\\n     *\\n     * const key = pbkdf2Sync('secret', 'salt', 100000, 64, 'sha512');\\n     * console.log(key.toString('hex'));  // '3745e48...08d59ae'\\n     * ```\\n     *\\n     * The `crypto.DEFAULT_ENCODING` property may be used to change the way the`derivedKey` is returned. This property, however, is deprecated and use\\n     * should be avoided.\\n     *\\n     * ```js\\n     * import crypto from 'crypto';\\n     * crypto.DEFAULT_ENCODING = 'hex';\\n     * const key = crypto.pbkdf2Sync('secret', 'salt', 100000, 512, 'sha512');\\n     * console.log(key);  // '3745e48...aa39b34'\\n     * ```\\n     *\\n     * An array of supported digest functions can be retrieved using {@link getHashes}.\\n     * @since v0.9.3\\n     */\\n    function pbkdf2Sync(password: BinaryLike, salt: BinaryLike, iterations: number, keylen: number, digest: string): Buffer;\\n    /**\\n     * Generates cryptographically strong pseudorandom data. The `size` argument\\n     * is a number indicating the number of bytes to generate.\\n     *\\n     * If a `callback` function is provided, the bytes are generated asynchronously\\n     * and the `callback` function is invoked with two arguments: `err` and `buf`.\\n     * If an error occurs, `err` will be an `Error` object; otherwise it is `null`. The`buf` argument is a `Buffer` containing the generated bytes.\\n     *\\n     * ```js\\n     * // Asynchronous\\n     * const {\\n     *   randomBytes\\n     * } = await import('crypto');\\n     *\\n     * randomBytes(256, (err, buf) => {\\n     *   if (err) throw err;\\n     *   console.log(`${buf.length} bytes of random data: ${buf.toString('hex')}`);\\n     * });\\n     * ```\\n     *\\n     * If the `callback` function is not provided, the random bytes are generated\\n     * synchronously and returned as a `Buffer`. An error will be thrown if\\n     * there is a problem generating the bytes.\\n     *\\n     * ```js\\n     * // Synchronous\\n     * const {\\n     *   randomBytes\\n     * } = await import('crypto');\\n     *\\n     * const buf = randomBytes(256);\\n     * console.log(\\n     *   `${buf.length} bytes of random data: ${buf.toString('hex')}`);\\n     * ```\\n     *\\n     * The `crypto.randomBytes()` method will not complete until there is\\n     * sufficient entropy available.\\n     * This should normally never take longer than a few milliseconds. The only time\\n     * when generating the random bytes may conceivably block for a longer period of\\n     * time is right after boot, when the whole system is still low on entropy.\\n     *\\n     * This API uses libuv's threadpool, which can have surprising and\\n     * negative performance implications for some applications; see the `UV_THREADPOOL_SIZE` documentation for more information.\\n     *\\n     * The asynchronous version of `crypto.randomBytes()` is carried out in a single\\n     * threadpool request. To minimize threadpool task length variation, partition\\n     * large `randomBytes` requests when doing so as part of fulfilling a client\\n     * request.\\n     * @since v0.5.8\\n     * @param size The number of bytes to generate. The `size` must not be larger than `2**31 - 1`.\\n     * @return if the `callback` function is not provided.\\n     */\\n    function randomBytes(size: number): Buffer;\\n    function randomBytes(size: number, callback: (err: Error | null, buf: Buffer) => void): void;\\n    function pseudoRandomBytes(size: number): Buffer;\\n    function pseudoRandomBytes(size: number, callback: (err: Error | null, buf: Buffer) => void): void;\\n    /**\\n     * Return a random integer `n` such that `min <= n < max`.  This\\n     * implementation avoids [modulo bias](https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#Modulo_bias).\\n     *\\n     * The range (`max - min`) must be less than 2^48. `min` and `max` must\\n     * be [safe integers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger).\\n     *\\n     * If the `callback` function is not provided, the random integer is\\n     * generated synchronously.\\n     *\\n     * ```js\\n     * // Asynchronous\\n     * const {\\n     *   randomInt\\n     * } = await import('crypto');\\n     *\\n     * randomInt(3, (err, n) => {\\n     *   if (err) throw err;\\n     *   console.log(`Random number chosen from (0, 1, 2): ${n}`);\\n     * });\\n     * ```\\n     *\\n     * ```js\\n     * // Synchronous\\n     * const {\\n     *   randomInt\\n     * } = await import('crypto');\\n     *\\n     * const n = randomInt(3);\\n     * console.log(`Random number chosen from (0, 1, 2): ${n}`);\\n     * ```\\n     *\\n     * ```js\\n     * // With `min` argument\\n     * const {\\n     *   randomInt\\n     * } = await import('crypto');\\n     *\\n     * const n = randomInt(1, 7);\\n     * console.log(`The dice rolled: ${n}`);\\n     * ```\\n     * @since v14.10.0, v12.19.0\\n     * @param [min=0] Start of random range (inclusive).\\n     * @param max End of random range (exclusive).\\n     * @param callback `function(err, n) {}`.\\n     */\\n    function randomInt(max: number): number;\\n    function randomInt(min: number, max: number): number;\\n    function randomInt(max: number, callback: (err: Error | null, value: number) => void): void;\\n    function randomInt(min: number, max: number, callback: (err: Error | null, value: number) => void): void;\\n    /**\\n     * Synchronous version of {@link randomFill}.\\n     *\\n     * ```js\\n     * import { Buffer } from 'buffer';\\n     * const { randomFillSync } = await import('crypto');\\n     *\\n     * const buf = Buffer.alloc(10);\\n     * console.log(randomFillSync(buf).toString('hex'));\\n     *\\n     * randomFillSync(buf, 5);\\n     * console.log(buf.toString('hex'));\\n     *\\n     * // The above is equivalent to the following:\\n     * randomFillSync(buf, 5, 5);\\n     * console.log(buf.toString('hex'));\\n     * ```\\n     *\\n     * Any `ArrayBuffer`, `TypedArray` or `DataView` instance may be passed as`buffer`.\\n     *\\n     * ```js\\n     * import { Buffer } from 'buffer';\\n     * const { randomFillSync } = await import('crypto');\\n     *\\n     * const a = new Uint32Array(10);\\n     * console.log(Buffer.from(randomFillSync(a).buffer,\\n     *                         a.byteOffset, a.byteLength).toString('hex'));\\n     *\\n     * const b = new DataView(new ArrayBuffer(10));\\n     * console.log(Buffer.from(randomFillSync(b).buffer,\\n     *                         b.byteOffset, b.byteLength).toString('hex'));\\n     *\\n     * const c = new ArrayBuffer(10);\\n     * console.log(Buffer.from(randomFillSync(c)).toString('hex'));\\n     * ```\\n     * @since v7.10.0, v6.13.0\\n     * @param buffer Must be supplied. The size of the provided `buffer` must not be larger than `2**31 - 1`.\\n     * @param [offset=0]\\n     * @param [size=buffer.length - offset]\\n     * @return The object passed as `buffer` argument.\\n     */\\n    function randomFillSync<T extends NodeJS.ArrayBufferView>(buffer: T, offset?: number, size?: number): T;\\n    /**\\n     * This function is similar to {@link randomBytes} but requires the first\\n     * argument to be a `Buffer` that will be filled. It also\\n     * requires that a callback is passed in.\\n     *\\n     * If the `callback` function is not provided, an error will be thrown.\\n     *\\n     * ```js\\n     * import { Buffer } from 'buffer';\\n     * const { randomFill } = await import('crypto');\\n     *\\n     * const buf = Buffer.alloc(10);\\n     * randomFill(buf, (err, buf) => {\\n     *   if (err) throw err;\\n     *   console.log(buf.toString('hex'));\\n     * });\\n     *\\n     * randomFill(buf, 5, (err, buf) => {\\n     *   if (err) throw err;\\n     *   console.log(buf.toString('hex'));\\n     * });\\n     *\\n     * // The above is equivalent to the following:\\n     * randomFill(buf, 5, 5, (err, buf) => {\\n     *   if (err) throw err;\\n     *   console.log(buf.toString('hex'));\\n     * });\\n     * ```\\n     *\\n     * Any `ArrayBuffer`, `TypedArray`, or `DataView` instance may be passed as`buffer`.\\n     *\\n     * While this includes instances of `Float32Array` and `Float64Array`, this\\n     * function should not be used to generate random floating-point numbers. The\\n     * result may contain `+Infinity`, `-Infinity`, and `NaN`, and even if the array\\n     * contains finite numbers only, they are not drawn from a uniform random\\n     * distribution and have no meaningful lower or upper bounds.\\n     *\\n     * ```js\\n     * import { Buffer } from 'buffer';\\n     * const { randomFill } = await import('crypto');\\n     *\\n     * const a = new Uint32Array(10);\\n     * randomFill(a, (err, buf) => {\\n     *   if (err) throw err;\\n     *   console.log(Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength)\\n     *     .toString('hex'));\\n     * });\\n     *\\n     * const b = new DataView(new ArrayBuffer(10));\\n     * randomFill(b, (err, buf) => {\\n     *   if (err) throw err;\\n     *   console.log(Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength)\\n     *     .toString('hex'));\\n     * });\\n     *\\n     * const c = new ArrayBuffer(10);\\n     * randomFill(c, (err, buf) => {\\n     *   if (err) throw err;\\n     *   console.log(Buffer.from(buf).toString('hex'));\\n     * });\\n     * ```\\n     *\\n     * This API uses libuv's threadpool, which can have surprising and\\n     * negative performance implications for some applications; see the `UV_THREADPOOL_SIZE` documentation for more information.\\n     *\\n     * The asynchronous version of `crypto.randomFill()` is carried out in a single\\n     * threadpool request. To minimize threadpool task length variation, partition\\n     * large `randomFill` requests when doing so as part of fulfilling a client\\n     * request.\\n     * @since v7.10.0, v6.13.0\\n     * @param buffer Must be supplied. The size of the provided `buffer` must not be larger than `2**31 - 1`.\\n     * @param [offset=0]\\n     * @param [size=buffer.length - offset]\\n     * @param callback `function(err, buf) {}`.\\n     */\\n    function randomFill<T extends NodeJS.ArrayBufferView>(buffer: T, callback: (err: Error | null, buf: T) => void): void;\\n    function randomFill<T extends NodeJS.ArrayBufferView>(buffer: T, offset: number, callback: (err: Error | null, buf: T) => void): void;\\n    function randomFill<T extends NodeJS.ArrayBufferView>(buffer: T, offset: number, size: number, callback: (err: Error | null, buf: T) => void): void;\\n    interface ScryptOptions {\\n        cost?: number | undefined;\\n        blockSize?: number | undefined;\\n        parallelization?: number | undefined;\\n        N?: number | undefined;\\n        r?: number | undefined;\\n        p?: number | undefined;\\n        maxmem?: number | undefined;\\n    }\\n    /**\\n     * Provides an asynchronous [scrypt](https://en.wikipedia.org/wiki/Scrypt) implementation. Scrypt is a password-based\\n     * key derivation function that is designed to be expensive computationally and\\n     * memory-wise in order to make brute-force attacks unrewarding.\\n     *\\n     * The `salt` should be as unique as possible. It is recommended that a salt is\\n     * random and at least 16 bytes long. See [NIST SP 800-132](https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf) for details.\\n     *\\n     * When passing strings for `password` or `salt`, please consider `caveats when using strings as inputs to cryptographic APIs`.\\n     *\\n     * The `callback` function is called with two arguments: `err` and `derivedKey`.`err` is an exception object when key derivation fails, otherwise `err` is`null`. `derivedKey` is passed to the\\n     * callback as a `Buffer`.\\n     *\\n     * An exception is thrown when any of the input arguments specify invalid values\\n     * or types.\\n     *\\n     * ```js\\n     * const {\\n     *   scrypt\\n     * } = await import('crypto');\\n     *\\n     * // Using the factory defaults.\\n     * scrypt('password', 'salt', 64, (err, derivedKey) => {\\n     *   if (err) throw err;\\n     *   console.log(derivedKey.toString('hex'));  // '3745e48...08d59ae'\\n     * });\\n     * // Using a custom N parameter. Must be a power of two.\\n     * scrypt('password', 'salt', 64, { N: 1024 }, (err, derivedKey) => {\\n     *   if (err) throw err;\\n     *   console.log(derivedKey.toString('hex'));  // '3745e48...aa39b34'\\n     * });\\n     * ```\\n     * @since v10.5.0\\n     */\\n    function scrypt(password: BinaryLike, salt: BinaryLike, keylen: number, callback: (err: Error | null, derivedKey: Buffer) => void): void;\\n    function scrypt(password: BinaryLike, salt: BinaryLike, keylen: number, options: ScryptOptions, callback: (err: Error | null, derivedKey: Buffer) => void): void;\\n    /**\\n     * Provides a synchronous [scrypt](https://en.wikipedia.org/wiki/Scrypt) implementation. Scrypt is a password-based\\n     * key derivation function that is designed to be expensive computationally and\\n     * memory-wise in order to make brute-force attacks unrewarding.\\n     *\\n     * The `salt` should be as unique as possible. It is recommended that a salt is\\n     * random and at least 16 bytes long. See [NIST SP 800-132](https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf) for details.\\n     *\\n     * When passing strings for `password` or `salt`, please consider `caveats when using strings as inputs to cryptographic APIs`.\\n     *\\n     * An exception is thrown when key derivation fails, otherwise the derived key is\\n     * returned as a `Buffer`.\\n     *\\n     * An exception is thrown when any of the input arguments specify invalid values\\n     * or types.\\n     *\\n     * ```js\\n     * const {\\n     *   scryptSync\\n     * } = await import('crypto');\\n     * // Using the factory defaults.\\n     *\\n     * const key1 = scryptSync('password', 'salt', 64);\\n     * console.log(key1.toString('hex'));  // '3745e48...08d59ae'\\n     * // Using a custom N parameter. Must be a power of two.\\n     * const key2 = scryptSync('password', 'salt', 64, { N: 1024 });\\n     * console.log(key2.toString('hex'));  // '3745e48...aa39b34'\\n     * ```\\n     * @since v10.5.0\\n     */\\n    function scryptSync(password: BinaryLike, salt: BinaryLike, keylen: number, options?: ScryptOptions): Buffer;\\n    interface RsaPublicKey {\\n        key: KeyLike;\\n        padding?: number | undefined;\\n    }\\n    interface RsaPrivateKey {\\n        key: KeyLike;\\n        passphrase?: string | undefined;\\n        /**\\n         * @default 'sha1'\\n         */\\n        oaepHash?: string | undefined;\\n        oaepLabel?: NodeJS.TypedArray | undefined;\\n        padding?: number | undefined;\\n    }\\n    /**\\n     * Encrypts the content of `buffer` with `key` and returns a new `Buffer` with encrypted content. The returned data can be decrypted using\\n     * the corresponding private key, for example using {@link privateDecrypt}.\\n     *\\n     * If `key` is not a `KeyObject`, this function behaves as if`key` had been passed to {@link createPublicKey}. If it is an\\n     * object, the `padding` property can be passed. Otherwise, this function uses`RSA_PKCS1_OAEP_PADDING`.\\n     *\\n     * Because RSA public keys can be derived from private keys, a private key may\\n     * be passed instead of a public key.\\n     * @since v0.11.14\\n     */\\n    function publicEncrypt(key: RsaPublicKey | RsaPrivateKey | KeyLike, buffer: NodeJS.ArrayBufferView): Buffer;\\n    /**\\n     * Decrypts `buffer` with `key`.`buffer` was previously encrypted using\\n     * the corresponding private key, for example using {@link privateEncrypt}.\\n     *\\n     * If `key` is not a `KeyObject`, this function behaves as if`key` had been passed to {@link createPublicKey}. If it is an\\n     * object, the `padding` property can be passed. Otherwise, this function uses`RSA_PKCS1_PADDING`.\\n     *\\n     * Because RSA public keys can be derived from private keys, a private key may\\n     * be passed instead of a public key.\\n     * @since v1.1.0\\n     */\\n    function publicDecrypt(key: RsaPublicKey | RsaPrivateKey | KeyLike, buffer: NodeJS.ArrayBufferView): Buffer;\\n    /**\\n     * Decrypts `buffer` with `privateKey`. `buffer` was previously encrypted using\\n     * the corresponding public key, for example using {@link publicEncrypt}.\\n     *\\n     * If `privateKey` is not a `KeyObject`, this function behaves as if`privateKey` had been passed to {@link createPrivateKey}. If it is an\\n     * object, the `padding` property can be passed. Otherwise, this function uses`RSA_PKCS1_OAEP_PADDING`.\\n     * @since v0.11.14\\n     */\\n    function privateDecrypt(privateKey: RsaPrivateKey | KeyLike, buffer: NodeJS.ArrayBufferView): Buffer;\\n    /**\\n     * Encrypts `buffer` with `privateKey`. The returned data can be decrypted using\\n     * the corresponding public key, for example using {@link publicDecrypt}.\\n     *\\n     * If `privateKey` is not a `KeyObject`, this function behaves as if`privateKey` had been passed to {@link createPrivateKey}. If it is an\\n     * object, the `padding` property can be passed. Otherwise, this function uses`RSA_PKCS1_PADDING`.\\n     * @since v1.1.0\\n     */\\n    function privateEncrypt(privateKey: RsaPrivateKey | KeyLike, buffer: NodeJS.ArrayBufferView): Buffer;\\n    /**\\n     * ```js\\n     * const {\\n     *   getCiphers\\n     * } = await import('crypto');\\n     *\\n     * console.log(getCiphers()); // ['aes-128-cbc', 'aes-128-ccm', ...]\\n     * ```\\n     * @since v0.9.3\\n     * @return An array with the names of the supported cipher algorithms.\\n     */\\n    function getCiphers(): string[];\\n    /**\\n     * ```js\\n     * const {\\n     *   getCurves\\n     * } = await import('crypto');\\n     *\\n     * console.log(getCurves()); // ['Oakley-EC2N-3', 'Oakley-EC2N-4', ...]\\n     * ```\\n     * @since v2.3.0\\n     * @return An array with the names of the supported elliptic curves.\\n     */\\n    function getCurves(): string[];\\n    /**\\n     * @since v10.0.0\\n     * @return `1` if and only if a FIPS compliant crypto provider is currently in use, `0` otherwise. A future semver-major release may change the return type of this API to a {boolean}.\\n     */\\n    function getFips(): 1 | 0;\\n    /**\\n     * Enables the FIPS compliant crypto provider in a FIPS-enabled Node.js build. Throws an error if FIPS mode is not available.\\n     * @since v10.0.0\\n     * @param bool `true` to enable FIPS mode.\\n     */\\n    function setFips(bool: boolean): void;\\n    /**\\n     * ```js\\n     * const {\\n     *   getHashes\\n     * } = await import('crypto');\\n     *\\n     * console.log(getHashes()); // ['DSA', 'DSA-SHA', 'DSA-SHA1', ...]\\n     * ```\\n     * @since v0.9.3\\n     * @return An array of the names of the supported hash algorithms, such as `'RSA-SHA256'`. Hash algorithms are also called \\\"digest\\\" algorithms.\\n     */\\n    function getHashes(): string[];\\n    /**\\n     * The `ECDH` class is a utility for creating Elliptic Curve Diffie-Hellman (ECDH)\\n     * key exchanges.\\n     *\\n     * Instances of the `ECDH` class can be created using the {@link createECDH} function.\\n     *\\n     * ```js\\n     * import assert from 'assert';\\n     *\\n     * const {\\n     *   createECDH\\n     * } = await import('crypto');\\n     *\\n     * // Generate Alice's keys...\\n     * const alice = createECDH('secp521r1');\\n     * const aliceKey = alice.generateKeys();\\n     *\\n     * // Generate Bob's keys...\\n     * const bob = createECDH('secp521r1');\\n     * const bobKey = bob.generateKeys();\\n     *\\n     * // Exchange and generate the secret...\\n     * const aliceSecret = alice.computeSecret(bobKey);\\n     * const bobSecret = bob.computeSecret(aliceKey);\\n     *\\n     * assert.strictEqual(aliceSecret.toString('hex'), bobSecret.toString('hex'));\\n     * // OK\\n     * ```\\n     * @since v0.11.14\\n     */\\n    class ECDH {\\n        private constructor();\\n        /**\\n         * Converts the EC Diffie-Hellman public key specified by `key` and `curve` to the\\n         * format specified by `format`. The `format` argument specifies point encoding\\n         * and can be `'compressed'`, `'uncompressed'` or `'hybrid'`. The supplied key is\\n         * interpreted using the specified `inputEncoding`, and the returned key is encoded\\n         * using the specified `outputEncoding`.\\n         *\\n         * Use {@link getCurves} to obtain a list of available curve names.\\n         * On recent OpenSSL releases, `openssl ecparam -list_curves` will also display\\n         * the name and description of each available elliptic curve.\\n         *\\n         * If `format` is not specified the point will be returned in `'uncompressed'`format.\\n         *\\n         * If the `inputEncoding` is not provided, `key` is expected to be a `Buffer`,`TypedArray`, or `DataView`.\\n         *\\n         * Example (uncompressing a key):\\n         *\\n         * ```js\\n         * const {\\n         *   createECDH,\\n         *   ECDH\\n         * } = await import('crypto');\\n         *\\n         * const ecdh = createECDH('secp256k1');\\n         * ecdh.generateKeys();\\n         *\\n         * const compressedKey = ecdh.getPublicKey('hex', 'compressed');\\n         *\\n         * const uncompressedKey = ECDH.convertKey(compressedKey,\\n         *                                         'secp256k1',\\n         *                                         'hex',\\n         *                                         'hex',\\n         *                                         'uncompressed');\\n         *\\n         * // The converted key and the uncompressed public key should be the same\\n         * console.log(uncompressedKey === ecdh.getPublicKey('hex'));\\n         * ```\\n         * @since v10.0.0\\n         * @param inputEncoding The `encoding` of the `key` string.\\n         * @param outputEncoding The `encoding` of the return value.\\n         * @param [format='uncompressed']\\n         */\\n        static convertKey(\\n            key: BinaryLike,\\n            curve: string,\\n            inputEncoding?: BinaryToTextEncoding,\\n            outputEncoding?: 'latin1' | 'hex' | 'base64' | 'base64url',\\n            format?: 'uncompressed' | 'compressed' | 'hybrid'\\n        ): Buffer | string;\\n        /**\\n         * Generates private and public EC Diffie-Hellman key values, and returns\\n         * the public key in the specified `format` and `encoding`. This key should be\\n         * transferred to the other party.\\n         *\\n         * The `format` argument specifies point encoding and can be `'compressed'` or`'uncompressed'`. If `format` is not specified, the point will be returned in`'uncompressed'` format.\\n         *\\n         * If `encoding` is provided a string is returned; otherwise a `Buffer` is returned.\\n         * @since v0.11.14\\n         * @param encoding The `encoding` of the return value.\\n         * @param [format='uncompressed']\\n         */\\n        generateKeys(): Buffer;\\n        generateKeys(encoding: BinaryToTextEncoding, format?: ECDHKeyFormat): string;\\n        /**\\n         * Computes the shared secret using `otherPublicKey` as the other\\n         * party's public key and returns the computed shared secret. The supplied\\n         * key is interpreted using specified `inputEncoding`, and the returned secret\\n         * is encoded using the specified `outputEncoding`.\\n         * If the `inputEncoding` is not\\n         * provided, `otherPublicKey` is expected to be a `Buffer`, `TypedArray`, or`DataView`.\\n         *\\n         * If `outputEncoding` is given a string will be returned; otherwise a `Buffer` is returned.\\n         *\\n         * `ecdh.computeSecret` will throw an`ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY` error when `otherPublicKey`lies outside of the elliptic curve. Since `otherPublicKey` is\\n         * usually supplied from a remote user over an insecure network,\\n         * be sure to handle this exception accordingly.\\n         * @since v0.11.14\\n         * @param inputEncoding The `encoding` of the `otherPublicKey` string.\\n         * @param outputEncoding The `encoding` of the return value.\\n         */\\n        computeSecret(otherPublicKey: NodeJS.ArrayBufferView): Buffer;\\n        computeSecret(otherPublicKey: string, inputEncoding: BinaryToTextEncoding): Buffer;\\n        computeSecret(otherPublicKey: NodeJS.ArrayBufferView, outputEncoding: BinaryToTextEncoding): string;\\n        computeSecret(otherPublicKey: string, inputEncoding: BinaryToTextEncoding, outputEncoding: BinaryToTextEncoding): string;\\n        /**\\n         * If `encoding` is specified, a string is returned; otherwise a `Buffer` is\\n         * returned.\\n         * @since v0.11.14\\n         * @param encoding The `encoding` of the return value.\\n         * @return The EC Diffie-Hellman in the specified `encoding`.\\n         */\\n        getPrivateKey(): Buffer;\\n        getPrivateKey(encoding: BinaryToTextEncoding): string;\\n        /**\\n         * The `format` argument specifies point encoding and can be `'compressed'` or`'uncompressed'`. If `format` is not specified the point will be returned in`'uncompressed'` format.\\n         *\\n         * If `encoding` is specified, a string is returned; otherwise a `Buffer` is\\n         * returned.\\n         * @since v0.11.14\\n         * @param [encoding] The `encoding` of the return value.\\n         * @param [format='uncompressed']\\n         * @return The EC Diffie-Hellman public key in the specified `encoding` and `format`.\\n         */\\n        getPublicKey(encoding?: null, format?: ECDHKeyFormat): Buffer;\\n        getPublicKey(encoding: BinaryToTextEncoding, format?: ECDHKeyFormat): string;\\n        /**\\n         * Sets the EC Diffie-Hellman private key.\\n         * If `encoding` is provided, `privateKey` is expected\\n         * to be a string; otherwise `privateKey` is expected to be a `Buffer`,`TypedArray`, or `DataView`.\\n         *\\n         * If `privateKey` is not valid for the curve specified when the `ECDH` object was\\n         * created, an error is thrown. Upon setting the private key, the associated\\n         * public point (key) is also generated and set in the `ECDH` object.\\n         * @since v0.11.14\\n         * @param encoding The `encoding` of the `privateKey` string.\\n         */\\n        setPrivateKey(privateKey: NodeJS.ArrayBufferView): void;\\n        setPrivateKey(privateKey: string, encoding: BinaryToTextEncoding): void;\\n    }\\n    /**\\n     * Creates an Elliptic Curve Diffie-Hellman (`ECDH`) key exchange object using a\\n     * predefined curve specified by the `curveName` string. Use {@link getCurves} to obtain a list of available curve names. On recent\\n     * OpenSSL releases, `openssl ecparam -list_curves` will also display the name\\n     * and description of each available elliptic curve.\\n     * @since v0.11.14\\n     */\\n    function createECDH(curveName: string): ECDH;\\n    /**\\n     * This function is based on a constant-time algorithm.\\n     * Returns true if `a` is equal to `b`, without leaking timing information that\\n     * would allow an attacker to guess one of the values. This is suitable for\\n     * comparing HMAC digests or secret values like authentication cookies or [capability urls](https://www.w3.org/TR/capability-urls/).\\n     *\\n     * `a` and `b` must both be `Buffer`s, `TypedArray`s, or `DataView`s, and they\\n     * must have the same byte length. An error is thrown if `a` and `b` have\\n     * different byte lengths.\\n     *\\n     * If at least one of `a` and `b` is a `TypedArray` with more than one byte per\\n     * entry, such as `Uint16Array`, the result will be computed using the platform\\n     * byte order.\\n     *\\n     * Use of `crypto.timingSafeEqual` does not guarantee that the _surrounding_ code\\n     * is timing-safe. Care should be taken to ensure that the surrounding code does\\n     * not introduce timing vulnerabilities.\\n     * @since v6.6.0\\n     */\\n    function timingSafeEqual(a: NodeJS.ArrayBufferView, b: NodeJS.ArrayBufferView): boolean;\\n    /** @deprecated since v10.0.0 */\\n    const DEFAULT_ENCODING: BufferEncoding;\\n    type KeyType = 'rsa' | 'rsa-pss' | 'dsa' | 'ec' | 'ed25519' | 'ed448' | 'x25519' | 'x448';\\n    type KeyFormat = 'pem' | 'der' | 'jwk';\\n    interface BasePrivateKeyEncodingOptions<T extends KeyFormat> {\\n        format: T;\\n        cipher?: string | undefined;\\n        passphrase?: string | undefined;\\n    }\\n    interface KeyPairKeyObjectResult {\\n        publicKey: KeyObject;\\n        privateKey: KeyObject;\\n    }\\n    interface ED25519KeyPairKeyObjectOptions {}\\n    interface ED448KeyPairKeyObjectOptions {}\\n    interface X25519KeyPairKeyObjectOptions {}\\n    interface X448KeyPairKeyObjectOptions {}\\n    interface ECKeyPairKeyObjectOptions {\\n        /**\\n         * Name of the curve to use\\n         */\\n        namedCurve: string;\\n    }\\n    interface RSAKeyPairKeyObjectOptions {\\n        /**\\n         * Key size in bits\\n         */\\n        modulusLength: number;\\n        /**\\n         * Public exponent\\n         * @default 0x10001\\n         */\\n        publicExponent?: number | undefined;\\n    }\\n    interface RSAPSSKeyPairKeyObjectOptions {\\n        /**\\n         * Key size in bits\\n         */\\n        modulusLength: number;\\n        /**\\n         * Public exponent\\n         * @default 0x10001\\n         */\\n        publicExponent?: number | undefined;\\n        /**\\n         * Name of the message digest\\n         */\\n        hashAlgorithm?: string;\\n        /**\\n         * Name of the message digest used by MGF1\\n         */\\n        mgf1HashAlgorithm?: string;\\n        /**\\n         * Minimal salt length in bytes\\n         */\\n        saltLength?: string;\\n    }\\n    interface DSAKeyPairKeyObjectOptions {\\n        /**\\n         * Key size in bits\\n         */\\n        modulusLength: number;\\n        /**\\n         * Size of q in bits\\n         */\\n        divisorLength: number;\\n    }\\n    interface RSAKeyPairOptions<PubF extends KeyFormat, PrivF extends KeyFormat> {\\n        /**\\n         * Key size in bits\\n         */\\n        modulusLength: number;\\n        /**\\n         * Public exponent\\n         * @default 0x10001\\n         */\\n        publicExponent?: number | undefined;\\n        publicKeyEncoding: {\\n            type: 'pkcs1' | 'spki';\\n            format: PubF;\\n        };\\n        privateKeyEncoding: BasePrivateKeyEncodingOptions<PrivF> & {\\n            type: 'pkcs1' | 'pkcs8';\\n        };\\n    }\\n    interface RSAPSSKeyPairOptions<PubF extends KeyFormat, PrivF extends KeyFormat> {\\n        /**\\n         * Key size in bits\\n         */\\n        modulusLength: number;\\n        /**\\n         * Public exponent\\n         * @default 0x10001\\n         */\\n        publicExponent?: number | undefined;\\n        /**\\n         * Name of the message digest\\n         */\\n        hashAlgorithm?: string;\\n        /**\\n         * Name of the message digest used by MGF1\\n         */\\n        mgf1HashAlgorithm?: string;\\n        /**\\n         * Minimal salt length in bytes\\n         */\\n        saltLength?: string;\\n        publicKeyEncoding: {\\n            type: 'spki';\\n            format: PubF;\\n        };\\n        privateKeyEncoding: BasePrivateKeyEncodingOptions<PrivF> & {\\n            type: 'pkcs8';\\n        };\\n    }\\n    interface DSAKeyPairOptions<PubF extends KeyFormat, PrivF extends KeyFormat> {\\n        /**\\n         * Key size in bits\\n         */\\n        modulusLength: number;\\n        /**\\n         * Size of q in bits\\n         */\\n        divisorLength: number;\\n        publicKeyEncoding: {\\n            type: 'spki';\\n            format: PubF;\\n        };\\n        privateKeyEncoding: BasePrivateKeyEncodingOptions<PrivF> & {\\n            type: 'pkcs8';\\n        };\\n    }\\n    interface ECKeyPairOptions<PubF extends KeyFormat, PrivF extends KeyFormat> {\\n        /**\\n         * Name of the curve to use.\\n         */\\n        namedCurve: string;\\n        publicKeyEncoding: {\\n            type: 'pkcs1' | 'spki';\\n            format: PubF;\\n        };\\n        privateKeyEncoding: BasePrivateKeyEncodingOptions<PrivF> & {\\n            type: 'sec1' | 'pkcs8';\\n        };\\n    }\\n    interface ED25519KeyPairOptions<PubF extends KeyFormat, PrivF extends KeyFormat> {\\n        publicKeyEncoding: {\\n            type: 'spki';\\n            format: PubF;\\n        };\\n        privateKeyEncoding: BasePrivateKeyEncodingOptions<PrivF> & {\\n            type: 'pkcs8';\\n        };\\n    }\\n    interface ED448KeyPairOptions<PubF extends KeyFormat, PrivF extends KeyFormat> {\\n        publicKeyEncoding: {\\n            type: 'spki';\\n            format: PubF;\\n        };\\n        privateKeyEncoding: BasePrivateKeyEncodingOptions<PrivF> & {\\n            type: 'pkcs8';\\n        };\\n    }\\n    interface X25519KeyPairOptions<PubF extends KeyFormat, PrivF extends KeyFormat> {\\n        publicKeyEncoding: {\\n            type: 'spki';\\n            format: PubF;\\n        };\\n        privateKeyEncoding: BasePrivateKeyEncodingOptions<PrivF> & {\\n            type: 'pkcs8';\\n        };\\n    }\\n    interface X448KeyPairOptions<PubF extends KeyFormat, PrivF extends KeyFormat> {\\n        publicKeyEncoding: {\\n            type: 'spki';\\n            format: PubF;\\n        };\\n        privateKeyEncoding: BasePrivateKeyEncodingOptions<PrivF> & {\\n            type: 'pkcs8';\\n        };\\n    }\\n    interface KeyPairSyncResult<T1 extends string | Buffer, T2 extends string | Buffer> {\\n        publicKey: T1;\\n        privateKey: T2;\\n    }\\n    /**\\n     * Generates a new asymmetric key pair of the given `type`. RSA, RSA-PSS, DSA, EC,\\n     * Ed25519, Ed448, X25519, X448, and DH are currently supported.\\n     *\\n     * If a `publicKeyEncoding` or `privateKeyEncoding` was specified, this function\\n     * behaves as if `keyObject.export()` had been called on its result. Otherwise,\\n     * the respective part of the key is returned as a `KeyObject`.\\n     *\\n     * When encoding public keys, it is recommended to use `'spki'`. When encoding\\n     * private keys, it is recommended to use `'pkcs8'` with a strong passphrase,\\n     * and to keep the passphrase confidential.\\n     *\\n     * ```js\\n     * const {\\n     *   generateKeyPairSync\\n     * } = await import('crypto');\\n     *\\n     * const {\\n     *   publicKey,\\n     *   privateKey,\\n     * } = generateKeyPairSync('rsa', {\\n     *   modulusLength: 4096,\\n     *   publicKeyEncoding: {\\n     *     type: 'spki',\\n     *     format: 'pem'\\n     *   },\\n     *   privateKeyEncoding: {\\n     *     type: 'pkcs8',\\n     *     format: 'pem',\\n     *     cipher: 'aes-256-cbc',\\n     *     passphrase: 'top secret'\\n     *   }\\n     * });\\n     * ```\\n     *\\n     * The return value `{ publicKey, privateKey }` represents the generated key pair.\\n     * When PEM encoding was selected, the respective key will be a string, otherwise\\n     * it will be a buffer containing the data encoded as DER.\\n     * @since v10.12.0\\n     * @param type Must be `'rsa'`, `'rsa-pss'`, `'dsa'`, `'ec'`, `'ed25519'`, `'ed448'`, `'x25519'`, `'x448'`, or `'dh'`.\\n     */\\n    function generateKeyPairSync(type: 'rsa', options: RSAKeyPairOptions<'pem', 'pem'>): KeyPairSyncResult<string, string>;\\n    function generateKeyPairSync(type: 'rsa', options: RSAKeyPairOptions<'pem', 'der'>): KeyPairSyncResult<string, Buffer>;\\n    function generateKeyPairSync(type: 'rsa', options: RSAKeyPairOptions<'der', 'pem'>): KeyPairSyncResult<Buffer, string>;\\n    function generateKeyPairSync(type: 'rsa', options: RSAKeyPairOptions<'der', 'der'>): KeyPairSyncResult<Buffer, Buffer>;\\n    function generateKeyPairSync(type: 'rsa', options: RSAKeyPairKeyObjectOptions): KeyPairKeyObjectResult;\\n    function generateKeyPairSync(type: 'rsa-pss', options: RSAPSSKeyPairOptions<'pem', 'pem'>): KeyPairSyncResult<string, string>;\\n    function generateKeyPairSync(type: 'rsa-pss', options: RSAPSSKeyPairOptions<'pem', 'der'>): KeyPairSyncResult<string, Buffer>;\\n    function generateKeyPairSync(type: 'rsa-pss', options: RSAPSSKeyPairOptions<'der', 'pem'>): KeyPairSyncResult<Buffer, string>;\\n    function generateKeyPairSync(type: 'rsa-pss', options: RSAPSSKeyPairOptions<'der', 'der'>): KeyPairSyncResult<Buffer, Buffer>;\\n    function generateKeyPairSync(type: 'rsa-pss', options: RSAPSSKeyPairKeyObjectOptions): KeyPairKeyObjectResult;\\n    function generateKeyPairSync(type: 'dsa', options: DSAKeyPairOptions<'pem', 'pem'>): KeyPairSyncResult<string, string>;\\n    function generateKeyPairSync(type: 'dsa', options: DSAKeyPairOptions<'pem', 'der'>): KeyPairSyncResult<string, Buffer>;\\n    function generateKeyPairSync(type: 'dsa', options: DSAKeyPairOptions<'der', 'pem'>): KeyPairSyncResult<Buffer, string>;\\n    function generateKeyPairSync(type: 'dsa', options: DSAKeyPairOptions<'der', 'der'>): KeyPairSyncResult<Buffer, Buffer>;\\n    function generateKeyPairSync(type: 'dsa', options: DSAKeyPairKeyObjectOptions): KeyPairKeyObjectResult;\\n    function generateKeyPairSync(type: 'ec', options: ECKeyPairOptions<'pem', 'pem'>): KeyPairSyncResult<string, string>;\\n    function generateKeyPairSync(type: 'ec', options: ECKeyPairOptions<'pem', 'der'>): KeyPairSyncResult<string, Buffer>;\\n    function generateKeyPairSync(type: 'ec', options: ECKeyPairOptions<'der', 'pem'>): KeyPairSyncResult<Buffer, string>;\\n    function generateKeyPairSync(type: 'ec', options: ECKeyPairOptions<'der', 'der'>): KeyPairSyncResult<Buffer, Buffer>;\\n    function generateKeyPairSync(type: 'ec', options: ECKeyPairKeyObjectOptions): KeyPairKeyObjectResult;\\n    function generateKeyPairSync(type: 'ed25519', options: ED25519KeyPairOptions<'pem', 'pem'>): KeyPairSyncResult<string, string>;\\n    function generateKeyPairSync(type: 'ed25519', options: ED25519KeyPairOptions<'pem', 'der'>): KeyPairSyncResult<string, Buffer>;\\n    function generateKeyPairSync(type: 'ed25519', options: ED25519KeyPairOptions<'der', 'pem'>): KeyPairSyncResult<Buffer, string>;\\n    function generateKeyPairSync(type: 'ed25519', options: ED25519KeyPairOptions<'der', 'der'>): KeyPairSyncResult<Buffer, Buffer>;\\n    function generateKeyPairSync(type: 'ed25519', options?: ED25519KeyPairKeyObjectOptions): KeyPairKeyObjectResult;\\n    function generateKeyPairSync(type: 'ed448', options: ED448KeyPairOptions<'pem', 'pem'>): KeyPairSyncResult<string, string>;\\n    function generateKeyPairSync(type: 'ed448', options: ED448KeyPairOptions<'pem', 'der'>): KeyPairSyncResult<string, Buffer>;\\n    function generateKeyPairSync(type: 'ed448', options: ED448KeyPairOptions<'der', 'pem'>): KeyPairSyncResult<Buffer, string>;\\n    function generateKeyPairSync(type: 'ed448', options: ED448KeyPairOptions<'der', 'der'>): KeyPairSyncResult<Buffer, Buffer>;\\n    function generateKeyPairSync(type: 'ed448', options?: ED448KeyPairKeyObjectOptions): KeyPairKeyObjectResult;\\n    function generateKeyPairSync(type: 'x25519', options: X25519KeyPairOptions<'pem', 'pem'>): KeyPairSyncResult<string, string>;\\n    function generateKeyPairSync(type: 'x25519', options: X25519KeyPairOptions<'pem', 'der'>): KeyPairSyncResult<string, Buffer>;\\n    function generateKeyPairSync(type: 'x25519', options: X25519KeyPairOptions<'der', 'pem'>): KeyPairSyncResult<Buffer, string>;\\n    function generateKeyPairSync(type: 'x25519', options: X25519KeyPairOptions<'der', 'der'>): KeyPairSyncResult<Buffer, Buffer>;\\n    function generateKeyPairSync(type: 'x25519', options?: X25519KeyPairKeyObjectOptions): KeyPairKeyObjectResult;\\n    function generateKeyPairSync(type: 'x448', options: X448KeyPairOptions<'pem', 'pem'>): KeyPairSyncResult<string, string>;\\n    function generateKeyPairSync(type: 'x448', options: X448KeyPairOptions<'pem', 'der'>): KeyPairSyncResult<string, Buffer>;\\n    function generateKeyPairSync(type: 'x448', options: X448KeyPairOptions<'der', 'pem'>): KeyPairSyncResult<Buffer, string>;\\n    function generateKeyPairSync(type: 'x448', options: X448KeyPairOptions<'der', 'der'>): KeyPairSyncResult<Buffer, Buffer>;\\n    function generateKeyPairSync(type: 'x448', options?: X448KeyPairKeyObjectOptions): KeyPairKeyObjectResult;\\n    /**\\n     * Generates a new asymmetric key pair of the given `type`. RSA, RSA-PSS, DSA, EC,\\n     * Ed25519, Ed448, X25519, X448, and DH are currently supported.\\n     *\\n     * If a `publicKeyEncoding` or `privateKeyEncoding` was specified, this function\\n     * behaves as if `keyObject.export()` had been called on its result. Otherwise,\\n     * the respective part of the key is returned as a `KeyObject`.\\n     *\\n     * It is recommended to encode public keys as `'spki'` and private keys as`'pkcs8'` with encryption for long-term storage:\\n     *\\n     * ```js\\n     * const {\\n     *   generateKeyPair\\n     * } = await import('crypto');\\n     *\\n     * generateKeyPair('rsa', {\\n     *   modulusLength: 4096,\\n     *   publicKeyEncoding: {\\n     *     type: 'spki',\\n     *     format: 'pem'\\n     *   },\\n     *   privateKeyEncoding: {\\n     *     type: 'pkcs8',\\n     *     format: 'pem',\\n     *     cipher: 'aes-256-cbc',\\n     *     passphrase: 'top secret'\\n     *   }\\n     * }, (err, publicKey, privateKey) => {\\n     *   // Handle errors and use the generated key pair.\\n     * });\\n     * ```\\n     *\\n     * On completion, `callback` will be called with `err` set to `undefined` and`publicKey` / `privateKey` representing the generated key pair.\\n     *\\n     * If this method is invoked as its `util.promisify()` ed version, it returns\\n     * a `Promise` for an `Object` with `publicKey` and `privateKey` properties.\\n     * @since v10.12.0\\n     * @param type Must be `'rsa'`, `'rsa-pss'`, `'dsa'`, `'ec'`, `'ed25519'`, `'ed448'`, `'x25519'`, `'x448'`, or `'dh'`.\\n     */\\n    function generateKeyPair(type: 'rsa', options: RSAKeyPairOptions<'pem', 'pem'>, callback: (err: Error | null, publicKey: string, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'rsa', options: RSAKeyPairOptions<'pem', 'der'>, callback: (err: Error | null, publicKey: string, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'rsa', options: RSAKeyPairOptions<'der', 'pem'>, callback: (err: Error | null, publicKey: Buffer, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'rsa', options: RSAKeyPairOptions<'der', 'der'>, callback: (err: Error | null, publicKey: Buffer, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'rsa', options: RSAKeyPairKeyObjectOptions, callback: (err: Error | null, publicKey: KeyObject, privateKey: KeyObject) => void): void;\\n    function generateKeyPair(type: 'rsa-pss', options: RSAPSSKeyPairOptions<'pem', 'pem'>, callback: (err: Error | null, publicKey: string, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'rsa-pss', options: RSAPSSKeyPairOptions<'pem', 'der'>, callback: (err: Error | null, publicKey: string, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'rsa-pss', options: RSAPSSKeyPairOptions<'der', 'pem'>, callback: (err: Error | null, publicKey: Buffer, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'rsa-pss', options: RSAPSSKeyPairOptions<'der', 'der'>, callback: (err: Error | null, publicKey: Buffer, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'rsa-pss', options: RSAPSSKeyPairKeyObjectOptions, callback: (err: Error | null, publicKey: KeyObject, privateKey: KeyObject) => void): void;\\n    function generateKeyPair(type: 'dsa', options: DSAKeyPairOptions<'pem', 'pem'>, callback: (err: Error | null, publicKey: string, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'dsa', options: DSAKeyPairOptions<'pem', 'der'>, callback: (err: Error | null, publicKey: string, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'dsa', options: DSAKeyPairOptions<'der', 'pem'>, callback: (err: Error | null, publicKey: Buffer, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'dsa', options: DSAKeyPairOptions<'der', 'der'>, callback: (err: Error | null, publicKey: Buffer, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'dsa', options: DSAKeyPairKeyObjectOptions, callback: (err: Error | null, publicKey: KeyObject, privateKey: KeyObject) => void): void;\\n    function generateKeyPair(type: 'ec', options: ECKeyPairOptions<'pem', 'pem'>, callback: (err: Error | null, publicKey: string, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'ec', options: ECKeyPairOptions<'pem', 'der'>, callback: (err: Error | null, publicKey: string, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'ec', options: ECKeyPairOptions<'der', 'pem'>, callback: (err: Error | null, publicKey: Buffer, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'ec', options: ECKeyPairOptions<'der', 'der'>, callback: (err: Error | null, publicKey: Buffer, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'ec', options: ECKeyPairKeyObjectOptions, callback: (err: Error | null, publicKey: KeyObject, privateKey: KeyObject) => void): void;\\n    function generateKeyPair(type: 'ed25519', options: ED25519KeyPairOptions<'pem', 'pem'>, callback: (err: Error | null, publicKey: string, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'ed25519', options: ED25519KeyPairOptions<'pem', 'der'>, callback: (err: Error | null, publicKey: string, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'ed25519', options: ED25519KeyPairOptions<'der', 'pem'>, callback: (err: Error | null, publicKey: Buffer, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'ed25519', options: ED25519KeyPairOptions<'der', 'der'>, callback: (err: Error | null, publicKey: Buffer, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'ed25519', options: ED25519KeyPairKeyObjectOptions | undefined, callback: (err: Error | null, publicKey: KeyObject, privateKey: KeyObject) => void): void;\\n    function generateKeyPair(type: 'ed448', options: ED448KeyPairOptions<'pem', 'pem'>, callback: (err: Error | null, publicKey: string, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'ed448', options: ED448KeyPairOptions<'pem', 'der'>, callback: (err: Error | null, publicKey: string, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'ed448', options: ED448KeyPairOptions<'der', 'pem'>, callback: (err: Error | null, publicKey: Buffer, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'ed448', options: ED448KeyPairOptions<'der', 'der'>, callback: (err: Error | null, publicKey: Buffer, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'ed448', options: ED448KeyPairKeyObjectOptions | undefined, callback: (err: Error | null, publicKey: KeyObject, privateKey: KeyObject) => void): void;\\n    function generateKeyPair(type: 'x25519', options: X25519KeyPairOptions<'pem', 'pem'>, callback: (err: Error | null, publicKey: string, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'x25519', options: X25519KeyPairOptions<'pem', 'der'>, callback: (err: Error | null, publicKey: string, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'x25519', options: X25519KeyPairOptions<'der', 'pem'>, callback: (err: Error | null, publicKey: Buffer, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'x25519', options: X25519KeyPairOptions<'der', 'der'>, callback: (err: Error | null, publicKey: Buffer, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'x25519', options: X25519KeyPairKeyObjectOptions | undefined, callback: (err: Error | null, publicKey: KeyObject, privateKey: KeyObject) => void): void;\\n    function generateKeyPair(type: 'x448', options: X448KeyPairOptions<'pem', 'pem'>, callback: (err: Error | null, publicKey: string, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'x448', options: X448KeyPairOptions<'pem', 'der'>, callback: (err: Error | null, publicKey: string, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'x448', options: X448KeyPairOptions<'der', 'pem'>, callback: (err: Error | null, publicKey: Buffer, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'x448', options: X448KeyPairOptions<'der', 'der'>, callback: (err: Error | null, publicKey: Buffer, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'x448', options: X448KeyPairKeyObjectOptions | undefined, callback: (err: Error | null, publicKey: KeyObject, privateKey: KeyObject) => void): void;\\n    namespace generateKeyPair {\\n        function __promisify__(\\n            type: 'rsa',\\n            options: RSAKeyPairOptions<'pem', 'pem'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'rsa',\\n            options: RSAKeyPairOptions<'pem', 'der'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(\\n            type: 'rsa',\\n            options: RSAKeyPairOptions<'der', 'pem'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'rsa',\\n            options: RSAKeyPairOptions<'der', 'der'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(type: 'rsa', options: RSAKeyPairKeyObjectOptions): Promise<KeyPairKeyObjectResult>;\\n        function __promisify__(\\n            type: 'rsa-pss',\\n            options: RSAPSSKeyPairOptions<'pem', 'pem'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'rsa-pss',\\n            options: RSAPSSKeyPairOptions<'pem', 'der'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(\\n            type: 'rsa-pss',\\n            options: RSAPSSKeyPairOptions<'der', 'pem'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'rsa-pss',\\n            options: RSAPSSKeyPairOptions<'der', 'der'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(type: 'rsa-pss', options: RSAPSSKeyPairKeyObjectOptions): Promise<KeyPairKeyObjectResult>;\\n        function __promisify__(\\n            type: 'dsa',\\n            options: DSAKeyPairOptions<'pem', 'pem'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'dsa',\\n            options: DSAKeyPairOptions<'pem', 'der'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(\\n            type: 'dsa',\\n            options: DSAKeyPairOptions<'der', 'pem'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'dsa',\\n            options: DSAKeyPairOptions<'der', 'der'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(type: 'dsa', options: DSAKeyPairKeyObjectOptions): Promise<KeyPairKeyObjectResult>;\\n        function __promisify__(\\n            type: 'ec',\\n            options: ECKeyPairOptions<'pem', 'pem'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'ec',\\n            options: ECKeyPairOptions<'pem', 'der'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(\\n            type: 'ec',\\n            options: ECKeyPairOptions<'der', 'pem'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'ec',\\n            options: ECKeyPairOptions<'der', 'der'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(type: 'ec', options: ECKeyPairKeyObjectOptions): Promise<KeyPairKeyObjectResult>;\\n        function __promisify__(\\n            type: 'ed25519',\\n            options: ED25519KeyPairOptions<'pem', 'pem'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'ed25519',\\n            options: ED25519KeyPairOptions<'pem', 'der'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(\\n            type: 'ed25519',\\n            options: ED25519KeyPairOptions<'der', 'pem'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'ed25519',\\n            options: ED25519KeyPairOptions<'der', 'der'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(type: 'ed25519', options?: ED25519KeyPairKeyObjectOptions): Promise<KeyPairKeyObjectResult>;\\n        function __promisify__(\\n            type: 'ed448',\\n            options: ED448KeyPairOptions<'pem', 'pem'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'ed448',\\n            options: ED448KeyPairOptions<'pem', 'der'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(\\n            type: 'ed448',\\n            options: ED448KeyPairOptions<'der', 'pem'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'ed448',\\n            options: ED448KeyPairOptions<'der', 'der'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(type: 'ed448', options?: ED448KeyPairKeyObjectOptions): Promise<KeyPairKeyObjectResult>;\\n        function __promisify__(\\n            type: 'x25519',\\n            options: X25519KeyPairOptions<'pem', 'pem'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'x25519',\\n            options: X25519KeyPairOptions<'pem', 'der'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(\\n            type: 'x25519',\\n            options: X25519KeyPairOptions<'der', 'pem'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'x25519',\\n            options: X25519KeyPairOptions<'der', 'der'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(type: 'x25519', options?: X25519KeyPairKeyObjectOptions): Promise<KeyPairKeyObjectResult>;\\n        function __promisify__(\\n            type: 'x448',\\n            options: X448KeyPairOptions<'pem', 'pem'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'x448',\\n            options: X448KeyPairOptions<'pem', 'der'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(\\n            type: 'x448',\\n            options: X448KeyPairOptions<'der', 'pem'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'x448',\\n            options: X448KeyPairOptions<'der', 'der'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(type: 'x448', options?: X448KeyPairKeyObjectOptions): Promise<KeyPairKeyObjectResult>;\\n    }\\n    /**\\n     * Calculates and returns the signature for `data` using the given private key and\\n     * algorithm. If `algorithm` is `null` or `undefined`, then the algorithm is\\n     * dependent upon the key type (especially Ed25519 and Ed448).\\n     *\\n     * If `key` is not a `KeyObject`, this function behaves as if `key` had been\\n     * passed to {@link createPrivateKey}. If it is an object, the following\\n     * additional properties can be passed:\\n     *\\n     * If the `callback` function is provided this function uses libuv's threadpool.\\n     * @since v12.0.0\\n     */\\n    function sign(algorithm: string | null | undefined, data: NodeJS.ArrayBufferView, key: KeyLike | SignKeyObjectInput | SignPrivateKeyInput): Buffer;\\n    function sign(\\n        algorithm: string | null | undefined,\\n        data: NodeJS.ArrayBufferView,\\n        key: KeyLike | SignKeyObjectInput | SignPrivateKeyInput,\\n        callback: (error: Error | null, data: Buffer) => void\\n    ): void;\\n    /**\\n     * Verifies the given signature for `data` using the given key and algorithm. If`algorithm` is `null` or `undefined`, then the algorithm is dependent upon the\\n     * key type (especially Ed25519 and Ed448).\\n     *\\n     * If `key` is not a `KeyObject`, this function behaves as if `key` had been\\n     * passed to {@link createPublicKey}. If it is an object, the following\\n     * additional properties can be passed:\\n     *\\n     * The `signature` argument is the previously calculated signature for the `data`.\\n     *\\n     * Because public keys can be derived from private keys, a private key or a public\\n     * key may be passed for `key`.\\n     *\\n     * If the `callback` function is provided this function uses libuv's threadpool.\\n     * @since v12.0.0\\n     */\\n    function verify(\\n        algorithm: string | null | undefined,\\n        data: NodeJS.ArrayBufferView,\\n        key: KeyLike | VerifyKeyObjectInput | VerifyPublicKeyInput | VerifyJsonWebKeyInput,\\n        signature: NodeJS.ArrayBufferView\\n    ): boolean;\\n    function verify(\\n        algorithm: string | null | undefined,\\n        data: NodeJS.ArrayBufferView,\\n        key: KeyLike | VerifyKeyObjectInput | VerifyPublicKeyInput | VerifyJsonWebKeyInput,\\n        signature: NodeJS.ArrayBufferView,\\n        callback: (error: Error | null, result: boolean) => void\\n    ): void;\\n    /**\\n     * Computes the Diffie-Hellman secret based on a `privateKey` and a `publicKey`.\\n     * Both keys must have the same `asymmetricKeyType`, which must be one of `'dh'`(for Diffie-Hellman), `'ec'` (for ECDH), `'x448'`, or `'x25519'` (for ECDH-ES).\\n     * @since v13.9.0, v12.17.0\\n     */\\n    function diffieHellman(options: { privateKey: KeyObject; publicKey: KeyObject }): Buffer;\\n    type CipherMode = 'cbc' | 'ccm' | 'cfb' | 'ctr' | 'ecb' | 'gcm' | 'ocb' | 'ofb' | 'stream' | 'wrap' | 'xts';\\n    interface CipherInfoOptions {\\n        /**\\n         * A test key length.\\n         */\\n        keyLength?: number | undefined;\\n        /**\\n         * A test IV length.\\n         */\\n        ivLength?: number | undefined;\\n    }\\n    interface CipherInfo {\\n        /**\\n         * The name of the cipher.\\n         */\\n        name: string;\\n        /**\\n         * The nid of the cipher.\\n         */\\n        nid: number;\\n        /**\\n         * The block size of the cipher in bytes.\\n         * This property is omitted when mode is 'stream'.\\n         */\\n        blockSize?: number | undefined;\\n        /**\\n         * The expected or default initialization vector length in bytes.\\n         * This property is omitted if the cipher does not use an initialization vector.\\n         */\\n        ivLength?: number | undefined;\\n        /**\\n         * The expected or default key length in bytes.\\n         */\\n        keyLength: number;\\n        /**\\n         * The cipher mode.\\n         */\\n        mode: CipherMode;\\n    }\\n    /**\\n     * Returns information about a given cipher.\\n     *\\n     * Some ciphers accept variable length keys and initialization vectors. By default,\\n     * the `crypto.getCipherInfo()` method will return the default values for these\\n     * ciphers. To test if a given key length or iv length is acceptable for given\\n     * cipher, use the `keyLength` and `ivLength` options. If the given values are\\n     * unacceptable, `undefined` will be returned.\\n     * @since v15.0.0\\n     * @param nameOrNid The name or nid of the cipher to query.\\n     */\\n    function getCipherInfo(nameOrNid: string | number, options?: CipherInfoOptions): CipherInfo | undefined;\\n    /**\\n     * HKDF is a simple key derivation function defined in RFC 5869\\\\. The given `ikm`,`salt` and `info` are used with the `digest` to derive a key of `keylen` bytes.\\n     *\\n     * The supplied `callback` function is called with two arguments: `err` and`derivedKey`. If an errors occurs while deriving the key, `err` will be set;\\n     * otherwise `err` will be `null`. The successfully generated `derivedKey` will\\n     * be passed to the callback as an [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer). An error will be thrown if any\\n     * of the input arguments specify invalid values or types.\\n     *\\n     * ```js\\n     * import { Buffer } from 'buffer';\\n     * const {\\n     *   hkdf\\n     * } = await import('crypto');\\n     *\\n     * hkdf('sha512', 'key', 'salt', 'info', 64, (err, derivedKey) => {\\n     *   if (err) throw err;\\n     *   console.log(Buffer.from(derivedKey).toString('hex'));  // '24156e2...5391653'\\n     * });\\n     * ```\\n     * @since v15.0.0\\n     * @param digest The digest algorithm to use.\\n     * @param ikm The input keying material. It must be at least one byte in length.\\n     * @param salt The salt value. Must be provided but can be zero-length.\\n     * @param info Additional info value. Must be provided but can be zero-length, and cannot be more than 1024 bytes.\\n     * @param keylen The length of the key to generate. Must be greater than 0. The maximum allowable value is `255` times the number of bytes produced by the selected digest function (e.g. `sha512`\\n     * generates 64-byte hashes, making the maximum HKDF output 16320 bytes).\\n     */\\n    function hkdf(digest: string, irm: BinaryLike | KeyObject, salt: BinaryLike, info: BinaryLike, keylen: number, callback: (err: Error | null, derivedKey: ArrayBuffer) => void): void;\\n    /**\\n     * Provides a synchronous HKDF key derivation function as defined in RFC 5869\\\\. The\\n     * given `ikm`, `salt` and `info` are used with the `digest` to derive a key of`keylen` bytes.\\n     *\\n     * The successfully generated `derivedKey` will be returned as an [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer).\\n     *\\n     * An error will be thrown if any of the input arguments specify invalid values or\\n     * types, or if the derived key cannot be generated.\\n     *\\n     * ```js\\n     * import { Buffer } from 'buffer';\\n     * const {\\n     *   hkdfSync\\n     * } = await import('crypto');\\n     *\\n     * const derivedKey = hkdfSync('sha512', 'key', 'salt', 'info', 64);\\n     * console.log(Buffer.from(derivedKey).toString('hex'));  // '24156e2...5391653'\\n     * ```\\n     * @since v15.0.0\\n     * @param digest The digest algorithm to use.\\n     * @param ikm The input keying material. It must be at least one byte in length.\\n     * @param salt The salt value. Must be provided but can be zero-length.\\n     * @param info Additional info value. Must be provided but can be zero-length, and cannot be more than 1024 bytes.\\n     * @param keylen The length of the key to generate. Must be greater than 0. The maximum allowable value is `255` times the number of bytes produced by the selected digest function (e.g. `sha512`\\n     * generates 64-byte hashes, making the maximum HKDF output 16320 bytes).\\n     */\\n    function hkdfSync(digest: string, ikm: BinaryLike | KeyObject, salt: BinaryLike, info: BinaryLike, keylen: number): ArrayBuffer;\\n    interface SecureHeapUsage {\\n        /**\\n         * The total allocated secure heap size as specified using the `--secure-heap=n` command-line flag.\\n         */\\n        total: number;\\n        /**\\n         * The minimum allocation from the secure heap as specified using the `--secure-heap-min` command-line flag.\\n         */\\n        min: number;\\n        /**\\n         * The total number of bytes currently allocated from the secure heap.\\n         */\\n        used: number;\\n        /**\\n         * The calculated ratio of `used` to `total` allocated bytes.\\n         */\\n        utilization: number;\\n    }\\n    /**\\n     * @since v15.6.0\\n     */\\n    function secureHeapUsed(): SecureHeapUsage;\\n    interface RandomUUIDOptions {\\n        /**\\n         * By default, to improve performance,\\n         * Node.js will pre-emptively generate and persistently cache enough\\n         * random data to generate up to 128 random UUIDs. To generate a UUID\\n         * without using the cache, set `disableEntropyCache` to `true`.\\n         *\\n         * @default `false`\\n         */\\n        disableEntropyCache?: boolean | undefined;\\n    }\\n    type UUID = `${string}-${string}-${string}-${string}-${string}`;\\n    /**\\n     * Generates a random [RFC 4122](https://www.rfc-editor.org/rfc/rfc4122.txt) version 4 UUID. The UUID is generated using a\\n     * cryptographic pseudorandom number generator.\\n     * @since v15.6.0, v14.17.0\\n     */\\n    function randomUUID(options?: RandomUUIDOptions): UUID;\\n    interface X509CheckOptions {\\n        /**\\n         * @default 'always'\\n         */\\n        subject?: 'always' | 'default' | 'never';\\n        /**\\n         * @default true\\n         */\\n        wildcards?: boolean;\\n        /**\\n         * @default true\\n         */\\n        partialWildcards?: boolean;\\n        /**\\n         * @default false\\n         */\\n        multiLabelWildcards?: boolean;\\n        /**\\n         * @default false\\n         */\\n        singleLabelSubdomains?: boolean;\\n    }\\n    /**\\n     * Encapsulates an X509 certificate and provides read-only access to\\n     * its information.\\n     *\\n     * ```js\\n     * const { X509Certificate } = await import('crypto');\\n     *\\n     * const x509 = new X509Certificate('{... pem encoded cert ...}');\\n     *\\n     * console.log(x509.subject);\\n     * ```\\n     * @since v15.6.0\\n     */\\n    class X509Certificate {\\n        /**\\n         * Will be \\\\`true\\\\` if this is a Certificate Authority (CA) certificate.\\n         * @since v15.6.0\\n         */\\n        readonly ca: boolean;\\n        /**\\n         * The SHA-1 fingerprint of this certificate.\\n         *\\n         * Because SHA-1 is cryptographically broken and because the security of SHA-1 is\\n         * significantly worse than that of algorithms that are commonly used to sign\\n         * certificates, consider using `x509.fingerprint256` instead.\\n         * @since v15.6.0\\n         */\\n        readonly fingerprint: string;\\n        /**\\n         * The SHA-256 fingerprint of this certificate.\\n         * @since v15.6.0\\n         */\\n        readonly fingerprint256: string;\\n        /**\\n         * The SHA-512 fingerprint of this certificate.\\n         * @since v16.14.0\\n         */\\n         readonly fingerprint512: string;\\n        /**\\n         * The complete subject of this certificate.\\n         * @since v15.6.0\\n         */\\n        readonly subject: string;\\n        /**\\n         * The subject alternative name specified for this certificate or `undefined`\\n         * if not available.\\n         * @since v15.6.0\\n         */\\n        readonly subjectAltName: string | undefined;\\n        /**\\n         * The information access content of this certificate or `undefined` if not\\n         * available.\\n         * @since v15.6.0\\n         */\\n        readonly infoAccess: string | undefined;\\n        /**\\n         * An array detailing the key usages for this certificate.\\n         * @since v15.6.0\\n         */\\n        readonly keyUsage: string[];\\n        /**\\n         * The issuer identification included in this certificate.\\n         * @since v15.6.0\\n         */\\n        readonly issuer: string;\\n        /**\\n         * The issuer certificate or `undefined` if the issuer certificate is not\\n         * available.\\n         * @since v15.9.0\\n         */\\n        readonly issuerCertificate?: X509Certificate | undefined;\\n        /**\\n         * The public key `KeyObject` for this certificate.\\n         * @since v15.6.0\\n         */\\n        readonly publicKey: KeyObject;\\n        /**\\n         * A `Buffer` containing the DER encoding of this certificate.\\n         * @since v15.6.0\\n         */\\n        readonly raw: Buffer;\\n        /**\\n         * The serial number of this certificate.\\n         *\\n         * Serial numbers are assigned by certificate authorities and do not uniquely\\n         * identify certificates. Consider using `x509.fingerprint256` as a unique\\n         * identifier instead.\\n         * @since v15.6.0\\n         */\\n        readonly serialNumber: string;\\n        /**\\n         * The date/time from which this certificate is considered valid.\\n         * @since v15.6.0\\n         */\\n        readonly validFrom: string;\\n        /**\\n         * The date/time until which this certificate is considered valid.\\n         * @since v15.6.0\\n         */\\n        readonly validTo: string;\\n        constructor(buffer: BinaryLike);\\n        /**\\n         * Checks whether the certificate matches the given email address.\\n         *\\n         * If the `'subject'` option is undefined or set to `'default'`, the certificate\\n         * subject is only considered if the subject alternative name extension either does\\n         * not exist or does not contain any email addresses.\\n         *\\n         * If the `'subject'` option is set to `'always'` and if the subject alternative\\n         * name extension either does not exist or does not contain a matching email\\n         * address, the certificate subject is considered.\\n         *\\n         * If the `'subject'` option is set to `'never'`, the certificate subject is never\\n         * considered, even if the certificate contains no subject alternative names.\\n         * @since v15.6.0\\n         * @return Returns `email` if the certificate matches, `undefined` if it does not.\\n         */\\n        checkEmail(email: string, options?: Pick<X509CheckOptions, 'subject'>): string | undefined;\\n        /**\\n         * Checks whether the certificate matches the given host name.\\n         *\\n         * If the certificate matches the given host name, the matching subject name is\\n         * returned. The returned name might be an exact match (e.g., `foo.example.com`)\\n         * or it might contain wildcards (e.g., `*.example.com`). Because host name\\n         * comparisons are case-insensitive, the returned subject name might also differ\\n         * from the given `name` in capitalization.\\n         *\\n         * If the `'subject'` option is undefined or set to `'default'`, the certificate\\n         * subject is only considered if the subject alternative name extension either does\\n         * not exist or does not contain any DNS names. This behavior is consistent with [RFC 2818](https://www.rfc-editor.org/rfc/rfc2818.txt) (\\\"HTTP Over TLS\\\").\\n         *\\n         * If the `'subject'` option is set to `'always'` and if the subject alternative\\n         * name extension either does not exist or does not contain a matching DNS name,\\n         * the certificate subject is considered.\\n         *\\n         * If the `'subject'` option is set to `'never'`, the certificate subject is never\\n         * considered, even if the certificate contains no subject alternative names.\\n         * @since v15.6.0\\n         * @return Returns a subject name that matches `name`, or `undefined` if no subject name matches `name`.\\n         */\\n        checkHost(name: string, options?: X509CheckOptions): string | undefined;\\n        /**\\n         * Checks whether the certificate matches the given IP address (IPv4 or IPv6).\\n         *\\n         * Only [RFC 5280](https://www.rfc-editor.org/rfc/rfc5280.txt) `iPAddress` subject alternative names are considered, and they\\n         * must match the given `ip` address exactly. Other subject alternative names as\\n         * well as the subject field of the certificate are ignored.\\n         * @since v15.6.0\\n         * @return Returns `ip` if the certificate matches, `undefined` if it does not.\\n         */\\n        checkIP(ip: string): string | undefined;\\n        /**\\n         * Checks whether this certificate was issued by the given `otherCert`.\\n         * @since v15.6.0\\n         */\\n        checkIssued(otherCert: X509Certificate): boolean;\\n        /**\\n         * Checks whether the public key for this certificate is consistent with\\n         * the given private key.\\n         * @since v15.6.0\\n         * @param privateKey A private key.\\n         */\\n        checkPrivateKey(privateKey: KeyObject): boolean;\\n        /**\\n         * There is no standard JSON encoding for X509 certificates. The`toJSON()` method returns a string containing the PEM encoded\\n         * certificate.\\n         * @since v15.6.0\\n         */\\n        toJSON(): string;\\n        /**\\n         * Returns information about this certificate using the legacy `certificate object` encoding.\\n         * @since v15.6.0\\n         */\\n        toLegacyObject(): PeerCertificate;\\n        /**\\n         * Returns the PEM-encoded certificate.\\n         * @since v15.6.0\\n         */\\n        toString(): string;\\n        /**\\n         * Verifies that this certificate was signed by the given public key.\\n         * Does not perform any other validation checks on the certificate.\\n         * @since v15.6.0\\n         * @param publicKey A public key.\\n         */\\n        verify(publicKey: KeyObject): boolean;\\n    }\\n    type LargeNumberLike = NodeJS.ArrayBufferView | SharedArrayBuffer | ArrayBuffer | bigint;\\n    interface GeneratePrimeOptions {\\n        add?: LargeNumberLike | undefined;\\n        rem?: LargeNumberLike | undefined;\\n        /**\\n         * @default false\\n         */\\n        safe?: boolean | undefined;\\n        bigint?: boolean | undefined;\\n    }\\n    interface GeneratePrimeOptionsBigInt extends GeneratePrimeOptions {\\n        bigint: true;\\n    }\\n    interface GeneratePrimeOptionsArrayBuffer extends GeneratePrimeOptions {\\n        bigint?: false | undefined;\\n    }\\n    /**\\n     * Generates a pseudorandom prime of `size` bits.\\n     *\\n     * If `options.safe` is `true`, the prime will be a safe prime -- that is,`(prime - 1) / 2` will also be a prime.\\n     *\\n     * The `options.add` and `options.rem` parameters can be used to enforce additional\\n     * requirements, e.g., for Diffie-Hellman:\\n     *\\n     * * If `options.add` and `options.rem` are both set, the prime will satisfy the\\n     * condition that `prime % add = rem`.\\n     * * If only `options.add` is set and `options.safe` is not `true`, the prime will\\n     * satisfy the condition that `prime % add = 1`.\\n     * * If only `options.add` is set and `options.safe` is set to `true`, the prime\\n     * will instead satisfy the condition that `prime % add = 3`. This is necessary\\n     * because `prime % add = 1` for `options.add > 2` would contradict the condition\\n     * enforced by `options.safe`.\\n     * * `options.rem` is ignored if `options.add` is not given.\\n     *\\n     * Both `options.add` and `options.rem` must be encoded as big-endian sequences\\n     * if given as an `ArrayBuffer`, `SharedArrayBuffer`, `TypedArray`, `Buffer`, or`DataView`.\\n     *\\n     * By default, the prime is encoded as a big-endian sequence of octets\\n     * in an [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer). If the `bigint` option is `true`, then a\\n     * [bigint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) is provided.\\n     * @since v15.8.0\\n     * @param size The size (in bits) of the prime to generate.\\n     */\\n    function generatePrime(size: number, callback: (err: Error | null, prime: ArrayBuffer) => void): void;\\n    function generatePrime(size: number, options: GeneratePrimeOptionsBigInt, callback: (err: Error | null, prime: bigint) => void): void;\\n    function generatePrime(size: number, options: GeneratePrimeOptionsArrayBuffer, callback: (err: Error | null, prime: ArrayBuffer) => void): void;\\n    function generatePrime(size: number, options: GeneratePrimeOptions, callback: (err: Error | null, prime: ArrayBuffer | bigint) => void): void;\\n    /**\\n     * Generates a pseudorandom prime of `size` bits.\\n     *\\n     * If `options.safe` is `true`, the prime will be a safe prime -- that is,`(prime - 1) / 2` will also be a prime.\\n     *\\n     * The `options.add` and `options.rem` parameters can be used to enforce additional\\n     * requirements, e.g., for Diffie-Hellman:\\n     *\\n     * * If `options.add` and `options.rem` are both set, the prime will satisfy the\\n     * condition that `prime % add = rem`.\\n     * * If only `options.add` is set and `options.safe` is not `true`, the prime will\\n     * satisfy the condition that `prime % add = 1`.\\n     * * If only `options.add` is set and `options.safe` is set to `true`, the prime\\n     * will instead satisfy the condition that `prime % add = 3`. This is necessary\\n     * because `prime % add = 1` for `options.add > 2` would contradict the condition\\n     * enforced by `options.safe`.\\n     * * `options.rem` is ignored if `options.add` is not given.\\n     *\\n     * Both `options.add` and `options.rem` must be encoded as big-endian sequences\\n     * if given as an `ArrayBuffer`, `SharedArrayBuffer`, `TypedArray`, `Buffer`, or`DataView`.\\n     *\\n     * By default, the prime is encoded as a big-endian sequence of octets\\n     * in an [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer). If the `bigint` option is `true`, then a\\n     * [bigint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) is provided.\\n     * @since v15.8.0\\n     * @param size The size (in bits) of the prime to generate.\\n     */\\n    function generatePrimeSync(size: number): ArrayBuffer;\\n    function generatePrimeSync(size: number, options: GeneratePrimeOptionsBigInt): bigint;\\n    function generatePrimeSync(size: number, options: GeneratePrimeOptionsArrayBuffer): ArrayBuffer;\\n    function generatePrimeSync(size: number, options: GeneratePrimeOptions): ArrayBuffer | bigint;\\n    interface CheckPrimeOptions {\\n        /**\\n         * The number of Miller-Rabin probabilistic primality iterations to perform.\\n         * When the value is 0 (zero), a number of checks is used that yields a false positive rate of at most `2**-64` for random input.\\n         * Care must be used when selecting a number of checks.\\n         * Refer to the OpenSSL documentation for the BN_is_prime_ex function nchecks options for more details.\\n         *\\n         * @default 0\\n         */\\n        checks?: number | undefined;\\n    }\\n    /**\\n     * Checks the primality of the `candidate`.\\n     * @since v15.8.0\\n     * @param candidate A possible prime encoded as a sequence of big endian octets of arbitrary length.\\n     */\\n    function checkPrime(value: LargeNumberLike, callback: (err: Error | null, result: boolean) => void): void;\\n    function checkPrime(value: LargeNumberLike, options: CheckPrimeOptions, callback: (err: Error | null, result: boolean) => void): void;\\n    /**\\n     * Checks the primality of the `candidate`.\\n     * @since v15.8.0\\n     * @param candidate A possible prime encoded as a sequence of big endian octets of arbitrary length.\\n     * @return `true` if the candidate is a prime with an error probability less than `0.25 ** options.checks`.\\n     */\\n    function checkPrimeSync(candidate: LargeNumberLike, options?: CheckPrimeOptions): boolean;\\n    /**\\n     * Load and set the `engine` for some or all OpenSSL functions (selected by flags).\\n     *\\n     * `engine` could be either an id or a path to the engine's shared library.\\n     *\\n     * The optional `flags` argument uses `ENGINE_METHOD_ALL` by default.\\n     * The `flags` is a bit field taking one of or a mix of the following flags (defined in `crypto.constants`):\\n     *\\n     * - `crypto.constants.ENGINE_METHOD_RSA`\\n     * - `crypto.constants.ENGINE_METHOD_DSA`\\n     * - `crypto.constants.ENGINE_METHOD_DH`\\n     * - `crypto.constants.ENGINE_METHOD_RAND`\\n     * - `crypto.constants.ENGINE_METHOD_EC`\\n     * - `crypto.constants.ENGINE_METHOD_CIPHERS`\\n     * - `crypto.constants.ENGINE_METHOD_DIGESTS`\\n     * - `crypto.constants.ENGINE_METHOD_PKEY_METHS`\\n     * - `crypto.constants.ENGINE_METHOD_PKEY_ASN1_METHS`\\n     * - `crypto.constants.ENGINE_METHOD_ALL`\\n     * - `crypto.constants.ENGINE_METHOD_NONE`\\n     *\\n     * The flags below are deprecated in OpenSSL-1.1.0.\\n     *\\n     * - `crypto.constants.ENGINE_METHOD_ECDH`\\n     * - `crypto.constants.ENGINE_METHOD_ECDSA`\\n     * - `crypto.constants.ENGINE_METHOD_STORE`\\n     * @since v0.11.11\\n     * @param [flags=crypto.constants.ENGINE_METHOD_ALL]\\n     */\\n    function setEngine(engine: string, flags?: number): void;\\n    /**\\n     * A convenient alias for `crypto.webcrypto.getRandomValues()`.\\n     * This implementation is not compliant with the Web Crypto spec,\\n     * to write web-compatible code use `crypto.webcrypto.getRandomValues()` instead.\\n     * @since v17.4.0\\n     * @returns Returns `typedArray`.\\n     */\\n    function getRandomValues<T extends webcrypto.BufferSource>(typedArray: T): T;\\n    /**\\n     * A convenient alias for `crypto.webcrypto.subtle`.\\n     * @since v17.4.0\\n     */\\n    const subtle: webcrypto.SubtleCrypto;\\n    /**\\n     * An implementation of the Web Crypto API standard.\\n     *\\n     * See the {@link https://nodejs.org/docs/latest/api/webcrypto.html Web Crypto API documentation} for details.\\n     * @since v15.0.0\\n     */\\n    const webcrypto: webcrypto.Crypto;\\n    namespace webcrypto {\\n        type BufferSource = ArrayBufferView | ArrayBuffer;\\n        type KeyFormat = 'jwk' | 'pkcs8' | 'raw' | 'spki';\\n        type KeyType = 'private' | 'public' | 'secret';\\n        type KeyUsage = 'decrypt' | 'deriveBits' | 'deriveKey' | 'encrypt' | 'sign' | 'unwrapKey' | 'verify' | 'wrapKey';\\n        type AlgorithmIdentifier = Algorithm | string;\\n        type HashAlgorithmIdentifier = AlgorithmIdentifier;\\n        type NamedCurve = string;\\n        type BigInteger = Uint8Array;\\n        interface AesCbcParams extends Algorithm {\\n            iv: BufferSource;\\n        }\\n        interface AesCtrParams extends Algorithm {\\n            counter: BufferSource;\\n            length: number;\\n        }\\n        interface AesDerivedKeyParams extends Algorithm {\\n            length: number;\\n        }\\n        interface AesGcmParams extends Algorithm {\\n            additionalData?: BufferSource;\\n            iv: BufferSource;\\n            tagLength?: number;\\n        }\\n        interface AesKeyAlgorithm extends KeyAlgorithm {\\n            length: number;\\n        }\\n        interface AesKeyGenParams extends Algorithm {\\n            length: number;\\n        }\\n        interface Algorithm {\\n            name: string;\\n        }\\n        interface EcKeyAlgorithm extends KeyAlgorithm {\\n            namedCurve: NamedCurve;\\n        }\\n        interface EcKeyGenParams extends Algorithm {\\n            namedCurve: NamedCurve;\\n        }\\n        interface EcKeyImportParams extends Algorithm {\\n            namedCurve: NamedCurve;\\n        }\\n        interface EcdhKeyDeriveParams extends Algorithm {\\n            public: CryptoKey;\\n        }\\n        interface EcdsaParams extends Algorithm {\\n            hash: HashAlgorithmIdentifier;\\n        }\\n        interface Ed448Params extends Algorithm {\\n            context?: BufferSource;\\n        }\\n        interface HkdfParams extends Algorithm {\\n            hash: HashAlgorithmIdentifier;\\n            info: BufferSource;\\n            salt: BufferSource;\\n        }\\n        interface HmacImportParams extends Algorithm {\\n            hash: HashAlgorithmIdentifier;\\n            length?: number;\\n        }\\n        interface HmacKeyAlgorithm extends KeyAlgorithm {\\n            hash: KeyAlgorithm;\\n            length: number;\\n        }\\n        interface HmacKeyGenParams extends Algorithm {\\n            hash: HashAlgorithmIdentifier;\\n            length?: number;\\n        }\\n        interface JsonWebKey {\\n            alg?: string;\\n            crv?: string;\\n            d?: string;\\n            dp?: string;\\n            dq?: string;\\n            e?: string;\\n            ext?: boolean;\\n            k?: string;\\n            key_ops?: string[];\\n            kty?: string;\\n            n?: string;\\n            oth?: RsaOtherPrimesInfo[];\\n            p?: string;\\n            q?: string;\\n            qi?: string;\\n            use?: string;\\n            x?: string;\\n            y?: string;\\n        }\\n        interface KeyAlgorithm {\\n            name: string;\\n        }\\n        interface Pbkdf2Params extends Algorithm {\\n            hash: HashAlgorithmIdentifier;\\n            iterations: number;\\n            salt: BufferSource;\\n        }\\n        interface RsaHashedImportParams extends Algorithm {\\n            hash: HashAlgorithmIdentifier;\\n        }\\n        interface RsaHashedKeyAlgorithm extends RsaKeyAlgorithm {\\n            hash: KeyAlgorithm;\\n        }\\n        interface RsaHashedKeyGenParams extends RsaKeyGenParams {\\n            hash: HashAlgorithmIdentifier;\\n        }\\n        interface RsaKeyAlgorithm extends KeyAlgorithm {\\n            modulusLength: number;\\n            publicExponent: BigInteger;\\n        }\\n        interface RsaKeyGenParams extends Algorithm {\\n            modulusLength: number;\\n            publicExponent: BigInteger;\\n        }\\n        interface RsaOaepParams extends Algorithm {\\n            label?: BufferSource;\\n        }\\n        interface RsaOtherPrimesInfo {\\n            d?: string;\\n            r?: string;\\n            t?: string;\\n        }\\n        interface RsaPssParams extends Algorithm {\\n            saltLength: number;\\n        }\\n        /**\\n         * Calling `require('node:crypto').webcrypto` returns an instance of the `Crypto` class.\\n         * `Crypto` is a singleton that provides access to the remainder of the crypto API.\\n         * @since v15.0.0\\n         */\\n        interface Crypto {\\n            /**\\n             * Provides access to the `SubtleCrypto` API.\\n             * @since v15.0.0\\n             */\\n            readonly subtle: SubtleCrypto;\\n            /**\\n             * Generates cryptographically strong random values.\\n             * The given `typedArray` is filled with random values, and a reference to `typedArray` is returned.\\n             *\\n             * The given `typedArray` must be an integer-based instance of {@link NodeJS.TypedArray}, i.e. `Float32Array` and `Float64Array` are not accepted.\\n             *\\n             * An error will be thrown if the given `typedArray` is larger than 65,536 bytes.\\n             * @since v15.0.0\\n             */\\n            getRandomValues<T extends Exclude<NodeJS.TypedArray, Float32Array | Float64Array>>(typedArray: T): T;\\n            /**\\n             * Generates a random {@link https://www.rfc-editor.org/rfc/rfc4122.txt RFC 4122} version 4 UUID.\\n             * The UUID is generated using a cryptographic pseudorandom number generator.\\n             * @since v16.7.0\\n             */\\n            randomUUID(): UUID;\\n            CryptoKey: CryptoKeyConstructor;\\n        }\\n        // This constructor throws ILLEGAL_CONSTRUCTOR so it should not be newable.\\n        interface CryptoKeyConstructor {\\n            /** Illegal constructor */\\n            (_: { readonly _: unique symbol }): never; // Allows instanceof to work but not be callable by the user.\\n            readonly length: 0;\\n            readonly name: 'CryptoKey';\\n            readonly prototype: CryptoKey;\\n        }\\n        /**\\n         * @since v15.0.0\\n         */\\n        interface CryptoKey {\\n            /**\\n             * An object detailing the algorithm for which the key can be used along with additional algorithm-specific parameters.\\n             * @since v15.0.0\\n             */\\n            readonly algorithm: KeyAlgorithm;\\n            /**\\n             * When `true`, the {@link CryptoKey} can be extracted using either `subtleCrypto.exportKey()` or `subtleCrypto.wrapKey()`.\\n             * @since v15.0.0\\n             */\\n            readonly extractable: boolean;\\n            /**\\n             * A string identifying whether the key is a symmetric (`'secret'`) or asymmetric (`'private'` or `'public'`) key.\\n             * @since v15.0.0\\n             */\\n            readonly type: KeyType;\\n            /**\\n             * An array of strings identifying the operations for which the key may be used.\\n             *\\n             * The possible usages are:\\n             * - `'encrypt'` - The key may be used to encrypt data.\\n             * - `'decrypt'` - The key may be used to decrypt data.\\n             * - `'sign'` - The key may be used to generate digital signatures.\\n             * - `'verify'` - The key may be used to verify digital signatures.\\n             * - `'deriveKey'` - The key may be used to derive a new key.\\n             * - `'deriveBits'` - The key may be used to derive bits.\\n             * - `'wrapKey'` - The key may be used to wrap another key.\\n             * - `'unwrapKey'` - The key may be used to unwrap another key.\\n             *\\n             * Valid key usages depend on the key algorithm (identified by `cryptokey.algorithm.name`).\\n             * @since v15.0.0\\n             */\\n            readonly usages: KeyUsage[];\\n        }\\n        /**\\n         * The `CryptoKeyPair` is a simple dictionary object with `publicKey` and `privateKey` properties, representing an asymmetric key pair.\\n         * @since v15.0.0\\n         */\\n        interface CryptoKeyPair {\\n            /**\\n             * A {@link CryptoKey} whose type will be `'private'`.\\n             * @since v15.0.0\\n             */\\n            privateKey: CryptoKey;\\n            /**\\n             * A {@link CryptoKey} whose type will be `'public'`.\\n             * @since v15.0.0\\n             */\\n            publicKey: CryptoKey;\\n        }\\n        /**\\n         * @since v15.0.0\\n         */\\n        interface SubtleCrypto {\\n            /**\\n             * Using the method and parameters specified in `algorithm` and the keying material provided by `key`,\\n             * `subtle.decrypt()` attempts to decipher the provided `data`. If successful,\\n             * the returned promise will be resolved with an `<ArrayBuffer>` containing the plaintext result.\\n             *\\n             * The algorithms currently supported include:\\n             *\\n             * - `'RSA-OAEP'`\\n             * - `'AES-CTR'`\\n             * - `'AES-CBC'`\\n             * - `'AES-GCM'`\\n             * @since v15.0.0\\n             */\\n            decrypt(algorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams, key: CryptoKey, data: BufferSource): Promise<ArrayBuffer>;\\n            /**\\n             * Using the method and parameters specified in `algorithm` and the keying material provided by `baseKey`,\\n             * `subtle.deriveBits()` attempts to generate `length` bits.\\n             * The Node.js implementation requires that when `length` is a number it must be multiple of `8`.\\n             * When `length` is `null` the maximum number of bits for a given algorithm is generated. This is allowed\\n             * for the `'ECDH'`, `'X25519'`, and `'X448'` algorithms.\\n             * If successful, the returned promise will be resolved with an `<ArrayBuffer>` containing the generated data.\\n             *\\n             * The algorithms currently supported include:\\n             *\\n             * - `'ECDH'`\\n             * - `'X25519'`\\n             * - `'X448'`\\n             * - `'HKDF'`\\n             * - `'PBKDF2'`\\n             * @since v15.0.0\\n             */\\n            deriveBits(algorithm: EcdhKeyDeriveParams, baseKey: CryptoKey, length: number | null): Promise<ArrayBuffer>;\\n            deriveBits(algorithm: AlgorithmIdentifier | HkdfParams | Pbkdf2Params, baseKey: CryptoKey, length: number): Promise<ArrayBuffer>;\\n            /**\\n             * Using the method and parameters specified in `algorithm`, and the keying material provided by `baseKey`,\\n             * `subtle.deriveKey()` attempts to generate a new <CryptoKey>` based on the method and parameters in `derivedKeyAlgorithm`.\\n             *\\n             * Calling `subtle.deriveKey()` is equivalent to calling `subtle.deriveBits()` to generate raw keying material,\\n             * then passing the result into the `subtle.importKey()` method using the `deriveKeyAlgorithm`, `extractable`, and `keyUsages` parameters as input.\\n             *\\n             * The algorithms currently supported include:\\n             *\\n             * - `'ECDH'`\\n             * - `'X25519'`\\n             * - `'X448'`\\n             * - `'HKDF'`\\n             * - `'PBKDF2'`\\n             * @param keyUsages See {@link https://nodejs.org/docs/latest/api/webcrypto.html#cryptokeyusages Key usages}.\\n             * @since v15.0.0\\n             */\\n            deriveKey(\\n                algorithm: AlgorithmIdentifier | EcdhKeyDeriveParams | HkdfParams | Pbkdf2Params,\\n                baseKey: CryptoKey,\\n                derivedKeyAlgorithm: AlgorithmIdentifier | AesDerivedKeyParams | HmacImportParams | HkdfParams | Pbkdf2Params,\\n                extractable: boolean,\\n                keyUsages: ReadonlyArray<KeyUsage>\\n            ): Promise<CryptoKey>;\\n            /**\\n             * Using the method identified by `algorithm`, `subtle.digest()` attempts to generate a digest of `data`.\\n             * If successful, the returned promise is resolved with an `<ArrayBuffer>` containing the computed digest.\\n             *\\n             * If `algorithm` is provided as a `<string>`, it must be one of:\\n             *\\n             * - `'SHA-1'`\\n             * - `'SHA-256'`\\n             * - `'SHA-384'`\\n             * - `'SHA-512'`\\n             *\\n             * If `algorithm` is provided as an `<Object>`, it must have a `name` property whose value is one of the above.\\n             * @since v15.0.0\\n             */\\n            digest(algorithm: AlgorithmIdentifier, data: BufferSource): Promise<ArrayBuffer>;\\n            /**\\n             * Using the method and parameters specified by `algorithm` and the keying material provided by `key`,\\n             * `subtle.encrypt()` attempts to encipher `data`. If successful,\\n             * the returned promise is resolved with an `<ArrayBuffer>` containing the encrypted result.\\n             *\\n             * The algorithms currently supported include:\\n             *\\n             * - `'RSA-OAEP'`\\n             * - `'AES-CTR'`\\n             * - `'AES-CBC'`\\n             * - `'AES-GCM'`\\n             * @since v15.0.0\\n             */\\n            encrypt(algorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams, key: CryptoKey, data: BufferSource): Promise<ArrayBuffer>;\\n            /**\\n             * Exports the given key into the specified format, if supported.\\n             *\\n             * If the `<CryptoKey>` is not extractable, the returned promise will reject.\\n             *\\n             * When `format` is either `'pkcs8'` or `'spki'` and the export is successful,\\n             * the returned promise will be resolved with an `<ArrayBuffer>` containing the exported key data.\\n             *\\n             * When `format` is `'jwk'` and the export is successful, the returned promise will be resolved with a\\n             * JavaScript object conforming to the {@link https://tools.ietf.org/html/rfc7517 JSON Web Key} specification.\\n             * @param format Must be one of `'raw'`, `'pkcs8'`, `'spki'`, or `'jwk'`.\\n             * @returns `<Promise>` containing `<ArrayBuffer>`.\\n             * @since v15.0.0\\n             */\\n            exportKey(format: 'jwk', key: CryptoKey): Promise<JsonWebKey>;\\n            exportKey(format: Exclude<KeyFormat, 'jwk'>, key: CryptoKey): Promise<ArrayBuffer>;\\n            /**\\n             * Using the method and parameters provided in `algorithm`,\\n             * `subtle.generateKey()` attempts to generate new keying material.\\n             * Depending the method used, the method may generate either a single `<CryptoKey>` or a `<CryptoKeyPair>`.\\n             *\\n             * The `<CryptoKeyPair>` (public and private key) generating algorithms supported include:\\n             *\\n             * - `'RSASSA-PKCS1-v1_5'`\\n             * - `'RSA-PSS'`\\n             * - `'RSA-OAEP'`\\n             * - `'ECDSA'`\\n             * - `'Ed25519'`\\n             * - `'Ed448'`\\n             * - `'ECDH'`\\n             * - `'X25519'`\\n             * - `'X448'`\\n             * The `<CryptoKey>` (secret key) generating algorithms supported include:\\n             *\\n             * - `'HMAC'`\\n             * - `'AES-CTR'`\\n             * - `'AES-CBC'`\\n             * - `'AES-GCM'`\\n             * - `'AES-KW'`\\n             * @param keyUsages See {@link https://nodejs.org/docs/latest/api/webcrypto.html#cryptokeyusages Key usages}.\\n             * @since v15.0.0\\n             */\\n            generateKey(algorithm: RsaHashedKeyGenParams | EcKeyGenParams, extractable: boolean, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKeyPair>;\\n            generateKey(algorithm: AesKeyGenParams | HmacKeyGenParams | Pbkdf2Params, extractable: boolean, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKey>;\\n            generateKey(algorithm: AlgorithmIdentifier, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKeyPair | CryptoKey>;\\n            /**\\n             * The `subtle.importKey()` method attempts to interpret the provided `keyData` as the given `format`\\n             * to create a `<CryptoKey>` instance using the provided `algorithm`, `extractable`, and `keyUsages` arguments.\\n             * If the import is successful, the returned promise will be resolved with the created `<CryptoKey>`.\\n             *\\n             * If importing a `'PBKDF2'` key, `extractable` must be `false`.\\n             * @param format Must be one of `'raw'`, `'pkcs8'`, `'spki'`, or `'jwk'`.\\n             * @param keyUsages See {@link https://nodejs.org/docs/latest/api/webcrypto.html#cryptokeyusages Key usages}.\\n             * @since v15.0.0\\n             */\\n            importKey(\\n                format: 'jwk',\\n                keyData: JsonWebKey,\\n                algorithm: AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm,\\n                extractable: boolean,\\n                keyUsages: ReadonlyArray<KeyUsage>\\n            ): Promise<CryptoKey>;\\n            importKey(\\n                format: Exclude<KeyFormat, 'jwk'>,\\n                keyData: BufferSource,\\n                algorithm: AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm,\\n                extractable: boolean,\\n                keyUsages: KeyUsage[]\\n            ): Promise<CryptoKey>;\\n            /**\\n             * Using the method and parameters given by `algorithm` and the keying material provided by `key`,\\n             * `subtle.sign()` attempts to generate a cryptographic signature of `data`. If successful,\\n             * the returned promise is resolved with an `<ArrayBuffer>` containing the generated signature.\\n             *\\n             * The algorithms currently supported include:\\n             *\\n             * - `'RSASSA-PKCS1-v1_5'`\\n             * - `'RSA-PSS'`\\n             * - `'ECDSA'`\\n             * - `'Ed25519'`\\n             * - `'Ed448'`\\n             * - `'HMAC'`\\n             * @since v15.0.0\\n             */\\n            sign(algorithm: AlgorithmIdentifier | RsaPssParams | EcdsaParams | Ed448Params, key: CryptoKey, data: BufferSource): Promise<ArrayBuffer>;\\n            /**\\n             * In cryptography, \\\"wrapping a key\\\" refers to exporting and then encrypting the keying material.\\n             * The `subtle.unwrapKey()` method attempts to decrypt a wrapped key and create a `<CryptoKey>` instance.\\n             * It is equivalent to calling `subtle.decrypt()` first on the encrypted key data (using the `wrappedKey`, `unwrapAlgo`, and `unwrappingKey` arguments as input)\\n             * then passing the results in to the `subtle.importKey()` method using the `unwrappedKeyAlgo`, `extractable`, and `keyUsages` arguments as inputs.\\n             * If successful, the returned promise is resolved with a `<CryptoKey>` object.\\n             *\\n             * The wrapping algorithms currently supported include:\\n             *\\n             * - `'RSA-OAEP'`\\n             * - `'AES-CTR'`\\n             * - `'AES-CBC'`\\n             * - `'AES-GCM'`\\n             * - `'AES-KW'`\\n             *\\n             * The unwrapped key algorithms supported include:\\n             *\\n             * - `'RSASSA-PKCS1-v1_5'`\\n             * - `'RSA-PSS'`\\n             * - `'RSA-OAEP'`\\n             * - `'ECDSA'`\\n             * - `'Ed25519'`\\n             * - `'Ed448'`\\n             * - `'ECDH'`\\n             * - `'X25519'`\\n             * - `'X448'`\\n             * - `'HMAC'`\\n             * - `'AES-CTR'`\\n             * - `'AES-CBC'`\\n             * - `'AES-GCM'`\\n             * - `'AES-KW'`\\n             * @param format Must be one of `'raw'`, `'pkcs8'`, `'spki'`, or `'jwk'`.\\n             * @param keyUsages See {@link https://nodejs.org/docs/latest/api/webcrypto.html#cryptokeyusages Key usages}.\\n             * @since v15.0.0\\n             */\\n            unwrapKey(\\n                format: KeyFormat,\\n                wrappedKey: BufferSource,\\n                unwrappingKey: CryptoKey,\\n                unwrapAlgorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams,\\n                unwrappedKeyAlgorithm: AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm,\\n                extractable: boolean,\\n                keyUsages: KeyUsage[]\\n            ): Promise<CryptoKey>;\\n            /**\\n             * Using the method and parameters given in `algorithm` and the keying material provided by `key`,\\n             * `subtle.verify()` attempts to verify that `signature` is a valid cryptographic signature of `data`.\\n             * The returned promise is resolved with either `true` or `false`.\\n             *\\n             * The algorithms currently supported include:\\n             *\\n             * - `'RSASSA-PKCS1-v1_5'`\\n             * - `'RSA-PSS'`\\n             * - `'ECDSA'`\\n             * - `'Ed25519'`\\n             * - `'Ed448'`\\n             * - `'HMAC'`\\n             * @since v15.0.0\\n             */\\n            verify(algorithm: AlgorithmIdentifier | RsaPssParams | EcdsaParams | Ed448Params, key: CryptoKey, signature: BufferSource, data: BufferSource): Promise<boolean>;\\n            /**\\n             * In cryptography, \\\"wrapping a key\\\" refers to exporting and then encrypting the keying material.\\n             * The `subtle.wrapKey()` method exports the keying material into the format identified by `format`,\\n             * then encrypts it using the method and parameters specified by `wrapAlgo` and the keying material provided by `wrappingKey`.\\n             * It is the equivalent to calling `subtle.exportKey()` using `format` and `key` as the arguments,\\n             * then passing the result to the `subtle.encrypt()` method using `wrappingKey` and `wrapAlgo` as inputs.\\n             * If successful, the returned promise will be resolved with an `<ArrayBuffer>` containing the encrypted key data.\\n             *\\n             * The wrapping algorithms currently supported include:\\n             *\\n             * - `'RSA-OAEP'`\\n             * - `'AES-CTR'`\\n             * - `'AES-CBC'`\\n             * - `'AES-GCM'`\\n             * - `'AES-KW'`\\n             * @param format Must be one of `'raw'`, `'pkcs8'`, `'spki'`, or `'jwk'`.\\n             * @since v15.0.0\\n             */\\n            wrapKey(format: KeyFormat, key: CryptoKey, wrappingKey: CryptoKey, wrapAlgorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams): Promise<ArrayBuffer>;\\n        }\\n    }\\n}\\ndeclare module 'node:crypto' {\\n    export * from 'crypto';\\n}\\n\",\"file:///node_modules/@types/node/dgram.d.ts\":\"/**\\n * The `dgram` module provides an implementation of UDP datagram sockets.\\n *\\n * ```js\\n * import dgram from 'dgram';\\n *\\n * const server = dgram.createSocket('udp4');\\n *\\n * server.on('error', (err) => {\\n *   console.log(`server error:\\\\n${err.stack}`);\\n *   server.close();\\n * });\\n *\\n * server.on('message', (msg, rinfo) => {\\n *   console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\\n * });\\n *\\n * server.on('listening', () => {\\n *   const address = server.address();\\n *   console.log(`server listening ${address.address}:${address.port}`);\\n * });\\n *\\n * server.bind(41234);\\n * // Prints: server listening 0.0.0.0:41234\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/dgram.js)\\n */\\ndeclare module 'dgram' {\\n    import { AddressInfo } from 'node:net';\\n    import * as dns from 'node:dns';\\n    import { EventEmitter, Abortable } from 'node:events';\\n    interface RemoteInfo {\\n        address: string;\\n        family: 'IPv4' | 'IPv6';\\n        port: number;\\n        size: number;\\n    }\\n    interface BindOptions {\\n        port?: number | undefined;\\n        address?: string | undefined;\\n        exclusive?: boolean | undefined;\\n        fd?: number | undefined;\\n    }\\n    type SocketType = 'udp4' | 'udp6';\\n    interface SocketOptions extends Abortable {\\n        type: SocketType;\\n        reuseAddr?: boolean | undefined;\\n        /**\\n         * @default false\\n         */\\n        ipv6Only?: boolean | undefined;\\n        recvBufferSize?: number | undefined;\\n        sendBufferSize?: number | undefined;\\n        lookup?: ((hostname: string, options: dns.LookupOneOptions, callback: (err: NodeJS.ErrnoException | null, address: string, family: number) => void) => void) | undefined;\\n    }\\n    /**\\n     * Creates a `dgram.Socket` object. Once the socket is created, calling `socket.bind()` will instruct the socket to begin listening for datagram\\n     * messages. When `address` and `port` are not passed to `socket.bind()` the\\n     * method will bind the socket to the \\\"all interfaces\\\" address on a random port\\n     * (it does the right thing for both `udp4` and `udp6` sockets). The bound address\\n     * and port can be retrieved using `socket.address().address` and `socket.address().port`.\\n     *\\n     * If the `signal` option is enabled, calling `.abort()` on the corresponding`AbortController` is similar to calling `.close()` on the socket:\\n     *\\n     * ```js\\n     * const controller = new AbortController();\\n     * const { signal } = controller;\\n     * const server = dgram.createSocket({ type: 'udp4', signal });\\n     * server.on('message', (msg, rinfo) => {\\n     *   console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\\n     * });\\n     * // Later, when you want to close the server.\\n     * controller.abort();\\n     * ```\\n     * @since v0.11.13\\n     * @param options Available options are:\\n     * @param callback Attached as a listener for `'message'` events. Optional.\\n     */\\n    function createSocket(type: SocketType, callback?: (msg: Buffer, rinfo: RemoteInfo) => void): Socket;\\n    function createSocket(options: SocketOptions, callback?: (msg: Buffer, rinfo: RemoteInfo) => void): Socket;\\n    /**\\n     * Encapsulates the datagram functionality.\\n     *\\n     * New instances of `dgram.Socket` are created using {@link createSocket}.\\n     * The `new` keyword is not to be used to create `dgram.Socket` instances.\\n     * @since v0.1.99\\n     */\\n    class Socket extends EventEmitter {\\n        /**\\n         * Tells the kernel to join a multicast group at the given `multicastAddress` and`multicastInterface` using the `IP_ADD_MEMBERSHIP` socket option. If the`multicastInterface` argument is not\\n         * specified, the operating system will choose\\n         * one interface and will add membership to it. To add membership to every\\n         * available interface, call `addMembership` multiple times, once per interface.\\n         *\\n         * When called on an unbound socket, this method will implicitly bind to a random\\n         * port, listening on all interfaces.\\n         *\\n         * When sharing a UDP socket across multiple `cluster` workers, the`socket.addMembership()` function must be called only once or an`EADDRINUSE` error will occur:\\n         *\\n         * ```js\\n         * import cluster from 'cluster';\\n         * import dgram from 'dgram';\\n         *\\n         * if (cluster.isPrimary) {\\n         *   cluster.fork(); // Works ok.\\n         *   cluster.fork(); // Fails with EADDRINUSE.\\n         * } else {\\n         *   const s = dgram.createSocket('udp4');\\n         *   s.bind(1234, () => {\\n         *     s.addMembership('224.0.0.114');\\n         *   });\\n         * }\\n         * ```\\n         * @since v0.6.9\\n         */\\n        addMembership(multicastAddress: string, multicastInterface?: string): void;\\n        /**\\n         * Returns an object containing the address information for a socket.\\n         * For UDP sockets, this object will contain `address`, `family` and `port`properties.\\n         *\\n         * This method throws `EBADF` if called on an unbound socket.\\n         * @since v0.1.99\\n         */\\n        address(): AddressInfo;\\n        /**\\n         * For UDP sockets, causes the `dgram.Socket` to listen for datagram\\n         * messages on a named `port` and optional `address`. If `port` is not\\n         * specified or is `0`, the operating system will attempt to bind to a\\n         * random port. If `address` is not specified, the operating system will\\n         * attempt to listen on all addresses. Once binding is complete, a`'listening'` event is emitted and the optional `callback` function is\\n         * called.\\n         *\\n         * Specifying both a `'listening'` event listener and passing a`callback` to the `socket.bind()` method is not harmful but not very\\n         * useful.\\n         *\\n         * A bound datagram socket keeps the Node.js process running to receive\\n         * datagram messages.\\n         *\\n         * If binding fails, an `'error'` event is generated. In rare case (e.g.\\n         * attempting to bind with a closed socket), an `Error` may be thrown.\\n         *\\n         * Example of a UDP server listening on port 41234:\\n         *\\n         * ```js\\n         * import dgram from 'dgram';\\n         *\\n         * const server = dgram.createSocket('udp4');\\n         *\\n         * server.on('error', (err) => {\\n         *   console.log(`server error:\\\\n${err.stack}`);\\n         *   server.close();\\n         * });\\n         *\\n         * server.on('message', (msg, rinfo) => {\\n         *   console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\\n         * });\\n         *\\n         * server.on('listening', () => {\\n         *   const address = server.address();\\n         *   console.log(`server listening ${address.address}:${address.port}`);\\n         * });\\n         *\\n         * server.bind(41234);\\n         * // Prints: server listening 0.0.0.0:41234\\n         * ```\\n         * @since v0.1.99\\n         * @param callback with no parameters. Called when binding is complete.\\n         */\\n        bind(port?: number, address?: string, callback?: () => void): this;\\n        bind(port?: number, callback?: () => void): this;\\n        bind(callback?: () => void): this;\\n        bind(options: BindOptions, callback?: () => void): this;\\n        /**\\n         * Close the underlying socket and stop listening for data on it. If a callback is\\n         * provided, it is added as a listener for the `'close'` event.\\n         * @since v0.1.99\\n         * @param callback Called when the socket has been closed.\\n         */\\n        close(callback?: () => void): this;\\n        /**\\n         * Associates the `dgram.Socket` to a remote address and port. Every\\n         * message sent by this handle is automatically sent to that destination. Also,\\n         * the socket will only receive messages from that remote peer.\\n         * Trying to call `connect()` on an already connected socket will result\\n         * in an `ERR_SOCKET_DGRAM_IS_CONNECTED` exception. If `address` is not\\n         * provided, `'127.0.0.1'` (for `udp4` sockets) or `'::1'` (for `udp6` sockets)\\n         * will be used by default. Once the connection is complete, a `'connect'` event\\n         * is emitted and the optional `callback` function is called. In case of failure,\\n         * the `callback` is called or, failing this, an `'error'` event is emitted.\\n         * @since v12.0.0\\n         * @param callback Called when the connection is completed or on error.\\n         */\\n        connect(port: number, address?: string, callback?: () => void): void;\\n        connect(port: number, callback: () => void): void;\\n        /**\\n         * A synchronous function that disassociates a connected `dgram.Socket` from\\n         * its remote address. Trying to call `disconnect()` on an unbound or already\\n         * disconnected socket will result in an `ERR_SOCKET_DGRAM_NOT_CONNECTED` exception.\\n         * @since v12.0.0\\n         */\\n        disconnect(): void;\\n        /**\\n         * Instructs the kernel to leave a multicast group at `multicastAddress` using the`IP_DROP_MEMBERSHIP` socket option. This method is automatically called by the\\n         * kernel when the socket is closed or the process terminates, so most apps will\\n         * never have reason to call this.\\n         *\\n         * If `multicastInterface` is not specified, the operating system will attempt to\\n         * drop membership on all valid interfaces.\\n         * @since v0.6.9\\n         */\\n        dropMembership(multicastAddress: string, multicastInterface?: string): void;\\n        /**\\n         * This method throws `ERR_SOCKET_BUFFER_SIZE` if called on an unbound socket.\\n         * @since v8.7.0\\n         * @return the `SO_RCVBUF` socket receive buffer size in bytes.\\n         */\\n        getRecvBufferSize(): number;\\n        /**\\n         * This method throws `ERR_SOCKET_BUFFER_SIZE` if called on an unbound socket.\\n         * @since v8.7.0\\n         * @return the `SO_SNDBUF` socket send buffer size in bytes.\\n         */\\n        getSendBufferSize(): number;\\n        /**\\n         * By default, binding a socket will cause it to block the Node.js process from\\n         * exiting as long as the socket is open. The `socket.unref()` method can be used\\n         * to exclude the socket from the reference counting that keeps the Node.js\\n         * process active. The `socket.ref()` method adds the socket back to the reference\\n         * counting and restores the default behavior.\\n         *\\n         * Calling `socket.ref()` multiples times will have no additional effect.\\n         *\\n         * The `socket.ref()` method returns a reference to the socket so calls can be\\n         * chained.\\n         * @since v0.9.1\\n         */\\n        ref(): this;\\n        /**\\n         * Returns an object containing the `address`, `family`, and `port` of the remote\\n         * endpoint. This method throws an `ERR_SOCKET_DGRAM_NOT_CONNECTED` exception\\n         * if the socket is not connected.\\n         * @since v12.0.0\\n         */\\n        remoteAddress(): AddressInfo;\\n        /**\\n         * Broadcasts a datagram on the socket.\\n         * For connectionless sockets, the destination `port` and `address` must be\\n         * specified. Connected sockets, on the other hand, will use their associated\\n         * remote endpoint, so the `port` and `address` arguments must not be set.\\n         *\\n         * The `msg` argument contains the message to be sent.\\n         * Depending on its type, different behavior can apply. If `msg` is a `Buffer`,\\n         * any `TypedArray` or a `DataView`,\\n         * the `offset` and `length` specify the offset within the `Buffer` where the\\n         * message begins and the number of bytes in the message, respectively.\\n         * If `msg` is a `String`, then it is automatically converted to a `Buffer`with `'utf8'` encoding. With messages that\\n         * contain multi-byte characters, `offset` and `length` will be calculated with\\n         * respect to `byte length` and not the character position.\\n         * If `msg` is an array, `offset` and `length` must not be specified.\\n         *\\n         * The `address` argument is a string. If the value of `address` is a host name,\\n         * DNS will be used to resolve the address of the host. If `address` is not\\n         * provided or otherwise nullish, `'127.0.0.1'` (for `udp4` sockets) or `'::1'`(for `udp6` sockets) will be used by default.\\n         *\\n         * If the socket has not been previously bound with a call to `bind`, the socket\\n         * is assigned a random port number and is bound to the \\\"all interfaces\\\" address\\n         * (`'0.0.0.0'` for `udp4` sockets, `'::0'` for `udp6` sockets.)\\n         *\\n         * An optional `callback` function may be specified to as a way of reporting\\n         * DNS errors or for determining when it is safe to reuse the `buf` object.\\n         * DNS lookups delay the time to send for at least one tick of the\\n         * Node.js event loop.\\n         *\\n         * The only way to know for sure that the datagram has been sent is by using a`callback`. If an error occurs and a `callback` is given, the error will be\\n         * passed as the first argument to the `callback`. If a `callback` is not given,\\n         * the error is emitted as an `'error'` event on the `socket` object.\\n         *\\n         * Offset and length are optional but both _must_ be set if either are used.\\n         * They are supported only when the first argument is a `Buffer`, a `TypedArray`,\\n         * or a `DataView`.\\n         *\\n         * This method throws `ERR_SOCKET_BAD_PORT` if called on an unbound socket.\\n         *\\n         * Example of sending a UDP packet to a port on `localhost`;\\n         *\\n         * ```js\\n         * import dgram from 'dgram';\\n         * import { Buffer } from 'buffer';\\n         *\\n         * const message = Buffer.from('Some bytes');\\n         * const client = dgram.createSocket('udp4');\\n         * client.send(message, 41234, 'localhost', (err) => {\\n         *   client.close();\\n         * });\\n         * ```\\n         *\\n         * Example of sending a UDP packet composed of multiple buffers to a port on`127.0.0.1`;\\n         *\\n         * ```js\\n         * import dgram from 'dgram';\\n         * import { Buffer } from 'buffer';\\n         *\\n         * const buf1 = Buffer.from('Some ');\\n         * const buf2 = Buffer.from('bytes');\\n         * const client = dgram.createSocket('udp4');\\n         * client.send([buf1, buf2], 41234, (err) => {\\n         *   client.close();\\n         * });\\n         * ```\\n         *\\n         * Sending multiple buffers might be faster or slower depending on the\\n         * application and operating system. Run benchmarks to\\n         * determine the optimal strategy on a case-by-case basis. Generally speaking,\\n         * however, sending multiple buffers is faster.\\n         *\\n         * Example of sending a UDP packet using a socket connected to a port on`localhost`:\\n         *\\n         * ```js\\n         * import dgram from 'dgram';\\n         * import { Buffer } from 'buffer';\\n         *\\n         * const message = Buffer.from('Some bytes');\\n         * const client = dgram.createSocket('udp4');\\n         * client.connect(41234, 'localhost', (err) => {\\n         *   client.send(message, (err) => {\\n         *     client.close();\\n         *   });\\n         * });\\n         * ```\\n         * @since v0.1.99\\n         * @param msg Message to be sent.\\n         * @param offset Offset in the buffer where the message starts.\\n         * @param length Number of bytes in the message.\\n         * @param port Destination port.\\n         * @param address Destination host name or IP address.\\n         * @param callback Called when the message has been sent.\\n         */\\n        send(msg: string | Uint8Array | ReadonlyArray<any>, port?: number, address?: string, callback?: (error: Error | null, bytes: number) => void): void;\\n        send(msg: string | Uint8Array | ReadonlyArray<any>, port?: number, callback?: (error: Error | null, bytes: number) => void): void;\\n        send(msg: string | Uint8Array | ReadonlyArray<any>, callback?: (error: Error | null, bytes: number) => void): void;\\n        send(msg: string | Uint8Array, offset: number, length: number, port?: number, address?: string, callback?: (error: Error | null, bytes: number) => void): void;\\n        send(msg: string | Uint8Array, offset: number, length: number, port?: number, callback?: (error: Error | null, bytes: number) => void): void;\\n        send(msg: string | Uint8Array, offset: number, length: number, callback?: (error: Error | null, bytes: number) => void): void;\\n        /**\\n         * Sets or clears the `SO_BROADCAST` socket option. When set to `true`, UDP\\n         * packets may be sent to a local interface's broadcast address.\\n         *\\n         * This method throws `EBADF` if called on an unbound socket.\\n         * @since v0.6.9\\n         */\\n        setBroadcast(flag: boolean): void;\\n        /**\\n         * _All references to scope in this section are referring to [IPv6 Zone Indices](https://en.wikipedia.org/wiki/IPv6_address#Scoped_literal_IPv6_addresses), which are defined by [RFC\\n         * 4007](https://tools.ietf.org/html/rfc4007). In string form, an IP_\\n         * _with a scope index is written as `'IP%scope'` where scope is an interface name_\\n         * _or interface number._\\n         *\\n         * Sets the default outgoing multicast interface of the socket to a chosen\\n         * interface or back to system interface selection. The `multicastInterface` must\\n         * be a valid string representation of an IP from the socket's family.\\n         *\\n         * For IPv4 sockets, this should be the IP configured for the desired physical\\n         * interface. All packets sent to multicast on the socket will be sent on the\\n         * interface determined by the most recent successful use of this call.\\n         *\\n         * For IPv6 sockets, `multicastInterface` should include a scope to indicate the\\n         * interface as in the examples that follow. In IPv6, individual `send` calls can\\n         * also use explicit scope in addresses, so only packets sent to a multicast\\n         * address without specifying an explicit scope are affected by the most recent\\n         * successful use of this call.\\n         *\\n         * This method throws `EBADF` if called on an unbound socket.\\n         *\\n         * #### Example: IPv6 outgoing multicast interface\\n         *\\n         * On most systems, where scope format uses the interface name:\\n         *\\n         * ```js\\n         * const socket = dgram.createSocket('udp6');\\n         *\\n         * socket.bind(1234, () => {\\n         *   socket.setMulticastInterface('::%eth1');\\n         * });\\n         * ```\\n         *\\n         * On Windows, where scope format uses an interface number:\\n         *\\n         * ```js\\n         * const socket = dgram.createSocket('udp6');\\n         *\\n         * socket.bind(1234, () => {\\n         *   socket.setMulticastInterface('::%2');\\n         * });\\n         * ```\\n         *\\n         * #### Example: IPv4 outgoing multicast interface\\n         *\\n         * All systems use an IP of the host on the desired physical interface:\\n         *\\n         * ```js\\n         * const socket = dgram.createSocket('udp4');\\n         *\\n         * socket.bind(1234, () => {\\n         *   socket.setMulticastInterface('10.0.0.2');\\n         * });\\n         * ```\\n         * @since v8.6.0\\n         */\\n        setMulticastInterface(multicastInterface: string): void;\\n        /**\\n         * Sets or clears the `IP_MULTICAST_LOOP` socket option. When set to `true`,\\n         * multicast packets will also be received on the local interface.\\n         *\\n         * This method throws `EBADF` if called on an unbound socket.\\n         * @since v0.3.8\\n         */\\n        setMulticastLoopback(flag: boolean): boolean;\\n        /**\\n         * Sets the `IP_MULTICAST_TTL` socket option. While TTL generally stands for\\n         * \\\"Time to Live\\\", in this context it specifies the number of IP hops that a\\n         * packet is allowed to travel through, specifically for multicast traffic. Each\\n         * router or gateway that forwards a packet decrements the TTL. If the TTL is\\n         * decremented to 0 by a router, it will not be forwarded.\\n         *\\n         * The `ttl` argument may be between 0 and 255\\\\. The default on most systems is `1`.\\n         *\\n         * This method throws `EBADF` if called on an unbound socket.\\n         * @since v0.3.8\\n         */\\n        setMulticastTTL(ttl: number): number;\\n        /**\\n         * Sets the `SO_RCVBUF` socket option. Sets the maximum socket receive buffer\\n         * in bytes.\\n         *\\n         * This method throws `ERR_SOCKET_BUFFER_SIZE` if called on an unbound socket.\\n         * @since v8.7.0\\n         */\\n        setRecvBufferSize(size: number): void;\\n        /**\\n         * Sets the `SO_SNDBUF` socket option. Sets the maximum socket send buffer\\n         * in bytes.\\n         *\\n         * This method throws `ERR_SOCKET_BUFFER_SIZE` if called on an unbound socket.\\n         * @since v8.7.0\\n         */\\n        setSendBufferSize(size: number): void;\\n        /**\\n         * Sets the `IP_TTL` socket option. While TTL generally stands for \\\"Time to Live\\\",\\n         * in this context it specifies the number of IP hops that a packet is allowed to\\n         * travel through. Each router or gateway that forwards a packet decrements the\\n         * TTL. If the TTL is decremented to 0 by a router, it will not be forwarded.\\n         * Changing TTL values is typically done for network probes or when multicasting.\\n         *\\n         * The `ttl` argument may be between 1 and 255\\\\. The default on most systems\\n         * is 64.\\n         *\\n         * This method throws `EBADF` if called on an unbound socket.\\n         * @since v0.1.101\\n         */\\n        setTTL(ttl: number): number;\\n        /**\\n         * By default, binding a socket will cause it to block the Node.js process from\\n         * exiting as long as the socket is open. The `socket.unref()` method can be used\\n         * to exclude the socket from the reference counting that keeps the Node.js\\n         * process active, allowing the process to exit even if the socket is still\\n         * listening.\\n         *\\n         * Calling `socket.unref()` multiple times will have no addition effect.\\n         *\\n         * The `socket.unref()` method returns a reference to the socket so calls can be\\n         * chained.\\n         * @since v0.9.1\\n         */\\n        unref(): this;\\n        /**\\n         * Tells the kernel to join a source-specific multicast channel at the given`sourceAddress` and `groupAddress`, using the `multicastInterface` with the`IP_ADD_SOURCE_MEMBERSHIP` socket\\n         * option. If the `multicastInterface` argument\\n         * is not specified, the operating system will choose one interface and will add\\n         * membership to it. To add membership to every available interface, call`socket.addSourceSpecificMembership()` multiple times, once per interface.\\n         *\\n         * When called on an unbound socket, this method will implicitly bind to a random\\n         * port, listening on all interfaces.\\n         * @since v13.1.0, v12.16.0\\n         */\\n        addSourceSpecificMembership(sourceAddress: string, groupAddress: string, multicastInterface?: string): void;\\n        /**\\n         * Instructs the kernel to leave a source-specific multicast channel at the given`sourceAddress` and `groupAddress` using the `IP_DROP_SOURCE_MEMBERSHIP`socket option. This method is\\n         * automatically called by the kernel when the\\n         * socket is closed or the process terminates, so most apps will never have\\n         * reason to call this.\\n         *\\n         * If `multicastInterface` is not specified, the operating system will attempt to\\n         * drop membership on all valid interfaces.\\n         * @since v13.1.0, v12.16.0\\n         */\\n        dropSourceSpecificMembership(sourceAddress: string, groupAddress: string, multicastInterface?: string): void;\\n        /**\\n         * events.EventEmitter\\n         * 1. close\\n         * 2. connect\\n         * 3. error\\n         * 4. listening\\n         * 5. message\\n         */\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        addListener(event: 'close', listener: () => void): this;\\n        addListener(event: 'connect', listener: () => void): this;\\n        addListener(event: 'error', listener: (err: Error) => void): this;\\n        addListener(event: 'listening', listener: () => void): this;\\n        addListener(event: 'message', listener: (msg: Buffer, rinfo: RemoteInfo) => void): this;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        emit(event: 'close'): boolean;\\n        emit(event: 'connect'): boolean;\\n        emit(event: 'error', err: Error): boolean;\\n        emit(event: 'listening'): boolean;\\n        emit(event: 'message', msg: Buffer, rinfo: RemoteInfo): boolean;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        on(event: 'close', listener: () => void): this;\\n        on(event: 'connect', listener: () => void): this;\\n        on(event: 'error', listener: (err: Error) => void): this;\\n        on(event: 'listening', listener: () => void): this;\\n        on(event: 'message', listener: (msg: Buffer, rinfo: RemoteInfo) => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        once(event: 'close', listener: () => void): this;\\n        once(event: 'connect', listener: () => void): this;\\n        once(event: 'error', listener: (err: Error) => void): this;\\n        once(event: 'listening', listener: () => void): this;\\n        once(event: 'message', listener: (msg: Buffer, rinfo: RemoteInfo) => void): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'close', listener: () => void): this;\\n        prependListener(event: 'connect', listener: () => void): this;\\n        prependListener(event: 'error', listener: (err: Error) => void): this;\\n        prependListener(event: 'listening', listener: () => void): this;\\n        prependListener(event: 'message', listener: (msg: Buffer, rinfo: RemoteInfo) => void): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'close', listener: () => void): this;\\n        prependOnceListener(event: 'connect', listener: () => void): this;\\n        prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n        prependOnceListener(event: 'listening', listener: () => void): this;\\n        prependOnceListener(event: 'message', listener: (msg: Buffer, rinfo: RemoteInfo) => void): this;\\n    }\\n}\\ndeclare module 'node:dgram' {\\n    export * from 'dgram';\\n}\\n\",\"file:///node_modules/@types/node/diagnostics_channel.d.ts\":\"/**\\n * The `diagnostics_channel` module provides an API to create named channels\\n * to report arbitrary message data for diagnostics purposes.\\n *\\n * It can be accessed using:\\n *\\n * ```js\\n * import diagnostics_channel from 'diagnostics_channel';\\n * ```\\n *\\n * It is intended that a module writer wanting to report diagnostics messages\\n * will create one or many top-level channels to report messages through.\\n * Channels may also be acquired at runtime but it is not encouraged\\n * due to the additional overhead of doing so. Channels may be exported for\\n * convenience, but as long as the name is known it can be acquired anywhere.\\n *\\n * If you intend for your module to produce diagnostics data for others to\\n * consume it is recommended that you include documentation of what named\\n * channels are used along with the shape of the message data. Channel names\\n * should generally include the module name to avoid collisions with data from\\n * other modules.\\n * @experimental\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/diagnostics_channel.js)\\n */\\ndeclare module 'diagnostics_channel' {\\n    /**\\n     * Check if there are active subscribers to the named channel. This is helpful if\\n     * the message you want to send might be expensive to prepare.\\n     *\\n     * This API is optional but helpful when trying to publish messages from very\\n     * performance-sensitive code.\\n     *\\n     * ```js\\n     * import diagnostics_channel from 'diagnostics_channel';\\n     *\\n     * if (diagnostics_channel.hasSubscribers('my-channel')) {\\n     *   // There are subscribers, prepare and publish message\\n     * }\\n     * ```\\n     * @since v15.1.0, v14.17.0\\n     * @param name The channel name\\n     * @return If there are active subscribers\\n     */\\n    function hasSubscribers(name: string | symbol): boolean;\\n    /**\\n     * This is the primary entry-point for anyone wanting to interact with a named\\n     * channel. It produces a channel object which is optimized to reduce overhead at\\n     * publish time as much as possible.\\n     *\\n     * ```js\\n     * import diagnostics_channel from 'diagnostics_channel';\\n     *\\n     * const channel = diagnostics_channel.channel('my-channel');\\n     * ```\\n     * @since v15.1.0, v14.17.0\\n     * @param name The channel name\\n     * @return The named channel object\\n     */\\n    function channel(name: string | symbol): Channel;\\n    type ChannelListener = (message: unknown, name: string | symbol) => void;\\n    /**\\n     * Register a message handler to subscribe to this channel. This message handler will be run synchronously\\n     * whenever a message is published to the channel. Any errors thrown in the message handler will\\n     * trigger an 'uncaughtException'.\\n     *\\n     * ```js\\n     * import diagnostics_channel from 'diagnostics_channel';\\n     *\\n     * diagnostics_channel.subscribe('my-channel', (message, name) => {\\n     *   // Received data\\n     * });\\n     * ```\\n     *\\n     * @since v18.7.0, v16.17.0\\n     * @param name The channel name\\n     * @param onMessage The handler to receive channel messages\\n     */\\n    function subscribe(name: string | symbol, onMessage: ChannelListener): void;\\n    /**\\n     * Remove a message handler previously registered to this channel with diagnostics_channel.subscribe(name, onMessage).\\n     *\\n     * ```js\\n     * import diagnostics_channel from 'diagnostics_channel';\\n     *\\n     * function onMessage(message, name) {\\n     *  // Received data\\n     * }\\n     *\\n     * diagnostics_channel.subscribe('my-channel', onMessage);\\n     *\\n     * diagnostics_channel.unsubscribe('my-channel', onMessage);\\n     * ```\\n     *\\n     * @since v18.7.0, v16.17.0\\n     * @param name The channel name\\n     * @param onMessage The previous subscribed handler to remove\\n     * @returns `true` if the handler was found, `false` otherwise\\n     */\\n    function unsubscribe(name: string | symbol, onMessage: ChannelListener): boolean;\\n    /**\\n     * The class `Channel` represents an individual named channel within the data\\n     * pipeline. It is use to track subscribers and to publish messages when there\\n     * are subscribers present. It exists as a separate object to avoid channel\\n     * lookups at publish time, enabling very fast publish speeds and allowing\\n     * for heavy use while incurring very minimal cost. Channels are created with {@link channel}, constructing a channel directly\\n     * with `new Channel(name)` is not supported.\\n     * @since v15.1.0, v14.17.0\\n     */\\n    class Channel {\\n        readonly name: string | symbol;\\n        /**\\n         * Check if there are active subscribers to this channel. This is helpful if\\n         * the message you want to send might be expensive to prepare.\\n         *\\n         * This API is optional but helpful when trying to publish messages from very\\n         * performance-sensitive code.\\n         *\\n         * ```js\\n         * import diagnostics_channel from 'diagnostics_channel';\\n         *\\n         * const channel = diagnostics_channel.channel('my-channel');\\n         *\\n         * if (channel.hasSubscribers) {\\n         *   // There are subscribers, prepare and publish message\\n         * }\\n         * ```\\n         * @since v15.1.0, v14.17.0\\n         */\\n        readonly hasSubscribers: boolean;\\n        private constructor(name: string | symbol);\\n        /**\\n         * Publish a message to any subscribers to the channel. This will\\n         * trigger message handlers synchronously so they will execute within\\n         * the same context.\\n         *\\n         * ```js\\n         * import diagnostics_channel from 'diagnostics_channel';\\n         *\\n         * const channel = diagnostics_channel.channel('my-channel');\\n         *\\n         * channel.publish({\\n         *   some: 'message'\\n         * });\\n         * ```\\n         * @since v15.1.0, v14.17.0\\n         * @param message The message to send to the channel subscribers\\n         */\\n        publish(message: unknown): void;\\n        /**\\n         * Register a message handler to subscribe to this channel. This message handler\\n         * will be run synchronously whenever a message is published to the channel. Any\\n         * errors thrown in the message handler will trigger an `'uncaughtException'`.\\n         *\\n         * ```js\\n         * import diagnostics_channel from 'diagnostics_channel';\\n         *\\n         * const channel = diagnostics_channel.channel('my-channel');\\n         *\\n         * channel.subscribe((message, name) => {\\n         *   // Received data\\n         * });\\n         * ```\\n         * @since v15.1.0, v14.17.0\\n         * @param onMessage The handler to receive channel messages\\n         */\\n        subscribe(onMessage: ChannelListener): void;\\n        /**\\n         * Remove a message handler previously registered to this channel with `channel.subscribe(onMessage)`.\\n         *\\n         * ```js\\n         * import diagnostics_channel from 'diagnostics_channel';\\n         *\\n         * const channel = diagnostics_channel.channel('my-channel');\\n         *\\n         * function onMessage(message, name) {\\n         *   // Received data\\n         * }\\n         *\\n         * channel.subscribe(onMessage);\\n         *\\n         * channel.unsubscribe(onMessage);\\n         * ```\\n         * @since v15.1.0, v14.17.0\\n         * @param onMessage The previous subscribed handler to remove\\n         * @return `true` if the handler was found, `false` otherwise.\\n         */\\n        unsubscribe(onMessage: ChannelListener): void;\\n    }\\n}\\ndeclare module 'node:diagnostics_channel' {\\n    export * from 'diagnostics_channel';\\n}\\n\",\"file:///node_modules/@types/node/dns.d.ts\":\"/**\\n * The `dns` module enables name resolution. For example, use it to look up IP\\n * addresses of host names.\\n *\\n * Although named for the [Domain Name System (DNS)](https://en.wikipedia.org/wiki/Domain_Name_System), it does not always use the\\n * DNS protocol for lookups. {@link lookup} uses the operating system\\n * facilities to perform name resolution. It may not need to perform any network\\n * communication. To perform name resolution the way other applications on the same\\n * system do, use {@link lookup}.\\n *\\n * ```js\\n * const dns = require('dns');\\n *\\n * dns.lookup('example.org', (err, address, family) => {\\n *   console.log('address: %j family: IPv%s', address, family);\\n * });\\n * // address: \\\"93.184.216.34\\\" family: IPv4\\n * ```\\n *\\n * All other functions in the `dns` module connect to an actual DNS server to\\n * perform name resolution. They will always use the network to perform DNS\\n * queries. These functions do not use the same set of configuration files used by {@link lookup} (e.g. `/etc/hosts`). Use these functions to always perform\\n * DNS queries, bypassing other name-resolution facilities.\\n *\\n * ```js\\n * const dns = require('dns');\\n *\\n * dns.resolve4('archive.org', (err, addresses) => {\\n *   if (err) throw err;\\n *\\n *   console.log(`addresses: ${JSON.stringify(addresses)}`);\\n *\\n *   addresses.forEach((a) => {\\n *     dns.reverse(a, (err, hostnames) => {\\n *       if (err) {\\n *         throw err;\\n *       }\\n *       console.log(`reverse for ${a}: ${JSON.stringify(hostnames)}`);\\n *     });\\n *   });\\n * });\\n * ```\\n *\\n * See the `Implementation considerations section` for more information.\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/dns.js)\\n */\\ndeclare module 'dns' {\\n    import * as dnsPromises from 'node:dns/promises';\\n    // Supported getaddrinfo flags.\\n    export const ADDRCONFIG: number;\\n    export const V4MAPPED: number;\\n    /**\\n     * If `dns.V4MAPPED` is specified, return resolved IPv6 addresses as\\n     * well as IPv4 mapped IPv6 addresses.\\n     */\\n    export const ALL: number;\\n    export interface LookupOptions {\\n        family?: number | undefined;\\n        hints?: number | undefined;\\n        all?: boolean | undefined;\\n        /**\\n         * @default true\\n         */\\n        verbatim?: boolean | undefined;\\n    }\\n    export interface LookupOneOptions extends LookupOptions {\\n        all?: false | undefined;\\n    }\\n    export interface LookupAllOptions extends LookupOptions {\\n        all: true;\\n    }\\n    export interface LookupAddress {\\n        address: string;\\n        family: number;\\n    }\\n    /**\\n     * Resolves a host name (e.g. `'nodejs.org'`) into the first found A (IPv4) or\\n     * AAAA (IPv6) record. All `option` properties are optional. If `options` is an\\n     * integer, then it must be `4` or `6` \u2013 if `options` is not provided, then IPv4\\n     * and IPv6 addresses are both returned if found.\\n     *\\n     * With the `all` option set to `true`, the arguments for `callback` change to`(err, addresses)`, with `addresses` being an array of objects with the\\n     * properties `address` and `family`.\\n     *\\n     * On error, `err` is an `Error` object, where `err.code` is the error code.\\n     * Keep in mind that `err.code` will be set to `'ENOTFOUND'` not only when\\n     * the host name does not exist but also when the lookup fails in other ways\\n     * such as no available file descriptors.\\n     *\\n     * `dns.lookup()` does not necessarily have anything to do with the DNS protocol.\\n     * The implementation uses an operating system facility that can associate names\\n     * with addresses, and vice versa. This implementation can have subtle but\\n     * important consequences on the behavior of any Node.js program. Please take some\\n     * time to consult the `Implementation considerations section` before using`dns.lookup()`.\\n     *\\n     * Example usage:\\n     *\\n     * ```js\\n     * const dns = require('dns');\\n     * const options = {\\n     *   family: 6,\\n     *   hints: dns.ADDRCONFIG | dns.V4MAPPED,\\n     * };\\n     * dns.lookup('example.com', options, (err, address, family) =>\\n     *   console.log('address: %j family: IPv%s', address, family));\\n     * // address: \\\"2606:2800:220:1:248:1893:25c8:1946\\\" family: IPv6\\n     *\\n     * // When options.all is true, the result will be an Array.\\n     * options.all = true;\\n     * dns.lookup('example.com', options, (err, addresses) =>\\n     *   console.log('addresses: %j', addresses));\\n     * // addresses: [{\\\"address\\\":\\\"2606:2800:220:1:248:1893:25c8:1946\\\",\\\"family\\\":6}]\\n     * ```\\n     *\\n     * If this method is invoked as its `util.promisify()` ed version, and `all`is not set to `true`, it returns a `Promise` for an `Object` with `address` and`family` properties.\\n     * @since v0.1.90\\n     */\\n    export function lookup(hostname: string, family: number, callback: (err: NodeJS.ErrnoException | null, address: string, family: number) => void): void;\\n    export function lookup(hostname: string, options: LookupOneOptions, callback: (err: NodeJS.ErrnoException | null, address: string, family: number) => void): void;\\n    export function lookup(hostname: string, options: LookupAllOptions, callback: (err: NodeJS.ErrnoException | null, addresses: LookupAddress[]) => void): void;\\n    export function lookup(hostname: string, options: LookupOptions, callback: (err: NodeJS.ErrnoException | null, address: string | LookupAddress[], family: number) => void): void;\\n    export function lookup(hostname: string, callback: (err: NodeJS.ErrnoException | null, address: string, family: number) => void): void;\\n    export namespace lookup {\\n        function __promisify__(hostname: string, options: LookupAllOptions): Promise<LookupAddress[]>;\\n        function __promisify__(hostname: string, options?: LookupOneOptions | number): Promise<LookupAddress>;\\n        function __promisify__(hostname: string, options: LookupOptions): Promise<LookupAddress | LookupAddress[]>;\\n    }\\n    /**\\n     * Resolves the given `address` and `port` into a host name and service using\\n     * the operating system's underlying `getnameinfo` implementation.\\n     *\\n     * If `address` is not a valid IP address, a `TypeError` will be thrown.\\n     * The `port` will be coerced to a number. If it is not a legal port, a `TypeError`will be thrown.\\n     *\\n     * On an error, `err` is an `Error` object, where `err.code` is the error code.\\n     *\\n     * ```js\\n     * const dns = require('dns');\\n     * dns.lookupService('127.0.0.1', 22, (err, hostname, service) => {\\n     *   console.log(hostname, service);\\n     *   // Prints: localhost ssh\\n     * });\\n     * ```\\n     *\\n     * If this method is invoked as its `util.promisify()` ed version, it returns a`Promise` for an `Object` with `hostname` and `service` properties.\\n     * @since v0.11.14\\n     */\\n    export function lookupService(address: string, port: number, callback: (err: NodeJS.ErrnoException | null, hostname: string, service: string) => void): void;\\n    export namespace lookupService {\\n        function __promisify__(\\n            address: string,\\n            port: number\\n        ): Promise<{\\n            hostname: string;\\n            service: string;\\n        }>;\\n    }\\n    export interface ResolveOptions {\\n        ttl: boolean;\\n    }\\n    export interface ResolveWithTtlOptions extends ResolveOptions {\\n        ttl: true;\\n    }\\n    export interface RecordWithTtl {\\n        address: string;\\n        ttl: number;\\n    }\\n    /** @deprecated Use `AnyARecord` or `AnyAaaaRecord` instead. */\\n    export type AnyRecordWithTtl = AnyARecord | AnyAaaaRecord;\\n    export interface AnyARecord extends RecordWithTtl {\\n        type: 'A';\\n    }\\n    export interface AnyAaaaRecord extends RecordWithTtl {\\n        type: 'AAAA';\\n    }\\n    export interface CaaRecord {\\n        critical: number;\\n        issue?: string | undefined;\\n        issuewild?: string | undefined;\\n        iodef?: string | undefined;\\n        contactemail?: string | undefined;\\n        contactphone?: string | undefined;\\n    }\\n    export interface MxRecord {\\n        priority: number;\\n        exchange: string;\\n    }\\n    export interface AnyMxRecord extends MxRecord {\\n        type: 'MX';\\n    }\\n    export interface NaptrRecord {\\n        flags: string;\\n        service: string;\\n        regexp: string;\\n        replacement: string;\\n        order: number;\\n        preference: number;\\n    }\\n    export interface AnyNaptrRecord extends NaptrRecord {\\n        type: 'NAPTR';\\n    }\\n    export interface SoaRecord {\\n        nsname: string;\\n        hostmaster: string;\\n        serial: number;\\n        refresh: number;\\n        retry: number;\\n        expire: number;\\n        minttl: number;\\n    }\\n    export interface AnySoaRecord extends SoaRecord {\\n        type: 'SOA';\\n    }\\n    export interface SrvRecord {\\n        priority: number;\\n        weight: number;\\n        port: number;\\n        name: string;\\n    }\\n    export interface AnySrvRecord extends SrvRecord {\\n        type: 'SRV';\\n    }\\n    export interface AnyTxtRecord {\\n        type: 'TXT';\\n        entries: string[];\\n    }\\n    export interface AnyNsRecord {\\n        type: 'NS';\\n        value: string;\\n    }\\n    export interface AnyPtrRecord {\\n        type: 'PTR';\\n        value: string;\\n    }\\n    export interface AnyCnameRecord {\\n        type: 'CNAME';\\n        value: string;\\n    }\\n    export type AnyRecord = AnyARecord | AnyAaaaRecord | AnyCnameRecord | AnyMxRecord | AnyNaptrRecord | AnyNsRecord | AnyPtrRecord | AnySoaRecord | AnySrvRecord | AnyTxtRecord;\\n    /**\\n     * Uses the DNS protocol to resolve a host name (e.g. `'nodejs.org'`) into an array\\n     * of the resource records. The `callback` function has arguments`(err, records)`. When successful, `records` will be an array of resource\\n     * records. The type and structure of individual results varies based on `rrtype`:\\n     *\\n     * <omitted>\\n     *\\n     * On error, `err` is an `Error` object, where `err.code` is one of the `DNS error codes`.\\n     * @since v0.1.27\\n     * @param hostname Host name to resolve.\\n     * @param [rrtype='A'] Resource record type.\\n     */\\n    export function resolve(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\n    export function resolve(hostname: string, rrtype: 'A', callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\n    export function resolve(hostname: string, rrtype: 'AAAA', callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\n    export function resolve(hostname: string, rrtype: 'ANY', callback: (err: NodeJS.ErrnoException | null, addresses: AnyRecord[]) => void): void;\\n    export function resolve(hostname: string, rrtype: 'CNAME', callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\n    export function resolve(hostname: string, rrtype: 'MX', callback: (err: NodeJS.ErrnoException | null, addresses: MxRecord[]) => void): void;\\n    export function resolve(hostname: string, rrtype: 'NAPTR', callback: (err: NodeJS.ErrnoException | null, addresses: NaptrRecord[]) => void): void;\\n    export function resolve(hostname: string, rrtype: 'NS', callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\n    export function resolve(hostname: string, rrtype: 'PTR', callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\n    export function resolve(hostname: string, rrtype: 'SOA', callback: (err: NodeJS.ErrnoException | null, addresses: SoaRecord) => void): void;\\n    export function resolve(hostname: string, rrtype: 'SRV', callback: (err: NodeJS.ErrnoException | null, addresses: SrvRecord[]) => void): void;\\n    export function resolve(hostname: string, rrtype: 'TXT', callback: (err: NodeJS.ErrnoException | null, addresses: string[][]) => void): void;\\n    export function resolve(\\n        hostname: string,\\n        rrtype: string,\\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[] | MxRecord[] | NaptrRecord[] | SoaRecord | SrvRecord[] | string[][] | AnyRecord[]) => void\\n    ): void;\\n    export namespace resolve {\\n        function __promisify__(hostname: string, rrtype?: 'A' | 'AAAA' | 'CNAME' | 'NS' | 'PTR'): Promise<string[]>;\\n        function __promisify__(hostname: string, rrtype: 'ANY'): Promise<AnyRecord[]>;\\n        function __promisify__(hostname: string, rrtype: 'MX'): Promise<MxRecord[]>;\\n        function __promisify__(hostname: string, rrtype: 'NAPTR'): Promise<NaptrRecord[]>;\\n        function __promisify__(hostname: string, rrtype: 'SOA'): Promise<SoaRecord>;\\n        function __promisify__(hostname: string, rrtype: 'SRV'): Promise<SrvRecord[]>;\\n        function __promisify__(hostname: string, rrtype: 'TXT'): Promise<string[][]>;\\n        function __promisify__(hostname: string, rrtype: string): Promise<string[] | MxRecord[] | NaptrRecord[] | SoaRecord | SrvRecord[] | string[][] | AnyRecord[]>;\\n    }\\n    /**\\n     * Uses the DNS protocol to resolve a IPv4 addresses (`A` records) for the`hostname`. The `addresses` argument passed to the `callback` function\\n     * will contain an array of IPv4 addresses (e.g.`['74.125.79.104', '74.125.79.105', '74.125.79.106']`).\\n     * @since v0.1.16\\n     * @param hostname Host name to resolve.\\n     */\\n    export function resolve4(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\n    export function resolve4(hostname: string, options: ResolveWithTtlOptions, callback: (err: NodeJS.ErrnoException | null, addresses: RecordWithTtl[]) => void): void;\\n    export function resolve4(hostname: string, options: ResolveOptions, callback: (err: NodeJS.ErrnoException | null, addresses: string[] | RecordWithTtl[]) => void): void;\\n    export namespace resolve4 {\\n        function __promisify__(hostname: string): Promise<string[]>;\\n        function __promisify__(hostname: string, options: ResolveWithTtlOptions): Promise<RecordWithTtl[]>;\\n        function __promisify__(hostname: string, options?: ResolveOptions): Promise<string[] | RecordWithTtl[]>;\\n    }\\n    /**\\n     * Uses the DNS protocol to resolve a IPv6 addresses (`AAAA` records) for the`hostname`. The `addresses` argument passed to the `callback` function\\n     * will contain an array of IPv6 addresses.\\n     * @since v0.1.16\\n     * @param hostname Host name to resolve.\\n     */\\n    export function resolve6(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\n    export function resolve6(hostname: string, options: ResolveWithTtlOptions, callback: (err: NodeJS.ErrnoException | null, addresses: RecordWithTtl[]) => void): void;\\n    export function resolve6(hostname: string, options: ResolveOptions, callback: (err: NodeJS.ErrnoException | null, addresses: string[] | RecordWithTtl[]) => void): void;\\n    export namespace resolve6 {\\n        function __promisify__(hostname: string): Promise<string[]>;\\n        function __promisify__(hostname: string, options: ResolveWithTtlOptions): Promise<RecordWithTtl[]>;\\n        function __promisify__(hostname: string, options?: ResolveOptions): Promise<string[] | RecordWithTtl[]>;\\n    }\\n    /**\\n     * Uses the DNS protocol to resolve `CNAME` records for the `hostname`. The`addresses` argument passed to the `callback` function\\n     * will contain an array of canonical name records available for the `hostname`(e.g. `['bar.example.com']`).\\n     * @since v0.3.2\\n     */\\n    export function resolveCname(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\n    export namespace resolveCname {\\n        function __promisify__(hostname: string): Promise<string[]>;\\n    }\\n    /**\\n     * Uses the DNS protocol to resolve `CAA` records for the `hostname`. The`addresses` argument passed to the `callback` function\\n     * will contain an array of certification authority authorization records\\n     * available for the `hostname` (e.g. `[{critical: 0, iodef: 'mailto:pki@example.com'}, {critical: 128, issue: 'pki.example.com'}]`).\\n     * @since v15.0.0, v14.17.0\\n     */\\n    export function resolveCaa(hostname: string, callback: (err: NodeJS.ErrnoException | null, records: CaaRecord[]) => void): void;\\n    export namespace resolveCaa {\\n        function __promisify__(hostname: string): Promise<CaaRecord[]>;\\n    }\\n    /**\\n     * Uses the DNS protocol to resolve mail exchange records (`MX` records) for the`hostname`. The `addresses` argument passed to the `callback` function will\\n     * contain an array of objects containing both a `priority` and `exchange`property (e.g. `[{priority: 10, exchange: 'mx.example.com'}, ...]`).\\n     * @since v0.1.27\\n     */\\n    export function resolveMx(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: MxRecord[]) => void): void;\\n    export namespace resolveMx {\\n        function __promisify__(hostname: string): Promise<MxRecord[]>;\\n    }\\n    /**\\n     * Uses the DNS protocol to resolve regular expression based records (`NAPTR`records) for the `hostname`. The `addresses` argument passed to the `callback`function will contain an array of\\n     * objects with the following properties:\\n     *\\n     * * `flags`\\n     * * `service`\\n     * * `regexp`\\n     * * `replacement`\\n     * * `order`\\n     * * `preference`\\n     *\\n     * ```js\\n     * {\\n     *   flags: 's',\\n     *   service: 'SIP+D2U',\\n     *   regexp: '',\\n     *   replacement: '_sip._udp.example.com',\\n     *   order: 30,\\n     *   preference: 100\\n     * }\\n     * ```\\n     * @since v0.9.12\\n     */\\n    export function resolveNaptr(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: NaptrRecord[]) => void): void;\\n    export namespace resolveNaptr {\\n        function __promisify__(hostname: string): Promise<NaptrRecord[]>;\\n    }\\n    /**\\n     * Uses the DNS protocol to resolve name server records (`NS` records) for the`hostname`. The `addresses` argument passed to the `callback` function will\\n     * contain an array of name server records available for `hostname`(e.g. `['ns1.example.com', 'ns2.example.com']`).\\n     * @since v0.1.90\\n     */\\n    export function resolveNs(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\n    export namespace resolveNs {\\n        function __promisify__(hostname: string): Promise<string[]>;\\n    }\\n    /**\\n     * Uses the DNS protocol to resolve pointer records (`PTR` records) for the`hostname`. The `addresses` argument passed to the `callback` function will\\n     * be an array of strings containing the reply records.\\n     * @since v6.0.0\\n     */\\n    export function resolvePtr(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\n    export namespace resolvePtr {\\n        function __promisify__(hostname: string): Promise<string[]>;\\n    }\\n    /**\\n     * Uses the DNS protocol to resolve a start of authority record (`SOA` record) for\\n     * the `hostname`. The `address` argument passed to the `callback` function will\\n     * be an object with the following properties:\\n     *\\n     * * `nsname`\\n     * * `hostmaster`\\n     * * `serial`\\n     * * `refresh`\\n     * * `retry`\\n     * * `expire`\\n     * * `minttl`\\n     *\\n     * ```js\\n     * {\\n     *   nsname: 'ns.example.com',\\n     *   hostmaster: 'root.example.com',\\n     *   serial: 2013101809,\\n     *   refresh: 10000,\\n     *   retry: 2400,\\n     *   expire: 604800,\\n     *   minttl: 3600\\n     * }\\n     * ```\\n     * @since v0.11.10\\n     */\\n    export function resolveSoa(hostname: string, callback: (err: NodeJS.ErrnoException | null, address: SoaRecord) => void): void;\\n    export namespace resolveSoa {\\n        function __promisify__(hostname: string): Promise<SoaRecord>;\\n    }\\n    /**\\n     * Uses the DNS protocol to resolve service records (`SRV` records) for the`hostname`. The `addresses` argument passed to the `callback` function will\\n     * be an array of objects with the following properties:\\n     *\\n     * * `priority`\\n     * * `weight`\\n     * * `port`\\n     * * `name`\\n     *\\n     * ```js\\n     * {\\n     *   priority: 10,\\n     *   weight: 5,\\n     *   port: 21223,\\n     *   name: 'service.example.com'\\n     * }\\n     * ```\\n     * @since v0.1.27\\n     */\\n    export function resolveSrv(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: SrvRecord[]) => void): void;\\n    export namespace resolveSrv {\\n        function __promisify__(hostname: string): Promise<SrvRecord[]>;\\n    }\\n    /**\\n     * Uses the DNS protocol to resolve text queries (`TXT` records) for the`hostname`. The `records` argument passed to the `callback` function is a\\n     * two-dimensional array of the text records available for `hostname` (e.g.`[ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]`). Each sub-array contains TXT chunks of\\n     * one record. Depending on the use case, these could be either joined together or\\n     * treated separately.\\n     * @since v0.1.27\\n     */\\n    export function resolveTxt(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: string[][]) => void): void;\\n    export namespace resolveTxt {\\n        function __promisify__(hostname: string): Promise<string[][]>;\\n    }\\n    /**\\n     * Uses the DNS protocol to resolve all records (also known as `ANY` or `*` query).\\n     * The `ret` argument passed to the `callback` function will be an array containing\\n     * various types of records. Each object has a property `type` that indicates the\\n     * type of the current record. And depending on the `type`, additional properties\\n     * will be present on the object:\\n     *\\n     * <omitted>\\n     *\\n     * Here is an example of the `ret` object passed to the callback:\\n     *\\n     * ```js\\n     * [ { type: 'A', address: '127.0.0.1', ttl: 299 },\\n     *   { type: 'CNAME', value: 'example.com' },\\n     *   { type: 'MX', exchange: 'alt4.aspmx.l.example.com', priority: 50 },\\n     *   { type: 'NS', value: 'ns1.example.com' },\\n     *   { type: 'TXT', entries: [ 'v=spf1 include:_spf.example.com ~all' ] },\\n     *   { type: 'SOA',\\n     *     nsname: 'ns1.example.com',\\n     *     hostmaster: 'admin.example.com',\\n     *     serial: 156696742,\\n     *     refresh: 900,\\n     *     retry: 900,\\n     *     expire: 1800,\\n     *     minttl: 60 } ]\\n     * ```\\n     *\\n     * DNS server operators may choose not to respond to `ANY`queries. It may be better to call individual methods like {@link resolve4},{@link resolveMx}, and so on. For more details, see [RFC\\n     * 8482](https://tools.ietf.org/html/rfc8482).\\n     */\\n    export function resolveAny(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: AnyRecord[]) => void): void;\\n    export namespace resolveAny {\\n        function __promisify__(hostname: string): Promise<AnyRecord[]>;\\n    }\\n    /**\\n     * Performs a reverse DNS query that resolves an IPv4 or IPv6 address to an\\n     * array of host names.\\n     *\\n     * On error, `err` is an `Error` object, where `err.code` is\\n     * one of the `DNS error codes`.\\n     * @since v0.1.16\\n     */\\n    export function reverse(ip: string, callback: (err: NodeJS.ErrnoException | null, hostnames: string[]) => void): void;\\n    /**\\n     * Sets the IP address and port of servers to be used when performing DNS\\n     * resolution. The `servers` argument is an array of [RFC 5952](https://tools.ietf.org/html/rfc5952#section-6) formatted\\n     * addresses. If the port is the IANA default DNS port (53) it can be omitted.\\n     *\\n     * ```js\\n     * dns.setServers([\\n     *   '4.4.4.4',\\n     *   '[2001:4860:4860::8888]',\\n     *   '4.4.4.4:1053',\\n     *   '[2001:4860:4860::8888]:1053',\\n     * ]);\\n     * ```\\n     *\\n     * An error will be thrown if an invalid address is provided.\\n     *\\n     * The `dns.setServers()` method must not be called while a DNS query is in\\n     * progress.\\n     *\\n     * The {@link setServers} method affects only {@link resolve},`dns.resolve*()` and {@link reverse} (and specifically _not_ {@link lookup}).\\n     *\\n     * This method works much like [resolve.conf](https://man7.org/linux/man-pages/man5/resolv.conf.5.html).\\n     * That is, if attempting to resolve with the first server provided results in a`NOTFOUND` error, the `resolve()` method will _not_ attempt to resolve with\\n     * subsequent servers provided. Fallback DNS servers will only be used if the\\n     * earlier ones time out or result in some other error.\\n     * @since v0.11.3\\n     * @param servers array of `RFC 5952` formatted addresses\\n     */\\n    export function setServers(servers: ReadonlyArray<string>): void;\\n    /**\\n     * Returns an array of IP address strings, formatted according to [RFC 5952](https://tools.ietf.org/html/rfc5952#section-6),\\n     * that are currently configured for DNS resolution. A string will include a port\\n     * section if a custom port is used.\\n     *\\n     * ```js\\n     * [\\n     *   '4.4.4.4',\\n     *   '2001:4860:4860::8888',\\n     *   '4.4.4.4:1053',\\n     *   '[2001:4860:4860::8888]:1053',\\n     * ]\\n     * ```\\n     * @since v0.11.3\\n     */\\n    export function getServers(): string[];\\n    /**\\n     * Set the default value of `verbatim` in {@link lookup} and `dnsPromises.lookup()`. The value could be:\\n     *\\n     * * `ipv4first`: sets default `verbatim` `false`.\\n     * * `verbatim`: sets default `verbatim` `true`.\\n     *\\n     * The default is `ipv4first` and {@link setDefaultResultOrder} have higher\\n     * priority than `--dns-result-order`. When using `worker threads`,{@link setDefaultResultOrder} from the main thread won't affect the default\\n     * dns orders in workers.\\n     * @since v16.4.0, v14.18.0\\n     * @param order must be `'ipv4first'` or `'verbatim'`.\\n     */\\n    export function setDefaultResultOrder(order: 'ipv4first' | 'verbatim'): void;\\n    // Error codes\\n    export const NODATA: string;\\n    export const FORMERR: string;\\n    export const SERVFAIL: string;\\n    export const NOTFOUND: string;\\n    export const NOTIMP: string;\\n    export const REFUSED: string;\\n    export const BADQUERY: string;\\n    export const BADNAME: string;\\n    export const BADFAMILY: string;\\n    export const BADRESP: string;\\n    export const CONNREFUSED: string;\\n    export const TIMEOUT: string;\\n    export const EOF: string;\\n    export const FILE: string;\\n    export const NOMEM: string;\\n    export const DESTRUCTION: string;\\n    export const BADSTR: string;\\n    export const BADFLAGS: string;\\n    export const NONAME: string;\\n    export const BADHINTS: string;\\n    export const NOTINITIALIZED: string;\\n    export const LOADIPHLPAPI: string;\\n    export const ADDRGETNETWORKPARAMS: string;\\n    export const CANCELLED: string;\\n    export interface ResolverOptions {\\n        timeout?: number | undefined;\\n        /**\\n         * @default 4\\n         */\\n        tries?: number;\\n    }\\n    /**\\n     * An independent resolver for DNS requests.\\n     *\\n     * Creating a new resolver uses the default server settings. Setting\\n     * the servers used for a resolver using `resolver.setServers()` does not affect\\n     * other resolvers:\\n     *\\n     * ```js\\n     * const { Resolver } = require('dns');\\n     * const resolver = new Resolver();\\n     * resolver.setServers(['4.4.4.4']);\\n     *\\n     * // This request will use the server at 4.4.4.4, independent of global settings.\\n     * resolver.resolve4('example.org', (err, addresses) => {\\n     *   // ...\\n     * });\\n     * ```\\n     *\\n     * The following methods from the `dns` module are available:\\n     *\\n     * * `resolver.getServers()`\\n     * * `resolver.resolve()`\\n     * * `resolver.resolve4()`\\n     * * `resolver.resolve6()`\\n     * * `resolver.resolveAny()`\\n     * * `resolver.resolveCaa()`\\n     * * `resolver.resolveCname()`\\n     * * `resolver.resolveMx()`\\n     * * `resolver.resolveNaptr()`\\n     * * `resolver.resolveNs()`\\n     * * `resolver.resolvePtr()`\\n     * * `resolver.resolveSoa()`\\n     * * `resolver.resolveSrv()`\\n     * * `resolver.resolveTxt()`\\n     * * `resolver.reverse()`\\n     * * `resolver.setServers()`\\n     * @since v8.3.0\\n     */\\n    export class Resolver {\\n        constructor(options?: ResolverOptions);\\n        /**\\n         * Cancel all outstanding DNS queries made by this resolver. The corresponding\\n         * callbacks will be called with an error with code `ECANCELLED`.\\n         * @since v8.3.0\\n         */\\n        cancel(): void;\\n        getServers: typeof getServers;\\n        resolve: typeof resolve;\\n        resolve4: typeof resolve4;\\n        resolve6: typeof resolve6;\\n        resolveAny: typeof resolveAny;\\n        resolveCaa: typeof resolveCaa;\\n        resolveCname: typeof resolveCname;\\n        resolveMx: typeof resolveMx;\\n        resolveNaptr: typeof resolveNaptr;\\n        resolveNs: typeof resolveNs;\\n        resolvePtr: typeof resolvePtr;\\n        resolveSoa: typeof resolveSoa;\\n        resolveSrv: typeof resolveSrv;\\n        resolveTxt: typeof resolveTxt;\\n        reverse: typeof reverse;\\n        /**\\n         * The resolver instance will send its requests from the specified IP address.\\n         * This allows programs to specify outbound interfaces when used on multi-homed\\n         * systems.\\n         *\\n         * If a v4 or v6 address is not specified, it is set to the default, and the\\n         * operating system will choose a local address automatically.\\n         *\\n         * The resolver will use the v4 local address when making requests to IPv4 DNS\\n         * servers, and the v6 local address when making requests to IPv6 DNS servers.\\n         * The `rrtype` of resolution requests has no impact on the local address used.\\n         * @since v15.1.0, v14.17.0\\n         * @param [ipv4='0.0.0.0'] A string representation of an IPv4 address.\\n         * @param [ipv6='::0'] A string representation of an IPv6 address.\\n         */\\n        setLocalAddress(ipv4?: string, ipv6?: string): void;\\n        setServers: typeof setServers;\\n    }\\n    export { dnsPromises as promises };\\n}\\ndeclare module 'node:dns' {\\n    export * from 'dns';\\n}\\n\",\"file:///node_modules/@types/node/dom-events.d.ts\":\"export {}; // Don't export anything!\\n\\n//// DOM-like Events\\n// NB: The Event / EventTarget / EventListener implementations below were copied\\n// from lib.dom.d.ts, then edited to reflect Node's documentation at\\n// https://nodejs.org/api/events.html#class-eventtarget.\\n// Please read that link to understand important implementation differences.\\n\\n// This conditional type will be the existing global Event in a browser, or\\n// the copy below in a Node environment.\\ntype __Event = typeof globalThis extends { onmessage: any, Event: any }\\n? {}\\n: {\\n    /** This is not used in Node.js and is provided purely for completeness. */\\n    readonly bubbles: boolean;\\n    /** Alias for event.stopPropagation(). This is not used in Node.js and is provided purely for completeness. */\\n    cancelBubble: () => void;\\n    /** True if the event was created with the cancelable option */\\n    readonly cancelable: boolean;\\n    /** This is not used in Node.js and is provided purely for completeness. */\\n    readonly composed: boolean;\\n    /** Returns an array containing the current EventTarget as the only entry or empty if the event is not being dispatched. This is not used in Node.js and is provided purely for completeness. */\\n    composedPath(): [EventTarget?]\\n    /** Alias for event.target. */\\n    readonly currentTarget: EventTarget | null;\\n    /** Is true if cancelable is true and event.preventDefault() has been called. */\\n    readonly defaultPrevented: boolean;\\n    /** This is not used in Node.js and is provided purely for completeness. */\\n    readonly eventPhase: 0 | 2;\\n    /** The `AbortSignal` \\\"abort\\\" event is emitted with `isTrusted` set to `true`. The value is `false` in all other cases. */\\n    readonly isTrusted: boolean;\\n    /** Sets the `defaultPrevented` property to `true` if `cancelable` is `true`. */\\n    preventDefault(): void;\\n    /** This is not used in Node.js and is provided purely for completeness. */\\n    returnValue: boolean;\\n    /** Alias for event.target. */\\n    readonly srcElement: EventTarget | null;\\n    /** Stops the invocation of event listeners after the current one completes. */\\n    stopImmediatePropagation(): void;\\n    /** This is not used in Node.js and is provided purely for completeness. */\\n    stopPropagation(): void;\\n    /** The `EventTarget` dispatching the event */\\n    readonly target: EventTarget | null;\\n    /** The millisecond timestamp when the Event object was created. */\\n    readonly timeStamp: number;\\n    /** Returns the type of event, e.g. \\\"click\\\", \\\"hashchange\\\", or \\\"submit\\\". */\\n    readonly type: string;\\n};\\n\\n// See comment above explaining conditional type\\ntype __EventTarget = typeof globalThis extends { onmessage: any, EventTarget: any }\\n? {}\\n: {\\n    /**\\n     * Adds a new handler for the `type` event. Any given `listener` is added only once per `type` and per `capture` option value.\\n     *\\n     * If the `once` option is true, the `listener` is removed after the next time a `type` event is dispatched.\\n     *\\n     * The `capture` option is not used by Node.js in any functional way other than tracking registered event listeners per the `EventTarget` specification.\\n     * Specifically, the `capture` option is used as part of the key when registering a `listener`.\\n     * Any individual `listener` may be added once with `capture = false`, and once with `capture = true`.\\n     */\\n    addEventListener(\\n        type: string,\\n        listener: EventListener | EventListenerObject,\\n        options?: AddEventListenerOptions | boolean,\\n    ): void;\\n    /** Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise. */\\n    dispatchEvent(event: Event): boolean;\\n    /** Removes the event listener in target's event listener list with the same type, callback, and options. */\\n    removeEventListener(\\n        type: string,\\n        listener: EventListener | EventListenerObject,\\n        options?: EventListenerOptions | boolean,\\n    ): void;\\n};\\n\\ninterface EventInit {\\n    bubbles?: boolean;\\n    cancelable?: boolean;\\n    composed?: boolean;\\n}\\n\\ninterface EventListenerOptions {\\n    /** Not directly used by Node.js. Added for API completeness. Default: `false`. */\\n    capture?: boolean;\\n}\\n\\ninterface AddEventListenerOptions extends EventListenerOptions {\\n    /** When `true`, the listener is automatically removed when it is first invoked. Default: `false`. */\\n    once?: boolean;\\n    /** When `true`, serves as a hint that the listener will not call the `Event` object's `preventDefault()` method. Default: false. */\\n    passive?: boolean;\\n}\\n\\ninterface EventListener {\\n    (evt: Event): void;\\n}\\n\\ninterface EventListenerObject {\\n    handleEvent(object: Event): void;\\n}\\n\\nimport {} from 'events';    // Make this an ambient declaration\\ndeclare global {\\n    /** An event which takes place in the DOM. */\\n    interface Event extends __Event {}\\n    var Event: typeof globalThis extends { onmessage: any, Event: infer T }\\n        ? T\\n        : {\\n            prototype: __Event;\\n            new (type: string, eventInitDict?: EventInit): __Event;\\n        };\\n\\n    /**\\n     * EventTarget is a DOM interface implemented by objects that can\\n     * receive events and may have listeners for them.\\n     */\\n    interface EventTarget extends __EventTarget {}\\n    var EventTarget: typeof globalThis extends { onmessage: any, EventTarget: infer T }\\n        ? T\\n        : {\\n            prototype: __EventTarget;\\n            new (): __EventTarget;\\n        };\\n}\\n\",\"file:///node_modules/@types/node/domain.d.ts\":\"/**\\n * **This module is pending deprecation.** Once a replacement API has been\\n * finalized, this module will be fully deprecated. Most developers should\\n * **not** have cause to use this module. Users who absolutely must have\\n * the functionality that domains provide may rely on it for the time being\\n * but should expect to have to migrate to a different solution\\n * in the future.\\n *\\n * Domains provide a way to handle multiple different IO operations as a\\n * single group. If any of the event emitters or callbacks registered to a\\n * domain emit an `'error'` event, or throw an error, then the domain object\\n * will be notified, rather than losing the context of the error in the`process.on('uncaughtException')` handler, or causing the program to\\n * exit immediately with an error code.\\n * @deprecated Since v1.4.2 - Deprecated\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/domain.js)\\n */\\ndeclare module 'domain' {\\n    import EventEmitter = require('node:events');\\n    /**\\n     * The `Domain` class encapsulates the functionality of routing errors and\\n     * uncaught exceptions to the active `Domain` object.\\n     *\\n     * To handle the errors that it catches, listen to its `'error'` event.\\n     */\\n    class Domain extends EventEmitter {\\n        /**\\n         * An array of timers and event emitters that have been explicitly added\\n         * to the domain.\\n         */\\n        members: Array<EventEmitter | NodeJS.Timer>;\\n        /**\\n         * The `enter()` method is plumbing used by the `run()`, `bind()`, and`intercept()` methods to set the active domain. It sets `domain.active` and`process.domain` to the domain, and implicitly\\n         * pushes the domain onto the domain\\n         * stack managed by the domain module (see {@link exit} for details on the\\n         * domain stack). The call to `enter()` delimits the beginning of a chain of\\n         * asynchronous calls and I/O operations bound to a domain.\\n         *\\n         * Calling `enter()` changes only the active domain, and does not alter the domain\\n         * itself. `enter()` and `exit()` can be called an arbitrary number of times on a\\n         * single domain.\\n         */\\n        enter(): void;\\n        /**\\n         * The `exit()` method exits the current domain, popping it off the domain stack.\\n         * Any time execution is going to switch to the context of a different chain of\\n         * asynchronous calls, it's important to ensure that the current domain is exited.\\n         * The call to `exit()` delimits either the end of or an interruption to the chain\\n         * of asynchronous calls and I/O operations bound to a domain.\\n         *\\n         * If there are multiple, nested domains bound to the current execution context,`exit()` will exit any domains nested within this domain.\\n         *\\n         * Calling `exit()` changes only the active domain, and does not alter the domain\\n         * itself. `enter()` and `exit()` can be called an arbitrary number of times on a\\n         * single domain.\\n         */\\n        exit(): void;\\n        /**\\n         * Run the supplied function in the context of the domain, implicitly\\n         * binding all event emitters, timers, and lowlevel requests that are\\n         * created in that context. Optionally, arguments can be passed to\\n         * the function.\\n         *\\n         * This is the most basic way to use a domain.\\n         *\\n         * ```js\\n         * const domain = require('domain');\\n         * const fs = require('fs');\\n         * const d = domain.create();\\n         * d.on('error', (er) => {\\n         *   console.error('Caught error!', er);\\n         * });\\n         * d.run(() => {\\n         *   process.nextTick(() => {\\n         *     setTimeout(() => { // Simulating some various async stuff\\n         *       fs.open('non-existent file', 'r', (er, fd) => {\\n         *         if (er) throw er;\\n         *         // proceed...\\n         *       });\\n         *     }, 100);\\n         *   });\\n         * });\\n         * ```\\n         *\\n         * In this example, the `d.on('error')` handler will be triggered, rather\\n         * than crashing the program.\\n         */\\n        run<T>(fn: (...args: any[]) => T, ...args: any[]): T;\\n        /**\\n         * Explicitly adds an emitter to the domain. If any event handlers called by\\n         * the emitter throw an error, or if the emitter emits an `'error'` event, it\\n         * will be routed to the domain's `'error'` event, just like with implicit\\n         * binding.\\n         *\\n         * This also works with timers that are returned from `setInterval()` and `setTimeout()`. If their callback function throws, it will be caught by\\n         * the domain `'error'` handler.\\n         *\\n         * If the Timer or `EventEmitter` was already bound to a domain, it is removed\\n         * from that one, and bound to this one instead.\\n         * @param emitter emitter or timer to be added to the domain\\n         */\\n        add(emitter: EventEmitter | NodeJS.Timer): void;\\n        /**\\n         * The opposite of {@link add}. Removes domain handling from the\\n         * specified emitter.\\n         * @param emitter emitter or timer to be removed from the domain\\n         */\\n        remove(emitter: EventEmitter | NodeJS.Timer): void;\\n        /**\\n         * The returned function will be a wrapper around the supplied callback\\n         * function. When the returned function is called, any errors that are\\n         * thrown will be routed to the domain's `'error'` event.\\n         *\\n         * ```js\\n         * const d = domain.create();\\n         *\\n         * function readSomeFile(filename, cb) {\\n         *   fs.readFile(filename, 'utf8', d.bind((er, data) => {\\n         *     // If this throws, it will also be passed to the domain.\\n         *     return cb(er, data ? JSON.parse(data) : null);\\n         *   }));\\n         * }\\n         *\\n         * d.on('error', (er) => {\\n         *   // An error occurred somewhere. If we throw it now, it will crash the program\\n         *   // with the normal line number and stack message.\\n         * });\\n         * ```\\n         * @param callback The callback function\\n         * @return The bound function\\n         */\\n        bind<T extends Function>(callback: T): T;\\n        /**\\n         * This method is almost identical to {@link bind}. However, in\\n         * addition to catching thrown errors, it will also intercept `Error` objects sent as the first argument to the function.\\n         *\\n         * In this way, the common `if (err) return callback(err);` pattern can be replaced\\n         * with a single error handler in a single place.\\n         *\\n         * ```js\\n         * const d = domain.create();\\n         *\\n         * function readSomeFile(filename, cb) {\\n         *   fs.readFile(filename, 'utf8', d.intercept((data) => {\\n         *     // Note, the first argument is never passed to the\\n         *     // callback since it is assumed to be the 'Error' argument\\n         *     // and thus intercepted by the domain.\\n         *\\n         *     // If this throws, it will also be passed to the domain\\n         *     // so the error-handling logic can be moved to the 'error'\\n         *     // event on the domain instead of being repeated throughout\\n         *     // the program.\\n         *     return cb(null, JSON.parse(data));\\n         *   }));\\n         * }\\n         *\\n         * d.on('error', (er) => {\\n         *   // An error occurred somewhere. If we throw it now, it will crash the program\\n         *   // with the normal line number and stack message.\\n         * });\\n         * ```\\n         * @param callback The callback function\\n         * @return The intercepted function\\n         */\\n        intercept<T extends Function>(callback: T): T;\\n    }\\n    function create(): Domain;\\n}\\ndeclare module 'node:domain' {\\n    export * from 'domain';\\n}\\n\",\"file:///node_modules/@types/node/events.d.ts\":\"/**\\n * Much of the Node.js core API is built around an idiomatic asynchronous\\n * event-driven architecture in which certain kinds of objects (called \\\"emitters\\\")\\n * emit named events that cause `Function` objects (\\\"listeners\\\") to be called.\\n *\\n * For instance: a `net.Server` object emits an event each time a peer\\n * connects to it; a `fs.ReadStream` emits an event when the file is opened;\\n * a `stream` emits an event whenever data is available to be read.\\n *\\n * All objects that emit events are instances of the `EventEmitter` class. These\\n * objects expose an `eventEmitter.on()` function that allows one or more\\n * functions to be attached to named events emitted by the object. Typically,\\n * event names are camel-cased strings but any valid JavaScript property key\\n * can be used.\\n *\\n * When the `EventEmitter` object emits an event, all of the functions attached\\n * to that specific event are called _synchronously_. Any values returned by the\\n * called listeners are _ignored_ and discarded.\\n *\\n * The following example shows a simple `EventEmitter` instance with a single\\n * listener. The `eventEmitter.on()` method is used to register listeners, while\\n * the `eventEmitter.emit()` method is used to trigger the event.\\n *\\n * ```js\\n * const EventEmitter = require('events');\\n *\\n * class MyEmitter extends EventEmitter {}\\n *\\n * const myEmitter = new MyEmitter();\\n * myEmitter.on('event', () => {\\n *   console.log('an event occurred!');\\n * });\\n * myEmitter.emit('event');\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/events.js)\\n */\\ndeclare module 'events' {\\n    // NOTE: This class is in the docs but is **not actually exported** by Node.\\n    // If https://github.com/nodejs/node/issues/39903 gets resolved and Node\\n    // actually starts exporting the class, uncomment below.\\n\\n    // import { EventListener, EventListenerObject } from '__dom-events';\\n    // /** The NodeEventTarget is a Node.js-specific extension to EventTarget that emulates a subset of the EventEmitter API. */\\n    // interface NodeEventTarget extends EventTarget {\\n    //     /**\\n    //      * Node.js-specific extension to the `EventTarget` class that emulates the equivalent `EventEmitter` API.\\n    //      * The only difference between `addListener()` and `addEventListener()` is that addListener() will return a reference to the EventTarget.\\n    //      */\\n    //     addListener(type: string, listener: EventListener | EventListenerObject, options?: { once: boolean }): this;\\n    //     /** Node.js-specific extension to the `EventTarget` class that returns an array of event `type` names for which event listeners are registered. */\\n    //     eventNames(): string[];\\n    //     /** Node.js-specific extension to the `EventTarget` class that returns the number of event listeners registered for the `type`. */\\n    //     listenerCount(type: string): number;\\n    //     /** Node.js-specific alias for `eventTarget.removeListener()`. */\\n    //     off(type: string, listener: EventListener | EventListenerObject): this;\\n    //     /** Node.js-specific alias for `eventTarget.addListener()`. */\\n    //     on(type: string, listener: EventListener | EventListenerObject, options?: { once: boolean }): this;\\n    //     /** Node.js-specific extension to the `EventTarget` class that adds a `once` listener for the given event `type`. This is equivalent to calling `on` with the `once` option set to `true`. */\\n    //     once(type: string, listener: EventListener | EventListenerObject): this;\\n    //     /**\\n    //      * Node.js-specific extension to the `EventTarget` class.\\n    //      * If `type` is specified, removes all registered listeners for `type`,\\n    //      * otherwise removes all registered listeners.\\n    //      */\\n    //     removeAllListeners(type: string): this;\\n    //     /**\\n    //      * Node.js-specific extension to the `EventTarget` class that removes the listener for the given `type`.\\n    //      * The only difference between `removeListener()` and `removeEventListener()` is that `removeListener()` will return a reference to the `EventTarget`.\\n    //      */\\n    //     removeListener(type: string, listener: EventListener | EventListenerObject): this;\\n    // }\\n\\n    interface EventEmitterOptions {\\n        /**\\n         * Enables automatic capturing of promise rejection.\\n         */\\n        captureRejections?: boolean | undefined;\\n    }\\n    // Any EventTarget with a Node-style `once` function\\n    interface _NodeEventTarget {\\n        once(eventName: string | symbol, listener: (...args: any[]) => void): this;\\n    }\\n    // Any EventTarget with a DOM-style `addEventListener`\\n    interface _DOMEventTarget {\\n        addEventListener(\\n            eventName: string,\\n            listener: (...args: any[]) => void,\\n            opts?: {\\n                once: boolean;\\n            }\\n        ): any;\\n    }\\n    interface StaticEventEmitterOptions {\\n        signal?: AbortSignal | undefined;\\n    }\\n    interface EventEmitter extends NodeJS.EventEmitter {}\\n    /**\\n     * The `EventEmitter` class is defined and exposed by the `events` module:\\n     *\\n     * ```js\\n     * const EventEmitter = require('events');\\n     * ```\\n     *\\n     * All `EventEmitter`s emit the event `'newListener'` when new listeners are\\n     * added and `'removeListener'` when existing listeners are removed.\\n     *\\n     * It supports the following option:\\n     * @since v0.1.26\\n     */\\n    class EventEmitter {\\n        constructor(options?: EventEmitterOptions);\\n        /**\\n         * Creates a `Promise` that is fulfilled when the `EventEmitter` emits the given\\n         * event or that is rejected if the `EventEmitter` emits `'error'` while waiting.\\n         * The `Promise` will resolve with an array of all the arguments emitted to the\\n         * given event.\\n         *\\n         * This method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special`'error'` event\\n         * semantics and does not listen to the `'error'` event.\\n         *\\n         * ```js\\n         * const { once, EventEmitter } = require('events');\\n         *\\n         * async function run() {\\n         *   const ee = new EventEmitter();\\n         *\\n         *   process.nextTick(() => {\\n         *     ee.emit('myevent', 42);\\n         *   });\\n         *\\n         *   const [value] = await once(ee, 'myevent');\\n         *   console.log(value);\\n         *\\n         *   const err = new Error('kaboom');\\n         *   process.nextTick(() => {\\n         *     ee.emit('error', err);\\n         *   });\\n         *\\n         *   try {\\n         *     await once(ee, 'myevent');\\n         *   } catch (err) {\\n         *     console.log('error happened', err);\\n         *   }\\n         * }\\n         *\\n         * run();\\n         * ```\\n         *\\n         * The special handling of the `'error'` event is only used when `events.once()`is used to wait for another event. If `events.once()` is used to wait for the\\n         * '`error'` event itself, then it is treated as any other kind of event without\\n         * special handling:\\n         *\\n         * ```js\\n         * const { EventEmitter, once } = require('events');\\n         *\\n         * const ee = new EventEmitter();\\n         *\\n         * once(ee, 'error')\\n         *   .then(([err]) => console.log('ok', err.message))\\n         *   .catch((err) => console.log('error', err.message));\\n         *\\n         * ee.emit('error', new Error('boom'));\\n         *\\n         * // Prints: ok boom\\n         * ```\\n         *\\n         * An `AbortSignal` can be used to cancel waiting for the event:\\n         *\\n         * ```js\\n         * const { EventEmitter, once } = require('events');\\n         *\\n         * const ee = new EventEmitter();\\n         * const ac = new AbortController();\\n         *\\n         * async function foo(emitter, event, signal) {\\n         *   try {\\n         *     await once(emitter, event, { signal });\\n         *     console.log('event emitted!');\\n         *   } catch (error) {\\n         *     if (error.name === 'AbortError') {\\n         *       console.error('Waiting for the event was canceled!');\\n         *     } else {\\n         *       console.error('There was an error', error.message);\\n         *     }\\n         *   }\\n         * }\\n         *\\n         * foo(ee, 'foo', ac.signal);\\n         * ac.abort(); // Abort waiting for the event\\n         * ee.emit('foo'); // Prints: Waiting for the event was canceled!\\n         * ```\\n         * @since v11.13.0, v10.16.0\\n         */\\n        static once(emitter: _NodeEventTarget, eventName: string | symbol, options?: StaticEventEmitterOptions): Promise<any[]>;\\n        static once(emitter: _DOMEventTarget, eventName: string, options?: StaticEventEmitterOptions): Promise<any[]>;\\n        /**\\n         * ```js\\n         * const { on, EventEmitter } = require('events');\\n         *\\n         * (async () => {\\n         *   const ee = new EventEmitter();\\n         *\\n         *   // Emit later on\\n         *   process.nextTick(() => {\\n         *     ee.emit('foo', 'bar');\\n         *     ee.emit('foo', 42);\\n         *   });\\n         *\\n         *   for await (const event of on(ee, 'foo')) {\\n         *     // The execution of this inner block is synchronous and it\\n         *     // processes one event at a time (even with await). Do not use\\n         *     // if concurrent execution is required.\\n         *     console.log(event); // prints ['bar'] [42]\\n         *   }\\n         *   // Unreachable here\\n         * })();\\n         * ```\\n         *\\n         * Returns an `AsyncIterator` that iterates `eventName` events. It will throw\\n         * if the `EventEmitter` emits `'error'`. It removes all listeners when\\n         * exiting the loop. The `value` returned by each iteration is an array\\n         * composed of the emitted event arguments.\\n         *\\n         * An `AbortSignal` can be used to cancel waiting on events:\\n         *\\n         * ```js\\n         * const { on, EventEmitter } = require('events');\\n         * const ac = new AbortController();\\n         *\\n         * (async () => {\\n         *   const ee = new EventEmitter();\\n         *\\n         *   // Emit later on\\n         *   process.nextTick(() => {\\n         *     ee.emit('foo', 'bar');\\n         *     ee.emit('foo', 42);\\n         *   });\\n         *\\n         *   for await (const event of on(ee, 'foo', { signal: ac.signal })) {\\n         *     // The execution of this inner block is synchronous and it\\n         *     // processes one event at a time (even with await). Do not use\\n         *     // if concurrent execution is required.\\n         *     console.log(event); // prints ['bar'] [42]\\n         *   }\\n         *   // Unreachable here\\n         * })();\\n         *\\n         * process.nextTick(() => ac.abort());\\n         * ```\\n         * @since v13.6.0, v12.16.0\\n         * @param eventName The name of the event being listened for\\n         * @return that iterates `eventName` events emitted by the `emitter`\\n         */\\n        static on(emitter: NodeJS.EventEmitter, eventName: string, options?: StaticEventEmitterOptions): AsyncIterableIterator<any>;\\n        /**\\n         * A class method that returns the number of listeners for the given `eventName`registered on the given `emitter`.\\n         *\\n         * ```js\\n         * const { EventEmitter, listenerCount } = require('events');\\n         * const myEmitter = new EventEmitter();\\n         * myEmitter.on('event', () => {});\\n         * myEmitter.on('event', () => {});\\n         * console.log(listenerCount(myEmitter, 'event'));\\n         * // Prints: 2\\n         * ```\\n         * @since v0.9.12\\n         * @deprecated Since v3.2.0 - Use `listenerCount` instead.\\n         * @param emitter The emitter to query\\n         * @param eventName The event name\\n         */\\n        static listenerCount(emitter: NodeJS.EventEmitter, eventName: string | symbol): number;\\n        /**\\n         * Returns a copy of the array of listeners for the event named `eventName`.\\n         *\\n         * For `EventEmitter`s this behaves exactly the same as calling `.listeners` on\\n         * the emitter.\\n         *\\n         * For `EventTarget`s this is the only way to get the event listeners for the\\n         * event target. This is useful for debugging and diagnostic purposes.\\n         *\\n         * ```js\\n         * const { getEventListeners, EventEmitter } = require('events');\\n         *\\n         * {\\n         *   const ee = new EventEmitter();\\n         *   const listener = () => console.log('Events are fun');\\n         *   ee.on('foo', listener);\\n         *   getEventListeners(ee, 'foo'); // [listener]\\n         * }\\n         * {\\n         *   const et = new EventTarget();\\n         *   const listener = () => console.log('Events are fun');\\n         *   et.addEventListener('foo', listener);\\n         *   getEventListeners(et, 'foo'); // [listener]\\n         * }\\n         * ```\\n         * @since v15.2.0, v14.17.0\\n         */\\n        static getEventListeners(emitter: _DOMEventTarget | NodeJS.EventEmitter, name: string | symbol): Function[];\\n        /**\\n         * ```js\\n         * const {\\n         *   setMaxListeners,\\n         *   EventEmitter\\n         * } = require('events');\\n         *\\n         * const target = new EventTarget();\\n         * const emitter = new EventEmitter();\\n         *\\n         * setMaxListeners(5, target, emitter);\\n         * ```\\n         * @since v15.4.0\\n         * @param n A non-negative number. The maximum number of listeners per `EventTarget` event.\\n         * @param eventsTargets Zero or more {EventTarget} or {EventEmitter} instances. If none are specified, `n` is set as the default max for all newly created {EventTarget} and {EventEmitter}\\n         * objects.\\n         */\\n        static setMaxListeners(n?: number, ...eventTargets: Array<_DOMEventTarget | NodeJS.EventEmitter>): void;\\n        /**\\n         * This symbol shall be used to install a listener for only monitoring `'error'`\\n         * events. Listeners installed using this symbol are called before the regular\\n         * `'error'` listeners are called.\\n         *\\n         * Installing a listener using this symbol does not change the behavior once an\\n         * `'error'` event is emitted, therefore the process will still crash if no\\n         * regular `'error'` listener is installed.\\n         */\\n        static readonly errorMonitor: unique symbol;\\n        static readonly captureRejectionSymbol: unique symbol;\\n        /**\\n         * Sets or gets the default captureRejection value for all emitters.\\n         */\\n        // TODO: These should be described using static getter/setter pairs:\\n        static captureRejections: boolean;\\n        static defaultMaxListeners: number;\\n    }\\n    import internal = require('node:events');\\n    namespace EventEmitter {\\n        // Should just be `export { EventEmitter }`, but that doesn't work in TypeScript 3.4\\n        export { internal as EventEmitter };\\n        export interface Abortable {\\n            /**\\n             * When provided the corresponding `AbortController` can be used to cancel an asynchronous action.\\n             */\\n            signal?: AbortSignal | undefined;\\n        }\\n    }\\n    global {\\n        namespace NodeJS {\\n            interface EventEmitter {\\n                /**\\n                 * Alias for `emitter.on(eventName, listener)`.\\n                 * @since v0.1.26\\n                 */\\n                addListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\\n                /**\\n                 * Adds the `listener` function to the end of the listeners array for the\\n                 * event named `eventName`. No checks are made to see if the `listener` has\\n                 * already been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\\n                 * times.\\n                 *\\n                 * ```js\\n                 * server.on('connection', (stream) => {\\n                 *   console.log('someone connected!');\\n                 * });\\n                 * ```\\n                 *\\n                 * Returns a reference to the `EventEmitter`, so that calls can be chained.\\n                 *\\n                 * By default, event listeners are invoked in the order they are added. The`emitter.prependListener()` method can be used as an alternative to add the\\n                 * event listener to the beginning of the listeners array.\\n                 *\\n                 * ```js\\n                 * const myEE = new EventEmitter();\\n                 * myEE.on('foo', () => console.log('a'));\\n                 * myEE.prependListener('foo', () => console.log('b'));\\n                 * myEE.emit('foo');\\n                 * // Prints:\\n                 * //   b\\n                 * //   a\\n                 * ```\\n                 * @since v0.1.101\\n                 * @param eventName The name of the event.\\n                 * @param listener The callback function\\n                 */\\n                on(eventName: string | symbol, listener: (...args: any[]) => void): this;\\n                /**\\n                 * Adds a **one-time**`listener` function for the event named `eventName`. The\\n                 * next time `eventName` is triggered, this listener is removed and then invoked.\\n                 *\\n                 * ```js\\n                 * server.once('connection', (stream) => {\\n                 *   console.log('Ah, we have our first user!');\\n                 * });\\n                 * ```\\n                 *\\n                 * Returns a reference to the `EventEmitter`, so that calls can be chained.\\n                 *\\n                 * By default, event listeners are invoked in the order they are added. The`emitter.prependOnceListener()` method can be used as an alternative to add the\\n                 * event listener to the beginning of the listeners array.\\n                 *\\n                 * ```js\\n                 * const myEE = new EventEmitter();\\n                 * myEE.once('foo', () => console.log('a'));\\n                 * myEE.prependOnceListener('foo', () => console.log('b'));\\n                 * myEE.emit('foo');\\n                 * // Prints:\\n                 * //   b\\n                 * //   a\\n                 * ```\\n                 * @since v0.3.0\\n                 * @param eventName The name of the event.\\n                 * @param listener The callback function\\n                 */\\n                once(eventName: string | symbol, listener: (...args: any[]) => void): this;\\n                /**\\n                 * Removes the specified `listener` from the listener array for the event named`eventName`.\\n                 *\\n                 * ```js\\n                 * const callback = (stream) => {\\n                 *   console.log('someone connected!');\\n                 * };\\n                 * server.on('connection', callback);\\n                 * // ...\\n                 * server.removeListener('connection', callback);\\n                 * ```\\n                 *\\n                 * `removeListener()` will remove, at most, one instance of a listener from the\\n                 * listener array. If any single listener has been added multiple times to the\\n                 * listener array for the specified `eventName`, then `removeListener()` must be\\n                 * called multiple times to remove each instance.\\n                 *\\n                 * Once an event is emitted, all listeners attached to it at the\\n                 * time of emitting are called in order. This implies that any`removeListener()` or `removeAllListeners()` calls _after_ emitting and _before_ the last listener finishes execution\\n                 * will not remove them from`emit()` in progress. Subsequent events behave as expected.\\n                 *\\n                 * ```js\\n                 * const myEmitter = new MyEmitter();\\n                 *\\n                 * const callbackA = () => {\\n                 *   console.log('A');\\n                 *   myEmitter.removeListener('event', callbackB);\\n                 * };\\n                 *\\n                 * const callbackB = () => {\\n                 *   console.log('B');\\n                 * };\\n                 *\\n                 * myEmitter.on('event', callbackA);\\n                 *\\n                 * myEmitter.on('event', callbackB);\\n                 *\\n                 * // callbackA removes listener callbackB but it will still be called.\\n                 * // Internal listener array at time of emit [callbackA, callbackB]\\n                 * myEmitter.emit('event');\\n                 * // Prints:\\n                 * //   A\\n                 * //   B\\n                 *\\n                 * // callbackB is now removed.\\n                 * // Internal listener array [callbackA]\\n                 * myEmitter.emit('event');\\n                 * // Prints:\\n                 * //   A\\n                 * ```\\n                 *\\n                 * Because listeners are managed using an internal array, calling this will\\n                 * change the position indices of any listener registered _after_ the listener\\n                 * being removed. This will not impact the order in which listeners are called,\\n                 * but it means that any copies of the listener array as returned by\\n                 * the `emitter.listeners()` method will need to be recreated.\\n                 *\\n                 * When a single function has been added as a handler multiple times for a single\\n                 * event (as in the example below), `removeListener()` will remove the most\\n                 * recently added instance. In the example the `once('ping')`listener is removed:\\n                 *\\n                 * ```js\\n                 * const ee = new EventEmitter();\\n                 *\\n                 * function pong() {\\n                 *   console.log('pong');\\n                 * }\\n                 *\\n                 * ee.on('ping', pong);\\n                 * ee.once('ping', pong);\\n                 * ee.removeListener('ping', pong);\\n                 *\\n                 * ee.emit('ping');\\n                 * ee.emit('ping');\\n                 * ```\\n                 *\\n                 * Returns a reference to the `EventEmitter`, so that calls can be chained.\\n                 * @since v0.1.26\\n                 */\\n                removeListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\\n                /**\\n                 * Alias for `emitter.removeListener()`.\\n                 * @since v10.0.0\\n                 */\\n                off(eventName: string | symbol, listener: (...args: any[]) => void): this;\\n                /**\\n                 * Removes all listeners, or those of the specified `eventName`.\\n                 *\\n                 * It is bad practice to remove listeners added elsewhere in the code,\\n                 * particularly when the `EventEmitter` instance was created by some other\\n                 * component or module (e.g. sockets or file streams).\\n                 *\\n                 * Returns a reference to the `EventEmitter`, so that calls can be chained.\\n                 * @since v0.1.26\\n                 */\\n                removeAllListeners(event?: string | symbol): this;\\n                /**\\n                 * By default `EventEmitter`s will print a warning if more than `10` listeners are\\n                 * added for a particular event. This is a useful default that helps finding\\n                 * memory leaks. The `emitter.setMaxListeners()` method allows the limit to be\\n                 * modified for this specific `EventEmitter` instance. The value can be set to`Infinity` (or `0`) to indicate an unlimited number of listeners.\\n                 *\\n                 * Returns a reference to the `EventEmitter`, so that calls can be chained.\\n                 * @since v0.3.5\\n                 */\\n                setMaxListeners(n: number): this;\\n                /**\\n                 * Returns the current max listener value for the `EventEmitter` which is either\\n                 * set by `emitter.setMaxListeners(n)` or defaults to {@link defaultMaxListeners}.\\n                 * @since v1.0.0\\n                 */\\n                getMaxListeners(): number;\\n                /**\\n                 * Returns a copy of the array of listeners for the event named `eventName`.\\n                 *\\n                 * ```js\\n                 * server.on('connection', (stream) => {\\n                 *   console.log('someone connected!');\\n                 * });\\n                 * console.log(util.inspect(server.listeners('connection')));\\n                 * // Prints: [ [Function] ]\\n                 * ```\\n                 * @since v0.1.26\\n                 */\\n                listeners(eventName: string | symbol): Function[];\\n                /**\\n                 * Returns a copy of the array of listeners for the event named `eventName`,\\n                 * including any wrappers (such as those created by `.once()`).\\n                 *\\n                 * ```js\\n                 * const emitter = new EventEmitter();\\n                 * emitter.once('log', () => console.log('log once'));\\n                 *\\n                 * // Returns a new Array with a function `onceWrapper` which has a property\\n                 * // `listener` which contains the original listener bound above\\n                 * const listeners = emitter.rawListeners('log');\\n                 * const logFnWrapper = listeners[0];\\n                 *\\n                 * // Logs \\\"log once\\\" to the console and does not unbind the `once` event\\n                 * logFnWrapper.listener();\\n                 *\\n                 * // Logs \\\"log once\\\" to the console and removes the listener\\n                 * logFnWrapper();\\n                 *\\n                 * emitter.on('log', () => console.log('log persistently'));\\n                 * // Will return a new Array with a single function bound by `.on()` above\\n                 * const newListeners = emitter.rawListeners('log');\\n                 *\\n                 * // Logs \\\"log persistently\\\" twice\\n                 * newListeners[0]();\\n                 * emitter.emit('log');\\n                 * ```\\n                 * @since v9.4.0\\n                 */\\n                rawListeners(eventName: string | symbol): Function[];\\n                /**\\n                 * Synchronously calls each of the listeners registered for the event named`eventName`, in the order they were registered, passing the supplied arguments\\n                 * to each.\\n                 *\\n                 * Returns `true` if the event had listeners, `false` otherwise.\\n                 *\\n                 * ```js\\n                 * const EventEmitter = require('events');\\n                 * const myEmitter = new EventEmitter();\\n                 *\\n                 * // First listener\\n                 * myEmitter.on('event', function firstListener() {\\n                 *   console.log('Helloooo! first listener');\\n                 * });\\n                 * // Second listener\\n                 * myEmitter.on('event', function secondListener(arg1, arg2) {\\n                 *   console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\\n                 * });\\n                 * // Third listener\\n                 * myEmitter.on('event', function thirdListener(...args) {\\n                 *   const parameters = args.join(', ');\\n                 *   console.log(`event with parameters ${parameters} in third listener`);\\n                 * });\\n                 *\\n                 * console.log(myEmitter.listeners('event'));\\n                 *\\n                 * myEmitter.emit('event', 1, 2, 3, 4, 5);\\n                 *\\n                 * // Prints:\\n                 * // [\\n                 * //   [Function: firstListener],\\n                 * //   [Function: secondListener],\\n                 * //   [Function: thirdListener]\\n                 * // ]\\n                 * // Helloooo! first listener\\n                 * // event with parameters 1, 2 in second listener\\n                 * // event with parameters 1, 2, 3, 4, 5 in third listener\\n                 * ```\\n                 * @since v0.1.26\\n                 */\\n                emit(eventName: string | symbol, ...args: any[]): boolean;\\n                /**\\n                 * Returns the number of listeners listening to the event named `eventName`.\\n                 *\\n                 * If `listener` is provided, it will return how many times the listener\\n                 * is found in the list of the listeners of the event.\\n                 * @since v3.2.0\\n                 * @param eventName The name of the event being listened for\\n                 * @param listener The event handler function\\n                 */\\n                listenerCount(eventName: string | symbol, listener?: Function): number;\\n                /**\\n                 * Adds the `listener` function to the _beginning_ of the listeners array for the\\n                 * event named `eventName`. No checks are made to see if the `listener` has\\n                 * already been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\\n                 * times.\\n                 *\\n                 * ```js\\n                 * server.prependListener('connection', (stream) => {\\n                 *   console.log('someone connected!');\\n                 * });\\n                 * ```\\n                 *\\n                 * Returns a reference to the `EventEmitter`, so that calls can be chained.\\n                 * @since v6.0.0\\n                 * @param eventName The name of the event.\\n                 * @param listener The callback function\\n                 */\\n                prependListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\\n                /**\\n                 * Adds a **one-time**`listener` function for the event named `eventName` to the _beginning_ of the listeners array. The next time `eventName` is triggered, this\\n                 * listener is removed, and then invoked.\\n                 *\\n                 * ```js\\n                 * server.prependOnceListener('connection', (stream) => {\\n                 *   console.log('Ah, we have our first user!');\\n                 * });\\n                 * ```\\n                 *\\n                 * Returns a reference to the `EventEmitter`, so that calls can be chained.\\n                 * @since v6.0.0\\n                 * @param eventName The name of the event.\\n                 * @param listener The callback function\\n                 */\\n                prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\\n                /**\\n                 * Returns an array listing the events for which the emitter has registered\\n                 * listeners. The values in the array are strings or `Symbol`s.\\n                 *\\n                 * ```js\\n                 * const EventEmitter = require('events');\\n                 * const myEE = new EventEmitter();\\n                 * myEE.on('foo', () => {});\\n                 * myEE.on('bar', () => {});\\n                 *\\n                 * const sym = Symbol('symbol');\\n                 * myEE.on(sym, () => {});\\n                 *\\n                 * console.log(myEE.eventNames());\\n                 * // Prints: [ 'foo', 'bar', Symbol(symbol) ]\\n                 * ```\\n                 * @since v6.0.0\\n                 */\\n                eventNames(): Array<string | symbol>;\\n            }\\n        }\\n    }\\n    export = EventEmitter;\\n}\\ndeclare module 'node:events' {\\n    import events = require('events');\\n    export = events;\\n}\\n\",\"file:///node_modules/@types/node/fs.d.ts\":\"/**\\n * The `fs` module enables interacting with the file system in a\\n * way modeled on standard POSIX functions.\\n *\\n * To use the promise-based APIs:\\n *\\n * ```js\\n * import * as fs from 'fs/promises';\\n * ```\\n *\\n * To use the callback and sync APIs:\\n *\\n * ```js\\n * import * as fs from 'fs';\\n * ```\\n *\\n * All file system operations have synchronous, callback, and promise-based\\n * forms, and are accessible using both CommonJS syntax and ES6 Modules (ESM).\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/fs.js)\\n */\\ndeclare module 'fs' {\\n    import * as stream from 'node:stream';\\n    import { Abortable, EventEmitter } from 'node:events';\\n    import { URL } from 'node:url';\\n    import * as promises from 'node:fs/promises';\\n    export { promises };\\n    /**\\n     * Valid types for path values in \\\"fs\\\".\\n     */\\n    export type PathLike = string | Buffer | URL;\\n    export type PathOrFileDescriptor = PathLike | number;\\n    export type TimeLike = string | number | Date;\\n    export type NoParamCallback = (err: NodeJS.ErrnoException | null) => void;\\n    export type BufferEncodingOption =\\n        | 'buffer'\\n        | {\\n              encoding: 'buffer';\\n          };\\n    export interface ObjectEncodingOptions {\\n        encoding?: BufferEncoding | null | undefined;\\n    }\\n    export type EncodingOption = ObjectEncodingOptions | BufferEncoding | undefined | null;\\n    export type OpenMode = number | string;\\n    export type Mode = number | string;\\n    export interface StatsBase<T> {\\n        isFile(): boolean;\\n        isDirectory(): boolean;\\n        isBlockDevice(): boolean;\\n        isCharacterDevice(): boolean;\\n        isSymbolicLink(): boolean;\\n        isFIFO(): boolean;\\n        isSocket(): boolean;\\n        dev: T;\\n        ino: T;\\n        mode: T;\\n        nlink: T;\\n        uid: T;\\n        gid: T;\\n        rdev: T;\\n        size: T;\\n        blksize: T;\\n        blocks: T;\\n        atimeMs: T;\\n        mtimeMs: T;\\n        ctimeMs: T;\\n        birthtimeMs: T;\\n        atime: Date;\\n        mtime: Date;\\n        ctime: Date;\\n        birthtime: Date;\\n    }\\n    export interface Stats extends StatsBase<number> {}\\n    /**\\n     * A `fs.Stats` object provides information about a file.\\n     *\\n     * Objects returned from {@link stat}, {@link lstat} and {@link fstat} and\\n     * their synchronous counterparts are of this type.\\n     * If `bigint` in the `options` passed to those methods is true, the numeric values\\n     * will be `bigint` instead of `number`, and the object will contain additional\\n     * nanosecond-precision properties suffixed with `Ns`.\\n     *\\n     * ```console\\n     * Stats {\\n     *   dev: 2114,\\n     *   ino: 48064969,\\n     *   mode: 33188,\\n     *   nlink: 1,\\n     *   uid: 85,\\n     *   gid: 100,\\n     *   rdev: 0,\\n     *   size: 527,\\n     *   blksize: 4096,\\n     *   blocks: 8,\\n     *   atimeMs: 1318289051000.1,\\n     *   mtimeMs: 1318289051000.1,\\n     *   ctimeMs: 1318289051000.1,\\n     *   birthtimeMs: 1318289051000.1,\\n     *   atime: Mon, 10 Oct 2011 23:24:11 GMT,\\n     *   mtime: Mon, 10 Oct 2011 23:24:11 GMT,\\n     *   ctime: Mon, 10 Oct 2011 23:24:11 GMT,\\n     *   birthtime: Mon, 10 Oct 2011 23:24:11 GMT }\\n     * ```\\n     *\\n     * `bigint` version:\\n     *\\n     * ```console\\n     * BigIntStats {\\n     *   dev: 2114n,\\n     *   ino: 48064969n,\\n     *   mode: 33188n,\\n     *   nlink: 1n,\\n     *   uid: 85n,\\n     *   gid: 100n,\\n     *   rdev: 0n,\\n     *   size: 527n,\\n     *   blksize: 4096n,\\n     *   blocks: 8n,\\n     *   atimeMs: 1318289051000n,\\n     *   mtimeMs: 1318289051000n,\\n     *   ctimeMs: 1318289051000n,\\n     *   birthtimeMs: 1318289051000n,\\n     *   atimeNs: 1318289051000000000n,\\n     *   mtimeNs: 1318289051000000000n,\\n     *   ctimeNs: 1318289051000000000n,\\n     *   birthtimeNs: 1318289051000000000n,\\n     *   atime: Mon, 10 Oct 2011 23:24:11 GMT,\\n     *   mtime: Mon, 10 Oct 2011 23:24:11 GMT,\\n     *   ctime: Mon, 10 Oct 2011 23:24:11 GMT,\\n     *   birthtime: Mon, 10 Oct 2011 23:24:11 GMT }\\n     * ```\\n     * @since v0.1.21\\n     */\\n    export class Stats {}\\n\\n    export interface StatsFsBase<T> {\\n        /** Type of file system. */\\n        type: T;\\n        /**  Optimal transfer block size. */\\n        bsize: T;\\n        /**  Total data blocks in file system. */\\n        blocks: T;\\n        /** Free blocks in file system. */\\n        bfree: T;\\n        /** Available blocks for unprivileged users */\\n        bavail: T;\\n        /** Total file nodes in file system. */\\n        files: T;\\n        /** Free file nodes in file system. */\\n        ffree: T;\\n    }\\n\\n    export interface StatsFs extends StatsFsBase<number> {}\\n\\n    /**\\n     * Provides information about a mounted file system\\n     *\\n     * Objects returned from {@link statfs} and {@link statfsSync} are of this type.\\n     * If `bigint` in the `options` passed to those methods is true, the numeric values\\n     * will be `bigint` instead of `number`.\\n     * @since  v18.15.0\\n     */\\n    export class StatsFs {}\\n\\n    export interface BigIntStatsFs extends StatsFsBase<bigint> {}\\n\\n    export interface StatFsOptions {\\n        bigint?: boolean | undefined;\\n    }\\n\\n    /**\\n     * A representation of a directory entry, which can be a file or a subdirectory\\n     * within the directory, as returned by reading from an `fs.Dir`. The\\n     * directory entry is a combination of the file name and file type pairs.\\n     *\\n     * Additionally, when {@link readdir} or {@link readdirSync} is called with\\n     * the `withFileTypes` option set to `true`, the resulting array is filled with `fs.Dirent` objects, rather than strings or `Buffer` s.\\n     * @since v10.10.0\\n     */\\n    export class Dirent {\\n        /**\\n         * Returns `true` if the `fs.Dirent` object describes a regular file.\\n         * @since v10.10.0\\n         */\\n        isFile(): boolean;\\n        /**\\n         * Returns `true` if the `fs.Dirent` object describes a file system\\n         * directory.\\n         * @since v10.10.0\\n         */\\n        isDirectory(): boolean;\\n        /**\\n         * Returns `true` if the `fs.Dirent` object describes a block device.\\n         * @since v10.10.0\\n         */\\n        isBlockDevice(): boolean;\\n        /**\\n         * Returns `true` if the `fs.Dirent` object describes a character device.\\n         * @since v10.10.0\\n         */\\n        isCharacterDevice(): boolean;\\n        /**\\n         * Returns `true` if the `fs.Dirent` object describes a symbolic link.\\n         * @since v10.10.0\\n         */\\n        isSymbolicLink(): boolean;\\n        /**\\n         * Returns `true` if the `fs.Dirent` object describes a first-in-first-out\\n         * (FIFO) pipe.\\n         * @since v10.10.0\\n         */\\n        isFIFO(): boolean;\\n        /**\\n         * Returns `true` if the `fs.Dirent` object describes a socket.\\n         * @since v10.10.0\\n         */\\n        isSocket(): boolean;\\n        /**\\n         * The file name that this `fs.Dirent` object refers to. The type of this\\n         * value is determined by the `options.encoding` passed to {@link readdir} or {@link readdirSync}.\\n         * @since v10.10.0\\n         */\\n        name: string;\\n    }\\n    /**\\n     * A class representing a directory stream.\\n     *\\n     * Created by {@link opendir}, {@link opendirSync}, or `fsPromises.opendir()`.\\n     *\\n     * ```js\\n     * import { opendir } from 'fs/promises';\\n     *\\n     * try {\\n     *   const dir = await opendir('./');\\n     *   for await (const dirent of dir)\\n     *     console.log(dirent.name);\\n     * } catch (err) {\\n     *   console.error(err);\\n     * }\\n     * ```\\n     *\\n     * When using the async iterator, the `fs.Dir` object will be automatically\\n     * closed after the iterator exits.\\n     * @since v12.12.0\\n     */\\n    export class Dir implements AsyncIterable<Dirent> {\\n        /**\\n         * The read-only path of this directory as was provided to {@link opendir},{@link opendirSync}, or `fsPromises.opendir()`.\\n         * @since v12.12.0\\n         */\\n        readonly path: string;\\n        /**\\n         * Asynchronously iterates over the directory via `readdir(3)` until all entries have been read.\\n         */\\n        [Symbol.asyncIterator](): AsyncIterableIterator<Dirent>;\\n        /**\\n         * Asynchronously close the directory's underlying resource handle.\\n         * Subsequent reads will result in errors.\\n         *\\n         * A promise is returned that will be resolved after the resource has been\\n         * closed.\\n         * @since v12.12.0\\n         */\\n        close(): Promise<void>;\\n        close(cb: NoParamCallback): void;\\n        /**\\n         * Synchronously close the directory's underlying resource handle.\\n         * Subsequent reads will result in errors.\\n         * @since v12.12.0\\n         */\\n        closeSync(): void;\\n        /**\\n         * Asynchronously read the next directory entry via [`readdir(3)`](http://man7.org/linux/man-pages/man3/readdir.3.html) as an `fs.Dirent`.\\n         *\\n         * A promise is returned that will be resolved with an `fs.Dirent`, or `null`if there are no more directory entries to read.\\n         *\\n         * Directory entries returned by this function are in no particular order as\\n         * provided by the operating system's underlying directory mechanisms.\\n         * Entries added or removed while iterating over the directory might not be\\n         * included in the iteration results.\\n         * @since v12.12.0\\n         * @return containing {fs.Dirent|null}\\n         */\\n        read(): Promise<Dirent | null>;\\n        read(cb: (err: NodeJS.ErrnoException | null, dirEnt: Dirent | null) => void): void;\\n        /**\\n         * Synchronously read the next directory entry as an `fs.Dirent`. See the\\n         * POSIX [`readdir(3)`](http://man7.org/linux/man-pages/man3/readdir.3.html) documentation for more detail.\\n         *\\n         * If there are no more directory entries to read, `null` will be returned.\\n         *\\n         * Directory entries returned by this function are in no particular order as\\n         * provided by the operating system's underlying directory mechanisms.\\n         * Entries added or removed while iterating over the directory might not be\\n         * included in the iteration results.\\n         * @since v12.12.0\\n         */\\n        readSync(): Dirent | null;\\n    }\\n    /**\\n     * Class: fs.StatWatcher\\n     * @since v14.3.0, v12.20.0\\n     * Extends `EventEmitter`\\n     * A successful call to {@link watchFile} method will return a new fs.StatWatcher object.\\n     */\\n    export interface StatWatcher extends EventEmitter {\\n        /**\\n         * When called, requests that the Node.js event loop _not_ exit so long as the `fs.StatWatcher` is active. Calling `watcher.ref()` multiple times will have\\n         * no effect.\\n         *\\n         * By default, all `fs.StatWatcher` objects are \\\"ref'ed\\\", making it normally\\n         * unnecessary to call `watcher.ref()` unless `watcher.unref()` had been\\n         * called previously.\\n         * @since v14.3.0, v12.20.0\\n         */\\n        ref(): this;\\n        /**\\n         * When called, the active `fs.StatWatcher` object will not require the Node.js\\n         * event loop to remain active. If there is no other activity keeping the\\n         * event loop running, the process may exit before the `fs.StatWatcher` object's\\n         * callback is invoked. Calling `watcher.unref()` multiple times will have\\n         * no effect.\\n         * @since v14.3.0, v12.20.0\\n         */\\n        unref(): this;\\n    }\\n    export interface FSWatcher extends EventEmitter {\\n        /**\\n         * Stop watching for changes on the given `fs.FSWatcher`. Once stopped, the `fs.FSWatcher` object is no longer usable.\\n         * @since v0.5.8\\n         */\\n        close(): void;\\n        /**\\n         * events.EventEmitter\\n         *   1. change\\n         *   2. error\\n         */\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        addListener(event: 'change', listener: (eventType: string, filename: string | Buffer) => void): this;\\n        addListener(event: 'error', listener: (error: Error) => void): this;\\n        addListener(event: 'close', listener: () => void): this;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        on(event: 'change', listener: (eventType: string, filename: string | Buffer) => void): this;\\n        on(event: 'error', listener: (error: Error) => void): this;\\n        on(event: 'close', listener: () => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        once(event: 'change', listener: (eventType: string, filename: string | Buffer) => void): this;\\n        once(event: 'error', listener: (error: Error) => void): this;\\n        once(event: 'close', listener: () => void): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'change', listener: (eventType: string, filename: string | Buffer) => void): this;\\n        prependListener(event: 'error', listener: (error: Error) => void): this;\\n        prependListener(event: 'close', listener: () => void): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'change', listener: (eventType: string, filename: string | Buffer) => void): this;\\n        prependOnceListener(event: 'error', listener: (error: Error) => void): this;\\n        prependOnceListener(event: 'close', listener: () => void): this;\\n    }\\n    /**\\n     * Instances of `fs.ReadStream` are created and returned using the {@link createReadStream} function.\\n     * @since v0.1.93\\n     */\\n    export class ReadStream extends stream.Readable {\\n        close(callback?: (err?: NodeJS.ErrnoException | null) => void): void;\\n        /**\\n         * The number of bytes that have been read so far.\\n         * @since v6.4.0\\n         */\\n        bytesRead: number;\\n        /**\\n         * The path to the file the stream is reading from as specified in the first\\n         * argument to `fs.createReadStream()`. If `path` is passed as a string, then`readStream.path` will be a string. If `path` is passed as a `Buffer`, then`readStream.path` will be a\\n         * `Buffer`. If `fd` is specified, then`readStream.path` will be `undefined`.\\n         * @since v0.1.93\\n         */\\n        path: string | Buffer;\\n        /**\\n         * This property is `true` if the underlying file has not been opened yet,\\n         * i.e. before the `'ready'` event is emitted.\\n         * @since v11.2.0, v10.16.0\\n         */\\n        pending: boolean;\\n        /**\\n         * events.EventEmitter\\n         *   1. open\\n         *   2. close\\n         *   3. ready\\n         */\\n        addListener(event: 'close', listener: () => void): this;\\n        addListener(event: 'data', listener: (chunk: Buffer | string) => void): this;\\n        addListener(event: 'end', listener: () => void): this;\\n        addListener(event: 'error', listener: (err: Error) => void): this;\\n        addListener(event: 'open', listener: (fd: number) => void): this;\\n        addListener(event: 'pause', listener: () => void): this;\\n        addListener(event: 'readable', listener: () => void): this;\\n        addListener(event: 'ready', listener: () => void): this;\\n        addListener(event: 'resume', listener: () => void): this;\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        on(event: 'close', listener: () => void): this;\\n        on(event: 'data', listener: (chunk: Buffer | string) => void): this;\\n        on(event: 'end', listener: () => void): this;\\n        on(event: 'error', listener: (err: Error) => void): this;\\n        on(event: 'open', listener: (fd: number) => void): this;\\n        on(event: 'pause', listener: () => void): this;\\n        on(event: 'readable', listener: () => void): this;\\n        on(event: 'ready', listener: () => void): this;\\n        on(event: 'resume', listener: () => void): this;\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\n        once(event: 'close', listener: () => void): this;\\n        once(event: 'data', listener: (chunk: Buffer | string) => void): this;\\n        once(event: 'end', listener: () => void): this;\\n        once(event: 'error', listener: (err: Error) => void): this;\\n        once(event: 'open', listener: (fd: number) => void): this;\\n        once(event: 'pause', listener: () => void): this;\\n        once(event: 'readable', listener: () => void): this;\\n        once(event: 'ready', listener: () => void): this;\\n        once(event: 'resume', listener: () => void): this;\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'close', listener: () => void): this;\\n        prependListener(event: 'data', listener: (chunk: Buffer | string) => void): this;\\n        prependListener(event: 'end', listener: () => void): this;\\n        prependListener(event: 'error', listener: (err: Error) => void): this;\\n        prependListener(event: 'open', listener: (fd: number) => void): this;\\n        prependListener(event: 'pause', listener: () => void): this;\\n        prependListener(event: 'readable', listener: () => void): this;\\n        prependListener(event: 'ready', listener: () => void): this;\\n        prependListener(event: 'resume', listener: () => void): this;\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'close', listener: () => void): this;\\n        prependOnceListener(event: 'data', listener: (chunk: Buffer | string) => void): this;\\n        prependOnceListener(event: 'end', listener: () => void): this;\\n        prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n        prependOnceListener(event: 'open', listener: (fd: number) => void): this;\\n        prependOnceListener(event: 'pause', listener: () => void): this;\\n        prependOnceListener(event: 'readable', listener: () => void): this;\\n        prependOnceListener(event: 'ready', listener: () => void): this;\\n        prependOnceListener(event: 'resume', listener: () => void): this;\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n    }\\n    /**\\n     * * Extends `stream.Writable`\\n     *\\n     * Instances of `fs.WriteStream` are created and returned using the {@link createWriteStream} function.\\n     * @since v0.1.93\\n     */\\n    export class WriteStream extends stream.Writable {\\n        /**\\n         * Closes `writeStream`. Optionally accepts a\\n         * callback that will be executed once the `writeStream`is closed.\\n         * @since v0.9.4\\n         */\\n        close(callback?: (err?: NodeJS.ErrnoException | null) => void): void;\\n        /**\\n         * The number of bytes written so far. Does not include data that is still queued\\n         * for writing.\\n         * @since v0.4.7\\n         */\\n        bytesWritten: number;\\n        /**\\n         * The path to the file the stream is writing to as specified in the first\\n         * argument to {@link createWriteStream}. If `path` is passed as a string, then`writeStream.path` will be a string. If `path` is passed as a `Buffer`, then`writeStream.path` will be a\\n         * `Buffer`.\\n         * @since v0.1.93\\n         */\\n        path: string | Buffer;\\n        /**\\n         * This property is `true` if the underlying file has not been opened yet,\\n         * i.e. before the `'ready'` event is emitted.\\n         * @since v11.2.0\\n         */\\n        pending: boolean;\\n        /**\\n         * events.EventEmitter\\n         *   1. open\\n         *   2. close\\n         *   3. ready\\n         */\\n        addListener(event: 'close', listener: () => void): this;\\n        addListener(event: 'drain', listener: () => void): this;\\n        addListener(event: 'error', listener: (err: Error) => void): this;\\n        addListener(event: 'finish', listener: () => void): this;\\n        addListener(event: 'open', listener: (fd: number) => void): this;\\n        addListener(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        addListener(event: 'ready', listener: () => void): this;\\n        addListener(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        on(event: 'close', listener: () => void): this;\\n        on(event: 'drain', listener: () => void): this;\\n        on(event: 'error', listener: (err: Error) => void): this;\\n        on(event: 'finish', listener: () => void): this;\\n        on(event: 'open', listener: (fd: number) => void): this;\\n        on(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        on(event: 'ready', listener: () => void): this;\\n        on(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\n        once(event: 'close', listener: () => void): this;\\n        once(event: 'drain', listener: () => void): this;\\n        once(event: 'error', listener: (err: Error) => void): this;\\n        once(event: 'finish', listener: () => void): this;\\n        once(event: 'open', listener: (fd: number) => void): this;\\n        once(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        once(event: 'ready', listener: () => void): this;\\n        once(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'close', listener: () => void): this;\\n        prependListener(event: 'drain', listener: () => void): this;\\n        prependListener(event: 'error', listener: (err: Error) => void): this;\\n        prependListener(event: 'finish', listener: () => void): this;\\n        prependListener(event: 'open', listener: (fd: number) => void): this;\\n        prependListener(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        prependListener(event: 'ready', listener: () => void): this;\\n        prependListener(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'close', listener: () => void): this;\\n        prependOnceListener(event: 'drain', listener: () => void): this;\\n        prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n        prependOnceListener(event: 'finish', listener: () => void): this;\\n        prependOnceListener(event: 'open', listener: (fd: number) => void): this;\\n        prependOnceListener(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        prependOnceListener(event: 'ready', listener: () => void): this;\\n        prependOnceListener(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n    }\\n    /**\\n     * Asynchronously rename file at `oldPath` to the pathname provided\\n     * as `newPath`. In the case that `newPath` already exists, it will\\n     * be overwritten. If there is a directory at `newPath`, an error will\\n     * be raised instead. No arguments other than a possible exception are\\n     * given to the completion callback.\\n     *\\n     * See also: [`rename(2)`](http://man7.org/linux/man-pages/man2/rename.2.html).\\n     *\\n     * ```js\\n     * import { rename } from 'fs';\\n     *\\n     * rename('oldFile.txt', 'newFile.txt', (err) => {\\n     *   if (err) throw err;\\n     *   console.log('Rename complete!');\\n     * });\\n     * ```\\n     * @since v0.0.2\\n     */\\n    export function rename(oldPath: PathLike, newPath: PathLike, callback: NoParamCallback): void;\\n    export namespace rename {\\n        /**\\n         * Asynchronous rename(2) - Change the name or location of a file or directory.\\n         * @param oldPath A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * URL support is _experimental_.\\n         * @param newPath A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * URL support is _experimental_.\\n         */\\n        function __promisify__(oldPath: PathLike, newPath: PathLike): Promise<void>;\\n    }\\n    /**\\n     * Renames the file from `oldPath` to `newPath`. Returns `undefined`.\\n     *\\n     * See the POSIX [`rename(2)`](http://man7.org/linux/man-pages/man2/rename.2.html) documentation for more details.\\n     * @since v0.1.21\\n     */\\n    export function renameSync(oldPath: PathLike, newPath: PathLike): void;\\n    /**\\n     * Truncates the file. No arguments other than a possible exception are\\n     * given to the completion callback. A file descriptor can also be passed as the\\n     * first argument. In this case, `fs.ftruncate()` is called.\\n     *\\n     * ```js\\n     * import { truncate } from 'fs';\\n     * // Assuming that 'path/file.txt' is a regular file.\\n     * truncate('path/file.txt', (err) => {\\n     *   if (err) throw err;\\n     *   console.log('path/file.txt was truncated');\\n     * });\\n     * ```\\n     *\\n     * Passing a file descriptor is deprecated and may result in an error being thrown\\n     * in the future.\\n     *\\n     * See the POSIX [`truncate(2)`](http://man7.org/linux/man-pages/man2/truncate.2.html) documentation for more details.\\n     * @since v0.8.6\\n     * @param [len=0]\\n     */\\n    export function truncate(path: PathLike, len: number | undefined | null, callback: NoParamCallback): void;\\n    /**\\n     * Asynchronous truncate(2) - Truncate a file to a specified length.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     */\\n    export function truncate(path: PathLike, callback: NoParamCallback): void;\\n    export namespace truncate {\\n        /**\\n         * Asynchronous truncate(2) - Truncate a file to a specified length.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param len If not specified, defaults to `0`.\\n         */\\n        function __promisify__(path: PathLike, len?: number | null): Promise<void>;\\n    }\\n    /**\\n     * Truncates the file. Returns `undefined`. A file descriptor can also be\\n     * passed as the first argument. In this case, `fs.ftruncateSync()` is called.\\n     *\\n     * Passing a file descriptor is deprecated and may result in an error being thrown\\n     * in the future.\\n     * @since v0.8.6\\n     * @param [len=0]\\n     */\\n    export function truncateSync(path: PathLike, len?: number | null): void;\\n    /**\\n     * Truncates the file descriptor. No arguments other than a possible exception are\\n     * given to the completion callback.\\n     *\\n     * See the POSIX [`ftruncate(2)`](http://man7.org/linux/man-pages/man2/ftruncate.2.html) documentation for more detail.\\n     *\\n     * If the file referred to by the file descriptor was larger than `len` bytes, only\\n     * the first `len` bytes will be retained in the file.\\n     *\\n     * For example, the following program retains only the first four bytes of the\\n     * file:\\n     *\\n     * ```js\\n     * import { open, close, ftruncate } from 'fs';\\n     *\\n     * function closeFd(fd) {\\n     *   close(fd, (err) => {\\n     *     if (err) throw err;\\n     *   });\\n     * }\\n     *\\n     * open('temp.txt', 'r+', (err, fd) => {\\n     *   if (err) throw err;\\n     *\\n     *   try {\\n     *     ftruncate(fd, 4, (err) => {\\n     *       closeFd(fd);\\n     *       if (err) throw err;\\n     *     });\\n     *   } catch (err) {\\n     *     closeFd(fd);\\n     *     if (err) throw err;\\n     *   }\\n     * });\\n     * ```\\n     *\\n     * If the file previously was shorter than `len` bytes, it is extended, and the\\n     * extended part is filled with null bytes (`'\\\\0'`):\\n     *\\n     * If `len` is negative then `0` will be used.\\n     * @since v0.8.6\\n     * @param [len=0]\\n     */\\n    export function ftruncate(fd: number, len: number | undefined | null, callback: NoParamCallback): void;\\n    /**\\n     * Asynchronous ftruncate(2) - Truncate a file to a specified length.\\n     * @param fd A file descriptor.\\n     */\\n    export function ftruncate(fd: number, callback: NoParamCallback): void;\\n    export namespace ftruncate {\\n        /**\\n         * Asynchronous ftruncate(2) - Truncate a file to a specified length.\\n         * @param fd A file descriptor.\\n         * @param len If not specified, defaults to `0`.\\n         */\\n        function __promisify__(fd: number, len?: number | null): Promise<void>;\\n    }\\n    /**\\n     * Truncates the file descriptor. Returns `undefined`.\\n     *\\n     * For detailed information, see the documentation of the asynchronous version of\\n     * this API: {@link ftruncate}.\\n     * @since v0.8.6\\n     * @param [len=0]\\n     */\\n    export function ftruncateSync(fd: number, len?: number | null): void;\\n    /**\\n     * Asynchronously changes owner and group of a file. No arguments other than a\\n     * possible exception are given to the completion callback.\\n     *\\n     * See the POSIX [`chown(2)`](http://man7.org/linux/man-pages/man2/chown.2.html) documentation for more detail.\\n     * @since v0.1.97\\n     */\\n    export function chown(path: PathLike, uid: number, gid: number, callback: NoParamCallback): void;\\n    export namespace chown {\\n        /**\\n         * Asynchronous chown(2) - Change ownership of a file.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         */\\n        function __promisify__(path: PathLike, uid: number, gid: number): Promise<void>;\\n    }\\n    /**\\n     * Synchronously changes owner and group of a file. Returns `undefined`.\\n     * This is the synchronous version of {@link chown}.\\n     *\\n     * See the POSIX [`chown(2)`](http://man7.org/linux/man-pages/man2/chown.2.html) documentation for more detail.\\n     * @since v0.1.97\\n     */\\n    export function chownSync(path: PathLike, uid: number, gid: number): void;\\n    /**\\n     * Sets the owner of the file. No arguments other than a possible exception are\\n     * given to the completion callback.\\n     *\\n     * See the POSIX [`fchown(2)`](http://man7.org/linux/man-pages/man2/fchown.2.html) documentation for more detail.\\n     * @since v0.4.7\\n     */\\n    export function fchown(fd: number, uid: number, gid: number, callback: NoParamCallback): void;\\n    export namespace fchown {\\n        /**\\n         * Asynchronous fchown(2) - Change ownership of a file.\\n         * @param fd A file descriptor.\\n         */\\n        function __promisify__(fd: number, uid: number, gid: number): Promise<void>;\\n    }\\n    /**\\n     * Sets the owner of the file. Returns `undefined`.\\n     *\\n     * See the POSIX [`fchown(2)`](http://man7.org/linux/man-pages/man2/fchown.2.html) documentation for more detail.\\n     * @since v0.4.7\\n     * @param uid The file's new owner's user id.\\n     * @param gid The file's new group's group id.\\n     */\\n    export function fchownSync(fd: number, uid: number, gid: number): void;\\n    /**\\n     * Set the owner of the symbolic link. No arguments other than a possible\\n     * exception are given to the completion callback.\\n     *\\n     * See the POSIX [`lchown(2)`](http://man7.org/linux/man-pages/man2/lchown.2.html) documentation for more detail.\\n     */\\n    export function lchown(path: PathLike, uid: number, gid: number, callback: NoParamCallback): void;\\n    export namespace lchown {\\n        /**\\n         * Asynchronous lchown(2) - Change ownership of a file. Does not dereference symbolic links.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         */\\n        function __promisify__(path: PathLike, uid: number, gid: number): Promise<void>;\\n    }\\n    /**\\n     * Set the owner for the path. Returns `undefined`.\\n     *\\n     * See the POSIX [`lchown(2)`](http://man7.org/linux/man-pages/man2/lchown.2.html) documentation for more details.\\n     * @param uid The file's new owner's user id.\\n     * @param gid The file's new group's group id.\\n     */\\n    export function lchownSync(path: PathLike, uid: number, gid: number): void;\\n    /**\\n     * Changes the access and modification times of a file in the same way as {@link utimes}, with the difference that if the path refers to a symbolic\\n     * link, then the link is not dereferenced: instead, the timestamps of the\\n     * symbolic link itself are changed.\\n     *\\n     * No arguments other than a possible exception are given to the completion\\n     * callback.\\n     * @since v14.5.0, v12.19.0\\n     */\\n    export function lutimes(path: PathLike, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback): void;\\n    export namespace lutimes {\\n        /**\\n         * Changes the access and modification times of a file in the same way as `fsPromises.utimes()`,\\n         * with the difference that if the path refers to a symbolic link, then the link is not\\n         * dereferenced: instead, the timestamps of the symbolic link itself are changed.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param atime The last access time. If a string is provided, it will be coerced to number.\\n         * @param mtime The last modified time. If a string is provided, it will be coerced to number.\\n         */\\n        function __promisify__(path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void>;\\n    }\\n    /**\\n     * Change the file system timestamps of the symbolic link referenced by `path`.\\n     * Returns `undefined`, or throws an exception when parameters are incorrect or\\n     * the operation fails. This is the synchronous version of {@link lutimes}.\\n     * @since v14.5.0, v12.19.0\\n     */\\n    export function lutimesSync(path: PathLike, atime: TimeLike, mtime: TimeLike): void;\\n    /**\\n     * Asynchronously changes the permissions of a file. No arguments other than a\\n     * possible exception are given to the completion callback.\\n     *\\n     * See the POSIX [`chmod(2)`](http://man7.org/linux/man-pages/man2/chmod.2.html) documentation for more detail.\\n     *\\n     * ```js\\n     * import { chmod } from 'fs';\\n     *\\n     * chmod('my_file.txt', 0o775, (err) => {\\n     *   if (err) throw err;\\n     *   console.log('The permissions for file \\\"my_file.txt\\\" have been changed!');\\n     * });\\n     * ```\\n     * @since v0.1.30\\n     */\\n    export function chmod(path: PathLike, mode: Mode, callback: NoParamCallback): void;\\n    export namespace chmod {\\n        /**\\n         * Asynchronous chmod(2) - Change permissions of a file.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param mode A file mode. If a string is passed, it is parsed as an octal integer.\\n         */\\n        function __promisify__(path: PathLike, mode: Mode): Promise<void>;\\n    }\\n    /**\\n     * For detailed information, see the documentation of the asynchronous version of\\n     * this API: {@link chmod}.\\n     *\\n     * See the POSIX [`chmod(2)`](http://man7.org/linux/man-pages/man2/chmod.2.html) documentation for more detail.\\n     * @since v0.6.7\\n     */\\n    export function chmodSync(path: PathLike, mode: Mode): void;\\n    /**\\n     * Sets the permissions on the file. No arguments other than a possible exception\\n     * are given to the completion callback.\\n     *\\n     * See the POSIX [`fchmod(2)`](http://man7.org/linux/man-pages/man2/fchmod.2.html) documentation for more detail.\\n     * @since v0.4.7\\n     */\\n    export function fchmod(fd: number, mode: Mode, callback: NoParamCallback): void;\\n    export namespace fchmod {\\n        /**\\n         * Asynchronous fchmod(2) - Change permissions of a file.\\n         * @param fd A file descriptor.\\n         * @param mode A file mode. If a string is passed, it is parsed as an octal integer.\\n         */\\n        function __promisify__(fd: number, mode: Mode): Promise<void>;\\n    }\\n    /**\\n     * Sets the permissions on the file. Returns `undefined`.\\n     *\\n     * See the POSIX [`fchmod(2)`](http://man7.org/linux/man-pages/man2/fchmod.2.html) documentation for more detail.\\n     * @since v0.4.7\\n     */\\n    export function fchmodSync(fd: number, mode: Mode): void;\\n    /**\\n     * Changes the permissions on a symbolic link. No arguments other than a possible\\n     * exception are given to the completion callback.\\n     *\\n     * This method is only implemented on macOS.\\n     *\\n     * See the POSIX [`lchmod(2)`](https://www.freebsd.org/cgi/man.cgi?query=lchmod&sektion=2) documentation for more detail.\\n     * @deprecated Since v0.4.7\\n     */\\n    export function lchmod(path: PathLike, mode: Mode, callback: NoParamCallback): void;\\n    /** @deprecated */\\n    export namespace lchmod {\\n        /**\\n         * Asynchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param mode A file mode. If a string is passed, it is parsed as an octal integer.\\n         */\\n        function __promisify__(path: PathLike, mode: Mode): Promise<void>;\\n    }\\n    /**\\n     * Changes the permissions on a symbolic link. Returns `undefined`.\\n     *\\n     * This method is only implemented on macOS.\\n     *\\n     * See the POSIX [`lchmod(2)`](https://www.freebsd.org/cgi/man.cgi?query=lchmod&sektion=2) documentation for more detail.\\n     * @deprecated Since v0.4.7\\n     */\\n    export function lchmodSync(path: PathLike, mode: Mode): void;\\n    /**\\n     * Asynchronous [`stat(2)`](http://man7.org/linux/man-pages/man2/stat.2.html). The callback gets two arguments `(err, stats)` where`stats` is an `fs.Stats` object.\\n     *\\n     * In case of an error, the `err.code` will be one of `Common System Errors`.\\n     *\\n     * Using `fs.stat()` to check for the existence of a file before calling`fs.open()`, `fs.readFile()` or `fs.writeFile()` is not recommended.\\n     * Instead, user code should open/read/write the file directly and handle the\\n     * error raised if the file is not available.\\n     *\\n     * To check if a file exists without manipulating it afterwards, {@link access} is recommended.\\n     *\\n     * For example, given the following directory structure:\\n     *\\n     * ```text\\n     * - txtDir\\n     * -- file.txt\\n     * - app.js\\n     * ```\\n     *\\n     * The next program will check for the stats of the given paths:\\n     *\\n     * ```js\\n     * import { stat } from 'fs';\\n     *\\n     * const pathsToCheck = ['./txtDir', './txtDir/file.txt'];\\n     *\\n     * for (let i = 0; i < pathsToCheck.length; i++) {\\n     *   stat(pathsToCheck[i], (err, stats) => {\\n     *     console.log(stats.isDirectory());\\n     *     console.log(stats);\\n     *   });\\n     * }\\n     * ```\\n     *\\n     * The resulting output will resemble:\\n     *\\n     * ```console\\n     * true\\n     * Stats {\\n     *   dev: 16777220,\\n     *   mode: 16877,\\n     *   nlink: 3,\\n     *   uid: 501,\\n     *   gid: 20,\\n     *   rdev: 0,\\n     *   blksize: 4096,\\n     *   ino: 14214262,\\n     *   size: 96,\\n     *   blocks: 0,\\n     *   atimeMs: 1561174653071.963,\\n     *   mtimeMs: 1561174614583.3518,\\n     *   ctimeMs: 1561174626623.5366,\\n     *   birthtimeMs: 1561174126937.2893,\\n     *   atime: 2019-06-22T03:37:33.072Z,\\n     *   mtime: 2019-06-22T03:36:54.583Z,\\n     *   ctime: 2019-06-22T03:37:06.624Z,\\n     *   birthtime: 2019-06-22T03:28:46.937Z\\n     * }\\n     * false\\n     * Stats {\\n     *   dev: 16777220,\\n     *   mode: 33188,\\n     *   nlink: 1,\\n     *   uid: 501,\\n     *   gid: 20,\\n     *   rdev: 0,\\n     *   blksize: 4096,\\n     *   ino: 14214074,\\n     *   size: 8,\\n     *   blocks: 8,\\n     *   atimeMs: 1561174616618.8555,\\n     *   mtimeMs: 1561174614584,\\n     *   ctimeMs: 1561174614583.8145,\\n     *   birthtimeMs: 1561174007710.7478,\\n     *   atime: 2019-06-22T03:36:56.619Z,\\n     *   mtime: 2019-06-22T03:36:54.584Z,\\n     *   ctime: 2019-06-22T03:36:54.584Z,\\n     *   birthtime: 2019-06-22T03:26:47.711Z\\n     * }\\n     * ```\\n     * @since v0.0.2\\n     */\\n    export function stat(path: PathLike, callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void): void;\\n    export function stat(\\n        path: PathLike,\\n        options:\\n            | (StatOptions & {\\n                  bigint?: false | undefined;\\n              })\\n            | undefined,\\n        callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void\\n    ): void;\\n    export function stat(\\n        path: PathLike,\\n        options: StatOptions & {\\n            bigint: true;\\n        },\\n        callback: (err: NodeJS.ErrnoException | null, stats: BigIntStats) => void\\n    ): void;\\n    export function stat(path: PathLike, options: StatOptions | undefined, callback: (err: NodeJS.ErrnoException | null, stats: Stats | BigIntStats) => void): void;\\n    export namespace stat {\\n        /**\\n         * Asynchronous stat(2) - Get file status.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         */\\n        function __promisify__(\\n            path: PathLike,\\n            options?: StatOptions & {\\n                bigint?: false | undefined;\\n            }\\n        ): Promise<Stats>;\\n        function __promisify__(\\n            path: PathLike,\\n            options: StatOptions & {\\n                bigint: true;\\n            }\\n        ): Promise<BigIntStats>;\\n        function __promisify__(path: PathLike, options?: StatOptions): Promise<Stats | BigIntStats>;\\n    }\\n    export interface StatSyncFn extends Function {\\n        (path: PathLike, options?: undefined): Stats;\\n        (\\n            path: PathLike,\\n            options?: StatSyncOptions & {\\n                bigint?: false | undefined;\\n                throwIfNoEntry: false;\\n            }\\n        ): Stats | undefined;\\n        (\\n            path: PathLike,\\n            options: StatSyncOptions & {\\n                bigint: true;\\n                throwIfNoEntry: false;\\n            }\\n        ): BigIntStats | undefined;\\n        (\\n            path: PathLike,\\n            options?: StatSyncOptions & {\\n                bigint?: false | undefined;\\n            }\\n        ): Stats;\\n        (\\n            path: PathLike,\\n            options: StatSyncOptions & {\\n                bigint: true;\\n            }\\n        ): BigIntStats;\\n        (\\n            path: PathLike,\\n            options: StatSyncOptions & {\\n                bigint: boolean;\\n                throwIfNoEntry?: false | undefined;\\n            }\\n        ): Stats | BigIntStats;\\n        (path: PathLike, options?: StatSyncOptions): Stats | BigIntStats | undefined;\\n    }\\n    /**\\n     * Synchronous stat(2) - Get file status.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     */\\n    export const statSync: StatSyncFn;\\n    /**\\n     * Invokes the callback with the `fs.Stats` for the file descriptor.\\n     *\\n     * See the POSIX [`fstat(2)`](http://man7.org/linux/man-pages/man2/fstat.2.html) documentation for more detail.\\n     * @since v0.1.95\\n     */\\n    export function fstat(fd: number, callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void): void;\\n    export function fstat(\\n        fd: number,\\n        options:\\n            | (StatOptions & {\\n                  bigint?: false | undefined;\\n              })\\n            | undefined,\\n        callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void\\n    ): void;\\n    export function fstat(\\n        fd: number,\\n        options: StatOptions & {\\n            bigint: true;\\n        },\\n        callback: (err: NodeJS.ErrnoException | null, stats: BigIntStats) => void\\n    ): void;\\n    export function fstat(fd: number, options: StatOptions | undefined, callback: (err: NodeJS.ErrnoException | null, stats: Stats | BigIntStats) => void): void;\\n    export namespace fstat {\\n        /**\\n         * Asynchronous fstat(2) - Get file status.\\n         * @param fd A file descriptor.\\n         */\\n        function __promisify__(\\n            fd: number,\\n            options?: StatOptions & {\\n                bigint?: false | undefined;\\n            }\\n        ): Promise<Stats>;\\n        function __promisify__(\\n            fd: number,\\n            options: StatOptions & {\\n                bigint: true;\\n            }\\n        ): Promise<BigIntStats>;\\n        function __promisify__(fd: number, options?: StatOptions): Promise<Stats | BigIntStats>;\\n    }\\n    /**\\n     * Retrieves the `fs.Stats` for the file descriptor.\\n     *\\n     * See the POSIX [`fstat(2)`](http://man7.org/linux/man-pages/man2/fstat.2.html) documentation for more detail.\\n     * @since v0.1.95\\n     */\\n    export function fstatSync(\\n        fd: number,\\n        options?: StatOptions & {\\n            bigint?: false | undefined;\\n        }\\n    ): Stats;\\n    export function fstatSync(\\n        fd: number,\\n        options: StatOptions & {\\n            bigint: true;\\n        }\\n    ): BigIntStats;\\n    export function fstatSync(fd: number, options?: StatOptions): Stats | BigIntStats;\\n    /**\\n     * Retrieves the `fs.Stats` for the symbolic link referred to by the path.\\n     * The callback gets two arguments `(err, stats)` where `stats` is a `fs.Stats` object. `lstat()` is identical to `stat()`, except that if `path` is a symbolic\\n     * link, then the link itself is stat-ed, not the file that it refers to.\\n     *\\n     * See the POSIX [`lstat(2)`](http://man7.org/linux/man-pages/man2/lstat.2.html) documentation for more details.\\n     * @since v0.1.30\\n     */\\n    export function lstat(path: PathLike, callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void): void;\\n    export function lstat(\\n        path: PathLike,\\n        options:\\n            | (StatOptions & {\\n                  bigint?: false | undefined;\\n              })\\n            | undefined,\\n        callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void\\n    ): void;\\n    export function lstat(\\n        path: PathLike,\\n        options: StatOptions & {\\n            bigint: true;\\n        },\\n        callback: (err: NodeJS.ErrnoException | null, stats: BigIntStats) => void\\n    ): void;\\n    export function lstat(path: PathLike, options: StatOptions | undefined, callback: (err: NodeJS.ErrnoException | null, stats: Stats | BigIntStats) => void): void;\\n    export namespace lstat {\\n        /**\\n         * Asynchronous lstat(2) - Get file status. Does not dereference symbolic links.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         */\\n        function __promisify__(\\n            path: PathLike,\\n            options?: StatOptions & {\\n                bigint?: false | undefined;\\n            }\\n        ): Promise<Stats>;\\n        function __promisify__(\\n            path: PathLike,\\n            options: StatOptions & {\\n                bigint: true;\\n            }\\n        ): Promise<BigIntStats>;\\n        function __promisify__(path: PathLike, options?: StatOptions): Promise<Stats | BigIntStats>;\\n    }\\n    /**\\n     * Asynchronous statfs(2). Returns information about the mounted file system which contains path. The callback gets two arguments (err, stats) where stats is an <fs.StatFs> object.\\n     * In case of an error, the err.code will be one of Common System Errors.\\n     * @param path A path to an existing file or directory on the file system to be queried.\\n     * @param callback\\n     */\\n    export function statfs(path: PathLike, callback: (err: NodeJS.ErrnoException | null, stats: StatsFs) => void): void;\\n    export function statfs(\\n        path: PathLike,\\n        options:\\n            | (StatFsOptions & {\\n                  bigint?: false | undefined;\\n              })\\n            | undefined,\\n        callback: (err: NodeJS.ErrnoException | null, stats: StatsFs) => void\\n    ): void;\\n    export function statfs(\\n        path: PathLike,\\n        options: StatFsOptions & {\\n            bigint: true;\\n        },\\n        callback: (err: NodeJS.ErrnoException | null, stats: BigIntStatsFs) => void\\n    ): void;\\n    export function statfs(path: PathLike, options: StatFsOptions | undefined, callback: (err: NodeJS.ErrnoException | null, stats: StatsFs | BigIntStatsFs) => void): void;\\n    export namespace statfs {\\n        /**\\n         * Asynchronous statfs(2) - Returns information about the mounted file system which contains path. The callback gets two arguments (err, stats) where stats is an <fs.StatFs> object.\\n         * @param path A path to an existing file or directory on the file system to be queried.\\n         */\\n        function __promisify__(\\n            path: PathLike,\\n            options?: StatFsOptions & {\\n                bigint?: false | undefined;\\n            }\\n        ): Promise<StatsFs>;\\n        function __promisify__(\\n            path: PathLike,\\n            options: StatFsOptions & {\\n                bigint: true;\\n            }\\n        ): Promise<BigIntStatsFs>;\\n        function __promisify__(path: PathLike, options?: StatFsOptions): Promise<StatsFs | BigIntStatsFs>;\\n    }\\n\\n    /**\\n     * Synchronous statfs(2). Returns information about the mounted file system which contains path. The callback gets two arguments (err, stats) where stats is an <fs.StatFs> object.\\n     * In case of an error, the err.code will be one of Common System Errors.\\n     * @param path A path to an existing file or directory on the file system to be queried.\\n     * @param callback\\n     */\\n    export function statfsSync(\\n        path: PathLike,\\n        options?: StatFsOptions & {\\n            bigint?: false | undefined;\\n        }\\n    ): StatsFs;\\n    export function statfsSync(\\n        path: PathLike,\\n        options: StatFsOptions & {\\n            bigint: true;\\n        }\\n    ): BigIntStatsFs;\\n\\n    export function statfsSync(path: PathLike, options?: StatFsOptions): StatsFs | BigIntStatsFs;\\n    /**\\n     * Synchronous lstat(2) - Get file status. Does not dereference symbolic links.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     */\\n    export const lstatSync: StatSyncFn;\\n    /**\\n     * Creates a new link from the `existingPath` to the `newPath`. See the POSIX [`link(2)`](http://man7.org/linux/man-pages/man2/link.2.html) documentation for more detail. No arguments other than\\n     * a possible\\n     * exception are given to the completion callback.\\n     * @since v0.1.31\\n     */\\n    export function link(existingPath: PathLike, newPath: PathLike, callback: NoParamCallback): void;\\n    export namespace link {\\n        /**\\n         * Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.\\n         * @param existingPath A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param newPath A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         */\\n        function __promisify__(existingPath: PathLike, newPath: PathLike): Promise<void>;\\n    }\\n    /**\\n     * Creates a new link from the `existingPath` to the `newPath`. See the POSIX [`link(2)`](http://man7.org/linux/man-pages/man2/link.2.html) documentation for more detail. Returns `undefined`.\\n     * @since v0.1.31\\n     */\\n    export function linkSync(existingPath: PathLike, newPath: PathLike): void;\\n    /**\\n     * Creates the link called `path` pointing to `target`. No arguments other than a\\n     * possible exception are given to the completion callback.\\n     *\\n     * See the POSIX [`symlink(2)`](http://man7.org/linux/man-pages/man2/symlink.2.html) documentation for more details.\\n     *\\n     * The `type` argument is only available on Windows and ignored on other platforms.\\n     * It can be set to `'dir'`, `'file'`, or `'junction'`. If the `type` argument is\\n     * not set, Node.js will autodetect `target` type and use `'file'` or `'dir'`. If\\n     * the `target` does not exist, `'file'` will be used. Windows junction points\\n     * require the destination path to be absolute. When using `'junction'`, the`target` argument will automatically be normalized to absolute path.\\n     *\\n     * Relative targets are relative to the link\u2019s parent directory.\\n     *\\n     * ```js\\n     * import { symlink } from 'fs';\\n     *\\n     * symlink('./mew', './mewtwo', callback);\\n     * ```\\n     *\\n     * The above example creates a symbolic link `mewtwo` which points to `mew` in the\\n     * same directory:\\n     *\\n     * ```bash\\n     * $ tree .\\n     * .\\n     * \u251c\u2500\u2500 mew\\n     * \u2514\u2500\u2500 mewtwo -> ./mew\\n     * ```\\n     * @since v0.1.31\\n     */\\n    export function symlink(target: PathLike, path: PathLike, type: symlink.Type | undefined | null, callback: NoParamCallback): void;\\n    /**\\n     * Asynchronous symlink(2) - Create a new symbolic link to an existing file.\\n     * @param target A path to an existing file. If a URL is provided, it must use the `file:` protocol.\\n     * @param path A path to the new symlink. If a URL is provided, it must use the `file:` protocol.\\n     */\\n    export function symlink(target: PathLike, path: PathLike, callback: NoParamCallback): void;\\n    export namespace symlink {\\n        /**\\n         * Asynchronous symlink(2) - Create a new symbolic link to an existing file.\\n         * @param target A path to an existing file. If a URL is provided, it must use the `file:` protocol.\\n         * @param path A path to the new symlink. If a URL is provided, it must use the `file:` protocol.\\n         * @param type May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).\\n         * When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.\\n         */\\n        function __promisify__(target: PathLike, path: PathLike, type?: string | null): Promise<void>;\\n        type Type = 'dir' | 'file' | 'junction';\\n    }\\n    /**\\n     * Returns `undefined`.\\n     *\\n     * For detailed information, see the documentation of the asynchronous version of\\n     * this API: {@link symlink}.\\n     * @since v0.1.31\\n     */\\n    export function symlinkSync(target: PathLike, path: PathLike, type?: symlink.Type | null): void;\\n    /**\\n     * Reads the contents of the symbolic link referred to by `path`. The callback gets\\n     * two arguments `(err, linkString)`.\\n     *\\n     * See the POSIX [`readlink(2)`](http://man7.org/linux/man-pages/man2/readlink.2.html) documentation for more details.\\n     *\\n     * The optional `options` argument can be a string specifying an encoding, or an\\n     * object with an `encoding` property specifying the character encoding to use for\\n     * the link path passed to the callback. If the `encoding` is set to `'buffer'`,\\n     * the link path returned will be passed as a `Buffer` object.\\n     * @since v0.1.31\\n     */\\n    export function readlink(path: PathLike, options: EncodingOption, callback: (err: NodeJS.ErrnoException | null, linkString: string) => void): void;\\n    /**\\n     * Asynchronous readlink(2) - read value of a symbolic link.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function readlink(path: PathLike, options: BufferEncodingOption, callback: (err: NodeJS.ErrnoException | null, linkString: Buffer) => void): void;\\n    /**\\n     * Asynchronous readlink(2) - read value of a symbolic link.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function readlink(path: PathLike, options: EncodingOption, callback: (err: NodeJS.ErrnoException | null, linkString: string | Buffer) => void): void;\\n    /**\\n     * Asynchronous readlink(2) - read value of a symbolic link.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     */\\n    export function readlink(path: PathLike, callback: (err: NodeJS.ErrnoException | null, linkString: string) => void): void;\\n    export namespace readlink {\\n        /**\\n         * Asynchronous readlink(2) - read value of a symbolic link.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n         */\\n        function __promisify__(path: PathLike, options?: EncodingOption): Promise<string>;\\n        /**\\n         * Asynchronous readlink(2) - read value of a symbolic link.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n         */\\n        function __promisify__(path: PathLike, options: BufferEncodingOption): Promise<Buffer>;\\n        /**\\n         * Asynchronous readlink(2) - read value of a symbolic link.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n         */\\n        function __promisify__(path: PathLike, options?: EncodingOption): Promise<string | Buffer>;\\n    }\\n    /**\\n     * Returns the symbolic link's string value.\\n     *\\n     * See the POSIX [`readlink(2)`](http://man7.org/linux/man-pages/man2/readlink.2.html) documentation for more details.\\n     *\\n     * The optional `options` argument can be a string specifying an encoding, or an\\n     * object with an `encoding` property specifying the character encoding to use for\\n     * the link path returned. If the `encoding` is set to `'buffer'`,\\n     * the link path returned will be passed as a `Buffer` object.\\n     * @since v0.1.31\\n     */\\n    export function readlinkSync(path: PathLike, options?: EncodingOption): string;\\n    /**\\n     * Synchronous readlink(2) - read value of a symbolic link.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function readlinkSync(path: PathLike, options: BufferEncodingOption): Buffer;\\n    /**\\n     * Synchronous readlink(2) - read value of a symbolic link.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function readlinkSync(path: PathLike, options?: EncodingOption): string | Buffer;\\n    /**\\n     * Asynchronously computes the canonical pathname by resolving `.`, `..` and\\n     * symbolic links.\\n     *\\n     * A canonical pathname is not necessarily unique. Hard links and bind mounts can\\n     * expose a file system entity through many pathnames.\\n     *\\n     * This function behaves like [`realpath(3)`](http://man7.org/linux/man-pages/man3/realpath.3.html), with some exceptions:\\n     *\\n     * 1. No case conversion is performed on case-insensitive file systems.\\n     * 2. The maximum number of symbolic links is platform-independent and generally\\n     * (much) higher than what the native [`realpath(3)`](http://man7.org/linux/man-pages/man3/realpath.3.html) implementation supports.\\n     *\\n     * The `callback` gets two arguments `(err, resolvedPath)`. May use `process.cwd`to resolve relative paths.\\n     *\\n     * Only paths that can be converted to UTF8 strings are supported.\\n     *\\n     * The optional `options` argument can be a string specifying an encoding, or an\\n     * object with an `encoding` property specifying the character encoding to use for\\n     * the path passed to the callback. If the `encoding` is set to `'buffer'`,\\n     * the path returned will be passed as a `Buffer` object.\\n     *\\n     * If `path` resolves to a socket or a pipe, the function will return a system\\n     * dependent name for that object.\\n     * @since v0.1.31\\n     */\\n    export function realpath(path: PathLike, options: EncodingOption, callback: (err: NodeJS.ErrnoException | null, resolvedPath: string) => void): void;\\n    /**\\n     * Asynchronous realpath(3) - return the canonicalized absolute pathname.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function realpath(path: PathLike, options: BufferEncodingOption, callback: (err: NodeJS.ErrnoException | null, resolvedPath: Buffer) => void): void;\\n    /**\\n     * Asynchronous realpath(3) - return the canonicalized absolute pathname.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function realpath(path: PathLike, options: EncodingOption, callback: (err: NodeJS.ErrnoException | null, resolvedPath: string | Buffer) => void): void;\\n    /**\\n     * Asynchronous realpath(3) - return the canonicalized absolute pathname.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     */\\n    export function realpath(path: PathLike, callback: (err: NodeJS.ErrnoException | null, resolvedPath: string) => void): void;\\n    export namespace realpath {\\n        /**\\n         * Asynchronous realpath(3) - return the canonicalized absolute pathname.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n         */\\n        function __promisify__(path: PathLike, options?: EncodingOption): Promise<string>;\\n        /**\\n         * Asynchronous realpath(3) - return the canonicalized absolute pathname.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n         */\\n        function __promisify__(path: PathLike, options: BufferEncodingOption): Promise<Buffer>;\\n        /**\\n         * Asynchronous realpath(3) - return the canonicalized absolute pathname.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n         */\\n        function __promisify__(path: PathLike, options?: EncodingOption): Promise<string | Buffer>;\\n        /**\\n         * Asynchronous [`realpath(3)`](http://man7.org/linux/man-pages/man3/realpath.3.html).\\n         *\\n         * The `callback` gets two arguments `(err, resolvedPath)`.\\n         *\\n         * Only paths that can be converted to UTF8 strings are supported.\\n         *\\n         * The optional `options` argument can be a string specifying an encoding, or an\\n         * object with an `encoding` property specifying the character encoding to use for\\n         * the path passed to the callback. If the `encoding` is set to `'buffer'`,\\n         * the path returned will be passed as a `Buffer` object.\\n         *\\n         * On Linux, when Node.js is linked against musl libc, the procfs file system must\\n         * be mounted on `/proc` in order for this function to work. Glibc does not have\\n         * this restriction.\\n         * @since v9.2.0\\n         */\\n        function native(path: PathLike, options: EncodingOption, callback: (err: NodeJS.ErrnoException | null, resolvedPath: string) => void): void;\\n        function native(path: PathLike, options: BufferEncodingOption, callback: (err: NodeJS.ErrnoException | null, resolvedPath: Buffer) => void): void;\\n        function native(path: PathLike, options: EncodingOption, callback: (err: NodeJS.ErrnoException | null, resolvedPath: string | Buffer) => void): void;\\n        function native(path: PathLike, callback: (err: NodeJS.ErrnoException | null, resolvedPath: string) => void): void;\\n    }\\n    /**\\n     * Returns the resolved pathname.\\n     *\\n     * For detailed information, see the documentation of the asynchronous version of\\n     * this API: {@link realpath}.\\n     * @since v0.1.31\\n     */\\n    export function realpathSync(path: PathLike, options?: EncodingOption): string;\\n    /**\\n     * Synchronous realpath(3) - return the canonicalized absolute pathname.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function realpathSync(path: PathLike, options: BufferEncodingOption): Buffer;\\n    /**\\n     * Synchronous realpath(3) - return the canonicalized absolute pathname.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function realpathSync(path: PathLike, options?: EncodingOption): string | Buffer;\\n    export namespace realpathSync {\\n        function native(path: PathLike, options?: EncodingOption): string;\\n        function native(path: PathLike, options: BufferEncodingOption): Buffer;\\n        function native(path: PathLike, options?: EncodingOption): string | Buffer;\\n    }\\n    /**\\n     * Asynchronously removes a file or symbolic link. No arguments other than a\\n     * possible exception are given to the completion callback.\\n     *\\n     * ```js\\n     * import { unlink } from 'fs';\\n     * // Assuming that 'path/file.txt' is a regular file.\\n     * unlink('path/file.txt', (err) => {\\n     *   if (err) throw err;\\n     *   console.log('path/file.txt was deleted');\\n     * });\\n     * ```\\n     *\\n     * `fs.unlink()` will not work on a directory, empty or otherwise. To remove a\\n     * directory, use {@link rmdir}.\\n     *\\n     * See the POSIX [`unlink(2)`](http://man7.org/linux/man-pages/man2/unlink.2.html) documentation for more details.\\n     * @since v0.0.2\\n     */\\n    export function unlink(path: PathLike, callback: NoParamCallback): void;\\n    export namespace unlink {\\n        /**\\n         * Asynchronous unlink(2) - delete a name and possibly the file it refers to.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         */\\n        function __promisify__(path: PathLike): Promise<void>;\\n    }\\n    /**\\n     * Synchronous [`unlink(2)`](http://man7.org/linux/man-pages/man2/unlink.2.html). Returns `undefined`.\\n     * @since v0.1.21\\n     */\\n    export function unlinkSync(path: PathLike): void;\\n    export interface RmDirOptions {\\n        /**\\n         * If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or\\n         * `EPERM` error is encountered, Node.js will retry the operation with a linear\\n         * backoff wait of `retryDelay` ms longer on each try. This option represents the\\n         * number of retries. This option is ignored if the `recursive` option is not\\n         * `true`.\\n         * @default 0\\n         */\\n        maxRetries?: number | undefined;\\n        /**\\n         * @deprecated since v14.14.0 In future versions of Node.js and will trigger a warning\\n         * `fs.rmdir(path, { recursive: true })` will throw if `path` does not exist or is a file.\\n         * Use `fs.rm(path, { recursive: true, force: true })` instead.\\n         *\\n         * If `true`, perform a recursive directory removal. In\\n         * recursive mode, operations are retried on failure.\\n         * @default false\\n         */\\n        recursive?: boolean | undefined;\\n        /**\\n         * The amount of time in milliseconds to wait between retries.\\n         * This option is ignored if the `recursive` option is not `true`.\\n         * @default 100\\n         */\\n        retryDelay?: number | undefined;\\n    }\\n    /**\\n     * Asynchronous [`rmdir(2)`](http://man7.org/linux/man-pages/man2/rmdir.2.html). No arguments other than a possible exception are given\\n     * to the completion callback.\\n     *\\n     * Using `fs.rmdir()` on a file (not a directory) results in an `ENOENT` error on\\n     * Windows and an `ENOTDIR` error on POSIX.\\n     *\\n     * To get a behavior similar to the `rm -rf` Unix command, use {@link rm} with options `{ recursive: true, force: true }`.\\n     * @since v0.0.2\\n     */\\n    export function rmdir(path: PathLike, callback: NoParamCallback): void;\\n    export function rmdir(path: PathLike, options: RmDirOptions, callback: NoParamCallback): void;\\n    export namespace rmdir {\\n        /**\\n         * Asynchronous rmdir(2) - delete a directory.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         */\\n        function __promisify__(path: PathLike, options?: RmDirOptions): Promise<void>;\\n    }\\n    /**\\n     * Synchronous [`rmdir(2)`](http://man7.org/linux/man-pages/man2/rmdir.2.html). Returns `undefined`.\\n     *\\n     * Using `fs.rmdirSync()` on a file (not a directory) results in an `ENOENT` error\\n     * on Windows and an `ENOTDIR` error on POSIX.\\n     *\\n     * To get a behavior similar to the `rm -rf` Unix command, use {@link rmSync} with options `{ recursive: true, force: true }`.\\n     * @since v0.1.21\\n     */\\n    export function rmdirSync(path: PathLike, options?: RmDirOptions): void;\\n    export interface RmOptions {\\n        /**\\n         * When `true`, exceptions will be ignored if `path` does not exist.\\n         * @default false\\n         */\\n        force?: boolean | undefined;\\n        /**\\n         * If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or\\n         * `EPERM` error is encountered, Node.js will retry the operation with a linear\\n         * backoff wait of `retryDelay` ms longer on each try. This option represents the\\n         * number of retries. This option is ignored if the `recursive` option is not\\n         * `true`.\\n         * @default 0\\n         */\\n        maxRetries?: number | undefined;\\n        /**\\n         * If `true`, perform a recursive directory removal. In\\n         * recursive mode, operations are retried on failure.\\n         * @default false\\n         */\\n        recursive?: boolean | undefined;\\n        /**\\n         * The amount of time in milliseconds to wait between retries.\\n         * This option is ignored if the `recursive` option is not `true`.\\n         * @default 100\\n         */\\n        retryDelay?: number | undefined;\\n    }\\n    /**\\n     * Asynchronously removes files and directories (modeled on the standard POSIX `rm`utility). No arguments other than a possible exception are given to the\\n     * completion callback.\\n     * @since v14.14.0\\n     */\\n    export function rm(path: PathLike, callback: NoParamCallback): void;\\n    export function rm(path: PathLike, options: RmOptions, callback: NoParamCallback): void;\\n    export namespace rm {\\n        /**\\n         * Asynchronously removes files and directories (modeled on the standard POSIX `rm` utility).\\n         */\\n        function __promisify__(path: PathLike, options?: RmOptions): Promise<void>;\\n    }\\n    /**\\n     * Synchronously removes files and directories (modeled on the standard POSIX `rm`utility). Returns `undefined`.\\n     * @since v14.14.0\\n     */\\n    export function rmSync(path: PathLike, options?: RmOptions): void;\\n    export interface MakeDirectoryOptions {\\n        /**\\n         * Indicates whether parent folders should be created.\\n         * If a folder was created, the path to the first created folder will be returned.\\n         * @default false\\n         */\\n        recursive?: boolean | undefined;\\n        /**\\n         * A file mode. If a string is passed, it is parsed as an octal integer. If not specified\\n         * @default 0o777\\n         */\\n        mode?: Mode | undefined;\\n    }\\n    /**\\n     * Asynchronously creates a directory.\\n     *\\n     * The callback is given a possible exception and, if `recursive` is `true`, the\\n     * first directory path created, `(err[, path])`.`path` can still be `undefined` when `recursive` is `true`, if no directory was\\n     * created.\\n     *\\n     * The optional `options` argument can be an integer specifying `mode` (permission\\n     * and sticky bits), or an object with a `mode` property and a `recursive`property indicating whether parent directories should be created. Calling`fs.mkdir()` when `path` is a directory that\\n     * exists results in an error only\\n     * when `recursive` is false.\\n     *\\n     * ```js\\n     * import { mkdir } from 'fs';\\n     *\\n     * // Creates /tmp/a/apple, regardless of whether `/tmp` and /tmp/a exist.\\n     * mkdir('/tmp/a/apple', { recursive: true }, (err) => {\\n     *   if (err) throw err;\\n     * });\\n     * ```\\n     *\\n     * On Windows, using `fs.mkdir()` on the root directory even with recursion will\\n     * result in an error:\\n     *\\n     * ```js\\n     * import { mkdir } from 'fs';\\n     *\\n     * mkdir('/', { recursive: true }, (err) => {\\n     *   // => [Error: EPERM: operation not permitted, mkdir 'C:\\\\']\\n     * });\\n     * ```\\n     *\\n     * See the POSIX [`mkdir(2)`](http://man7.org/linux/man-pages/man2/mkdir.2.html) documentation for more details.\\n     * @since v0.1.8\\n     */\\n    export function mkdir(\\n        path: PathLike,\\n        options: MakeDirectoryOptions & {\\n            recursive: true;\\n        },\\n        callback: (err: NodeJS.ErrnoException | null, path?: string) => void\\n    ): void;\\n    /**\\n     * Asynchronous mkdir(2) - create a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\\n     * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\\n     */\\n    export function mkdir(\\n        path: PathLike,\\n        options:\\n            | Mode\\n            | (MakeDirectoryOptions & {\\n                  recursive?: false | undefined;\\n              })\\n            | null\\n            | undefined,\\n        callback: NoParamCallback\\n    ): void;\\n    /**\\n     * Asynchronous mkdir(2) - create a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\\n     * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\\n     */\\n    export function mkdir(path: PathLike, options: Mode | MakeDirectoryOptions | null | undefined, callback: (err: NodeJS.ErrnoException | null, path?: string) => void): void;\\n    /**\\n     * Asynchronous mkdir(2) - create a directory with a mode of `0o777`.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     */\\n    export function mkdir(path: PathLike, callback: NoParamCallback): void;\\n    export namespace mkdir {\\n        /**\\n         * Asynchronous mkdir(2) - create a directory.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\\n         * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\\n         */\\n        function __promisify__(\\n            path: PathLike,\\n            options: MakeDirectoryOptions & {\\n                recursive: true;\\n            }\\n        ): Promise<string | undefined>;\\n        /**\\n         * Asynchronous mkdir(2) - create a directory.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\\n         * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\\n         */\\n        function __promisify__(\\n            path: PathLike,\\n            options?:\\n                | Mode\\n                | (MakeDirectoryOptions & {\\n                      recursive?: false | undefined;\\n                  })\\n                | null\\n        ): Promise<void>;\\n        /**\\n         * Asynchronous mkdir(2) - create a directory.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\\n         * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\\n         */\\n        function __promisify__(path: PathLike, options?: Mode | MakeDirectoryOptions | null): Promise<string | undefined>;\\n    }\\n    /**\\n     * Synchronously creates a directory. Returns `undefined`, or if `recursive` is`true`, the first directory path created.\\n     * This is the synchronous version of {@link mkdir}.\\n     *\\n     * See the POSIX [`mkdir(2)`](http://man7.org/linux/man-pages/man2/mkdir.2.html) documentation for more details.\\n     * @since v0.1.21\\n     */\\n    export function mkdirSync(\\n        path: PathLike,\\n        options: MakeDirectoryOptions & {\\n            recursive: true;\\n        }\\n    ): string | undefined;\\n    /**\\n     * Synchronous mkdir(2) - create a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\\n     * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\\n     */\\n    export function mkdirSync(\\n        path: PathLike,\\n        options?:\\n            | Mode\\n            | (MakeDirectoryOptions & {\\n                  recursive?: false | undefined;\\n              })\\n            | null\\n    ): void;\\n    /**\\n     * Synchronous mkdir(2) - create a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\\n     * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\\n     */\\n    export function mkdirSync(path: PathLike, options?: Mode | MakeDirectoryOptions | null): string | undefined;\\n    /**\\n     * Creates a unique temporary directory.\\n     *\\n     * Generates six random characters to be appended behind a required`prefix` to create a unique temporary directory. Due to platform\\n     * inconsistencies, avoid trailing `X` characters in `prefix`. Some platforms,\\n     * notably the BSDs, can return more than six random characters, and replace\\n     * trailing `X` characters in `prefix` with random characters.\\n     *\\n     * The created directory path is passed as a string to the callback's second\\n     * parameter.\\n     *\\n     * The optional `options` argument can be a string specifying an encoding, or an\\n     * object with an `encoding` property specifying the character encoding to use.\\n     *\\n     * ```js\\n     * import { mkdtemp } from 'fs';\\n     *\\n     * mkdtemp(path.join(os.tmpdir(), 'foo-'), (err, directory) => {\\n     *   if (err) throw err;\\n     *   console.log(directory);\\n     *   // Prints: /tmp/foo-itXde2 or C:\\\\Users\\\\...\\\\AppData\\\\Local\\\\Temp\\\\foo-itXde2\\n     * });\\n     * ```\\n     *\\n     * The `fs.mkdtemp()` method will append the six randomly selected characters\\n     * directly to the `prefix` string. For instance, given a directory `/tmp`, if the\\n     * intention is to create a temporary directory _within_`/tmp`, the `prefix`must end with a trailing platform-specific path separator\\n     * (`require('path').sep`).\\n     *\\n     * ```js\\n     * import { tmpdir } from 'os';\\n     * import { mkdtemp } from 'fs';\\n     *\\n     * // The parent directory for the new temporary directory\\n     * const tmpDir = tmpdir();\\n     *\\n     * // This method is *INCORRECT*:\\n     * mkdtemp(tmpDir, (err, directory) => {\\n     *   if (err) throw err;\\n     *   console.log(directory);\\n     *   // Will print something similar to `/tmpabc123`.\\n     *   // A new temporary directory is created at the file system root\\n     *   // rather than *within* the /tmp directory.\\n     * });\\n     *\\n     * // This method is *CORRECT*:\\n     * import { sep } from 'path';\\n     * mkdtemp(`${tmpDir}${sep}`, (err, directory) => {\\n     *   if (err) throw err;\\n     *   console.log(directory);\\n     *   // Will print something similar to `/tmp/abc123`.\\n     *   // A new temporary directory is created within\\n     *   // the /tmp directory.\\n     * });\\n     * ```\\n     * @since v5.10.0\\n     */\\n    export function mkdtemp(prefix: string, options: EncodingOption, callback: (err: NodeJS.ErrnoException | null, folder: string) => void): void;\\n    /**\\n     * Asynchronously creates a unique temporary directory.\\n     * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function mkdtemp(\\n        prefix: string,\\n        options:\\n            | 'buffer'\\n            | {\\n                  encoding: 'buffer';\\n              },\\n        callback: (err: NodeJS.ErrnoException | null, folder: Buffer) => void\\n    ): void;\\n    /**\\n     * Asynchronously creates a unique temporary directory.\\n     * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function mkdtemp(prefix: string, options: EncodingOption, callback: (err: NodeJS.ErrnoException | null, folder: string | Buffer) => void): void;\\n    /**\\n     * Asynchronously creates a unique temporary directory.\\n     * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\\n     */\\n    export function mkdtemp(prefix: string, callback: (err: NodeJS.ErrnoException | null, folder: string) => void): void;\\n    export namespace mkdtemp {\\n        /**\\n         * Asynchronously creates a unique temporary directory.\\n         * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n         */\\n        function __promisify__(prefix: string, options?: EncodingOption): Promise<string>;\\n        /**\\n         * Asynchronously creates a unique temporary directory.\\n         * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n         */\\n        function __promisify__(prefix: string, options: BufferEncodingOption): Promise<Buffer>;\\n        /**\\n         * Asynchronously creates a unique temporary directory.\\n         * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n         */\\n        function __promisify__(prefix: string, options?: EncodingOption): Promise<string | Buffer>;\\n    }\\n    /**\\n     * Returns the created directory path.\\n     *\\n     * For detailed information, see the documentation of the asynchronous version of\\n     * this API: {@link mkdtemp}.\\n     *\\n     * The optional `options` argument can be a string specifying an encoding, or an\\n     * object with an `encoding` property specifying the character encoding to use.\\n     * @since v5.10.0\\n     */\\n    export function mkdtempSync(prefix: string, options?: EncodingOption): string;\\n    /**\\n     * Synchronously creates a unique temporary directory.\\n     * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function mkdtempSync(prefix: string, options: BufferEncodingOption): Buffer;\\n    /**\\n     * Synchronously creates a unique temporary directory.\\n     * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function mkdtempSync(prefix: string, options?: EncodingOption): string | Buffer;\\n    /**\\n     * Reads the contents of a directory. The callback gets two arguments `(err, files)`where `files` is an array of the names of the files in the directory excluding`'.'` and `'..'`.\\n     *\\n     * See the POSIX [`readdir(3)`](http://man7.org/linux/man-pages/man3/readdir.3.html) documentation for more details.\\n     *\\n     * The optional `options` argument can be a string specifying an encoding, or an\\n     * object with an `encoding` property specifying the character encoding to use for\\n     * the filenames passed to the callback. If the `encoding` is set to `'buffer'`,\\n     * the filenames returned will be passed as `Buffer` objects.\\n     *\\n     * If `options.withFileTypes` is set to `true`, the `files` array will contain `fs.Dirent` objects.\\n     * @since v0.1.8\\n     */\\n    export function readdir(\\n        path: PathLike,\\n        options:\\n            | {\\n                  encoding: BufferEncoding | null;\\n                  withFileTypes?: false | undefined;\\n              }\\n            | BufferEncoding\\n            | undefined\\n            | null,\\n        callback: (err: NodeJS.ErrnoException | null, files: string[]) => void\\n    ): void;\\n    /**\\n     * Asynchronous readdir(3) - read a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function readdir(\\n        path: PathLike,\\n        options:\\n            | {\\n                  encoding: 'buffer';\\n                  withFileTypes?: false | undefined;\\n              }\\n            | 'buffer',\\n        callback: (err: NodeJS.ErrnoException | null, files: Buffer[]) => void\\n    ): void;\\n    /**\\n     * Asynchronous readdir(3) - read a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function readdir(\\n        path: PathLike,\\n        options:\\n            | (ObjectEncodingOptions & {\\n                  withFileTypes?: false | undefined;\\n              })\\n            | BufferEncoding\\n            | undefined\\n            | null,\\n        callback: (err: NodeJS.ErrnoException | null, files: string[] | Buffer[]) => void\\n    ): void;\\n    /**\\n     * Asynchronous readdir(3) - read a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     */\\n    export function readdir(path: PathLike, callback: (err: NodeJS.ErrnoException | null, files: string[]) => void): void;\\n    /**\\n     * Asynchronous readdir(3) - read a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options If called with `withFileTypes: true` the result data will be an array of Dirent.\\n     */\\n    export function readdir(\\n        path: PathLike,\\n        options: ObjectEncodingOptions & {\\n            withFileTypes: true;\\n        },\\n        callback: (err: NodeJS.ErrnoException | null, files: Dirent[]) => void\\n    ): void;\\n    export namespace readdir {\\n        /**\\n         * Asynchronous readdir(3) - read a directory.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n         */\\n        function __promisify__(\\n            path: PathLike,\\n            options?:\\n                | {\\n                      encoding: BufferEncoding | null;\\n                      withFileTypes?: false | undefined;\\n                  }\\n                | BufferEncoding\\n                | null\\n        ): Promise<string[]>;\\n        /**\\n         * Asynchronous readdir(3) - read a directory.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n         */\\n        function __promisify__(\\n            path: PathLike,\\n            options:\\n                | 'buffer'\\n                | {\\n                      encoding: 'buffer';\\n                      withFileTypes?: false | undefined;\\n                  }\\n        ): Promise<Buffer[]>;\\n        /**\\n         * Asynchronous readdir(3) - read a directory.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n         */\\n        function __promisify__(\\n            path: PathLike,\\n            options?:\\n                | (ObjectEncodingOptions & {\\n                      withFileTypes?: false | undefined;\\n                  })\\n                | BufferEncoding\\n                | null\\n        ): Promise<string[] | Buffer[]>;\\n        /**\\n         * Asynchronous readdir(3) - read a directory.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param options If called with `withFileTypes: true` the result data will be an array of Dirent\\n         */\\n        function __promisify__(\\n            path: PathLike,\\n            options: ObjectEncodingOptions & {\\n                withFileTypes: true;\\n            }\\n        ): Promise<Dirent[]>;\\n    }\\n    /**\\n     * Reads the contents of the directory.\\n     *\\n     * See the POSIX [`readdir(3)`](http://man7.org/linux/man-pages/man3/readdir.3.html) documentation for more details.\\n     *\\n     * The optional `options` argument can be a string specifying an encoding, or an\\n     * object with an `encoding` property specifying the character encoding to use for\\n     * the filenames returned. If the `encoding` is set to `'buffer'`,\\n     * the filenames returned will be passed as `Buffer` objects.\\n     *\\n     * If `options.withFileTypes` is set to `true`, the result will contain `fs.Dirent` objects.\\n     * @since v0.1.21\\n     */\\n    export function readdirSync(\\n        path: PathLike,\\n        options?:\\n            | {\\n                  encoding: BufferEncoding | null;\\n                  withFileTypes?: false | undefined;\\n              }\\n            | BufferEncoding\\n            | null\\n    ): string[];\\n    /**\\n     * Synchronous readdir(3) - read a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function readdirSync(\\n        path: PathLike,\\n        options:\\n            | {\\n                  encoding: 'buffer';\\n                  withFileTypes?: false | undefined;\\n              }\\n            | 'buffer'\\n    ): Buffer[];\\n    /**\\n     * Synchronous readdir(3) - read a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function readdirSync(\\n        path: PathLike,\\n        options?:\\n            | (ObjectEncodingOptions & {\\n                  withFileTypes?: false | undefined;\\n              })\\n            | BufferEncoding\\n            | null\\n    ): string[] | Buffer[];\\n    /**\\n     * Synchronous readdir(3) - read a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options If called with `withFileTypes: true` the result data will be an array of Dirent.\\n     */\\n    export function readdirSync(\\n        path: PathLike,\\n        options: ObjectEncodingOptions & {\\n            withFileTypes: true;\\n        }\\n    ): Dirent[];\\n    /**\\n     * Closes the file descriptor. No arguments other than a possible exception are\\n     * given to the completion callback.\\n     *\\n     * Calling `fs.close()` on any file descriptor (`fd`) that is currently in use\\n     * through any other `fs` operation may lead to undefined behavior.\\n     *\\n     * See the POSIX [`close(2)`](http://man7.org/linux/man-pages/man2/close.2.html) documentation for more detail.\\n     * @since v0.0.2\\n     */\\n    export function close(fd: number, callback?: NoParamCallback): void;\\n    export namespace close {\\n        /**\\n         * Asynchronous close(2) - close a file descriptor.\\n         * @param fd A file descriptor.\\n         */\\n        function __promisify__(fd: number): Promise<void>;\\n    }\\n    /**\\n     * Closes the file descriptor. Returns `undefined`.\\n     *\\n     * Calling `fs.closeSync()` on any file descriptor (`fd`) that is currently in use\\n     * through any other `fs` operation may lead to undefined behavior.\\n     *\\n     * See the POSIX [`close(2)`](http://man7.org/linux/man-pages/man2/close.2.html) documentation for more detail.\\n     * @since v0.1.21\\n     */\\n    export function closeSync(fd: number): void;\\n    /**\\n     * Asynchronous file open. See the POSIX [`open(2)`](http://man7.org/linux/man-pages/man2/open.2.html) documentation for more details.\\n     *\\n     * `mode` sets the file mode (permission and sticky bits), but only if the file was\\n     * created. On Windows, only the write permission can be manipulated; see {@link chmod}.\\n     *\\n     * The callback gets two arguments `(err, fd)`.\\n     *\\n     * Some characters (`< > : \\\" / \\\\ | ? *`) are reserved under Windows as documented\\n     * by [Naming Files, Paths, and Namespaces](https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file). Under NTFS, if the filename contains\\n     * a colon, Node.js will open a file system stream, as described by [this MSDN page](https://docs.microsoft.com/en-us/windows/desktop/FileIO/using-streams).\\n     *\\n     * Functions based on `fs.open()` exhibit this behavior as well:`fs.writeFile()`, `fs.readFile()`, etc.\\n     * @since v0.0.2\\n     * @param [flags='r'] See `support of file system `flags``.\\n     * @param [mode=0o666]\\n     */\\n    export function open(path: PathLike, flags: OpenMode | undefined, mode: Mode | undefined | null, callback: (err: NodeJS.ErrnoException | null, fd: number) => void): void;\\n    /**\\n     * Asynchronous open(2) - open and possibly create a file. If the file is created, its mode will be `0o666`.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param [flags='r'] See `support of file system `flags``.\\n     */\\n    export function open(path: PathLike, flags: OpenMode | undefined, callback: (err: NodeJS.ErrnoException | null, fd: number) => void): void;\\n    /**\\n     * Asynchronous open(2) - open and possibly create a file. If the file is created, its mode will be `0o666`.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     */\\n    export function open(path: PathLike, callback: (err: NodeJS.ErrnoException | null, fd: number) => void): void;\\n\\n    export namespace open {\\n        /**\\n         * Asynchronous open(2) - open and possibly create a file.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param mode A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.\\n         */\\n        function __promisify__(path: PathLike, flags: OpenMode, mode?: Mode | null): Promise<number>;\\n    }\\n    /**\\n     * Returns an integer representing the file descriptor.\\n     *\\n     * For detailed information, see the documentation of the asynchronous version of\\n     * this API: {@link open}.\\n     * @since v0.1.21\\n     * @param [flags='r']\\n     * @param [mode=0o666]\\n     */\\n    export function openSync(path: PathLike, flags: OpenMode, mode?: Mode | null): number;\\n    /**\\n     * Change the file system timestamps of the object referenced by `path`.\\n     *\\n     * The `atime` and `mtime` arguments follow these rules:\\n     *\\n     * * Values can be either numbers representing Unix epoch time in seconds,`Date`s, or a numeric string like `'123456789.0'`.\\n     * * If the value can not be converted to a number, or is `NaN`, `Infinity` or`-Infinity`, an `Error` will be thrown.\\n     * @since v0.4.2\\n     */\\n    export function utimes(path: PathLike, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback): void;\\n    export namespace utimes {\\n        /**\\n         * Asynchronously change file timestamps of the file referenced by the supplied path.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param atime The last access time. If a string is provided, it will be coerced to number.\\n         * @param mtime The last modified time. If a string is provided, it will be coerced to number.\\n         */\\n        function __promisify__(path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void>;\\n    }\\n    /**\\n     * Returns `undefined`.\\n     *\\n     * For detailed information, see the documentation of the asynchronous version of\\n     * this API: {@link utimes}.\\n     * @since v0.4.2\\n     */\\n    export function utimesSync(path: PathLike, atime: TimeLike, mtime: TimeLike): void;\\n    /**\\n     * Change the file system timestamps of the object referenced by the supplied file\\n     * descriptor. See {@link utimes}.\\n     * @since v0.4.2\\n     */\\n    export function futimes(fd: number, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback): void;\\n    export namespace futimes {\\n        /**\\n         * Asynchronously change file timestamps of the file referenced by the supplied file descriptor.\\n         * @param fd A file descriptor.\\n         * @param atime The last access time. If a string is provided, it will be coerced to number.\\n         * @param mtime The last modified time. If a string is provided, it will be coerced to number.\\n         */\\n        function __promisify__(fd: number, atime: TimeLike, mtime: TimeLike): Promise<void>;\\n    }\\n    /**\\n     * Synchronous version of {@link futimes}. Returns `undefined`.\\n     * @since v0.4.2\\n     */\\n    export function futimesSync(fd: number, atime: TimeLike, mtime: TimeLike): void;\\n    /**\\n     * Request that all data for the open file descriptor is flushed to the storage\\n     * device. The specific implementation is operating system and device specific.\\n     * Refer to the POSIX [`fsync(2)`](http://man7.org/linux/man-pages/man2/fsync.2.html) documentation for more detail. No arguments other\\n     * than a possible exception are given to the completion callback.\\n     * @since v0.1.96\\n     */\\n    export function fsync(fd: number, callback: NoParamCallback): void;\\n    export namespace fsync {\\n        /**\\n         * Asynchronous fsync(2) - synchronize a file's in-core state with the underlying storage device.\\n         * @param fd A file descriptor.\\n         */\\n        function __promisify__(fd: number): Promise<void>;\\n    }\\n    /**\\n     * Request that all data for the open file descriptor is flushed to the storage\\n     * device. The specific implementation is operating system and device specific.\\n     * Refer to the POSIX [`fsync(2)`](http://man7.org/linux/man-pages/man2/fsync.2.html) documentation for more detail. Returns `undefined`.\\n     * @since v0.1.96\\n     */\\n    export function fsyncSync(fd: number): void;\\n    /**\\n     * Write `buffer` to the file specified by `fd`.\\n     *\\n     * `offset` determines the part of the buffer to be written, and `length` is\\n     * an integer specifying the number of bytes to write.\\n     *\\n     * `position` refers to the offset from the beginning of the file where this data\\n     * should be written. If `typeof position !== 'number'`, the data will be written\\n     * at the current position. See [`pwrite(2)`](http://man7.org/linux/man-pages/man2/pwrite.2.html).\\n     *\\n     * The callback will be given three arguments `(err, bytesWritten, buffer)` where`bytesWritten` specifies how many _bytes_ were written from `buffer`.\\n     *\\n     * If this method is invoked as its `util.promisify()` ed version, it returns\\n     * a promise for an `Object` with `bytesWritten` and `buffer` properties.\\n     *\\n     * It is unsafe to use `fs.write()` multiple times on the same file without waiting\\n     * for the callback. For this scenario, {@link createWriteStream} is\\n     * recommended.\\n     *\\n     * On Linux, positional writes don't work when the file is opened in append mode.\\n     * The kernel ignores the position argument and always appends the data to\\n     * the end of the file.\\n     * @since v0.0.2\\n     */\\n    export function write<TBuffer extends NodeJS.ArrayBufferView>(\\n        fd: number,\\n        buffer: TBuffer,\\n        offset: number | undefined | null,\\n        length: number | undefined | null,\\n        position: number | undefined | null,\\n        callback: (err: NodeJS.ErrnoException | null, written: number, buffer: TBuffer) => void\\n    ): void;\\n    /**\\n     * Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.\\n     * @param fd A file descriptor.\\n     * @param offset The part of the buffer to be written. If not supplied, defaults to `0`.\\n     * @param length The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.\\n     */\\n    export function write<TBuffer extends NodeJS.ArrayBufferView>(\\n        fd: number,\\n        buffer: TBuffer,\\n        offset: number | undefined | null,\\n        length: number | undefined | null,\\n        callback: (err: NodeJS.ErrnoException | null, written: number, buffer: TBuffer) => void\\n    ): void;\\n    /**\\n     * Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.\\n     * @param fd A file descriptor.\\n     * @param offset The part of the buffer to be written. If not supplied, defaults to `0`.\\n     */\\n    export function write<TBuffer extends NodeJS.ArrayBufferView>(\\n        fd: number,\\n        buffer: TBuffer,\\n        offset: number | undefined | null,\\n        callback: (err: NodeJS.ErrnoException | null, written: number, buffer: TBuffer) => void\\n    ): void;\\n    /**\\n     * Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.\\n     * @param fd A file descriptor.\\n     */\\n    export function write<TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, callback: (err: NodeJS.ErrnoException | null, written: number, buffer: TBuffer) => void): void;\\n    /**\\n     * Asynchronously writes `string` to the file referenced by the supplied file descriptor.\\n     * @param fd A file descriptor.\\n     * @param string A string to write.\\n     * @param position The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.\\n     * @param encoding The expected string encoding.\\n     */\\n    export function write(\\n        fd: number,\\n        string: string,\\n        position: number | undefined | null,\\n        encoding: BufferEncoding | undefined | null,\\n        callback: (err: NodeJS.ErrnoException | null, written: number, str: string) => void\\n    ): void;\\n    /**\\n     * Asynchronously writes `string` to the file referenced by the supplied file descriptor.\\n     * @param fd A file descriptor.\\n     * @param string A string to write.\\n     * @param position The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.\\n     */\\n    export function write(fd: number, string: string, position: number | undefined | null, callback: (err: NodeJS.ErrnoException | null, written: number, str: string) => void): void;\\n    /**\\n     * Asynchronously writes `string` to the file referenced by the supplied file descriptor.\\n     * @param fd A file descriptor.\\n     * @param string A string to write.\\n     */\\n    export function write(fd: number, string: string, callback: (err: NodeJS.ErrnoException | null, written: number, str: string) => void): void;\\n    export namespace write {\\n        /**\\n         * Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.\\n         * @param fd A file descriptor.\\n         * @param offset The part of the buffer to be written. If not supplied, defaults to `0`.\\n         * @param length The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.\\n         * @param position The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.\\n         */\\n        function __promisify__<TBuffer extends NodeJS.ArrayBufferView>(\\n            fd: number,\\n            buffer?: TBuffer,\\n            offset?: number,\\n            length?: number,\\n            position?: number | null\\n        ): Promise<{\\n            bytesWritten: number;\\n            buffer: TBuffer;\\n        }>;\\n        /**\\n         * Asynchronously writes `string` to the file referenced by the supplied file descriptor.\\n         * @param fd A file descriptor.\\n         * @param string A string to write.\\n         * @param position The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.\\n         * @param encoding The expected string encoding.\\n         */\\n        function __promisify__(\\n            fd: number,\\n            string: string,\\n            position?: number | null,\\n            encoding?: BufferEncoding | null\\n        ): Promise<{\\n            bytesWritten: number;\\n            buffer: string;\\n        }>;\\n    }\\n    /**\\n     * For detailed information, see the documentation of the asynchronous version of\\n     * this API: {@link write}.\\n     * @since v0.1.21\\n     * @return The number of bytes written.\\n     */\\n    export function writeSync(fd: number, buffer: NodeJS.ArrayBufferView, offset?: number | null, length?: number | null, position?: number | null): number;\\n    /**\\n     * Synchronously writes `string` to the file referenced by the supplied file descriptor, returning the number of bytes written.\\n     * @param fd A file descriptor.\\n     * @param string A string to write.\\n     * @param position The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.\\n     * @param encoding The expected string encoding.\\n     */\\n    export function writeSync(fd: number, string: string, position?: number | null, encoding?: BufferEncoding | null): number;\\n    export type ReadPosition = number | bigint;\\n    export interface ReadSyncOptions {\\n        /**\\n         * @default 0\\n         */\\n        offset?: number | undefined;\\n        /**\\n         * @default `length of buffer`\\n         */\\n        length?: number | undefined;\\n        /**\\n         * @default null\\n         */\\n        position?: ReadPosition | null | undefined;\\n    }\\n    export interface ReadAsyncOptions<TBuffer extends NodeJS.ArrayBufferView> extends ReadSyncOptions {\\n        buffer?: TBuffer;\\n    }\\n    /**\\n     * Read data from the file specified by `fd`.\\n     *\\n     * The callback is given the three arguments, `(err, bytesRead, buffer)`.\\n     *\\n     * If the file is not modified concurrently, the end-of-file is reached when the\\n     * number of bytes read is zero.\\n     *\\n     * If this method is invoked as its `util.promisify()` ed version, it returns\\n     * a promise for an `Object` with `bytesRead` and `buffer` properties.\\n     * @since v0.0.2\\n     * @param buffer The buffer that the data will be written to.\\n     * @param offset The position in `buffer` to write the data to.\\n     * @param length The number of bytes to read.\\n     * @param position Specifies where to begin reading from in the file. If `position` is `null` or `-1 `, data will be read from the current file position, and the file position will be updated. If\\n     * `position` is an integer, the file position will be unchanged.\\n     */\\n    export function read<TBuffer extends NodeJS.ArrayBufferView>(\\n        fd: number,\\n        buffer: TBuffer,\\n        offset: number,\\n        length: number,\\n        position: ReadPosition | null,\\n        callback: (err: NodeJS.ErrnoException | null, bytesRead: number, buffer: TBuffer) => void\\n    ): void;\\n    /**\\n     * Similar to the above `fs.read` function, this version takes an optional `options` object.\\n     * If not otherwise specified in an `options` object,\\n     * `buffer` defaults to `Buffer.alloc(16384)`,\\n     * `offset` defaults to `0`,\\n     * `length` defaults to `buffer.byteLength`, `- offset` as of Node 17.6.0\\n     * `position` defaults to `null`\\n     * @since v12.17.0, 13.11.0\\n     */\\n    export function read<TBuffer extends NodeJS.ArrayBufferView>(\\n        fd: number,\\n        options: ReadAsyncOptions<TBuffer>,\\n        callback: (err: NodeJS.ErrnoException | null, bytesRead: number, buffer: TBuffer) => void\\n    ): void;\\n    export function read(fd: number, callback: (err: NodeJS.ErrnoException | null, bytesRead: number, buffer: NodeJS.ArrayBufferView) => void): void;\\n    export namespace read {\\n        /**\\n         * @param fd A file descriptor.\\n         * @param buffer The buffer that the data will be written to.\\n         * @param offset The offset in the buffer at which to start writing.\\n         * @param length The number of bytes to read.\\n         * @param position The offset from the beginning of the file from which data should be read. If `null`, data will be read from the current position.\\n         */\\n        function __promisify__<TBuffer extends NodeJS.ArrayBufferView>(\\n            fd: number,\\n            buffer: TBuffer,\\n            offset: number,\\n            length: number,\\n            position: number | null\\n        ): Promise<{\\n            bytesRead: number;\\n            buffer: TBuffer;\\n        }>;\\n        function __promisify__<TBuffer extends NodeJS.ArrayBufferView>(\\n            fd: number,\\n            options: ReadAsyncOptions<TBuffer>\\n        ): Promise<{\\n            bytesRead: number;\\n            buffer: TBuffer;\\n        }>;\\n        function __promisify__(fd: number): Promise<{\\n            bytesRead: number;\\n            buffer: NodeJS.ArrayBufferView;\\n        }>;\\n    }\\n    /**\\n     * Returns the number of `bytesRead`.\\n     *\\n     * For detailed information, see the documentation of the asynchronous version of\\n     * this API: {@link read}.\\n     * @since v0.1.21\\n     */\\n    export function readSync(fd: number, buffer: NodeJS.ArrayBufferView, offset: number, length: number, position: ReadPosition | null): number;\\n    /**\\n     * Similar to the above `fs.readSync` function, this version takes an optional `options` object.\\n     * If no `options` object is specified, it will default with the above values.\\n     */\\n    export function readSync(fd: number, buffer: NodeJS.ArrayBufferView, opts?: ReadSyncOptions): number;\\n    /**\\n     * Asynchronously reads the entire contents of a file.\\n     *\\n     * ```js\\n     * import { readFile } from 'fs';\\n     *\\n     * readFile('/etc/passwd', (err, data) => {\\n     *   if (err) throw err;\\n     *   console.log(data);\\n     * });\\n     * ```\\n     *\\n     * The callback is passed two arguments `(err, data)`, where `data` is the\\n     * contents of the file.\\n     *\\n     * If no encoding is specified, then the raw buffer is returned.\\n     *\\n     * If `options` is a string, then it specifies the encoding:\\n     *\\n     * ```js\\n     * import { readFile } from 'fs';\\n     *\\n     * readFile('/etc/passwd', 'utf8', callback);\\n     * ```\\n     *\\n     * When the path is a directory, the behavior of `fs.readFile()` and {@link readFileSync} is platform-specific. On macOS, Linux, and Windows, an\\n     * error will be returned. On FreeBSD, a representation of the directory's contents\\n     * will be returned.\\n     *\\n     * ```js\\n     * import { readFile } from 'fs';\\n     *\\n     * // macOS, Linux, and Windows\\n     * readFile('<directory>', (err, data) => {\\n     *   // => [Error: EISDIR: illegal operation on a directory, read <directory>]\\n     * });\\n     *\\n     * //  FreeBSD\\n     * readFile('<directory>', (err, data) => {\\n     *   // => null, <data>\\n     * });\\n     * ```\\n     *\\n     * It is possible to abort an ongoing request using an `AbortSignal`. If a\\n     * request is aborted the callback is called with an `AbortError`:\\n     *\\n     * ```js\\n     * import { readFile } from 'fs';\\n     *\\n     * const controller = new AbortController();\\n     * const signal = controller.signal;\\n     * readFile(fileInfo[0].name, { signal }, (err, buf) => {\\n     *   // ...\\n     * });\\n     * // When you want to abort the request\\n     * controller.abort();\\n     * ```\\n     *\\n     * The `fs.readFile()` function buffers the entire file. To minimize memory costs,\\n     * when possible prefer streaming via `fs.createReadStream()`.\\n     *\\n     * Aborting an ongoing request does not abort individual operating\\n     * system requests but rather the internal buffering `fs.readFile` performs.\\n     * @since v0.1.29\\n     * @param path filename or file descriptor\\n     */\\n    export function readFile(\\n        path: PathOrFileDescriptor,\\n        options:\\n            | ({\\n                  encoding?: null | undefined;\\n                  flag?: string | undefined;\\n              } & Abortable)\\n            | undefined\\n            | null,\\n        callback: (err: NodeJS.ErrnoException | null, data: Buffer) => void\\n    ): void;\\n    /**\\n     * Asynchronously reads the entire contents of a file.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\n     * @param options Either the encoding for the result, or an object that contains the encoding and an optional flag.\\n     * If a flag is not provided, it defaults to `'r'`.\\n     */\\n    export function readFile(\\n        path: PathOrFileDescriptor,\\n        options:\\n            | ({\\n                  encoding: BufferEncoding;\\n                  flag?: string | undefined;\\n              } & Abortable)\\n            | BufferEncoding,\\n        callback: (err: NodeJS.ErrnoException | null, data: string) => void\\n    ): void;\\n    /**\\n     * Asynchronously reads the entire contents of a file.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\n     * @param options Either the encoding for the result, or an object that contains the encoding and an optional flag.\\n     * If a flag is not provided, it defaults to `'r'`.\\n     */\\n    export function readFile(\\n        path: PathOrFileDescriptor,\\n        options:\\n            | (ObjectEncodingOptions & {\\n                  flag?: string | undefined;\\n              } & Abortable)\\n            | BufferEncoding\\n            | undefined\\n            | null,\\n        callback: (err: NodeJS.ErrnoException | null, data: string | Buffer) => void\\n    ): void;\\n    /**\\n     * Asynchronously reads the entire contents of a file.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\n     */\\n    export function readFile(path: PathOrFileDescriptor, callback: (err: NodeJS.ErrnoException | null, data: Buffer) => void): void;\\n    export namespace readFile {\\n        /**\\n         * Asynchronously reads the entire contents of a file.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\n         * @param options An object that may contain an optional flag.\\n         * If a flag is not provided, it defaults to `'r'`.\\n         */\\n        function __promisify__(\\n            path: PathOrFileDescriptor,\\n            options?: {\\n                encoding?: null | undefined;\\n                flag?: string | undefined;\\n            } | null\\n        ): Promise<Buffer>;\\n        /**\\n         * Asynchronously reads the entire contents of a file.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * URL support is _experimental_.\\n         * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\n         * @param options Either the encoding for the result, or an object that contains the encoding and an optional flag.\\n         * If a flag is not provided, it defaults to `'r'`.\\n         */\\n        function __promisify__(\\n            path: PathOrFileDescriptor,\\n            options:\\n                | {\\n                      encoding: BufferEncoding;\\n                      flag?: string | undefined;\\n                  }\\n                | BufferEncoding\\n        ): Promise<string>;\\n        /**\\n         * Asynchronously reads the entire contents of a file.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * URL support is _experimental_.\\n         * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\n         * @param options Either the encoding for the result, or an object that contains the encoding and an optional flag.\\n         * If a flag is not provided, it defaults to `'r'`.\\n         */\\n        function __promisify__(\\n            path: PathOrFileDescriptor,\\n            options?:\\n                | (ObjectEncodingOptions & {\\n                      flag?: string | undefined;\\n                  })\\n                | BufferEncoding\\n                | null\\n        ): Promise<string | Buffer>;\\n    }\\n    /**\\n     * Returns the contents of the `path`.\\n     *\\n     * For detailed information, see the documentation of the asynchronous version of\\n     * this API: {@link readFile}.\\n     *\\n     * If the `encoding` option is specified then this function returns a\\n     * string. Otherwise it returns a buffer.\\n     *\\n     * Similar to {@link readFile}, when the path is a directory, the behavior of`fs.readFileSync()` is platform-specific.\\n     *\\n     * ```js\\n     * import { readFileSync } from 'fs';\\n     *\\n     * // macOS, Linux, and Windows\\n     * readFileSync('<directory>');\\n     * // => [Error: EISDIR: illegal operation on a directory, read <directory>]\\n     *\\n     * //  FreeBSD\\n     * readFileSync('<directory>'); // => <data>\\n     * ```\\n     * @since v0.1.8\\n     * @param path filename or file descriptor\\n     */\\n    export function readFileSync(\\n        path: PathOrFileDescriptor,\\n        options?: {\\n            encoding?: null | undefined;\\n            flag?: string | undefined;\\n        } | null\\n    ): Buffer;\\n    /**\\n     * Synchronously reads the entire contents of a file.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\n     * @param options Either the encoding for the result, or an object that contains the encoding and an optional flag.\\n     * If a flag is not provided, it defaults to `'r'`.\\n     */\\n    export function readFileSync(\\n        path: PathOrFileDescriptor,\\n        options:\\n            | {\\n                  encoding: BufferEncoding;\\n                  flag?: string | undefined;\\n              }\\n            | BufferEncoding\\n    ): string;\\n    /**\\n     * Synchronously reads the entire contents of a file.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\n     * @param options Either the encoding for the result, or an object that contains the encoding and an optional flag.\\n     * If a flag is not provided, it defaults to `'r'`.\\n     */\\n    export function readFileSync(\\n        path: PathOrFileDescriptor,\\n        options?:\\n            | (ObjectEncodingOptions & {\\n                  flag?: string | undefined;\\n              })\\n            | BufferEncoding\\n            | null\\n    ): string | Buffer;\\n    export type WriteFileOptions =\\n        | (ObjectEncodingOptions &\\n              Abortable & {\\n                  mode?: Mode | undefined;\\n                  flag?: string | undefined;\\n              })\\n        | BufferEncoding\\n        | null;\\n    /**\\n     * When `file` is a filename, asynchronously writes data to the file, replacing the\\n     * file if it already exists. `data` can be a string or a buffer.\\n     *\\n     * When `file` is a file descriptor, the behavior is similar to calling`fs.write()` directly (which is recommended). See the notes below on using\\n     * a file descriptor.\\n     *\\n     * The `encoding` option is ignored if `data` is a buffer.\\n     *\\n     * The `mode` option only affects the newly created file. See {@link open} for more details.\\n     *\\n     * ```js\\n     * import { writeFile } from 'fs';\\n     * import { Buffer } from 'buffer';\\n     *\\n     * const data = new Uint8Array(Buffer.from('Hello Node.js'));\\n     * writeFile('message.txt', data, (err) => {\\n     *   if (err) throw err;\\n     *   console.log('The file has been saved!');\\n     * });\\n     * ```\\n     *\\n     * If `options` is a string, then it specifies the encoding:\\n     *\\n     * ```js\\n     * import { writeFile } from 'fs';\\n     *\\n     * writeFile('message.txt', 'Hello Node.js', 'utf8', callback);\\n     * ```\\n     *\\n     * It is unsafe to use `fs.writeFile()` multiple times on the same file without\\n     * waiting for the callback. For this scenario, {@link createWriteStream} is\\n     * recommended.\\n     *\\n     * Similarly to `fs.readFile` \\\\- `fs.writeFile` is a convenience method that\\n     * performs multiple `write` calls internally to write the buffer passed to it.\\n     * For performance sensitive code consider using {@link createWriteStream}.\\n     *\\n     * It is possible to use an `AbortSignal` to cancel an `fs.writeFile()`.\\n     * Cancelation is \\\"best effort\\\", and some amount of data is likely still\\n     * to be written.\\n     *\\n     * ```js\\n     * import { writeFile } from 'fs';\\n     * import { Buffer } from 'buffer';\\n     *\\n     * const controller = new AbortController();\\n     * const { signal } = controller;\\n     * const data = new Uint8Array(Buffer.from('Hello Node.js'));\\n     * writeFile('message.txt', data, { signal }, (err) => {\\n     *   // When a request is aborted - the callback is called with an AbortError\\n     * });\\n     * // When the request should be aborted\\n     * controller.abort();\\n     * ```\\n     *\\n     * Aborting an ongoing request does not abort individual operating\\n     * system requests but rather the internal buffering `fs.writeFile` performs.\\n     * @since v0.1.29\\n     * @param file filename or file descriptor\\n     */\\n    export function writeFile(file: PathOrFileDescriptor, data: string | NodeJS.ArrayBufferView, options: WriteFileOptions, callback: NoParamCallback): void;\\n    /**\\n     * Asynchronously writes data to a file, replacing the file if it already exists.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\n     * @param data The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.\\n     */\\n    export function writeFile(path: PathOrFileDescriptor, data: string | NodeJS.ArrayBufferView, callback: NoParamCallback): void;\\n    export namespace writeFile {\\n        /**\\n         * Asynchronously writes data to a file, replacing the file if it already exists.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * URL support is _experimental_.\\n         * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\n         * @param data The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.\\n         * @param options Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.\\n         * If `encoding` is not supplied, the default of `'utf8'` is used.\\n         * If `mode` is not supplied, the default of `0o666` is used.\\n         * If `mode` is a string, it is parsed as an octal integer.\\n         * If `flag` is not supplied, the default of `'w'` is used.\\n         */\\n        function __promisify__(path: PathOrFileDescriptor, data: string | NodeJS.ArrayBufferView, options?: WriteFileOptions): Promise<void>;\\n    }\\n    /**\\n     * Returns `undefined`.\\n     *\\n     * The `mode` option only affects the newly created file. See {@link open} for more details.\\n     *\\n     * For detailed information, see the documentation of the asynchronous version of\\n     * this API: {@link writeFile}.\\n     * @since v0.1.29\\n     * @param file filename or file descriptor\\n     */\\n    export function writeFileSync(file: PathOrFileDescriptor, data: string | NodeJS.ArrayBufferView, options?: WriteFileOptions): void;\\n    /**\\n     * Asynchronously append data to a file, creating the file if it does not yet\\n     * exist. `data` can be a string or a `Buffer`.\\n     *\\n     * The `mode` option only affects the newly created file. See {@link open} for more details.\\n     *\\n     * ```js\\n     * import { appendFile } from 'fs';\\n     *\\n     * appendFile('message.txt', 'data to append', (err) => {\\n     *   if (err) throw err;\\n     *   console.log('The \\\"data to append\\\" was appended to file!');\\n     * });\\n     * ```\\n     *\\n     * If `options` is a string, then it specifies the encoding:\\n     *\\n     * ```js\\n     * import { appendFile } from 'fs';\\n     *\\n     * appendFile('message.txt', 'data to append', 'utf8', callback);\\n     * ```\\n     *\\n     * The `path` may be specified as a numeric file descriptor that has been opened\\n     * for appending (using `fs.open()` or `fs.openSync()`). The file descriptor will\\n     * not be closed automatically.\\n     *\\n     * ```js\\n     * import { open, close, appendFile } from 'fs';\\n     *\\n     * function closeFd(fd) {\\n     *   close(fd, (err) => {\\n     *     if (err) throw err;\\n     *   });\\n     * }\\n     *\\n     * open('message.txt', 'a', (err, fd) => {\\n     *   if (err) throw err;\\n     *\\n     *   try {\\n     *     appendFile(fd, 'data to append', 'utf8', (err) => {\\n     *       closeFd(fd);\\n     *       if (err) throw err;\\n     *     });\\n     *   } catch (err) {\\n     *     closeFd(fd);\\n     *     throw err;\\n     *   }\\n     * });\\n     * ```\\n     * @since v0.6.7\\n     * @param path filename or file descriptor\\n     */\\n    export function appendFile(path: PathOrFileDescriptor, data: string | Uint8Array, options: WriteFileOptions, callback: NoParamCallback): void;\\n    /**\\n     * Asynchronously append data to a file, creating the file if it does not exist.\\n     * @param file A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\n     * @param data The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.\\n     */\\n    export function appendFile(file: PathOrFileDescriptor, data: string | Uint8Array, callback: NoParamCallback): void;\\n    export namespace appendFile {\\n        /**\\n         * Asynchronously append data to a file, creating the file if it does not exist.\\n         * @param file A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * URL support is _experimental_.\\n         * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\n         * @param data The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.\\n         * @param options Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.\\n         * If `encoding` is not supplied, the default of `'utf8'` is used.\\n         * If `mode` is not supplied, the default of `0o666` is used.\\n         * If `mode` is a string, it is parsed as an octal integer.\\n         * If `flag` is not supplied, the default of `'a'` is used.\\n         */\\n        function __promisify__(file: PathOrFileDescriptor, data: string | Uint8Array, options?: WriteFileOptions): Promise<void>;\\n    }\\n    /**\\n     * Synchronously append data to a file, creating the file if it does not yet\\n     * exist. `data` can be a string or a `Buffer`.\\n     *\\n     * The `mode` option only affects the newly created file. See {@link open} for more details.\\n     *\\n     * ```js\\n     * import { appendFileSync } from 'fs';\\n     *\\n     * try {\\n     *   appendFileSync('message.txt', 'data to append');\\n     *   console.log('The \\\"data to append\\\" was appended to file!');\\n     * } catch (err) {\\n     *   // Handle the error\\n     * }\\n     * ```\\n     *\\n     * If `options` is a string, then it specifies the encoding:\\n     *\\n     * ```js\\n     * import { appendFileSync } from 'fs';\\n     *\\n     * appendFileSync('message.txt', 'data to append', 'utf8');\\n     * ```\\n     *\\n     * The `path` may be specified as a numeric file descriptor that has been opened\\n     * for appending (using `fs.open()` or `fs.openSync()`). The file descriptor will\\n     * not be closed automatically.\\n     *\\n     * ```js\\n     * import { openSync, closeSync, appendFileSync } from 'fs';\\n     *\\n     * let fd;\\n     *\\n     * try {\\n     *   fd = openSync('message.txt', 'a');\\n     *   appendFileSync(fd, 'data to append', 'utf8');\\n     * } catch (err) {\\n     *   // Handle the error\\n     * } finally {\\n     *   if (fd !== undefined)\\n     *     closeSync(fd);\\n     * }\\n     * ```\\n     * @since v0.6.7\\n     * @param path filename or file descriptor\\n     */\\n    export function appendFileSync(path: PathOrFileDescriptor, data: string | Uint8Array, options?: WriteFileOptions): void;\\n    /**\\n     * Watch for changes on `filename`. The callback `listener` will be called each\\n     * time the file is accessed.\\n     *\\n     * The `options` argument may be omitted. If provided, it should be an object. The`options` object may contain a boolean named `persistent` that indicates\\n     * whether the process should continue to run as long as files are being watched.\\n     * The `options` object may specify an `interval` property indicating how often the\\n     * target should be polled in milliseconds.\\n     *\\n     * The `listener` gets two arguments the current stat object and the previous\\n     * stat object:\\n     *\\n     * ```js\\n     * import { watchFile } from 'fs';\\n     *\\n     * watchFile('message.text', (curr, prev) => {\\n     *   console.log(`the current mtime is: ${curr.mtime}`);\\n     *   console.log(`the previous mtime was: ${prev.mtime}`);\\n     * });\\n     * ```\\n     *\\n     * These stat objects are instances of `fs.Stat`. If the `bigint` option is `true`,\\n     * the numeric values in these objects are specified as `BigInt`s.\\n     *\\n     * To be notified when the file was modified, not just accessed, it is necessary\\n     * to compare `curr.mtimeMs` and `prev.mtimeMs`.\\n     *\\n     * When an `fs.watchFile` operation results in an `ENOENT` error, it\\n     * will invoke the listener once, with all the fields zeroed (or, for dates, the\\n     * Unix Epoch). If the file is created later on, the listener will be called\\n     * again, with the latest stat objects. This is a change in functionality since\\n     * v0.10.\\n     *\\n     * Using {@link watch} is more efficient than `fs.watchFile` and`fs.unwatchFile`. `fs.watch` should be used instead of `fs.watchFile` and`fs.unwatchFile` when possible.\\n     *\\n     * When a file being watched by `fs.watchFile()` disappears and reappears,\\n     * then the contents of `previous` in the second callback event (the file's\\n     * reappearance) will be the same as the contents of `previous` in the first\\n     * callback event (its disappearance).\\n     *\\n     * This happens when:\\n     *\\n     * * the file is deleted, followed by a restore\\n     * * the file is renamed and then renamed a second time back to its original name\\n     * @since v0.1.31\\n     */\\n    export interface WatchFileOptions {\\n        bigint?: boolean | undefined;\\n        persistent?: boolean | undefined;\\n        interval?: number | undefined;\\n    }\\n    /**\\n     * Watch for changes on `filename`. The callback `listener` will be called each\\n     * time the file is accessed.\\n     *\\n     * The `options` argument may be omitted. If provided, it should be an object. The`options` object may contain a boolean named `persistent` that indicates\\n     * whether the process should continue to run as long as files are being watched.\\n     * The `options` object may specify an `interval` property indicating how often the\\n     * target should be polled in milliseconds.\\n     *\\n     * The `listener` gets two arguments the current stat object and the previous\\n     * stat object:\\n     *\\n     * ```js\\n     * import { watchFile } from 'fs';\\n     *\\n     * watchFile('message.text', (curr, prev) => {\\n     *   console.log(`the current mtime is: ${curr.mtime}`);\\n     *   console.log(`the previous mtime was: ${prev.mtime}`);\\n     * });\\n     * ```\\n     *\\n     * These stat objects are instances of `fs.Stat`. If the `bigint` option is `true`,\\n     * the numeric values in these objects are specified as `BigInt`s.\\n     *\\n     * To be notified when the file was modified, not just accessed, it is necessary\\n     * to compare `curr.mtimeMs` and `prev.mtimeMs`.\\n     *\\n     * When an `fs.watchFile` operation results in an `ENOENT` error, it\\n     * will invoke the listener once, with all the fields zeroed (or, for dates, the\\n     * Unix Epoch). If the file is created later on, the listener will be called\\n     * again, with the latest stat objects. This is a change in functionality since\\n     * v0.10.\\n     *\\n     * Using {@link watch} is more efficient than `fs.watchFile` and`fs.unwatchFile`. `fs.watch` should be used instead of `fs.watchFile` and`fs.unwatchFile` when possible.\\n     *\\n     * When a file being watched by `fs.watchFile()` disappears and reappears,\\n     * then the contents of `previous` in the second callback event (the file's\\n     * reappearance) will be the same as the contents of `previous` in the first\\n     * callback event (its disappearance).\\n     *\\n     * This happens when:\\n     *\\n     * * the file is deleted, followed by a restore\\n     * * the file is renamed and then renamed a second time back to its original name\\n     * @since v0.1.31\\n     */\\n    export function watchFile(\\n        filename: PathLike,\\n        options:\\n            | (WatchFileOptions & {\\n                  bigint?: false | undefined;\\n              })\\n            | undefined,\\n        listener: StatsListener\\n    ): StatWatcher;\\n    export function watchFile(\\n        filename: PathLike,\\n        options:\\n            | (WatchFileOptions & {\\n                  bigint: true;\\n              })\\n            | undefined,\\n        listener: BigIntStatsListener\\n    ): StatWatcher;\\n    /**\\n     * Watch for changes on `filename`. The callback `listener` will be called each time the file is accessed.\\n     * @param filename A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\n     * @param listener The callback listener will be called each time the file is accessed.\\n     */\\n    export function watchFile(filename: PathLike, listener: StatsListener): StatWatcher;\\n    /**\\n     * Stop watching for changes on `filename`. If `listener` is specified, only that\\n     * particular listener is removed. Otherwise, _all_ listeners are removed,\\n     * effectively stopping watching of `filename`.\\n     *\\n     * Calling `fs.unwatchFile()` with a filename that is not being watched is a\\n     * no-op, not an error.\\n     *\\n     * Using {@link watch} is more efficient than `fs.watchFile()` and`fs.unwatchFile()`. `fs.watch()` should be used instead of `fs.watchFile()`and `fs.unwatchFile()` when possible.\\n     * @since v0.1.31\\n     * @param listener Optional, a listener previously attached using `fs.watchFile()`\\n     */\\n    export function unwatchFile(filename: PathLike, listener?: StatsListener): void;\\n    export function unwatchFile(filename: PathLike, listener?: BigIntStatsListener): void;\\n    export interface WatchOptions extends Abortable {\\n        encoding?: BufferEncoding | 'buffer' | undefined;\\n        persistent?: boolean | undefined;\\n        recursive?: boolean | undefined;\\n    }\\n    export type WatchEventType = 'rename' | 'change';\\n    export type WatchListener<T> = (event: WatchEventType, filename: T) => void;\\n    export type StatsListener = (curr: Stats, prev: Stats) => void;\\n    export type BigIntStatsListener = (curr: BigIntStats, prev: BigIntStats) => void;\\n    /**\\n     * Watch for changes on `filename`, where `filename` is either a file or a\\n     * directory.\\n     *\\n     * The second argument is optional. If `options` is provided as a string, it\\n     * specifies the `encoding`. Otherwise `options` should be passed as an object.\\n     *\\n     * The listener callback gets two arguments `(eventType, filename)`. `eventType`is either `'rename'` or `'change'`, and `filename` is the name of the file\\n     * which triggered the event.\\n     *\\n     * On most platforms, `'rename'` is emitted whenever a filename appears or\\n     * disappears in the directory.\\n     *\\n     * The listener callback is attached to the `'change'` event fired by `fs.FSWatcher`, but it is not the same thing as the `'change'` value of`eventType`.\\n     *\\n     * If a `signal` is passed, aborting the corresponding AbortController will close\\n     * the returned `fs.FSWatcher`.\\n     * @since v0.5.10\\n     * @param listener\\n     */\\n    export function watch(\\n        filename: PathLike,\\n        options:\\n            | (WatchOptions & {\\n                  encoding: 'buffer';\\n              })\\n            | 'buffer',\\n        listener?: WatchListener<Buffer>\\n    ): FSWatcher;\\n    /**\\n     * Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.\\n     * @param filename A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\n     * @param options Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.\\n     * If `encoding` is not supplied, the default of `'utf8'` is used.\\n     * If `persistent` is not supplied, the default of `true` is used.\\n     * If `recursive` is not supplied, the default of `false` is used.\\n     */\\n    export function watch(filename: PathLike, options?: WatchOptions | BufferEncoding | null, listener?: WatchListener<string>): FSWatcher;\\n    /**\\n     * Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.\\n     * @param filename A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\n     * @param options Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.\\n     * If `encoding` is not supplied, the default of `'utf8'` is used.\\n     * If `persistent` is not supplied, the default of `true` is used.\\n     * If `recursive` is not supplied, the default of `false` is used.\\n     */\\n    export function watch(filename: PathLike, options: WatchOptions | string, listener?: WatchListener<string | Buffer>): FSWatcher;\\n    /**\\n     * Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.\\n     * @param filename A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\n     */\\n    export function watch(filename: PathLike, listener?: WatchListener<string>): FSWatcher;\\n    /**\\n     * Test whether or not the given path exists by checking with the file system.\\n     * Then call the `callback` argument with either true or false:\\n     *\\n     * ```js\\n     * import { exists } from 'fs';\\n     *\\n     * exists('/etc/passwd', (e) => {\\n     *   console.log(e ? 'it exists' : 'no passwd!');\\n     * });\\n     * ```\\n     *\\n     * **The parameters for this callback are not consistent with other Node.js**\\n     * **callbacks.** Normally, the first parameter to a Node.js callback is an `err`parameter, optionally followed by other parameters. The `fs.exists()` callback\\n     * has only one boolean parameter. This is one reason `fs.access()` is recommended\\n     * instead of `fs.exists()`.\\n     *\\n     * Using `fs.exists()` to check for the existence of a file before calling`fs.open()`, `fs.readFile()` or `fs.writeFile()` is not recommended. Doing\\n     * so introduces a race condition, since other processes may change the file's\\n     * state between the two calls. Instead, user code should open/read/write the\\n     * file directly and handle the error raised if the file does not exist.\\n     *\\n     * **write (NOT RECOMMENDED)**\\n     *\\n     * ```js\\n     * import { exists, open, close } from 'fs';\\n     *\\n     * exists('myfile', (e) => {\\n     *   if (e) {\\n     *     console.error('myfile already exists');\\n     *   } else {\\n     *     open('myfile', 'wx', (err, fd) => {\\n     *       if (err) throw err;\\n     *\\n     *       try {\\n     *         writeMyData(fd);\\n     *       } finally {\\n     *         close(fd, (err) => {\\n     *           if (err) throw err;\\n     *         });\\n     *       }\\n     *     });\\n     *   }\\n     * });\\n     * ```\\n     *\\n     * **write (RECOMMENDED)**\\n     *\\n     * ```js\\n     * import { open, close } from 'fs';\\n     * open('myfile', 'wx', (err, fd) => {\\n     *   if (err) {\\n     *     if (err.code === 'EEXIST') {\\n     *       console.error('myfile already exists');\\n     *       return;\\n     *     }\\n     *\\n     *     throw err;\\n     *   }\\n     *\\n     *   try {\\n     *     writeMyData(fd);\\n     *   } finally {\\n     *     close(fd, (err) => {\\n     *       if (err) throw err;\\n     *     });\\n     *   }\\n     * });\\n     * ```\\n     *\\n     * **read (NOT RECOMMENDED)**\\n     *\\n     * ```js\\n     * import { open, close, exists } from 'fs';\\n     *\\n     * exists('myfile', (e) => {\\n     *   if (e) {\\n     *     open('myfile', 'r', (err, fd) => {\\n     *       if (err) throw err;\\n     *\\n     *       try {\\n     *         readMyData(fd);\\n     *       } finally {\\n     *         close(fd, (err) => {\\n     *           if (err) throw err;\\n     *         });\\n     *       }\\n     *     });\\n     *   } else {\\n     *     console.error('myfile does not exist');\\n     *   }\\n     * });\\n     * ```\\n     *\\n     * **read (RECOMMENDED)**\\n     *\\n     * ```js\\n     * import { open, close } from 'fs';\\n     *\\n     * open('myfile', 'r', (err, fd) => {\\n     *   if (err) {\\n     *     if (err.code === 'ENOENT') {\\n     *       console.error('myfile does not exist');\\n     *       return;\\n     *     }\\n     *\\n     *     throw err;\\n     *   }\\n     *\\n     *   try {\\n     *     readMyData(fd);\\n     *   } finally {\\n     *     close(fd, (err) => {\\n     *       if (err) throw err;\\n     *     });\\n     *   }\\n     * });\\n     * ```\\n     *\\n     * The \\\"not recommended\\\" examples above check for existence and then use the\\n     * file; the \\\"recommended\\\" examples are better because they use the file directly\\n     * and handle the error, if any.\\n     *\\n     * In general, check for the existence of a file only if the file won\u2019t be\\n     * used directly, for example when its existence is a signal from another\\n     * process.\\n     * @since v0.0.2\\n     * @deprecated Since v1.0.0 - Use {@link stat} or {@link access} instead.\\n     */\\n    export function exists(path: PathLike, callback: (exists: boolean) => void): void;\\n    /** @deprecated */\\n    export namespace exists {\\n        /**\\n         * @param path A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\n         * URL support is _experimental_.\\n         */\\n        function __promisify__(path: PathLike): Promise<boolean>;\\n    }\\n    /**\\n     * Returns `true` if the path exists, `false` otherwise.\\n     *\\n     * For detailed information, see the documentation of the asynchronous version of\\n     * this API: {@link exists}.\\n     *\\n     * `fs.exists()` is deprecated, but `fs.existsSync()` is not. The `callback`parameter to `fs.exists()` accepts parameters that are inconsistent with other\\n     * Node.js callbacks. `fs.existsSync()` does not use a callback.\\n     *\\n     * ```js\\n     * import { existsSync } from 'fs';\\n     *\\n     * if (existsSync('/etc/passwd'))\\n     *   console.log('The path exists.');\\n     * ```\\n     * @since v0.1.21\\n     */\\n    export function existsSync(path: PathLike): boolean;\\n    export namespace constants {\\n        // File Access Constants\\n        /** Constant for fs.access(). File is visible to the calling process. */\\n        const F_OK: number;\\n        /** Constant for fs.access(). File can be read by the calling process. */\\n        const R_OK: number;\\n        /** Constant for fs.access(). File can be written by the calling process. */\\n        const W_OK: number;\\n        /** Constant for fs.access(). File can be executed by the calling process. */\\n        const X_OK: number;\\n        // File Copy Constants\\n        /** Constant for fs.copyFile. Flag indicating the destination file should not be overwritten if it already exists. */\\n        const COPYFILE_EXCL: number;\\n        /**\\n         * Constant for fs.copyFile. copy operation will attempt to create a copy-on-write reflink.\\n         * If the underlying platform does not support copy-on-write, then a fallback copy mechanism is used.\\n         */\\n        const COPYFILE_FICLONE: number;\\n        /**\\n         * Constant for fs.copyFile. Copy operation will attempt to create a copy-on-write reflink.\\n         * If the underlying platform does not support copy-on-write, then the operation will fail with an error.\\n         */\\n        const COPYFILE_FICLONE_FORCE: number;\\n        // File Open Constants\\n        /** Constant for fs.open(). Flag indicating to open a file for read-only access. */\\n        const O_RDONLY: number;\\n        /** Constant for fs.open(). Flag indicating to open a file for write-only access. */\\n        const O_WRONLY: number;\\n        /** Constant for fs.open(). Flag indicating to open a file for read-write access. */\\n        const O_RDWR: number;\\n        /** Constant for fs.open(). Flag indicating to create the file if it does not already exist. */\\n        const O_CREAT: number;\\n        /** Constant for fs.open(). Flag indicating that opening a file should fail if the O_CREAT flag is set and the file already exists. */\\n        const O_EXCL: number;\\n        /**\\n         * Constant for fs.open(). Flag indicating that if path identifies a terminal device,\\n         * opening the path shall not cause that terminal to become the controlling terminal for the process\\n         * (if the process does not already have one).\\n         */\\n        const O_NOCTTY: number;\\n        /** Constant for fs.open(). Flag indicating that if the file exists and is a regular file, and the file is opened successfully for write access, its length shall be truncated to zero. */\\n        const O_TRUNC: number;\\n        /** Constant for fs.open(). Flag indicating that data will be appended to the end of the file. */\\n        const O_APPEND: number;\\n        /** Constant for fs.open(). Flag indicating that the open should fail if the path is not a directory. */\\n        const O_DIRECTORY: number;\\n        /**\\n         * constant for fs.open().\\n         * Flag indicating reading accesses to the file system will no longer result in\\n         * an update to the atime information associated with the file.\\n         * This flag is available on Linux operating systems only.\\n         */\\n        const O_NOATIME: number;\\n        /** Constant for fs.open(). Flag indicating that the open should fail if the path is a symbolic link. */\\n        const O_NOFOLLOW: number;\\n        /** Constant for fs.open(). Flag indicating that the file is opened for synchronous I/O. */\\n        const O_SYNC: number;\\n        /** Constant for fs.open(). Flag indicating that the file is opened for synchronous I/O with write operations waiting for data integrity. */\\n        const O_DSYNC: number;\\n        /** Constant for fs.open(). Flag indicating to open the symbolic link itself rather than the resource it is pointing to. */\\n        const O_SYMLINK: number;\\n        /** Constant for fs.open(). When set, an attempt will be made to minimize caching effects of file I/O. */\\n        const O_DIRECT: number;\\n        /** Constant for fs.open(). Flag indicating to open the file in nonblocking mode when possible. */\\n        const O_NONBLOCK: number;\\n        // File Type Constants\\n        /** Constant for fs.Stats mode property for determining a file's type. Bit mask used to extract the file type code. */\\n        const S_IFMT: number;\\n        /** Constant for fs.Stats mode property for determining a file's type. File type constant for a regular file. */\\n        const S_IFREG: number;\\n        /** Constant for fs.Stats mode property for determining a file's type. File type constant for a directory. */\\n        const S_IFDIR: number;\\n        /** Constant for fs.Stats mode property for determining a file's type. File type constant for a character-oriented device file. */\\n        const S_IFCHR: number;\\n        /** Constant for fs.Stats mode property for determining a file's type. File type constant for a block-oriented device file. */\\n        const S_IFBLK: number;\\n        /** Constant for fs.Stats mode property for determining a file's type. File type constant for a FIFO/pipe. */\\n        const S_IFIFO: number;\\n        /** Constant for fs.Stats mode property for determining a file's type. File type constant for a symbolic link. */\\n        const S_IFLNK: number;\\n        /** Constant for fs.Stats mode property for determining a file's type. File type constant for a socket. */\\n        const S_IFSOCK: number;\\n        // File Mode Constants\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating readable, writable and executable by owner. */\\n        const S_IRWXU: number;\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating readable by owner. */\\n        const S_IRUSR: number;\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating writable by owner. */\\n        const S_IWUSR: number;\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating executable by owner. */\\n        const S_IXUSR: number;\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating readable, writable and executable by group. */\\n        const S_IRWXG: number;\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating readable by group. */\\n        const S_IRGRP: number;\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating writable by group. */\\n        const S_IWGRP: number;\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating executable by group. */\\n        const S_IXGRP: number;\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating readable, writable and executable by others. */\\n        const S_IRWXO: number;\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating readable by others. */\\n        const S_IROTH: number;\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating writable by others. */\\n        const S_IWOTH: number;\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating executable by others. */\\n        const S_IXOTH: number;\\n        /**\\n         * When set, a memory file mapping is used to access the file. This flag\\n         * is available on Windows operating systems only. On other operating systems,\\n         * this flag is ignored.\\n         */\\n        const UV_FS_O_FILEMAP: number;\\n    }\\n    /**\\n     * Tests a user's permissions for the file or directory specified by `path`.\\n     * The `mode` argument is an optional integer that specifies the accessibility\\n     * checks to be performed. `mode` should be either the value `fs.constants.F_OK`or a mask consisting of the bitwise OR of any of `fs.constants.R_OK`,`fs.constants.W_OK`, and `fs.constants.X_OK`\\n     * (e.g.`fs.constants.W_OK | fs.constants.R_OK`). Check `File access constants` for\\n     * possible values of `mode`.\\n     *\\n     * The final argument, `callback`, is a callback function that is invoked with\\n     * a possible error argument. If any of the accessibility checks fail, the error\\n     * argument will be an `Error` object. The following examples check if`package.json` exists, and if it is readable or writable.\\n     *\\n     * ```js\\n     * import { access, constants } from 'fs';\\n     *\\n     * const file = 'package.json';\\n     *\\n     * // Check if the file exists in the current directory.\\n     * access(file, constants.F_OK, (err) => {\\n     *   console.log(`${file} ${err ? 'does not exist' : 'exists'}`);\\n     * });\\n     *\\n     * // Check if the file is readable.\\n     * access(file, constants.R_OK, (err) => {\\n     *   console.log(`${file} ${err ? 'is not readable' : 'is readable'}`);\\n     * });\\n     *\\n     * // Check if the file is writable.\\n     * access(file, constants.W_OK, (err) => {\\n     *   console.log(`${file} ${err ? 'is not writable' : 'is writable'}`);\\n     * });\\n     *\\n     * // Check if the file is readable and writable.\\n     * access(file, constants.R_OK | constants.W_OK, (err) => {\\n     *   console.log(`${file} ${err ? 'is not' : 'is'} readable and writable`);\\n     * });\\n     * ```\\n     *\\n     * Do not use `fs.access()` to check for the accessibility of a file before calling`fs.open()`, `fs.readFile()` or `fs.writeFile()`. Doing\\n     * so introduces a race condition, since other processes may change the file's\\n     * state between the two calls. Instead, user code should open/read/write the\\n     * file directly and handle the error raised if the file is not accessible.\\n     *\\n     * **write (NOT RECOMMENDED)**\\n     *\\n     * ```js\\n     * import { access, open, close } from 'fs';\\n     *\\n     * access('myfile', (err) => {\\n     *   if (!err) {\\n     *     console.error('myfile already exists');\\n     *     return;\\n     *   }\\n     *\\n     *   open('myfile', 'wx', (err, fd) => {\\n     *     if (err) throw err;\\n     *\\n     *     try {\\n     *       writeMyData(fd);\\n     *     } finally {\\n     *       close(fd, (err) => {\\n     *         if (err) throw err;\\n     *       });\\n     *     }\\n     *   });\\n     * });\\n     * ```\\n     *\\n     * **write (RECOMMENDED)**\\n     *\\n     * ```js\\n     * import { open, close } from 'fs';\\n     *\\n     * open('myfile', 'wx', (err, fd) => {\\n     *   if (err) {\\n     *     if (err.code === 'EEXIST') {\\n     *       console.error('myfile already exists');\\n     *       return;\\n     *     }\\n     *\\n     *     throw err;\\n     *   }\\n     *\\n     *   try {\\n     *     writeMyData(fd);\\n     *   } finally {\\n     *     close(fd, (err) => {\\n     *       if (err) throw err;\\n     *     });\\n     *   }\\n     * });\\n     * ```\\n     *\\n     * **read (NOT RECOMMENDED)**\\n     *\\n     * ```js\\n     * import { access, open, close } from 'fs';\\n     * access('myfile', (err) => {\\n     *   if (err) {\\n     *     if (err.code === 'ENOENT') {\\n     *       console.error('myfile does not exist');\\n     *       return;\\n     *     }\\n     *\\n     *     throw err;\\n     *   }\\n     *\\n     *   open('myfile', 'r', (err, fd) => {\\n     *     if (err) throw err;\\n     *\\n     *     try {\\n     *       readMyData(fd);\\n     *     } finally {\\n     *       close(fd, (err) => {\\n     *         if (err) throw err;\\n     *       });\\n     *     }\\n     *   });\\n     * });\\n     * ```\\n     *\\n     * **read (RECOMMENDED)**\\n     *\\n     * ```js\\n     * import { open, close } from 'fs';\\n     *\\n     * open('myfile', 'r', (err, fd) => {\\n     *   if (err) {\\n     *     if (err.code === 'ENOENT') {\\n     *       console.error('myfile does not exist');\\n     *       return;\\n     *     }\\n     *\\n     *     throw err;\\n     *   }\\n     *\\n     *   try {\\n     *     readMyData(fd);\\n     *   } finally {\\n     *     close(fd, (err) => {\\n     *       if (err) throw err;\\n     *     });\\n     *   }\\n     * });\\n     * ```\\n     *\\n     * The \\\"not recommended\\\" examples above check for accessibility and then use the\\n     * file; the \\\"recommended\\\" examples are better because they use the file directly\\n     * and handle the error, if any.\\n     *\\n     * In general, check for the accessibility of a file only if the file will not be\\n     * used directly, for example when its accessibility is a signal from another\\n     * process.\\n     *\\n     * On Windows, access-control policies (ACLs) on a directory may limit access to\\n     * a file or directory. The `fs.access()` function, however, does not check the\\n     * ACL and therefore may report that a path is accessible even if the ACL restricts\\n     * the user from reading or writing to it.\\n     * @since v0.11.15\\n     * @param [mode=fs.constants.F_OK]\\n     */\\n    export function access(path: PathLike, mode: number | undefined, callback: NoParamCallback): void;\\n    /**\\n     * Asynchronously tests a user's permissions for the file specified by path.\\n     * @param path A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\n     */\\n    export function access(path: PathLike, callback: NoParamCallback): void;\\n    export namespace access {\\n        /**\\n         * Asynchronously tests a user's permissions for the file specified by path.\\n         * @param path A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\n         * URL support is _experimental_.\\n         */\\n        function __promisify__(path: PathLike, mode?: number): Promise<void>;\\n    }\\n    /**\\n     * Synchronously tests a user's permissions for the file or directory specified\\n     * by `path`. The `mode` argument is an optional integer that specifies the\\n     * accessibility checks to be performed. `mode` should be either the value`fs.constants.F_OK` or a mask consisting of the bitwise OR of any of`fs.constants.R_OK`, `fs.constants.W_OK`, and\\n     * `fs.constants.X_OK` (e.g.`fs.constants.W_OK | fs.constants.R_OK`). Check `File access constants` for\\n     * possible values of `mode`.\\n     *\\n     * If any of the accessibility checks fail, an `Error` will be thrown. Otherwise,\\n     * the method will return `undefined`.\\n     *\\n     * ```js\\n     * import { accessSync, constants } from 'fs';\\n     *\\n     * try {\\n     *   accessSync('etc/passwd', constants.R_OK | constants.W_OK);\\n     *   console.log('can read/write');\\n     * } catch (err) {\\n     *   console.error('no access!');\\n     * }\\n     * ```\\n     * @since v0.11.15\\n     * @param [mode=fs.constants.F_OK]\\n     */\\n    export function accessSync(path: PathLike, mode?: number): void;\\n    interface StreamOptions {\\n        flags?: string | undefined;\\n        encoding?: BufferEncoding | undefined;\\n        fd?: number | promises.FileHandle | undefined;\\n        mode?: number | undefined;\\n        autoClose?: boolean | undefined;\\n        /**\\n         * @default false\\n         */\\n        emitClose?: boolean | undefined;\\n        start?: number | undefined;\\n        highWaterMark?: number | undefined;\\n    }\\n    interface ReadStreamOptions extends StreamOptions {\\n        end?: number | undefined;\\n    }\\n    /**\\n     * Unlike the 16 kb default `highWaterMark` for a `stream.Readable`, the stream\\n     * returned by this method has a default `highWaterMark` of 64 kb.\\n     *\\n     * `options` can include `start` and `end` values to read a range of bytes from\\n     * the file instead of the entire file. Both `start` and `end` are inclusive and\\n     * start counting at 0, allowed values are in the\\n     * \\\\[0, [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER)\\\\] range. If `fd` is specified and `start` is\\n     * omitted or `undefined`, `fs.createReadStream()` reads sequentially from the\\n     * current file position. The `encoding` can be any one of those accepted by `Buffer`.\\n     *\\n     * If `fd` is specified, `ReadStream` will ignore the `path` argument and will use\\n     * the specified file descriptor. This means that no `'open'` event will be\\n     * emitted. `fd` should be blocking; non-blocking `fd`s should be passed to `net.Socket`.\\n     *\\n     * If `fd` points to a character device that only supports blocking reads\\n     * (such as keyboard or sound card), read operations do not finish until data is\\n     * available. This can prevent the process from exiting and the stream from\\n     * closing naturally.\\n     *\\n     * By default, the stream will emit a `'close'` event after it has been\\n     * destroyed.  Set the `emitClose` option to `false` to change this behavior.\\n     *\\n     * By providing the `fs` option, it is possible to override the corresponding `fs`implementations for `open`, `read`, and `close`. When providing the `fs` option,\\n     * an override for `read` is required. If no `fd` is provided, an override for`open` is also required. If `autoClose` is `true`, an override for `close` is\\n     * also required.\\n     *\\n     * ```js\\n     * import { createReadStream } from 'fs';\\n     *\\n     * // Create a stream from some character device.\\n     * const stream = createReadStream('/dev/input/event0');\\n     * setTimeout(() => {\\n     *   stream.close(); // This may not close the stream.\\n     *   // Artificially marking end-of-stream, as if the underlying resource had\\n     *   // indicated end-of-file by itself, allows the stream to close.\\n     *   // This does not cancel pending read operations, and if there is such an\\n     *   // operation, the process may still not be able to exit successfully\\n     *   // until it finishes.\\n     *   stream.push(null);\\n     *   stream.read(0);\\n     * }, 100);\\n     * ```\\n     *\\n     * If `autoClose` is false, then the file descriptor won't be closed, even if\\n     * there's an error. It is the application's responsibility to close it and make\\n     * sure there's no file descriptor leak. If `autoClose` is set to true (default\\n     * behavior), on `'error'` or `'end'` the file descriptor will be closed\\n     * automatically.\\n     *\\n     * `mode` sets the file mode (permission and sticky bits), but only if the\\n     * file was created.\\n     *\\n     * An example to read the last 10 bytes of a file which is 100 bytes long:\\n     *\\n     * ```js\\n     * import { createReadStream } from 'fs';\\n     *\\n     * createReadStream('sample.txt', { start: 90, end: 99 });\\n     * ```\\n     *\\n     * If `options` is a string, then it specifies the encoding.\\n     * @since v0.1.31\\n     */\\n    export function createReadStream(path: PathLike, options?: BufferEncoding | ReadStreamOptions): ReadStream;\\n    /**\\n     * `options` may also include a `start` option to allow writing data at some\\n     * position past the beginning of the file, allowed values are in the\\n     * \\\\[0, [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER)\\\\] range. Modifying a file rather than\\n     * replacing it may require the `flags` option to be set to `r+` rather than the\\n     * default `w`. The `encoding` can be any one of those accepted by `Buffer`.\\n     *\\n     * If `autoClose` is set to true (default behavior) on `'error'` or `'finish'`the file descriptor will be closed automatically. If `autoClose` is false,\\n     * then the file descriptor won't be closed, even if there's an error.\\n     * It is the application's responsibility to close it and make sure there's no\\n     * file descriptor leak.\\n     *\\n     * By default, the stream will emit a `'close'` event after it has been\\n     * destroyed.  Set the `emitClose` option to `false` to change this behavior.\\n     *\\n     * By providing the `fs` option it is possible to override the corresponding `fs`implementations for `open`, `write`, `writev` and `close`. Overriding `write()`without `writev()` can reduce\\n     * performance as some optimizations (`_writev()`)\\n     * will be disabled. When providing the `fs` option, overrides for at least one of`write` and `writev` are required. If no `fd` option is supplied, an override\\n     * for `open` is also required. If `autoClose` is `true`, an override for `close`is also required.\\n     *\\n     * Like `fs.ReadStream`, if `fd` is specified, `fs.WriteStream` will ignore the`path` argument and will use the specified file descriptor. This means that no`'open'` event will be\\n     * emitted. `fd` should be blocking; non-blocking `fd`s\\n     * should be passed to `net.Socket`.\\n     *\\n     * If `options` is a string, then it specifies the encoding.\\n     * @since v0.1.31\\n     */\\n    export function createWriteStream(path: PathLike, options?: BufferEncoding | StreamOptions): WriteStream;\\n    /**\\n     * Forces all currently queued I/O operations associated with the file to the\\n     * operating system's synchronized I/O completion state. Refer to the POSIX [`fdatasync(2)`](http://man7.org/linux/man-pages/man2/fdatasync.2.html) documentation for details. No arguments other\\n     * than a possible\\n     * exception are given to the completion callback.\\n     * @since v0.1.96\\n     */\\n    export function fdatasync(fd: number, callback: NoParamCallback): void;\\n    export namespace fdatasync {\\n        /**\\n         * Asynchronous fdatasync(2) - synchronize a file's in-core state with storage device.\\n         * @param fd A file descriptor.\\n         */\\n        function __promisify__(fd: number): Promise<void>;\\n    }\\n    /**\\n     * Forces all currently queued I/O operations associated with the file to the\\n     * operating system's synchronized I/O completion state. Refer to the POSIX [`fdatasync(2)`](http://man7.org/linux/man-pages/man2/fdatasync.2.html) documentation for details. Returns `undefined`.\\n     * @since v0.1.96\\n     */\\n    export function fdatasyncSync(fd: number): void;\\n    /**\\n     * Asynchronously copies `src` to `dest`. By default, `dest` is overwritten if it\\n     * already exists. No arguments other than a possible exception are given to the\\n     * callback function. Node.js makes no guarantees about the atomicity of the copy\\n     * operation. If an error occurs after the destination file has been opened for\\n     * writing, Node.js will attempt to remove the destination.\\n     *\\n     * `mode` is an optional integer that specifies the behavior\\n     * of the copy operation. It is possible to create a mask consisting of the bitwise\\n     * OR of two or more values (e.g.`fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE`).\\n     *\\n     * * `fs.constants.COPYFILE_EXCL`: The copy operation will fail if `dest` already\\n     * exists.\\n     * * `fs.constants.COPYFILE_FICLONE`: The copy operation will attempt to create a\\n     * copy-on-write reflink. If the platform does not support copy-on-write, then a\\n     * fallback copy mechanism is used.\\n     * * `fs.constants.COPYFILE_FICLONE_FORCE`: The copy operation will attempt to\\n     * create a copy-on-write reflink. If the platform does not support\\n     * copy-on-write, then the operation will fail.\\n     *\\n     * ```js\\n     * import { copyFile, constants } from 'fs';\\n     *\\n     * function callback(err) {\\n     *   if (err) throw err;\\n     *   console.log('source.txt was copied to destination.txt');\\n     * }\\n     *\\n     * // destination.txt will be created or overwritten by default.\\n     * copyFile('source.txt', 'destination.txt', callback);\\n     *\\n     * // By using COPYFILE_EXCL, the operation will fail if destination.txt exists.\\n     * copyFile('source.txt', 'destination.txt', constants.COPYFILE_EXCL, callback);\\n     * ```\\n     * @since v8.5.0\\n     * @param src source filename to copy\\n     * @param dest destination filename of the copy operation\\n     * @param [mode=0] modifiers for copy operation.\\n     */\\n    export function copyFile(src: PathLike, dest: PathLike, callback: NoParamCallback): void;\\n    export function copyFile(src: PathLike, dest: PathLike, mode: number, callback: NoParamCallback): void;\\n    export namespace copyFile {\\n        function __promisify__(src: PathLike, dst: PathLike, mode?: number): Promise<void>;\\n    }\\n    /**\\n     * Synchronously copies `src` to `dest`. By default, `dest` is overwritten if it\\n     * already exists. Returns `undefined`. Node.js makes no guarantees about the\\n     * atomicity of the copy operation. If an error occurs after the destination file\\n     * has been opened for writing, Node.js will attempt to remove the destination.\\n     *\\n     * `mode` is an optional integer that specifies the behavior\\n     * of the copy operation. It is possible to create a mask consisting of the bitwise\\n     * OR of two or more values (e.g.`fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE`).\\n     *\\n     * * `fs.constants.COPYFILE_EXCL`: The copy operation will fail if `dest` already\\n     * exists.\\n     * * `fs.constants.COPYFILE_FICLONE`: The copy operation will attempt to create a\\n     * copy-on-write reflink. If the platform does not support copy-on-write, then a\\n     * fallback copy mechanism is used.\\n     * * `fs.constants.COPYFILE_FICLONE_FORCE`: The copy operation will attempt to\\n     * create a copy-on-write reflink. If the platform does not support\\n     * copy-on-write, then the operation will fail.\\n     *\\n     * ```js\\n     * import { copyFileSync, constants } from 'fs';\\n     *\\n     * // destination.txt will be created or overwritten by default.\\n     * copyFileSync('source.txt', 'destination.txt');\\n     * console.log('source.txt was copied to destination.txt');\\n     *\\n     * // By using COPYFILE_EXCL, the operation will fail if destination.txt exists.\\n     * copyFileSync('source.txt', 'destination.txt', constants.COPYFILE_EXCL);\\n     * ```\\n     * @since v8.5.0\\n     * @param src source filename to copy\\n     * @param dest destination filename of the copy operation\\n     * @param [mode=0] modifiers for copy operation.\\n     */\\n    export function copyFileSync(src: PathLike, dest: PathLike, mode?: number): void;\\n    /**\\n     * Write an array of `ArrayBufferView`s to the file specified by `fd` using`writev()`.\\n     *\\n     * `position` is the offset from the beginning of the file where this data\\n     * should be written. If `typeof position !== 'number'`, the data will be written\\n     * at the current position.\\n     *\\n     * The callback will be given three arguments: `err`, `bytesWritten`, and`buffers`. `bytesWritten` is how many bytes were written from `buffers`.\\n     *\\n     * If this method is `util.promisify()` ed, it returns a promise for an`Object` with `bytesWritten` and `buffers` properties.\\n     *\\n     * It is unsafe to use `fs.writev()` multiple times on the same file without\\n     * waiting for the callback. For this scenario, use {@link createWriteStream}.\\n     *\\n     * On Linux, positional writes don't work when the file is opened in append mode.\\n     * The kernel ignores the position argument and always appends the data to\\n     * the end of the file.\\n     * @since v12.9.0\\n     */\\n    export function writev(fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, cb: (err: NodeJS.ErrnoException | null, bytesWritten: number, buffers: NodeJS.ArrayBufferView[]) => void): void;\\n    export function writev(\\n        fd: number,\\n        buffers: ReadonlyArray<NodeJS.ArrayBufferView>,\\n        position: number,\\n        cb: (err: NodeJS.ErrnoException | null, bytesWritten: number, buffers: NodeJS.ArrayBufferView[]) => void\\n    ): void;\\n    export interface WriteVResult {\\n        bytesWritten: number;\\n        buffers: NodeJS.ArrayBufferView[];\\n    }\\n    export namespace writev {\\n        function __promisify__(fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number): Promise<WriteVResult>;\\n    }\\n    /**\\n     * For detailed information, see the documentation of the asynchronous version of\\n     * this API: {@link writev}.\\n     * @since v12.9.0\\n     * @return The number of bytes written.\\n     */\\n    export function writevSync(fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number): number;\\n    /**\\n     * Read from a file specified by `fd` and write to an array of `ArrayBufferView`s\\n     * using `readv()`.\\n     *\\n     * `position` is the offset from the beginning of the file from where data\\n     * should be read. If `typeof position !== 'number'`, the data will be read\\n     * from the current position.\\n     *\\n     * The callback will be given three arguments: `err`, `bytesRead`, and`buffers`. `bytesRead` is how many bytes were read from the file.\\n     *\\n     * If this method is invoked as its `util.promisify()` ed version, it returns\\n     * a promise for an `Object` with `bytesRead` and `buffers` properties.\\n     * @since v13.13.0, v12.17.0\\n     */\\n    export function readv(fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, cb: (err: NodeJS.ErrnoException | null, bytesRead: number, buffers: NodeJS.ArrayBufferView[]) => void): void;\\n    export function readv(\\n        fd: number,\\n        buffers: ReadonlyArray<NodeJS.ArrayBufferView>,\\n        position: number,\\n        cb: (err: NodeJS.ErrnoException | null, bytesRead: number, buffers: NodeJS.ArrayBufferView[]) => void\\n    ): void;\\n    export interface ReadVResult {\\n        bytesRead: number;\\n        buffers: NodeJS.ArrayBufferView[];\\n    }\\n    export namespace readv {\\n        function __promisify__(fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number): Promise<ReadVResult>;\\n    }\\n    /**\\n     * For detailed information, see the documentation of the asynchronous version of\\n     * this API: {@link readv}.\\n     * @since v13.13.0, v12.17.0\\n     * @return The number of bytes read.\\n     */\\n    export function readvSync(fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number): number;\\n    export interface OpenDirOptions {\\n        encoding?: BufferEncoding | undefined;\\n        /**\\n         * Number of directory entries that are buffered\\n         * internally when reading from the directory. Higher values lead to better\\n         * performance but higher memory usage.\\n         * @default 32\\n         */\\n        bufferSize?: number | undefined;\\n    }\\n    /**\\n     * Synchronously open a directory. See [`opendir(3)`](http://man7.org/linux/man-pages/man3/opendir.3.html).\\n     *\\n     * Creates an `fs.Dir`, which contains all further functions for reading from\\n     * and cleaning up the directory.\\n     *\\n     * The `encoding` option sets the encoding for the `path` while opening the\\n     * directory and subsequent read operations.\\n     * @since v12.12.0\\n     */\\n    export function opendirSync(path: PathLike, options?: OpenDirOptions): Dir;\\n    /**\\n     * Asynchronously open a directory. See the POSIX [`opendir(3)`](http://man7.org/linux/man-pages/man3/opendir.3.html) documentation for\\n     * more details.\\n     *\\n     * Creates an `fs.Dir`, which contains all further functions for reading from\\n     * and cleaning up the directory.\\n     *\\n     * The `encoding` option sets the encoding for the `path` while opening the\\n     * directory and subsequent read operations.\\n     * @since v12.12.0\\n     */\\n    export function opendir(path: PathLike, cb: (err: NodeJS.ErrnoException | null, dir: Dir) => void): void;\\n    export function opendir(path: PathLike, options: OpenDirOptions, cb: (err: NodeJS.ErrnoException | null, dir: Dir) => void): void;\\n    export namespace opendir {\\n        function __promisify__(path: PathLike, options?: OpenDirOptions): Promise<Dir>;\\n    }\\n    export interface BigIntStats extends StatsBase<bigint> {\\n        atimeNs: bigint;\\n        mtimeNs: bigint;\\n        ctimeNs: bigint;\\n        birthtimeNs: bigint;\\n    }\\n    export interface BigIntOptions {\\n        bigint: true;\\n    }\\n    export interface StatOptions {\\n        bigint?: boolean | undefined;\\n    }\\n    export interface StatSyncOptions extends StatOptions {\\n        throwIfNoEntry?: boolean | undefined;\\n    }\\n    interface CopyOptionsBase {\\n        /**\\n         * Dereference symlinks\\n         * @default false\\n         */\\n        dereference?: boolean;\\n        /**\\n         * When `force` is `false`, and the destination\\n         * exists, throw an error.\\n         * @default false\\n         */\\n        errorOnExist?: boolean;\\n        /**\\n         * Overwrite existing file or directory. _The copy\\n         * operation will ignore errors if you set this to false and the destination\\n         * exists. Use the `errorOnExist` option to change this behavior.\\n         * @default true\\n         */\\n        force?: boolean;\\n        /**\\n         * When `true` timestamps from `src` will\\n         * be preserved.\\n         * @default false\\n         */\\n        preserveTimestamps?: boolean;\\n        /**\\n         * Copy directories recursively.\\n         * @default false\\n         */\\n        recursive?: boolean;\\n        /**\\n         * When true, path resolution for symlinks will be skipped\\n         * @default false\\n         */\\n        verbatimSymlinks?: boolean;\\n    }\\n    export interface CopyOptions extends CopyOptionsBase {\\n        /**\\n         * Function to filter copied files/directories. Return\\n         * `true` to copy the item, `false` to ignore it.\\n         */\\n        filter?(source: string, destination: string): boolean | Promise<boolean>;\\n    }\\n    export interface CopySyncOptions extends CopyOptionsBase {\\n        /**\\n         * Function to filter copied files/directories. Return\\n         * `true` to copy the item, `false` to ignore it.\\n         */\\n        filter?(source: string, destination: string): boolean;\\n    }\\n    /**\\n     * Asynchronously copies the entire directory structure from `src` to `dest`,\\n     * including subdirectories and files.\\n     *\\n     * When copying a directory to another directory, globs are not supported and\\n     * behavior is similar to `cp dir1/ dir2/`.\\n     * @since v16.7.0\\n     * @experimental\\n     * @param src source path to copy.\\n     * @param dest destination path to copy to.\\n     */\\n    export function cp(source: string | URL, destination: string | URL, callback: (err: NodeJS.ErrnoException | null) => void): void;\\n    export function cp(source: string | URL, destination: string | URL, opts: CopyOptions, callback: (err: NodeJS.ErrnoException | null) => void): void;\\n    /**\\n     * Synchronously copies the entire directory structure from `src` to `dest`,\\n     * including subdirectories and files.\\n     *\\n     * When copying a directory to another directory, globs are not supported and\\n     * behavior is similar to `cp dir1/ dir2/`.\\n     * @since v16.7.0\\n     * @experimental\\n     * @param src source path to copy.\\n     * @param dest destination path to copy to.\\n     */\\n    export function cpSync(source: string | URL, destination: string | URL, opts?: CopySyncOptions): void;\\n}\\ndeclare module 'node:fs' {\\n    export * from 'fs';\\n}\\n\",\"file:///node_modules/@types/node/globals.d.ts\":\"// Declare \\\"static\\\" methods in Error\\ninterface ErrorConstructor {\\n    /** Create .stack property on a target object */\\n    captureStackTrace(targetObject: object, constructorOpt?: Function): void;\\n\\n    /**\\n     * Optional override for formatting stack traces\\n     *\\n     * @see https://v8.dev/docs/stack-trace-api#customizing-stack-traces\\n     */\\n    prepareStackTrace?: ((err: Error, stackTraces: NodeJS.CallSite[]) => any) | undefined;\\n\\n    stackTraceLimit: number;\\n}\\n\\n/*-----------------------------------------------*\\n *                                               *\\n *                   GLOBAL                      *\\n *                                               *\\n ------------------------------------------------*/\\n\\n// For backwards compability\\ninterface NodeRequire extends NodeJS.Require { }\\ninterface RequireResolve extends NodeJS.RequireResolve { }\\ninterface NodeModule extends NodeJS.Module { }\\n\\ndeclare var process: NodeJS.Process;\\ndeclare var console: Console;\\n\\ndeclare var __filename: string;\\ndeclare var __dirname: string;\\n\\ndeclare var require: NodeRequire;\\ndeclare var module: NodeModule;\\n\\n// Same as module.exports\\ndeclare var exports: any;\\n\\n/**\\n * Only available if `--expose-gc` is passed to the process.\\n */\\ndeclare var gc: undefined | (() => void);\\n\\n//#region borrowed\\n// from https://github.com/microsoft/TypeScript/blob/38da7c600c83e7b31193a62495239a0fe478cb67/lib/lib.webworker.d.ts#L633 until moved to separate lib\\n/** A controller object that allows you to abort one or more DOM requests as and when desired. */\\ninterface AbortController {\\n    /**\\n     * Returns the AbortSignal object associated with this object.\\n     */\\n\\n    readonly signal: AbortSignal;\\n    /**\\n     * Invoking this method will set this object's AbortSignal's aborted flag and signal to any observers that the associated activity is to be aborted.\\n     */\\n    abort(reason?: any): void;\\n}\\n\\n/** A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object. */\\ninterface AbortSignal extends EventTarget {\\n    /**\\n     * Returns true if this AbortSignal's AbortController has signaled to abort, and false otherwise.\\n     */\\n    readonly aborted: boolean;\\n    readonly reason: any;\\n    onabort: null | ((this: AbortSignal, event: Event) => any);\\n}\\n\\ndeclare var AbortController: typeof globalThis extends {onmessage: any; AbortController: infer T}\\n    ? T\\n    : {\\n        prototype: AbortController;\\n        new(): AbortController;\\n    };\\n\\ndeclare var AbortSignal: typeof globalThis extends {onmessage: any; AbortSignal: infer T}\\n    ? T\\n    : {\\n        prototype: AbortSignal;\\n        new(): AbortSignal;\\n        abort(reason?: any): AbortSignal;\\n        timeout(milliseconds: number): AbortSignal;\\n    };\\n//#endregion borrowed\\n\\n//#region ArrayLike.at()\\ninterface RelativeIndexable<T> {\\n    /**\\n     * Takes an integer value and returns the item at that index,\\n     * allowing for positive and negative integers.\\n     * Negative integers count back from the last item in the array.\\n     */\\n    at(index: number): T | undefined;\\n}\\ninterface String extends RelativeIndexable<string> {}\\ninterface Array<T> extends RelativeIndexable<T> {}\\ninterface ReadonlyArray<T> extends RelativeIndexable<T> {}\\ninterface Int8Array extends RelativeIndexable<number> {}\\ninterface Uint8Array extends RelativeIndexable<number> {}\\ninterface Uint8ClampedArray extends RelativeIndexable<number> {}\\ninterface Int16Array extends RelativeIndexable<number> {}\\ninterface Uint16Array extends RelativeIndexable<number> {}\\ninterface Int32Array extends RelativeIndexable<number> {}\\ninterface Uint32Array extends RelativeIndexable<number> {}\\ninterface Float32Array extends RelativeIndexable<number> {}\\ninterface Float64Array extends RelativeIndexable<number> {}\\ninterface BigInt64Array extends RelativeIndexable<bigint> {}\\ninterface BigUint64Array extends RelativeIndexable<bigint> {}\\n//#endregion ArrayLike.at() end\\n\\n/**\\n * @since v17.0.0\\n *\\n * Creates a deep clone of an object.\\n */\\ndeclare function structuredClone<T>(\\n    value: T,\\n    transfer?: { transfer: ReadonlyArray<import('worker_threads').TransferListItem> },\\n): T;\\n\\n/*----------------------------------------------*\\n*                                               *\\n*               GLOBAL INTERFACES               *\\n*                                               *\\n*-----------------------------------------------*/\\ndeclare namespace NodeJS {\\n    interface CallSite {\\n        /**\\n         * Value of \\\"this\\\"\\n         */\\n        getThis(): unknown;\\n\\n        /**\\n         * Type of \\\"this\\\" as a string.\\n         * This is the name of the function stored in the constructor field of\\n         * \\\"this\\\", if available.  Otherwise the object's [[Class]] internal\\n         * property.\\n         */\\n        getTypeName(): string | null;\\n\\n        /**\\n         * Current function\\n         */\\n        getFunction(): Function | undefined;\\n\\n        /**\\n         * Name of the current function, typically its name property.\\n         * If a name property is not available an attempt will be made to try\\n         * to infer a name from the function's context.\\n         */\\n        getFunctionName(): string | null;\\n\\n        /**\\n         * Name of the property [of \\\"this\\\" or one of its prototypes] that holds\\n         * the current function\\n         */\\n        getMethodName(): string | null;\\n\\n        /**\\n         * Name of the script [if this function was defined in a script]\\n         */\\n        getFileName(): string | undefined;\\n\\n        /**\\n         * Current line number [if this function was defined in a script]\\n         */\\n        getLineNumber(): number | null;\\n\\n        /**\\n         * Current column number [if this function was defined in a script]\\n         */\\n        getColumnNumber(): number | null;\\n\\n        /**\\n         * A call site object representing the location where eval was called\\n         * [if this function was created using a call to eval]\\n         */\\n        getEvalOrigin(): string | undefined;\\n\\n        /**\\n         * Is this a toplevel invocation, that is, is \\\"this\\\" the global object?\\n         */\\n        isToplevel(): boolean;\\n\\n        /**\\n         * Does this call take place in code defined by a call to eval?\\n         */\\n        isEval(): boolean;\\n\\n        /**\\n         * Is this call in native V8 code?\\n         */\\n        isNative(): boolean;\\n\\n        /**\\n         * Is this a constructor call?\\n         */\\n        isConstructor(): boolean;\\n    }\\n\\n    interface ErrnoException extends Error {\\n        errno?: number | undefined;\\n        code?: string | undefined;\\n        path?: string | undefined;\\n        syscall?: string | undefined;\\n    }\\n\\n    interface ReadableStream extends EventEmitter {\\n        readable: boolean;\\n        read(size?: number): string | Buffer;\\n        setEncoding(encoding: BufferEncoding): this;\\n        pause(): this;\\n        resume(): this;\\n        isPaused(): boolean;\\n        pipe<T extends WritableStream>(destination: T, options?: { end?: boolean | undefined; }): T;\\n        unpipe(destination?: WritableStream): this;\\n        unshift(chunk: string | Uint8Array, encoding?: BufferEncoding): void;\\n        wrap(oldStream: ReadableStream): this;\\n        [Symbol.asyncIterator](): AsyncIterableIterator<string | Buffer>;\\n    }\\n\\n    interface WritableStream extends EventEmitter {\\n        writable: boolean;\\n        write(buffer: Uint8Array | string, cb?: (err?: Error | null) => void): boolean;\\n        write(str: string, encoding?: BufferEncoding, cb?: (err?: Error | null) => void): boolean;\\n        end(cb?: () => void): this;\\n        end(data: string | Uint8Array, cb?: () => void): this;\\n        end(str: string, encoding?: BufferEncoding, cb?: () => void): this;\\n    }\\n\\n    interface ReadWriteStream extends ReadableStream, WritableStream { }\\n\\n    interface RefCounted {\\n        ref(): this;\\n        unref(): this;\\n    }\\n\\n    type TypedArray =\\n        | Uint8Array\\n        | Uint8ClampedArray\\n        | Uint16Array\\n        | Uint32Array\\n        | Int8Array\\n        | Int16Array\\n        | Int32Array\\n        | BigUint64Array\\n        | BigInt64Array\\n        | Float32Array\\n        | Float64Array;\\n    type ArrayBufferView = TypedArray | DataView;\\n\\n    interface Require {\\n        (id: string): any;\\n        resolve: RequireResolve;\\n        cache: Dict<NodeModule>;\\n        /**\\n         * @deprecated\\n         */\\n        extensions: RequireExtensions;\\n        main: Module | undefined;\\n    }\\n\\n    interface RequireResolve {\\n        (id: string, options?: { paths?: string[] | undefined; }): string;\\n        paths(request: string): string[] | null;\\n    }\\n\\n    interface RequireExtensions extends Dict<(m: Module, filename: string) => any> {\\n        '.js': (m: Module, filename: string) => any;\\n        '.json': (m: Module, filename: string) => any;\\n        '.node': (m: Module, filename: string) => any;\\n    }\\n    interface Module {\\n        /**\\n         * `true` if the module is running during the Node.js preload\\n         */\\n        isPreloading: boolean;\\n        exports: any;\\n        require: Require;\\n        id: string;\\n        filename: string;\\n        loaded: boolean;\\n        /** @deprecated since v14.6.0 Please use `require.main` and `module.children` instead. */\\n        parent: Module | null | undefined;\\n        children: Module[];\\n        /**\\n         * @since v11.14.0\\n         *\\n         * The directory name of the module. This is usually the same as the path.dirname() of the module.id.\\n         */\\n        path: string;\\n        paths: string[];\\n    }\\n\\n    interface Dict<T> {\\n        [key: string]: T | undefined;\\n    }\\n\\n    interface ReadOnlyDict<T> {\\n        readonly [key: string]: T | undefined;\\n    }\\n}\\n\",\"file:///node_modules/@types/node/globals.global.d.ts\":\"declare var global: typeof globalThis;\\n\",\"file:///node_modules/@types/node/http.d.ts\":\"/**\\n * To use the HTTP server and client one must `require('http')`.\\n *\\n * The HTTP interfaces in Node.js are designed to support many features\\n * of the protocol which have been traditionally difficult to use.\\n * In particular, large, possibly chunk-encoded, messages. The interface is\\n * careful to never buffer entire requests or responses, so the\\n * user is able to stream data.\\n *\\n * HTTP message headers are represented by an object like this:\\n *\\n * ```js\\n * { 'content-length': '123',\\n *   'content-type': 'text/plain',\\n *   'connection': 'keep-alive',\\n *   'host': 'example.com',\\n *   'accept': '*' }\\n * ```\\n *\\n * Keys are lowercased. Values are not modified.\\n *\\n * In order to support the full spectrum of possible HTTP applications, the Node.js\\n * HTTP API is very low-level. It deals with stream handling and message\\n * parsing only. It parses a message into headers and body but it does not\\n * parse the actual headers or the body.\\n *\\n * See `message.headers` for details on how duplicate headers are handled.\\n *\\n * The raw headers as they were received are retained in the `rawHeaders`property, which is an array of `[key, value, key2, value2, ...]`. For\\n * example, the previous message header object might have a `rawHeaders`list like the following:\\n *\\n * ```js\\n * [ 'ConTent-Length', '123456',\\n *   'content-LENGTH', '123',\\n *   'content-type', 'text/plain',\\n *   'CONNECTION', 'keep-alive',\\n *   'Host', 'example.com',\\n *   'accepT', '*' ]\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/http.js)\\n */\\ndeclare module 'http' {\\n    import * as stream from 'node:stream';\\n    import { URL } from 'node:url';\\n    import { EventEmitter } from 'node:events';\\n    import { LookupOptions } from 'node:dns';\\n    import { TcpSocketConnectOpts, Socket, Server as NetServer, LookupFunction } from 'node:net';\\n    // incoming headers will never contain number\\n    interface IncomingHttpHeaders extends NodeJS.Dict<string | string[]> {\\n        accept?: string | undefined;\\n        'accept-language'?: string | undefined;\\n        'accept-patch'?: string | undefined;\\n        'accept-ranges'?: string | undefined;\\n        'access-control-allow-credentials'?: string | undefined;\\n        'access-control-allow-headers'?: string | undefined;\\n        'access-control-allow-methods'?: string | undefined;\\n        'access-control-allow-origin'?: string | undefined;\\n        'access-control-expose-headers'?: string | undefined;\\n        'access-control-max-age'?: string | undefined;\\n        'access-control-request-headers'?: string | undefined;\\n        'access-control-request-method'?: string | undefined;\\n        age?: string | undefined;\\n        allow?: string | undefined;\\n        'alt-svc'?: string | undefined;\\n        authorization?: string | undefined;\\n        'cache-control'?: string | undefined;\\n        connection?: string | undefined;\\n        'content-disposition'?: string | undefined;\\n        'content-encoding'?: string | undefined;\\n        'content-language'?: string | undefined;\\n        'content-length'?: string | undefined;\\n        'content-location'?: string | undefined;\\n        'content-range'?: string | undefined;\\n        'content-type'?: string | undefined;\\n        cookie?: string | undefined;\\n        date?: string | undefined;\\n        etag?: string | undefined;\\n        expect?: string | undefined;\\n        expires?: string | undefined;\\n        forwarded?: string | undefined;\\n        from?: string | undefined;\\n        host?: string | undefined;\\n        'if-match'?: string | undefined;\\n        'if-modified-since'?: string | undefined;\\n        'if-none-match'?: string | undefined;\\n        'if-unmodified-since'?: string | undefined;\\n        'last-modified'?: string | undefined;\\n        location?: string | undefined;\\n        origin?: string | undefined;\\n        pragma?: string | undefined;\\n        'proxy-authenticate'?: string | undefined;\\n        'proxy-authorization'?: string | undefined;\\n        'public-key-pins'?: string | undefined;\\n        range?: string | undefined;\\n        referer?: string | undefined;\\n        'retry-after'?: string | undefined;\\n        'sec-websocket-accept'?: string | undefined;\\n        'sec-websocket-extensions'?: string | undefined;\\n        'sec-websocket-key'?: string | undefined;\\n        'sec-websocket-protocol'?: string | undefined;\\n        'sec-websocket-version'?: string | undefined;\\n        'set-cookie'?: string[] | undefined;\\n        'strict-transport-security'?: string | undefined;\\n        tk?: string | undefined;\\n        trailer?: string | undefined;\\n        'transfer-encoding'?: string | undefined;\\n        upgrade?: string | undefined;\\n        'user-agent'?: string | undefined;\\n        vary?: string | undefined;\\n        via?: string | undefined;\\n        warning?: string | undefined;\\n        'www-authenticate'?: string | undefined;\\n    }\\n    // outgoing headers allows numbers (as they are converted internally to strings)\\n    type OutgoingHttpHeader = number | string | string[];\\n    interface OutgoingHttpHeaders extends NodeJS.Dict<OutgoingHttpHeader> {}\\n    interface ClientRequestArgs {\\n        _defaultAgent?: Agent | undefined;\\n        agent?: Agent | boolean | undefined;\\n        auth?: string | null | undefined;\\n        // https://github.com/nodejs/node/blob/master/lib/_http_client.js#L278\\n        createConnection?:\\n            | ((options: ClientRequestArgs, oncreate: (err: Error, socket: Socket) => void) => Socket)\\n            | undefined;\\n        defaultPort?: number | string | undefined;\\n        family?: number | undefined;\\n        headers?: OutgoingHttpHeaders | undefined;\\n        hints?: LookupOptions['hints'];\\n        host?: string | null | undefined;\\n        hostname?: string | null | undefined;\\n        insecureHTTPParser?: boolean | undefined;\\n        localAddress?: string | undefined;\\n        localPort?: number | undefined;\\n        lookup?: LookupFunction | undefined;\\n        /**\\n         * @default 16384\\n         */\\n        maxHeaderSize?: number | undefined;\\n        method?: string | undefined;\\n        path?: string | null | undefined;\\n        port?: number | string | null | undefined;\\n        protocol?: string | null | undefined;\\n        setHost?: boolean | undefined;\\n        signal?: AbortSignal | undefined;\\n        socketPath?: string | undefined;\\n        timeout?: number | undefined;\\n        uniqueHeaders?: Array<string | string[]> | undefined;\\n        joinDuplicateHeaders?: boolean;\\n    }\\n    interface ServerOptions<\\n        Request extends typeof IncomingMessage = typeof IncomingMessage,\\n        Response extends typeof ServerResponse = typeof ServerResponse,\\n    > {\\n        /**\\n         * Specifies the `IncomingMessage` class to be used. Useful for extending the original `IncomingMessage`.\\n         */\\n        IncomingMessage?: Request | undefined;\\n        /**\\n         * Specifies the `ServerResponse` class to be used. Useful for extending the original `ServerResponse`.\\n         */\\n        ServerResponse?: Response | undefined;\\n        /**\\n         * Sets the timeout value in milliseconds for receiving the entire request from the client.\\n         * @see Server.requestTimeout for more information.\\n         * @default 300000\\n         * @since v18.0.0\\n         */\\n        requestTimeout?: number | undefined;\\n        /**\\n         * It joins the field line values of multiple headers in a request with `, ` instead of discarding the duplicates.\\n         * @default false\\n         * @since v18.14.0\\n         */\\n        joinDuplicateHeaders?: boolean;\\n        /**\\n         * The number of milliseconds of inactivity a server needs to wait for additional incoming data,\\n         * after it has finished writing the last response, before a socket will be destroyed.\\n         * @see Server.keepAliveTimeout for more information.\\n         * @default 5000\\n         * @since v18.0.0\\n         */\\n        keepAliveTimeout?: number | undefined;\\n        /**\\n         * Sets the interval value in milliseconds to check for request and headers timeout in incomplete requests.\\n         * @default 30000\\n         */\\n        connectionsCheckingInterval?: number | undefined;\\n        /**\\n         * Use an insecure HTTP parser that accepts invalid HTTP headers when `true`.\\n         * Using the insecure parser should be avoided.\\n         * See --insecure-http-parser for more information.\\n         * @default false\\n         */\\n        insecureHTTPParser?: boolean | undefined;\\n        /**\\n         * Optionally overrides the value of\\n         * `--max-http-header-size` for requests received by this server, i.e.\\n         * the maximum length of request headers in bytes.\\n         * @default 16384\\n         * @since v13.3.0\\n         */\\n        maxHeaderSize?: number | undefined;\\n        /**\\n         * If set to `true`, it disables the use of Nagle's algorithm immediately after a new incoming connection is received.\\n         * @default true\\n         * @since v16.5.0\\n         */\\n        noDelay?: boolean | undefined;\\n        /**\\n         * If set to `true`, it enables keep-alive functionality on the socket immediately after a new incoming connection is received,\\n         * similarly on what is done in `socket.setKeepAlive([enable][, initialDelay])`.\\n         * @default false\\n         * @since v16.5.0\\n         */\\n        keepAlive?: boolean | undefined;\\n        /**\\n         * If set to a positive number, it sets the initial delay before the first keepalive probe is sent on an idle socket.\\n         * @default 0\\n         * @since v16.5.0\\n         */\\n        keepAliveInitialDelay?: number | undefined;\\n        /**\\n         * A list of response headers that should be sent only once.\\n         * If the header's value is an array, the items will be joined using `; `.\\n         */\\n        uniqueHeaders?: Array<string | string[]> | undefined;\\n    }\\n    type RequestListener<\\n        Request extends typeof IncomingMessage = typeof IncomingMessage,\\n        Response extends typeof ServerResponse = typeof ServerResponse,\\n    > = (req: InstanceType<Request>, res: InstanceType<Response> & { req: InstanceType<Request> }) => void;\\n    /**\\n     * @since v0.1.17\\n     */\\n    class Server<\\n        Request extends typeof IncomingMessage = typeof IncomingMessage,\\n        Response extends typeof ServerResponse = typeof ServerResponse,\\n    > extends NetServer {\\n        constructor(requestListener?: RequestListener<Request, Response>);\\n        constructor(options: ServerOptions<Request, Response>, requestListener?: RequestListener<Request, Response>);\\n        /**\\n         * Sets the timeout value for sockets, and emits a `'timeout'` event on\\n         * the Server object, passing the socket as an argument, if a timeout\\n         * occurs.\\n         *\\n         * If there is a `'timeout'` event listener on the Server object, then it\\n         * will be called with the timed-out socket as an argument.\\n         *\\n         * By default, the Server does not timeout sockets. However, if a callback\\n         * is assigned to the Server's `'timeout'` event, timeouts must be handled\\n         * explicitly.\\n         * @since v0.9.12\\n         * @param [msecs=0 (no timeout)]\\n         */\\n        setTimeout(msecs?: number, callback?: () => void): this;\\n        setTimeout(callback: () => void): this;\\n        /**\\n         * Limits maximum incoming headers count. If set to 0, no limit will be applied.\\n         * @since v0.7.0\\n         */\\n        maxHeadersCount: number | null;\\n        /**\\n         * The maximum number of requests socket can handle\\n         * before closing keep alive connection.\\n         *\\n         * A value of `0` will disable the limit.\\n         *\\n         * When the limit is reached it will set the `Connection` header value to `close`,\\n         * but will not actually close the connection, subsequent requests sent\\n         * after the limit is reached will get `503 Service Unavailable` as a response.\\n         * @since v16.10.0\\n         */\\n        maxRequestsPerSocket: number | null;\\n        /**\\n         * The number of milliseconds of inactivity before a socket is presumed\\n         * to have timed out.\\n         *\\n         * A value of `0` will disable the timeout behavior on incoming connections.\\n         *\\n         * The socket timeout logic is set up on connection, so changing this\\n         * value only affects new connections to the server, not any existing connections.\\n         * @since v0.9.12\\n         */\\n        timeout: number;\\n        /**\\n         * Limit the amount of time the parser will wait to receive the complete HTTP\\n         * headers.\\n         *\\n         * If the timeout expires, the server responds with status 408 without\\n         * forwarding the request to the request listener and then closes the connection.\\n         *\\n         * It must be set to a non-zero value (e.g. 120 seconds) to protect against\\n         * potential Denial-of-Service attacks in case the server is deployed without a\\n         * reverse proxy in front.\\n         * @since v11.3.0, v10.14.0\\n         */\\n        headersTimeout: number;\\n        /**\\n         * The number of milliseconds of inactivity a server needs to wait for additional\\n         * incoming data, after it has finished writing the last response, before a socket\\n         * will be destroyed. If the server receives new data before the keep-alive\\n         * timeout has fired, it will reset the regular inactivity timeout, i.e.,`server.timeout`.\\n         *\\n         * A value of `0` will disable the keep-alive timeout behavior on incoming\\n         * connections.\\n         * A value of `0` makes the http server behave similarly to Node.js versions prior\\n         * to 8.0.0, which did not have a keep-alive timeout.\\n         *\\n         * The socket timeout logic is set up on connection, so changing this value only\\n         * affects new connections to the server, not any existing connections.\\n         * @since v8.0.0\\n         */\\n        keepAliveTimeout: number;\\n        /**\\n         * Sets the timeout value in milliseconds for receiving the entire request from\\n         * the client.\\n         *\\n         * If the timeout expires, the server responds with status 408 without\\n         * forwarding the request to the request listener and then closes the connection.\\n         *\\n         * It must be set to a non-zero value (e.g. 120 seconds) to protect against\\n         * potential Denial-of-Service attacks in case the server is deployed without a\\n         * reverse proxy in front.\\n         * @since v14.11.0\\n         */\\n        requestTimeout: number;\\n        /**\\n         * Closes all connections connected to this server.\\n         * @since v18.2.0\\n         */\\n        closeAllConnections(): void;\\n        /**\\n         * Closes all connections connected to this server which are not sending a request or waiting for a response.\\n         * @since v18.2.0\\n         */\\n        closeIdleConnections(): void;\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        addListener(event: 'close', listener: () => void): this;\\n        addListener(event: 'connection', listener: (socket: Socket) => void): this;\\n        addListener(event: 'error', listener: (err: Error) => void): this;\\n        addListener(event: 'listening', listener: () => void): this;\\n        addListener(event: 'checkContinue', listener: RequestListener<Request, Response>): this;\\n        addListener(event: 'checkExpectation', listener: RequestListener<Request, Response>): this;\\n        addListener(event: 'clientError', listener: (err: Error, socket: stream.Duplex) => void): this;\\n        addListener(\\n            event: 'connect',\\n            listener: (req: InstanceType<Request>, socket: stream.Duplex, head: Buffer) => void,\\n        ): this;\\n        addListener(event: 'dropRequest', listener: (req: InstanceType<Request>, socket: stream.Duplex) => void): this;\\n        addListener(event: 'request', listener: RequestListener<Request, Response>): this;\\n        addListener(\\n            event: 'upgrade',\\n            listener: (req: InstanceType<Request>, socket: stream.Duplex, head: Buffer) => void,\\n        ): this;\\n        emit(event: string, ...args: any[]): boolean;\\n        emit(event: 'close'): boolean;\\n        emit(event: 'connection', socket: Socket): boolean;\\n        emit(event: 'error', err: Error): boolean;\\n        emit(event: 'listening'): boolean;\\n        emit(\\n            event: 'checkContinue',\\n            req: InstanceType<Request>,\\n            res: InstanceType<Response> & { req: InstanceType<Request> },\\n        ): boolean;\\n        emit(\\n            event: 'checkExpectation',\\n            req: InstanceType<Request>,\\n            res: InstanceType<Response> & { req: InstanceType<Request> },\\n        ): boolean;\\n        emit(event: 'clientError', err: Error, socket: stream.Duplex): boolean;\\n        emit(event: 'connect', req: InstanceType<Request>, socket: stream.Duplex, head: Buffer): boolean;\\n        emit(event: 'dropRequest', req: InstanceType<Request>, socket: stream.Duplex): boolean;\\n        emit(\\n            event: 'request',\\n            req: InstanceType<Request>,\\n            res: InstanceType<Response> & { req: InstanceType<Request> },\\n        ): boolean;\\n        emit(event: 'upgrade', req: InstanceType<Request>, socket: stream.Duplex, head: Buffer): boolean;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        on(event: 'close', listener: () => void): this;\\n        on(event: 'connection', listener: (socket: Socket) => void): this;\\n        on(event: 'error', listener: (err: Error) => void): this;\\n        on(event: 'listening', listener: () => void): this;\\n        on(event: 'checkContinue', listener: RequestListener<Request, Response>): this;\\n        on(event: 'checkExpectation', listener: RequestListener<Request, Response>): this;\\n        on(event: 'clientError', listener: (err: Error, socket: stream.Duplex) => void): this;\\n        on(event: 'connect', listener: (req: InstanceType<Request>, socket: stream.Duplex, head: Buffer) => void): this;\\n        on(event: 'dropRequest', listener: (req: InstanceType<Request>, socket: stream.Duplex) => void): this;\\n        on(event: 'request', listener: RequestListener<Request, Response>): this;\\n        on(event: 'upgrade', listener: (req: InstanceType<Request>, socket: stream.Duplex, head: Buffer) => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        once(event: 'close', listener: () => void): this;\\n        once(event: 'connection', listener: (socket: Socket) => void): this;\\n        once(event: 'error', listener: (err: Error) => void): this;\\n        once(event: 'listening', listener: () => void): this;\\n        once(event: 'checkContinue', listener: RequestListener<Request, Response>): this;\\n        once(event: 'checkExpectation', listener: RequestListener<Request, Response>): this;\\n        once(event: 'clientError', listener: (err: Error, socket: stream.Duplex) => void): this;\\n        once(\\n            event: 'connect',\\n            listener: (req: InstanceType<Request>, socket: stream.Duplex, head: Buffer) => void,\\n        ): this;\\n        once(event: 'dropRequest', listener: (req: InstanceType<Request>, socket: stream.Duplex) => void): this;\\n        once(event: 'request', listener: RequestListener<Request, Response>): this;\\n        once(\\n            event: 'upgrade',\\n            listener: (req: InstanceType<Request>, socket: stream.Duplex, head: Buffer) => void,\\n        ): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'close', listener: () => void): this;\\n        prependListener(event: 'connection', listener: (socket: Socket) => void): this;\\n        prependListener(event: 'error', listener: (err: Error) => void): this;\\n        prependListener(event: 'listening', listener: () => void): this;\\n        prependListener(event: 'checkContinue', listener: RequestListener<Request, Response>): this;\\n        prependListener(event: 'checkExpectation', listener: RequestListener<Request, Response>): this;\\n        prependListener(event: 'clientError', listener: (err: Error, socket: stream.Duplex) => void): this;\\n        prependListener(\\n            event: 'connect',\\n            listener: (req: InstanceType<Request>, socket: stream.Duplex, head: Buffer) => void,\\n        ): this;\\n        prependListener(\\n            event: 'dropRequest',\\n            listener: (req: InstanceType<Request>, socket: stream.Duplex) => void,\\n        ): this;\\n        prependListener(event: 'request', listener: RequestListener<Request, Response>): this;\\n        prependListener(\\n            event: 'upgrade',\\n            listener: (req: InstanceType<Request>, socket: stream.Duplex, head: Buffer) => void,\\n        ): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'close', listener: () => void): this;\\n        prependOnceListener(event: 'connection', listener: (socket: Socket) => void): this;\\n        prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n        prependOnceListener(event: 'listening', listener: () => void): this;\\n        prependOnceListener(event: 'checkContinue', listener: RequestListener<Request, Response>): this;\\n        prependOnceListener(event: 'checkExpectation', listener: RequestListener<Request, Response>): this;\\n        prependOnceListener(event: 'clientError', listener: (err: Error, socket: stream.Duplex) => void): this;\\n        prependOnceListener(\\n            event: 'connect',\\n            listener: (req: InstanceType<Request>, socket: stream.Duplex, head: Buffer) => void,\\n        ): this;\\n        prependOnceListener(\\n            event: 'dropRequest',\\n            listener: (req: InstanceType<Request>, socket: stream.Duplex) => void,\\n        ): this;\\n        prependOnceListener(event: 'request', listener: RequestListener<Request, Response>): this;\\n        prependOnceListener(\\n            event: 'upgrade',\\n            listener: (req: InstanceType<Request>, socket: stream.Duplex, head: Buffer) => void,\\n        ): this;\\n    }\\n    /**\\n     * This class serves as the parent class of {@link ClientRequest} and {@link ServerResponse}. It is an abstract of outgoing message from\\n     * the perspective of the participants of HTTP transaction.\\n     * @since v0.1.17\\n     */\\n    class OutgoingMessage<Request extends IncomingMessage = IncomingMessage> extends stream.Writable {\\n        readonly req: Request;\\n        chunkedEncoding: boolean;\\n        shouldKeepAlive: boolean;\\n        useChunkedEncodingByDefault: boolean;\\n        sendDate: boolean;\\n        /**\\n         * @deprecated Use `writableEnded` instead.\\n         */\\n        finished: boolean;\\n        /**\\n         * Read-only. `true` if the headers were sent, otherwise `false`.\\n         * @since v0.9.3\\n         */\\n        readonly headersSent: boolean;\\n        /**\\n         * Aliases of `outgoingMessage.socket`\\n         * @since v0.3.0\\n         * @deprecated Since v15.12.0,v14.17.1 - Use `socket` instead.\\n         */\\n        readonly connection: Socket | null;\\n        /**\\n         * Reference to the underlying socket. Usually, users will not want to access\\n         * this property.\\n         *\\n         * After calling `outgoingMessage.end()`, this property will be nulled.\\n         * @since v0.3.0\\n         */\\n        readonly socket: Socket | null;\\n        constructor();\\n        /**\\n         * Once a socket is associated with the message and is connected,`socket.setTimeout()` will be called with `msecs` as the first parameter.\\n         * @since v0.9.12\\n         * @param callback Optional function to be called when a timeout occurs. Same as binding to the `timeout` event.\\n         */\\n        setTimeout(msecs: number, callback?: () => void): this;\\n        /**\\n         * Sets a single header value for the header object.\\n         * If the header already exists in the to-be-sent headers, its value will be replaced. Use an array of strings to send multiple headers with the same name.\\n         * @since v0.4.0\\n         * @param name Header name\\n         * @param value Header value\\n         */\\n        setHeader(name: string, value: number | string | ReadonlyArray<string>): this;\\n        /**\\n         * Append a single header value for the header object.\\n         *\\n         * If the value is an array, this is equivalent of calling this method multiple times.\\n         *\\n         * If there were no previous value for the header, this is equivalent of calling `outgoingMessage.setHeader(name, value)`.\\n         *\\n         * Depending of the value of `options.uniqueHeaders` when the client request or the server were created,\\n         * this will end up in the header being sent multiple times or a single time with values joined using `; `.\\n         * @since v18.3.0, v16.17.0\\n         * @param name Header name\\n         * @param value Header value\\n         */\\n        appendHeader(name: string, value: string | ReadonlyArray<string>): this;\\n        /**\\n         * Gets the value of HTTP header with the given name. If such a name doesn't\\n         * exist in message, it will be `undefined`.\\n         * @since v0.4.0\\n         * @param name Name of header\\n         */\\n        getHeader(name: string): number | string | string[] | undefined;\\n        /**\\n         * Returns a shallow copy of the current outgoing headers. Since a shallow\\n         * copy is used, array values may be mutated without additional calls to\\n         * various header-related HTTP module methods. The keys of the returned\\n         * object are the header names and the values are the respective header\\n         * values. All header names are lowercase.\\n         *\\n         * The object returned by the `outgoingMessage.getHeaders()` method does\\n         * not prototypically inherit from the JavaScript Object. This means that\\n         * typical Object methods such as `obj.toString()`, `obj.hasOwnProperty()`,\\n         * and others are not defined and will not work.\\n         *\\n         * ```js\\n         * outgoingMessage.setHeader('Foo', 'bar');\\n         * outgoingMessage.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);\\n         *\\n         * const headers = outgoingMessage.getHeaders();\\n         * // headers === { foo: 'bar', 'set-cookie': ['foo=bar', 'bar=baz'] }\\n         * ```\\n         * @since v7.7.0\\n         */\\n        getHeaders(): OutgoingHttpHeaders;\\n        /**\\n         * Returns an array of names of headers of the outgoing outgoingMessage. All\\n         * names are lowercase.\\n         * @since v7.7.0\\n         */\\n        getHeaderNames(): string[];\\n        /**\\n         * Returns `true` if the header identified by `name` is currently set in the\\n         * outgoing headers. The header name is case-insensitive.\\n         *\\n         * ```js\\n         * const hasContentType = outgoingMessage.hasHeader('content-type');\\n         * ```\\n         * @since v7.7.0\\n         */\\n        hasHeader(name: string): boolean;\\n        /**\\n         * Removes a header that is queued for implicit sending.\\n         *\\n         * ```js\\n         * outgoingMessage.removeHeader('Content-Encoding');\\n         * ```\\n         * @since v0.4.0\\n         * @param name Header name\\n         */\\n        removeHeader(name: string): void;\\n        /**\\n         * Adds HTTP trailers (headers but at the end of the message) to the message.\\n         *\\n         * Trailers are **only** be emitted if the message is chunked encoded. If not,\\n         * the trailer will be silently discarded.\\n         *\\n         * HTTP requires the `Trailer` header to be sent to emit trailers,\\n         * with a list of header fields in its value, e.g.\\n         *\\n         * ```js\\n         * message.writeHead(200, { 'Content-Type': 'text/plain',\\n         *                          'Trailer': 'Content-MD5' });\\n         * message.write(fileData);\\n         * message.addTrailers({ 'Content-MD5': '7895bf4b8828b55ceaf47747b4bca667' });\\n         * message.end();\\n         * ```\\n         *\\n         * Attempting to set a header field name or value that contains invalid characters\\n         * will result in a `TypeError` being thrown.\\n         * @since v0.3.0\\n         */\\n        addTrailers(headers: OutgoingHttpHeaders | ReadonlyArray<[string, string]>): void;\\n        /**\\n         * Compulsorily flushes the message headers\\n         *\\n         * For efficiency reason, Node.js normally buffers the message headers\\n         * until `outgoingMessage.end()` is called or the first chunk of message data\\n         * is written. It then tries to pack the headers and data into a single TCP\\n         * packet.\\n         *\\n         * It is usually desired (it saves a TCP round-trip), but not when the first\\n         * data is not sent until possibly much later. `outgoingMessage.flushHeaders()`bypasses the optimization and kickstarts the request.\\n         * @since v1.6.0\\n         */\\n        flushHeaders(): void;\\n    }\\n    /**\\n     * This object is created internally by an HTTP server, not by the user. It is\\n     * passed as the second parameter to the `'request'` event.\\n     * @since v0.1.17\\n     */\\n    class ServerResponse<Request extends IncomingMessage = IncomingMessage> extends OutgoingMessage<Request> {\\n        /**\\n         * When using implicit headers (not calling `response.writeHead()` explicitly),\\n         * this property controls the status code that will be sent to the client when\\n         * the headers get flushed.\\n         *\\n         * ```js\\n         * response.statusCode = 404;\\n         * ```\\n         *\\n         * After response header was sent to the client, this property indicates the\\n         * status code which was sent out.\\n         * @since v0.4.0\\n         */\\n        statusCode: number;\\n        /**\\n         * When using implicit headers (not calling `response.writeHead()` explicitly),\\n         * this property controls the status message that will be sent to the client when\\n         * the headers get flushed. If this is left as `undefined` then the standard\\n         * message for the status code will be used.\\n         *\\n         * ```js\\n         * response.statusMessage = 'Not found';\\n         * ```\\n         *\\n         * After response header was sent to the client, this property indicates the\\n         * status message which was sent out.\\n         * @since v0.11.8\\n         */\\n        statusMessage: string;\\n        /**\\n         * If set to `true`, Node.js will check whether the `Content-Length` header value\\n         * and the size of the body, in bytes, are equal. Mismatching the\\n         * `Content-Length` header value will result in an `Error` being thrown,\\n         * identified by `code: 'ERR_HTTP_CONTENT_LENGTH_MISMATCH'`.\\n         * @since v18.10.0, v16.18.0\\n         */\\n        strictContentLength: boolean;\\n        constructor(req: Request);\\n        assignSocket(socket: Socket): void;\\n        detachSocket(socket: Socket): void;\\n        /**\\n         * Sends an HTTP/1.1 100 Continue message to the client, indicating that\\n         * the request body should be sent. See the `'checkContinue'` event on`Server`.\\n         * @since v0.3.0\\n         */\\n        writeContinue(callback?: () => void): void;\\n        /**\\n         * Sends an HTTP/1.1 103 Early Hints message to the client with a Link header,\\n         * indicating that the user agent can preload/preconnect the linked resources.\\n         * The `hints` is an object containing the values of headers to be sent with\\n         * early hints message. The optional `callback` argument will be called when\\n         * the response message has been written.\\n         *\\n         * Example:\\n         *\\n         * ```js\\n         * const earlyHintsLink = '</styles.css>; rel=preload; as=style';\\n         * response.writeEarlyHints({\\n         *   'link': earlyHintsLink,\\n         * });\\n         *\\n         * const earlyHintsLinks = [\\n         *   '</styles.css>; rel=preload; as=style',\\n         *   '</scripts.js>; rel=preload; as=script',\\n         * ];\\n         * response.writeEarlyHints({\\n         *   'link': earlyHintsLinks,\\n         *   'x-trace-id': 'id for diagnostics'\\n         * });\\n         *\\n         * const earlyHintsCallback = () => console.log('early hints message sent');\\n         * response.writeEarlyHints({\\n         *   'link': earlyHintsLinks\\n         * }, earlyHintsCallback);\\n         * ```\\n         *\\n         * @since v18.11.0\\n         * @param hints An object containing the values of headers\\n         * @param callback Will be called when the response message has been written\\n         */\\n        writeEarlyHints(hints: Record<string, string | string[]>, callback?: () => void): void;\\n        /**\\n         * Sends a response header to the request. The status code is a 3-digit HTTP\\n         * status code, like `404`. The last argument, `headers`, are the response headers.\\n         * Optionally one can give a human-readable `statusMessage` as the second\\n         * argument.\\n         *\\n         * `headers` may be an `Array` where the keys and values are in the same list.\\n         * It is _not_ a list of tuples. So, the even-numbered offsets are key values,\\n         * and the odd-numbered offsets are the associated values. The array is in the same\\n         * format as `request.rawHeaders`.\\n         *\\n         * Returns a reference to the `ServerResponse`, so that calls can be chained.\\n         *\\n         * ```js\\n         * const body = 'hello world';\\n         * response\\n         *   .writeHead(200, {\\n         *     'Content-Length': Buffer.byteLength(body),\\n         *     'Content-Type': 'text/plain'\\n         *   })\\n         *   .end(body);\\n         * ```\\n         *\\n         * This method must only be called once on a message and it must\\n         * be called before `response.end()` is called.\\n         *\\n         * If `response.write()` or `response.end()` are called before calling\\n         * this, the implicit/mutable headers will be calculated and call this function.\\n         *\\n         * When headers have been set with `response.setHeader()`, they will be merged\\n         * with any headers passed to `response.writeHead()`, with the headers passed\\n         * to `response.writeHead()` given precedence.\\n         *\\n         * If this method is called and `response.setHeader()` has not been called,\\n         * it will directly write the supplied header values onto the network channel\\n         * without caching internally, and the `response.getHeader()` on the header\\n         * will not yield the expected result. If progressive population of headers is\\n         * desired with potential future retrieval and modification, use `response.setHeader()` instead.\\n         *\\n         * ```js\\n         * // Returns content-type = text/plain\\n         * const server = http.createServer((req, res) => {\\n         *   res.setHeader('Content-Type', 'text/html');\\n         *   res.setHeader('X-Foo', 'bar');\\n         *   res.writeHead(200, { 'Content-Type': 'text/plain' });\\n         *   res.end('ok');\\n         * });\\n         * ```\\n         *\\n         * `Content-Length` is given in bytes, not characters. Use `Buffer.byteLength()` to determine the length of the body in bytes. Node.js\\n         * does not check whether `Content-Length` and the length of the body which has\\n         * been transmitted are equal or not.\\n         *\\n         * Attempting to set a header field name or value that contains invalid characters\\n         * will result in a `TypeError` being thrown.\\n         * @since v0.1.30\\n         */\\n        writeHead(\\n            statusCode: number,\\n            statusMessage?: string,\\n            headers?: OutgoingHttpHeaders | OutgoingHttpHeader[],\\n        ): this;\\n        writeHead(statusCode: number, headers?: OutgoingHttpHeaders | OutgoingHttpHeader[]): this;\\n        /**\\n         * Sends an HTTP/1.1 102 Processing message to the client, indicating that\\n         * the request body should be sent.\\n         * @since v10.0.0\\n         */\\n        writeProcessing(): void;\\n    }\\n    interface InformationEvent {\\n        statusCode: number;\\n        statusMessage: string;\\n        httpVersion: string;\\n        httpVersionMajor: number;\\n        httpVersionMinor: number;\\n        headers: IncomingHttpHeaders;\\n        rawHeaders: string[];\\n    }\\n    /**\\n     * This object is created internally and returned from {@link request}. It\\n     * represents an _in-progress_ request whose header has already been queued. The\\n     * header is still mutable using the `setHeader(name, value)`,`getHeader(name)`, `removeHeader(name)` API. The actual header will\\n     * be sent along with the first data chunk or when calling `request.end()`.\\n     *\\n     * To get the response, add a listener for `'response'` to the request object.`'response'` will be emitted from the request object when the response\\n     * headers have been received. The `'response'` event is executed with one\\n     * argument which is an instance of {@link IncomingMessage}.\\n     *\\n     * During the `'response'` event, one can add listeners to the\\n     * response object; particularly to listen for the `'data'` event.\\n     *\\n     * If no `'response'` handler is added, then the response will be\\n     * entirely discarded. However, if a `'response'` event handler is added,\\n     * then the data from the response object **must** be consumed, either by\\n     * calling `response.read()` whenever there is a `'readable'` event, or\\n     * by adding a `'data'` handler, or by calling the `.resume()` method.\\n     * Until the data is consumed, the `'end'` event will not fire. Also, until\\n     * the data is read it will consume memory that can eventually lead to a\\n     * 'process out of memory' error.\\n     *\\n     * For backward compatibility, `res` will only emit `'error'` if there is an`'error'` listener registered.\\n     *\\n     * Node.js does not check whether Content-Length and the length of the\\n     * body which has been transmitted are equal or not.\\n     * @since v0.1.17\\n     */\\n    class ClientRequest extends OutgoingMessage {\\n        /**\\n         * The `request.aborted` property will be `true` if the request has\\n         * been aborted.\\n         * @since v0.11.14\\n         * @deprecated Since v17.0.0,v16.12.0 - Check `destroyed` instead.\\n         */\\n        aborted: boolean;\\n        /**\\n         * The request host.\\n         * @since v14.5.0, v12.19.0\\n         */\\n        host: string;\\n        /**\\n         * The request protocol.\\n         * @since v14.5.0, v12.19.0\\n         */\\n        protocol: string;\\n        /**\\n         * When sending request through a keep-alive enabled agent, the underlying socket\\n         * might be reused. But if server closes connection at unfortunate time, client\\n         * may run into a 'ECONNRESET' error.\\n         *\\n         * ```js\\n         * const http = require('http');\\n         *\\n         * // Server has a 5 seconds keep-alive timeout by default\\n         * http\\n         *   .createServer((req, res) => {\\n         *     res.write('hello\\\\n');\\n         *     res.end();\\n         *   })\\n         *   .listen(3000);\\n         *\\n         * setInterval(() => {\\n         *   // Adapting a keep-alive agent\\n         *   http.get('http://localhost:3000', { agent }, (res) => {\\n         *     res.on('data', (data) => {\\n         *       // Do nothing\\n         *     });\\n         *   });\\n         * }, 5000); // Sending request on 5s interval so it's easy to hit idle timeout\\n         * ```\\n         *\\n         * By marking a request whether it reused socket or not, we can do\\n         * automatic error retry base on it.\\n         *\\n         * ```js\\n         * const http = require('http');\\n         * const agent = new http.Agent({ keepAlive: true });\\n         *\\n         * function retriableRequest() {\\n         *   const req = http\\n         *     .get('http://localhost:3000', { agent }, (res) => {\\n         *       // ...\\n         *     })\\n         *     .on('error', (err) => {\\n         *       // Check if retry is needed\\n         *       if (req.reusedSocket &#x26;&#x26; err.code === 'ECONNRESET') {\\n         *         retriableRequest();\\n         *       }\\n         *     });\\n         * }\\n         *\\n         * retriableRequest();\\n         * ```\\n         * @since v13.0.0, v12.16.0\\n         */\\n        reusedSocket: boolean;\\n        /**\\n         * Limits maximum response headers count. If set to 0, no limit will be applied.\\n         */\\n        maxHeadersCount: number;\\n        constructor(url: string | URL | ClientRequestArgs, cb?: (res: IncomingMessage) => void);\\n        /**\\n         * The request method.\\n         * @since v0.1.97\\n         */\\n        method: string;\\n        /**\\n         * The request path.\\n         * @since v0.4.0\\n         */\\n        path: string;\\n        /**\\n         * Marks the request as aborting. Calling this will cause remaining data\\n         * in the response to be dropped and the socket to be destroyed.\\n         * @since v0.3.8\\n         * @deprecated Since v14.1.0,v13.14.0 - Use `destroy` instead.\\n         */\\n        abort(): void;\\n        onSocket(socket: Socket): void;\\n        /**\\n         * Once a socket is assigned to this request and is connected `socket.setTimeout()` will be called.\\n         * @since v0.5.9\\n         * @param timeout Milliseconds before a request times out.\\n         * @param callback Optional function to be called when a timeout occurs. Same as binding to the `'timeout'` event.\\n         */\\n        setTimeout(timeout: number, callback?: () => void): this;\\n        /**\\n         * Once a socket is assigned to this request and is connected `socket.setNoDelay()` will be called.\\n         * @since v0.5.9\\n         */\\n        setNoDelay(noDelay?: boolean): void;\\n        /**\\n         * Once a socket is assigned to this request and is connected `socket.setKeepAlive()` will be called.\\n         * @since v0.5.9\\n         */\\n        setSocketKeepAlive(enable?: boolean, initialDelay?: number): void;\\n        /**\\n         * Returns an array containing the unique names of the current outgoing raw\\n         * headers. Header names are returned with their exact casing being set.\\n         *\\n         * ```js\\n         * request.setHeader('Foo', 'bar');\\n         * request.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);\\n         *\\n         * const headerNames = request.getRawHeaderNames();\\n         * // headerNames === ['Foo', 'Set-Cookie']\\n         * ```\\n         * @since v15.13.0, v14.17.0\\n         */\\n        getRawHeaderNames(): string[];\\n        /**\\n         * @deprecated\\n         */\\n        addListener(event: 'abort', listener: () => void): this;\\n        addListener(\\n            event: 'connect',\\n            listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void,\\n        ): this;\\n        addListener(event: 'continue', listener: () => void): this;\\n        addListener(event: 'information', listener: (info: InformationEvent) => void): this;\\n        addListener(event: 'response', listener: (response: IncomingMessage) => void): this;\\n        addListener(event: 'socket', listener: (socket: Socket) => void): this;\\n        addListener(event: 'timeout', listener: () => void): this;\\n        addListener(\\n            event: 'upgrade',\\n            listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void,\\n        ): this;\\n        addListener(event: 'close', listener: () => void): this;\\n        addListener(event: 'drain', listener: () => void): this;\\n        addListener(event: 'error', listener: (err: Error) => void): this;\\n        addListener(event: 'finish', listener: () => void): this;\\n        addListener(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        addListener(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        /**\\n         * @deprecated\\n         */\\n        on(event: 'abort', listener: () => void): this;\\n        on(event: 'connect', listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void): this;\\n        on(event: 'continue', listener: () => void): this;\\n        on(event: 'information', listener: (info: InformationEvent) => void): this;\\n        on(event: 'response', listener: (response: IncomingMessage) => void): this;\\n        on(event: 'socket', listener: (socket: Socket) => void): this;\\n        on(event: 'timeout', listener: () => void): this;\\n        on(event: 'upgrade', listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void): this;\\n        on(event: 'close', listener: () => void): this;\\n        on(event: 'drain', listener: () => void): this;\\n        on(event: 'error', listener: (err: Error) => void): this;\\n        on(event: 'finish', listener: () => void): this;\\n        on(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        on(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\n        /**\\n         * @deprecated\\n         */\\n        once(event: 'abort', listener: () => void): this;\\n        once(event: 'connect', listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void): this;\\n        once(event: 'continue', listener: () => void): this;\\n        once(event: 'information', listener: (info: InformationEvent) => void): this;\\n        once(event: 'response', listener: (response: IncomingMessage) => void): this;\\n        once(event: 'socket', listener: (socket: Socket) => void): this;\\n        once(event: 'timeout', listener: () => void): this;\\n        once(event: 'upgrade', listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void): this;\\n        once(event: 'close', listener: () => void): this;\\n        once(event: 'drain', listener: () => void): this;\\n        once(event: 'error', listener: (err: Error) => void): this;\\n        once(event: 'finish', listener: () => void): this;\\n        once(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        once(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\n        /**\\n         * @deprecated\\n         */\\n        prependListener(event: 'abort', listener: () => void): this;\\n        prependListener(\\n            event: 'connect',\\n            listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void,\\n        ): this;\\n        prependListener(event: 'continue', listener: () => void): this;\\n        prependListener(event: 'information', listener: (info: InformationEvent) => void): this;\\n        prependListener(event: 'response', listener: (response: IncomingMessage) => void): this;\\n        prependListener(event: 'socket', listener: (socket: Socket) => void): this;\\n        prependListener(event: 'timeout', listener: () => void): this;\\n        prependListener(\\n            event: 'upgrade',\\n            listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void,\\n        ): this;\\n        prependListener(event: 'close', listener: () => void): this;\\n        prependListener(event: 'drain', listener: () => void): this;\\n        prependListener(event: 'error', listener: (err: Error) => void): this;\\n        prependListener(event: 'finish', listener: () => void): this;\\n        prependListener(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        prependListener(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        /**\\n         * @deprecated\\n         */\\n        prependOnceListener(event: 'abort', listener: () => void): this;\\n        prependOnceListener(\\n            event: 'connect',\\n            listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void,\\n        ): this;\\n        prependOnceListener(event: 'continue', listener: () => void): this;\\n        prependOnceListener(event: 'information', listener: (info: InformationEvent) => void): this;\\n        prependOnceListener(event: 'response', listener: (response: IncomingMessage) => void): this;\\n        prependOnceListener(event: 'socket', listener: (socket: Socket) => void): this;\\n        prependOnceListener(event: 'timeout', listener: () => void): this;\\n        prependOnceListener(\\n            event: 'upgrade',\\n            listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void,\\n        ): this;\\n        prependOnceListener(event: 'close', listener: () => void): this;\\n        prependOnceListener(event: 'drain', listener: () => void): this;\\n        prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n        prependOnceListener(event: 'finish', listener: () => void): this;\\n        prependOnceListener(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        prependOnceListener(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n    }\\n    /**\\n     * An `IncomingMessage` object is created by {@link Server} or {@link ClientRequest} and passed as the first argument to the `'request'` and `'response'` event respectively. It may be used to\\n     * access response\\n     * status, headers and data.\\n     *\\n     * Different from its `socket` value which is a subclass of `stream.Duplex`, the`IncomingMessage` itself extends `stream.Readable` and is created separately to\\n     * parse and emit the incoming HTTP headers and payload, as the underlying socket\\n     * may be reused multiple times in case of keep-alive.\\n     * @since v0.1.17\\n     */\\n    class IncomingMessage extends stream.Readable {\\n        constructor(socket: Socket);\\n        /**\\n         * The `message.aborted` property will be `true` if the request has\\n         * been aborted.\\n         * @since v10.1.0\\n         * @deprecated Since v17.0.0,v16.12.0 - Check `message.destroyed` from <a href=\\\"stream.html#class-streamreadable\\\" class=\\\"type\\\">stream.Readable</a>.\\n         */\\n        aborted: boolean;\\n        /**\\n         * In case of server request, the HTTP version sent by the client. In the case of\\n         * client response, the HTTP version of the connected-to server.\\n         * Probably either `'1.1'` or `'1.0'`.\\n         *\\n         * Also `message.httpVersionMajor` is the first integer and`message.httpVersionMinor` is the second.\\n         * @since v0.1.1\\n         */\\n        httpVersion: string;\\n        httpVersionMajor: number;\\n        httpVersionMinor: number;\\n        /**\\n         * The `message.complete` property will be `true` if a complete HTTP message has\\n         * been received and successfully parsed.\\n         *\\n         * This property is particularly useful as a means of determining if a client or\\n         * server fully transmitted a message before a connection was terminated:\\n         *\\n         * ```js\\n         * const req = http.request({\\n         *   host: '127.0.0.1',\\n         *   port: 8080,\\n         *   method: 'POST'\\n         * }, (res) => {\\n         *   res.resume();\\n         *   res.on('end', () => {\\n         *     if (!res.complete)\\n         *       console.error(\\n         *         'The connection was terminated while the message was still being sent');\\n         *   });\\n         * });\\n         * ```\\n         * @since v0.3.0\\n         */\\n        complete: boolean;\\n        /**\\n         * Alias for `message.socket`.\\n         * @since v0.1.90\\n         * @deprecated Since v16.0.0 - Use `socket`.\\n         */\\n        connection: Socket;\\n        /**\\n         * The `net.Socket` object associated with the connection.\\n         *\\n         * With HTTPS support, use `request.socket.getPeerCertificate()` to obtain the\\n         * client's authentication details.\\n         *\\n         * This property is guaranteed to be an instance of the `net.Socket` class,\\n         * a subclass of `stream.Duplex`, unless the user specified a socket\\n         * type other than `net.Socket` or internally nulled.\\n         * @since v0.3.0\\n         */\\n        socket: Socket;\\n        /**\\n         * The request/response headers object.\\n         *\\n         * Key-value pairs of header names and values. Header names are lower-cased.\\n         *\\n         * ```js\\n         * // Prints something like:\\n         * //\\n         * // { 'user-agent': 'curl/7.22.0',\\n         * //   host: '127.0.0.1:8000',\\n         * //   accept: '*' }\\n         * console.log(request.getHeaders());\\n         * ```\\n         *\\n         * Duplicates in raw headers are handled in the following ways, depending on the\\n         * header name:\\n         *\\n         * * Duplicates of `age`, `authorization`, `content-length`, `content-type`,`etag`, `expires`, `from`, `host`, `if-modified-since`, `if-unmodified-since`,`last-modified`, `location`,\\n         * `max-forwards`, `proxy-authorization`, `referer`,`retry-after`, `server`, or `user-agent` are discarded.\\n         * * `set-cookie` is always an array. Duplicates are added to the array.\\n         * * For duplicate `cookie` headers, the values are joined together with '; '.\\n         * * For all other headers, the values are joined together with ', '.\\n         * @since v0.1.5\\n         */\\n        headers: IncomingHttpHeaders;\\n        /**\\n         * Similar to `message.headers`, but there is no join logic and the values are always arrays of strings, even for headers received just once.\\n         *\\n         * ```js\\n         * // Prints something like:\\n         * //\\n         * // { 'user-agent': ['curl/7.22.0'],\\n         * //   host: ['127.0.0.1:8000'],\\n         * //   accept: ['*'] }\\n         * console.log(request.headersDistinct);\\n         * ```\\n         * @since v18.3.0, v16.17.0\\n         */\\n        headersDistinct: NodeJS.Dict<string[]>;\\n        /**\\n         * The raw request/response headers list exactly as they were received.\\n         *\\n         * The keys and values are in the same list. It is _not_ a\\n         * list of tuples. So, the even-numbered offsets are key values, and the\\n         * odd-numbered offsets are the associated values.\\n         *\\n         * Header names are not lowercased, and duplicates are not merged.\\n         *\\n         * ```js\\n         * // Prints something like:\\n         * //\\n         * // [ 'user-agent',\\n         * //   'this is invalid because there can be only one',\\n         * //   'User-Agent',\\n         * //   'curl/7.22.0',\\n         * //   'Host',\\n         * //   '127.0.0.1:8000',\\n         * //   'ACCEPT',\\n         * //   '*' ]\\n         * console.log(request.rawHeaders);\\n         * ```\\n         * @since v0.11.6\\n         */\\n        rawHeaders: string[];\\n        /**\\n         * The request/response trailers object. Only populated at the `'end'` event.\\n         * @since v0.3.0\\n         */\\n        trailers: NodeJS.Dict<string>;\\n        /**\\n         * Similar to `message.trailers`, but there is no join logic and the values are always arrays of strings, even for headers received just once.\\n         * Only populated at the `'end'` event.\\n         * @since v18.3.0, v16.17.0\\n         */\\n        trailersDistinct: NodeJS.Dict<string[]>;\\n        /**\\n         * The raw request/response trailer keys and values exactly as they were\\n         * received. Only populated at the `'end'` event.\\n         * @since v0.11.6\\n         */\\n        rawTrailers: string[];\\n        /**\\n         * Calls `message.socket.setTimeout(msecs, callback)`.\\n         * @since v0.5.9\\n         */\\n        setTimeout(msecs: number, callback?: () => void): this;\\n        /**\\n         * **Only valid for request obtained from {@link Server}.**\\n         *\\n         * The request method as a string. Read only. Examples: `'GET'`, `'DELETE'`.\\n         * @since v0.1.1\\n         */\\n        method?: string | undefined;\\n        /**\\n         * **Only valid for request obtained from {@link Server}.**\\n         *\\n         * Request URL string. This contains only the URL that is present in the actual\\n         * HTTP request. Take the following request:\\n         *\\n         * ```http\\n         * GET /status?name=ryan HTTP/1.1\\n         * Accept: text/plain\\n         * ```\\n         *\\n         * To parse the URL into its parts:\\n         *\\n         * ```js\\n         * new URL(request.url, `http://${request.getHeaders().host}`);\\n         * ```\\n         *\\n         * When `request.url` is `'/status?name=ryan'` and`request.getHeaders().host` is `'localhost:3000'`:\\n         *\\n         * ```console\\n         * $ node\\n         * > new URL(request.url, `http://${request.getHeaders().host}`)\\n         * URL {\\n         *   href: 'http://localhost:3000/status?name=ryan',\\n         *   origin: 'http://localhost:3000',\\n         *   protocol: 'http:',\\n         *   username: '',\\n         *   password: '',\\n         *   host: 'localhost:3000',\\n         *   hostname: 'localhost',\\n         *   port: '3000',\\n         *   pathname: '/status',\\n         *   search: '?name=ryan',\\n         *   searchParams: URLSearchParams { 'name' => 'ryan' },\\n         *   hash: ''\\n         * }\\n         * ```\\n         * @since v0.1.90\\n         */\\n        url?: string | undefined;\\n        /**\\n         * **Only valid for response obtained from {@link ClientRequest}.**\\n         *\\n         * The 3-digit HTTP response status code. E.G. `404`.\\n         * @since v0.1.1\\n         */\\n        statusCode?: number | undefined;\\n        /**\\n         * **Only valid for response obtained from {@link ClientRequest}.**\\n         *\\n         * The HTTP response status message (reason phrase). E.G. `OK` or `Internal Server Error`.\\n         * @since v0.11.10\\n         */\\n        statusMessage?: string | undefined;\\n        /**\\n         * Calls `destroy()` on the socket that received the `IncomingMessage`. If `error`is provided, an `'error'` event is emitted on the socket and `error` is passed\\n         * as an argument to any listeners on the event.\\n         * @since v0.3.0\\n         */\\n        destroy(error?: Error): this;\\n    }\\n    interface AgentOptions extends Partial<TcpSocketConnectOpts> {\\n        /**\\n         * Keep sockets around in a pool to be used by other requests in the future. Default = false\\n         */\\n        keepAlive?: boolean | undefined;\\n        /**\\n         * When using HTTP KeepAlive, how often to send TCP KeepAlive packets over sockets being kept alive. Default = 1000.\\n         * Only relevant if keepAlive is set to true.\\n         */\\n        keepAliveMsecs?: number | undefined;\\n        /**\\n         * Maximum number of sockets to allow per host. Default for Node 0.10 is 5, default for Node 0.12 is Infinity\\n         */\\n        maxSockets?: number | undefined;\\n        /**\\n         * Maximum number of sockets allowed for all hosts in total. Each request will use a new socket until the maximum is reached. Default: Infinity.\\n         */\\n        maxTotalSockets?: number | undefined;\\n        /**\\n         * Maximum number of sockets to leave open in a free state. Only relevant if keepAlive is set to true. Default = 256.\\n         */\\n        maxFreeSockets?: number | undefined;\\n        /**\\n         * Socket timeout in milliseconds. This will set the timeout after the socket is connected.\\n         */\\n        timeout?: number | undefined;\\n        /**\\n         * Scheduling strategy to apply when picking the next free socket to use.\\n         * @default `lifo`\\n         */\\n        scheduling?: 'fifo' | 'lifo' | undefined;\\n    }\\n    /**\\n     * An `Agent` is responsible for managing connection persistence\\n     * and reuse for HTTP clients. It maintains a queue of pending requests\\n     * for a given host and port, reusing a single socket connection for each\\n     * until the queue is empty, at which time the socket is either destroyed\\n     * or put into a pool where it is kept to be used again for requests to the\\n     * same host and port. Whether it is destroyed or pooled depends on the`keepAlive` `option`.\\n     *\\n     * Pooled connections have TCP Keep-Alive enabled for them, but servers may\\n     * still close idle connections, in which case they will be removed from the\\n     * pool and a new connection will be made when a new HTTP request is made for\\n     * that host and port. Servers may also refuse to allow multiple requests\\n     * over the same connection, in which case the connection will have to be\\n     * remade for every request and cannot be pooled. The `Agent` will still make\\n     * the requests to that server, but each one will occur over a new connection.\\n     *\\n     * When a connection is closed by the client or the server, it is removed\\n     * from the pool. Any unused sockets in the pool will be unrefed so as not\\n     * to keep the Node.js process running when there are no outstanding requests.\\n     * (see `socket.unref()`).\\n     *\\n     * It is good practice, to `destroy()` an `Agent` instance when it is no\\n     * longer in use, because unused sockets consume OS resources.\\n     *\\n     * Sockets are removed from an agent when the socket emits either\\n     * a `'close'` event or an `'agentRemove'` event. When intending to keep one\\n     * HTTP request open for a long time without keeping it in the agent, something\\n     * like the following may be done:\\n     *\\n     * ```js\\n     * http.get(options, (res) => {\\n     *   // Do stuff\\n     * }).on('socket', (socket) => {\\n     *   socket.emit('agentRemove');\\n     * });\\n     * ```\\n     *\\n     * An agent may also be used for an individual request. By providing`{agent: false}` as an option to the `http.get()` or `http.request()`functions, a one-time use `Agent` with default options\\n     * will be used\\n     * for the client connection.\\n     *\\n     * `agent:false`:\\n     *\\n     * ```js\\n     * http.get({\\n     *   hostname: 'localhost',\\n     *   port: 80,\\n     *   path: '/',\\n     *   agent: false  // Create a new agent just for this one request\\n     * }, (res) => {\\n     *   // Do stuff with response\\n     * });\\n     * ```\\n     * @since v0.3.4\\n     */\\n    class Agent extends EventEmitter {\\n        /**\\n         * By default set to 256. For agents with `keepAlive` enabled, this\\n         * sets the maximum number of sockets that will be left open in the free\\n         * state.\\n         * @since v0.11.7\\n         */\\n        maxFreeSockets: number;\\n        /**\\n         * By default set to `Infinity`. Determines how many concurrent sockets the agent\\n         * can have open per origin. Origin is the returned value of `agent.getName()`.\\n         * @since v0.3.6\\n         */\\n        maxSockets: number;\\n        /**\\n         * By default set to `Infinity`. Determines how many concurrent sockets the agent\\n         * can have open. Unlike `maxSockets`, this parameter applies across all origins.\\n         * @since v14.5.0, v12.19.0\\n         */\\n        maxTotalSockets: number;\\n        /**\\n         * An object which contains arrays of sockets currently awaiting use by\\n         * the agent when `keepAlive` is enabled. Do not modify.\\n         *\\n         * Sockets in the `freeSockets` list will be automatically destroyed and\\n         * removed from the array on `'timeout'`.\\n         * @since v0.11.4\\n         */\\n        readonly freeSockets: NodeJS.ReadOnlyDict<Socket[]>;\\n        /**\\n         * An object which contains arrays of sockets currently in use by the\\n         * agent. Do not modify.\\n         * @since v0.3.6\\n         */\\n        readonly sockets: NodeJS.ReadOnlyDict<Socket[]>;\\n        /**\\n         * An object which contains queues of requests that have not yet been assigned to\\n         * sockets. Do not modify.\\n         * @since v0.5.9\\n         */\\n        readonly requests: NodeJS.ReadOnlyDict<IncomingMessage[]>;\\n        constructor(opts?: AgentOptions);\\n        /**\\n         * Destroy any sockets that are currently in use by the agent.\\n         *\\n         * It is usually not necessary to do this. However, if using an\\n         * agent with `keepAlive` enabled, then it is best to explicitly shut down\\n         * the agent when it is no longer needed. Otherwise,\\n         * sockets might stay open for quite a long time before the server\\n         * terminates them.\\n         * @since v0.11.4\\n         */\\n        destroy(): void;\\n    }\\n    const METHODS: string[];\\n    const STATUS_CODES: {\\n        [errorCode: number]: string | undefined;\\n        [errorCode: string]: string | undefined;\\n    };\\n    /**\\n     * Returns a new instance of {@link Server}.\\n     *\\n     * The `requestListener` is a function which is automatically\\n     * added to the `'request'` event.\\n     * @since v0.1.13\\n     */\\n    function createServer<\\n        Request extends typeof IncomingMessage = typeof IncomingMessage,\\n        Response extends typeof ServerResponse = typeof ServerResponse,\\n    >(requestListener?: RequestListener<Request, Response>): Server<Request, Response>;\\n    function createServer<\\n        Request extends typeof IncomingMessage = typeof IncomingMessage,\\n        Response extends typeof ServerResponse = typeof ServerResponse,\\n    >(\\n        options: ServerOptions<Request, Response>,\\n        requestListener?: RequestListener<Request, Response>,\\n    ): Server<Request, Response>;\\n    // although RequestOptions are passed as ClientRequestArgs to ClientRequest directly,\\n    // create interface RequestOptions would make the naming more clear to developers\\n    interface RequestOptions extends ClientRequestArgs {}\\n    /**\\n     * `options` in `socket.connect()` are also supported.\\n     *\\n     * Node.js maintains several connections per server to make HTTP requests.\\n     * This function allows one to transparently issue requests.\\n     *\\n     * `url` can be a string or a `URL` object. If `url` is a\\n     * string, it is automatically parsed with `new URL()`. If it is a `URL` object, it will be automatically converted to an ordinary `options` object.\\n     *\\n     * If both `url` and `options` are specified, the objects are merged, with the`options` properties taking precedence.\\n     *\\n     * The optional `callback` parameter will be added as a one-time listener for\\n     * the `'response'` event.\\n     *\\n     * `http.request()` returns an instance of the {@link ClientRequest} class. The `ClientRequest` instance is a writable stream. If one needs to\\n     * upload a file with a POST request, then write to the `ClientRequest` object.\\n     *\\n     * ```js\\n     * const http = require('http');\\n     *\\n     * const postData = JSON.stringify({\\n     *   'msg': 'Hello World!'\\n     * });\\n     *\\n     * const options = {\\n     *   hostname: 'www.google.com',\\n     *   port: 80,\\n     *   path: '/upload',\\n     *   method: 'POST',\\n     *   headers: {\\n     *     'Content-Type': 'application/json',\\n     *     'Content-Length': Buffer.byteLength(postData)\\n     *   }\\n     * };\\n     *\\n     * const req = http.request(options, (res) => {\\n     *   console.log(`STATUS: ${res.statusCode}`);\\n     *   console.log(`HEADERS: ${JSON.stringify(res.headers)}`);\\n     *   res.setEncoding('utf8');\\n     *   res.on('data', (chunk) => {\\n     *     console.log(`BODY: ${chunk}`);\\n     *   });\\n     *   res.on('end', () => {\\n     *     console.log('No more data in response.');\\n     *   });\\n     * });\\n     *\\n     * req.on('error', (e) => {\\n     *   console.error(`problem with request: ${e.message}`);\\n     * });\\n     *\\n     * // Write data to request body\\n     * req.write(postData);\\n     * req.end();\\n     * ```\\n     *\\n     * In the example `req.end()` was called. With `http.request()` one\\n     * must always call `req.end()` to signify the end of the request -\\n     * even if there is no data being written to the request body.\\n     *\\n     * If any error is encountered during the request (be that with DNS resolution,\\n     * TCP level errors, or actual HTTP parse errors) an `'error'` event is emitted\\n     * on the returned request object. As with all `'error'` events, if no listeners\\n     * are registered the error will be thrown.\\n     *\\n     * There are a few special headers that should be noted.\\n     *\\n     * * Sending a 'Connection: keep-alive' will notify Node.js that the connection to\\n     * the server should be persisted until the next request.\\n     * * Sending a 'Content-Length' header will disable the default chunked encoding.\\n     * * Sending an 'Expect' header will immediately send the request headers.\\n     * Usually, when sending 'Expect: 100-continue', both a timeout and a listener\\n     * for the `'continue'` event should be set. See RFC 2616 Section 8.2.3 for more\\n     * information.\\n     * * Sending an Authorization header will override using the `auth` option\\n     * to compute basic authentication.\\n     *\\n     * Example using a `URL` as `options`:\\n     *\\n     * ```js\\n     * const options = new URL('http://abc:xyz@example.com');\\n     *\\n     * const req = http.request(options, (res) => {\\n     *   // ...\\n     * });\\n     * ```\\n     *\\n     * In a successful request, the following events will be emitted in the following\\n     * order:\\n     *\\n     * * `'socket'`\\n     * * `'response'`\\n     *    * `'data'` any number of times, on the `res` object\\n     *    (`'data'` will not be emitted at all if the response body is empty, for\\n     *    instance, in most redirects)\\n     *    * `'end'` on the `res` object\\n     * * `'close'`\\n     *\\n     * In the case of a connection error, the following events will be emitted:\\n     *\\n     * * `'socket'`\\n     * * `'error'`\\n     * * `'close'`\\n     *\\n     * In the case of a premature connection close before the response is received,\\n     * the following events will be emitted in the following order:\\n     *\\n     * * `'socket'`\\n     * * `'error'` with an error with message `'Error: socket hang up'` and code`'ECONNRESET'`\\n     * * `'close'`\\n     *\\n     * In the case of a premature connection close after the response is received,\\n     * the following events will be emitted in the following order:\\n     *\\n     * * `'socket'`\\n     * * `'response'`\\n     *    * `'data'` any number of times, on the `res` object\\n     * * (connection closed here)\\n     * * `'aborted'` on the `res` object\\n     * * `'error'` on the `res` object with an error with message`'Error: aborted'` and code `'ECONNRESET'`.\\n     * * `'close'`\\n     * * `'close'` on the `res` object\\n     *\\n     * If `req.destroy()` is called before a socket is assigned, the following\\n     * events will be emitted in the following order:\\n     *\\n     * * (`req.destroy()` called here)\\n     * * `'error'` with an error with message `'Error: socket hang up'` and code`'ECONNRESET'`\\n     * * `'close'`\\n     *\\n     * If `req.destroy()` is called before the connection succeeds, the following\\n     * events will be emitted in the following order:\\n     *\\n     * * `'socket'`\\n     * * (`req.destroy()` called here)\\n     * * `'error'` with an error with message `'Error: socket hang up'` and code`'ECONNRESET'`\\n     * * `'close'`\\n     *\\n     * If `req.destroy()` is called after the response is received, the following\\n     * events will be emitted in the following order:\\n     *\\n     * * `'socket'`\\n     * * `'response'`\\n     *    * `'data'` any number of times, on the `res` object\\n     * * (`req.destroy()` called here)\\n     * * `'aborted'` on the `res` object\\n     * * `'error'` on the `res` object with an error with message`'Error: aborted'` and code `'ECONNRESET'`.\\n     * * `'close'`\\n     * * `'close'` on the `res` object\\n     *\\n     * If `req.abort()` is called before a socket is assigned, the following\\n     * events will be emitted in the following order:\\n     *\\n     * * (`req.abort()` called here)\\n     * * `'abort'`\\n     * * `'close'`\\n     *\\n     * If `req.abort()` is called before the connection succeeds, the following\\n     * events will be emitted in the following order:\\n     *\\n     * * `'socket'`\\n     * * (`req.abort()` called here)\\n     * * `'abort'`\\n     * * `'error'` with an error with message `'Error: socket hang up'` and code`'ECONNRESET'`\\n     * * `'close'`\\n     *\\n     * If `req.abort()` is called after the response is received, the following\\n     * events will be emitted in the following order:\\n     *\\n     * * `'socket'`\\n     * * `'response'`\\n     *    * `'data'` any number of times, on the `res` object\\n     * * (`req.abort()` called here)\\n     * * `'abort'`\\n     * * `'aborted'` on the `res` object\\n     * * `'error'` on the `res` object with an error with message`'Error: aborted'` and code `'ECONNRESET'`.\\n     * * `'close'`\\n     * * `'close'` on the `res` object\\n     *\\n     * Setting the `timeout` option or using the `setTimeout()` function will\\n     * not abort the request or do anything besides add a `'timeout'` event.\\n     *\\n     * Passing an `AbortSignal` and then calling `abort` on the corresponding`AbortController` will behave the same way as calling `.destroy()` on the\\n     * request itself.\\n     * @since v0.3.6\\n     */\\n    function request(options: RequestOptions | string | URL, callback?: (res: IncomingMessage) => void): ClientRequest;\\n    function request(\\n        url: string | URL,\\n        options: RequestOptions,\\n        callback?: (res: IncomingMessage) => void,\\n    ): ClientRequest;\\n    /**\\n     * Since most requests are GET requests without bodies, Node.js provides this\\n     * convenience method. The only difference between this method and {@link request} is that it sets the method to GET and calls `req.end()`automatically. The callback must take care to consume the\\n     * response\\n     * data for reasons stated in {@link ClientRequest} section.\\n     *\\n     * The `callback` is invoked with a single argument that is an instance of {@link IncomingMessage}.\\n     *\\n     * JSON fetching example:\\n     *\\n     * ```js\\n     * http.get('http://localhost:8000/', (res) => {\\n     *   const { statusCode } = res;\\n     *   const contentType = res.headers['content-type'];\\n     *\\n     *   let error;\\n     *   // Any 2xx status code signals a successful response but\\n     *   // here we're only checking for 200.\\n     *   if (statusCode !== 200) {\\n     *     error = new Error('Request Failed.\\\\n' +\\n     *                       `Status Code: ${statusCode}`);\\n     *   } else if (!/^application\\\\/json/.test(contentType)) {\\n     *     error = new Error('Invalid content-type.\\\\n' +\\n     *                       `Expected application/json but received ${contentType}`);\\n     *   }\\n     *   if (error) {\\n     *     console.error(error.message);\\n     *     // Consume response data to free up memory\\n     *     res.resume();\\n     *     return;\\n     *   }\\n     *\\n     *   res.setEncoding('utf8');\\n     *   let rawData = '';\\n     *   res.on('data', (chunk) => { rawData += chunk; });\\n     *   res.on('end', () => {\\n     *     try {\\n     *       const parsedData = JSON.parse(rawData);\\n     *       console.log(parsedData);\\n     *     } catch (e) {\\n     *       console.error(e.message);\\n     *     }\\n     *   });\\n     * }).on('error', (e) => {\\n     *   console.error(`Got error: ${e.message}`);\\n     * });\\n     *\\n     * // Create a local server to receive data from\\n     * const server = http.createServer((req, res) => {\\n     *   res.writeHead(200, { 'Content-Type': 'application/json' });\\n     *   res.end(JSON.stringify({\\n     *     data: 'Hello World!'\\n     *   }));\\n     * });\\n     *\\n     * server.listen(8000);\\n     * ```\\n     * @since v0.3.6\\n     * @param options Accepts the same `options` as {@link request}, with the `method` always set to `GET`. Properties that are inherited from the prototype are ignored.\\n     */\\n    function get(options: RequestOptions | string | URL, callback?: (res: IncomingMessage) => void): ClientRequest;\\n    function get(url: string | URL, options: RequestOptions, callback?: (res: IncomingMessage) => void): ClientRequest;\\n\\n    /**\\n     * Performs the low-level validations on the provided name that are done when `res.setHeader(name, value)` is called.\\n     * Passing illegal value as name will result in a TypeError being thrown, identified by `code: 'ERR_INVALID_HTTP_TOKEN'`.\\n     * @param name Header name\\n     * @since v14.3.0\\n     */\\n    function validateHeaderName(name: string): void;\\n    /**\\n     * Performs the low-level validations on the provided value that are done when `res.setHeader(name, value)` is called.\\n     * Passing illegal value as value will result in a TypeError being thrown.\\n     * - Undefined value error is identified by `code: 'ERR_HTTP_INVALID_HEADER_VALUE'`.\\n     * - Invalid value character error is identified by `code: 'ERR_INVALID_CHAR'`.\\n     * @param name Header name\\n     * @param value Header value\\n     * @since v14.3.0\\n     */\\n    function validateHeaderValue(name: string, value: string): void;\\n\\n    /**\\n     * Set the maximum number of idle HTTP parsers. Default: 1000.\\n     * @param count\\n     * @since v18.8.0, v16.18.0\\n     */\\n    function setMaxIdleHTTPParsers(count: number): void;\\n\\n    let globalAgent: Agent;\\n    /**\\n     * Read-only property specifying the maximum allowed size of HTTP headers in bytes.\\n     * Defaults to 16KB. Configurable using the `--max-http-header-size` CLI option.\\n     */\\n    const maxHeaderSize: number;\\n}\\ndeclare module 'node:http' {\\n    export * from 'http';\\n}\\n\",\"file:///node_modules/@types/node/http2.d.ts\":\"/**\\n * The `http2` module provides an implementation of the [HTTP/2](https://tools.ietf.org/html/rfc7540) protocol. It\\n * can be accessed using:\\n *\\n * ```js\\n * const http2 = require('http2');\\n * ```\\n * @since v8.4.0\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/http2.js)\\n */\\ndeclare module 'http2' {\\n    import EventEmitter = require('node:events');\\n    import * as fs from 'node:fs';\\n    import * as net from 'node:net';\\n    import * as stream from 'node:stream';\\n    import * as tls from 'node:tls';\\n    import * as url from 'node:url';\\n    import { IncomingHttpHeaders as Http1IncomingHttpHeaders, OutgoingHttpHeaders, IncomingMessage, ServerResponse } from 'node:http';\\n    export { OutgoingHttpHeaders } from 'node:http';\\n    export interface IncomingHttpStatusHeader {\\n        ':status'?: number | undefined;\\n    }\\n    export interface IncomingHttpHeaders extends Http1IncomingHttpHeaders {\\n        ':path'?: string | undefined;\\n        ':method'?: string | undefined;\\n        ':authority'?: string | undefined;\\n        ':scheme'?: string | undefined;\\n    }\\n    // Http2Stream\\n    export interface StreamPriorityOptions {\\n        exclusive?: boolean | undefined;\\n        parent?: number | undefined;\\n        weight?: number | undefined;\\n        silent?: boolean | undefined;\\n    }\\n    export interface StreamState {\\n        localWindowSize?: number | undefined;\\n        state?: number | undefined;\\n        localClose?: number | undefined;\\n        remoteClose?: number | undefined;\\n        sumDependencyWeight?: number | undefined;\\n        weight?: number | undefined;\\n    }\\n    export interface ServerStreamResponseOptions {\\n        endStream?: boolean | undefined;\\n        waitForTrailers?: boolean | undefined;\\n    }\\n    export interface StatOptions {\\n        offset: number;\\n        length: number;\\n    }\\n    export interface ServerStreamFileResponseOptions {\\n        statCheck?(stats: fs.Stats, headers: OutgoingHttpHeaders, statOptions: StatOptions): void | boolean;\\n        waitForTrailers?: boolean | undefined;\\n        offset?: number | undefined;\\n        length?: number | undefined;\\n    }\\n    export interface ServerStreamFileResponseOptionsWithError extends ServerStreamFileResponseOptions {\\n        onError?(err: NodeJS.ErrnoException): void;\\n    }\\n    export interface Http2Stream extends stream.Duplex {\\n        /**\\n         * Set to `true` if the `Http2Stream` instance was aborted abnormally. When set,\\n         * the `'aborted'` event will have been emitted.\\n         * @since v8.4.0\\n         */\\n        readonly aborted: boolean;\\n        /**\\n         * This property shows the number of characters currently buffered to be written.\\n         * See `net.Socket.bufferSize` for details.\\n         * @since v11.2.0, v10.16.0\\n         */\\n        readonly bufferSize: number;\\n        /**\\n         * Set to `true` if the `Http2Stream` instance has been closed.\\n         * @since v9.4.0\\n         */\\n        readonly closed: boolean;\\n        /**\\n         * Set to `true` if the `Http2Stream` instance has been destroyed and is no longer\\n         * usable.\\n         * @since v8.4.0\\n         */\\n        readonly destroyed: boolean;\\n        /**\\n         * Set to `true` if the `END_STREAM` flag was set in the request or response\\n         * HEADERS frame received, indicating that no additional data should be received\\n         * and the readable side of the `Http2Stream` will be closed.\\n         * @since v10.11.0\\n         */\\n        readonly endAfterHeaders: boolean;\\n        /**\\n         * The numeric stream identifier of this `Http2Stream` instance. Set to `undefined`if the stream identifier has not yet been assigned.\\n         * @since v8.4.0\\n         */\\n        readonly id?: number | undefined;\\n        /**\\n         * Set to `true` if the `Http2Stream` instance has not yet been assigned a\\n         * numeric stream identifier.\\n         * @since v9.4.0\\n         */\\n        readonly pending: boolean;\\n        /**\\n         * Set to the `RST_STREAM` `error code` reported when the `Http2Stream` is\\n         * destroyed after either receiving an `RST_STREAM` frame from the connected peer,\\n         * calling `http2stream.close()`, or `http2stream.destroy()`. Will be`undefined` if the `Http2Stream` has not been closed.\\n         * @since v8.4.0\\n         */\\n        readonly rstCode: number;\\n        /**\\n         * An object containing the outbound headers sent for this `Http2Stream`.\\n         * @since v9.5.0\\n         */\\n        readonly sentHeaders: OutgoingHttpHeaders;\\n        /**\\n         * An array of objects containing the outbound informational (additional) headers\\n         * sent for this `Http2Stream`.\\n         * @since v9.5.0\\n         */\\n        readonly sentInfoHeaders?: OutgoingHttpHeaders[] | undefined;\\n        /**\\n         * An object containing the outbound trailers sent for this `HttpStream`.\\n         * @since v9.5.0\\n         */\\n        readonly sentTrailers?: OutgoingHttpHeaders | undefined;\\n        /**\\n         * A reference to the `Http2Session` instance that owns this `Http2Stream`. The\\n         * value will be `undefined` after the `Http2Stream` instance is destroyed.\\n         * @since v8.4.0\\n         */\\n        readonly session: Http2Session;\\n        /**\\n         * Provides miscellaneous information about the current state of the`Http2Stream`.\\n         *\\n         * A current state of this `Http2Stream`.\\n         * @since v8.4.0\\n         */\\n        readonly state: StreamState;\\n        /**\\n         * Closes the `Http2Stream` instance by sending an `RST_STREAM` frame to the\\n         * connected HTTP/2 peer.\\n         * @since v8.4.0\\n         * @param [code=http2.constants.NGHTTP2_NO_ERROR] Unsigned 32-bit integer identifying the error code.\\n         * @param callback An optional function registered to listen for the `'close'` event.\\n         */\\n        close(code?: number, callback?: () => void): void;\\n        /**\\n         * Updates the priority for this `Http2Stream` instance.\\n         * @since v8.4.0\\n         */\\n        priority(options: StreamPriorityOptions): void;\\n        /**\\n         * ```js\\n         * const http2 = require('http2');\\n         * const client = http2.connect('http://example.org:8000');\\n         * const { NGHTTP2_CANCEL } = http2.constants;\\n         * const req = client.request({ ':path': '/' });\\n         *\\n         * // Cancel the stream if there's no activity after 5 seconds\\n         * req.setTimeout(5000, () => req.close(NGHTTP2_CANCEL));\\n         * ```\\n         * @since v8.4.0\\n         */\\n        setTimeout(msecs: number, callback?: () => void): void;\\n        /**\\n         * Sends a trailing `HEADERS` frame to the connected HTTP/2 peer. This method\\n         * will cause the `Http2Stream` to be immediately closed and must only be\\n         * called after the `'wantTrailers'` event has been emitted. When sending a\\n         * request or sending a response, the `options.waitForTrailers` option must be set\\n         * in order to keep the `Http2Stream` open after the final `DATA` frame so that\\n         * trailers can be sent.\\n         *\\n         * ```js\\n         * const http2 = require('http2');\\n         * const server = http2.createServer();\\n         * server.on('stream', (stream) => {\\n         *   stream.respond(undefined, { waitForTrailers: true });\\n         *   stream.on('wantTrailers', () => {\\n         *     stream.sendTrailers({ xyz: 'abc' });\\n         *   });\\n         *   stream.end('Hello World');\\n         * });\\n         * ```\\n         *\\n         * The HTTP/1 specification forbids trailers from containing HTTP/2 pseudo-header\\n         * fields (e.g. `':method'`, `':path'`, etc).\\n         * @since v10.0.0\\n         */\\n        sendTrailers(headers: OutgoingHttpHeaders): void;\\n        addListener(event: 'aborted', listener: () => void): this;\\n        addListener(event: 'close', listener: () => void): this;\\n        addListener(event: 'data', listener: (chunk: Buffer | string) => void): this;\\n        addListener(event: 'drain', listener: () => void): this;\\n        addListener(event: 'end', listener: () => void): this;\\n        addListener(event: 'error', listener: (err: Error) => void): this;\\n        addListener(event: 'finish', listener: () => void): this;\\n        addListener(event: 'frameError', listener: (frameType: number, errorCode: number) => void): this;\\n        addListener(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        addListener(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        addListener(event: 'streamClosed', listener: (code: number) => void): this;\\n        addListener(event: 'timeout', listener: () => void): this;\\n        addListener(event: 'trailers', listener: (trailers: IncomingHttpHeaders, flags: number) => void): this;\\n        addListener(event: 'wantTrailers', listener: () => void): this;\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        emit(event: 'aborted'): boolean;\\n        emit(event: 'close'): boolean;\\n        emit(event: 'data', chunk: Buffer | string): boolean;\\n        emit(event: 'drain'): boolean;\\n        emit(event: 'end'): boolean;\\n        emit(event: 'error', err: Error): boolean;\\n        emit(event: 'finish'): boolean;\\n        emit(event: 'frameError', frameType: number, errorCode: number): boolean;\\n        emit(event: 'pipe', src: stream.Readable): boolean;\\n        emit(event: 'unpipe', src: stream.Readable): boolean;\\n        emit(event: 'streamClosed', code: number): boolean;\\n        emit(event: 'timeout'): boolean;\\n        emit(event: 'trailers', trailers: IncomingHttpHeaders, flags: number): boolean;\\n        emit(event: 'wantTrailers'): boolean;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        on(event: 'aborted', listener: () => void): this;\\n        on(event: 'close', listener: () => void): this;\\n        on(event: 'data', listener: (chunk: Buffer | string) => void): this;\\n        on(event: 'drain', listener: () => void): this;\\n        on(event: 'end', listener: () => void): this;\\n        on(event: 'error', listener: (err: Error) => void): this;\\n        on(event: 'finish', listener: () => void): this;\\n        on(event: 'frameError', listener: (frameType: number, errorCode: number) => void): this;\\n        on(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        on(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        on(event: 'streamClosed', listener: (code: number) => void): this;\\n        on(event: 'timeout', listener: () => void): this;\\n        on(event: 'trailers', listener: (trailers: IncomingHttpHeaders, flags: number) => void): this;\\n        on(event: 'wantTrailers', listener: () => void): this;\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\n        once(event: 'aborted', listener: () => void): this;\\n        once(event: 'close', listener: () => void): this;\\n        once(event: 'data', listener: (chunk: Buffer | string) => void): this;\\n        once(event: 'drain', listener: () => void): this;\\n        once(event: 'end', listener: () => void): this;\\n        once(event: 'error', listener: (err: Error) => void): this;\\n        once(event: 'finish', listener: () => void): this;\\n        once(event: 'frameError', listener: (frameType: number, errorCode: number) => void): this;\\n        once(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        once(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        once(event: 'streamClosed', listener: (code: number) => void): this;\\n        once(event: 'timeout', listener: () => void): this;\\n        once(event: 'trailers', listener: (trailers: IncomingHttpHeaders, flags: number) => void): this;\\n        once(event: 'wantTrailers', listener: () => void): this;\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'aborted', listener: () => void): this;\\n        prependListener(event: 'close', listener: () => void): this;\\n        prependListener(event: 'data', listener: (chunk: Buffer | string) => void): this;\\n        prependListener(event: 'drain', listener: () => void): this;\\n        prependListener(event: 'end', listener: () => void): this;\\n        prependListener(event: 'error', listener: (err: Error) => void): this;\\n        prependListener(event: 'finish', listener: () => void): this;\\n        prependListener(event: 'frameError', listener: (frameType: number, errorCode: number) => void): this;\\n        prependListener(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        prependListener(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        prependListener(event: 'streamClosed', listener: (code: number) => void): this;\\n        prependListener(event: 'timeout', listener: () => void): this;\\n        prependListener(event: 'trailers', listener: (trailers: IncomingHttpHeaders, flags: number) => void): this;\\n        prependListener(event: 'wantTrailers', listener: () => void): this;\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'aborted', listener: () => void): this;\\n        prependOnceListener(event: 'close', listener: () => void): this;\\n        prependOnceListener(event: 'data', listener: (chunk: Buffer | string) => void): this;\\n        prependOnceListener(event: 'drain', listener: () => void): this;\\n        prependOnceListener(event: 'end', listener: () => void): this;\\n        prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n        prependOnceListener(event: 'finish', listener: () => void): this;\\n        prependOnceListener(event: 'frameError', listener: (frameType: number, errorCode: number) => void): this;\\n        prependOnceListener(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        prependOnceListener(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        prependOnceListener(event: 'streamClosed', listener: (code: number) => void): this;\\n        prependOnceListener(event: 'timeout', listener: () => void): this;\\n        prependOnceListener(event: 'trailers', listener: (trailers: IncomingHttpHeaders, flags: number) => void): this;\\n        prependOnceListener(event: 'wantTrailers', listener: () => void): this;\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n    }\\n    export interface ClientHttp2Stream extends Http2Stream {\\n        addListener(event: 'continue', listener: () => {}): this;\\n        addListener(event: 'headers', listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\n        addListener(event: 'push', listener: (headers: IncomingHttpHeaders, flags: number) => void): this;\\n        addListener(event: 'response', listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        emit(event: 'continue'): boolean;\\n        emit(event: 'headers', headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number): boolean;\\n        emit(event: 'push', headers: IncomingHttpHeaders, flags: number): boolean;\\n        emit(event: 'response', headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number): boolean;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        on(event: 'continue', listener: () => {}): this;\\n        on(event: 'headers', listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\n        on(event: 'push', listener: (headers: IncomingHttpHeaders, flags: number) => void): this;\\n        on(event: 'response', listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\n        once(event: 'continue', listener: () => {}): this;\\n        once(event: 'headers', listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\n        once(event: 'push', listener: (headers: IncomingHttpHeaders, flags: number) => void): this;\\n        once(event: 'response', listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'continue', listener: () => {}): this;\\n        prependListener(event: 'headers', listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\n        prependListener(event: 'push', listener: (headers: IncomingHttpHeaders, flags: number) => void): this;\\n        prependListener(event: 'response', listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'continue', listener: () => {}): this;\\n        prependOnceListener(event: 'headers', listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\n        prependOnceListener(event: 'push', listener: (headers: IncomingHttpHeaders, flags: number) => void): this;\\n        prependOnceListener(event: 'response', listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n    }\\n    export interface ServerHttp2Stream extends Http2Stream {\\n        /**\\n         * True if headers were sent, false otherwise (read-only).\\n         * @since v8.4.0\\n         */\\n        readonly headersSent: boolean;\\n        /**\\n         * Read-only property mapped to the `SETTINGS_ENABLE_PUSH` flag of the remote\\n         * client's most recent `SETTINGS` frame. Will be `true` if the remote peer\\n         * accepts push streams, `false` otherwise. Settings are the same for every`Http2Stream` in the same `Http2Session`.\\n         * @since v8.4.0\\n         */\\n        readonly pushAllowed: boolean;\\n        /**\\n         * Sends an additional informational `HEADERS` frame to the connected HTTP/2 peer.\\n         * @since v8.4.0\\n         */\\n        additionalHeaders(headers: OutgoingHttpHeaders): void;\\n        /**\\n         * Initiates a push stream. The callback is invoked with the new `Http2Stream`instance created for the push stream passed as the second argument, or an`Error` passed as the first argument.\\n         *\\n         * ```js\\n         * const http2 = require('http2');\\n         * const server = http2.createServer();\\n         * server.on('stream', (stream) => {\\n         *   stream.respond({ ':status': 200 });\\n         *   stream.pushStream({ ':path': '/' }, (err, pushStream, headers) => {\\n         *     if (err) throw err;\\n         *     pushStream.respond({ ':status': 200 });\\n         *     pushStream.end('some pushed data');\\n         *   });\\n         *   stream.end('some data');\\n         * });\\n         * ```\\n         *\\n         * Setting the weight of a push stream is not allowed in the `HEADERS` frame. Pass\\n         * a `weight` value to `http2stream.priority` with the `silent` option set to`true` to enable server-side bandwidth balancing between concurrent streams.\\n         *\\n         * Calling `http2stream.pushStream()` from within a pushed stream is not permitted\\n         * and will throw an error.\\n         * @since v8.4.0\\n         * @param callback Callback that is called once the push stream has been initiated.\\n         */\\n        pushStream(headers: OutgoingHttpHeaders, callback?: (err: Error | null, pushStream: ServerHttp2Stream, headers: OutgoingHttpHeaders) => void): void;\\n        pushStream(headers: OutgoingHttpHeaders, options?: StreamPriorityOptions, callback?: (err: Error | null, pushStream: ServerHttp2Stream, headers: OutgoingHttpHeaders) => void): void;\\n        /**\\n         * ```js\\n         * const http2 = require('http2');\\n         * const server = http2.createServer();\\n         * server.on('stream', (stream) => {\\n         *   stream.respond({ ':status': 200 });\\n         *   stream.end('some data');\\n         * });\\n         * ```\\n         *\\n         * When the `options.waitForTrailers` option is set, the `'wantTrailers'` event\\n         * will be emitted immediately after queuing the last chunk of payload data to be\\n         * sent. The `http2stream.sendTrailers()` method can then be used to sent trailing\\n         * header fields to the peer.\\n         *\\n         * When `options.waitForTrailers` is set, the `Http2Stream` will not automatically\\n         * close when the final `DATA` frame is transmitted. User code must call either`http2stream.sendTrailers()` or `http2stream.close()` to close the`Http2Stream`.\\n         *\\n         * ```js\\n         * const http2 = require('http2');\\n         * const server = http2.createServer();\\n         * server.on('stream', (stream) => {\\n         *   stream.respond({ ':status': 200 }, { waitForTrailers: true });\\n         *   stream.on('wantTrailers', () => {\\n         *     stream.sendTrailers({ ABC: 'some value to send' });\\n         *   });\\n         *   stream.end('some data');\\n         * });\\n         * ```\\n         * @since v8.4.0\\n         */\\n        respond(headers?: OutgoingHttpHeaders, options?: ServerStreamResponseOptions): void;\\n        /**\\n         * Initiates a response whose data is read from the given file descriptor. No\\n         * validation is performed on the given file descriptor. If an error occurs while\\n         * attempting to read data using the file descriptor, the `Http2Stream` will be\\n         * closed using an `RST_STREAM` frame using the standard `INTERNAL_ERROR` code.\\n         *\\n         * When used, the `Http2Stream` object's `Duplex` interface will be closed\\n         * automatically.\\n         *\\n         * ```js\\n         * const http2 = require('http2');\\n         * const fs = require('fs');\\n         *\\n         * const server = http2.createServer();\\n         * server.on('stream', (stream) => {\\n         *   const fd = fs.openSync('/some/file', 'r');\\n         *\\n         *   const stat = fs.fstatSync(fd);\\n         *   const headers = {\\n         *     'content-length': stat.size,\\n         *     'last-modified': stat.mtime.toUTCString(),\\n         *     'content-type': 'text/plain; charset=utf-8'\\n         *   };\\n         *   stream.respondWithFD(fd, headers);\\n         *   stream.on('close', () => fs.closeSync(fd));\\n         * });\\n         * ```\\n         *\\n         * The optional `options.statCheck` function may be specified to give user code\\n         * an opportunity to set additional content headers based on the `fs.Stat` details\\n         * of the given fd. If the `statCheck` function is provided, the`http2stream.respondWithFD()` method will perform an `fs.fstat()` call to\\n         * collect details on the provided file descriptor.\\n         *\\n         * The `offset` and `length` options may be used to limit the response to a\\n         * specific range subset. This can be used, for instance, to support HTTP Range\\n         * requests.\\n         *\\n         * The file descriptor or `FileHandle` is not closed when the stream is closed,\\n         * so it will need to be closed manually once it is no longer needed.\\n         * Using the same file descriptor concurrently for multiple streams\\n         * is not supported and may result in data loss. Re-using a file descriptor\\n         * after a stream has finished is supported.\\n         *\\n         * When the `options.waitForTrailers` option is set, the `'wantTrailers'` event\\n         * will be emitted immediately after queuing the last chunk of payload data to be\\n         * sent. The `http2stream.sendTrailers()` method can then be used to sent trailing\\n         * header fields to the peer.\\n         *\\n         * When `options.waitForTrailers` is set, the `Http2Stream` will not automatically\\n         * close when the final `DATA` frame is transmitted. User code _must_ call either`http2stream.sendTrailers()` or `http2stream.close()` to close the`Http2Stream`.\\n         *\\n         * ```js\\n         * const http2 = require('http2');\\n         * const fs = require('fs');\\n         *\\n         * const server = http2.createServer();\\n         * server.on('stream', (stream) => {\\n         *   const fd = fs.openSync('/some/file', 'r');\\n         *\\n         *   const stat = fs.fstatSync(fd);\\n         *   const headers = {\\n         *     'content-length': stat.size,\\n         *     'last-modified': stat.mtime.toUTCString(),\\n         *     'content-type': 'text/plain; charset=utf-8'\\n         *   };\\n         *   stream.respondWithFD(fd, headers, { waitForTrailers: true });\\n         *   stream.on('wantTrailers', () => {\\n         *     stream.sendTrailers({ ABC: 'some value to send' });\\n         *   });\\n         *\\n         *   stream.on('close', () => fs.closeSync(fd));\\n         * });\\n         * ```\\n         * @since v8.4.0\\n         * @param fd A readable file descriptor.\\n         */\\n        respondWithFD(fd: number | fs.promises.FileHandle, headers?: OutgoingHttpHeaders, options?: ServerStreamFileResponseOptions): void;\\n        /**\\n         * Sends a regular file as the response. The `path` must specify a regular file\\n         * or an `'error'` event will be emitted on the `Http2Stream` object.\\n         *\\n         * When used, the `Http2Stream` object's `Duplex` interface will be closed\\n         * automatically.\\n         *\\n         * The optional `options.statCheck` function may be specified to give user code\\n         * an opportunity to set additional content headers based on the `fs.Stat` details\\n         * of the given file:\\n         *\\n         * If an error occurs while attempting to read the file data, the `Http2Stream`will be closed using an `RST_STREAM` frame using the standard `INTERNAL_ERROR`code. If the `onError` callback is\\n         * defined, then it will be called. Otherwise\\n         * the stream will be destroyed.\\n         *\\n         * Example using a file path:\\n         *\\n         * ```js\\n         * const http2 = require('http2');\\n         * const server = http2.createServer();\\n         * server.on('stream', (stream) => {\\n         *   function statCheck(stat, headers) {\\n         *     headers['last-modified'] = stat.mtime.toUTCString();\\n         *   }\\n         *\\n         *   function onError(err) {\\n         *     // stream.respond() can throw if the stream has been destroyed by\\n         *     // the other side.\\n         *     try {\\n         *       if (err.code === 'ENOENT') {\\n         *         stream.respond({ ':status': 404 });\\n         *       } else {\\n         *         stream.respond({ ':status': 500 });\\n         *       }\\n         *     } catch (err) {\\n         *       // Perform actual error handling.\\n         *       console.log(err);\\n         *     }\\n         *     stream.end();\\n         *   }\\n         *\\n         *   stream.respondWithFile('/some/file',\\n         *                          { 'content-type': 'text/plain; charset=utf-8' },\\n         *                          { statCheck, onError });\\n         * });\\n         * ```\\n         *\\n         * The `options.statCheck` function may also be used to cancel the send operation\\n         * by returning `false`. For instance, a conditional request may check the stat\\n         * results to determine if the file has been modified to return an appropriate`304` response:\\n         *\\n         * ```js\\n         * const http2 = require('http2');\\n         * const server = http2.createServer();\\n         * server.on('stream', (stream) => {\\n         *   function statCheck(stat, headers) {\\n         *     // Check the stat here...\\n         *     stream.respond({ ':status': 304 });\\n         *     return false; // Cancel the send operation\\n         *   }\\n         *   stream.respondWithFile('/some/file',\\n         *                          { 'content-type': 'text/plain; charset=utf-8' },\\n         *                          { statCheck });\\n         * });\\n         * ```\\n         *\\n         * The `content-length` header field will be automatically set.\\n         *\\n         * The `offset` and `length` options may be used to limit the response to a\\n         * specific range subset. This can be used, for instance, to support HTTP Range\\n         * requests.\\n         *\\n         * The `options.onError` function may also be used to handle all the errors\\n         * that could happen before the delivery of the file is initiated. The\\n         * default behavior is to destroy the stream.\\n         *\\n         * When the `options.waitForTrailers` option is set, the `'wantTrailers'` event\\n         * will be emitted immediately after queuing the last chunk of payload data to be\\n         * sent. The `http2stream.sendTrailers()` method can then be used to sent trailing\\n         * header fields to the peer.\\n         *\\n         * When `options.waitForTrailers` is set, the `Http2Stream` will not automatically\\n         * close when the final `DATA` frame is transmitted. User code must call either`http2stream.sendTrailers()` or `http2stream.close()` to close the`Http2Stream`.\\n         *\\n         * ```js\\n         * const http2 = require('http2');\\n         * const server = http2.createServer();\\n         * server.on('stream', (stream) => {\\n         *   stream.respondWithFile('/some/file',\\n         *                          { 'content-type': 'text/plain; charset=utf-8' },\\n         *                          { waitForTrailers: true });\\n         *   stream.on('wantTrailers', () => {\\n         *     stream.sendTrailers({ ABC: 'some value to send' });\\n         *   });\\n         * });\\n         * ```\\n         * @since v8.4.0\\n         */\\n        respondWithFile(path: string, headers?: OutgoingHttpHeaders, options?: ServerStreamFileResponseOptionsWithError): void;\\n    }\\n    // Http2Session\\n    export interface Settings {\\n        headerTableSize?: number | undefined;\\n        enablePush?: boolean | undefined;\\n        initialWindowSize?: number | undefined;\\n        maxFrameSize?: number | undefined;\\n        maxConcurrentStreams?: number | undefined;\\n        maxHeaderListSize?: number | undefined;\\n        enableConnectProtocol?: boolean | undefined;\\n    }\\n    export interface ClientSessionRequestOptions {\\n        endStream?: boolean | undefined;\\n        exclusive?: boolean | undefined;\\n        parent?: number | undefined;\\n        weight?: number | undefined;\\n        waitForTrailers?: boolean | undefined;\\n        signal?: AbortSignal | undefined;\\n    }\\n    export interface SessionState {\\n        effectiveLocalWindowSize?: number | undefined;\\n        effectiveRecvDataLength?: number | undefined;\\n        nextStreamID?: number | undefined;\\n        localWindowSize?: number | undefined;\\n        lastProcStreamID?: number | undefined;\\n        remoteWindowSize?: number | undefined;\\n        outboundQueueSize?: number | undefined;\\n        deflateDynamicTableSize?: number | undefined;\\n        inflateDynamicTableSize?: number | undefined;\\n    }\\n    export interface Http2Session extends EventEmitter {\\n        /**\\n         * Value will be `undefined` if the `Http2Session` is not yet connected to a\\n         * socket, `h2c` if the `Http2Session` is not connected to a `TLSSocket`, or\\n         * will return the value of the connected `TLSSocket`'s own `alpnProtocol`property.\\n         * @since v9.4.0\\n         */\\n        readonly alpnProtocol?: string | undefined;\\n        /**\\n         * Will be `true` if this `Http2Session` instance has been closed, otherwise`false`.\\n         * @since v9.4.0\\n         */\\n        readonly closed: boolean;\\n        /**\\n         * Will be `true` if this `Http2Session` instance is still connecting, will be set\\n         * to `false` before emitting `connect` event and/or calling the `http2.connect`callback.\\n         * @since v10.0.0\\n         */\\n        readonly connecting: boolean;\\n        /**\\n         * Will be `true` if this `Http2Session` instance has been destroyed and must no\\n         * longer be used, otherwise `false`.\\n         * @since v8.4.0\\n         */\\n        readonly destroyed: boolean;\\n        /**\\n         * Value is `undefined` if the `Http2Session` session socket has not yet been\\n         * connected, `true` if the `Http2Session` is connected with a `TLSSocket`,\\n         * and `false` if the `Http2Session` is connected to any other kind of socket\\n         * or stream.\\n         * @since v9.4.0\\n         */\\n        readonly encrypted?: boolean | undefined;\\n        /**\\n         * A prototype-less object describing the current local settings of this`Http2Session`. The local settings are local to _this_`Http2Session` instance.\\n         * @since v8.4.0\\n         */\\n        readonly localSettings: Settings;\\n        /**\\n         * If the `Http2Session` is connected to a `TLSSocket`, the `originSet` property\\n         * will return an `Array` of origins for which the `Http2Session` may be\\n         * considered authoritative.\\n         *\\n         * The `originSet` property is only available when using a secure TLS connection.\\n         * @since v9.4.0\\n         */\\n        readonly originSet?: string[] | undefined;\\n        /**\\n         * Indicates whether the `Http2Session` is currently waiting for acknowledgment of\\n         * a sent `SETTINGS` frame. Will be `true` after calling the`http2session.settings()` method. Will be `false` once all sent `SETTINGS`frames have been acknowledged.\\n         * @since v8.4.0\\n         */\\n        readonly pendingSettingsAck: boolean;\\n        /**\\n         * A prototype-less object describing the current remote settings of this`Http2Session`. The remote settings are set by the _connected_ HTTP/2 peer.\\n         * @since v8.4.0\\n         */\\n        readonly remoteSettings: Settings;\\n        /**\\n         * Returns a `Proxy` object that acts as a `net.Socket` (or `tls.TLSSocket`) but\\n         * limits available methods to ones safe to use with HTTP/2.\\n         *\\n         * `destroy`, `emit`, `end`, `pause`, `read`, `resume`, and `write` will throw\\n         * an error with code `ERR_HTTP2_NO_SOCKET_MANIPULATION`. See `Http2Session and Sockets` for more information.\\n         *\\n         * `setTimeout` method will be called on this `Http2Session`.\\n         *\\n         * All other interactions will be routed directly to the socket.\\n         * @since v8.4.0\\n         */\\n        readonly socket: net.Socket | tls.TLSSocket;\\n        /**\\n         * Provides miscellaneous information about the current state of the`Http2Session`.\\n         *\\n         * An object describing the current status of this `Http2Session`.\\n         * @since v8.4.0\\n         */\\n        readonly state: SessionState;\\n        /**\\n         * The `http2session.type` will be equal to`http2.constants.NGHTTP2_SESSION_SERVER` if this `Http2Session` instance is a\\n         * server, and `http2.constants.NGHTTP2_SESSION_CLIENT` if the instance is a\\n         * client.\\n         * @since v8.4.0\\n         */\\n        readonly type: number;\\n        /**\\n         * Gracefully closes the `Http2Session`, allowing any existing streams to\\n         * complete on their own and preventing new `Http2Stream` instances from being\\n         * created. Once closed, `http2session.destroy()`_might_ be called if there\\n         * are no open `Http2Stream` instances.\\n         *\\n         * If specified, the `callback` function is registered as a handler for the`'close'` event.\\n         * @since v9.4.0\\n         */\\n        close(callback?: () => void): void;\\n        /**\\n         * Immediately terminates the `Http2Session` and the associated `net.Socket` or`tls.TLSSocket`.\\n         *\\n         * Once destroyed, the `Http2Session` will emit the `'close'` event. If `error`is not undefined, an `'error'` event will be emitted immediately before the`'close'` event.\\n         *\\n         * If there are any remaining open `Http2Streams` associated with the`Http2Session`, those will also be destroyed.\\n         * @since v8.4.0\\n         * @param error An `Error` object if the `Http2Session` is being destroyed due to an error.\\n         * @param code The HTTP/2 error code to send in the final `GOAWAY` frame. If unspecified, and `error` is not undefined, the default is `INTERNAL_ERROR`, otherwise defaults to `NO_ERROR`.\\n         */\\n        destroy(error?: Error, code?: number): void;\\n        /**\\n         * Transmits a `GOAWAY` frame to the connected peer _without_ shutting down the`Http2Session`.\\n         * @since v9.4.0\\n         * @param code An HTTP/2 error code\\n         * @param lastStreamID The numeric ID of the last processed `Http2Stream`\\n         * @param opaqueData A `TypedArray` or `DataView` instance containing additional data to be carried within the `GOAWAY` frame.\\n         */\\n        goaway(code?: number, lastStreamID?: number, opaqueData?: NodeJS.ArrayBufferView): void;\\n        /**\\n         * Sends a `PING` frame to the connected HTTP/2 peer. A `callback` function must\\n         * be provided. The method will return `true` if the `PING` was sent, `false`otherwise.\\n         *\\n         * The maximum number of outstanding (unacknowledged) pings is determined by the`maxOutstandingPings` configuration option. The default maximum is 10.\\n         *\\n         * If provided, the `payload` must be a `Buffer`, `TypedArray`, or `DataView`containing 8 bytes of data that will be transmitted with the `PING` and\\n         * returned with the ping acknowledgment.\\n         *\\n         * The callback will be invoked with three arguments: an error argument that will\\n         * be `null` if the `PING` was successfully acknowledged, a `duration` argument\\n         * that reports the number of milliseconds elapsed since the ping was sent and the\\n         * acknowledgment was received, and a `Buffer` containing the 8-byte `PING`payload.\\n         *\\n         * ```js\\n         * session.ping(Buffer.from('abcdefgh'), (err, duration, payload) => {\\n         *   if (!err) {\\n         *     console.log(`Ping acknowledged in ${duration} milliseconds`);\\n         *     console.log(`With payload '${payload.toString()}'`);\\n         *   }\\n         * });\\n         * ```\\n         *\\n         * If the `payload` argument is not specified, the default payload will be the\\n         * 64-bit timestamp (little endian) marking the start of the `PING` duration.\\n         * @since v8.9.3\\n         * @param payload Optional ping payload.\\n         */\\n        ping(callback: (err: Error | null, duration: number, payload: Buffer) => void): boolean;\\n        ping(payload: NodeJS.ArrayBufferView, callback: (err: Error | null, duration: number, payload: Buffer) => void): boolean;\\n        /**\\n         * Calls `ref()` on this `Http2Session`instance's underlying `net.Socket`.\\n         * @since v9.4.0\\n         */\\n        ref(): void;\\n        /**\\n         * Sets the local endpoint's window size.\\n         * The `windowSize` is the total window size to set, not\\n         * the delta.\\n         *\\n         * ```js\\n         * const http2 = require('http2');\\n         *\\n         * const server = http2.createServer();\\n         * const expectedWindowSize = 2 ** 20;\\n         * server.on('connect', (session) => {\\n         *\\n         *   // Set local window size to be 2 ** 20\\n         *   session.setLocalWindowSize(expectedWindowSize);\\n         * });\\n         * ```\\n         * @since v15.3.0, v14.18.0\\n         */\\n        setLocalWindowSize(windowSize: number): void;\\n        /**\\n         * Used to set a callback function that is called when there is no activity on\\n         * the `Http2Session` after `msecs` milliseconds. The given `callback` is\\n         * registered as a listener on the `'timeout'` event.\\n         * @since v8.4.0\\n         */\\n        setTimeout(msecs: number, callback?: () => void): void;\\n        /**\\n         * Updates the current local settings for this `Http2Session` and sends a new`SETTINGS` frame to the connected HTTP/2 peer.\\n         *\\n         * Once called, the `http2session.pendingSettingsAck` property will be `true`while the session is waiting for the remote peer to acknowledge the new\\n         * settings.\\n         *\\n         * The new settings will not become effective until the `SETTINGS` acknowledgment\\n         * is received and the `'localSettings'` event is emitted. It is possible to send\\n         * multiple `SETTINGS` frames while acknowledgment is still pending.\\n         * @since v8.4.0\\n         * @param callback Callback that is called once the session is connected or right away if the session is already connected.\\n         */\\n        settings(settings: Settings, callback?: (err: Error | null, settings: Settings, duration: number) => void): void;\\n        /**\\n         * Calls `unref()` on this `Http2Session`instance's underlying `net.Socket`.\\n         * @since v9.4.0\\n         */\\n        unref(): void;\\n        addListener(event: 'close', listener: () => void): this;\\n        addListener(event: 'error', listener: (err: Error) => void): this;\\n        addListener(event: 'frameError', listener: (frameType: number, errorCode: number, streamID: number) => void): this;\\n        addListener(event: 'goaway', listener: (errorCode: number, lastStreamID: number, opaqueData: Buffer) => void): this;\\n        addListener(event: 'localSettings', listener: (settings: Settings) => void): this;\\n        addListener(event: 'ping', listener: () => void): this;\\n        addListener(event: 'remoteSettings', listener: (settings: Settings) => void): this;\\n        addListener(event: 'timeout', listener: () => void): this;\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        emit(event: 'close'): boolean;\\n        emit(event: 'error', err: Error): boolean;\\n        emit(event: 'frameError', frameType: number, errorCode: number, streamID: number): boolean;\\n        emit(event: 'goaway', errorCode: number, lastStreamID: number, opaqueData: Buffer): boolean;\\n        emit(event: 'localSettings', settings: Settings): boolean;\\n        emit(event: 'ping'): boolean;\\n        emit(event: 'remoteSettings', settings: Settings): boolean;\\n        emit(event: 'timeout'): boolean;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        on(event: 'close', listener: () => void): this;\\n        on(event: 'error', listener: (err: Error) => void): this;\\n        on(event: 'frameError', listener: (frameType: number, errorCode: number, streamID: number) => void): this;\\n        on(event: 'goaway', listener: (errorCode: number, lastStreamID: number, opaqueData: Buffer) => void): this;\\n        on(event: 'localSettings', listener: (settings: Settings) => void): this;\\n        on(event: 'ping', listener: () => void): this;\\n        on(event: 'remoteSettings', listener: (settings: Settings) => void): this;\\n        on(event: 'timeout', listener: () => void): this;\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\n        once(event: 'close', listener: () => void): this;\\n        once(event: 'error', listener: (err: Error) => void): this;\\n        once(event: 'frameError', listener: (frameType: number, errorCode: number, streamID: number) => void): this;\\n        once(event: 'goaway', listener: (errorCode: number, lastStreamID: number, opaqueData: Buffer) => void): this;\\n        once(event: 'localSettings', listener: (settings: Settings) => void): this;\\n        once(event: 'ping', listener: () => void): this;\\n        once(event: 'remoteSettings', listener: (settings: Settings) => void): this;\\n        once(event: 'timeout', listener: () => void): this;\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'close', listener: () => void): this;\\n        prependListener(event: 'error', listener: (err: Error) => void): this;\\n        prependListener(event: 'frameError', listener: (frameType: number, errorCode: number, streamID: number) => void): this;\\n        prependListener(event: 'goaway', listener: (errorCode: number, lastStreamID: number, opaqueData: Buffer) => void): this;\\n        prependListener(event: 'localSettings', listener: (settings: Settings) => void): this;\\n        prependListener(event: 'ping', listener: () => void): this;\\n        prependListener(event: 'remoteSettings', listener: (settings: Settings) => void): this;\\n        prependListener(event: 'timeout', listener: () => void): this;\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'close', listener: () => void): this;\\n        prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n        prependOnceListener(event: 'frameError', listener: (frameType: number, errorCode: number, streamID: number) => void): this;\\n        prependOnceListener(event: 'goaway', listener: (errorCode: number, lastStreamID: number, opaqueData: Buffer) => void): this;\\n        prependOnceListener(event: 'localSettings', listener: (settings: Settings) => void): this;\\n        prependOnceListener(event: 'ping', listener: () => void): this;\\n        prependOnceListener(event: 'remoteSettings', listener: (settings: Settings) => void): this;\\n        prependOnceListener(event: 'timeout', listener: () => void): this;\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n    }\\n    export interface ClientHttp2Session extends Http2Session {\\n        /**\\n         * For HTTP/2 Client `Http2Session` instances only, the `http2session.request()`creates and returns an `Http2Stream` instance that can be used to send an\\n         * HTTP/2 request to the connected server.\\n         *\\n         * When a `ClientHttp2Session` is first created, the socket may not yet be\\n         * connected. if `clienthttp2session.request()` is called during this time, the\\n         * actual request will be deferred until the socket is ready to go.\\n         * If the `session` is closed before the actual request be executed, an`ERR_HTTP2_GOAWAY_SESSION` is thrown.\\n         *\\n         * This method is only available if `http2session.type` is equal to`http2.constants.NGHTTP2_SESSION_CLIENT`.\\n         *\\n         * ```js\\n         * const http2 = require('http2');\\n         * const clientSession = http2.connect('https://localhost:1234');\\n         * const {\\n         *   HTTP2_HEADER_PATH,\\n         *   HTTP2_HEADER_STATUS\\n         * } = http2.constants;\\n         *\\n         * const req = clientSession.request({ [HTTP2_HEADER_PATH]: '/' });\\n         * req.on('response', (headers) => {\\n         *   console.log(headers[HTTP2_HEADER_STATUS]);\\n         *   req.on('data', (chunk) => { // ..  });\\n         *   req.on('end', () => { // ..  });\\n         * });\\n         * ```\\n         *\\n         * When the `options.waitForTrailers` option is set, the `'wantTrailers'` event\\n         * is emitted immediately after queuing the last chunk of payload data to be sent.\\n         * The `http2stream.sendTrailers()` method can then be called to send trailing\\n         * headers to the peer.\\n         *\\n         * When `options.waitForTrailers` is set, the `Http2Stream` will not automatically\\n         * close when the final `DATA` frame is transmitted. User code must call either`http2stream.sendTrailers()` or `http2stream.close()` to close the`Http2Stream`.\\n         *\\n         * When `options.signal` is set with an `AbortSignal` and then `abort` on the\\n         * corresponding `AbortController` is called, the request will emit an `'error'`event with an `AbortError` error.\\n         *\\n         * The `:method` and `:path` pseudo-headers are not specified within `headers`,\\n         * they respectively default to:\\n         *\\n         * * `:method` \\\\= `'GET'`\\n         * * `:path` \\\\= `/`\\n         * @since v8.4.0\\n         */\\n        request(headers?: OutgoingHttpHeaders, options?: ClientSessionRequestOptions): ClientHttp2Stream;\\n        addListener(event: 'altsvc', listener: (alt: string, origin: string, stream: number) => void): this;\\n        addListener(event: 'origin', listener: (origins: string[]) => void): this;\\n        addListener(event: 'connect', listener: (session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\\n        addListener(event: 'stream', listener: (stream: ClientHttp2Stream, headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        emit(event: 'altsvc', alt: string, origin: string, stream: number): boolean;\\n        emit(event: 'origin', origins: ReadonlyArray<string>): boolean;\\n        emit(event: 'connect', session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket): boolean;\\n        emit(event: 'stream', stream: ClientHttp2Stream, headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number): boolean;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        on(event: 'altsvc', listener: (alt: string, origin: string, stream: number) => void): this;\\n        on(event: 'origin', listener: (origins: string[]) => void): this;\\n        on(event: 'connect', listener: (session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\\n        on(event: 'stream', listener: (stream: ClientHttp2Stream, headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\n        once(event: 'altsvc', listener: (alt: string, origin: string, stream: number) => void): this;\\n        once(event: 'origin', listener: (origins: string[]) => void): this;\\n        once(event: 'connect', listener: (session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\\n        once(event: 'stream', listener: (stream: ClientHttp2Stream, headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'altsvc', listener: (alt: string, origin: string, stream: number) => void): this;\\n        prependListener(event: 'origin', listener: (origins: string[]) => void): this;\\n        prependListener(event: 'connect', listener: (session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\\n        prependListener(event: 'stream', listener: (stream: ClientHttp2Stream, headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'altsvc', listener: (alt: string, origin: string, stream: number) => void): this;\\n        prependOnceListener(event: 'origin', listener: (origins: string[]) => void): this;\\n        prependOnceListener(event: 'connect', listener: (session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\\n        prependOnceListener(event: 'stream', listener: (stream: ClientHttp2Stream, headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n    }\\n    export interface AlternativeServiceOptions {\\n        origin: number | string | url.URL;\\n    }\\n    export interface ServerHttp2Session extends Http2Session {\\n        readonly server: Http2Server | Http2SecureServer;\\n        /**\\n         * Submits an `ALTSVC` frame (as defined by [RFC 7838](https://tools.ietf.org/html/rfc7838)) to the connected client.\\n         *\\n         * ```js\\n         * const http2 = require('http2');\\n         *\\n         * const server = http2.createServer();\\n         * server.on('session', (session) => {\\n         *   // Set altsvc for origin https://example.org:80\\n         *   session.altsvc('h2=\\\":8000\\\"', 'https://example.org:80');\\n         * });\\n         *\\n         * server.on('stream', (stream) => {\\n         *   // Set altsvc for a specific stream\\n         *   stream.session.altsvc('h2=\\\":8000\\\"', stream.id);\\n         * });\\n         * ```\\n         *\\n         * Sending an `ALTSVC` frame with a specific stream ID indicates that the alternate\\n         * service is associated with the origin of the given `Http2Stream`.\\n         *\\n         * The `alt` and origin string _must_ contain only ASCII bytes and are\\n         * strictly interpreted as a sequence of ASCII bytes. The special value `'clear'`may be passed to clear any previously set alternative service for a given\\n         * domain.\\n         *\\n         * When a string is passed for the `originOrStream` argument, it will be parsed as\\n         * a URL and the origin will be derived. For instance, the origin for the\\n         * HTTP URL `'https://example.org/foo/bar'` is the ASCII string`'https://example.org'`. An error will be thrown if either the given string\\n         * cannot be parsed as a URL or if a valid origin cannot be derived.\\n         *\\n         * A `URL` object, or any object with an `origin` property, may be passed as`originOrStream`, in which case the value of the `origin` property will be\\n         * used. The value of the `origin` property _must_ be a properly serialized\\n         * ASCII origin.\\n         * @since v9.4.0\\n         * @param alt A description of the alternative service configuration as defined by `RFC 7838`.\\n         * @param originOrStream Either a URL string specifying the origin (or an `Object` with an `origin` property) or the numeric identifier of an active `Http2Stream` as given by the\\n         * `http2stream.id` property.\\n         */\\n        altsvc(alt: string, originOrStream: number | string | url.URL | AlternativeServiceOptions): void;\\n        /**\\n         * Submits an `ORIGIN` frame (as defined by [RFC 8336](https://tools.ietf.org/html/rfc8336)) to the connected client\\n         * to advertise the set of origins for which the server is capable of providing\\n         * authoritative responses.\\n         *\\n         * ```js\\n         * const http2 = require('http2');\\n         * const options = getSecureOptionsSomehow();\\n         * const server = http2.createSecureServer(options);\\n         * server.on('stream', (stream) => {\\n         *   stream.respond();\\n         *   stream.end('ok');\\n         * });\\n         * server.on('session', (session) => {\\n         *   session.origin('https://example.com', 'https://example.org');\\n         * });\\n         * ```\\n         *\\n         * When a string is passed as an `origin`, it will be parsed as a URL and the\\n         * origin will be derived. For instance, the origin for the HTTP URL`'https://example.org/foo/bar'` is the ASCII string`'https://example.org'`. An error will be thrown if either the given\\n         * string\\n         * cannot be parsed as a URL or if a valid origin cannot be derived.\\n         *\\n         * A `URL` object, or any object with an `origin` property, may be passed as\\n         * an `origin`, in which case the value of the `origin` property will be\\n         * used. The value of the `origin` property _must_ be a properly serialized\\n         * ASCII origin.\\n         *\\n         * Alternatively, the `origins` option may be used when creating a new HTTP/2\\n         * server using the `http2.createSecureServer()` method:\\n         *\\n         * ```js\\n         * const http2 = require('http2');\\n         * const options = getSecureOptionsSomehow();\\n         * options.origins = ['https://example.com', 'https://example.org'];\\n         * const server = http2.createSecureServer(options);\\n         * server.on('stream', (stream) => {\\n         *   stream.respond();\\n         *   stream.end('ok');\\n         * });\\n         * ```\\n         * @since v10.12.0\\n         * @param origins One or more URL Strings passed as separate arguments.\\n         */\\n        origin(\\n            ...origins: Array<\\n                | string\\n                | url.URL\\n                | {\\n                      origin: string;\\n                  }\\n            >\\n        ): void;\\n        addListener(event: 'connect', listener: (session: ServerHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\\n        addListener(event: 'stream', listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        emit(event: 'connect', session: ServerHttp2Session, socket: net.Socket | tls.TLSSocket): boolean;\\n        emit(event: 'stream', stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number): boolean;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        on(event: 'connect', listener: (session: ServerHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\\n        on(event: 'stream', listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\n        once(event: 'connect', listener: (session: ServerHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\\n        once(event: 'stream', listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'connect', listener: (session: ServerHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\\n        prependListener(event: 'stream', listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'connect', listener: (session: ServerHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\\n        prependOnceListener(event: 'stream', listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n    }\\n    // Http2Server\\n    export interface SessionOptions {\\n        maxDeflateDynamicTableSize?: number | undefined;\\n        maxSessionMemory?: number | undefined;\\n        maxHeaderListPairs?: number | undefined;\\n        maxOutstandingPings?: number | undefined;\\n        maxSendHeaderBlockLength?: number | undefined;\\n        paddingStrategy?: number | undefined;\\n        peerMaxConcurrentStreams?: number | undefined;\\n        settings?: Settings | undefined;\\n        /**\\n         * Specifies a timeout in milliseconds that\\n         * a server should wait when an [`'unknownProtocol'`][] is emitted. If the\\n         * socket has not been destroyed by that time the server will destroy it.\\n         * @default 100000\\n         */\\n        unknownProtocolTimeout?: number | undefined;\\n        selectPadding?(frameLen: number, maxFrameLen: number): number;\\n    }\\n    export interface ClientSessionOptions extends SessionOptions {\\n        maxReservedRemoteStreams?: number | undefined;\\n        createConnection?: ((authority: url.URL, option: SessionOptions) => stream.Duplex) | undefined;\\n        protocol?: 'http:' | 'https:' | undefined;\\n    }\\n    export interface ServerSessionOptions extends SessionOptions {\\n        Http1IncomingMessage?: typeof IncomingMessage | undefined;\\n        Http1ServerResponse?: typeof ServerResponse | undefined;\\n        Http2ServerRequest?: typeof Http2ServerRequest | undefined;\\n        Http2ServerResponse?: typeof Http2ServerResponse | undefined;\\n    }\\n    export interface SecureClientSessionOptions extends ClientSessionOptions, tls.ConnectionOptions {}\\n    export interface SecureServerSessionOptions extends ServerSessionOptions, tls.TlsOptions {}\\n    export interface ServerOptions extends ServerSessionOptions {}\\n    export interface SecureServerOptions extends SecureServerSessionOptions {\\n        allowHTTP1?: boolean | undefined;\\n        origins?: string[] | undefined;\\n    }\\n    interface HTTP2ServerCommon {\\n        setTimeout(msec?: number, callback?: () => void): this;\\n        /**\\n         * Throws ERR_HTTP2_INVALID_SETTING_VALUE for invalid settings values.\\n         * Throws ERR_INVALID_ARG_TYPE for invalid settings argument.\\n         */\\n        updateSettings(settings: Settings): void;\\n    }\\n    export interface Http2Server extends net.Server, HTTP2ServerCommon {\\n        addListener(event: 'checkContinue', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        addListener(event: 'request', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        addListener(event: 'session', listener: (session: ServerHttp2Session) => void): this;\\n        addListener(event: 'sessionError', listener: (err: Error) => void): this;\\n        addListener(event: 'stream', listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\n        addListener(event: 'timeout', listener: () => void): this;\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        emit(event: 'checkContinue', request: Http2ServerRequest, response: Http2ServerResponse): boolean;\\n        emit(event: 'request', request: Http2ServerRequest, response: Http2ServerResponse): boolean;\\n        emit(event: 'session', session: ServerHttp2Session): boolean;\\n        emit(event: 'sessionError', err: Error): boolean;\\n        emit(event: 'stream', stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number): boolean;\\n        emit(event: 'timeout'): boolean;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        on(event: 'checkContinue', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        on(event: 'request', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        on(event: 'session', listener: (session: ServerHttp2Session) => void): this;\\n        on(event: 'sessionError', listener: (err: Error) => void): this;\\n        on(event: 'stream', listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\n        on(event: 'timeout', listener: () => void): this;\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\n        once(event: 'checkContinue', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        once(event: 'request', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        once(event: 'session', listener: (session: ServerHttp2Session) => void): this;\\n        once(event: 'sessionError', listener: (err: Error) => void): this;\\n        once(event: 'stream', listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\n        once(event: 'timeout', listener: () => void): this;\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'checkContinue', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        prependListener(event: 'request', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        prependListener(event: 'session', listener: (session: ServerHttp2Session) => void): this;\\n        prependListener(event: 'sessionError', listener: (err: Error) => void): this;\\n        prependListener(event: 'stream', listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\n        prependListener(event: 'timeout', listener: () => void): this;\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'checkContinue', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        prependOnceListener(event: 'request', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        prependOnceListener(event: 'session', listener: (session: ServerHttp2Session) => void): this;\\n        prependOnceListener(event: 'sessionError', listener: (err: Error) => void): this;\\n        prependOnceListener(event: 'stream', listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\n        prependOnceListener(event: 'timeout', listener: () => void): this;\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n    }\\n    export interface Http2SecureServer extends tls.Server, HTTP2ServerCommon {\\n        addListener(event: 'checkContinue', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        addListener(event: 'request', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        addListener(event: 'session', listener: (session: ServerHttp2Session) => void): this;\\n        addListener(event: 'sessionError', listener: (err: Error) => void): this;\\n        addListener(event: 'stream', listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\n        addListener(event: 'timeout', listener: () => void): this;\\n        addListener(event: 'unknownProtocol', listener: (socket: tls.TLSSocket) => void): this;\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        emit(event: 'checkContinue', request: Http2ServerRequest, response: Http2ServerResponse): boolean;\\n        emit(event: 'request', request: Http2ServerRequest, response: Http2ServerResponse): boolean;\\n        emit(event: 'session', session: ServerHttp2Session): boolean;\\n        emit(event: 'sessionError', err: Error): boolean;\\n        emit(event: 'stream', stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number): boolean;\\n        emit(event: 'timeout'): boolean;\\n        emit(event: 'unknownProtocol', socket: tls.TLSSocket): boolean;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        on(event: 'checkContinue', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        on(event: 'request', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        on(event: 'session', listener: (session: ServerHttp2Session) => void): this;\\n        on(event: 'sessionError', listener: (err: Error) => void): this;\\n        on(event: 'stream', listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\n        on(event: 'timeout', listener: () => void): this;\\n        on(event: 'unknownProtocol', listener: (socket: tls.TLSSocket) => void): this;\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\n        once(event: 'checkContinue', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        once(event: 'request', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        once(event: 'session', listener: (session: ServerHttp2Session) => void): this;\\n        once(event: 'sessionError', listener: (err: Error) => void): this;\\n        once(event: 'stream', listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\n        once(event: 'timeout', listener: () => void): this;\\n        once(event: 'unknownProtocol', listener: (socket: tls.TLSSocket) => void): this;\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'checkContinue', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        prependListener(event: 'request', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        prependListener(event: 'session', listener: (session: ServerHttp2Session) => void): this;\\n        prependListener(event: 'sessionError', listener: (err: Error) => void): this;\\n        prependListener(event: 'stream', listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\n        prependListener(event: 'timeout', listener: () => void): this;\\n        prependListener(event: 'unknownProtocol', listener: (socket: tls.TLSSocket) => void): this;\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'checkContinue', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        prependOnceListener(event: 'request', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        prependOnceListener(event: 'session', listener: (session: ServerHttp2Session) => void): this;\\n        prependOnceListener(event: 'sessionError', listener: (err: Error) => void): this;\\n        prependOnceListener(event: 'stream', listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\n        prependOnceListener(event: 'timeout', listener: () => void): this;\\n        prependOnceListener(event: 'unknownProtocol', listener: (socket: tls.TLSSocket) => void): this;\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n    }\\n    /**\\n     * A `Http2ServerRequest` object is created by {@link Server} or {@link SecureServer} and passed as the first argument to the `'request'` event. It may be used to access a request status,\\n     * headers, and\\n     * data.\\n     * @since v8.4.0\\n     */\\n    export class Http2ServerRequest extends stream.Readable {\\n        constructor(stream: ServerHttp2Stream, headers: IncomingHttpHeaders, options: stream.ReadableOptions, rawHeaders: ReadonlyArray<string>);\\n        /**\\n         * The `request.aborted` property will be `true` if the request has\\n         * been aborted.\\n         * @since v10.1.0\\n         */\\n        readonly aborted: boolean;\\n        /**\\n         * The request authority pseudo header field. Because HTTP/2 allows requests\\n         * to set either `:authority` or `host`, this value is derived from`req.headers[':authority']` if present. Otherwise, it is derived from`req.headers['host']`.\\n         * @since v8.4.0\\n         */\\n        readonly authority: string;\\n        /**\\n         * See `request.socket`.\\n         * @since v8.4.0\\n         * @deprecated Since v13.0.0 - Use `socket`.\\n         */\\n        readonly connection: net.Socket | tls.TLSSocket;\\n        /**\\n         * The `request.complete` property will be `true` if the request has\\n         * been completed, aborted, or destroyed.\\n         * @since v12.10.0\\n         */\\n        readonly complete: boolean;\\n        /**\\n         * The request/response headers object.\\n         *\\n         * Key-value pairs of header names and values. Header names are lower-cased.\\n         *\\n         * ```js\\n         * // Prints something like:\\n         * //\\n         * // { 'user-agent': 'curl/7.22.0',\\n         * //   host: '127.0.0.1:8000',\\n         * //   accept: '*' }\\n         * console.log(request.headers);\\n         * ```\\n         *\\n         * See `HTTP/2 Headers Object`.\\n         *\\n         * In HTTP/2, the request path, host name, protocol, and method are represented as\\n         * special headers prefixed with the `:` character (e.g. `':path'`). These special\\n         * headers will be included in the `request.headers` object. Care must be taken not\\n         * to inadvertently modify these special headers or errors may occur. For instance,\\n         * removing all headers from the request will cause errors to occur:\\n         *\\n         * ```js\\n         * removeAllHeaders(request.headers);\\n         * assert(request.url);   // Fails because the :path header has been removed\\n         * ```\\n         * @since v8.4.0\\n         */\\n        readonly headers: IncomingHttpHeaders;\\n        /**\\n         * In case of server request, the HTTP version sent by the client. In the case of\\n         * client response, the HTTP version of the connected-to server. Returns`'2.0'`.\\n         *\\n         * Also `message.httpVersionMajor` is the first integer and`message.httpVersionMinor` is the second.\\n         * @since v8.4.0\\n         */\\n        readonly httpVersion: string;\\n        readonly httpVersionMinor: number;\\n        readonly httpVersionMajor: number;\\n        /**\\n         * The request method as a string. Read-only. Examples: `'GET'`, `'DELETE'`.\\n         * @since v8.4.0\\n         */\\n        readonly method: string;\\n        /**\\n         * The raw request/response headers list exactly as they were received.\\n         *\\n         * The keys and values are in the same list. It is _not_ a\\n         * list of tuples. So, the even-numbered offsets are key values, and the\\n         * odd-numbered offsets are the associated values.\\n         *\\n         * Header names are not lowercased, and duplicates are not merged.\\n         *\\n         * ```js\\n         * // Prints something like:\\n         * //\\n         * // [ 'user-agent',\\n         * //   'this is invalid because there can be only one',\\n         * //   'User-Agent',\\n         * //   'curl/7.22.0',\\n         * //   'Host',\\n         * //   '127.0.0.1:8000',\\n         * //   'ACCEPT',\\n         * //   '*' ]\\n         * console.log(request.rawHeaders);\\n         * ```\\n         * @since v8.4.0\\n         */\\n        readonly rawHeaders: string[];\\n        /**\\n         * The raw request/response trailer keys and values exactly as they were\\n         * received. Only populated at the `'end'` event.\\n         * @since v8.4.0\\n         */\\n        readonly rawTrailers: string[];\\n        /**\\n         * The request scheme pseudo header field indicating the scheme\\n         * portion of the target URL.\\n         * @since v8.4.0\\n         */\\n        readonly scheme: string;\\n        /**\\n         * Returns a `Proxy` object that acts as a `net.Socket` (or `tls.TLSSocket`) but\\n         * applies getters, setters, and methods based on HTTP/2 logic.\\n         *\\n         * `destroyed`, `readable`, and `writable` properties will be retrieved from and\\n         * set on `request.stream`.\\n         *\\n         * `destroy`, `emit`, `end`, `on` and `once` methods will be called on`request.stream`.\\n         *\\n         * `setTimeout` method will be called on `request.stream.session`.\\n         *\\n         * `pause`, `read`, `resume`, and `write` will throw an error with code`ERR_HTTP2_NO_SOCKET_MANIPULATION`. See `Http2Session and Sockets` for\\n         * more information.\\n         *\\n         * All other interactions will be routed directly to the socket. With TLS support,\\n         * use `request.socket.getPeerCertificate()` to obtain the client's\\n         * authentication details.\\n         * @since v8.4.0\\n         */\\n        readonly socket: net.Socket | tls.TLSSocket;\\n        /**\\n         * The `Http2Stream` object backing the request.\\n         * @since v8.4.0\\n         */\\n        readonly stream: ServerHttp2Stream;\\n        /**\\n         * The request/response trailers object. Only populated at the `'end'` event.\\n         * @since v8.4.0\\n         */\\n        readonly trailers: IncomingHttpHeaders;\\n        /**\\n         * Request URL string. This contains only the URL that is present in the actual\\n         * HTTP request. If the request is:\\n         *\\n         * ```http\\n         * GET /status?name=ryan HTTP/1.1\\n         * Accept: text/plain\\n         * ```\\n         *\\n         * Then `request.url` will be:\\n         *\\n         * ```js\\n         * '/status?name=ryan'\\n         * ```\\n         *\\n         * To parse the url into its parts, `new URL()` can be used:\\n         *\\n         * ```console\\n         * $ node\\n         * > new URL('/status?name=ryan', 'http://example.com')\\n         * URL {\\n         *   href: 'http://example.com/status?name=ryan',\\n         *   origin: 'http://example.com',\\n         *   protocol: 'http:',\\n         *   username: '',\\n         *   password: '',\\n         *   host: 'example.com',\\n         *   hostname: 'example.com',\\n         *   port: '',\\n         *   pathname: '/status',\\n         *   search: '?name=ryan',\\n         *   searchParams: URLSearchParams { 'name' => 'ryan' },\\n         *   hash: ''\\n         * }\\n         * ```\\n         * @since v8.4.0\\n         */\\n        url: string;\\n        /**\\n         * Sets the `Http2Stream`'s timeout value to `msecs`. If a callback is\\n         * provided, then it is added as a listener on the `'timeout'` event on\\n         * the response object.\\n         *\\n         * If no `'timeout'` listener is added to the request, the response, or\\n         * the server, then `Http2Stream` s are destroyed when they time out. If a\\n         * handler is assigned to the request, the response, or the server's `'timeout'`events, timed out sockets must be handled explicitly.\\n         * @since v8.4.0\\n         */\\n        setTimeout(msecs: number, callback?: () => void): void;\\n        read(size?: number): Buffer | string | null;\\n        addListener(event: 'aborted', listener: (hadError: boolean, code: number) => void): this;\\n        addListener(event: 'close', listener: () => void): this;\\n        addListener(event: 'data', listener: (chunk: Buffer | string) => void): this;\\n        addListener(event: 'end', listener: () => void): this;\\n        addListener(event: 'readable', listener: () => void): this;\\n        addListener(event: 'error', listener: (err: Error) => void): this;\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        emit(event: 'aborted', hadError: boolean, code: number): boolean;\\n        emit(event: 'close'): boolean;\\n        emit(event: 'data', chunk: Buffer | string): boolean;\\n        emit(event: 'end'): boolean;\\n        emit(event: 'readable'): boolean;\\n        emit(event: 'error', err: Error): boolean;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        on(event: 'aborted', listener: (hadError: boolean, code: number) => void): this;\\n        on(event: 'close', listener: () => void): this;\\n        on(event: 'data', listener: (chunk: Buffer | string) => void): this;\\n        on(event: 'end', listener: () => void): this;\\n        on(event: 'readable', listener: () => void): this;\\n        on(event: 'error', listener: (err: Error) => void): this;\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\n        once(event: 'aborted', listener: (hadError: boolean, code: number) => void): this;\\n        once(event: 'close', listener: () => void): this;\\n        once(event: 'data', listener: (chunk: Buffer | string) => void): this;\\n        once(event: 'end', listener: () => void): this;\\n        once(event: 'readable', listener: () => void): this;\\n        once(event: 'error', listener: (err: Error) => void): this;\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'aborted', listener: (hadError: boolean, code: number) => void): this;\\n        prependListener(event: 'close', listener: () => void): this;\\n        prependListener(event: 'data', listener: (chunk: Buffer | string) => void): this;\\n        prependListener(event: 'end', listener: () => void): this;\\n        prependListener(event: 'readable', listener: () => void): this;\\n        prependListener(event: 'error', listener: (err: Error) => void): this;\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'aborted', listener: (hadError: boolean, code: number) => void): this;\\n        prependOnceListener(event: 'close', listener: () => void): this;\\n        prependOnceListener(event: 'data', listener: (chunk: Buffer | string) => void): this;\\n        prependOnceListener(event: 'end', listener: () => void): this;\\n        prependOnceListener(event: 'readable', listener: () => void): this;\\n        prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n    }\\n    /**\\n     * This object is created internally by an HTTP server, not by the user. It is\\n     * passed as the second parameter to the `'request'` event.\\n     * @since v8.4.0\\n     */\\n    export class Http2ServerResponse extends stream.Writable {\\n        constructor(stream: ServerHttp2Stream);\\n        /**\\n         * See `response.socket`.\\n         * @since v8.4.0\\n         * @deprecated Since v13.0.0 - Use `socket`.\\n         */\\n        readonly connection: net.Socket | tls.TLSSocket;\\n        /**\\n         * Boolean value that indicates whether the response has completed. Starts\\n         * as `false`. After `response.end()` executes, the value will be `true`.\\n         * @since v8.4.0\\n         * @deprecated Since v13.4.0,v12.16.0 - Use `writableEnded`.\\n         */\\n        readonly finished: boolean;\\n        /**\\n         * True if headers were sent, false otherwise (read-only).\\n         * @since v8.4.0\\n         */\\n        readonly headersSent: boolean;\\n        /**\\n         * A reference to the original HTTP2 request object.\\n         * @since v15.7.0\\n         */\\n        readonly req: Http2ServerRequest;\\n        /**\\n         * Returns a `Proxy` object that acts as a `net.Socket` (or `tls.TLSSocket`) but\\n         * applies getters, setters, and methods based on HTTP/2 logic.\\n         *\\n         * `destroyed`, `readable`, and `writable` properties will be retrieved from and\\n         * set on `response.stream`.\\n         *\\n         * `destroy`, `emit`, `end`, `on` and `once` methods will be called on`response.stream`.\\n         *\\n         * `setTimeout` method will be called on `response.stream.session`.\\n         *\\n         * `pause`, `read`, `resume`, and `write` will throw an error with code`ERR_HTTP2_NO_SOCKET_MANIPULATION`. See `Http2Session and Sockets` for\\n         * more information.\\n         *\\n         * All other interactions will be routed directly to the socket.\\n         *\\n         * ```js\\n         * const http2 = require('http2');\\n         * const server = http2.createServer((req, res) => {\\n         *   const ip = req.socket.remoteAddress;\\n         *   const port = req.socket.remotePort;\\n         *   res.end(`Your IP address is ${ip} and your source port is ${port}.`);\\n         * }).listen(3000);\\n         * ```\\n         * @since v8.4.0\\n         */\\n        readonly socket: net.Socket | tls.TLSSocket;\\n        /**\\n         * The `Http2Stream` object backing the response.\\n         * @since v8.4.0\\n         */\\n        readonly stream: ServerHttp2Stream;\\n        /**\\n         * When true, the Date header will be automatically generated and sent in\\n         * the response if it is not already present in the headers. Defaults to true.\\n         *\\n         * This should only be disabled for testing; HTTP requires the Date header\\n         * in responses.\\n         * @since v8.4.0\\n         */\\n        sendDate: boolean;\\n        /**\\n         * When using implicit headers (not calling `response.writeHead()` explicitly),\\n         * this property controls the status code that will be sent to the client when\\n         * the headers get flushed.\\n         *\\n         * ```js\\n         * response.statusCode = 404;\\n         * ```\\n         *\\n         * After response header was sent to the client, this property indicates the\\n         * status code which was sent out.\\n         * @since v8.4.0\\n         */\\n        statusCode: number;\\n        /**\\n         * Status message is not supported by HTTP/2 (RFC 7540 8.1.2.4). It returns\\n         * an empty string.\\n         * @since v8.4.0\\n         */\\n        statusMessage: '';\\n        /**\\n         * This method adds HTTP trailing headers (a header but at the end of the\\n         * message) to the response.\\n         *\\n         * Attempting to set a header field name or value that contains invalid characters\\n         * will result in a `TypeError` being thrown.\\n         * @since v8.4.0\\n         */\\n        addTrailers(trailers: OutgoingHttpHeaders): void;\\n        /**\\n         * This method signals to the server that all of the response headers and body\\n         * have been sent; that server should consider this message complete.\\n         * The method, `response.end()`, MUST be called on each response.\\n         *\\n         * If `data` is specified, it is equivalent to calling `response.write(data, encoding)` followed by `response.end(callback)`.\\n         *\\n         * If `callback` is specified, it will be called when the response stream\\n         * is finished.\\n         * @since v8.4.0\\n         */\\n        end(callback?: () => void): this;\\n        end(data: string | Uint8Array, callback?: () => void): this;\\n        end(data: string | Uint8Array, encoding: BufferEncoding, callback?: () => void): this;\\n        /**\\n         * Reads out a header that has already been queued but not sent to the client.\\n         * The name is case-insensitive.\\n         *\\n         * ```js\\n         * const contentType = response.getHeader('content-type');\\n         * ```\\n         * @since v8.4.0\\n         */\\n        getHeader(name: string): string;\\n        /**\\n         * Returns an array containing the unique names of the current outgoing headers.\\n         * All header names are lowercase.\\n         *\\n         * ```js\\n         * response.setHeader('Foo', 'bar');\\n         * response.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);\\n         *\\n         * const headerNames = response.getHeaderNames();\\n         * // headerNames === ['foo', 'set-cookie']\\n         * ```\\n         * @since v8.4.0\\n         */\\n        getHeaderNames(): string[];\\n        /**\\n         * Returns a shallow copy of the current outgoing headers. Since a shallow copy\\n         * is used, array values may be mutated without additional calls to various\\n         * header-related http module methods. The keys of the returned object are the\\n         * header names and the values are the respective header values. All header names\\n         * are lowercase.\\n         *\\n         * The object returned by the `response.getHeaders()` method _does not_prototypically inherit from the JavaScript `Object`. This means that typical`Object` methods such as `obj.toString()`,\\n         * `obj.hasOwnProperty()`, and others\\n         * are not defined and _will not work_.\\n         *\\n         * ```js\\n         * response.setHeader('Foo', 'bar');\\n         * response.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);\\n         *\\n         * const headers = response.getHeaders();\\n         * // headers === { foo: 'bar', 'set-cookie': ['foo=bar', 'bar=baz'] }\\n         * ```\\n         * @since v8.4.0\\n         */\\n        getHeaders(): OutgoingHttpHeaders;\\n        /**\\n         * Returns `true` if the header identified by `name` is currently set in the\\n         * outgoing headers. The header name matching is case-insensitive.\\n         *\\n         * ```js\\n         * const hasContentType = response.hasHeader('content-type');\\n         * ```\\n         * @since v8.4.0\\n         */\\n        hasHeader(name: string): boolean;\\n        /**\\n         * Removes a header that has been queued for implicit sending.\\n         *\\n         * ```js\\n         * response.removeHeader('Content-Encoding');\\n         * ```\\n         * @since v8.4.0\\n         */\\n        removeHeader(name: string): void;\\n        /**\\n         * Sets a single header value for implicit headers. If this header already exists\\n         * in the to-be-sent headers, its value will be replaced. Use an array of strings\\n         * here to send multiple headers with the same name.\\n         *\\n         * ```js\\n         * response.setHeader('Content-Type', 'text/html; charset=utf-8');\\n         * ```\\n         *\\n         * or\\n         *\\n         * ```js\\n         * response.setHeader('Set-Cookie', ['type=ninja', 'language=javascript']);\\n         * ```\\n         *\\n         * Attempting to set a header field name or value that contains invalid characters\\n         * will result in a `TypeError` being thrown.\\n         *\\n         * When headers have been set with `response.setHeader()`, they will be merged\\n         * with any headers passed to `response.writeHead()`, with the headers passed\\n         * to `response.writeHead()` given precedence.\\n         *\\n         * ```js\\n         * // Returns content-type = text/plain\\n         * const server = http2.createServer((req, res) => {\\n         *   res.setHeader('Content-Type', 'text/html; charset=utf-8');\\n         *   res.setHeader('X-Foo', 'bar');\\n         *   res.writeHead(200, { 'Content-Type': 'text/plain; charset=utf-8' });\\n         *   res.end('ok');\\n         * });\\n         * ```\\n         * @since v8.4.0\\n         */\\n        setHeader(name: string, value: number | string | ReadonlyArray<string>): void;\\n        /**\\n         * Sets the `Http2Stream`'s timeout value to `msecs`. If a callback is\\n         * provided, then it is added as a listener on the `'timeout'` event on\\n         * the response object.\\n         *\\n         * If no `'timeout'` listener is added to the request, the response, or\\n         * the server, then `Http2Stream` s are destroyed when they time out. If a\\n         * handler is assigned to the request, the response, or the server's `'timeout'`events, timed out sockets must be handled explicitly.\\n         * @since v8.4.0\\n         */\\n        setTimeout(msecs: number, callback?: () => void): void;\\n        /**\\n         * If this method is called and `response.writeHead()` has not been called,\\n         * it will switch to implicit header mode and flush the implicit headers.\\n         *\\n         * This sends a chunk of the response body. This method may\\n         * be called multiple times to provide successive parts of the body.\\n         *\\n         * In the `http` module, the response body is omitted when the\\n         * request is a HEAD request. Similarly, the `204` and `304` responses _must not_ include a message body.\\n         *\\n         * `chunk` can be a string or a buffer. If `chunk` is a string,\\n         * the second parameter specifies how to encode it into a byte stream.\\n         * By default the `encoding` is `'utf8'`. `callback` will be called when this chunk\\n         * of data is flushed.\\n         *\\n         * This is the raw HTTP body and has nothing to do with higher-level multi-part\\n         * body encodings that may be used.\\n         *\\n         * The first time `response.write()` is called, it will send the buffered\\n         * header information and the first chunk of the body to the client. The second\\n         * time `response.write()` is called, Node.js assumes data will be streamed,\\n         * and sends the new data separately. That is, the response is buffered up to the\\n         * first chunk of the body.\\n         *\\n         * Returns `true` if the entire data was flushed successfully to the kernel\\n         * buffer. Returns `false` if all or part of the data was queued in user memory.`'drain'` will be emitted when the buffer is free again.\\n         * @since v8.4.0\\n         */\\n        write(chunk: string | Uint8Array, callback?: (err: Error) => void): boolean;\\n        write(chunk: string | Uint8Array, encoding: BufferEncoding, callback?: (err: Error) => void): boolean;\\n        /**\\n         * Sends a status `100 Continue` to the client, indicating that the request body\\n         * should be sent. See the `'checkContinue'` event on `Http2Server` and`Http2SecureServer`.\\n         * @since v8.4.0\\n         */\\n        writeContinue(): void;\\n        /**\\n         * Sends a status `103 Early Hints` to the client with a Link header,\\n         * indicating that the user agent can preload/preconnect the linked resources.\\n         * The `hints` is an object containing the values of headers to be sent with\\n         * early hints message.\\n         *\\n         * Example:\\n         *\\n         * ```js\\n         * const earlyHintsLink = '</styles.css>; rel=preload; as=style';\\n         * response.writeEarlyHints({\\n         *   'link': earlyHintsLink,\\n         * });\\n         *\\n         * const earlyHintsLinks = [\\n         *   '</styles.css>; rel=preload; as=style',\\n         *   '</scripts.js>; rel=preload; as=script',\\n         * ];\\n         * response.writeEarlyHints({\\n         *   'link': earlyHintsLinks,\\n         *   'x-trace-id': 'id for diagnostics'\\n         * });\\n         * ```\\n         *\\n         * @since v18.11.0\\n         * @param hints An object containing the values of headers\\n         */\\n        writeEarlyHints(hints: Record<string, string | string[]>): void;\\n        /**\\n         * Sends a response header to the request. The status code is a 3-digit HTTP\\n         * status code, like `404`. The last argument, `headers`, are the response headers.\\n         *\\n         * Returns a reference to the `Http2ServerResponse`, so that calls can be chained.\\n         *\\n         * For compatibility with `HTTP/1`, a human-readable `statusMessage` may be\\n         * passed as the second argument. However, because the `statusMessage` has no\\n         * meaning within HTTP/2, the argument will have no effect and a process warning\\n         * will be emitted.\\n         *\\n         * ```js\\n         * const body = 'hello world';\\n         * response.writeHead(200, {\\n         *   'Content-Length': Buffer.byteLength(body),\\n         *   'Content-Type': 'text/plain; charset=utf-8',\\n         * });\\n         * ```\\n         *\\n         * `Content-Length` is given in bytes not characters. The`Buffer.byteLength()` API may be used to determine the number of bytes in a\\n         * given encoding. On outbound messages, Node.js does not check if Content-Length\\n         * and the length of the body being transmitted are equal or not. However, when\\n         * receiving messages, Node.js will automatically reject messages when the`Content-Length` does not match the actual payload size.\\n         *\\n         * This method may be called at most one time on a message before `response.end()` is called.\\n         *\\n         * If `response.write()` or `response.end()` are called before calling\\n         * this, the implicit/mutable headers will be calculated and call this function.\\n         *\\n         * When headers have been set with `response.setHeader()`, they will be merged\\n         * with any headers passed to `response.writeHead()`, with the headers passed\\n         * to `response.writeHead()` given precedence.\\n         *\\n         * ```js\\n         * // Returns content-type = text/plain\\n         * const server = http2.createServer((req, res) => {\\n         *   res.setHeader('Content-Type', 'text/html; charset=utf-8');\\n         *   res.setHeader('X-Foo', 'bar');\\n         *   res.writeHead(200, { 'Content-Type': 'text/plain; charset=utf-8' });\\n         *   res.end('ok');\\n         * });\\n         * ```\\n         *\\n         * Attempting to set a header field name or value that contains invalid characters\\n         * will result in a `TypeError` being thrown.\\n         * @since v8.4.0\\n         */\\n        writeHead(statusCode: number, headers?: OutgoingHttpHeaders): this;\\n        writeHead(statusCode: number, statusMessage: string, headers?: OutgoingHttpHeaders): this;\\n        /**\\n         * Call `http2stream.pushStream()` with the given headers, and wrap the\\n         * given `Http2Stream` on a newly created `Http2ServerResponse` as the callback\\n         * parameter if successful. When `Http2ServerRequest` is closed, the callback is\\n         * called with an error `ERR_HTTP2_INVALID_STREAM`.\\n         * @since v8.4.0\\n         * @param headers An object describing the headers\\n         * @param callback Called once `http2stream.pushStream()` is finished, or either when the attempt to create the pushed `Http2Stream` has failed or has been rejected, or the state of\\n         * `Http2ServerRequest` is closed prior to calling the `http2stream.pushStream()` method\\n         */\\n        createPushResponse(headers: OutgoingHttpHeaders, callback: (err: Error | null, res: Http2ServerResponse) => void): void;\\n        addListener(event: 'close', listener: () => void): this;\\n        addListener(event: 'drain', listener: () => void): this;\\n        addListener(event: 'error', listener: (error: Error) => void): this;\\n        addListener(event: 'finish', listener: () => void): this;\\n        addListener(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        addListener(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        emit(event: 'close'): boolean;\\n        emit(event: 'drain'): boolean;\\n        emit(event: 'error', error: Error): boolean;\\n        emit(event: 'finish'): boolean;\\n        emit(event: 'pipe', src: stream.Readable): boolean;\\n        emit(event: 'unpipe', src: stream.Readable): boolean;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        on(event: 'close', listener: () => void): this;\\n        on(event: 'drain', listener: () => void): this;\\n        on(event: 'error', listener: (error: Error) => void): this;\\n        on(event: 'finish', listener: () => void): this;\\n        on(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        on(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\n        once(event: 'close', listener: () => void): this;\\n        once(event: 'drain', listener: () => void): this;\\n        once(event: 'error', listener: (error: Error) => void): this;\\n        once(event: 'finish', listener: () => void): this;\\n        once(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        once(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'close', listener: () => void): this;\\n        prependListener(event: 'drain', listener: () => void): this;\\n        prependListener(event: 'error', listener: (error: Error) => void): this;\\n        prependListener(event: 'finish', listener: () => void): this;\\n        prependListener(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        prependListener(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'close', listener: () => void): this;\\n        prependOnceListener(event: 'drain', listener: () => void): this;\\n        prependOnceListener(event: 'error', listener: (error: Error) => void): this;\\n        prependOnceListener(event: 'finish', listener: () => void): this;\\n        prependOnceListener(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        prependOnceListener(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n    }\\n    export namespace constants {\\n        const NGHTTP2_SESSION_SERVER: number;\\n        const NGHTTP2_SESSION_CLIENT: number;\\n        const NGHTTP2_STREAM_STATE_IDLE: number;\\n        const NGHTTP2_STREAM_STATE_OPEN: number;\\n        const NGHTTP2_STREAM_STATE_RESERVED_LOCAL: number;\\n        const NGHTTP2_STREAM_STATE_RESERVED_REMOTE: number;\\n        const NGHTTP2_STREAM_STATE_HALF_CLOSED_LOCAL: number;\\n        const NGHTTP2_STREAM_STATE_HALF_CLOSED_REMOTE: number;\\n        const NGHTTP2_STREAM_STATE_CLOSED: number;\\n        const NGHTTP2_NO_ERROR: number;\\n        const NGHTTP2_PROTOCOL_ERROR: number;\\n        const NGHTTP2_INTERNAL_ERROR: number;\\n        const NGHTTP2_FLOW_CONTROL_ERROR: number;\\n        const NGHTTP2_SETTINGS_TIMEOUT: number;\\n        const NGHTTP2_STREAM_CLOSED: number;\\n        const NGHTTP2_FRAME_SIZE_ERROR: number;\\n        const NGHTTP2_REFUSED_STREAM: number;\\n        const NGHTTP2_CANCEL: number;\\n        const NGHTTP2_COMPRESSION_ERROR: number;\\n        const NGHTTP2_CONNECT_ERROR: number;\\n        const NGHTTP2_ENHANCE_YOUR_CALM: number;\\n        const NGHTTP2_INADEQUATE_SECURITY: number;\\n        const NGHTTP2_HTTP_1_1_REQUIRED: number;\\n        const NGHTTP2_ERR_FRAME_SIZE_ERROR: number;\\n        const NGHTTP2_FLAG_NONE: number;\\n        const NGHTTP2_FLAG_END_STREAM: number;\\n        const NGHTTP2_FLAG_END_HEADERS: number;\\n        const NGHTTP2_FLAG_ACK: number;\\n        const NGHTTP2_FLAG_PADDED: number;\\n        const NGHTTP2_FLAG_PRIORITY: number;\\n        const DEFAULT_SETTINGS_HEADER_TABLE_SIZE: number;\\n        const DEFAULT_SETTINGS_ENABLE_PUSH: number;\\n        const DEFAULT_SETTINGS_INITIAL_WINDOW_SIZE: number;\\n        const DEFAULT_SETTINGS_MAX_FRAME_SIZE: number;\\n        const MAX_MAX_FRAME_SIZE: number;\\n        const MIN_MAX_FRAME_SIZE: number;\\n        const MAX_INITIAL_WINDOW_SIZE: number;\\n        const NGHTTP2_DEFAULT_WEIGHT: number;\\n        const NGHTTP2_SETTINGS_HEADER_TABLE_SIZE: number;\\n        const NGHTTP2_SETTINGS_ENABLE_PUSH: number;\\n        const NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS: number;\\n        const NGHTTP2_SETTINGS_INITIAL_WINDOW_SIZE: number;\\n        const NGHTTP2_SETTINGS_MAX_FRAME_SIZE: number;\\n        const NGHTTP2_SETTINGS_MAX_HEADER_LIST_SIZE: number;\\n        const PADDING_STRATEGY_NONE: number;\\n        const PADDING_STRATEGY_MAX: number;\\n        const PADDING_STRATEGY_CALLBACK: number;\\n        const HTTP2_HEADER_STATUS: string;\\n        const HTTP2_HEADER_METHOD: string;\\n        const HTTP2_HEADER_AUTHORITY: string;\\n        const HTTP2_HEADER_SCHEME: string;\\n        const HTTP2_HEADER_PATH: string;\\n        const HTTP2_HEADER_ACCEPT_CHARSET: string;\\n        const HTTP2_HEADER_ACCEPT_ENCODING: string;\\n        const HTTP2_HEADER_ACCEPT_LANGUAGE: string;\\n        const HTTP2_HEADER_ACCEPT_RANGES: string;\\n        const HTTP2_HEADER_ACCEPT: string;\\n        const HTTP2_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN: string;\\n        const HTTP2_HEADER_AGE: string;\\n        const HTTP2_HEADER_ALLOW: string;\\n        const HTTP2_HEADER_AUTHORIZATION: string;\\n        const HTTP2_HEADER_CACHE_CONTROL: string;\\n        const HTTP2_HEADER_CONNECTION: string;\\n        const HTTP2_HEADER_CONTENT_DISPOSITION: string;\\n        const HTTP2_HEADER_CONTENT_ENCODING: string;\\n        const HTTP2_HEADER_CONTENT_LANGUAGE: string;\\n        const HTTP2_HEADER_CONTENT_LENGTH: string;\\n        const HTTP2_HEADER_CONTENT_LOCATION: string;\\n        const HTTP2_HEADER_CONTENT_MD5: string;\\n        const HTTP2_HEADER_CONTENT_RANGE: string;\\n        const HTTP2_HEADER_CONTENT_TYPE: string;\\n        const HTTP2_HEADER_COOKIE: string;\\n        const HTTP2_HEADER_DATE: string;\\n        const HTTP2_HEADER_ETAG: string;\\n        const HTTP2_HEADER_EXPECT: string;\\n        const HTTP2_HEADER_EXPIRES: string;\\n        const HTTP2_HEADER_FROM: string;\\n        const HTTP2_HEADER_HOST: string;\\n        const HTTP2_HEADER_IF_MATCH: string;\\n        const HTTP2_HEADER_IF_MODIFIED_SINCE: string;\\n        const HTTP2_HEADER_IF_NONE_MATCH: string;\\n        const HTTP2_HEADER_IF_RANGE: string;\\n        const HTTP2_HEADER_IF_UNMODIFIED_SINCE: string;\\n        const HTTP2_HEADER_LAST_MODIFIED: string;\\n        const HTTP2_HEADER_LINK: string;\\n        const HTTP2_HEADER_LOCATION: string;\\n        const HTTP2_HEADER_MAX_FORWARDS: string;\\n        const HTTP2_HEADER_PREFER: string;\\n        const HTTP2_HEADER_PROXY_AUTHENTICATE: string;\\n        const HTTP2_HEADER_PROXY_AUTHORIZATION: string;\\n        const HTTP2_HEADER_RANGE: string;\\n        const HTTP2_HEADER_REFERER: string;\\n        const HTTP2_HEADER_REFRESH: string;\\n        const HTTP2_HEADER_RETRY_AFTER: string;\\n        const HTTP2_HEADER_SERVER: string;\\n        const HTTP2_HEADER_SET_COOKIE: string;\\n        const HTTP2_HEADER_STRICT_TRANSPORT_SECURITY: string;\\n        const HTTP2_HEADER_TRANSFER_ENCODING: string;\\n        const HTTP2_HEADER_TE: string;\\n        const HTTP2_HEADER_UPGRADE: string;\\n        const HTTP2_HEADER_USER_AGENT: string;\\n        const HTTP2_HEADER_VARY: string;\\n        const HTTP2_HEADER_VIA: string;\\n        const HTTP2_HEADER_WWW_AUTHENTICATE: string;\\n        const HTTP2_HEADER_HTTP2_SETTINGS: string;\\n        const HTTP2_HEADER_KEEP_ALIVE: string;\\n        const HTTP2_HEADER_PROXY_CONNECTION: string;\\n        const HTTP2_METHOD_ACL: string;\\n        const HTTP2_METHOD_BASELINE_CONTROL: string;\\n        const HTTP2_METHOD_BIND: string;\\n        const HTTP2_METHOD_CHECKIN: string;\\n        const HTTP2_METHOD_CHECKOUT: string;\\n        const HTTP2_METHOD_CONNECT: string;\\n        const HTTP2_METHOD_COPY: string;\\n        const HTTP2_METHOD_DELETE: string;\\n        const HTTP2_METHOD_GET: string;\\n        const HTTP2_METHOD_HEAD: string;\\n        const HTTP2_METHOD_LABEL: string;\\n        const HTTP2_METHOD_LINK: string;\\n        const HTTP2_METHOD_LOCK: string;\\n        const HTTP2_METHOD_MERGE: string;\\n        const HTTP2_METHOD_MKACTIVITY: string;\\n        const HTTP2_METHOD_MKCALENDAR: string;\\n        const HTTP2_METHOD_MKCOL: string;\\n        const HTTP2_METHOD_MKREDIRECTREF: string;\\n        const HTTP2_METHOD_MKWORKSPACE: string;\\n        const HTTP2_METHOD_MOVE: string;\\n        const HTTP2_METHOD_OPTIONS: string;\\n        const HTTP2_METHOD_ORDERPATCH: string;\\n        const HTTP2_METHOD_PATCH: string;\\n        const HTTP2_METHOD_POST: string;\\n        const HTTP2_METHOD_PRI: string;\\n        const HTTP2_METHOD_PROPFIND: string;\\n        const HTTP2_METHOD_PROPPATCH: string;\\n        const HTTP2_METHOD_PUT: string;\\n        const HTTP2_METHOD_REBIND: string;\\n        const HTTP2_METHOD_REPORT: string;\\n        const HTTP2_METHOD_SEARCH: string;\\n        const HTTP2_METHOD_TRACE: string;\\n        const HTTP2_METHOD_UNBIND: string;\\n        const HTTP2_METHOD_UNCHECKOUT: string;\\n        const HTTP2_METHOD_UNLINK: string;\\n        const HTTP2_METHOD_UNLOCK: string;\\n        const HTTP2_METHOD_UPDATE: string;\\n        const HTTP2_METHOD_UPDATEREDIRECTREF: string;\\n        const HTTP2_METHOD_VERSION_CONTROL: string;\\n        const HTTP_STATUS_CONTINUE: number;\\n        const HTTP_STATUS_SWITCHING_PROTOCOLS: number;\\n        const HTTP_STATUS_PROCESSING: number;\\n        const HTTP_STATUS_OK: number;\\n        const HTTP_STATUS_CREATED: number;\\n        const HTTP_STATUS_ACCEPTED: number;\\n        const HTTP_STATUS_NON_AUTHORITATIVE_INFORMATION: number;\\n        const HTTP_STATUS_NO_CONTENT: number;\\n        const HTTP_STATUS_RESET_CONTENT: number;\\n        const HTTP_STATUS_PARTIAL_CONTENT: number;\\n        const HTTP_STATUS_MULTI_STATUS: number;\\n        const HTTP_STATUS_ALREADY_REPORTED: number;\\n        const HTTP_STATUS_IM_USED: number;\\n        const HTTP_STATUS_MULTIPLE_CHOICES: number;\\n        const HTTP_STATUS_MOVED_PERMANENTLY: number;\\n        const HTTP_STATUS_FOUND: number;\\n        const HTTP_STATUS_SEE_OTHER: number;\\n        const HTTP_STATUS_NOT_MODIFIED: number;\\n        const HTTP_STATUS_USE_PROXY: number;\\n        const HTTP_STATUS_TEMPORARY_REDIRECT: number;\\n        const HTTP_STATUS_PERMANENT_REDIRECT: number;\\n        const HTTP_STATUS_BAD_REQUEST: number;\\n        const HTTP_STATUS_UNAUTHORIZED: number;\\n        const HTTP_STATUS_PAYMENT_REQUIRED: number;\\n        const HTTP_STATUS_FORBIDDEN: number;\\n        const HTTP_STATUS_NOT_FOUND: number;\\n        const HTTP_STATUS_METHOD_NOT_ALLOWED: number;\\n        const HTTP_STATUS_NOT_ACCEPTABLE: number;\\n        const HTTP_STATUS_PROXY_AUTHENTICATION_REQUIRED: number;\\n        const HTTP_STATUS_REQUEST_TIMEOUT: number;\\n        const HTTP_STATUS_CONFLICT: number;\\n        const HTTP_STATUS_GONE: number;\\n        const HTTP_STATUS_LENGTH_REQUIRED: number;\\n        const HTTP_STATUS_PRECONDITION_FAILED: number;\\n        const HTTP_STATUS_PAYLOAD_TOO_LARGE: number;\\n        const HTTP_STATUS_URI_TOO_LONG: number;\\n        const HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE: number;\\n        const HTTP_STATUS_RANGE_NOT_SATISFIABLE: number;\\n        const HTTP_STATUS_EXPECTATION_FAILED: number;\\n        const HTTP_STATUS_TEAPOT: number;\\n        const HTTP_STATUS_MISDIRECTED_REQUEST: number;\\n        const HTTP_STATUS_UNPROCESSABLE_ENTITY: number;\\n        const HTTP_STATUS_LOCKED: number;\\n        const HTTP_STATUS_FAILED_DEPENDENCY: number;\\n        const HTTP_STATUS_UNORDERED_COLLECTION: number;\\n        const HTTP_STATUS_UPGRADE_REQUIRED: number;\\n        const HTTP_STATUS_PRECONDITION_REQUIRED: number;\\n        const HTTP_STATUS_TOO_MANY_REQUESTS: number;\\n        const HTTP_STATUS_REQUEST_HEADER_FIELDS_TOO_LARGE: number;\\n        const HTTP_STATUS_UNAVAILABLE_FOR_LEGAL_REASONS: number;\\n        const HTTP_STATUS_INTERNAL_SERVER_ERROR: number;\\n        const HTTP_STATUS_NOT_IMPLEMENTED: number;\\n        const HTTP_STATUS_BAD_GATEWAY: number;\\n        const HTTP_STATUS_SERVICE_UNAVAILABLE: number;\\n        const HTTP_STATUS_GATEWAY_TIMEOUT: number;\\n        const HTTP_STATUS_HTTP_VERSION_NOT_SUPPORTED: number;\\n        const HTTP_STATUS_VARIANT_ALSO_NEGOTIATES: number;\\n        const HTTP_STATUS_INSUFFICIENT_STORAGE: number;\\n        const HTTP_STATUS_LOOP_DETECTED: number;\\n        const HTTP_STATUS_BANDWIDTH_LIMIT_EXCEEDED: number;\\n        const HTTP_STATUS_NOT_EXTENDED: number;\\n        const HTTP_STATUS_NETWORK_AUTHENTICATION_REQUIRED: number;\\n    }\\n    /**\\n     * This symbol can be set as a property on the HTTP/2 headers object with\\n     * an array value in order to provide a list of headers considered sensitive.\\n     */\\n    export const sensitiveHeaders: symbol;\\n    /**\\n     * Returns an object containing the default settings for an `Http2Session`instance. This method returns a new object instance every time it is called\\n     * so instances returned may be safely modified for use.\\n     * @since v8.4.0\\n     */\\n    export function getDefaultSettings(): Settings;\\n    /**\\n     * Returns a `Buffer` instance containing serialized representation of the given\\n     * HTTP/2 settings as specified in the [HTTP/2](https://tools.ietf.org/html/rfc7540) specification. This is intended\\n     * for use with the `HTTP2-Settings` header field.\\n     *\\n     * ```js\\n     * const http2 = require('http2');\\n     *\\n     * const packed = http2.getPackedSettings({ enablePush: false });\\n     *\\n     * console.log(packed.toString('base64'));\\n     * // Prints: AAIAAAAA\\n     * ```\\n     * @since v8.4.0\\n     */\\n    export function getPackedSettings(settings: Settings): Buffer;\\n    /**\\n     * Returns a `HTTP/2 Settings Object` containing the deserialized settings from\\n     * the given `Buffer` as generated by `http2.getPackedSettings()`.\\n     * @since v8.4.0\\n     * @param buf The packed settings.\\n     */\\n    export function getUnpackedSettings(buf: Uint8Array): Settings;\\n    /**\\n     * Returns a `net.Server` instance that creates and manages `Http2Session`instances.\\n     *\\n     * Since there are no browsers known that support [unencrypted HTTP/2](https://http2.github.io/faq/#does-http2-require-encryption), the use of {@link createSecureServer} is necessary when\\n     * communicating\\n     * with browser clients.\\n     *\\n     * ```js\\n     * const http2 = require('http2');\\n     *\\n     * // Create an unencrypted HTTP/2 server.\\n     * // Since there are no browsers known that support\\n     * // unencrypted HTTP/2, the use of `http2.createSecureServer()`\\n     * // is necessary when communicating with browser clients.\\n     * const server = http2.createServer();\\n     *\\n     * server.on('stream', (stream, headers) => {\\n     *   stream.respond({\\n     *     'content-type': 'text/html; charset=utf-8',\\n     *     ':status': 200\\n     *   });\\n     *   stream.end('<h1>Hello World</h1>');\\n     * });\\n     *\\n     * server.listen(80);\\n     * ```\\n     * @since v8.4.0\\n     * @param onRequestHandler See `Compatibility API`\\n     */\\n    export function createServer(onRequestHandler?: (request: Http2ServerRequest, response: Http2ServerResponse) => void): Http2Server;\\n    export function createServer(options: ServerOptions, onRequestHandler?: (request: Http2ServerRequest, response: Http2ServerResponse) => void): Http2Server;\\n    /**\\n     * Returns a `tls.Server` instance that creates and manages `Http2Session`instances.\\n     *\\n     * ```js\\n     * const http2 = require('http2');\\n     * const fs = require('fs');\\n     *\\n     * const options = {\\n     *   key: fs.readFileSync('server-key.pem'),\\n     *   cert: fs.readFileSync('server-cert.pem')\\n     * };\\n     *\\n     * // Create a secure HTTP/2 server\\n     * const server = http2.createSecureServer(options);\\n     *\\n     * server.on('stream', (stream, headers) => {\\n     *   stream.respond({\\n     *     'content-type': 'text/html; charset=utf-8',\\n     *     ':status': 200\\n     *   });\\n     *   stream.end('<h1>Hello World</h1>');\\n     * });\\n     *\\n     * server.listen(80);\\n     * ```\\n     * @since v8.4.0\\n     * @param onRequestHandler See `Compatibility API`\\n     */\\n    export function createSecureServer(onRequestHandler?: (request: Http2ServerRequest, response: Http2ServerResponse) => void): Http2SecureServer;\\n    export function createSecureServer(options: SecureServerOptions, onRequestHandler?: (request: Http2ServerRequest, response: Http2ServerResponse) => void): Http2SecureServer;\\n    /**\\n     * Returns a `ClientHttp2Session` instance.\\n     *\\n     * ```js\\n     * const http2 = require('http2');\\n     * const client = http2.connect('https://localhost:1234');\\n     *\\n     * // Use the client\\n     *\\n     * client.close();\\n     * ```\\n     * @since v8.4.0\\n     * @param authority The remote HTTP/2 server to connect to. This must be in the form of a minimal, valid URL with the `http://` or `https://` prefix, host name, and IP port (if a non-default port\\n     * is used). Userinfo (user ID and password), path, querystring, and fragment details in the URL will be ignored.\\n     * @param listener Will be registered as a one-time listener of the {@link 'connect'} event.\\n     */\\n    export function connect(authority: string | url.URL, listener: (session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket) => void): ClientHttp2Session;\\n    export function connect(\\n        authority: string | url.URL,\\n        options?: ClientSessionOptions | SecureClientSessionOptions,\\n        listener?: (session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket) => void\\n    ): ClientHttp2Session;\\n}\\ndeclare module 'node:http2' {\\n    export * from 'http2';\\n}\\n\",\"file:///node_modules/@types/node/https.d.ts\":\"/**\\n * HTTPS is the HTTP protocol over TLS/SSL. In Node.js this is implemented as a\\n * separate module.\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/https.js)\\n */\\ndeclare module 'https' {\\n    import { Duplex } from 'node:stream';\\n    import * as tls from 'node:tls';\\n    import * as http from 'node:http';\\n    import { URL } from 'node:url';\\n    type ServerOptions<\\n        Request extends typeof http.IncomingMessage = typeof http.IncomingMessage,\\n        Response extends typeof http.ServerResponse = typeof http.ServerResponse,\\n    > = tls.SecureContextOptions & tls.TlsOptions & http.ServerOptions<Request, Response>;\\n    type RequestOptions = http.RequestOptions &\\n        tls.SecureContextOptions & {\\n            checkServerIdentity?: typeof tls.checkServerIdentity | undefined;\\n            rejectUnauthorized?: boolean | undefined; // Defaults to true\\n            servername?: string | undefined; // SNI TLS Extension\\n        };\\n    interface AgentOptions extends http.AgentOptions, tls.ConnectionOptions {\\n        rejectUnauthorized?: boolean | undefined;\\n        maxCachedSessions?: number | undefined;\\n    }\\n    /**\\n     * An `Agent` object for HTTPS similar to `http.Agent`. See {@link request} for more information.\\n     * @since v0.4.5\\n     */\\n    class Agent extends http.Agent {\\n        constructor(options?: AgentOptions);\\n        options: AgentOptions;\\n    }\\n    interface Server<\\n        Request extends typeof http.IncomingMessage = typeof http.IncomingMessage,\\n        Response extends typeof http.ServerResponse = typeof http.ServerResponse,\\n    > extends http.Server<Request, Response> {}\\n    /**\\n     * See `http.Server` for more information.\\n     * @since v0.3.4\\n     */\\n    class Server<\\n        Request extends typeof http.IncomingMessage = typeof http.IncomingMessage,\\n        Response extends typeof http.ServerResponse = typeof http.ServerResponse,\\n    > extends tls.Server {\\n        constructor(requestListener?: http.RequestListener<Request, Response>);\\n        constructor(\\n            options: ServerOptions<Request, Response>,\\n            requestListener?: http.RequestListener<Request, Response>,\\n        );\\n        /**\\n         * Closes all connections connected to this server.\\n         * @since v18.2.0\\n         */\\n        closeAllConnections(): void;\\n        /**\\n         * Closes all connections connected to this server which are not sending a request or waiting for a response.\\n         * @since v18.2.0\\n         */\\n        closeIdleConnections(): void;\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        addListener(event: 'keylog', listener: (line: Buffer, tlsSocket: tls.TLSSocket) => void): this;\\n        addListener(\\n            event: 'newSession',\\n            listener: (sessionId: Buffer, sessionData: Buffer, callback: (err: Error, resp: Buffer) => void) => void,\\n        ): this;\\n        addListener(\\n            event: 'OCSPRequest',\\n            listener: (\\n                certificate: Buffer,\\n                issuer: Buffer,\\n                callback: (err: Error | null, resp: Buffer) => void,\\n            ) => void,\\n        ): this;\\n        addListener(\\n            event: 'resumeSession',\\n            listener: (sessionId: Buffer, callback: (err: Error, sessionData: Buffer) => void) => void,\\n        ): this;\\n        addListener(event: 'secureConnection', listener: (tlsSocket: tls.TLSSocket) => void): this;\\n        addListener(event: 'tlsClientError', listener: (err: Error, tlsSocket: tls.TLSSocket) => void): this;\\n        addListener(event: 'close', listener: () => void): this;\\n        addListener(event: 'connection', listener: (socket: Duplex) => void): this;\\n        addListener(event: 'error', listener: (err: Error) => void): this;\\n        addListener(event: 'listening', listener: () => void): this;\\n        addListener(event: 'checkContinue', listener: http.RequestListener<Request, Response>): this;\\n        addListener(event: 'checkExpectation', listener: http.RequestListener<Request, Response>): this;\\n        addListener(event: 'clientError', listener: (err: Error, socket: Duplex) => void): this;\\n        addListener(\\n            event: 'connect',\\n            listener: (req: InstanceType<Request>, socket: Duplex, head: Buffer) => void,\\n        ): this;\\n        addListener(event: 'request', listener: http.RequestListener<Request, Response>): this;\\n        addListener(\\n            event: 'upgrade',\\n            listener: (req: InstanceType<Request>, socket: Duplex, head: Buffer) => void,\\n        ): this;\\n        emit(event: string, ...args: any[]): boolean;\\n        emit(event: 'keylog', line: Buffer, tlsSocket: tls.TLSSocket): boolean;\\n        emit(\\n            event: 'newSession',\\n            sessionId: Buffer,\\n            sessionData: Buffer,\\n            callback: (err: Error, resp: Buffer) => void,\\n        ): boolean;\\n        emit(\\n            event: 'OCSPRequest',\\n            certificate: Buffer,\\n            issuer: Buffer,\\n            callback: (err: Error | null, resp: Buffer) => void,\\n        ): boolean;\\n        emit(event: 'resumeSession', sessionId: Buffer, callback: (err: Error, sessionData: Buffer) => void): boolean;\\n        emit(event: 'secureConnection', tlsSocket: tls.TLSSocket): boolean;\\n        emit(event: 'tlsClientError', err: Error, tlsSocket: tls.TLSSocket): boolean;\\n        emit(event: 'close'): boolean;\\n        emit(event: 'connection', socket: Duplex): boolean;\\n        emit(event: 'error', err: Error): boolean;\\n        emit(event: 'listening'): boolean;\\n        emit(\\n            event: 'checkContinue',\\n            req: InstanceType<Request>,\\n            res: InstanceType<Response> & { req: InstanceType<Request> },\\n        ): boolean;\\n        emit(\\n            event: 'checkExpectation',\\n            req: InstanceType<Request>,\\n            res: InstanceType<Response> & { req: InstanceType<Request> },\\n        ): boolean;\\n        emit(event: 'clientError', err: Error, socket: Duplex): boolean;\\n        emit(event: 'connect', req: InstanceType<Request>, socket: Duplex, head: Buffer): boolean;\\n        emit(\\n            event: 'request',\\n            req: InstanceType<Request>,\\n            res: InstanceType<Response> & { req: InstanceType<Request> },\\n        ): boolean;\\n        emit(event: 'upgrade', req: InstanceType<Request>, socket: Duplex, head: Buffer): boolean;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        on(event: 'keylog', listener: (line: Buffer, tlsSocket: tls.TLSSocket) => void): this;\\n        on(\\n            event: 'newSession',\\n            listener: (sessionId: Buffer, sessionData: Buffer, callback: (err: Error, resp: Buffer) => void) => void,\\n        ): this;\\n        on(\\n            event: 'OCSPRequest',\\n            listener: (\\n                certificate: Buffer,\\n                issuer: Buffer,\\n                callback: (err: Error | null, resp: Buffer) => void,\\n            ) => void,\\n        ): this;\\n        on(\\n            event: 'resumeSession',\\n            listener: (sessionId: Buffer, callback: (err: Error, sessionData: Buffer) => void) => void,\\n        ): this;\\n        on(event: 'secureConnection', listener: (tlsSocket: tls.TLSSocket) => void): this;\\n        on(event: 'tlsClientError', listener: (err: Error, tlsSocket: tls.TLSSocket) => void): this;\\n        on(event: 'close', listener: () => void): this;\\n        on(event: 'connection', listener: (socket: Duplex) => void): this;\\n        on(event: 'error', listener: (err: Error) => void): this;\\n        on(event: 'listening', listener: () => void): this;\\n        on(event: 'checkContinue', listener: http.RequestListener<Request, Response>): this;\\n        on(event: 'checkExpectation', listener: http.RequestListener<Request, Response>): this;\\n        on(event: 'clientError', listener: (err: Error, socket: Duplex) => void): this;\\n        on(event: 'connect', listener: (req: InstanceType<Request>, socket: Duplex, head: Buffer) => void): this;\\n        on(event: 'request', listener: http.RequestListener<Request, Response>): this;\\n        on(event: 'upgrade', listener: (req: InstanceType<Request>, socket: Duplex, head: Buffer) => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        once(event: 'keylog', listener: (line: Buffer, tlsSocket: tls.TLSSocket) => void): this;\\n        once(\\n            event: 'newSession',\\n            listener: (sessionId: Buffer, sessionData: Buffer, callback: (err: Error, resp: Buffer) => void) => void,\\n        ): this;\\n        once(\\n            event: 'OCSPRequest',\\n            listener: (\\n                certificate: Buffer,\\n                issuer: Buffer,\\n                callback: (err: Error | null, resp: Buffer) => void,\\n            ) => void,\\n        ): this;\\n        once(\\n            event: 'resumeSession',\\n            listener: (sessionId: Buffer, callback: (err: Error, sessionData: Buffer) => void) => void,\\n        ): this;\\n        once(event: 'secureConnection', listener: (tlsSocket: tls.TLSSocket) => void): this;\\n        once(event: 'tlsClientError', listener: (err: Error, tlsSocket: tls.TLSSocket) => void): this;\\n        once(event: 'close', listener: () => void): this;\\n        once(event: 'connection', listener: (socket: Duplex) => void): this;\\n        once(event: 'error', listener: (err: Error) => void): this;\\n        once(event: 'listening', listener: () => void): this;\\n        once(event: 'checkContinue', listener: http.RequestListener<Request, Response>): this;\\n        once(event: 'checkExpectation', listener: http.RequestListener<Request, Response>): this;\\n        once(event: 'clientError', listener: (err: Error, socket: Duplex) => void): this;\\n        once(event: 'connect', listener: (req: InstanceType<Request>, socket: Duplex, head: Buffer) => void): this;\\n        once(event: 'request', listener: http.RequestListener<Request, Response>): this;\\n        once(event: 'upgrade', listener: (req: InstanceType<Request>, socket: Duplex, head: Buffer) => void): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'keylog', listener: (line: Buffer, tlsSocket: tls.TLSSocket) => void): this;\\n        prependListener(\\n            event: 'newSession',\\n            listener: (sessionId: Buffer, sessionData: Buffer, callback: (err: Error, resp: Buffer) => void) => void,\\n        ): this;\\n        prependListener(\\n            event: 'OCSPRequest',\\n            listener: (\\n                certificate: Buffer,\\n                issuer: Buffer,\\n                callback: (err: Error | null, resp: Buffer) => void,\\n            ) => void,\\n        ): this;\\n        prependListener(\\n            event: 'resumeSession',\\n            listener: (sessionId: Buffer, callback: (err: Error, sessionData: Buffer) => void) => void,\\n        ): this;\\n        prependListener(event: 'secureConnection', listener: (tlsSocket: tls.TLSSocket) => void): this;\\n        prependListener(event: 'tlsClientError', listener: (err: Error, tlsSocket: tls.TLSSocket) => void): this;\\n        prependListener(event: 'close', listener: () => void): this;\\n        prependListener(event: 'connection', listener: (socket: Duplex) => void): this;\\n        prependListener(event: 'error', listener: (err: Error) => void): this;\\n        prependListener(event: 'listening', listener: () => void): this;\\n        prependListener(event: 'checkContinue', listener: http.RequestListener<Request, Response>): this;\\n        prependListener(event: 'checkExpectation', listener: http.RequestListener<Request, Response>): this;\\n        prependListener(event: 'clientError', listener: (err: Error, socket: Duplex) => void): this;\\n        prependListener(\\n            event: 'connect',\\n            listener: (req: InstanceType<Request>, socket: Duplex, head: Buffer) => void,\\n        ): this;\\n        prependListener(event: 'request', listener: http.RequestListener<Request, Response>): this;\\n        prependListener(\\n            event: 'upgrade',\\n            listener: (req: InstanceType<Request>, socket: Duplex, head: Buffer) => void,\\n        ): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'keylog', listener: (line: Buffer, tlsSocket: tls.TLSSocket) => void): this;\\n        prependOnceListener(\\n            event: 'newSession',\\n            listener: (sessionId: Buffer, sessionData: Buffer, callback: (err: Error, resp: Buffer) => void) => void,\\n        ): this;\\n        prependOnceListener(\\n            event: 'OCSPRequest',\\n            listener: (\\n                certificate: Buffer,\\n                issuer: Buffer,\\n                callback: (err: Error | null, resp: Buffer) => void,\\n            ) => void,\\n        ): this;\\n        prependOnceListener(\\n            event: 'resumeSession',\\n            listener: (sessionId: Buffer, callback: (err: Error, sessionData: Buffer) => void) => void,\\n        ): this;\\n        prependOnceListener(event: 'secureConnection', listener: (tlsSocket: tls.TLSSocket) => void): this;\\n        prependOnceListener(event: 'tlsClientError', listener: (err: Error, tlsSocket: tls.TLSSocket) => void): this;\\n        prependOnceListener(event: 'close', listener: () => void): this;\\n        prependOnceListener(event: 'connection', listener: (socket: Duplex) => void): this;\\n        prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n        prependOnceListener(event: 'listening', listener: () => void): this;\\n        prependOnceListener(event: 'checkContinue', listener: http.RequestListener<Request, Response>): this;\\n        prependOnceListener(event: 'checkExpectation', listener: http.RequestListener<Request, Response>): this;\\n        prependOnceListener(event: 'clientError', listener: (err: Error, socket: Duplex) => void): this;\\n        prependOnceListener(\\n            event: 'connect',\\n            listener: (req: InstanceType<Request>, socket: Duplex, head: Buffer) => void,\\n        ): this;\\n        prependOnceListener(event: 'request', listener: http.RequestListener<Request, Response>): this;\\n        prependOnceListener(\\n            event: 'upgrade',\\n            listener: (req: InstanceType<Request>, socket: Duplex, head: Buffer) => void,\\n        ): this;\\n    }\\n    /**\\n     * ```js\\n     * // curl -k https://localhost:8000/\\n     * const https = require('https');\\n     * const fs = require('fs');\\n     *\\n     * const options = {\\n     *   key: fs.readFileSync('test/fixtures/keys/agent2-key.pem'),\\n     *   cert: fs.readFileSync('test/fixtures/keys/agent2-cert.pem')\\n     * };\\n     *\\n     * https.createServer(options, (req, res) => {\\n     *   res.writeHead(200);\\n     *   res.end('hello world\\\\n');\\n     * }).listen(8000);\\n     * ```\\n     *\\n     * Or\\n     *\\n     * ```js\\n     * const https = require('https');\\n     * const fs = require('fs');\\n     *\\n     * const options = {\\n     *   pfx: fs.readFileSync('test/fixtures/test_cert.pfx'),\\n     *   passphrase: 'sample'\\n     * };\\n     *\\n     * https.createServer(options, (req, res) => {\\n     *   res.writeHead(200);\\n     *   res.end('hello world\\\\n');\\n     * }).listen(8000);\\n     * ```\\n     * @since v0.3.4\\n     * @param options Accepts `options` from `createServer`, `createSecureContext` and `createServer`.\\n     * @param requestListener A listener to be added to the `'request'` event.\\n     */\\n    function createServer<\\n        Request extends typeof http.IncomingMessage = typeof http.IncomingMessage,\\n        Response extends typeof http.ServerResponse = typeof http.ServerResponse,\\n    >(requestListener?: http.RequestListener<Request, Response>): Server<Request, Response>;\\n    function createServer<\\n        Request extends typeof http.IncomingMessage = typeof http.IncomingMessage,\\n        Response extends typeof http.ServerResponse = typeof http.ServerResponse,\\n    >(\\n        options: ServerOptions<Request, Response>,\\n        requestListener?: http.RequestListener<Request, Response>,\\n    ): Server<Request, Response>;\\n    /**\\n     * Makes a request to a secure web server.\\n     *\\n     * The following additional `options` from `tls.connect()` are also accepted:`ca`, `cert`, `ciphers`, `clientCertEngine`, `crl`, `dhparam`, `ecdhCurve`,`honorCipherOrder`, `key`, `passphrase`,\\n     * `pfx`, `rejectUnauthorized`,`secureOptions`, `secureProtocol`, `servername`, `sessionIdContext`,`highWaterMark`.\\n     *\\n     * `options` can be an object, a string, or a `URL` object. If `options` is a\\n     * string, it is automatically parsed with `new URL()`. If it is a `URL` object, it will be automatically converted to an ordinary `options` object.\\n     *\\n     * `https.request()` returns an instance of the `http.ClientRequest` class. The `ClientRequest` instance is a writable stream. If one needs to\\n     * upload a file with a POST request, then write to the `ClientRequest` object.\\n     *\\n     * ```js\\n     * const https = require('https');\\n     *\\n     * const options = {\\n     *   hostname: 'encrypted.google.com',\\n     *   port: 443,\\n     *   path: '/',\\n     *   method: 'GET'\\n     * };\\n     *\\n     * const req = https.request(options, (res) => {\\n     *   console.log('statusCode:', res.statusCode);\\n     *   console.log('headers:', res.headers);\\n     *\\n     *   res.on('data', (d) => {\\n     *     process.stdout.write(d);\\n     *   });\\n     * });\\n     *\\n     * req.on('error', (e) => {\\n     *   console.error(e);\\n     * });\\n     * req.end();\\n     * ```\\n     *\\n     * Example using options from `tls.connect()`:\\n     *\\n     * ```js\\n     * const options = {\\n     *   hostname: 'encrypted.google.com',\\n     *   port: 443,\\n     *   path: '/',\\n     *   method: 'GET',\\n     *   key: fs.readFileSync('test/fixtures/keys/agent2-key.pem'),\\n     *   cert: fs.readFileSync('test/fixtures/keys/agent2-cert.pem')\\n     * };\\n     * options.agent = new https.Agent(options);\\n     *\\n     * const req = https.request(options, (res) => {\\n     *   // ...\\n     * });\\n     * ```\\n     *\\n     * Alternatively, opt out of connection pooling by not using an `Agent`.\\n     *\\n     * ```js\\n     * const options = {\\n     *   hostname: 'encrypted.google.com',\\n     *   port: 443,\\n     *   path: '/',\\n     *   method: 'GET',\\n     *   key: fs.readFileSync('test/fixtures/keys/agent2-key.pem'),\\n     *   cert: fs.readFileSync('test/fixtures/keys/agent2-cert.pem'),\\n     *   agent: false\\n     * };\\n     *\\n     * const req = https.request(options, (res) => {\\n     *   // ...\\n     * });\\n     * ```\\n     *\\n     * Example using a `URL` as `options`:\\n     *\\n     * ```js\\n     * const options = new URL('https://abc:xyz@example.com');\\n     *\\n     * const req = https.request(options, (res) => {\\n     *   // ...\\n     * });\\n     * ```\\n     *\\n     * Example pinning on certificate fingerprint, or the public key (similar to`pin-sha256`):\\n     *\\n     * ```js\\n     * const tls = require('tls');\\n     * const https = require('https');\\n     * const crypto = require('crypto');\\n     *\\n     * function sha256(s) {\\n     *   return crypto.createHash('sha256').update(s).digest('base64');\\n     * }\\n     * const options = {\\n     *   hostname: 'github.com',\\n     *   port: 443,\\n     *   path: '/',\\n     *   method: 'GET',\\n     *   checkServerIdentity: function(host, cert) {\\n     *     // Make sure the certificate is issued to the host we are connected to\\n     *     const err = tls.checkServerIdentity(host, cert);\\n     *     if (err) {\\n     *       return err;\\n     *     }\\n     *\\n     *     // Pin the public key, similar to HPKP pin-sha25 pinning\\n     *     const pubkey256 = 'pL1+qb9HTMRZJmuC/bB/ZI9d302BYrrqiVuRyW+DGrU=';\\n     *     if (sha256(cert.pubkey) !== pubkey256) {\\n     *       const msg = 'Certificate verification error: ' +\\n     *         `The public key of '${cert.subject.CN}' ` +\\n     *         'does not match our pinned fingerprint';\\n     *       return new Error(msg);\\n     *     }\\n     *\\n     *     // Pin the exact certificate, rather than the pub key\\n     *     const cert256 = '25:FE:39:32:D9:63:8C:8A:FC:A1:9A:29:87:' +\\n     *       'D8:3E:4C:1D:98:DB:71:E4:1A:48:03:98:EA:22:6A:BD:8B:93:16';\\n     *     if (cert.fingerprint256 !== cert256) {\\n     *       const msg = 'Certificate verification error: ' +\\n     *         `The certificate of '${cert.subject.CN}' ` +\\n     *         'does not match our pinned fingerprint';\\n     *       return new Error(msg);\\n     *     }\\n     *\\n     *     // This loop is informational only.\\n     *     // Print the certificate and public key fingerprints of all certs in the\\n     *     // chain. Its common to pin the public key of the issuer on the public\\n     *     // internet, while pinning the public key of the service in sensitive\\n     *     // environments.\\n     *     do {\\n     *       console.log('Subject Common Name:', cert.subject.CN);\\n     *       console.log('  Certificate SHA256 fingerprint:', cert.fingerprint256);\\n     *\\n     *       hash = crypto.createHash('sha256');\\n     *       console.log('  Public key ping-sha256:', sha256(cert.pubkey));\\n     *\\n     *       lastprint256 = cert.fingerprint256;\\n     *       cert = cert.issuerCertificate;\\n     *     } while (cert.fingerprint256 !== lastprint256);\\n     *\\n     *   },\\n     * };\\n     *\\n     * options.agent = new https.Agent(options);\\n     * const req = https.request(options, (res) => {\\n     *   console.log('All OK. Server matched our pinned cert or public key');\\n     *   console.log('statusCode:', res.statusCode);\\n     *   // Print the HPKP values\\n     *   console.log('headers:', res.headers['public-key-pins']);\\n     *\\n     *   res.on('data', (d) => {});\\n     * });\\n     *\\n     * req.on('error', (e) => {\\n     *   console.error(e.message);\\n     * });\\n     * req.end();\\n     * ```\\n     *\\n     * Outputs for example:\\n     *\\n     * ```text\\n     * Subject Common Name: github.com\\n     *   Certificate SHA256 fingerprint: 25:FE:39:32:D9:63:8C:8A:FC:A1:9A:29:87:D8:3E:4C:1D:98:DB:71:E4:1A:48:03:98:EA:22:6A:BD:8B:93:16\\n     *   Public key ping-sha256: pL1+qb9HTMRZJmuC/bB/ZI9d302BYrrqiVuRyW+DGrU=\\n     * Subject Common Name: DigiCert SHA2 Extended Validation Server CA\\n     *   Certificate SHA256 fingerprint: 40:3E:06:2A:26:53:05:91:13:28:5B:AF:80:A0:D4:AE:42:2C:84:8C:9F:78:FA:D0:1F:C9:4B:C5:B8:7F:EF:1A\\n     *   Public key ping-sha256: RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\\n     * Subject Common Name: DigiCert High Assurance EV Root CA\\n     *   Certificate SHA256 fingerprint: 74:31:E5:F4:C3:C1:CE:46:90:77:4F:0B:61:E0:54:40:88:3B:A9:A0:1E:D0:0B:A6:AB:D7:80:6E:D3:B1:18:CF\\n     *   Public key ping-sha256: WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\\n     * All OK. Server matched our pinned cert or public key\\n     * statusCode: 200\\n     * headers: max-age=0; pin-sha256=\\\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\\\"; pin-sha256=\\\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\\\";\\n     * pin-sha256=\\\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\\\"; pin-sha256=\\\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\\\"; pin-sha256=\\\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\\\";\\n     * pin-sha256=\\\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\\\"; pin-sha256=\\\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\\\"; includeSubDomains\\n     * ```\\n     * @since v0.3.6\\n     * @param options Accepts all `options` from `request`, with some differences in default values:\\n     */\\n    function request(\\n        options: RequestOptions | string | URL,\\n        callback?: (res: http.IncomingMessage) => void,\\n    ): http.ClientRequest;\\n    function request(\\n        url: string | URL,\\n        options: RequestOptions,\\n        callback?: (res: http.IncomingMessage) => void,\\n    ): http.ClientRequest;\\n    /**\\n     * Like `http.get()` but for HTTPS.\\n     *\\n     * `options` can be an object, a string, or a `URL` object. If `options` is a\\n     * string, it is automatically parsed with `new URL()`. If it is a `URL` object, it will be automatically converted to an ordinary `options` object.\\n     *\\n     * ```js\\n     * const https = require('https');\\n     *\\n     * https.get('https://encrypted.google.com/', (res) => {\\n     *   console.log('statusCode:', res.statusCode);\\n     *   console.log('headers:', res.headers);\\n     *\\n     *   res.on('data', (d) => {\\n     *     process.stdout.write(d);\\n     *   });\\n     *\\n     * }).on('error', (e) => {\\n     *   console.error(e);\\n     * });\\n     * ```\\n     * @since v0.3.6\\n     * @param options Accepts the same `options` as {@link request}, with the `method` always set to `GET`.\\n     */\\n    function get(\\n        options: RequestOptions | string | URL,\\n        callback?: (res: http.IncomingMessage) => void,\\n    ): http.ClientRequest;\\n    function get(\\n        url: string | URL,\\n        options: RequestOptions,\\n        callback?: (res: http.IncomingMessage) => void,\\n    ): http.ClientRequest;\\n    let globalAgent: Agent;\\n}\\ndeclare module 'node:https' {\\n    export * from 'https';\\n}\\n\",\"file:///node_modules/@types/node/index.d.ts\":\"// Type definitions for non-npm package Node.js 18.16\\n// Project: https://nodejs.org/\\n// Definitions by: Microsoft TypeScript <https://github.com/Microsoft>\\n//                 DefinitelyTyped <https://github.com/DefinitelyTyped>\\n//                 Alberto Schiabel <https://github.com/jkomyno>\\n//                 Alvis HT Tang <https://github.com/alvis>\\n//                 Andrew Makarov <https://github.com/r3nya>\\n//                 Benjamin Toueg <https://github.com/btoueg>\\n//                 Chigozirim C. <https://github.com/smac89>\\n//                 David Junger <https://github.com/touffy>\\n//                 Deividas Bakanas <https://github.com/DeividasBakanas>\\n//                 Eugene Y. Q. Shen <https://github.com/eyqs>\\n//                 Hannes Magnusson <https://github.com/Hannes-Magnusson-CK>\\n//                 Huw <https://github.com/hoo29>\\n//                 Kelvin Jin <https://github.com/kjin>\\n//                 Klaus Meinhardt <https://github.com/ajafff>\\n//                 Lishude <https://github.com/islishude>\\n//                 Mariusz Wiktorczyk <https://github.com/mwiktorczyk>\\n//                 Mohsen Azimi <https://github.com/mohsen1>\\n//                 Nicolas Even <https://github.com/n-e>\\n//                 Nikita Galkin <https://github.com/galkin>\\n//                 Parambir Singh <https://github.com/parambirs>\\n//                 Sebastian Silbermann <https://github.com/eps1lon>\\n//                 Simon Schick <https://github.com/SimonSchick>\\n//                 Thomas den Hollander <https://github.com/ThomasdenH>\\n//                 Wilco Bakker <https://github.com/WilcoBakker>\\n//                 wwwy3y3 <https://github.com/wwwy3y3>\\n//                 Samuel Ainsworth <https://github.com/samuela>\\n//                 Kyle Uehlein <https://github.com/kuehlein>\\n//                 Thanik Bhongbhibhat <https://github.com/bhongy>\\n//                 Marcin Kopacz <https://github.com/chyzwar>\\n//                 Trivikram Kamat <https://github.com/trivikr>\\n//                 Junxiao Shi <https://github.com/yoursunny>\\n//                 Ilia Baryshnikov <https://github.com/qwelias>\\n//                 ExE Boss <https://github.com/ExE-Boss>\\n//                 Piotr B\u0142a\u017cejewicz <https://github.com/peterblazejewicz>\\n//                 Anna Henningsen <https://github.com/addaleax>\\n//                 Victor Perin <https://github.com/victorperin>\\n//                 Yongsheng Zhang <https://github.com/ZYSzys>\\n//                 NodeJS Contributors <https://github.com/NodeJS>\\n//                 Linus Unneb\xe4ck <https://github.com/LinusU>\\n//                 wafuwafu13 <https://github.com/wafuwafu13>\\n//                 Matteo Collina <https://github.com/mcollina>\\n//                 Dmitry Semigradsky <https://github.com/Semigradsky>\\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\\n\\n/**\\n * License for programmatically and manually incorporated\\n * documentation aka. `JSDoc` from https://github.com/nodejs/node/tree/master/doc\\n *\\n * Copyright Node.js contributors. All rights reserved.\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to\\n * deal in the Software without restriction, including without limitation the\\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\\n * sell copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * all copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\\n * IN THE SOFTWARE.\\n */\\n\\n// NOTE: These definitions support NodeJS and TypeScript 4.9+.\\n\\n// Reference required types from the default lib:\\n/// <reference lib=\\\"es2020\\\" />\\n/// <reference lib=\\\"esnext.asynciterable\\\" />\\n/// <reference lib=\\\"esnext.intl\\\" />\\n/// <reference lib=\\\"esnext.bigint\\\" />\\n\\n// Base definitions for all NodeJS modules that are not specific to any version of TypeScript:\\n/// <reference path=\\\"assert.d.ts\\\" />\\n/// <reference path=\\\"assert/strict.d.ts\\\" />\\n/// <reference path=\\\"globals.d.ts\\\" />\\n/// <reference path=\\\"async_hooks.d.ts\\\" />\\n/// <reference path=\\\"buffer.d.ts\\\" />\\n/// <reference path=\\\"child_process.d.ts\\\" />\\n/// <reference path=\\\"cluster.d.ts\\\" />\\n/// <reference path=\\\"console.d.ts\\\" />\\n/// <reference path=\\\"constants.d.ts\\\" />\\n/// <reference path=\\\"crypto.d.ts\\\" />\\n/// <reference path=\\\"dgram.d.ts\\\" />\\n/// <reference path=\\\"diagnostics_channel.d.ts\\\" />\\n/// <reference path=\\\"dns.d.ts\\\" />\\n/// <reference path=\\\"dns/promises.d.ts\\\" />\\n/// <reference path=\\\"dns/promises.d.ts\\\" />\\n/// <reference path=\\\"domain.d.ts\\\" />\\n/// <reference path=\\\"dom-events.d.ts\\\" />\\n/// <reference path=\\\"events.d.ts\\\" />\\n/// <reference path=\\\"fs.d.ts\\\" />\\n/// <reference path=\\\"fs/promises.d.ts\\\" />\\n/// <reference path=\\\"http.d.ts\\\" />\\n/// <reference path=\\\"http2.d.ts\\\" />\\n/// <reference path=\\\"https.d.ts\\\" />\\n/// <reference path=\\\"inspector.d.ts\\\" />\\n/// <reference path=\\\"module.d.ts\\\" />\\n/// <reference path=\\\"net.d.ts\\\" />\\n/// <reference path=\\\"os.d.ts\\\" />\\n/// <reference path=\\\"path.d.ts\\\" />\\n/// <reference path=\\\"perf_hooks.d.ts\\\" />\\n/// <reference path=\\\"process.d.ts\\\" />\\n/// <reference path=\\\"punycode.d.ts\\\" />\\n/// <reference path=\\\"querystring.d.ts\\\" />\\n/// <reference path=\\\"readline.d.ts\\\" />\\n/// <reference path=\\\"readline/promises.d.ts\\\" />\\n/// <reference path=\\\"repl.d.ts\\\" />\\n/// <reference path=\\\"stream.d.ts\\\" />\\n/// <reference path=\\\"stream/promises.d.ts\\\" />\\n/// <reference path=\\\"stream/consumers.d.ts\\\" />\\n/// <reference path=\\\"stream/web.d.ts\\\" />\\n/// <reference path=\\\"string_decoder.d.ts\\\" />\\n/// <reference path=\\\"test.d.ts\\\" />\\n/// <reference path=\\\"timers.d.ts\\\" />\\n/// <reference path=\\\"timers/promises.d.ts\\\" />\\n/// <reference path=\\\"tls.d.ts\\\" />\\n/// <reference path=\\\"trace_events.d.ts\\\" />\\n/// <reference path=\\\"tty.d.ts\\\" />\\n/// <reference path=\\\"url.d.ts\\\" />\\n/// <reference path=\\\"util.d.ts\\\" />\\n/// <reference path=\\\"v8.d.ts\\\" />\\n/// <reference path=\\\"vm.d.ts\\\" />\\n/// <reference path=\\\"wasi.d.ts\\\" />\\n/// <reference path=\\\"worker_threads.d.ts\\\" />\\n/// <reference path=\\\"zlib.d.ts\\\" />\\n\\n/// <reference path=\\\"globals.global.d.ts\\\" />\\n\",\"file:///node_modules/@types/node/inspector.d.ts\":\"// eslint-disable-next-line dt-header\\n// Type definitions for inspector\\n\\n// These definitions are auto-generated.\\n// Please see https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19330\\n// for more information.\\n\\n// tslint:disable:max-line-length\\n\\n/**\\n * The `inspector` module provides an API for interacting with the V8 inspector.\\n *\\n * It can be accessed using:\\n *\\n * ```js\\n * const inspector = require('inspector');\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/inspector.js)\\n */\\ndeclare module 'inspector' {\\n    import EventEmitter = require('node:events');\\n    interface InspectorNotification<T> {\\n        method: string;\\n        params: T;\\n    }\\n    namespace Schema {\\n        /**\\n         * Description of the protocol domain.\\n         */\\n        interface Domain {\\n            /**\\n             * Domain name.\\n             */\\n            name: string;\\n            /**\\n             * Domain version.\\n             */\\n            version: string;\\n        }\\n        interface GetDomainsReturnType {\\n            /**\\n             * List of supported domains.\\n             */\\n            domains: Domain[];\\n        }\\n    }\\n    namespace Runtime {\\n        /**\\n         * Unique script identifier.\\n         */\\n        type ScriptId = string;\\n        /**\\n         * Unique object identifier.\\n         */\\n        type RemoteObjectId = string;\\n        /**\\n         * Primitive value which cannot be JSON-stringified.\\n         */\\n        type UnserializableValue = string;\\n        /**\\n         * Mirror object referencing original JavaScript object.\\n         */\\n        interface RemoteObject {\\n            /**\\n             * Object type.\\n             */\\n            type: string;\\n            /**\\n             * Object subtype hint. Specified for <code>object</code> type values only.\\n             */\\n            subtype?: string | undefined;\\n            /**\\n             * Object class (constructor) name. Specified for <code>object</code> type values only.\\n             */\\n            className?: string | undefined;\\n            /**\\n             * Remote object value in case of primitive values or JSON values (if it was requested).\\n             */\\n            value?: any;\\n            /**\\n             * Primitive value which can not be JSON-stringified does not have <code>value</code>, but gets this property.\\n             */\\n            unserializableValue?: UnserializableValue | undefined;\\n            /**\\n             * String representation of the object.\\n             */\\n            description?: string | undefined;\\n            /**\\n             * Unique object identifier (for non-primitive values).\\n             */\\n            objectId?: RemoteObjectId | undefined;\\n            /**\\n             * Preview containing abbreviated property values. Specified for <code>object</code> type values only.\\n             * @experimental\\n             */\\n            preview?: ObjectPreview | undefined;\\n            /**\\n             * @experimental\\n             */\\n            customPreview?: CustomPreview | undefined;\\n        }\\n        /**\\n         * @experimental\\n         */\\n        interface CustomPreview {\\n            header: string;\\n            hasBody: boolean;\\n            formatterObjectId: RemoteObjectId;\\n            bindRemoteObjectFunctionId: RemoteObjectId;\\n            configObjectId?: RemoteObjectId | undefined;\\n        }\\n        /**\\n         * Object containing abbreviated remote object value.\\n         * @experimental\\n         */\\n        interface ObjectPreview {\\n            /**\\n             * Object type.\\n             */\\n            type: string;\\n            /**\\n             * Object subtype hint. Specified for <code>object</code> type values only.\\n             */\\n            subtype?: string | undefined;\\n            /**\\n             * String representation of the object.\\n             */\\n            description?: string | undefined;\\n            /**\\n             * True iff some of the properties or entries of the original object did not fit.\\n             */\\n            overflow: boolean;\\n            /**\\n             * List of the properties.\\n             */\\n            properties: PropertyPreview[];\\n            /**\\n             * List of the entries. Specified for <code>map</code> and <code>set</code> subtype values only.\\n             */\\n            entries?: EntryPreview[] | undefined;\\n        }\\n        /**\\n         * @experimental\\n         */\\n        interface PropertyPreview {\\n            /**\\n             * Property name.\\n             */\\n            name: string;\\n            /**\\n             * Object type. Accessor means that the property itself is an accessor property.\\n             */\\n            type: string;\\n            /**\\n             * User-friendly property value string.\\n             */\\n            value?: string | undefined;\\n            /**\\n             * Nested value preview.\\n             */\\n            valuePreview?: ObjectPreview | undefined;\\n            /**\\n             * Object subtype hint. Specified for <code>object</code> type values only.\\n             */\\n            subtype?: string | undefined;\\n        }\\n        /**\\n         * @experimental\\n         */\\n        interface EntryPreview {\\n            /**\\n             * Preview of the key. Specified for map-like collection entries.\\n             */\\n            key?: ObjectPreview | undefined;\\n            /**\\n             * Preview of the value.\\n             */\\n            value: ObjectPreview;\\n        }\\n        /**\\n         * Object property descriptor.\\n         */\\n        interface PropertyDescriptor {\\n            /**\\n             * Property name or symbol description.\\n             */\\n            name: string;\\n            /**\\n             * The value associated with the property.\\n             */\\n            value?: RemoteObject | undefined;\\n            /**\\n             * True if the value associated with the property may be changed (data descriptors only).\\n             */\\n            writable?: boolean | undefined;\\n            /**\\n             * A function which serves as a getter for the property, or <code>undefined</code> if there is no getter (accessor descriptors only).\\n             */\\n            get?: RemoteObject | undefined;\\n            /**\\n             * A function which serves as a setter for the property, or <code>undefined</code> if there is no setter (accessor descriptors only).\\n             */\\n            set?: RemoteObject | undefined;\\n            /**\\n             * True if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.\\n             */\\n            configurable: boolean;\\n            /**\\n             * True if this property shows up during enumeration of the properties on the corresponding object.\\n             */\\n            enumerable: boolean;\\n            /**\\n             * True if the result was thrown during the evaluation.\\n             */\\n            wasThrown?: boolean | undefined;\\n            /**\\n             * True if the property is owned for the object.\\n             */\\n            isOwn?: boolean | undefined;\\n            /**\\n             * Property symbol object, if the property is of the <code>symbol</code> type.\\n             */\\n            symbol?: RemoteObject | undefined;\\n        }\\n        /**\\n         * Object internal property descriptor. This property isn't normally visible in JavaScript code.\\n         */\\n        interface InternalPropertyDescriptor {\\n            /**\\n             * Conventional property name.\\n             */\\n            name: string;\\n            /**\\n             * The value associated with the property.\\n             */\\n            value?: RemoteObject | undefined;\\n        }\\n        /**\\n         * Represents function call argument. Either remote object id <code>objectId</code>, primitive <code>value</code>, unserializable primitive value or neither of (for undefined) them should be specified.\\n         */\\n        interface CallArgument {\\n            /**\\n             * Primitive value or serializable javascript object.\\n             */\\n            value?: any;\\n            /**\\n             * Primitive value which can not be JSON-stringified.\\n             */\\n            unserializableValue?: UnserializableValue | undefined;\\n            /**\\n             * Remote object handle.\\n             */\\n            objectId?: RemoteObjectId | undefined;\\n        }\\n        /**\\n         * Id of an execution context.\\n         */\\n        type ExecutionContextId = number;\\n        /**\\n         * Description of an isolated world.\\n         */\\n        interface ExecutionContextDescription {\\n            /**\\n             * Unique id of the execution context. It can be used to specify in which execution context script evaluation should be performed.\\n             */\\n            id: ExecutionContextId;\\n            /**\\n             * Execution context origin.\\n             */\\n            origin: string;\\n            /**\\n             * Human readable name describing given context.\\n             */\\n            name: string;\\n            /**\\n             * Embedder-specific auxiliary data.\\n             */\\n            auxData?: {} | undefined;\\n        }\\n        /**\\n         * Detailed information about exception (or error) that was thrown during script compilation or execution.\\n         */\\n        interface ExceptionDetails {\\n            /**\\n             * Exception id.\\n             */\\n            exceptionId: number;\\n            /**\\n             * Exception text, which should be used together with exception object when available.\\n             */\\n            text: string;\\n            /**\\n             * Line number of the exception location (0-based).\\n             */\\n            lineNumber: number;\\n            /**\\n             * Column number of the exception location (0-based).\\n             */\\n            columnNumber: number;\\n            /**\\n             * Script ID of the exception location.\\n             */\\n            scriptId?: ScriptId | undefined;\\n            /**\\n             * URL of the exception location, to be used when the script was not reported.\\n             */\\n            url?: string | undefined;\\n            /**\\n             * JavaScript stack trace if available.\\n             */\\n            stackTrace?: StackTrace | undefined;\\n            /**\\n             * Exception object if available.\\n             */\\n            exception?: RemoteObject | undefined;\\n            /**\\n             * Identifier of the context where exception happened.\\n             */\\n            executionContextId?: ExecutionContextId | undefined;\\n        }\\n        /**\\n         * Number of milliseconds since epoch.\\n         */\\n        type Timestamp = number;\\n        /**\\n         * Stack entry for runtime errors and assertions.\\n         */\\n        interface CallFrame {\\n            /**\\n             * JavaScript function name.\\n             */\\n            functionName: string;\\n            /**\\n             * JavaScript script id.\\n             */\\n            scriptId: ScriptId;\\n            /**\\n             * JavaScript script name or url.\\n             */\\n            url: string;\\n            /**\\n             * JavaScript script line number (0-based).\\n             */\\n            lineNumber: number;\\n            /**\\n             * JavaScript script column number (0-based).\\n             */\\n            columnNumber: number;\\n        }\\n        /**\\n         * Call frames for assertions or error messages.\\n         */\\n        interface StackTrace {\\n            /**\\n             * String label of this stack trace. For async traces this may be a name of the function that initiated the async call.\\n             */\\n            description?: string | undefined;\\n            /**\\n             * JavaScript function name.\\n             */\\n            callFrames: CallFrame[];\\n            /**\\n             * Asynchronous JavaScript stack trace that preceded this stack, if available.\\n             */\\n            parent?: StackTrace | undefined;\\n            /**\\n             * Asynchronous JavaScript stack trace that preceded this stack, if available.\\n             * @experimental\\n             */\\n            parentId?: StackTraceId | undefined;\\n        }\\n        /**\\n         * Unique identifier of current debugger.\\n         * @experimental\\n         */\\n        type UniqueDebuggerId = string;\\n        /**\\n         * If <code>debuggerId</code> is set stack trace comes from another debugger and can be resolved there. This allows to track cross-debugger calls. See <code>Runtime.StackTrace</code> and <code>Debugger.paused</code> for usages.\\n         * @experimental\\n         */\\n        interface StackTraceId {\\n            id: string;\\n            debuggerId?: UniqueDebuggerId | undefined;\\n        }\\n        interface EvaluateParameterType {\\n            /**\\n             * Expression to evaluate.\\n             */\\n            expression: string;\\n            /**\\n             * Symbolic group name that can be used to release multiple objects.\\n             */\\n            objectGroup?: string | undefined;\\n            /**\\n             * Determines whether Command Line API should be available during the evaluation.\\n             */\\n            includeCommandLineAPI?: boolean | undefined;\\n            /**\\n             * In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state.\\n             */\\n            silent?: boolean | undefined;\\n            /**\\n             * Specifies in which execution context to perform evaluation. If the parameter is omitted the evaluation will be performed in the context of the inspected page.\\n             */\\n            contextId?: ExecutionContextId | undefined;\\n            /**\\n             * Whether the result is expected to be a JSON object that should be sent by value.\\n             */\\n            returnByValue?: boolean | undefined;\\n            /**\\n             * Whether preview should be generated for the result.\\n             * @experimental\\n             */\\n            generatePreview?: boolean | undefined;\\n            /**\\n             * Whether execution should be treated as initiated by user in the UI.\\n             */\\n            userGesture?: boolean | undefined;\\n            /**\\n             * Whether execution should <code>await</code> for resulting value and return once awaited promise is resolved.\\n             */\\n            awaitPromise?: boolean | undefined;\\n        }\\n        interface AwaitPromiseParameterType {\\n            /**\\n             * Identifier of the promise.\\n             */\\n            promiseObjectId: RemoteObjectId;\\n            /**\\n             * Whether the result is expected to be a JSON object that should be sent by value.\\n             */\\n            returnByValue?: boolean | undefined;\\n            /**\\n             * Whether preview should be generated for the result.\\n             */\\n            generatePreview?: boolean | undefined;\\n        }\\n        interface CallFunctionOnParameterType {\\n            /**\\n             * Declaration of the function to call.\\n             */\\n            functionDeclaration: string;\\n            /**\\n             * Identifier of the object to call function on. Either objectId or executionContextId should be specified.\\n             */\\n            objectId?: RemoteObjectId | undefined;\\n            /**\\n             * Call arguments. All call arguments must belong to the same JavaScript world as the target object.\\n             */\\n            arguments?: CallArgument[] | undefined;\\n            /**\\n             * In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state.\\n             */\\n            silent?: boolean | undefined;\\n            /**\\n             * Whether the result is expected to be a JSON object which should be sent by value.\\n             */\\n            returnByValue?: boolean | undefined;\\n            /**\\n             * Whether preview should be generated for the result.\\n             * @experimental\\n             */\\n            generatePreview?: boolean | undefined;\\n            /**\\n             * Whether execution should be treated as initiated by user in the UI.\\n             */\\n            userGesture?: boolean | undefined;\\n            /**\\n             * Whether execution should <code>await</code> for resulting value and return once awaited promise is resolved.\\n             */\\n            awaitPromise?: boolean | undefined;\\n            /**\\n             * Specifies execution context which global object will be used to call function on. Either executionContextId or objectId should be specified.\\n             */\\n            executionContextId?: ExecutionContextId | undefined;\\n            /**\\n             * Symbolic group name that can be used to release multiple objects. If objectGroup is not specified and objectId is, objectGroup will be inherited from object.\\n             */\\n            objectGroup?: string | undefined;\\n        }\\n        interface GetPropertiesParameterType {\\n            /**\\n             * Identifier of the object to return properties for.\\n             */\\n            objectId: RemoteObjectId;\\n            /**\\n             * If true, returns properties belonging only to the element itself, not to its prototype chain.\\n             */\\n            ownProperties?: boolean | undefined;\\n            /**\\n             * If true, returns accessor properties (with getter/setter) only; internal properties are not returned either.\\n             * @experimental\\n             */\\n            accessorPropertiesOnly?: boolean | undefined;\\n            /**\\n             * Whether preview should be generated for the results.\\n             * @experimental\\n             */\\n            generatePreview?: boolean | undefined;\\n        }\\n        interface ReleaseObjectParameterType {\\n            /**\\n             * Identifier of the object to release.\\n             */\\n            objectId: RemoteObjectId;\\n        }\\n        interface ReleaseObjectGroupParameterType {\\n            /**\\n             * Symbolic object group name.\\n             */\\n            objectGroup: string;\\n        }\\n        interface SetCustomObjectFormatterEnabledParameterType {\\n            enabled: boolean;\\n        }\\n        interface CompileScriptParameterType {\\n            /**\\n             * Expression to compile.\\n             */\\n            expression: string;\\n            /**\\n             * Source url to be set for the script.\\n             */\\n            sourceURL: string;\\n            /**\\n             * Specifies whether the compiled script should be persisted.\\n             */\\n            persistScript: boolean;\\n            /**\\n             * Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.\\n             */\\n            executionContextId?: ExecutionContextId | undefined;\\n        }\\n        interface RunScriptParameterType {\\n            /**\\n             * Id of the script to run.\\n             */\\n            scriptId: ScriptId;\\n            /**\\n             * Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.\\n             */\\n            executionContextId?: ExecutionContextId | undefined;\\n            /**\\n             * Symbolic group name that can be used to release multiple objects.\\n             */\\n            objectGroup?: string | undefined;\\n            /**\\n             * In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state.\\n             */\\n            silent?: boolean | undefined;\\n            /**\\n             * Determines whether Command Line API should be available during the evaluation.\\n             */\\n            includeCommandLineAPI?: boolean | undefined;\\n            /**\\n             * Whether the result is expected to be a JSON object which should be sent by value.\\n             */\\n            returnByValue?: boolean | undefined;\\n            /**\\n             * Whether preview should be generated for the result.\\n             */\\n            generatePreview?: boolean | undefined;\\n            /**\\n             * Whether execution should <code>await</code> for resulting value and return once awaited promise is resolved.\\n             */\\n            awaitPromise?: boolean | undefined;\\n        }\\n        interface QueryObjectsParameterType {\\n            /**\\n             * Identifier of the prototype to return objects for.\\n             */\\n            prototypeObjectId: RemoteObjectId;\\n        }\\n        interface GlobalLexicalScopeNamesParameterType {\\n            /**\\n             * Specifies in which execution context to lookup global scope variables.\\n             */\\n            executionContextId?: ExecutionContextId | undefined;\\n        }\\n        interface EvaluateReturnType {\\n            /**\\n             * Evaluation result.\\n             */\\n            result: RemoteObject;\\n            /**\\n             * Exception details.\\n             */\\n            exceptionDetails?: ExceptionDetails | undefined;\\n        }\\n        interface AwaitPromiseReturnType {\\n            /**\\n             * Promise result. Will contain rejected value if promise was rejected.\\n             */\\n            result: RemoteObject;\\n            /**\\n             * Exception details if stack strace is available.\\n             */\\n            exceptionDetails?: ExceptionDetails | undefined;\\n        }\\n        interface CallFunctionOnReturnType {\\n            /**\\n             * Call result.\\n             */\\n            result: RemoteObject;\\n            /**\\n             * Exception details.\\n             */\\n            exceptionDetails?: ExceptionDetails | undefined;\\n        }\\n        interface GetPropertiesReturnType {\\n            /**\\n             * Object properties.\\n             */\\n            result: PropertyDescriptor[];\\n            /**\\n             * Internal object properties (only of the element itself).\\n             */\\n            internalProperties?: InternalPropertyDescriptor[] | undefined;\\n            /**\\n             * Exception details.\\n             */\\n            exceptionDetails?: ExceptionDetails | undefined;\\n        }\\n        interface CompileScriptReturnType {\\n            /**\\n             * Id of the script.\\n             */\\n            scriptId?: ScriptId | undefined;\\n            /**\\n             * Exception details.\\n             */\\n            exceptionDetails?: ExceptionDetails | undefined;\\n        }\\n        interface RunScriptReturnType {\\n            /**\\n             * Run result.\\n             */\\n            result: RemoteObject;\\n            /**\\n             * Exception details.\\n             */\\n            exceptionDetails?: ExceptionDetails | undefined;\\n        }\\n        interface QueryObjectsReturnType {\\n            /**\\n             * Array with objects.\\n             */\\n            objects: RemoteObject;\\n        }\\n        interface GlobalLexicalScopeNamesReturnType {\\n            names: string[];\\n        }\\n        interface ExecutionContextCreatedEventDataType {\\n            /**\\n             * A newly created execution context.\\n             */\\n            context: ExecutionContextDescription;\\n        }\\n        interface ExecutionContextDestroyedEventDataType {\\n            /**\\n             * Id of the destroyed context\\n             */\\n            executionContextId: ExecutionContextId;\\n        }\\n        interface ExceptionThrownEventDataType {\\n            /**\\n             * Timestamp of the exception.\\n             */\\n            timestamp: Timestamp;\\n            exceptionDetails: ExceptionDetails;\\n        }\\n        interface ExceptionRevokedEventDataType {\\n            /**\\n             * Reason describing why exception was revoked.\\n             */\\n            reason: string;\\n            /**\\n             * The id of revoked exception, as reported in <code>exceptionThrown</code>.\\n             */\\n            exceptionId: number;\\n        }\\n        interface ConsoleAPICalledEventDataType {\\n            /**\\n             * Type of the call.\\n             */\\n            type: string;\\n            /**\\n             * Call arguments.\\n             */\\n            args: RemoteObject[];\\n            /**\\n             * Identifier of the context where the call was made.\\n             */\\n            executionContextId: ExecutionContextId;\\n            /**\\n             * Call timestamp.\\n             */\\n            timestamp: Timestamp;\\n            /**\\n             * Stack trace captured when the call was made.\\n             */\\n            stackTrace?: StackTrace | undefined;\\n            /**\\n             * Console context descriptor for calls on non-default console context (not console.*): 'anonymous#unique-logger-id' for call on unnamed context, 'name#unique-logger-id' for call on named context.\\n             * @experimental\\n             */\\n            context?: string | undefined;\\n        }\\n        interface InspectRequestedEventDataType {\\n            object: RemoteObject;\\n            hints: {};\\n        }\\n    }\\n    namespace Debugger {\\n        /**\\n         * Breakpoint identifier.\\n         */\\n        type BreakpointId = string;\\n        /**\\n         * Call frame identifier.\\n         */\\n        type CallFrameId = string;\\n        /**\\n         * Location in the source code.\\n         */\\n        interface Location {\\n            /**\\n             * Script identifier as reported in the <code>Debugger.scriptParsed</code>.\\n             */\\n            scriptId: Runtime.ScriptId;\\n            /**\\n             * Line number in the script (0-based).\\n             */\\n            lineNumber: number;\\n            /**\\n             * Column number in the script (0-based).\\n             */\\n            columnNumber?: number | undefined;\\n        }\\n        /**\\n         * Location in the source code.\\n         * @experimental\\n         */\\n        interface ScriptPosition {\\n            lineNumber: number;\\n            columnNumber: number;\\n        }\\n        /**\\n         * JavaScript call frame. Array of call frames form the call stack.\\n         */\\n        interface CallFrame {\\n            /**\\n             * Call frame identifier. This identifier is only valid while the virtual machine is paused.\\n             */\\n            callFrameId: CallFrameId;\\n            /**\\n             * Name of the JavaScript function called on this call frame.\\n             */\\n            functionName: string;\\n            /**\\n             * Location in the source code.\\n             */\\n            functionLocation?: Location | undefined;\\n            /**\\n             * Location in the source code.\\n             */\\n            location: Location;\\n            /**\\n             * JavaScript script name or url.\\n             */\\n            url: string;\\n            /**\\n             * Scope chain for this call frame.\\n             */\\n            scopeChain: Scope[];\\n            /**\\n             * <code>this</code> object for this call frame.\\n             */\\n            this: Runtime.RemoteObject;\\n            /**\\n             * The value being returned, if the function is at return point.\\n             */\\n            returnValue?: Runtime.RemoteObject | undefined;\\n        }\\n        /**\\n         * Scope description.\\n         */\\n        interface Scope {\\n            /**\\n             * Scope type.\\n             */\\n            type: string;\\n            /**\\n             * Object representing the scope. For <code>global</code> and <code>with</code> scopes it represents the actual object; for the rest of the scopes, it is artificial transient object enumerating scope variables as its properties.\\n             */\\n            object: Runtime.RemoteObject;\\n            name?: string | undefined;\\n            /**\\n             * Location in the source code where scope starts\\n             */\\n            startLocation?: Location | undefined;\\n            /**\\n             * Location in the source code where scope ends\\n             */\\n            endLocation?: Location | undefined;\\n        }\\n        /**\\n         * Search match for resource.\\n         */\\n        interface SearchMatch {\\n            /**\\n             * Line number in resource content.\\n             */\\n            lineNumber: number;\\n            /**\\n             * Line with match content.\\n             */\\n            lineContent: string;\\n        }\\n        interface BreakLocation {\\n            /**\\n             * Script identifier as reported in the <code>Debugger.scriptParsed</code>.\\n             */\\n            scriptId: Runtime.ScriptId;\\n            /**\\n             * Line number in the script (0-based).\\n             */\\n            lineNumber: number;\\n            /**\\n             * Column number in the script (0-based).\\n             */\\n            columnNumber?: number | undefined;\\n            type?: string | undefined;\\n        }\\n        interface SetBreakpointsActiveParameterType {\\n            /**\\n             * New value for breakpoints active state.\\n             */\\n            active: boolean;\\n        }\\n        interface SetSkipAllPausesParameterType {\\n            /**\\n             * New value for skip pauses state.\\n             */\\n            skip: boolean;\\n        }\\n        interface SetBreakpointByUrlParameterType {\\n            /**\\n             * Line number to set breakpoint at.\\n             */\\n            lineNumber: number;\\n            /**\\n             * URL of the resources to set breakpoint on.\\n             */\\n            url?: string | undefined;\\n            /**\\n             * Regex pattern for the URLs of the resources to set breakpoints on. Either <code>url</code> or <code>urlRegex</code> must be specified.\\n             */\\n            urlRegex?: string | undefined;\\n            /**\\n             * Script hash of the resources to set breakpoint on.\\n             */\\n            scriptHash?: string | undefined;\\n            /**\\n             * Offset in the line to set breakpoint at.\\n             */\\n            columnNumber?: number | undefined;\\n            /**\\n             * Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.\\n             */\\n            condition?: string | undefined;\\n        }\\n        interface SetBreakpointParameterType {\\n            /**\\n             * Location to set breakpoint in.\\n             */\\n            location: Location;\\n            /**\\n             * Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.\\n             */\\n            condition?: string | undefined;\\n        }\\n        interface RemoveBreakpointParameterType {\\n            breakpointId: BreakpointId;\\n        }\\n        interface GetPossibleBreakpointsParameterType {\\n            /**\\n             * Start of range to search possible breakpoint locations in.\\n             */\\n            start: Location;\\n            /**\\n             * End of range to search possible breakpoint locations in (excluding). When not specified, end of scripts is used as end of range.\\n             */\\n            end?: Location | undefined;\\n            /**\\n             * Only consider locations which are in the same (non-nested) function as start.\\n             */\\n            restrictToFunction?: boolean | undefined;\\n        }\\n        interface ContinueToLocationParameterType {\\n            /**\\n             * Location to continue to.\\n             */\\n            location: Location;\\n            targetCallFrames?: string | undefined;\\n        }\\n        interface PauseOnAsyncCallParameterType {\\n            /**\\n             * Debugger will pause when async call with given stack trace is started.\\n             */\\n            parentStackTraceId: Runtime.StackTraceId;\\n        }\\n        interface StepIntoParameterType {\\n            /**\\n             * Debugger will issue additional Debugger.paused notification if any async task is scheduled before next pause.\\n             * @experimental\\n             */\\n            breakOnAsyncCall?: boolean | undefined;\\n        }\\n        interface GetStackTraceParameterType {\\n            stackTraceId: Runtime.StackTraceId;\\n        }\\n        interface SearchInContentParameterType {\\n            /**\\n             * Id of the script to search in.\\n             */\\n            scriptId: Runtime.ScriptId;\\n            /**\\n             * String to search for.\\n             */\\n            query: string;\\n            /**\\n             * If true, search is case sensitive.\\n             */\\n            caseSensitive?: boolean | undefined;\\n            /**\\n             * If true, treats string parameter as regex.\\n             */\\n            isRegex?: boolean | undefined;\\n        }\\n        interface SetScriptSourceParameterType {\\n            /**\\n             * Id of the script to edit.\\n             */\\n            scriptId: Runtime.ScriptId;\\n            /**\\n             * New content of the script.\\n             */\\n            scriptSource: string;\\n            /**\\n             *  If true the change will not actually be applied. Dry run may be used to get result description without actually modifying the code.\\n             */\\n            dryRun?: boolean | undefined;\\n        }\\n        interface RestartFrameParameterType {\\n            /**\\n             * Call frame identifier to evaluate on.\\n             */\\n            callFrameId: CallFrameId;\\n        }\\n        interface GetScriptSourceParameterType {\\n            /**\\n             * Id of the script to get source for.\\n             */\\n            scriptId: Runtime.ScriptId;\\n        }\\n        interface SetPauseOnExceptionsParameterType {\\n            /**\\n             * Pause on exceptions mode.\\n             */\\n            state: string;\\n        }\\n        interface EvaluateOnCallFrameParameterType {\\n            /**\\n             * Call frame identifier to evaluate on.\\n             */\\n            callFrameId: CallFrameId;\\n            /**\\n             * Expression to evaluate.\\n             */\\n            expression: string;\\n            /**\\n             * String object group name to put result into (allows rapid releasing resulting object handles using <code>releaseObjectGroup</code>).\\n             */\\n            objectGroup?: string | undefined;\\n            /**\\n             * Specifies whether command line API should be available to the evaluated expression, defaults to false.\\n             */\\n            includeCommandLineAPI?: boolean | undefined;\\n            /**\\n             * In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state.\\n             */\\n            silent?: boolean | undefined;\\n            /**\\n             * Whether the result is expected to be a JSON object that should be sent by value.\\n             */\\n            returnByValue?: boolean | undefined;\\n            /**\\n             * Whether preview should be generated for the result.\\n             * @experimental\\n             */\\n            generatePreview?: boolean | undefined;\\n            /**\\n             * Whether to throw an exception if side effect cannot be ruled out during evaluation.\\n             */\\n            throwOnSideEffect?: boolean | undefined;\\n        }\\n        interface SetVariableValueParameterType {\\n            /**\\n             * 0-based number of scope as was listed in scope chain. Only 'local', 'closure' and 'catch' scope types are allowed. Other scopes could be manipulated manually.\\n             */\\n            scopeNumber: number;\\n            /**\\n             * Variable name.\\n             */\\n            variableName: string;\\n            /**\\n             * New variable value.\\n             */\\n            newValue: Runtime.CallArgument;\\n            /**\\n             * Id of callframe that holds variable.\\n             */\\n            callFrameId: CallFrameId;\\n        }\\n        interface SetReturnValueParameterType {\\n            /**\\n             * New return value.\\n             */\\n            newValue: Runtime.CallArgument;\\n        }\\n        interface SetAsyncCallStackDepthParameterType {\\n            /**\\n             * Maximum depth of async call stacks. Setting to <code>0</code> will effectively disable collecting async call stacks (default).\\n             */\\n            maxDepth: number;\\n        }\\n        interface SetBlackboxPatternsParameterType {\\n            /**\\n             * Array of regexps that will be used to check script url for blackbox state.\\n             */\\n            patterns: string[];\\n        }\\n        interface SetBlackboxedRangesParameterType {\\n            /**\\n             * Id of the script.\\n             */\\n            scriptId: Runtime.ScriptId;\\n            positions: ScriptPosition[];\\n        }\\n        interface EnableReturnType {\\n            /**\\n             * Unique identifier of the debugger.\\n             * @experimental\\n             */\\n            debuggerId: Runtime.UniqueDebuggerId;\\n        }\\n        interface SetBreakpointByUrlReturnType {\\n            /**\\n             * Id of the created breakpoint for further reference.\\n             */\\n            breakpointId: BreakpointId;\\n            /**\\n             * List of the locations this breakpoint resolved into upon addition.\\n             */\\n            locations: Location[];\\n        }\\n        interface SetBreakpointReturnType {\\n            /**\\n             * Id of the created breakpoint for further reference.\\n             */\\n            breakpointId: BreakpointId;\\n            /**\\n             * Location this breakpoint resolved into.\\n             */\\n            actualLocation: Location;\\n        }\\n        interface GetPossibleBreakpointsReturnType {\\n            /**\\n             * List of the possible breakpoint locations.\\n             */\\n            locations: BreakLocation[];\\n        }\\n        interface GetStackTraceReturnType {\\n            stackTrace: Runtime.StackTrace;\\n        }\\n        interface SearchInContentReturnType {\\n            /**\\n             * List of search matches.\\n             */\\n            result: SearchMatch[];\\n        }\\n        interface SetScriptSourceReturnType {\\n            /**\\n             * New stack trace in case editing has happened while VM was stopped.\\n             */\\n            callFrames?: CallFrame[] | undefined;\\n            /**\\n             * Whether current call stack  was modified after applying the changes.\\n             */\\n            stackChanged?: boolean | undefined;\\n            /**\\n             * Async stack trace, if any.\\n             */\\n            asyncStackTrace?: Runtime.StackTrace | undefined;\\n            /**\\n             * Async stack trace, if any.\\n             * @experimental\\n             */\\n            asyncStackTraceId?: Runtime.StackTraceId | undefined;\\n            /**\\n             * Exception details if any.\\n             */\\n            exceptionDetails?: Runtime.ExceptionDetails | undefined;\\n        }\\n        interface RestartFrameReturnType {\\n            /**\\n             * New stack trace.\\n             */\\n            callFrames: CallFrame[];\\n            /**\\n             * Async stack trace, if any.\\n             */\\n            asyncStackTrace?: Runtime.StackTrace | undefined;\\n            /**\\n             * Async stack trace, if any.\\n             * @experimental\\n             */\\n            asyncStackTraceId?: Runtime.StackTraceId | undefined;\\n        }\\n        interface GetScriptSourceReturnType {\\n            /**\\n             * Script source.\\n             */\\n            scriptSource: string;\\n        }\\n        interface EvaluateOnCallFrameReturnType {\\n            /**\\n             * Object wrapper for the evaluation result.\\n             */\\n            result: Runtime.RemoteObject;\\n            /**\\n             * Exception details.\\n             */\\n            exceptionDetails?: Runtime.ExceptionDetails | undefined;\\n        }\\n        interface ScriptParsedEventDataType {\\n            /**\\n             * Identifier of the script parsed.\\n             */\\n            scriptId: Runtime.ScriptId;\\n            /**\\n             * URL or name of the script parsed (if any).\\n             */\\n            url: string;\\n            /**\\n             * Line offset of the script within the resource with given URL (for script tags).\\n             */\\n            startLine: number;\\n            /**\\n             * Column offset of the script within the resource with given URL.\\n             */\\n            startColumn: number;\\n            /**\\n             * Last line of the script.\\n             */\\n            endLine: number;\\n            /**\\n             * Length of the last line of the script.\\n             */\\n            endColumn: number;\\n            /**\\n             * Specifies script creation context.\\n             */\\n            executionContextId: Runtime.ExecutionContextId;\\n            /**\\n             * Content hash of the script.\\n             */\\n            hash: string;\\n            /**\\n             * Embedder-specific auxiliary data.\\n             */\\n            executionContextAuxData?: {} | undefined;\\n            /**\\n             * True, if this script is generated as a result of the live edit operation.\\n             * @experimental\\n             */\\n            isLiveEdit?: boolean | undefined;\\n            /**\\n             * URL of source map associated with script (if any).\\n             */\\n            sourceMapURL?: string | undefined;\\n            /**\\n             * True, if this script has sourceURL.\\n             */\\n            hasSourceURL?: boolean | undefined;\\n            /**\\n             * True, if this script is ES6 module.\\n             */\\n            isModule?: boolean | undefined;\\n            /**\\n             * This script length.\\n             */\\n            length?: number | undefined;\\n            /**\\n             * JavaScript top stack frame of where the script parsed event was triggered if available.\\n             * @experimental\\n             */\\n            stackTrace?: Runtime.StackTrace | undefined;\\n        }\\n        interface ScriptFailedToParseEventDataType {\\n            /**\\n             * Identifier of the script parsed.\\n             */\\n            scriptId: Runtime.ScriptId;\\n            /**\\n             * URL or name of the script parsed (if any).\\n             */\\n            url: string;\\n            /**\\n             * Line offset of the script within the resource with given URL (for script tags).\\n             */\\n            startLine: number;\\n            /**\\n             * Column offset of the script within the resource with given URL.\\n             */\\n            startColumn: number;\\n            /**\\n             * Last line of the script.\\n             */\\n            endLine: number;\\n            /**\\n             * Length of the last line of the script.\\n             */\\n            endColumn: number;\\n            /**\\n             * Specifies script creation context.\\n             */\\n            executionContextId: Runtime.ExecutionContextId;\\n            /**\\n             * Content hash of the script.\\n             */\\n            hash: string;\\n            /**\\n             * Embedder-specific auxiliary data.\\n             */\\n            executionContextAuxData?: {} | undefined;\\n            /**\\n             * URL of source map associated with script (if any).\\n             */\\n            sourceMapURL?: string | undefined;\\n            /**\\n             * True, if this script has sourceURL.\\n             */\\n            hasSourceURL?: boolean | undefined;\\n            /**\\n             * True, if this script is ES6 module.\\n             */\\n            isModule?: boolean | undefined;\\n            /**\\n             * This script length.\\n             */\\n            length?: number | undefined;\\n            /**\\n             * JavaScript top stack frame of where the script parsed event was triggered if available.\\n             * @experimental\\n             */\\n            stackTrace?: Runtime.StackTrace | undefined;\\n        }\\n        interface BreakpointResolvedEventDataType {\\n            /**\\n             * Breakpoint unique identifier.\\n             */\\n            breakpointId: BreakpointId;\\n            /**\\n             * Actual breakpoint location.\\n             */\\n            location: Location;\\n        }\\n        interface PausedEventDataType {\\n            /**\\n             * Call stack the virtual machine stopped on.\\n             */\\n            callFrames: CallFrame[];\\n            /**\\n             * Pause reason.\\n             */\\n            reason: string;\\n            /**\\n             * Object containing break-specific auxiliary properties.\\n             */\\n            data?: {} | undefined;\\n            /**\\n             * Hit breakpoints IDs\\n             */\\n            hitBreakpoints?: string[] | undefined;\\n            /**\\n             * Async stack trace, if any.\\n             */\\n            asyncStackTrace?: Runtime.StackTrace | undefined;\\n            /**\\n             * Async stack trace, if any.\\n             * @experimental\\n             */\\n            asyncStackTraceId?: Runtime.StackTraceId | undefined;\\n            /**\\n             * Just scheduled async call will have this stack trace as parent stack during async execution. This field is available only after <code>Debugger.stepInto</code> call with <code>breakOnAsynCall</code> flag.\\n             * @experimental\\n             */\\n            asyncCallStackTraceId?: Runtime.StackTraceId | undefined;\\n        }\\n    }\\n    namespace Console {\\n        /**\\n         * Console message.\\n         */\\n        interface ConsoleMessage {\\n            /**\\n             * Message source.\\n             */\\n            source: string;\\n            /**\\n             * Message severity.\\n             */\\n            level: string;\\n            /**\\n             * Message text.\\n             */\\n            text: string;\\n            /**\\n             * URL of the message origin.\\n             */\\n            url?: string | undefined;\\n            /**\\n             * Line number in the resource that generated this message (1-based).\\n             */\\n            line?: number | undefined;\\n            /**\\n             * Column number in the resource that generated this message (1-based).\\n             */\\n            column?: number | undefined;\\n        }\\n        interface MessageAddedEventDataType {\\n            /**\\n             * Console message that has been added.\\n             */\\n            message: ConsoleMessage;\\n        }\\n    }\\n    namespace Profiler {\\n        /**\\n         * Profile node. Holds callsite information, execution statistics and child nodes.\\n         */\\n        interface ProfileNode {\\n            /**\\n             * Unique id of the node.\\n             */\\n            id: number;\\n            /**\\n             * Function location.\\n             */\\n            callFrame: Runtime.CallFrame;\\n            /**\\n             * Number of samples where this node was on top of the call stack.\\n             */\\n            hitCount?: number | undefined;\\n            /**\\n             * Child node ids.\\n             */\\n            children?: number[] | undefined;\\n            /**\\n             * The reason of being not optimized. The function may be deoptimized or marked as don't optimize.\\n             */\\n            deoptReason?: string | undefined;\\n            /**\\n             * An array of source position ticks.\\n             */\\n            positionTicks?: PositionTickInfo[] | undefined;\\n        }\\n        /**\\n         * Profile.\\n         */\\n        interface Profile {\\n            /**\\n             * The list of profile nodes. First item is the root node.\\n             */\\n            nodes: ProfileNode[];\\n            /**\\n             * Profiling start timestamp in microseconds.\\n             */\\n            startTime: number;\\n            /**\\n             * Profiling end timestamp in microseconds.\\n             */\\n            endTime: number;\\n            /**\\n             * Ids of samples top nodes.\\n             */\\n            samples?: number[] | undefined;\\n            /**\\n             * Time intervals between adjacent samples in microseconds. The first delta is relative to the profile startTime.\\n             */\\n            timeDeltas?: number[] | undefined;\\n        }\\n        /**\\n         * Specifies a number of samples attributed to a certain source position.\\n         */\\n        interface PositionTickInfo {\\n            /**\\n             * Source line number (1-based).\\n             */\\n            line: number;\\n            /**\\n             * Number of samples attributed to the source line.\\n             */\\n            ticks: number;\\n        }\\n        /**\\n         * Coverage data for a source range.\\n         */\\n        interface CoverageRange {\\n            /**\\n             * JavaScript script source offset for the range start.\\n             */\\n            startOffset: number;\\n            /**\\n             * JavaScript script source offset for the range end.\\n             */\\n            endOffset: number;\\n            /**\\n             * Collected execution count of the source range.\\n             */\\n            count: number;\\n        }\\n        /**\\n         * Coverage data for a JavaScript function.\\n         */\\n        interface FunctionCoverage {\\n            /**\\n             * JavaScript function name.\\n             */\\n            functionName: string;\\n            /**\\n             * Source ranges inside the function with coverage data.\\n             */\\n            ranges: CoverageRange[];\\n            /**\\n             * Whether coverage data for this function has block granularity.\\n             */\\n            isBlockCoverage: boolean;\\n        }\\n        /**\\n         * Coverage data for a JavaScript script.\\n         */\\n        interface ScriptCoverage {\\n            /**\\n             * JavaScript script id.\\n             */\\n            scriptId: Runtime.ScriptId;\\n            /**\\n             * JavaScript script name or url.\\n             */\\n            url: string;\\n            /**\\n             * Functions contained in the script that has coverage data.\\n             */\\n            functions: FunctionCoverage[];\\n        }\\n        /**\\n         * Describes a type collected during runtime.\\n         * @experimental\\n         */\\n        interface TypeObject {\\n            /**\\n             * Name of a type collected with type profiling.\\n             */\\n            name: string;\\n        }\\n        /**\\n         * Source offset and types for a parameter or return value.\\n         * @experimental\\n         */\\n        interface TypeProfileEntry {\\n            /**\\n             * Source offset of the parameter or end of function for return values.\\n             */\\n            offset: number;\\n            /**\\n             * The types for this parameter or return value.\\n             */\\n            types: TypeObject[];\\n        }\\n        /**\\n         * Type profile data collected during runtime for a JavaScript script.\\n         * @experimental\\n         */\\n        interface ScriptTypeProfile {\\n            /**\\n             * JavaScript script id.\\n             */\\n            scriptId: Runtime.ScriptId;\\n            /**\\n             * JavaScript script name or url.\\n             */\\n            url: string;\\n            /**\\n             * Type profile entries for parameters and return values of the functions in the script.\\n             */\\n            entries: TypeProfileEntry[];\\n        }\\n        interface SetSamplingIntervalParameterType {\\n            /**\\n             * New sampling interval in microseconds.\\n             */\\n            interval: number;\\n        }\\n        interface StartPreciseCoverageParameterType {\\n            /**\\n             * Collect accurate call counts beyond simple 'covered' or 'not covered'.\\n             */\\n            callCount?: boolean | undefined;\\n            /**\\n             * Collect block-based coverage.\\n             */\\n            detailed?: boolean | undefined;\\n        }\\n        interface StopReturnType {\\n            /**\\n             * Recorded profile.\\n             */\\n            profile: Profile;\\n        }\\n        interface TakePreciseCoverageReturnType {\\n            /**\\n             * Coverage data for the current isolate.\\n             */\\n            result: ScriptCoverage[];\\n        }\\n        interface GetBestEffortCoverageReturnType {\\n            /**\\n             * Coverage data for the current isolate.\\n             */\\n            result: ScriptCoverage[];\\n        }\\n        interface TakeTypeProfileReturnType {\\n            /**\\n             * Type profile for all scripts since startTypeProfile() was turned on.\\n             */\\n            result: ScriptTypeProfile[];\\n        }\\n        interface ConsoleProfileStartedEventDataType {\\n            id: string;\\n            /**\\n             * Location of console.profile().\\n             */\\n            location: Debugger.Location;\\n            /**\\n             * Profile title passed as an argument to console.profile().\\n             */\\n            title?: string | undefined;\\n        }\\n        interface ConsoleProfileFinishedEventDataType {\\n            id: string;\\n            /**\\n             * Location of console.profileEnd().\\n             */\\n            location: Debugger.Location;\\n            profile: Profile;\\n            /**\\n             * Profile title passed as an argument to console.profile().\\n             */\\n            title?: string | undefined;\\n        }\\n    }\\n    namespace HeapProfiler {\\n        /**\\n         * Heap snapshot object id.\\n         */\\n        type HeapSnapshotObjectId = string;\\n        /**\\n         * Sampling Heap Profile node. Holds callsite information, allocation statistics and child nodes.\\n         */\\n        interface SamplingHeapProfileNode {\\n            /**\\n             * Function location.\\n             */\\n            callFrame: Runtime.CallFrame;\\n            /**\\n             * Allocations size in bytes for the node excluding children.\\n             */\\n            selfSize: number;\\n            /**\\n             * Child nodes.\\n             */\\n            children: SamplingHeapProfileNode[];\\n        }\\n        /**\\n         * Profile.\\n         */\\n        interface SamplingHeapProfile {\\n            head: SamplingHeapProfileNode;\\n        }\\n        interface StartTrackingHeapObjectsParameterType {\\n            trackAllocations?: boolean | undefined;\\n        }\\n        interface StopTrackingHeapObjectsParameterType {\\n            /**\\n             * If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken when the tracking is stopped.\\n             */\\n            reportProgress?: boolean | undefined;\\n        }\\n        interface TakeHeapSnapshotParameterType {\\n            /**\\n             * If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken.\\n             */\\n            reportProgress?: boolean | undefined;\\n        }\\n        interface GetObjectByHeapObjectIdParameterType {\\n            objectId: HeapSnapshotObjectId;\\n            /**\\n             * Symbolic group name that can be used to release multiple objects.\\n             */\\n            objectGroup?: string | undefined;\\n        }\\n        interface AddInspectedHeapObjectParameterType {\\n            /**\\n             * Heap snapshot object id to be accessible by means of $x command line API.\\n             */\\n            heapObjectId: HeapSnapshotObjectId;\\n        }\\n        interface GetHeapObjectIdParameterType {\\n            /**\\n             * Identifier of the object to get heap object id for.\\n             */\\n            objectId: Runtime.RemoteObjectId;\\n        }\\n        interface StartSamplingParameterType {\\n            /**\\n             * Average sample interval in bytes. Poisson distribution is used for the intervals. The default value is 32768 bytes.\\n             */\\n            samplingInterval?: number | undefined;\\n        }\\n        interface GetObjectByHeapObjectIdReturnType {\\n            /**\\n             * Evaluation result.\\n             */\\n            result: Runtime.RemoteObject;\\n        }\\n        interface GetHeapObjectIdReturnType {\\n            /**\\n             * Id of the heap snapshot object corresponding to the passed remote object id.\\n             */\\n            heapSnapshotObjectId: HeapSnapshotObjectId;\\n        }\\n        interface StopSamplingReturnType {\\n            /**\\n             * Recorded sampling heap profile.\\n             */\\n            profile: SamplingHeapProfile;\\n        }\\n        interface GetSamplingProfileReturnType {\\n            /**\\n             * Return the sampling profile being collected.\\n             */\\n            profile: SamplingHeapProfile;\\n        }\\n        interface AddHeapSnapshotChunkEventDataType {\\n            chunk: string;\\n        }\\n        interface ReportHeapSnapshotProgressEventDataType {\\n            done: number;\\n            total: number;\\n            finished?: boolean | undefined;\\n        }\\n        interface LastSeenObjectIdEventDataType {\\n            lastSeenObjectId: number;\\n            timestamp: number;\\n        }\\n        interface HeapStatsUpdateEventDataType {\\n            /**\\n             * An array of triplets. Each triplet describes a fragment. The first integer is the fragment index, the second integer is a total count of objects for the fragment, the third integer is a total size of the objects for the fragment.\\n             */\\n            statsUpdate: number[];\\n        }\\n    }\\n    namespace NodeTracing {\\n        interface TraceConfig {\\n            /**\\n             * Controls how the trace buffer stores data.\\n             */\\n            recordMode?: string | undefined;\\n            /**\\n             * Included category filters.\\n             */\\n            includedCategories: string[];\\n        }\\n        interface StartParameterType {\\n            traceConfig: TraceConfig;\\n        }\\n        interface GetCategoriesReturnType {\\n            /**\\n             * A list of supported tracing categories.\\n             */\\n            categories: string[];\\n        }\\n        interface DataCollectedEventDataType {\\n            value: Array<{}>;\\n        }\\n    }\\n    namespace NodeWorker {\\n        type WorkerID = string;\\n        /**\\n         * Unique identifier of attached debugging session.\\n         */\\n        type SessionID = string;\\n        interface WorkerInfo {\\n            workerId: WorkerID;\\n            type: string;\\n            title: string;\\n            url: string;\\n        }\\n        interface SendMessageToWorkerParameterType {\\n            message: string;\\n            /**\\n             * Identifier of the session.\\n             */\\n            sessionId: SessionID;\\n        }\\n        interface EnableParameterType {\\n            /**\\n             * Whether to new workers should be paused until the frontend sends `Runtime.runIfWaitingForDebugger`\\n             * message to run them.\\n             */\\n            waitForDebuggerOnStart: boolean;\\n        }\\n        interface DetachParameterType {\\n            sessionId: SessionID;\\n        }\\n        interface AttachedToWorkerEventDataType {\\n            /**\\n             * Identifier assigned to the session used to send/receive messages.\\n             */\\n            sessionId: SessionID;\\n            workerInfo: WorkerInfo;\\n            waitingForDebugger: boolean;\\n        }\\n        interface DetachedFromWorkerEventDataType {\\n            /**\\n             * Detached session identifier.\\n             */\\n            sessionId: SessionID;\\n        }\\n        interface ReceivedMessageFromWorkerEventDataType {\\n            /**\\n             * Identifier of a session which sends a message.\\n             */\\n            sessionId: SessionID;\\n            message: string;\\n        }\\n    }\\n    namespace NodeRuntime {\\n        interface NotifyWhenWaitingForDisconnectParameterType {\\n            enabled: boolean;\\n        }\\n    }\\n    /**\\n     * The `inspector.Session` is used for dispatching messages to the V8 inspector\\n     * back-end and receiving message responses and notifications.\\n     */\\n    class Session extends EventEmitter {\\n        /**\\n         * Create a new instance of the inspector.Session class.\\n         * The inspector session needs to be connected through session.connect() before the messages can be dispatched to the inspector backend.\\n         */\\n        constructor();\\n        /**\\n         * Connects a session to the inspector back-end.\\n         * @since v8.0.0\\n         */\\n        connect(): void;\\n        /**\\n         * Immediately close the session. All pending message callbacks will be called\\n         * with an error. `session.connect()` will need to be called to be able to send\\n         * messages again. Reconnected session will lose all inspector state, such as\\n         * enabled agents or configured breakpoints.\\n         * @since v8.0.0\\n         */\\n        disconnect(): void;\\n        /**\\n         * Posts a message to the inspector back-end. `callback` will be notified when\\n         * a response is received. `callback` is a function that accepts two optional\\n         * arguments: error and message-specific result.\\n         *\\n         * ```js\\n         * session.post('Runtime.evaluate', { expression: '2 + 2' },\\n         *              (error, { result }) => console.log(result));\\n         * // Output: { type: 'number', value: 4, description: '4' }\\n         * ```\\n         *\\n         * The latest version of the V8 inspector protocol is published on the [Chrome DevTools Protocol Viewer](https://chromedevtools.github.io/devtools-protocol/v8/).\\n         *\\n         * Node.js inspector supports all the Chrome DevTools Protocol domains declared\\n         * by V8\\\\. Chrome DevTools Protocol domain provides an interface for interacting\\n         * with one of the runtime agents used to inspect the application state and listen\\n         * to the run-time events.\\n         *\\n         * ## Example usage\\n         *\\n         * Apart from the debugger, various V8 Profilers are available through the DevTools\\n         * protocol.\\n         * @since v8.0.0\\n         */\\n        post(method: string, params?: {}, callback?: (err: Error | null, params?: {}) => void): void;\\n        post(method: string, callback?: (err: Error | null, params?: {}) => void): void;\\n        /**\\n         * Returns supported domains.\\n         */\\n        post(method: 'Schema.getDomains', callback?: (err: Error | null, params: Schema.GetDomainsReturnType) => void): void;\\n        /**\\n         * Evaluates expression on global object.\\n         */\\n        post(method: 'Runtime.evaluate', params?: Runtime.EvaluateParameterType, callback?: (err: Error | null, params: Runtime.EvaluateReturnType) => void): void;\\n        post(method: 'Runtime.evaluate', callback?: (err: Error | null, params: Runtime.EvaluateReturnType) => void): void;\\n        /**\\n         * Add handler to promise with given promise object id.\\n         */\\n        post(method: 'Runtime.awaitPromise', params?: Runtime.AwaitPromiseParameterType, callback?: (err: Error | null, params: Runtime.AwaitPromiseReturnType) => void): void;\\n        post(method: 'Runtime.awaitPromise', callback?: (err: Error | null, params: Runtime.AwaitPromiseReturnType) => void): void;\\n        /**\\n         * Calls function with given declaration on the given object. Object group of the result is inherited from the target object.\\n         */\\n        post(method: 'Runtime.callFunctionOn', params?: Runtime.CallFunctionOnParameterType, callback?: (err: Error | null, params: Runtime.CallFunctionOnReturnType) => void): void;\\n        post(method: 'Runtime.callFunctionOn', callback?: (err: Error | null, params: Runtime.CallFunctionOnReturnType) => void): void;\\n        /**\\n         * Returns properties of a given object. Object group of the result is inherited from the target object.\\n         */\\n        post(method: 'Runtime.getProperties', params?: Runtime.GetPropertiesParameterType, callback?: (err: Error | null, params: Runtime.GetPropertiesReturnType) => void): void;\\n        post(method: 'Runtime.getProperties', callback?: (err: Error | null, params: Runtime.GetPropertiesReturnType) => void): void;\\n        /**\\n         * Releases remote object with given id.\\n         */\\n        post(method: 'Runtime.releaseObject', params?: Runtime.ReleaseObjectParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Runtime.releaseObject', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Releases all remote objects that belong to a given group.\\n         */\\n        post(method: 'Runtime.releaseObjectGroup', params?: Runtime.ReleaseObjectGroupParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Runtime.releaseObjectGroup', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Tells inspected instance to run if it was waiting for debugger to attach.\\n         */\\n        post(method: 'Runtime.runIfWaitingForDebugger', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context.\\n         */\\n        post(method: 'Runtime.enable', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Disables reporting of execution contexts creation.\\n         */\\n        post(method: 'Runtime.disable', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Discards collected exceptions and console API calls.\\n         */\\n        post(method: 'Runtime.discardConsoleEntries', callback?: (err: Error | null) => void): void;\\n        /**\\n         * @experimental\\n         */\\n        post(method: 'Runtime.setCustomObjectFormatterEnabled', params?: Runtime.SetCustomObjectFormatterEnabledParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Runtime.setCustomObjectFormatterEnabled', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Compiles expression.\\n         */\\n        post(method: 'Runtime.compileScript', params?: Runtime.CompileScriptParameterType, callback?: (err: Error | null, params: Runtime.CompileScriptReturnType) => void): void;\\n        post(method: 'Runtime.compileScript', callback?: (err: Error | null, params: Runtime.CompileScriptReturnType) => void): void;\\n        /**\\n         * Runs script with given id in a given context.\\n         */\\n        post(method: 'Runtime.runScript', params?: Runtime.RunScriptParameterType, callback?: (err: Error | null, params: Runtime.RunScriptReturnType) => void): void;\\n        post(method: 'Runtime.runScript', callback?: (err: Error | null, params: Runtime.RunScriptReturnType) => void): void;\\n        post(method: 'Runtime.queryObjects', params?: Runtime.QueryObjectsParameterType, callback?: (err: Error | null, params: Runtime.QueryObjectsReturnType) => void): void;\\n        post(method: 'Runtime.queryObjects', callback?: (err: Error | null, params: Runtime.QueryObjectsReturnType) => void): void;\\n        /**\\n         * Returns all let, const and class variables from global scope.\\n         */\\n        post(\\n            method: 'Runtime.globalLexicalScopeNames',\\n            params?: Runtime.GlobalLexicalScopeNamesParameterType,\\n            callback?: (err: Error | null, params: Runtime.GlobalLexicalScopeNamesReturnType) => void\\n        ): void;\\n        post(method: 'Runtime.globalLexicalScopeNames', callback?: (err: Error | null, params: Runtime.GlobalLexicalScopeNamesReturnType) => void): void;\\n        /**\\n         * Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received.\\n         */\\n        post(method: 'Debugger.enable', callback?: (err: Error | null, params: Debugger.EnableReturnType) => void): void;\\n        /**\\n         * Disables debugger for given page.\\n         */\\n        post(method: 'Debugger.disable', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Activates / deactivates all breakpoints on the page.\\n         */\\n        post(method: 'Debugger.setBreakpointsActive', params?: Debugger.SetBreakpointsActiveParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Debugger.setBreakpointsActive', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc).\\n         */\\n        post(method: 'Debugger.setSkipAllPauses', params?: Debugger.SetSkipAllPausesParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Debugger.setSkipAllPauses', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads.\\n         */\\n        post(method: 'Debugger.setBreakpointByUrl', params?: Debugger.SetBreakpointByUrlParameterType, callback?: (err: Error | null, params: Debugger.SetBreakpointByUrlReturnType) => void): void;\\n        post(method: 'Debugger.setBreakpointByUrl', callback?: (err: Error | null, params: Debugger.SetBreakpointByUrlReturnType) => void): void;\\n        /**\\n         * Sets JavaScript breakpoint at a given location.\\n         */\\n        post(method: 'Debugger.setBreakpoint', params?: Debugger.SetBreakpointParameterType, callback?: (err: Error | null, params: Debugger.SetBreakpointReturnType) => void): void;\\n        post(method: 'Debugger.setBreakpoint', callback?: (err: Error | null, params: Debugger.SetBreakpointReturnType) => void): void;\\n        /**\\n         * Removes JavaScript breakpoint.\\n         */\\n        post(method: 'Debugger.removeBreakpoint', params?: Debugger.RemoveBreakpointParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Debugger.removeBreakpoint', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Returns possible locations for breakpoint. scriptId in start and end range locations should be the same.\\n         */\\n        post(\\n            method: 'Debugger.getPossibleBreakpoints',\\n            params?: Debugger.GetPossibleBreakpointsParameterType,\\n            callback?: (err: Error | null, params: Debugger.GetPossibleBreakpointsReturnType) => void\\n        ): void;\\n        post(method: 'Debugger.getPossibleBreakpoints', callback?: (err: Error | null, params: Debugger.GetPossibleBreakpointsReturnType) => void): void;\\n        /**\\n         * Continues execution until specific location is reached.\\n         */\\n        post(method: 'Debugger.continueToLocation', params?: Debugger.ContinueToLocationParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Debugger.continueToLocation', callback?: (err: Error | null) => void): void;\\n        /**\\n         * @experimental\\n         */\\n        post(method: 'Debugger.pauseOnAsyncCall', params?: Debugger.PauseOnAsyncCallParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Debugger.pauseOnAsyncCall', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Steps over the statement.\\n         */\\n        post(method: 'Debugger.stepOver', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Steps into the function call.\\n         */\\n        post(method: 'Debugger.stepInto', params?: Debugger.StepIntoParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Debugger.stepInto', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Steps out of the function call.\\n         */\\n        post(method: 'Debugger.stepOut', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Stops on the next JavaScript statement.\\n         */\\n        post(method: 'Debugger.pause', callback?: (err: Error | null) => void): void;\\n        /**\\n         * This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called.\\n         * @experimental\\n         */\\n        post(method: 'Debugger.scheduleStepIntoAsync', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Resumes JavaScript execution.\\n         */\\n        post(method: 'Debugger.resume', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Returns stack trace with given <code>stackTraceId</code>.\\n         * @experimental\\n         */\\n        post(method: 'Debugger.getStackTrace', params?: Debugger.GetStackTraceParameterType, callback?: (err: Error | null, params: Debugger.GetStackTraceReturnType) => void): void;\\n        post(method: 'Debugger.getStackTrace', callback?: (err: Error | null, params: Debugger.GetStackTraceReturnType) => void): void;\\n        /**\\n         * Searches for given string in script content.\\n         */\\n        post(method: 'Debugger.searchInContent', params?: Debugger.SearchInContentParameterType, callback?: (err: Error | null, params: Debugger.SearchInContentReturnType) => void): void;\\n        post(method: 'Debugger.searchInContent', callback?: (err: Error | null, params: Debugger.SearchInContentReturnType) => void): void;\\n        /**\\n         * Edits JavaScript source live.\\n         */\\n        post(method: 'Debugger.setScriptSource', params?: Debugger.SetScriptSourceParameterType, callback?: (err: Error | null, params: Debugger.SetScriptSourceReturnType) => void): void;\\n        post(method: 'Debugger.setScriptSource', callback?: (err: Error | null, params: Debugger.SetScriptSourceReturnType) => void): void;\\n        /**\\n         * Restarts particular call frame from the beginning.\\n         */\\n        post(method: 'Debugger.restartFrame', params?: Debugger.RestartFrameParameterType, callback?: (err: Error | null, params: Debugger.RestartFrameReturnType) => void): void;\\n        post(method: 'Debugger.restartFrame', callback?: (err: Error | null, params: Debugger.RestartFrameReturnType) => void): void;\\n        /**\\n         * Returns source for the script with given id.\\n         */\\n        post(method: 'Debugger.getScriptSource', params?: Debugger.GetScriptSourceParameterType, callback?: (err: Error | null, params: Debugger.GetScriptSourceReturnType) => void): void;\\n        post(method: 'Debugger.getScriptSource', callback?: (err: Error | null, params: Debugger.GetScriptSourceReturnType) => void): void;\\n        /**\\n         * Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>.\\n         */\\n        post(method: 'Debugger.setPauseOnExceptions', params?: Debugger.SetPauseOnExceptionsParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Debugger.setPauseOnExceptions', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Evaluates expression on a given call frame.\\n         */\\n        post(method: 'Debugger.evaluateOnCallFrame', params?: Debugger.EvaluateOnCallFrameParameterType, callback?: (err: Error | null, params: Debugger.EvaluateOnCallFrameReturnType) => void): void;\\n        post(method: 'Debugger.evaluateOnCallFrame', callback?: (err: Error | null, params: Debugger.EvaluateOnCallFrameReturnType) => void): void;\\n        /**\\n         * Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually.\\n         */\\n        post(method: 'Debugger.setVariableValue', params?: Debugger.SetVariableValueParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Debugger.setVariableValue', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Changes return value in top frame. Available only at return break position.\\n         * @experimental\\n         */\\n        post(method: 'Debugger.setReturnValue', params?: Debugger.SetReturnValueParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Debugger.setReturnValue', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Enables or disables async call stacks tracking.\\n         */\\n        post(method: 'Debugger.setAsyncCallStackDepth', params?: Debugger.SetAsyncCallStackDepthParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Debugger.setAsyncCallStackDepth', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful.\\n         * @experimental\\n         */\\n        post(method: 'Debugger.setBlackboxPatterns', params?: Debugger.SetBlackboxPatternsParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Debugger.setBlackboxPatterns', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted.\\n         * @experimental\\n         */\\n        post(method: 'Debugger.setBlackboxedRanges', params?: Debugger.SetBlackboxedRangesParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Debugger.setBlackboxedRanges', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification.\\n         */\\n        post(method: 'Console.enable', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Disables console domain, prevents further console messages from being reported to the client.\\n         */\\n        post(method: 'Console.disable', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Does nothing.\\n         */\\n        post(method: 'Console.clearMessages', callback?: (err: Error | null) => void): void;\\n        post(method: 'Profiler.enable', callback?: (err: Error | null) => void): void;\\n        post(method: 'Profiler.disable', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Changes CPU profiler sampling interval. Must be called before CPU profiles recording started.\\n         */\\n        post(method: 'Profiler.setSamplingInterval', params?: Profiler.SetSamplingIntervalParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Profiler.setSamplingInterval', callback?: (err: Error | null) => void): void;\\n        post(method: 'Profiler.start', callback?: (err: Error | null) => void): void;\\n        post(method: 'Profiler.stop', callback?: (err: Error | null, params: Profiler.StopReturnType) => void): void;\\n        /**\\n         * Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters.\\n         */\\n        post(method: 'Profiler.startPreciseCoverage', params?: Profiler.StartPreciseCoverageParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Profiler.startPreciseCoverage', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code.\\n         */\\n        post(method: 'Profiler.stopPreciseCoverage', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started.\\n         */\\n        post(method: 'Profiler.takePreciseCoverage', callback?: (err: Error | null, params: Profiler.TakePreciseCoverageReturnType) => void): void;\\n        /**\\n         * Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.\\n         */\\n        post(method: 'Profiler.getBestEffortCoverage', callback?: (err: Error | null, params: Profiler.GetBestEffortCoverageReturnType) => void): void;\\n        /**\\n         * Enable type profile.\\n         * @experimental\\n         */\\n        post(method: 'Profiler.startTypeProfile', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Disable type profile. Disabling releases type profile data collected so far.\\n         * @experimental\\n         */\\n        post(method: 'Profiler.stopTypeProfile', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Collect type profile.\\n         * @experimental\\n         */\\n        post(method: 'Profiler.takeTypeProfile', callback?: (err: Error | null, params: Profiler.TakeTypeProfileReturnType) => void): void;\\n        post(method: 'HeapProfiler.enable', callback?: (err: Error | null) => void): void;\\n        post(method: 'HeapProfiler.disable', callback?: (err: Error | null) => void): void;\\n        post(method: 'HeapProfiler.startTrackingHeapObjects', params?: HeapProfiler.StartTrackingHeapObjectsParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'HeapProfiler.startTrackingHeapObjects', callback?: (err: Error | null) => void): void;\\n        post(method: 'HeapProfiler.stopTrackingHeapObjects', params?: HeapProfiler.StopTrackingHeapObjectsParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'HeapProfiler.stopTrackingHeapObjects', callback?: (err: Error | null) => void): void;\\n        post(method: 'HeapProfiler.takeHeapSnapshot', params?: HeapProfiler.TakeHeapSnapshotParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'HeapProfiler.takeHeapSnapshot', callback?: (err: Error | null) => void): void;\\n        post(method: 'HeapProfiler.collectGarbage', callback?: (err: Error | null) => void): void;\\n        post(\\n            method: 'HeapProfiler.getObjectByHeapObjectId',\\n            params?: HeapProfiler.GetObjectByHeapObjectIdParameterType,\\n            callback?: (err: Error | null, params: HeapProfiler.GetObjectByHeapObjectIdReturnType) => void\\n        ): void;\\n        post(method: 'HeapProfiler.getObjectByHeapObjectId', callback?: (err: Error | null, params: HeapProfiler.GetObjectByHeapObjectIdReturnType) => void): void;\\n        /**\\n         * Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).\\n         */\\n        post(method: 'HeapProfiler.addInspectedHeapObject', params?: HeapProfiler.AddInspectedHeapObjectParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'HeapProfiler.addInspectedHeapObject', callback?: (err: Error | null) => void): void;\\n        post(method: 'HeapProfiler.getHeapObjectId', params?: HeapProfiler.GetHeapObjectIdParameterType, callback?: (err: Error | null, params: HeapProfiler.GetHeapObjectIdReturnType) => void): void;\\n        post(method: 'HeapProfiler.getHeapObjectId', callback?: (err: Error | null, params: HeapProfiler.GetHeapObjectIdReturnType) => void): void;\\n        post(method: 'HeapProfiler.startSampling', params?: HeapProfiler.StartSamplingParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'HeapProfiler.startSampling', callback?: (err: Error | null) => void): void;\\n        post(method: 'HeapProfiler.stopSampling', callback?: (err: Error | null, params: HeapProfiler.StopSamplingReturnType) => void): void;\\n        post(method: 'HeapProfiler.getSamplingProfile', callback?: (err: Error | null, params: HeapProfiler.GetSamplingProfileReturnType) => void): void;\\n        /**\\n         * Gets supported tracing categories.\\n         */\\n        post(method: 'NodeTracing.getCategories', callback?: (err: Error | null, params: NodeTracing.GetCategoriesReturnType) => void): void;\\n        /**\\n         * Start trace events collection.\\n         */\\n        post(method: 'NodeTracing.start', params?: NodeTracing.StartParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'NodeTracing.start', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Stop trace events collection. Remaining collected events will be sent as a sequence of\\n         * dataCollected events followed by tracingComplete event.\\n         */\\n        post(method: 'NodeTracing.stop', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Sends protocol message over session with given id.\\n         */\\n        post(method: 'NodeWorker.sendMessageToWorker', params?: NodeWorker.SendMessageToWorkerParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'NodeWorker.sendMessageToWorker', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Instructs the inspector to attach to running workers. Will also attach to new workers\\n         * as they start\\n         */\\n        post(method: 'NodeWorker.enable', params?: NodeWorker.EnableParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'NodeWorker.enable', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Detaches from all running workers and disables attaching to new workers as they are started.\\n         */\\n        post(method: 'NodeWorker.disable', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Detached from the worker with given sessionId.\\n         */\\n        post(method: 'NodeWorker.detach', params?: NodeWorker.DetachParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'NodeWorker.detach', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Enable the `NodeRuntime.waitingForDisconnect`.\\n         */\\n        post(method: 'NodeRuntime.notifyWhenWaitingForDisconnect', params?: NodeRuntime.NotifyWhenWaitingForDisconnectParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'NodeRuntime.notifyWhenWaitingForDisconnect', callback?: (err: Error | null) => void): void;\\n        // Events\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        /**\\n         * Emitted when any notification from the V8 Inspector is received.\\n         */\\n        addListener(event: 'inspectorNotification', listener: (message: InspectorNotification<{}>) => void): this;\\n        /**\\n         * Issued when new execution context is created.\\n         */\\n        addListener(event: 'Runtime.executionContextCreated', listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\\n        /**\\n         * Issued when execution context is destroyed.\\n         */\\n        addListener(event: 'Runtime.executionContextDestroyed', listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\\n        /**\\n         * Issued when all executionContexts were cleared in browser\\n         */\\n        addListener(event: 'Runtime.executionContextsCleared', listener: () => void): this;\\n        /**\\n         * Issued when exception was thrown and unhandled.\\n         */\\n        addListener(event: 'Runtime.exceptionThrown', listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\\n        /**\\n         * Issued when unhandled exception was revoked.\\n         */\\n        addListener(event: 'Runtime.exceptionRevoked', listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\\n        /**\\n         * Issued when console API was called.\\n         */\\n        addListener(event: 'Runtime.consoleAPICalled', listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\\n        /**\\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\\n         */\\n        addListener(event: 'Runtime.inspectRequested', listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\\n        /**\\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\\n         */\\n        addListener(event: 'Debugger.scriptParsed', listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\\n        /**\\n         * Fired when virtual machine fails to parse the script.\\n         */\\n        addListener(event: 'Debugger.scriptFailedToParse', listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\\n        /**\\n         * Fired when breakpoint is resolved to an actual script and location.\\n         */\\n        addListener(event: 'Debugger.breakpointResolved', listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\\n        /**\\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\\n         */\\n        addListener(event: 'Debugger.paused', listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\\n        /**\\n         * Fired when the virtual machine resumed execution.\\n         */\\n        addListener(event: 'Debugger.resumed', listener: () => void): this;\\n        /**\\n         * Issued when new console message is added.\\n         */\\n        addListener(event: 'Console.messageAdded', listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\\n        /**\\n         * Sent when new profile recording is started using console.profile() call.\\n         */\\n        addListener(event: 'Profiler.consoleProfileStarted', listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\\n        addListener(event: 'Profiler.consoleProfileFinished', listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\\n        addListener(event: 'HeapProfiler.addHeapSnapshotChunk', listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\\n        addListener(event: 'HeapProfiler.resetProfiles', listener: () => void): this;\\n        addListener(event: 'HeapProfiler.reportHeapSnapshotProgress', listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\\n        /**\\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\\n         */\\n        addListener(event: 'HeapProfiler.lastSeenObjectId', listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\\n        /**\\n         * If heap objects tracking has been started then backend may send update for one or more fragments\\n         */\\n        addListener(event: 'HeapProfiler.heapStatsUpdate', listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\\n        /**\\n         * Contains an bucket of collected trace events.\\n         */\\n        addListener(event: 'NodeTracing.dataCollected', listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\\n        /**\\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\\n         * delivered via dataCollected events.\\n         */\\n        addListener(event: 'NodeTracing.tracingComplete', listener: () => void): this;\\n        /**\\n         * Issued when attached to a worker.\\n         */\\n        addListener(event: 'NodeWorker.attachedToWorker', listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\\n        /**\\n         * Issued when detached from the worker.\\n         */\\n        addListener(event: 'NodeWorker.detachedFromWorker', listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\\n        /**\\n         * Notifies about a new protocol message received from the session\\n         * (session ID is provided in attachedToWorker notification).\\n         */\\n        addListener(event: 'NodeWorker.receivedMessageFromWorker', listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\\n        /**\\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\\n         * enabled.\\n         * It is fired when the Node process finished all code execution and is\\n         * waiting for all frontends to disconnect.\\n         */\\n        addListener(event: 'NodeRuntime.waitingForDisconnect', listener: () => void): this;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        emit(event: 'inspectorNotification', message: InspectorNotification<{}>): boolean;\\n        emit(event: 'Runtime.executionContextCreated', message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>): boolean;\\n        emit(event: 'Runtime.executionContextDestroyed', message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>): boolean;\\n        emit(event: 'Runtime.executionContextsCleared'): boolean;\\n        emit(event: 'Runtime.exceptionThrown', message: InspectorNotification<Runtime.ExceptionThrownEventDataType>): boolean;\\n        emit(event: 'Runtime.exceptionRevoked', message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>): boolean;\\n        emit(event: 'Runtime.consoleAPICalled', message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>): boolean;\\n        emit(event: 'Runtime.inspectRequested', message: InspectorNotification<Runtime.InspectRequestedEventDataType>): boolean;\\n        emit(event: 'Debugger.scriptParsed', message: InspectorNotification<Debugger.ScriptParsedEventDataType>): boolean;\\n        emit(event: 'Debugger.scriptFailedToParse', message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>): boolean;\\n        emit(event: 'Debugger.breakpointResolved', message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>): boolean;\\n        emit(event: 'Debugger.paused', message: InspectorNotification<Debugger.PausedEventDataType>): boolean;\\n        emit(event: 'Debugger.resumed'): boolean;\\n        emit(event: 'Console.messageAdded', message: InspectorNotification<Console.MessageAddedEventDataType>): boolean;\\n        emit(event: 'Profiler.consoleProfileStarted', message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>): boolean;\\n        emit(event: 'Profiler.consoleProfileFinished', message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>): boolean;\\n        emit(event: 'HeapProfiler.addHeapSnapshotChunk', message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>): boolean;\\n        emit(event: 'HeapProfiler.resetProfiles'): boolean;\\n        emit(event: 'HeapProfiler.reportHeapSnapshotProgress', message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>): boolean;\\n        emit(event: 'HeapProfiler.lastSeenObjectId', message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>): boolean;\\n        emit(event: 'HeapProfiler.heapStatsUpdate', message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>): boolean;\\n        emit(event: 'NodeTracing.dataCollected', message: InspectorNotification<NodeTracing.DataCollectedEventDataType>): boolean;\\n        emit(event: 'NodeTracing.tracingComplete'): boolean;\\n        emit(event: 'NodeWorker.attachedToWorker', message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>): boolean;\\n        emit(event: 'NodeWorker.detachedFromWorker', message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>): boolean;\\n        emit(event: 'NodeWorker.receivedMessageFromWorker', message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>): boolean;\\n        emit(event: 'NodeRuntime.waitingForDisconnect'): boolean;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        /**\\n         * Emitted when any notification from the V8 Inspector is received.\\n         */\\n        on(event: 'inspectorNotification', listener: (message: InspectorNotification<{}>) => void): this;\\n        /**\\n         * Issued when new execution context is created.\\n         */\\n        on(event: 'Runtime.executionContextCreated', listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\\n        /**\\n         * Issued when execution context is destroyed.\\n         */\\n        on(event: 'Runtime.executionContextDestroyed', listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\\n        /**\\n         * Issued when all executionContexts were cleared in browser\\n         */\\n        on(event: 'Runtime.executionContextsCleared', listener: () => void): this;\\n        /**\\n         * Issued when exception was thrown and unhandled.\\n         */\\n        on(event: 'Runtime.exceptionThrown', listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\\n        /**\\n         * Issued when unhandled exception was revoked.\\n         */\\n        on(event: 'Runtime.exceptionRevoked', listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\\n        /**\\n         * Issued when console API was called.\\n         */\\n        on(event: 'Runtime.consoleAPICalled', listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\\n        /**\\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\\n         */\\n        on(event: 'Runtime.inspectRequested', listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\\n        /**\\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\\n         */\\n        on(event: 'Debugger.scriptParsed', listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\\n        /**\\n         * Fired when virtual machine fails to parse the script.\\n         */\\n        on(event: 'Debugger.scriptFailedToParse', listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\\n        /**\\n         * Fired when breakpoint is resolved to an actual script and location.\\n         */\\n        on(event: 'Debugger.breakpointResolved', listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\\n        /**\\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\\n         */\\n        on(event: 'Debugger.paused', listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\\n        /**\\n         * Fired when the virtual machine resumed execution.\\n         */\\n        on(event: 'Debugger.resumed', listener: () => void): this;\\n        /**\\n         * Issued when new console message is added.\\n         */\\n        on(event: 'Console.messageAdded', listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\\n        /**\\n         * Sent when new profile recording is started using console.profile() call.\\n         */\\n        on(event: 'Profiler.consoleProfileStarted', listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\\n        on(event: 'Profiler.consoleProfileFinished', listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\\n        on(event: 'HeapProfiler.addHeapSnapshotChunk', listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\\n        on(event: 'HeapProfiler.resetProfiles', listener: () => void): this;\\n        on(event: 'HeapProfiler.reportHeapSnapshotProgress', listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\\n        /**\\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\\n         */\\n        on(event: 'HeapProfiler.lastSeenObjectId', listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\\n        /**\\n         * If heap objects tracking has been started then backend may send update for one or more fragments\\n         */\\n        on(event: 'HeapProfiler.heapStatsUpdate', listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\\n        /**\\n         * Contains an bucket of collected trace events.\\n         */\\n        on(event: 'NodeTracing.dataCollected', listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\\n        /**\\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\\n         * delivered via dataCollected events.\\n         */\\n        on(event: 'NodeTracing.tracingComplete', listener: () => void): this;\\n        /**\\n         * Issued when attached to a worker.\\n         */\\n        on(event: 'NodeWorker.attachedToWorker', listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\\n        /**\\n         * Issued when detached from the worker.\\n         */\\n        on(event: 'NodeWorker.detachedFromWorker', listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\\n        /**\\n         * Notifies about a new protocol message received from the session\\n         * (session ID is provided in attachedToWorker notification).\\n         */\\n        on(event: 'NodeWorker.receivedMessageFromWorker', listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\\n        /**\\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\\n         * enabled.\\n         * It is fired when the Node process finished all code execution and is\\n         * waiting for all frontends to disconnect.\\n         */\\n        on(event: 'NodeRuntime.waitingForDisconnect', listener: () => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        /**\\n         * Emitted when any notification from the V8 Inspector is received.\\n         */\\n        once(event: 'inspectorNotification', listener: (message: InspectorNotification<{}>) => void): this;\\n        /**\\n         * Issued when new execution context is created.\\n         */\\n        once(event: 'Runtime.executionContextCreated', listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\\n        /**\\n         * Issued when execution context is destroyed.\\n         */\\n        once(event: 'Runtime.executionContextDestroyed', listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\\n        /**\\n         * Issued when all executionContexts were cleared in browser\\n         */\\n        once(event: 'Runtime.executionContextsCleared', listener: () => void): this;\\n        /**\\n         * Issued when exception was thrown and unhandled.\\n         */\\n        once(event: 'Runtime.exceptionThrown', listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\\n        /**\\n         * Issued when unhandled exception was revoked.\\n         */\\n        once(event: 'Runtime.exceptionRevoked', listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\\n        /**\\n         * Issued when console API was called.\\n         */\\n        once(event: 'Runtime.consoleAPICalled', listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\\n        /**\\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\\n         */\\n        once(event: 'Runtime.inspectRequested', listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\\n        /**\\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\\n         */\\n        once(event: 'Debugger.scriptParsed', listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\\n        /**\\n         * Fired when virtual machine fails to parse the script.\\n         */\\n        once(event: 'Debugger.scriptFailedToParse', listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\\n        /**\\n         * Fired when breakpoint is resolved to an actual script and location.\\n         */\\n        once(event: 'Debugger.breakpointResolved', listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\\n        /**\\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\\n         */\\n        once(event: 'Debugger.paused', listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\\n        /**\\n         * Fired when the virtual machine resumed execution.\\n         */\\n        once(event: 'Debugger.resumed', listener: () => void): this;\\n        /**\\n         * Issued when new console message is added.\\n         */\\n        once(event: 'Console.messageAdded', listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\\n        /**\\n         * Sent when new profile recording is started using console.profile() call.\\n         */\\n        once(event: 'Profiler.consoleProfileStarted', listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\\n        once(event: 'Profiler.consoleProfileFinished', listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\\n        once(event: 'HeapProfiler.addHeapSnapshotChunk', listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\\n        once(event: 'HeapProfiler.resetProfiles', listener: () => void): this;\\n        once(event: 'HeapProfiler.reportHeapSnapshotProgress', listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\\n        /**\\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\\n         */\\n        once(event: 'HeapProfiler.lastSeenObjectId', listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\\n        /**\\n         * If heap objects tracking has been started then backend may send update for one or more fragments\\n         */\\n        once(event: 'HeapProfiler.heapStatsUpdate', listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\\n        /**\\n         * Contains an bucket of collected trace events.\\n         */\\n        once(event: 'NodeTracing.dataCollected', listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\\n        /**\\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\\n         * delivered via dataCollected events.\\n         */\\n        once(event: 'NodeTracing.tracingComplete', listener: () => void): this;\\n        /**\\n         * Issued when attached to a worker.\\n         */\\n        once(event: 'NodeWorker.attachedToWorker', listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\\n        /**\\n         * Issued when detached from the worker.\\n         */\\n        once(event: 'NodeWorker.detachedFromWorker', listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\\n        /**\\n         * Notifies about a new protocol message received from the session\\n         * (session ID is provided in attachedToWorker notification).\\n         */\\n        once(event: 'NodeWorker.receivedMessageFromWorker', listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\\n        /**\\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\\n         * enabled.\\n         * It is fired when the Node process finished all code execution and is\\n         * waiting for all frontends to disconnect.\\n         */\\n        once(event: 'NodeRuntime.waitingForDisconnect', listener: () => void): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        /**\\n         * Emitted when any notification from the V8 Inspector is received.\\n         */\\n        prependListener(event: 'inspectorNotification', listener: (message: InspectorNotification<{}>) => void): this;\\n        /**\\n         * Issued when new execution context is created.\\n         */\\n        prependListener(event: 'Runtime.executionContextCreated', listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\\n        /**\\n         * Issued when execution context is destroyed.\\n         */\\n        prependListener(event: 'Runtime.executionContextDestroyed', listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\\n        /**\\n         * Issued when all executionContexts were cleared in browser\\n         */\\n        prependListener(event: 'Runtime.executionContextsCleared', listener: () => void): this;\\n        /**\\n         * Issued when exception was thrown and unhandled.\\n         */\\n        prependListener(event: 'Runtime.exceptionThrown', listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\\n        /**\\n         * Issued when unhandled exception was revoked.\\n         */\\n        prependListener(event: 'Runtime.exceptionRevoked', listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\\n        /**\\n         * Issued when console API was called.\\n         */\\n        prependListener(event: 'Runtime.consoleAPICalled', listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\\n        /**\\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\\n         */\\n        prependListener(event: 'Runtime.inspectRequested', listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\\n        /**\\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\\n         */\\n        prependListener(event: 'Debugger.scriptParsed', listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\\n        /**\\n         * Fired when virtual machine fails to parse the script.\\n         */\\n        prependListener(event: 'Debugger.scriptFailedToParse', listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\\n        /**\\n         * Fired when breakpoint is resolved to an actual script and location.\\n         */\\n        prependListener(event: 'Debugger.breakpointResolved', listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\\n        /**\\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\\n         */\\n        prependListener(event: 'Debugger.paused', listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\\n        /**\\n         * Fired when the virtual machine resumed execution.\\n         */\\n        prependListener(event: 'Debugger.resumed', listener: () => void): this;\\n        /**\\n         * Issued when new console message is added.\\n         */\\n        prependListener(event: 'Console.messageAdded', listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\\n        /**\\n         * Sent when new profile recording is started using console.profile() call.\\n         */\\n        prependListener(event: 'Profiler.consoleProfileStarted', listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\\n        prependListener(event: 'Profiler.consoleProfileFinished', listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\\n        prependListener(event: 'HeapProfiler.addHeapSnapshotChunk', listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\\n        prependListener(event: 'HeapProfiler.resetProfiles', listener: () => void): this;\\n        prependListener(event: 'HeapProfiler.reportHeapSnapshotProgress', listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\\n        /**\\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\\n         */\\n        prependListener(event: 'HeapProfiler.lastSeenObjectId', listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\\n        /**\\n         * If heap objects tracking has been started then backend may send update for one or more fragments\\n         */\\n        prependListener(event: 'HeapProfiler.heapStatsUpdate', listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\\n        /**\\n         * Contains an bucket of collected trace events.\\n         */\\n        prependListener(event: 'NodeTracing.dataCollected', listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\\n        /**\\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\\n         * delivered via dataCollected events.\\n         */\\n        prependListener(event: 'NodeTracing.tracingComplete', listener: () => void): this;\\n        /**\\n         * Issued when attached to a worker.\\n         */\\n        prependListener(event: 'NodeWorker.attachedToWorker', listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\\n        /**\\n         * Issued when detached from the worker.\\n         */\\n        prependListener(event: 'NodeWorker.detachedFromWorker', listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\\n        /**\\n         * Notifies about a new protocol message received from the session\\n         * (session ID is provided in attachedToWorker notification).\\n         */\\n        prependListener(event: 'NodeWorker.receivedMessageFromWorker', listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\\n        /**\\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\\n         * enabled.\\n         * It is fired when the Node process finished all code execution and is\\n         * waiting for all frontends to disconnect.\\n         */\\n        prependListener(event: 'NodeRuntime.waitingForDisconnect', listener: () => void): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n        /**\\n         * Emitted when any notification from the V8 Inspector is received.\\n         */\\n        prependOnceListener(event: 'inspectorNotification', listener: (message: InspectorNotification<{}>) => void): this;\\n        /**\\n         * Issued when new execution context is created.\\n         */\\n        prependOnceListener(event: 'Runtime.executionContextCreated', listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\\n        /**\\n         * Issued when execution context is destroyed.\\n         */\\n        prependOnceListener(event: 'Runtime.executionContextDestroyed', listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\\n        /**\\n         * Issued when all executionContexts were cleared in browser\\n         */\\n        prependOnceListener(event: 'Runtime.executionContextsCleared', listener: () => void): this;\\n        /**\\n         * Issued when exception was thrown and unhandled.\\n         */\\n        prependOnceListener(event: 'Runtime.exceptionThrown', listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\\n        /**\\n         * Issued when unhandled exception was revoked.\\n         */\\n        prependOnceListener(event: 'Runtime.exceptionRevoked', listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\\n        /**\\n         * Issued when console API was called.\\n         */\\n        prependOnceListener(event: 'Runtime.consoleAPICalled', listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\\n        /**\\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\\n         */\\n        prependOnceListener(event: 'Runtime.inspectRequested', listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\\n        /**\\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\\n         */\\n        prependOnceListener(event: 'Debugger.scriptParsed', listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\\n        /**\\n         * Fired when virtual machine fails to parse the script.\\n         */\\n        prependOnceListener(event: 'Debugger.scriptFailedToParse', listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\\n        /**\\n         * Fired when breakpoint is resolved to an actual script and location.\\n         */\\n        prependOnceListener(event: 'Debugger.breakpointResolved', listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\\n        /**\\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\\n         */\\n        prependOnceListener(event: 'Debugger.paused', listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\\n        /**\\n         * Fired when the virtual machine resumed execution.\\n         */\\n        prependOnceListener(event: 'Debugger.resumed', listener: () => void): this;\\n        /**\\n         * Issued when new console message is added.\\n         */\\n        prependOnceListener(event: 'Console.messageAdded', listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\\n        /**\\n         * Sent when new profile recording is started using console.profile() call.\\n         */\\n        prependOnceListener(event: 'Profiler.consoleProfileStarted', listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\\n        prependOnceListener(event: 'Profiler.consoleProfileFinished', listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\\n        prependOnceListener(event: 'HeapProfiler.addHeapSnapshotChunk', listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\\n        prependOnceListener(event: 'HeapProfiler.resetProfiles', listener: () => void): this;\\n        prependOnceListener(event: 'HeapProfiler.reportHeapSnapshotProgress', listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\\n        /**\\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\\n         */\\n        prependOnceListener(event: 'HeapProfiler.lastSeenObjectId', listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\\n        /**\\n         * If heap objects tracking has been started then backend may send update for one or more fragments\\n         */\\n        prependOnceListener(event: 'HeapProfiler.heapStatsUpdate', listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\\n        /**\\n         * Contains an bucket of collected trace events.\\n         */\\n        prependOnceListener(event: 'NodeTracing.dataCollected', listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\\n        /**\\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\\n         * delivered via dataCollected events.\\n         */\\n        prependOnceListener(event: 'NodeTracing.tracingComplete', listener: () => void): this;\\n        /**\\n         * Issued when attached to a worker.\\n         */\\n        prependOnceListener(event: 'NodeWorker.attachedToWorker', listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\\n        /**\\n         * Issued when detached from the worker.\\n         */\\n        prependOnceListener(event: 'NodeWorker.detachedFromWorker', listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\\n        /**\\n         * Notifies about a new protocol message received from the session\\n         * (session ID is provided in attachedToWorker notification).\\n         */\\n        prependOnceListener(event: 'NodeWorker.receivedMessageFromWorker', listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\\n        /**\\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\\n         * enabled.\\n         * It is fired when the Node process finished all code execution and is\\n         * waiting for all frontends to disconnect.\\n         */\\n        prependOnceListener(event: 'NodeRuntime.waitingForDisconnect', listener: () => void): this;\\n    }\\n    /**\\n     * Activate inspector on host and port. Equivalent to`node --inspect=[[host:]port]`, but can be done programmatically after node has\\n     * started.\\n     *\\n     * If wait is `true`, will block until a client has connected to the inspect port\\n     * and flow control has been passed to the debugger client.\\n     *\\n     * See the `security warning` regarding the `host`parameter usage.\\n     * @param [port='what was specified on the CLI'] Port to listen on for inspector connections. Optional.\\n     * @param [host='what was specified on the CLI'] Host to listen on for inspector connections. Optional.\\n     * @param [wait=false] Block until a client has connected. Optional.\\n     */\\n    function open(port?: number, host?: string, wait?: boolean): void;\\n    /**\\n     * Deactivate the inspector. Blocks until there are no active connections.\\n     */\\n    function close(): void;\\n    /**\\n     * Return the URL of the active inspector, or `undefined` if there is none.\\n     *\\n     * ```console\\n     * $ node --inspect -p 'inspector.url()'\\n     * Debugger listening on ws://127.0.0.1:9229/166e272e-7a30-4d09-97ce-f1c012b43c34\\n     * For help, see: https://nodejs.org/en/docs/inspector\\n     * ws://127.0.0.1:9229/166e272e-7a30-4d09-97ce-f1c012b43c34\\n     *\\n     * $ node --inspect=localhost:3000 -p 'inspector.url()'\\n     * Debugger listening on ws://localhost:3000/51cf8d0e-3c36-4c59-8efd-54519839e56a\\n     * For help, see: https://nodejs.org/en/docs/inspector\\n     * ws://localhost:3000/51cf8d0e-3c36-4c59-8efd-54519839e56a\\n     *\\n     * $ node -p 'inspector.url()'\\n     * undefined\\n     * ```\\n     */\\n    function url(): string | undefined;\\n    /**\\n     * Blocks until a client (existing or connected later) has sent`Runtime.runIfWaitingForDebugger` command.\\n     *\\n     * An exception will be thrown if there is no active inspector.\\n     * @since v12.7.0\\n     */\\n    function waitForDebugger(): void;\\n}\\n/**\\n * The inspector module provides an API for interacting with the V8 inspector.\\n */\\ndeclare module 'node:inspector' {\\n    import inspector = require('inspector');\\n    export = inspector;\\n}\\n\",\"file:///node_modules/@types/node/module.d.ts\":\"/**\\n * @since v0.3.7\\n */\\ndeclare module 'module' {\\n    import { URL } from 'node:url';\\n    namespace Module {\\n        /**\\n         * The `module.syncBuiltinESMExports()` method updates all the live bindings for\\n         * builtin `ES Modules` to match the properties of the `CommonJS` exports. It\\n         * does not add or remove exported names from the `ES Modules`.\\n         *\\n         * ```js\\n         * const fs = require('fs');\\n         * const assert = require('assert');\\n         * const { syncBuiltinESMExports } = require('module');\\n         *\\n         * fs.readFile = newAPI;\\n         *\\n         * delete fs.readFileSync;\\n         *\\n         * function newAPI() {\\n         *   // ...\\n         * }\\n         *\\n         * fs.newAPI = newAPI;\\n         *\\n         * syncBuiltinESMExports();\\n         *\\n         * import('fs').then((esmFS) => {\\n         *   // It syncs the existing readFile property with the new value\\n         *   assert.strictEqual(esmFS.readFile, newAPI);\\n         *   // readFileSync has been deleted from the required fs\\n         *   assert.strictEqual('readFileSync' in fs, false);\\n         *   // syncBuiltinESMExports() does not remove readFileSync from esmFS\\n         *   assert.strictEqual('readFileSync' in esmFS, true);\\n         *   // syncBuiltinESMExports() does not add names\\n         *   assert.strictEqual(esmFS.newAPI, undefined);\\n         * });\\n         * ```\\n         * @since v12.12.0\\n         */\\n        function syncBuiltinESMExports(): void;\\n        /**\\n         * `path` is the resolved path for the file for which a corresponding source map\\n         * should be fetched.\\n         * @since v13.7.0, v12.17.0\\n         */\\n        function findSourceMap(path: string, error?: Error): SourceMap;\\n        interface SourceMapPayload {\\n            file: string;\\n            version: number;\\n            sources: string[];\\n            sourcesContent: string[];\\n            names: string[];\\n            mappings: string;\\n            sourceRoot: string;\\n        }\\n        interface SourceMapping {\\n            generatedLine: number;\\n            generatedColumn: number;\\n            originalSource: string;\\n            originalLine: number;\\n            originalColumn: number;\\n        }\\n        /**\\n         * @since v13.7.0, v12.17.0\\n         */\\n        class SourceMap {\\n            /**\\n             * Getter for the payload used to construct the `SourceMap` instance.\\n             */\\n            readonly payload: SourceMapPayload;\\n            constructor(payload: SourceMapPayload);\\n            /**\\n             * Given a line number and column number in the generated source file, returns\\n             * an object representing the position in the original file. The object returned\\n             * consists of the following keys:\\n             */\\n            findEntry(line: number, column: number): SourceMapping;\\n        }\\n    }\\n    interface Module extends NodeModule {}\\n    class Module {\\n        static runMain(): void;\\n        static wrap(code: string): string;\\n        static createRequire(path: string | URL): NodeRequire;\\n        static builtinModules: string[];\\n        static isBuiltin(moduleName: string): boolean;\\n        static Module: typeof Module;\\n        constructor(id: string, parent?: Module);\\n    }\\n    global {\\n        interface ImportMeta {\\n            url: string;\\n            /**\\n             * @experimental\\n             * This feature is only available with the `--experimental-import-meta-resolve`\\n             * command flag enabled.\\n             *\\n             * Provides a module-relative resolution function scoped to each module, returning\\n             * the URL string.\\n             *\\n             * @param specified The module specifier to resolve relative to `parent`.\\n             * @param parent The absolute parent module URL to resolve from. If none\\n             * is specified, the value of `import.meta.url` is used as the default.\\n             */\\n            resolve?(specified: string, parent?: string | URL): Promise<string>;\\n        }\\n    }\\n    export = Module;\\n}\\ndeclare module 'node:module' {\\n    import module = require('module');\\n    export = module;\\n}\\n\",\"file:///node_modules/@types/node/net.d.ts\":\"/**\\n * > Stability: 2 - Stable\\n *\\n * The `net` module provides an asynchronous network API for creating stream-based\\n * TCP or `IPC` servers ({@link createServer}) and clients\\n * ({@link createConnection}).\\n *\\n * It can be accessed using:\\n *\\n * ```js\\n * const net = require('net');\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/net.js)\\n */\\ndeclare module 'net' {\\n    import * as stream from 'node:stream';\\n    import { Abortable, EventEmitter } from 'node:events';\\n    import * as dns from 'node:dns';\\n    type LookupFunction = (hostname: string, options: dns.LookupOneOptions, callback: (err: NodeJS.ErrnoException | null, address: string, family: number) => void) => void;\\n    interface AddressInfo {\\n        address: string;\\n        family: string;\\n        port: number;\\n    }\\n    interface SocketConstructorOpts {\\n        fd?: number | undefined;\\n        allowHalfOpen?: boolean | undefined;\\n        readable?: boolean | undefined;\\n        writable?: boolean | undefined;\\n        signal?: AbortSignal;\\n    }\\n    interface OnReadOpts {\\n        buffer: Uint8Array | (() => Uint8Array);\\n        /**\\n         * This function is called for every chunk of incoming data.\\n         * Two arguments are passed to it: the number of bytes written to buffer and a reference to buffer.\\n         * Return false from this function to implicitly pause() the socket.\\n         */\\n        callback(bytesWritten: number, buf: Uint8Array): boolean;\\n    }\\n    interface ConnectOpts {\\n        /**\\n         * If specified, incoming data is stored in a single buffer and passed to the supplied callback when data arrives on the socket.\\n         * Note: this will cause the streaming functionality to not provide any data, however events like 'error', 'end', and 'close' will\\n         * still be emitted as normal and methods like pause() and resume() will also behave as expected.\\n         */\\n        onread?: OnReadOpts | undefined;\\n    }\\n    interface TcpSocketConnectOpts extends ConnectOpts {\\n        port: number;\\n        host?: string | undefined;\\n        localAddress?: string | undefined;\\n        localPort?: number | undefined;\\n        hints?: number | undefined;\\n        family?: number | undefined;\\n        lookup?: LookupFunction | undefined;\\n        noDelay?: boolean | undefined;\\n        keepAlive?: boolean | undefined;\\n        keepAliveInitialDelay?: number | undefined;\\n        /**\\n         * @since v18.13.0\\n         */\\n        autoSelectFamily?: boolean | undefined;\\n        /**\\n         * @since v18.13.0\\n         */\\n        autoSelectFamilyAttemptTimeout?: number | undefined;\\n    }\\n    interface IpcSocketConnectOpts extends ConnectOpts {\\n        path: string;\\n    }\\n    type SocketConnectOpts = TcpSocketConnectOpts | IpcSocketConnectOpts;\\n    type SocketReadyState = 'opening' | 'open' | 'readOnly' | 'writeOnly' | 'closed';\\n    /**\\n     * This class is an abstraction of a TCP socket or a streaming `IPC` endpoint\\n     * (uses named pipes on Windows, and Unix domain sockets otherwise). It is also\\n     * an `EventEmitter`.\\n     *\\n     * A `net.Socket` can be created by the user and used directly to interact with\\n     * a server. For example, it is returned by {@link createConnection},\\n     * so the user can use it to talk to the server.\\n     *\\n     * It can also be created by Node.js and passed to the user when a connection\\n     * is received. For example, it is passed to the listeners of a `'connection'` event emitted on a {@link Server}, so the user can use\\n     * it to interact with the client.\\n     * @since v0.3.4\\n     */\\n    class Socket extends stream.Duplex {\\n        constructor(options?: SocketConstructorOpts);\\n        /**\\n         * Sends data on the socket. The second parameter specifies the encoding in the\\n         * case of a string. It defaults to UTF8 encoding.\\n         *\\n         * Returns `true` if the entire data was flushed successfully to the kernel\\n         * buffer. Returns `false` if all or part of the data was queued in user memory.`'drain'` will be emitted when the buffer is again free.\\n         *\\n         * The optional `callback` parameter will be executed when the data is finally\\n         * written out, which may not be immediately.\\n         *\\n         * See `Writable` stream `write()` method for more\\n         * information.\\n         * @since v0.1.90\\n         * @param [encoding='utf8'] Only used when data is `string`.\\n         */\\n        write(buffer: Uint8Array | string, cb?: (err?: Error) => void): boolean;\\n        write(str: Uint8Array | string, encoding?: BufferEncoding, cb?: (err?: Error) => void): boolean;\\n        /**\\n         * Initiate a connection on a given socket.\\n         *\\n         * Possible signatures:\\n         *\\n         * * `socket.connect(options[, connectListener])`\\n         * * `socket.connect(path[, connectListener])` for `IPC` connections.\\n         * * `socket.connect(port[, host][, connectListener])` for TCP connections.\\n         * * Returns: `net.Socket` The socket itself.\\n         *\\n         * This function is asynchronous. When the connection is established, the `'connect'` event will be emitted. If there is a problem connecting,\\n         * instead of a `'connect'` event, an `'error'` event will be emitted with\\n         * the error passed to the `'error'` listener.\\n         * The last parameter `connectListener`, if supplied, will be added as a listener\\n         * for the `'connect'` event **once**.\\n         *\\n         * This function should only be used for reconnecting a socket after`'close'` has been emitted or otherwise it may lead to undefined\\n         * behavior.\\n         */\\n        connect(options: SocketConnectOpts, connectionListener?: () => void): this;\\n        connect(port: number, host: string, connectionListener?: () => void): this;\\n        connect(port: number, connectionListener?: () => void): this;\\n        connect(path: string, connectionListener?: () => void): this;\\n        /**\\n         * Set the encoding for the socket as a `Readable Stream`. See `readable.setEncoding()` for more information.\\n         * @since v0.1.90\\n         * @return The socket itself.\\n         */\\n        setEncoding(encoding?: BufferEncoding): this;\\n        /**\\n         * Pauses the reading of data. That is, `'data'` events will not be emitted.\\n         * Useful to throttle back an upload.\\n         * @return The socket itself.\\n         */\\n        pause(): this;\\n        /**\\n         * Close the TCP connection by sending an RST packet and destroy the stream.\\n         * If this TCP socket is in connecting status, it will send an RST packet\\n         * and destroy this TCP socket once it is connected. Otherwise, it will call\\n         * `socket.destroy` with an `ERR_SOCKET_CLOSED` Error. If this is not a TCP socket\\n         * (for example, a pipe), calling this method will immediately throw\\n         * an `ERR_INVALID_HANDLE_TYPE` Error.\\n         * @since v18.3.0\\n         * @return The socket itself.\\n         */\\n        resetAndDestroy(): this;\\n        /**\\n         * Resumes reading after a call to `socket.pause()`.\\n         * @return The socket itself.\\n         */\\n        resume(): this;\\n        /**\\n         * Sets the socket to timeout after `timeout` milliseconds of inactivity on\\n         * the socket. By default `net.Socket` do not have a timeout.\\n         *\\n         * When an idle timeout is triggered the socket will receive a `'timeout'` event but the connection will not be severed. The user must manually call `socket.end()` or `socket.destroy()` to\\n         * end the connection.\\n         *\\n         * ```js\\n         * socket.setTimeout(3000);\\n         * socket.on('timeout', () => {\\n         *   console.log('socket timeout');\\n         *   socket.end();\\n         * });\\n         * ```\\n         *\\n         * If `timeout` is 0, then the existing idle timeout is disabled.\\n         *\\n         * The optional `callback` parameter will be added as a one-time listener for the `'timeout'` event.\\n         * @since v0.1.90\\n         * @return The socket itself.\\n         */\\n        setTimeout(timeout: number, callback?: () => void): this;\\n        /**\\n         * Enable/disable the use of Nagle's algorithm.\\n         *\\n         * When a TCP connection is created, it will have Nagle's algorithm enabled.\\n         *\\n         * Nagle's algorithm delays data before it is sent via the network. It attempts\\n         * to optimize throughput at the expense of latency.\\n         *\\n         * Passing `true` for `noDelay` or not passing an argument will disable Nagle's\\n         * algorithm for the socket. Passing `false` for `noDelay` will enable Nagle's\\n         * algorithm.\\n         * @since v0.1.90\\n         * @param [noDelay=true]\\n         * @return The socket itself.\\n         */\\n        setNoDelay(noDelay?: boolean): this;\\n        /**\\n         * Enable/disable keep-alive functionality, and optionally set the initial\\n         * delay before the first keepalive probe is sent on an idle socket.\\n         *\\n         * Set `initialDelay` (in milliseconds) to set the delay between the last\\n         * data packet received and the first keepalive probe. Setting `0` for`initialDelay` will leave the value unchanged from the default\\n         * (or previous) setting.\\n         *\\n         * Enabling the keep-alive functionality will set the following socket options:\\n         *\\n         * * `SO_KEEPALIVE=1`\\n         * * `TCP_KEEPIDLE=initialDelay`\\n         * * `TCP_KEEPCNT=10`\\n         * * `TCP_KEEPINTVL=1`\\n         * @since v0.1.92\\n         * @param [enable=false]\\n         * @param [initialDelay=0]\\n         * @return The socket itself.\\n         */\\n        setKeepAlive(enable?: boolean, initialDelay?: number): this;\\n        /**\\n         * Returns the bound `address`, the address `family` name and `port` of the\\n         * socket as reported by the operating system:`{ port: 12346, family: 'IPv4', address: '127.0.0.1' }`\\n         * @since v0.1.90\\n         */\\n        address(): AddressInfo | {};\\n        /**\\n         * Calling `unref()` on a socket will allow the program to exit if this is the only\\n         * active socket in the event system. If the socket is already `unref`ed calling`unref()` again will have no effect.\\n         * @since v0.9.1\\n         * @return The socket itself.\\n         */\\n        unref(): this;\\n        /**\\n         * Opposite of `unref()`, calling `ref()` on a previously `unref`ed socket will _not_ let the program exit if it's the only socket left (the default behavior).\\n         * If the socket is `ref`ed calling `ref` again will have no effect.\\n         * @since v0.9.1\\n         * @return The socket itself.\\n         */\\n        ref(): this;\\n        /**\\n         * This property shows the number of characters buffered for writing. The buffer\\n         * may contain strings whose length after encoding is not yet known. So this number\\n         * is only an approximation of the number of bytes in the buffer.\\n         *\\n         * `net.Socket` has the property that `socket.write()` always works. This is to\\n         * help users get up and running quickly. The computer cannot always keep up\\n         * with the amount of data that is written to a socket. The network connection\\n         * simply might be too slow. Node.js will internally queue up the data written to a\\n         * socket and send it out over the wire when it is possible.\\n         *\\n         * The consequence of this internal buffering is that memory may grow.\\n         * Users who experience large or growing `bufferSize` should attempt to\\n         * \\\"throttle\\\" the data flows in their program with `socket.pause()` and `socket.resume()`.\\n         * @since v0.3.8\\n         * @deprecated Since v14.6.0 - Use `writableLength` instead.\\n         */\\n        readonly bufferSize: number;\\n        /**\\n         * The amount of received bytes.\\n         * @since v0.5.3\\n         */\\n        readonly bytesRead: number;\\n        /**\\n         * The amount of bytes sent.\\n         * @since v0.5.3\\n         */\\n        readonly bytesWritten: number;\\n        /**\\n         * If `true`,`socket.connect(options[, connectListener])` was\\n         * called and has not yet finished. It will stay `true` until the socket becomes\\n         * connected, then it is set to `false` and the `'connect'` event is emitted. Note\\n         * that the `socket.connect(options[, connectListener])` callback is a listener for the `'connect'` event.\\n         * @since v6.1.0\\n         */\\n        readonly connecting: boolean;\\n        /**\\n         * This is `true` if the socket is not connected yet, either because `.connect()`\\n         * has not yet been called or because it is still in the process of connecting (see `socket.connecting`).\\n         * @since v10.16.0\\n         */\\n        readonly pending: boolean;\\n        /**\\n         * See `writable.destroyed` for further details.\\n         */\\n        readonly destroyed: boolean;\\n        /**\\n         * The string representation of the local IP address the remote client is\\n         * connecting on. For example, in a server listening on `'0.0.0.0'`, if a client\\n         * connects on `'192.168.1.1'`, the value of `socket.localAddress` would be`'192.168.1.1'`.\\n         * @since v0.9.6\\n         */\\n        readonly localAddress?: string;\\n        /**\\n         * The numeric representation of the local port. For example, `80` or `21`.\\n         * @since v0.9.6\\n         */\\n        readonly localPort?: number;\\n        /**\\n         * The string representation of the local IP family. `'IPv4'` or `'IPv6'`.\\n         * @since v18.8.0\\n         */\\n        readonly localFamily?: string;\\n        /**\\n         * This property represents the state of the connection as a string.\\n         * @see {https://nodejs.org/api/net.html#socketreadystate}\\n         * @since v0.5.0\\n         */\\n        readonly readyState: SocketReadyState;\\n        /**\\n         * The string representation of the remote IP address. For example,`'74.125.127.100'` or `'2001:4860:a005::68'`. Value may be `undefined` if\\n         * the socket is destroyed (for example, if the client disconnected).\\n         * @since v0.5.10\\n         */\\n        readonly remoteAddress?: string | undefined;\\n        /**\\n         * The string representation of the remote IP family. `'IPv4'` or `'IPv6'`.\\n         * @since v0.11.14\\n         */\\n        readonly remoteFamily?: string | undefined;\\n        /**\\n         * The numeric representation of the remote port. For example, `80` or `21`.\\n         * @since v0.5.10\\n         */\\n        readonly remotePort?: number | undefined;\\n        /**\\n         * The socket timeout in milliseconds as set by socket.setTimeout(). It is undefined if a timeout has not been set.\\n         * @since v10.7.0\\n         */\\n        readonly timeout?: number | undefined;\\n        /**\\n         * Half-closes the socket. i.e., it sends a FIN packet. It is possible the\\n         * server will still send some data.\\n         *\\n         * See `writable.end()` for further details.\\n         * @since v0.1.90\\n         * @param [encoding='utf8'] Only used when data is `string`.\\n         * @param callback Optional callback for when the socket is finished.\\n         * @return The socket itself.\\n         */\\n        end(callback?: () => void): this;\\n        end(buffer: Uint8Array | string, callback?: () => void): this;\\n        end(str: Uint8Array | string, encoding?: BufferEncoding, callback?: () => void): this;\\n        /**\\n         * events.EventEmitter\\n         *   1. close\\n         *   2. connect\\n         *   3. data\\n         *   4. drain\\n         *   5. end\\n         *   6. error\\n         *   7. lookup\\n         *   8. ready\\n         *   9. timeout\\n         */\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        addListener(event: 'close', listener: (hadError: boolean) => void): this;\\n        addListener(event: 'connect', listener: () => void): this;\\n        addListener(event: 'data', listener: (data: Buffer) => void): this;\\n        addListener(event: 'drain', listener: () => void): this;\\n        addListener(event: 'end', listener: () => void): this;\\n        addListener(event: 'error', listener: (err: Error) => void): this;\\n        addListener(event: 'lookup', listener: (err: Error, address: string, family: string | number, host: string) => void): this;\\n        addListener(event: 'ready', listener: () => void): this;\\n        addListener(event: 'timeout', listener: () => void): this;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        emit(event: 'close', hadError: boolean): boolean;\\n        emit(event: 'connect'): boolean;\\n        emit(event: 'data', data: Buffer): boolean;\\n        emit(event: 'drain'): boolean;\\n        emit(event: 'end'): boolean;\\n        emit(event: 'error', err: Error): boolean;\\n        emit(event: 'lookup', err: Error, address: string, family: string | number, host: string): boolean;\\n        emit(event: 'ready'): boolean;\\n        emit(event: 'timeout'): boolean;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        on(event: 'close', listener: (hadError: boolean) => void): this;\\n        on(event: 'connect', listener: () => void): this;\\n        on(event: 'data', listener: (data: Buffer) => void): this;\\n        on(event: 'drain', listener: () => void): this;\\n        on(event: 'end', listener: () => void): this;\\n        on(event: 'error', listener: (err: Error) => void): this;\\n        on(event: 'lookup', listener: (err: Error, address: string, family: string | number, host: string) => void): this;\\n        on(event: 'ready', listener: () => void): this;\\n        on(event: 'timeout', listener: () => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        once(event: 'close', listener: (hadError: boolean) => void): this;\\n        once(event: 'connect', listener: () => void): this;\\n        once(event: 'data', listener: (data: Buffer) => void): this;\\n        once(event: 'drain', listener: () => void): this;\\n        once(event: 'end', listener: () => void): this;\\n        once(event: 'error', listener: (err: Error) => void): this;\\n        once(event: 'lookup', listener: (err: Error, address: string, family: string | number, host: string) => void): this;\\n        once(event: 'ready', listener: () => void): this;\\n        once(event: 'timeout', listener: () => void): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'close', listener: (hadError: boolean) => void): this;\\n        prependListener(event: 'connect', listener: () => void): this;\\n        prependListener(event: 'data', listener: (data: Buffer) => void): this;\\n        prependListener(event: 'drain', listener: () => void): this;\\n        prependListener(event: 'end', listener: () => void): this;\\n        prependListener(event: 'error', listener: (err: Error) => void): this;\\n        prependListener(event: 'lookup', listener: (err: Error, address: string, family: string | number, host: string) => void): this;\\n        prependListener(event: 'ready', listener: () => void): this;\\n        prependListener(event: 'timeout', listener: () => void): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'close', listener: (hadError: boolean) => void): this;\\n        prependOnceListener(event: 'connect', listener: () => void): this;\\n        prependOnceListener(event: 'data', listener: (data: Buffer) => void): this;\\n        prependOnceListener(event: 'drain', listener: () => void): this;\\n        prependOnceListener(event: 'end', listener: () => void): this;\\n        prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n        prependOnceListener(event: 'lookup', listener: (err: Error, address: string, family: string | number, host: string) => void): this;\\n        prependOnceListener(event: 'ready', listener: () => void): this;\\n        prependOnceListener(event: 'timeout', listener: () => void): this;\\n    }\\n    interface ListenOptions extends Abortable {\\n        port?: number | undefined;\\n        host?: string | undefined;\\n        backlog?: number | undefined;\\n        path?: string | undefined;\\n        exclusive?: boolean | undefined;\\n        readableAll?: boolean | undefined;\\n        writableAll?: boolean | undefined;\\n        /**\\n         * @default false\\n         */\\n        ipv6Only?: boolean | undefined;\\n    }\\n    interface ServerOpts {\\n        /**\\n         * Indicates whether half-opened TCP connections are allowed.\\n         * @default false\\n         */\\n        allowHalfOpen?: boolean | undefined;\\n        /**\\n         * Indicates whether the socket should be paused on incoming connections.\\n         * @default false\\n         */\\n        pauseOnConnect?: boolean | undefined;\\n        /**\\n         * If set to `true`, it disables the use of Nagle's algorithm immediately after a new incoming connection is received.\\n         * @default false\\n         * @since v16.5.0\\n         */\\n        noDelay?: boolean | undefined;\\n        /**\\n         * If set to `true`, it enables keep-alive functionality on the socket immediately after a new incoming connection is received,\\n         * similarly on what is done in `socket.setKeepAlive([enable][, initialDelay])`.\\n         * @default false\\n         * @since v16.5.0\\n         */\\n        keepAlive?: boolean | undefined;\\n        /**\\n         * If set to a positive number, it sets the initial delay before the first keepalive probe is sent on an idle socket.\\n         * @default 0\\n         * @since v16.5.0\\n         */\\n        keepAliveInitialDelay?: number | undefined;\\n    }\\n    interface DropArgument {\\n        localAddress?: string;\\n        localPort?: number;\\n        localFamily?: string;\\n        remoteAddress?: string;\\n        remotePort?: number;\\n        remoteFamily?: string;\\n    }\\n    /**\\n     * This class is used to create a TCP or `IPC` server.\\n     * @since v0.1.90\\n     */\\n    class Server extends EventEmitter {\\n        constructor(connectionListener?: (socket: Socket) => void);\\n        constructor(options?: ServerOpts, connectionListener?: (socket: Socket) => void);\\n        /**\\n         * Start a server listening for connections. A `net.Server` can be a TCP or\\n         * an `IPC` server depending on what it listens to.\\n         *\\n         * Possible signatures:\\n         *\\n         * * `server.listen(handle[, backlog][, callback])`\\n         * * `server.listen(options[, callback])`\\n         * * `server.listen(path[, backlog][, callback])` for `IPC` servers\\n         * * `server.listen([port[, host[, backlog]]][, callback])` for TCP servers\\n         *\\n         * This function is asynchronous. When the server starts listening, the `'listening'` event will be emitted. The last parameter `callback`will be added as a listener for the `'listening'`\\n         * event.\\n         *\\n         * All `listen()` methods can take a `backlog` parameter to specify the maximum\\n         * length of the queue of pending connections. The actual length will be determined\\n         * by the OS through sysctl settings such as `tcp_max_syn_backlog` and `somaxconn`on Linux. The default value of this parameter is 511 (not 512).\\n         *\\n         * All {@link Socket} are set to `SO_REUSEADDR` (see [`socket(7)`](https://man7.org/linux/man-pages/man7/socket.7.html) for\\n         * details).\\n         *\\n         * The `server.listen()` method can be called again if and only if there was an\\n         * error during the first `server.listen()` call or `server.close()` has been\\n         * called. Otherwise, an `ERR_SERVER_ALREADY_LISTEN` error will be thrown.\\n         *\\n         * One of the most common errors raised when listening is `EADDRINUSE`.\\n         * This happens when another server is already listening on the requested`port`/`path`/`handle`. One way to handle this would be to retry\\n         * after a certain amount of time:\\n         *\\n         * ```js\\n         * server.on('error', (e) => {\\n         *   if (e.code === 'EADDRINUSE') {\\n         *     console.log('Address in use, retrying...');\\n         *     setTimeout(() => {\\n         *       server.close();\\n         *       server.listen(PORT, HOST);\\n         *     }, 1000);\\n         *   }\\n         * });\\n         * ```\\n         */\\n        listen(port?: number, hostname?: string, backlog?: number, listeningListener?: () => void): this;\\n        listen(port?: number, hostname?: string, listeningListener?: () => void): this;\\n        listen(port?: number, backlog?: number, listeningListener?: () => void): this;\\n        listen(port?: number, listeningListener?: () => void): this;\\n        listen(path: string, backlog?: number, listeningListener?: () => void): this;\\n        listen(path: string, listeningListener?: () => void): this;\\n        listen(options: ListenOptions, listeningListener?: () => void): this;\\n        listen(handle: any, backlog?: number, listeningListener?: () => void): this;\\n        listen(handle: any, listeningListener?: () => void): this;\\n        /**\\n         * Stops the server from accepting new connections and keeps existing\\n         * connections. This function is asynchronous, the server is finally closed\\n         * when all connections are ended and the server emits a `'close'` event.\\n         * The optional `callback` will be called once the `'close'` event occurs. Unlike\\n         * that event, it will be called with an `Error` as its only argument if the server\\n         * was not open when it was closed.\\n         * @since v0.1.90\\n         * @param callback Called when the server is closed.\\n         */\\n        close(callback?: (err?: Error) => void): this;\\n        /**\\n         * Returns the bound `address`, the address `family` name, and `port` of the server\\n         * as reported by the operating system if listening on an IP socket\\n         * (useful to find which port was assigned when getting an OS-assigned address):`{ port: 12346, family: 'IPv4', address: '127.0.0.1' }`.\\n         *\\n         * For a server listening on a pipe or Unix domain socket, the name is returned\\n         * as a string.\\n         *\\n         * ```js\\n         * const server = net.createServer((socket) => {\\n         *   socket.end('goodbye\\\\n');\\n         * }).on('error', (err) => {\\n         *   // Handle errors here.\\n         *   throw err;\\n         * });\\n         *\\n         * // Grab an arbitrary unused port.\\n         * server.listen(() => {\\n         *   console.log('opened server on', server.address());\\n         * });\\n         * ```\\n         *\\n         * `server.address()` returns `null` before the `'listening'` event has been\\n         * emitted or after calling `server.close()`.\\n         * @since v0.1.90\\n         */\\n        address(): AddressInfo | string | null;\\n        /**\\n         * Asynchronously get the number of concurrent connections on the server. Works\\n         * when sockets were sent to forks.\\n         *\\n         * Callback should take two arguments `err` and `count`.\\n         * @since v0.9.7\\n         */\\n        getConnections(cb: (error: Error | null, count: number) => void): void;\\n        /**\\n         * Opposite of `unref()`, calling `ref()` on a previously `unref`ed server will _not_ let the program exit if it's the only server left (the default behavior).\\n         * If the server is `ref`ed calling `ref()` again will have no effect.\\n         * @since v0.9.1\\n         */\\n        ref(): this;\\n        /**\\n         * Calling `unref()` on a server will allow the program to exit if this is the only\\n         * active server in the event system. If the server is already `unref`ed calling`unref()` again will have no effect.\\n         * @since v0.9.1\\n         */\\n        unref(): this;\\n        /**\\n         * Set this property to reject connections when the server's connection count gets\\n         * high.\\n         *\\n         * It is not recommended to use this option once a socket has been sent to a child\\n         * with `child_process.fork()`.\\n         * @since v0.2.0\\n         */\\n        maxConnections: number;\\n        connections: number;\\n        /**\\n         * Indicates whether or not the server is listening for connections.\\n         * @since v5.7.0\\n         */\\n        listening: boolean;\\n        /**\\n         * events.EventEmitter\\n         *   1. close\\n         *   2. connection\\n         *   3. error\\n         *   4. listening\\n         *   5. drop\\n         */\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        addListener(event: 'close', listener: () => void): this;\\n        addListener(event: 'connection', listener: (socket: Socket) => void): this;\\n        addListener(event: 'error', listener: (err: Error) => void): this;\\n        addListener(event: 'listening', listener: () => void): this;\\n        addListener(event: 'drop', listener: (data?: DropArgument) => void): this;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        emit(event: 'close'): boolean;\\n        emit(event: 'connection', socket: Socket): boolean;\\n        emit(event: 'error', err: Error): boolean;\\n        emit(event: 'listening'): boolean;\\n        emit(event: 'drop', data?: DropArgument): boolean;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        on(event: 'close', listener: () => void): this;\\n        on(event: 'connection', listener: (socket: Socket) => void): this;\\n        on(event: 'error', listener: (err: Error) => void): this;\\n        on(event: 'listening', listener: () => void): this;\\n        on(event: 'drop', listener: (data?: DropArgument) => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        once(event: 'close', listener: () => void): this;\\n        once(event: 'connection', listener: (socket: Socket) => void): this;\\n        once(event: 'error', listener: (err: Error) => void): this;\\n        once(event: 'listening', listener: () => void): this;\\n        once(event: 'drop', listener: (data?: DropArgument) => void): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'close', listener: () => void): this;\\n        prependListener(event: 'connection', listener: (socket: Socket) => void): this;\\n        prependListener(event: 'error', listener: (err: Error) => void): this;\\n        prependListener(event: 'listening', listener: () => void): this;\\n        prependListener(event: 'drop', listener: (data?: DropArgument) => void): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'close', listener: () => void): this;\\n        prependOnceListener(event: 'connection', listener: (socket: Socket) => void): this;\\n        prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n        prependOnceListener(event: 'listening', listener: () => void): this;\\n        prependOnceListener(event: 'drop', listener: (data?: DropArgument) => void): this;\\n    }\\n    type IPVersion = 'ipv4' | 'ipv6';\\n    /**\\n     * The `BlockList` object can be used with some network APIs to specify rules for\\n     * disabling inbound or outbound access to specific IP addresses, IP ranges, or\\n     * IP subnets.\\n     * @since v15.0.0, v14.18.0\\n     */\\n    class BlockList {\\n        /**\\n         * Adds a rule to block the given IP address.\\n         * @since v15.0.0, v14.18.0\\n         * @param address An IPv4 or IPv6 address.\\n         * @param [type='ipv4'] Either `'ipv4'` or `'ipv6'`.\\n         */\\n        addAddress(address: string, type?: IPVersion): void;\\n        addAddress(address: SocketAddress): void;\\n        /**\\n         * Adds a rule to block a range of IP addresses from `start` (inclusive) to`end` (inclusive).\\n         * @since v15.0.0, v14.18.0\\n         * @param start The starting IPv4 or IPv6 address in the range.\\n         * @param end The ending IPv4 or IPv6 address in the range.\\n         * @param [type='ipv4'] Either `'ipv4'` or `'ipv6'`.\\n         */\\n        addRange(start: string, end: string, type?: IPVersion): void;\\n        addRange(start: SocketAddress, end: SocketAddress): void;\\n        /**\\n         * Adds a rule to block a range of IP addresses specified as a subnet mask.\\n         * @since v15.0.0, v14.18.0\\n         * @param net The network IPv4 or IPv6 address.\\n         * @param prefix The number of CIDR prefix bits. For IPv4, this must be a value between `0` and `32`. For IPv6, this must be between `0` and `128`.\\n         * @param [type='ipv4'] Either `'ipv4'` or `'ipv6'`.\\n         */\\n        addSubnet(net: SocketAddress, prefix: number): void;\\n        addSubnet(net: string, prefix: number, type?: IPVersion): void;\\n        /**\\n         * Returns `true` if the given IP address matches any of the rules added to the`BlockList`.\\n         *\\n         * ```js\\n         * const blockList = new net.BlockList();\\n         * blockList.addAddress('123.123.123.123');\\n         * blockList.addRange('10.0.0.1', '10.0.0.10');\\n         * blockList.addSubnet('8592:757c:efae:4e45::', 64, 'ipv6');\\n         *\\n         * console.log(blockList.check('123.123.123.123'));  // Prints: true\\n         * console.log(blockList.check('10.0.0.3'));  // Prints: true\\n         * console.log(blockList.check('222.111.111.222'));  // Prints: false\\n         *\\n         * // IPv6 notation for IPv4 addresses works:\\n         * console.log(blockList.check('::ffff:7b7b:7b7b', 'ipv6')); // Prints: true\\n         * console.log(blockList.check('::ffff:123.123.123.123', 'ipv6')); // Prints: true\\n         * ```\\n         * @since v15.0.0, v14.18.0\\n         * @param address The IP address to check\\n         * @param [type='ipv4'] Either `'ipv4'` or `'ipv6'`.\\n         */\\n        check(address: SocketAddress): boolean;\\n        check(address: string, type?: IPVersion): boolean;\\n    }\\n    interface TcpNetConnectOpts extends TcpSocketConnectOpts, SocketConstructorOpts {\\n        timeout?: number | undefined;\\n    }\\n    interface IpcNetConnectOpts extends IpcSocketConnectOpts, SocketConstructorOpts {\\n        timeout?: number | undefined;\\n    }\\n    type NetConnectOpts = TcpNetConnectOpts | IpcNetConnectOpts;\\n    /**\\n     * Creates a new TCP or `IPC` server.\\n     *\\n     * If `allowHalfOpen` is set to `true`, when the other end of the socket\\n     * signals the end of transmission, the server will only send back the end of\\n     * transmission when `socket.end()` is explicitly called. For example, in the\\n     * context of TCP, when a FIN packed is received, a FIN packed is sent\\n     * back only when `socket.end()` is explicitly called. Until then the\\n     * connection is half-closed (non-readable but still writable). See `'end'` event and [RFC 1122](https://tools.ietf.org/html/rfc1122) (section 4.2.2.13) for more information.\\n     *\\n     * If `pauseOnConnect` is set to `true`, then the socket associated with each\\n     * incoming connection will be paused, and no data will be read from its handle.\\n     * This allows connections to be passed between processes without any data being\\n     * read by the original process. To begin reading data from a paused socket, call `socket.resume()`.\\n     *\\n     * The server can be a TCP server or an `IPC` server, depending on what it `listen()` to.\\n     *\\n     * Here is an example of a TCP echo server which listens for connections\\n     * on port 8124:\\n     *\\n     * ```js\\n     * const net = require('net');\\n     * const server = net.createServer((c) => {\\n     *   // 'connection' listener.\\n     *   console.log('client connected');\\n     *   c.on('end', () => {\\n     *     console.log('client disconnected');\\n     *   });\\n     *   c.write('hello\\\\r\\\\n');\\n     *   c.pipe(c);\\n     * });\\n     * server.on('error', (err) => {\\n     *   throw err;\\n     * });\\n     * server.listen(8124, () => {\\n     *   console.log('server bound');\\n     * });\\n     * ```\\n     *\\n     * Test this by using `telnet`:\\n     *\\n     * ```console\\n     * $ telnet localhost 8124\\n     * ```\\n     *\\n     * To listen on the socket `/tmp/echo.sock`:\\n     *\\n     * ```js\\n     * server.listen('/tmp/echo.sock', () => {\\n     *   console.log('server bound');\\n     * });\\n     * ```\\n     *\\n     * Use `nc` to connect to a Unix domain socket server:\\n     *\\n     * ```console\\n     * $ nc -U /tmp/echo.sock\\n     * ```\\n     * @since v0.5.0\\n     * @param connectionListener Automatically set as a listener for the {@link 'connection'} event.\\n     */\\n    function createServer(connectionListener?: (socket: Socket) => void): Server;\\n    function createServer(options?: ServerOpts, connectionListener?: (socket: Socket) => void): Server;\\n    /**\\n     * Aliases to {@link createConnection}.\\n     *\\n     * Possible signatures:\\n     *\\n     * * {@link connect}\\n     * * {@link connect} for `IPC` connections.\\n     * * {@link connect} for TCP connections.\\n     */\\n    function connect(options: NetConnectOpts, connectionListener?: () => void): Socket;\\n    function connect(port: number, host?: string, connectionListener?: () => void): Socket;\\n    function connect(path: string, connectionListener?: () => void): Socket;\\n    /**\\n     * A factory function, which creates a new {@link Socket},\\n     * immediately initiates connection with `socket.connect()`,\\n     * then returns the `net.Socket` that starts the connection.\\n     *\\n     * When the connection is established, a `'connect'` event will be emitted\\n     * on the returned socket. The last parameter `connectListener`, if supplied,\\n     * will be added as a listener for the `'connect'` event **once**.\\n     *\\n     * Possible signatures:\\n     *\\n     * * {@link createConnection}\\n     * * {@link createConnection} for `IPC` connections.\\n     * * {@link createConnection} for TCP connections.\\n     *\\n     * The {@link connect} function is an alias to this function.\\n     */\\n    function createConnection(options: NetConnectOpts, connectionListener?: () => void): Socket;\\n    function createConnection(port: number, host?: string, connectionListener?: () => void): Socket;\\n    function createConnection(path: string, connectionListener?: () => void): Socket;\\n    /**\\n     * Returns `6` if `input` is an IPv6 address. Returns `4` if `input` is an IPv4\\n     * address in [dot-decimal notation](https://en.wikipedia.org/wiki/Dot-decimal_notation) with no leading zeroes. Otherwise, returns`0`.\\n     *\\n     * ```js\\n     * net.isIP('::1'); // returns 6\\n     * net.isIP('127.0.0.1'); // returns 4\\n     * net.isIP('127.000.000.001'); // returns 0\\n     * net.isIP('127.0.0.1/24'); // returns 0\\n     * net.isIP('fhqwhgads'); // returns 0\\n     * ```\\n     * @since v0.3.0\\n     */\\n    function isIP(input: string): number;\\n    /**\\n     * Returns `true` if `input` is an IPv4 address in [dot-decimal notation](https://en.wikipedia.org/wiki/Dot-decimal_notation) with no\\n     * leading zeroes. Otherwise, returns `false`.\\n     *\\n     * ```js\\n     * net.isIPv4('127.0.0.1'); // returns true\\n     * net.isIPv4('127.000.000.001'); // returns false\\n     * net.isIPv4('127.0.0.1/24'); // returns false\\n     * net.isIPv4('fhqwhgads'); // returns false\\n     * ```\\n     * @since v0.3.0\\n     */\\n    function isIPv4(input: string): boolean;\\n    /**\\n     * Returns `true` if `input` is an IPv6 address. Otherwise, returns `false`.\\n     *\\n     * ```js\\n     * net.isIPv6('::1'); // returns true\\n     * net.isIPv6('fhqwhgads'); // returns false\\n     * ```\\n     * @since v0.3.0\\n     */\\n    function isIPv6(input: string): boolean;\\n    interface SocketAddressInitOptions {\\n        /**\\n         * The network address as either an IPv4 or IPv6 string.\\n         * @default 127.0.0.1\\n         */\\n        address?: string | undefined;\\n        /**\\n         * @default `'ipv4'`\\n         */\\n        family?: IPVersion | undefined;\\n        /**\\n         * An IPv6 flow-label used only if `family` is `'ipv6'`.\\n         * @default 0\\n         */\\n        flowlabel?: number | undefined;\\n        /**\\n         * An IP port.\\n         * @default 0\\n         */\\n        port?: number | undefined;\\n    }\\n    /**\\n     * @since v15.14.0, v14.18.0\\n     */\\n    class SocketAddress {\\n        constructor(options: SocketAddressInitOptions);\\n        /**\\n         * @since v15.14.0, v14.18.0\\n         */\\n        readonly address: string;\\n        /**\\n         * Either \\\\`'ipv4'\\\\` or \\\\`'ipv6'\\\\`.\\n         * @since v15.14.0, v14.18.0\\n         */\\n        readonly family: IPVersion;\\n        /**\\n         * @since v15.14.0, v14.18.0\\n         */\\n        readonly port: number;\\n        /**\\n         * @since v15.14.0, v14.18.0\\n         */\\n        readonly flowlabel: number;\\n    }\\n}\\ndeclare module 'node:net' {\\n    export * from 'net';\\n}\\n\",\"file:///node_modules/@types/node/os.d.ts\":\"/**\\n * The `os` module provides operating system-related utility methods and\\n * properties. It can be accessed using:\\n *\\n * ```js\\n * const os = require('os');\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/os.js)\\n */\\ndeclare module 'os' {\\n    interface CpuInfo {\\n        model: string;\\n        speed: number;\\n        times: {\\n            user: number;\\n            nice: number;\\n            sys: number;\\n            idle: number;\\n            irq: number;\\n        };\\n    }\\n    interface NetworkInterfaceBase {\\n        address: string;\\n        netmask: string;\\n        mac: string;\\n        internal: boolean;\\n        cidr: string | null;\\n    }\\n    interface NetworkInterfaceInfoIPv4 extends NetworkInterfaceBase {\\n        family: 'IPv4';\\n        scopeid?: undefined;\\n    }\\n    interface NetworkInterfaceInfoIPv6 extends NetworkInterfaceBase {\\n        family: 'IPv6';\\n        scopeid: number;\\n    }\\n    interface UserInfo<T> {\\n        username: T;\\n        uid: number;\\n        gid: number;\\n        shell: T;\\n        homedir: T;\\n    }\\n    type NetworkInterfaceInfo = NetworkInterfaceInfoIPv4 | NetworkInterfaceInfoIPv6;\\n    /**\\n     * Returns the host name of the operating system as a string.\\n     * @since v0.3.3\\n     */\\n    function hostname(): string;\\n    /**\\n     * Returns an array containing the 1, 5, and 15 minute load averages.\\n     *\\n     * The load average is a measure of system activity calculated by the operating\\n     * system and expressed as a fractional number.\\n     *\\n     * The load average is a Unix-specific concept. On Windows, the return value is\\n     * always `[0, 0, 0]`.\\n     * @since v0.3.3\\n     */\\n    function loadavg(): number[];\\n    /**\\n     * Returns the system uptime in number of seconds.\\n     * @since v0.3.3\\n     */\\n    function uptime(): number;\\n    /**\\n     * Returns the amount of free system memory in bytes as an integer.\\n     * @since v0.3.3\\n     */\\n    function freemem(): number;\\n    /**\\n     * Returns the total amount of system memory in bytes as an integer.\\n     * @since v0.3.3\\n     */\\n    function totalmem(): number;\\n    /**\\n     * Returns an array of objects containing information about each logical CPU core.\\n     *\\n     * The properties included on each object include:\\n     *\\n     * ```js\\n     * [\\n     *   {\\n     *     model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',\\n     *     speed: 2926,\\n     *     times: {\\n     *       user: 252020,\\n     *       nice: 0,\\n     *       sys: 30340,\\n     *       idle: 1070356870,\\n     *       irq: 0\\n     *     }\\n     *   },\\n     *   {\\n     *     model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',\\n     *     speed: 2926,\\n     *     times: {\\n     *       user: 306960,\\n     *       nice: 0,\\n     *       sys: 26980,\\n     *       idle: 1071569080,\\n     *       irq: 0\\n     *     }\\n     *   },\\n     *   {\\n     *     model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',\\n     *     speed: 2926,\\n     *     times: {\\n     *       user: 248450,\\n     *       nice: 0,\\n     *       sys: 21750,\\n     *       idle: 1070919370,\\n     *       irq: 0\\n     *     }\\n     *   },\\n     *   {\\n     *     model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',\\n     *     speed: 2926,\\n     *     times: {\\n     *       user: 256880,\\n     *       nice: 0,\\n     *       sys: 19430,\\n     *       idle: 1070905480,\\n     *       irq: 20\\n     *     }\\n     *   },\\n     * ]\\n     * ```\\n     *\\n     * `nice` values are POSIX-only. On Windows, the `nice` values of all processors\\n     * are always 0.\\n     * @since v0.3.3\\n     */\\n    function cpus(): CpuInfo[];\\n    /**\\n     * Returns an estimate of the default amount of parallelism a program should use. Always returns a value greater than zero.\\n     *\\n     * This function is a small wrapper about libuv's [`uv_available_parallelism()`](https://docs.libuv.org/en/v1.x/misc.html#c.uv_available_parallelism).\\n     * @since 18.4.0\\n     */\\n    function availableParallelism(): number;\\n    /**\\n     * Returns the operating system name as returned by [`uname(3)`](https://linux.die.net/man/3/uname). For example, it\\n     * returns `'Linux'` on Linux, `'Darwin'` on macOS, and `'Windows_NT'` on Windows.\\n     *\\n     * See [https://en.wikipedia.org/wiki/Uname#Examples](https://en.wikipedia.org/wiki/Uname#Examples) for additional information\\n     * about the output of running [`uname(3)`](https://linux.die.net/man/3/uname) on various operating systems.\\n     * @since v0.3.3\\n     */\\n    function type(): string;\\n    /**\\n     * Returns the operating system as a string.\\n     *\\n     * On POSIX systems, the operating system release is determined by calling [`uname(3)`](https://linux.die.net/man/3/uname). On Windows, `GetVersionExW()` is used. See\\n     * [https://en.wikipedia.org/wiki/Uname#Examples](https://en.wikipedia.org/wiki/Uname#Examples) for more information.\\n     * @since v0.3.3\\n     */\\n    function release(): string;\\n    /**\\n     * Returns an object containing network interfaces that have been assigned a\\n     * network address.\\n     *\\n     * Each key on the returned object identifies a network interface. The associated\\n     * value is an array of objects that each describe an assigned network address.\\n     *\\n     * The properties available on the assigned network address object include:\\n     *\\n     * ```js\\n     * {\\n     *   lo: [\\n     *     {\\n     *       address: '127.0.0.1',\\n     *       netmask: '255.0.0.0',\\n     *       family: 'IPv4',\\n     *       mac: '00:00:00:00:00:00',\\n     *       internal: true,\\n     *       cidr: '127.0.0.1/8'\\n     *     },\\n     *     {\\n     *       address: '::1',\\n     *       netmask: 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff',\\n     *       family: 'IPv6',\\n     *       mac: '00:00:00:00:00:00',\\n     *       scopeid: 0,\\n     *       internal: true,\\n     *       cidr: '::1/128'\\n     *     }\\n     *   ],\\n     *   eth0: [\\n     *     {\\n     *       address: '192.168.1.108',\\n     *       netmask: '255.255.255.0',\\n     *       family: 'IPv4',\\n     *       mac: '01:02:03:0a:0b:0c',\\n     *       internal: false,\\n     *       cidr: '192.168.1.108/24'\\n     *     },\\n     *     {\\n     *       address: 'fe80::a00:27ff:fe4e:66a1',\\n     *       netmask: 'ffff:ffff:ffff:ffff::',\\n     *       family: 'IPv6',\\n     *       mac: '01:02:03:0a:0b:0c',\\n     *       scopeid: 1,\\n     *       internal: false,\\n     *       cidr: 'fe80::a00:27ff:fe4e:66a1/64'\\n     *     }\\n     *   ]\\n     * }\\n     * ```\\n     * @since v0.6.0\\n     */\\n    function networkInterfaces(): NodeJS.Dict<NetworkInterfaceInfo[]>;\\n    /**\\n     * Returns the string path of the current user's home directory.\\n     *\\n     * On POSIX, it uses the `$HOME` environment variable if defined. Otherwise it\\n     * uses the [effective UID](https://en.wikipedia.org/wiki/User_identifier#Effective_user_ID) to look up the user's home directory.\\n     *\\n     * On Windows, it uses the `USERPROFILE` environment variable if defined.\\n     * Otherwise it uses the path to the profile directory of the current user.\\n     * @since v2.3.0\\n     */\\n    function homedir(): string;\\n    /**\\n     * Returns information about the currently effective user. On POSIX platforms,\\n     * this is typically a subset of the password file. The returned object includes\\n     * the `username`, `uid`, `gid`, `shell`, and `homedir`. On Windows, the `uid` and`gid` fields are `-1`, and `shell` is `null`.\\n     *\\n     * The value of `homedir` returned by `os.userInfo()` is provided by the operating\\n     * system. This differs from the result of `os.homedir()`, which queries\\n     * environment variables for the home directory before falling back to the\\n     * operating system response.\\n     *\\n     * Throws a `SystemError` if a user has no `username` or `homedir`.\\n     * @since v6.0.0\\n     */\\n    function userInfo(options: { encoding: 'buffer' }): UserInfo<Buffer>;\\n    function userInfo(options?: { encoding: BufferEncoding }): UserInfo<string>;\\n    type SignalConstants = {\\n        [key in NodeJS.Signals]: number;\\n    };\\n    namespace constants {\\n        const UV_UDP_REUSEADDR: number;\\n        namespace signals {}\\n        const signals: SignalConstants;\\n        namespace errno {\\n            const E2BIG: number;\\n            const EACCES: number;\\n            const EADDRINUSE: number;\\n            const EADDRNOTAVAIL: number;\\n            const EAFNOSUPPORT: number;\\n            const EAGAIN: number;\\n            const EALREADY: number;\\n            const EBADF: number;\\n            const EBADMSG: number;\\n            const EBUSY: number;\\n            const ECANCELED: number;\\n            const ECHILD: number;\\n            const ECONNABORTED: number;\\n            const ECONNREFUSED: number;\\n            const ECONNRESET: number;\\n            const EDEADLK: number;\\n            const EDESTADDRREQ: number;\\n            const EDOM: number;\\n            const EDQUOT: number;\\n            const EEXIST: number;\\n            const EFAULT: number;\\n            const EFBIG: number;\\n            const EHOSTUNREACH: number;\\n            const EIDRM: number;\\n            const EILSEQ: number;\\n            const EINPROGRESS: number;\\n            const EINTR: number;\\n            const EINVAL: number;\\n            const EIO: number;\\n            const EISCONN: number;\\n            const EISDIR: number;\\n            const ELOOP: number;\\n            const EMFILE: number;\\n            const EMLINK: number;\\n            const EMSGSIZE: number;\\n            const EMULTIHOP: number;\\n            const ENAMETOOLONG: number;\\n            const ENETDOWN: number;\\n            const ENETRESET: number;\\n            const ENETUNREACH: number;\\n            const ENFILE: number;\\n            const ENOBUFS: number;\\n            const ENODATA: number;\\n            const ENODEV: number;\\n            const ENOENT: number;\\n            const ENOEXEC: number;\\n            const ENOLCK: number;\\n            const ENOLINK: number;\\n            const ENOMEM: number;\\n            const ENOMSG: number;\\n            const ENOPROTOOPT: number;\\n            const ENOSPC: number;\\n            const ENOSR: number;\\n            const ENOSTR: number;\\n            const ENOSYS: number;\\n            const ENOTCONN: number;\\n            const ENOTDIR: number;\\n            const ENOTEMPTY: number;\\n            const ENOTSOCK: number;\\n            const ENOTSUP: number;\\n            const ENOTTY: number;\\n            const ENXIO: number;\\n            const EOPNOTSUPP: number;\\n            const EOVERFLOW: number;\\n            const EPERM: number;\\n            const EPIPE: number;\\n            const EPROTO: number;\\n            const EPROTONOSUPPORT: number;\\n            const EPROTOTYPE: number;\\n            const ERANGE: number;\\n            const EROFS: number;\\n            const ESPIPE: number;\\n            const ESRCH: number;\\n            const ESTALE: number;\\n            const ETIME: number;\\n            const ETIMEDOUT: number;\\n            const ETXTBSY: number;\\n            const EWOULDBLOCK: number;\\n            const EXDEV: number;\\n            const WSAEINTR: number;\\n            const WSAEBADF: number;\\n            const WSAEACCES: number;\\n            const WSAEFAULT: number;\\n            const WSAEINVAL: number;\\n            const WSAEMFILE: number;\\n            const WSAEWOULDBLOCK: number;\\n            const WSAEINPROGRESS: number;\\n            const WSAEALREADY: number;\\n            const WSAENOTSOCK: number;\\n            const WSAEDESTADDRREQ: number;\\n            const WSAEMSGSIZE: number;\\n            const WSAEPROTOTYPE: number;\\n            const WSAENOPROTOOPT: number;\\n            const WSAEPROTONOSUPPORT: number;\\n            const WSAESOCKTNOSUPPORT: number;\\n            const WSAEOPNOTSUPP: number;\\n            const WSAEPFNOSUPPORT: number;\\n            const WSAEAFNOSUPPORT: number;\\n            const WSAEADDRINUSE: number;\\n            const WSAEADDRNOTAVAIL: number;\\n            const WSAENETDOWN: number;\\n            const WSAENETUNREACH: number;\\n            const WSAENETRESET: number;\\n            const WSAECONNABORTED: number;\\n            const WSAECONNRESET: number;\\n            const WSAENOBUFS: number;\\n            const WSAEISCONN: number;\\n            const WSAENOTCONN: number;\\n            const WSAESHUTDOWN: number;\\n            const WSAETOOMANYREFS: number;\\n            const WSAETIMEDOUT: number;\\n            const WSAECONNREFUSED: number;\\n            const WSAELOOP: number;\\n            const WSAENAMETOOLONG: number;\\n            const WSAEHOSTDOWN: number;\\n            const WSAEHOSTUNREACH: number;\\n            const WSAENOTEMPTY: number;\\n            const WSAEPROCLIM: number;\\n            const WSAEUSERS: number;\\n            const WSAEDQUOT: number;\\n            const WSAESTALE: number;\\n            const WSAEREMOTE: number;\\n            const WSASYSNOTREADY: number;\\n            const WSAVERNOTSUPPORTED: number;\\n            const WSANOTINITIALISED: number;\\n            const WSAEDISCON: number;\\n            const WSAENOMORE: number;\\n            const WSAECANCELLED: number;\\n            const WSAEINVALIDPROCTABLE: number;\\n            const WSAEINVALIDPROVIDER: number;\\n            const WSAEPROVIDERFAILEDINIT: number;\\n            const WSASYSCALLFAILURE: number;\\n            const WSASERVICE_NOT_FOUND: number;\\n            const WSATYPE_NOT_FOUND: number;\\n            const WSA_E_NO_MORE: number;\\n            const WSA_E_CANCELLED: number;\\n            const WSAEREFUSED: number;\\n        }\\n        namespace priority {\\n            const PRIORITY_LOW: number;\\n            const PRIORITY_BELOW_NORMAL: number;\\n            const PRIORITY_NORMAL: number;\\n            const PRIORITY_ABOVE_NORMAL: number;\\n            const PRIORITY_HIGH: number;\\n            const PRIORITY_HIGHEST: number;\\n        }\\n    }\\n    const devNull: string;\\n    const EOL: string;\\n    /**\\n     * Returns the operating system CPU architecture for which the Node.js binary was\\n     * compiled. Possible values are `'arm'`, `'arm64'`, `'ia32'`, `'mips'`,`'mipsel'`, `'ppc'`, `'ppc64'`, `'s390'`, `'s390x'`, and `'x64'`.\\n     *\\n     * The return value is equivalent to `process.arch`.\\n     * @since v0.5.0\\n     */\\n    function arch(): string;\\n    /**\\n     * Returns a string identifying the kernel version.\\n     *\\n     * On POSIX systems, the operating system release is determined by calling [`uname(3)`](https://linux.die.net/man/3/uname). On Windows, `RtlGetVersion()` is used, and if it is not\\n     * available, `GetVersionExW()` will be used. See [https://en.wikipedia.org/wiki/Uname#Examples](https://en.wikipedia.org/wiki/Uname#Examples) for more information.\\n     * @since v13.11.0, v12.17.0\\n     */\\n    function version(): string;\\n    /**\\n     * Returns a string identifying the operating system platform for which\\n     * the Node.js binary was compiled. The value is set at compile time.\\n     * Possible values are `'aix'`, `'darwin'`, `'freebsd'`,`'linux'`,`'openbsd'`, `'sunos'`, and `'win32'`.\\n     *\\n     * The return value is equivalent to `process.platform`.\\n     *\\n     * The value `'android'` may also be returned if Node.js is built on the Android\\n     * operating system. [Android support is experimental](https://github.com/nodejs/node/blob/HEAD/BUILDING.md#androidandroid-based-devices-eg-firefox-os).\\n     * @since v0.5.0\\n     */\\n    function platform(): NodeJS.Platform;\\n    /**\\n     * Returns the machine type as a string, such as arm, aarch64, mips, mips64, ppc64, ppc64le, s390, s390x, i386, i686, x86_64.\\n     *\\n     * On POSIX systems, the machine type is determined by calling [`uname(3)`](https://linux.die.net/man/3/uname).\\n     * On Windows, `RtlGetVersion()` is used, and if it is not available, `GetVersionExW()` will be used.\\n     * See [https://en.wikipedia.org/wiki/Uname#Examples](https://en.wikipedia.org/wiki/Uname#Examples) for more information.\\n     * @since v18.9.0\\n     */\\n    function machine(): string;\\n    /**\\n     * Returns the operating system's default directory for temporary files as a\\n     * string.\\n     * @since v0.9.9\\n     */\\n    function tmpdir(): string;\\n    /**\\n     * Returns a string identifying the endianness of the CPU for which the Node.js\\n     * binary was compiled.\\n     *\\n     * Possible values are `'BE'` for big endian and `'LE'` for little endian.\\n     * @since v0.9.4\\n     */\\n    function endianness(): 'BE' | 'LE';\\n    /**\\n     * Returns the scheduling priority for the process specified by `pid`. If `pid` is\\n     * not provided or is `0`, the priority of the current process is returned.\\n     * @since v10.10.0\\n     * @param [pid=0] The process ID to retrieve scheduling priority for.\\n     */\\n    function getPriority(pid?: number): number;\\n    /**\\n     * Attempts to set the scheduling priority for the process specified by `pid`. If`pid` is not provided or is `0`, the process ID of the current process is used.\\n     *\\n     * The `priority` input must be an integer between `-20` (high priority) and `19`(low priority). Due to differences between Unix priority levels and Windows\\n     * priority classes, `priority` is mapped to one of six priority constants in`os.constants.priority`. When retrieving a process priority level, this range\\n     * mapping may cause the return value to be slightly different on Windows. To avoid\\n     * confusion, set `priority` to one of the priority constants.\\n     *\\n     * On Windows, setting priority to `PRIORITY_HIGHEST` requires elevated user\\n     * privileges. Otherwise the set priority will be silently reduced to`PRIORITY_HIGH`.\\n     * @since v10.10.0\\n     * @param [pid=0] The process ID to set scheduling priority for.\\n     * @param priority The scheduling priority to assign to the process.\\n     */\\n    function setPriority(priority: number): void;\\n    function setPriority(pid: number, priority: number): void;\\n}\\ndeclare module 'node:os' {\\n    export * from 'os';\\n}\\n\",\"file:///node_modules/@types/node/path.d.ts\":\"declare module 'path/posix' {\\n    import path = require('path');\\n    export = path;\\n}\\ndeclare module 'path/win32' {\\n    import path = require('path');\\n    export = path;\\n}\\n/**\\n * The `path` module provides utilities for working with file and directory paths.\\n * It can be accessed using:\\n *\\n * ```js\\n * const path = require('path');\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/path.js)\\n */\\ndeclare module 'path' {\\n    namespace path {\\n        /**\\n         * A parsed path object generated by path.parse() or consumed by path.format().\\n         */\\n        interface ParsedPath {\\n            /**\\n             * The root of the path such as '/' or 'c:\\\\'\\n             */\\n            root: string;\\n            /**\\n             * The full directory path such as '/home/user/dir' or 'c:\\\\path\\\\dir'\\n             */\\n            dir: string;\\n            /**\\n             * The file name including extension (if any) such as 'index.html'\\n             */\\n            base: string;\\n            /**\\n             * The file extension (if any) such as '.html'\\n             */\\n            ext: string;\\n            /**\\n             * The file name without extension (if any) such as 'index'\\n             */\\n            name: string;\\n        }\\n        interface FormatInputPathObject {\\n            /**\\n             * The root of the path such as '/' or 'c:\\\\'\\n             */\\n            root?: string | undefined;\\n            /**\\n             * The full directory path such as '/home/user/dir' or 'c:\\\\path\\\\dir'\\n             */\\n            dir?: string | undefined;\\n            /**\\n             * The file name including extension (if any) such as 'index.html'\\n             */\\n            base?: string | undefined;\\n            /**\\n             * The file extension (if any) such as '.html'\\n             */\\n            ext?: string | undefined;\\n            /**\\n             * The file name without extension (if any) such as 'index'\\n             */\\n            name?: string | undefined;\\n        }\\n        interface PlatformPath {\\n            /**\\n             * Normalize a string path, reducing '..' and '.' parts.\\n             * When multiple slashes are found, they're replaced by a single one; when the path contains a trailing slash, it is preserved. On Windows backslashes are used.\\n             *\\n             * @param path string path to normalize.\\n             * @throws {TypeError} if `path` is not a string.\\n             */\\n            normalize(path: string): string;\\n            /**\\n             * Join all arguments together and normalize the resulting path.\\n             *\\n             * @param paths paths to join.\\n             * @throws {TypeError} if any of the path segments is not a string.\\n             */\\n            join(...paths: string[]): string;\\n            /**\\n             * The right-most parameter is considered {to}. Other parameters are considered an array of {from}.\\n             *\\n             * Starting from leftmost {from} parameter, resolves {to} to an absolute path.\\n             *\\n             * If {to} isn't already absolute, {from} arguments are prepended in right to left order,\\n             * until an absolute path is found. If after using all {from} paths still no absolute path is found,\\n             * the current working directory is used as well. The resulting path is normalized,\\n             * and trailing slashes are removed unless the path gets resolved to the root directory.\\n             *\\n             * @param paths A sequence of paths or path segments.\\n             * @throws {TypeError} if any of the arguments is not a string.\\n             */\\n            resolve(...paths: string[]): string;\\n            /**\\n             * Determines whether {path} is an absolute path. An absolute path will always resolve to the same location, regardless of the working directory.\\n             *\\n             * If the given {path} is a zero-length string, `false` will be returned.\\n             *\\n             * @param path path to test.\\n             * @throws {TypeError} if `path` is not a string.\\n             */\\n            isAbsolute(path: string): boolean;\\n            /**\\n             * Solve the relative path from {from} to {to} based on the current working directory.\\n             * At times we have two absolute paths, and we need to derive the relative path from one to the other. This is actually the reverse transform of path.resolve.\\n             *\\n             * @throws {TypeError} if either `from` or `to` is not a string.\\n             */\\n            relative(from: string, to: string): string;\\n            /**\\n             * Return the directory name of a path. Similar to the Unix dirname command.\\n             *\\n             * @param path the path to evaluate.\\n             * @throws {TypeError} if `path` is not a string.\\n             */\\n            dirname(path: string): string;\\n            /**\\n             * Return the last portion of a path. Similar to the Unix basename command.\\n             * Often used to extract the file name from a fully qualified path.\\n             *\\n             * @param path the path to evaluate.\\n             * @param suffix optionally, an extension to remove from the result.\\n             * @throws {TypeError} if `path` is not a string or if `ext` is given and is not a string.\\n             */\\n            basename(path: string, suffix?: string): string;\\n            /**\\n             * Return the extension of the path, from the last '.' to end of string in the last portion of the path.\\n             * If there is no '.' in the last portion of the path or the first character of it is '.', then it returns an empty string.\\n             *\\n             * @param path the path to evaluate.\\n             * @throws {TypeError} if `path` is not a string.\\n             */\\n            extname(path: string): string;\\n            /**\\n             * The platform-specific file separator. '\\\\\\\\' or '/'.\\n             */\\n            readonly sep: '\\\\\\\\' | '/';\\n            /**\\n             * The platform-specific file delimiter. ';' or ':'.\\n             */\\n            readonly delimiter: ';' | ':';\\n            /**\\n             * Returns an object from a path string - the opposite of format().\\n             *\\n             * @param path path to evaluate.\\n             * @throws {TypeError} if `path` is not a string.\\n             */\\n            parse(path: string): ParsedPath;\\n            /**\\n             * Returns a path string from an object - the opposite of parse().\\n             *\\n             * @param pathObject path to evaluate.\\n             */\\n            format(pathObject: FormatInputPathObject): string;\\n            /**\\n             * On Windows systems only, returns an equivalent namespace-prefixed path for the given path.\\n             * If path is not a string, path will be returned without modifications.\\n             * This method is meaningful only on Windows system.\\n             * On POSIX systems, the method is non-operational and always returns path without modifications.\\n             */\\n            toNamespacedPath(path: string): string;\\n            /**\\n             * Posix specific pathing.\\n             * Same as parent object on posix.\\n             */\\n            readonly posix: PlatformPath;\\n            /**\\n             * Windows specific pathing.\\n             * Same as parent object on windows\\n             */\\n            readonly win32: PlatformPath;\\n        }\\n    }\\n    const path: path.PlatformPath;\\n    export = path;\\n}\\ndeclare module 'node:path' {\\n    import path = require('path');\\n    export = path;\\n}\\ndeclare module 'node:path/posix' {\\n    import path = require('path/posix');\\n    export = path;\\n}\\ndeclare module 'node:path/win32' {\\n    import path = require('path/win32');\\n    export = path;\\n}\\n\",\"file:///node_modules/@types/node/perf_hooks.d.ts\":\"/**\\n * This module provides an implementation of a subset of the W3C [Web Performance APIs](https://w3c.github.io/perf-timing-primer/) as well as additional APIs for\\n * Node.js-specific performance measurements.\\n *\\n * Node.js supports the following [Web Performance APIs](https://w3c.github.io/perf-timing-primer/):\\n *\\n * * [High Resolution Time](https://www.w3.org/TR/hr-time-2)\\n * * [Performance Timeline](https://w3c.github.io/performance-timeline/)\\n * * [User Timing](https://www.w3.org/TR/user-timing/)\\n *\\n * ```js\\n * const { PerformanceObserver, performance } = require('perf_hooks');\\n *\\n * const obs = new PerformanceObserver((items) => {\\n *   console.log(items.getEntries()[0].duration);\\n *   performance.clearMarks();\\n * });\\n * obs.observe({ type: 'measure' });\\n * performance.measure('Start to Now');\\n *\\n * performance.mark('A');\\n * doSomeLongRunningProcess(() => {\\n *   performance.measure('A to Now', 'A');\\n *\\n *   performance.mark('B');\\n *   performance.measure('A to B', 'A', 'B');\\n * });\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/perf_hooks.js)\\n */\\ndeclare module 'perf_hooks' {\\n    import { AsyncResource } from 'node:async_hooks';\\n    type EntryType = 'node' | 'mark' | 'measure' | 'gc' | 'function' | 'http2' | 'http';\\n    interface NodeGCPerformanceDetail {\\n        /**\\n         * When `performanceEntry.entryType` is equal to 'gc', `the performance.kind` property identifies\\n         * the type of garbage collection operation that occurred.\\n         * See perf_hooks.constants for valid values.\\n         */\\n        readonly kind?: number | undefined;\\n        /**\\n         * When `performanceEntry.entryType` is equal to 'gc', the `performance.flags`\\n         * property contains additional information about garbage collection operation.\\n         * See perf_hooks.constants for valid values.\\n         */\\n        readonly flags?: number | undefined;\\n    }\\n    /**\\n     * @since v8.5.0\\n     */\\n    class PerformanceEntry {\\n        protected constructor();\\n        /**\\n         * The total number of milliseconds elapsed for this entry. This value will not\\n         * be meaningful for all Performance Entry types.\\n         * @since v8.5.0\\n         */\\n        readonly duration: number;\\n        /**\\n         * The name of the performance entry.\\n         * @since v8.5.0\\n         */\\n        readonly name: string;\\n        /**\\n         * The high resolution millisecond timestamp marking the starting time of the\\n         * Performance Entry.\\n         * @since v8.5.0\\n         */\\n        readonly startTime: number;\\n        /**\\n         * The type of the performance entry. It may be one of:\\n         *\\n         * * `'node'` (Node.js only)\\n         * * `'mark'` (available on the Web)\\n         * * `'measure'` (available on the Web)\\n         * * `'gc'` (Node.js only)\\n         * * `'function'` (Node.js only)\\n         * * `'http2'` (Node.js only)\\n         * * `'http'` (Node.js only)\\n         * @since v8.5.0\\n         */\\n        readonly entryType: EntryType;\\n        /**\\n         * Additional detail specific to the `entryType`.\\n         * @since v16.0.0\\n         */\\n        readonly detail?: NodeGCPerformanceDetail | unknown | undefined; // TODO: Narrow this based on entry type.\\n        toJSON(): any;\\n    }\\n    class PerformanceMark extends PerformanceEntry {\\n        readonly duration: 0;\\n        readonly entryType: 'mark';\\n    }\\n    class PerformanceMeasure extends PerformanceEntry {\\n        readonly entryType: 'measure';\\n    }\\n    /**\\n     * _This property is an extension by Node.js. It is not available in Web browsers._\\n     *\\n     * Provides timing details for Node.js itself. The constructor of this class\\n     * is not exposed to users.\\n     * @since v8.5.0\\n     */\\n    class PerformanceNodeTiming extends PerformanceEntry {\\n        /**\\n         * The high resolution millisecond timestamp at which the Node.js process\\n         * completed bootstrapping. If bootstrapping has not yet finished, the property\\n         * has the value of -1.\\n         * @since v8.5.0\\n         */\\n        readonly bootstrapComplete: number;\\n        /**\\n         * The high resolution millisecond timestamp at which the Node.js environment was\\n         * initialized.\\n         * @since v8.5.0\\n         */\\n        readonly environment: number;\\n        /**\\n         * The high resolution millisecond timestamp of the amount of time the event loop\\n         * has been idle within the event loop's event provider (e.g. `epoll_wait`). This\\n         * does not take CPU usage into consideration. If the event loop has not yet\\n         * started (e.g., in the first tick of the main script), the property has the\\n         * value of 0.\\n         * @since v14.10.0, v12.19.0\\n         */\\n        readonly idleTime: number;\\n        /**\\n         * The high resolution millisecond timestamp at which the Node.js event loop\\n         * exited. If the event loop has not yet exited, the property has the value of -1\\\\.\\n         * It can only have a value of not -1 in a handler of the `'exit'` event.\\n         * @since v8.5.0\\n         */\\n        readonly loopExit: number;\\n        /**\\n         * The high resolution millisecond timestamp at which the Node.js event loop\\n         * started. If the event loop has not yet started (e.g., in the first tick of the\\n         * main script), the property has the value of -1.\\n         * @since v8.5.0\\n         */\\n        readonly loopStart: number;\\n        /**\\n         * The high resolution millisecond timestamp at which the V8 platform was\\n         * initialized.\\n         * @since v8.5.0\\n         */\\n        readonly v8Start: number;\\n    }\\n    interface EventLoopUtilization {\\n        idle: number;\\n        active: number;\\n        utilization: number;\\n    }\\n    /**\\n     * @param util1 The result of a previous call to eventLoopUtilization()\\n     * @param util2 The result of a previous call to eventLoopUtilization() prior to util1\\n     */\\n    type EventLoopUtilityFunction = (util1?: EventLoopUtilization, util2?: EventLoopUtilization) => EventLoopUtilization;\\n    interface MarkOptions {\\n        /**\\n         * Additional optional detail to include with the mark.\\n         */\\n        detail?: unknown | undefined;\\n        /**\\n         * An optional timestamp to be used as the mark time.\\n         * @default `performance.now()`.\\n         */\\n        startTime?: number | undefined;\\n    }\\n    interface MeasureOptions {\\n        /**\\n         * Additional optional detail to include with the mark.\\n         */\\n        detail?: unknown | undefined;\\n        /**\\n         * Duration between start and end times.\\n         */\\n        duration?: number | undefined;\\n        /**\\n         * Timestamp to be used as the end time, or a string identifying a previously recorded mark.\\n         */\\n        end?: number | string | undefined;\\n        /**\\n         * Timestamp to be used as the start time, or a string identifying a previously recorded mark.\\n         */\\n        start?: number | string | undefined;\\n    }\\n    interface TimerifyOptions {\\n        /**\\n         * A histogram object created using\\n         * `perf_hooks.createHistogram()` that will record runtime durations in\\n         * nanoseconds.\\n         */\\n        histogram?: RecordableHistogram | undefined;\\n    }\\n    interface Performance {\\n        /**\\n         * If name is not provided, removes all PerformanceMark objects from the Performance Timeline.\\n         * If name is provided, removes only the named mark.\\n         * @param name\\n         */\\n        clearMarks(name?: string): void;\\n        /**\\n         * If name is not provided, removes all PerformanceMeasure objects from the Performance Timeline.\\n         * If name is provided, removes only the named measure.\\n         * @param name\\n         * @since v16.7.0\\n         */\\n        clearMeasures(name?: string): void;\\n        /**\\n         * Returns a list of `PerformanceEntry` objects in chronological order with respect to `performanceEntry.startTime`.\\n         * If you are only interested in performance entries of certain types or that have certain names, see\\n         * `performance.getEntriesByType()` and `performance.getEntriesByName()`.\\n         * @since v16.7.0\\n         */\\n        getEntries(): PerformanceEntry[];\\n        /**\\n         * Returns a list of `PerformanceEntry` objects in chronological order with respect to `performanceEntry.startTime`\\n         * whose `performanceEntry.name` is equal to `name`, and optionally, whose `performanceEntry.entryType` is equal to `type`.\\n         * @param name\\n         * @param type\\n         * @since v16.7.0\\n         */\\n        getEntriesByName(name: string, type?: EntryType): PerformanceEntry[];\\n        /**\\n         * Returns a list of `PerformanceEntry` objects in chronological order with respect to `performanceEntry.startTime`\\n         * whose `performanceEntry.entryType` is equal to `type`.\\n         * @param type\\n         * @since v16.7.0\\n         */\\n        getEntriesByType(type: EntryType): PerformanceEntry[];\\n        /**\\n         * Creates a new PerformanceMark entry in the Performance Timeline.\\n         * A PerformanceMark is a subclass of PerformanceEntry whose performanceEntry.entryType is always 'mark',\\n         * and whose performanceEntry.duration is always 0.\\n         * Performance marks are used to mark specific significant moments in the Performance Timeline.\\n         * @param name\\n         * @return The PerformanceMark entry that was created\\n         */\\n        mark(name?: string, options?: MarkOptions): PerformanceMark;\\n        /**\\n         * Creates a new PerformanceMeasure entry in the Performance Timeline.\\n         * A PerformanceMeasure is a subclass of PerformanceEntry whose performanceEntry.entryType is always 'measure',\\n         * and whose performanceEntry.duration measures the number of milliseconds elapsed since startMark and endMark.\\n         *\\n         * The startMark argument may identify any existing PerformanceMark in the the Performance Timeline, or may identify\\n         * any of the timestamp properties provided by the PerformanceNodeTiming class. If the named startMark does not exist,\\n         * then startMark is set to timeOrigin by default.\\n         *\\n         * The endMark argument must identify any existing PerformanceMark in the the Performance Timeline or any of the timestamp\\n         * properties provided by the PerformanceNodeTiming class. If the named endMark does not exist, an error will be thrown.\\n         * @param name\\n         * @param startMark\\n         * @param endMark\\n         * @return The PerformanceMeasure entry that was created\\n         */\\n        measure(name: string, startMark?: string, endMark?: string): PerformanceMeasure;\\n        measure(name: string, options: MeasureOptions): PerformanceMeasure;\\n        /**\\n         * An instance of the PerformanceNodeTiming class that provides performance metrics for specific Node.js operational milestones.\\n         */\\n        readonly nodeTiming: PerformanceNodeTiming;\\n        /**\\n         * @return the current high resolution millisecond timestamp\\n         */\\n        now(): number;\\n        /**\\n         * The timeOrigin specifies the high resolution millisecond timestamp from which all performance metric durations are measured.\\n         */\\n        readonly timeOrigin: number;\\n        /**\\n         * Wraps a function within a new function that measures the running time of the wrapped function.\\n         * A PerformanceObserver must be subscribed to the 'function' event type in order for the timing details to be accessed.\\n         * @param fn\\n         */\\n        timerify<T extends (...params: any[]) => any>(fn: T, options?: TimerifyOptions): T;\\n        /**\\n         * eventLoopUtilization is similar to CPU utilization except that it is calculated using high precision wall-clock time.\\n         * It represents the percentage of time the event loop has spent outside the event loop's event provider (e.g. epoll_wait).\\n         * No other CPU idle time is taken into consideration.\\n         */\\n        eventLoopUtilization: EventLoopUtilityFunction;\\n    }\\n    interface PerformanceObserverEntryList {\\n        /**\\n         * Returns a list of `PerformanceEntry` objects in chronological order\\n         * with respect to `performanceEntry.startTime`.\\n         *\\n         * ```js\\n         * const {\\n         *   performance,\\n         *   PerformanceObserver\\n         * } = require('perf_hooks');\\n         *\\n         * const obs = new PerformanceObserver((perfObserverList, observer) => {\\n         *   console.log(perfObserverList.getEntries());\\n         *\\n         *    * [\\n         *    *   PerformanceEntry {\\n         *    *     name: 'test',\\n         *    *     entryType: 'mark',\\n         *    *     startTime: 81.465639,\\n         *    *     duration: 0\\n         *    *   },\\n         *    *   PerformanceEntry {\\n         *    *     name: 'meow',\\n         *    *     entryType: 'mark',\\n         *    *     startTime: 81.860064,\\n         *    *     duration: 0\\n         *    *   }\\n         *    * ]\\n         *\\n         *\\n         *   performance.clearMarks();\\n         *   performance.clearMeasures();\\n         *   observer.disconnect();\\n         * });\\n         * obs.observe({ type: 'mark' });\\n         *\\n         * performance.mark('test');\\n         * performance.mark('meow');\\n         * ```\\n         * @since v8.5.0\\n         */\\n        getEntries(): PerformanceEntry[];\\n        /**\\n         * Returns a list of `PerformanceEntry` objects in chronological order\\n         * with respect to `performanceEntry.startTime` whose `performanceEntry.name` is\\n         * equal to `name`, and optionally, whose `performanceEntry.entryType` is equal to`type`.\\n         *\\n         * ```js\\n         * const {\\n         *   performance,\\n         *   PerformanceObserver\\n         * } = require('perf_hooks');\\n         *\\n         * const obs = new PerformanceObserver((perfObserverList, observer) => {\\n         *   console.log(perfObserverList.getEntriesByName('meow'));\\n         *\\n         *    * [\\n         *    *   PerformanceEntry {\\n         *    *     name: 'meow',\\n         *    *     entryType: 'mark',\\n         *    *     startTime: 98.545991,\\n         *    *     duration: 0\\n         *    *   }\\n         *    * ]\\n         *\\n         *   console.log(perfObserverList.getEntriesByName('nope')); // []\\n         *\\n         *   console.log(perfObserverList.getEntriesByName('test', 'mark'));\\n         *\\n         *    * [\\n         *    *   PerformanceEntry {\\n         *    *     name: 'test',\\n         *    *     entryType: 'mark',\\n         *    *     startTime: 63.518931,\\n         *    *     duration: 0\\n         *    *   }\\n         *    * ]\\n         *\\n         *   console.log(perfObserverList.getEntriesByName('test', 'measure')); // []\\n         *\\n         *   performance.clearMarks();\\n         *   performance.clearMeasures();\\n         *   observer.disconnect();\\n         * });\\n         * obs.observe({ entryTypes: ['mark', 'measure'] });\\n         *\\n         * performance.mark('test');\\n         * performance.mark('meow');\\n         * ```\\n         * @since v8.5.0\\n         */\\n        getEntriesByName(name: string, type?: EntryType): PerformanceEntry[];\\n        /**\\n         * Returns a list of `PerformanceEntry` objects in chronological order\\n         * with respect to `performanceEntry.startTime` whose `performanceEntry.entryType`is equal to `type`.\\n         *\\n         * ```js\\n         * const {\\n         *   performance,\\n         *   PerformanceObserver\\n         * } = require('perf_hooks');\\n         *\\n         * const obs = new PerformanceObserver((perfObserverList, observer) => {\\n         *   console.log(perfObserverList.getEntriesByType('mark'));\\n         *\\n         *    * [\\n         *    *   PerformanceEntry {\\n         *    *     name: 'test',\\n         *    *     entryType: 'mark',\\n         *    *     startTime: 55.897834,\\n         *    *     duration: 0\\n         *    *   },\\n         *    *   PerformanceEntry {\\n         *    *     name: 'meow',\\n         *    *     entryType: 'mark',\\n         *    *     startTime: 56.350146,\\n         *    *     duration: 0\\n         *    *   }\\n         *    * ]\\n         *\\n         *   performance.clearMarks();\\n         *   performance.clearMeasures();\\n         *   observer.disconnect();\\n         * });\\n         * obs.observe({ type: 'mark' });\\n         *\\n         * performance.mark('test');\\n         * performance.mark('meow');\\n         * ```\\n         * @since v8.5.0\\n         */\\n        getEntriesByType(type: EntryType): PerformanceEntry[];\\n    }\\n    type PerformanceObserverCallback = (list: PerformanceObserverEntryList, observer: PerformanceObserver) => void;\\n    class PerformanceObserver extends AsyncResource {\\n        constructor(callback: PerformanceObserverCallback);\\n        /**\\n         * Disconnects the `PerformanceObserver` instance from all notifications.\\n         * @since v8.5.0\\n         */\\n        disconnect(): void;\\n        /**\\n         * Subscribes the `PerformanceObserver` instance to notifications of new `PerformanceEntry` instances identified either by `options.entryTypes`or `options.type`:\\n         *\\n         * ```js\\n         * const {\\n         *   performance,\\n         *   PerformanceObserver\\n         * } = require('perf_hooks');\\n         *\\n         * const obs = new PerformanceObserver((list, observer) => {\\n         *   // Called once asynchronously. `list` contains three items.\\n         * });\\n         * obs.observe({ type: 'mark' });\\n         *\\n         * for (let n = 0; n < 3; n++)\\n         *   performance.mark(`test${n}`);\\n         * ```\\n         * @since v8.5.0\\n         */\\n        observe(\\n            options:\\n                | {\\n                      entryTypes: ReadonlyArray<EntryType>;\\n                      buffered?: boolean | undefined;\\n                  }\\n                | {\\n                      type: EntryType;\\n                      buffered?: boolean | undefined;\\n                  }\\n        ): void;\\n    }\\n    namespace constants {\\n        const NODE_PERFORMANCE_GC_MAJOR: number;\\n        const NODE_PERFORMANCE_GC_MINOR: number;\\n        const NODE_PERFORMANCE_GC_INCREMENTAL: number;\\n        const NODE_PERFORMANCE_GC_WEAKCB: number;\\n        const NODE_PERFORMANCE_GC_FLAGS_NO: number;\\n        const NODE_PERFORMANCE_GC_FLAGS_CONSTRUCT_RETAINED: number;\\n        const NODE_PERFORMANCE_GC_FLAGS_FORCED: number;\\n        const NODE_PERFORMANCE_GC_FLAGS_SYNCHRONOUS_PHANTOM_PROCESSING: number;\\n        const NODE_PERFORMANCE_GC_FLAGS_ALL_AVAILABLE_GARBAGE: number;\\n        const NODE_PERFORMANCE_GC_FLAGS_ALL_EXTERNAL_MEMORY: number;\\n        const NODE_PERFORMANCE_GC_FLAGS_SCHEDULE_IDLE: number;\\n    }\\n    const performance: Performance;\\n    interface EventLoopMonitorOptions {\\n        /**\\n         * The sampling rate in milliseconds.\\n         * Must be greater than zero.\\n         * @default 10\\n         */\\n        resolution?: number | undefined;\\n    }\\n    interface Histogram {\\n        /**\\n         * Returns a `Map` object detailing the accumulated percentile distribution.\\n         * @since v11.10.0\\n         */\\n        readonly percentiles: Map<number, number>;\\n        /**\\n         * The number of times the event loop delay exceeded the maximum 1 hour event\\n         * loop delay threshold.\\n         * @since v11.10.0\\n         */\\n        readonly exceeds: number;\\n        /**\\n         * The minimum recorded event loop delay.\\n         * @since v11.10.0\\n         */\\n        readonly min: number;\\n        /**\\n         * The maximum recorded event loop delay.\\n         * @since v11.10.0\\n         */\\n        readonly max: number;\\n        /**\\n         * The mean of the recorded event loop delays.\\n         * @since v11.10.0\\n         */\\n        readonly mean: number;\\n        /**\\n         * The standard deviation of the recorded event loop delays.\\n         * @since v11.10.0\\n         */\\n        readonly stddev: number;\\n        /**\\n         * Resets the collected histogram data.\\n         * @since v11.10.0\\n         */\\n        reset(): void;\\n        /**\\n         * Returns the value at the given percentile.\\n         * @since v11.10.0\\n         * @param percentile A percentile value in the range (0, 100].\\n         */\\n        percentile(percentile: number): number;\\n    }\\n    interface IntervalHistogram extends Histogram {\\n        /**\\n         * Enables the update interval timer. Returns `true` if the timer was\\n         * started, `false` if it was already started.\\n         * @since v11.10.0\\n         */\\n        enable(): boolean;\\n        /**\\n         * Disables the update interval timer. Returns `true` if the timer was\\n         * stopped, `false` if it was already stopped.\\n         * @since v11.10.0\\n         */\\n        disable(): boolean;\\n    }\\n    interface RecordableHistogram extends Histogram {\\n        /**\\n         * @since v15.9.0, v14.18.0\\n         * @param val The amount to record in the histogram.\\n         */\\n        record(val: number | bigint): void;\\n        /**\\n         * Calculates the amount of time (in nanoseconds) that has passed since the\\n         * previous call to `recordDelta()` and records that amount in the histogram.\\n         *\\n         * ## Examples\\n         * @since v15.9.0, v14.18.0\\n         */\\n        recordDelta(): void;\\n        /**\\n         * Adds the values from other to this histogram.\\n         * @since v17.4.0, v16.14.0\\n         * @param other Recordable Histogram to combine with\\n         */\\n         add(other: RecordableHistogram): void;\\n    }\\n    /**\\n     * _This property is an extension by Node.js. It is not available in Web browsers._\\n     *\\n     * Creates an `IntervalHistogram` object that samples and reports the event loop\\n     * delay over time. The delays will be reported in nanoseconds.\\n     *\\n     * Using a timer to detect approximate event loop delay works because the\\n     * execution of timers is tied specifically to the lifecycle of the libuv\\n     * event loop. That is, a delay in the loop will cause a delay in the execution\\n     * of the timer, and those delays are specifically what this API is intended to\\n     * detect.\\n     *\\n     * ```js\\n     * const { monitorEventLoopDelay } = require('perf_hooks');\\n     * const h = monitorEventLoopDelay({ resolution: 20 });\\n     * h.enable();\\n     * // Do something.\\n     * h.disable();\\n     * console.log(h.min);\\n     * console.log(h.max);\\n     * console.log(h.mean);\\n     * console.log(h.stddev);\\n     * console.log(h.percentiles);\\n     * console.log(h.percentile(50));\\n     * console.log(h.percentile(99));\\n     * ```\\n     * @since v11.10.0\\n     */\\n    function monitorEventLoopDelay(options?: EventLoopMonitorOptions): IntervalHistogram;\\n    interface CreateHistogramOptions {\\n        /**\\n         * The minimum recordable value. Must be an integer value greater than 0.\\n         * @default 1\\n         */\\n        min?: number | bigint | undefined;\\n        /**\\n         * The maximum recordable value. Must be an integer value greater than min.\\n         * @default Number.MAX_SAFE_INTEGER\\n         */\\n        max?: number | bigint | undefined;\\n        /**\\n         * The number of accuracy digits. Must be a number between 1 and 5.\\n         * @default 3\\n         */\\n        figures?: number | undefined;\\n    }\\n    /**\\n     * Returns a `RecordableHistogram`.\\n     * @since v15.9.0, v14.18.0\\n     */\\n    function createHistogram(options?: CreateHistogramOptions): RecordableHistogram;\\n\\n    import { performance as _performance } from 'perf_hooks';\\n    global {\\n        /**\\n         * `performance` is a global reference for `require('perf_hooks').performance`\\n         * https://nodejs.org/api/globals.html#performance\\n         * @since v16.0.0\\n         */\\n        var performance: typeof globalThis extends {\\n            onmessage: any;\\n            performance: infer T;\\n        }\\n            ? T\\n            : typeof _performance;\\n    }\\n}\\ndeclare module 'node:perf_hooks' {\\n    export * from 'perf_hooks';\\n}\\n\",\"file:///node_modules/@types/node/process.d.ts\":\"declare module 'process' {\\n    import * as tty from 'node:tty';\\n    import { Worker } from 'node:worker_threads';\\n    global {\\n        var process: NodeJS.Process;\\n        namespace NodeJS {\\n            // this namespace merge is here because these are specifically used\\n            // as the type for process.stdin, process.stdout, and process.stderr.\\n            // they can't live in tty.d.ts because we need to disambiguate the imported name.\\n            interface ReadStream extends tty.ReadStream {}\\n            interface WriteStream extends tty.WriteStream {}\\n            interface MemoryUsageFn {\\n                /**\\n                 * The `process.memoryUsage()` method iterate over each page to gather informations about memory\\n                 * usage which can be slow depending on the program memory allocations.\\n                 */\\n                (): MemoryUsage;\\n                /**\\n                 * method returns an integer representing the Resident Set Size (RSS) in bytes.\\n                 */\\n                rss(): number;\\n            }\\n            interface MemoryUsage {\\n                rss: number;\\n                heapTotal: number;\\n                heapUsed: number;\\n                external: number;\\n                arrayBuffers: number;\\n            }\\n            interface CpuUsage {\\n                user: number;\\n                system: number;\\n            }\\n            interface ProcessRelease {\\n                name: string;\\n                sourceUrl?: string | undefined;\\n                headersUrl?: string | undefined;\\n                libUrl?: string | undefined;\\n                lts?: string | undefined;\\n            }\\n            interface ProcessVersions extends Dict<string> {\\n                http_parser: string;\\n                node: string;\\n                v8: string;\\n                ares: string;\\n                uv: string;\\n                zlib: string;\\n                modules: string;\\n                openssl: string;\\n            }\\n            type Platform = 'aix' | 'android' | 'darwin' | 'freebsd' | 'haiku' | 'linux' | 'openbsd' | 'sunos' | 'win32' | 'cygwin' | 'netbsd';\\n            type Architecture = 'arm' | 'arm64' | 'ia32' | 'mips' | 'mipsel' | 'ppc' | 'ppc64' | 's390' | 's390x' | 'x64';\\n            type Signals =\\n                | 'SIGABRT'\\n                | 'SIGALRM'\\n                | 'SIGBUS'\\n                | 'SIGCHLD'\\n                | 'SIGCONT'\\n                | 'SIGFPE'\\n                | 'SIGHUP'\\n                | 'SIGILL'\\n                | 'SIGINT'\\n                | 'SIGIO'\\n                | 'SIGIOT'\\n                | 'SIGKILL'\\n                | 'SIGPIPE'\\n                | 'SIGPOLL'\\n                | 'SIGPROF'\\n                | 'SIGPWR'\\n                | 'SIGQUIT'\\n                | 'SIGSEGV'\\n                | 'SIGSTKFLT'\\n                | 'SIGSTOP'\\n                | 'SIGSYS'\\n                | 'SIGTERM'\\n                | 'SIGTRAP'\\n                | 'SIGTSTP'\\n                | 'SIGTTIN'\\n                | 'SIGTTOU'\\n                | 'SIGUNUSED'\\n                | 'SIGURG'\\n                | 'SIGUSR1'\\n                | 'SIGUSR2'\\n                | 'SIGVTALRM'\\n                | 'SIGWINCH'\\n                | 'SIGXCPU'\\n                | 'SIGXFSZ'\\n                | 'SIGBREAK'\\n                | 'SIGLOST'\\n                | 'SIGINFO';\\n            type UncaughtExceptionOrigin = 'uncaughtException' | 'unhandledRejection';\\n            type MultipleResolveType = 'resolve' | 'reject';\\n            type BeforeExitListener = (code: number) => void;\\n            type DisconnectListener = () => void;\\n            type ExitListener = (code: number) => void;\\n            type RejectionHandledListener = (promise: Promise<unknown>) => void;\\n            type UncaughtExceptionListener = (error: Error, origin: UncaughtExceptionOrigin) => void;\\n            /**\\n             * Most of the time the unhandledRejection will be an Error, but this should not be relied upon\\n             * as *anything* can be thrown/rejected, it is therefore unsafe to assume that the value is an Error.\\n             */\\n            type UnhandledRejectionListener = (reason: unknown, promise: Promise<unknown>) => void;\\n            type WarningListener = (warning: Error) => void;\\n            type MessageListener = (message: unknown, sendHandle: unknown) => void;\\n            type SignalsListener = (signal: Signals) => void;\\n            type MultipleResolveListener = (type: MultipleResolveType, promise: Promise<unknown>, value: unknown) => void;\\n            type WorkerListener = (worker: Worker) => void;\\n            interface Socket extends ReadWriteStream {\\n                isTTY?: true | undefined;\\n            }\\n            // Alias for compatibility\\n            interface ProcessEnv extends Dict<string> {\\n                /**\\n                 * Can be used to change the default timezone at runtime\\n                 */\\n                TZ?: string;\\n            }\\n            interface HRTime {\\n                (time?: [number, number]): [number, number];\\n                bigint(): bigint;\\n            }\\n            interface ProcessReport {\\n                /**\\n                 * Directory where the report is written.\\n                 * working directory of the Node.js process.\\n                 * @default '' indicating that reports are written to the current\\n                 */\\n                directory: string;\\n                /**\\n                 * Filename where the report is written.\\n                 * The default value is the empty string.\\n                 * @default '' the output filename will be comprised of a timestamp,\\n                 * PID, and sequence number.\\n                 */\\n                filename: string;\\n                /**\\n                 * Returns a JSON-formatted diagnostic report for the running process.\\n                 * The report's JavaScript stack trace is taken from err, if present.\\n                 */\\n                getReport(err?: Error): string;\\n                /**\\n                 * If true, a diagnostic report is generated on fatal errors,\\n                 * such as out of memory errors or failed C++ assertions.\\n                 * @default false\\n                 */\\n                reportOnFatalError: boolean;\\n                /**\\n                 * If true, a diagnostic report is generated when the process\\n                 * receives the signal specified by process.report.signal.\\n                 * @default false\\n                 */\\n                reportOnSignal: boolean;\\n                /**\\n                 * If true, a diagnostic report is generated on uncaught exception.\\n                 * @default false\\n                 */\\n                reportOnUncaughtException: boolean;\\n                /**\\n                 * The signal used to trigger the creation of a diagnostic report.\\n                 * @default 'SIGUSR2'\\n                 */\\n                signal: Signals;\\n                /**\\n                 * Writes a diagnostic report to a file. If filename is not provided, the default filename\\n                 * includes the date, time, PID, and a sequence number.\\n                 * The report's JavaScript stack trace is taken from err, if present.\\n                 *\\n                 * @param fileName Name of the file where the report is written.\\n                 * This should be a relative path, that will be appended to the directory specified in\\n                 * `process.report.directory`, or the current working directory of the Node.js process,\\n                 * if unspecified.\\n                 * @param error A custom error used for reporting the JavaScript stack.\\n                 * @return Filename of the generated report.\\n                 */\\n                writeReport(fileName?: string): string;\\n                writeReport(error?: Error): string;\\n                writeReport(fileName?: string, err?: Error): string;\\n            }\\n            interface ResourceUsage {\\n                fsRead: number;\\n                fsWrite: number;\\n                involuntaryContextSwitches: number;\\n                ipcReceived: number;\\n                ipcSent: number;\\n                majorPageFault: number;\\n                maxRSS: number;\\n                minorPageFault: number;\\n                sharedMemorySize: number;\\n                signalsCount: number;\\n                swappedOut: number;\\n                systemCPUTime: number;\\n                unsharedDataSize: number;\\n                unsharedStackSize: number;\\n                userCPUTime: number;\\n                voluntaryContextSwitches: number;\\n            }\\n            interface EmitWarningOptions {\\n                /**\\n                 * When `warning` is a `string`, `type` is the name to use for the _type_ of warning being emitted.\\n                 *\\n                 * @default 'Warning'\\n                 */\\n                type?: string | undefined;\\n                /**\\n                 * A unique identifier for the warning instance being emitted.\\n                 */\\n                code?: string | undefined;\\n                /**\\n                 * When `warning` is a `string`, `ctor` is an optional function used to limit the generated stack trace.\\n                 *\\n                 * @default process.emitWarning\\n                 */\\n                ctor?: Function | undefined;\\n                /**\\n                 * Additional text to include with the error.\\n                 */\\n                detail?: string | undefined;\\n            }\\n            interface ProcessConfig {\\n                readonly target_defaults: {\\n                    readonly cflags: any[];\\n                    readonly default_configuration: string;\\n                    readonly defines: string[];\\n                    readonly include_dirs: string[];\\n                    readonly libraries: string[];\\n                };\\n                readonly variables: {\\n                    readonly clang: number;\\n                    readonly host_arch: string;\\n                    readonly node_install_npm: boolean;\\n                    readonly node_install_waf: boolean;\\n                    readonly node_prefix: string;\\n                    readonly node_shared_openssl: boolean;\\n                    readonly node_shared_v8: boolean;\\n                    readonly node_shared_zlib: boolean;\\n                    readonly node_use_dtrace: boolean;\\n                    readonly node_use_etw: boolean;\\n                    readonly node_use_openssl: boolean;\\n                    readonly target_arch: string;\\n                    readonly v8_no_strict_aliasing: number;\\n                    readonly v8_use_snapshot: boolean;\\n                    readonly visibility: string;\\n                };\\n            }\\n            interface Process extends EventEmitter {\\n                /**\\n                 * The `process.stdout` property returns a stream connected to`stdout` (fd `1`). It is a `net.Socket` (which is a `Duplex` stream) unless fd `1` refers to a file, in which case it is\\n                 * a `Writable` stream.\\n                 *\\n                 * For example, to copy `process.stdin` to `process.stdout`:\\n                 *\\n                 * ```js\\n                 * import { stdin, stdout } from 'process';\\n                 *\\n                 * stdin.pipe(stdout);\\n                 * ```\\n                 *\\n                 * `process.stdout` differs from other Node.js streams in important ways. See `note on process I/O` for more information.\\n                 */\\n                stdout: WriteStream & {\\n                    fd: 1;\\n                };\\n                /**\\n                 * The `process.stderr` property returns a stream connected to`stderr` (fd `2`). It is a `net.Socket` (which is a `Duplex` stream) unless fd `2` refers to a file, in which case it is\\n                 * a `Writable` stream.\\n                 *\\n                 * `process.stderr` differs from other Node.js streams in important ways. See `note on process I/O` for more information.\\n                 */\\n                stderr: WriteStream & {\\n                    fd: 2;\\n                };\\n                /**\\n                 * The `process.stdin` property returns a stream connected to`stdin` (fd `0`). It is a `net.Socket` (which is a `Duplex` stream) unless fd `0` refers to a file, in which case it is\\n                 * a `Readable` stream.\\n                 *\\n                 * For details of how to read from `stdin` see `readable.read()`.\\n                 *\\n                 * As a `Duplex` stream, `process.stdin` can also be used in \\\"old\\\" mode that\\n                 * is compatible with scripts written for Node.js prior to v0.10\\\\.\\n                 * For more information see `Stream compatibility`.\\n                 *\\n                 * In \\\"old\\\" streams mode the `stdin` stream is paused by default, so one\\n                 * must call `process.stdin.resume()` to read from it. Note also that calling`process.stdin.resume()` itself would switch stream to \\\"old\\\" mode.\\n                 */\\n                stdin: ReadStream & {\\n                    fd: 0;\\n                };\\n                openStdin(): Socket;\\n                /**\\n                 * The `process.argv` property returns an array containing the command-line\\n                 * arguments passed when the Node.js process was launched. The first element will\\n                 * be {@link execPath}. See `process.argv0` if access to the original value\\n                 * of `argv[0]` is needed. The second element will be the path to the JavaScript\\n                 * file being executed. The remaining elements will be any additional command-line\\n                 * arguments.\\n                 *\\n                 * For example, assuming the following script for `process-args.js`:\\n                 *\\n                 * ```js\\n                 * import { argv } from 'process';\\n                 *\\n                 * // print process.argv\\n                 * argv.forEach((val, index) => {\\n                 *   console.log(`${index}: ${val}`);\\n                 * });\\n                 * ```\\n                 *\\n                 * Launching the Node.js process as:\\n                 *\\n                 * ```console\\n                 * $ node process-args.js one two=three four\\n                 * ```\\n                 *\\n                 * Would generate the output:\\n                 *\\n                 * ```text\\n                 * 0: /usr/local/bin/node\\n                 * 1: /Users/mjr/work/node/process-args.js\\n                 * 2: one\\n                 * 3: two=three\\n                 * 4: four\\n                 * ```\\n                 * @since v0.1.27\\n                 */\\n                argv: string[];\\n                /**\\n                 * The `process.argv0` property stores a read-only copy of the original value of`argv[0]` passed when Node.js starts.\\n                 *\\n                 * ```console\\n                 * $ bash -c 'exec -a customArgv0 ./node'\\n                 * > process.argv[0]\\n                 * '/Volumes/code/external/node/out/Release/node'\\n                 * > process.argv0\\n                 * 'customArgv0'\\n                 * ```\\n                 * @since v6.4.0\\n                 */\\n                argv0: string;\\n                /**\\n                 * The `process.execArgv` property returns the set of Node.js-specific command-line\\n                 * options passed when the Node.js process was launched. These options do not\\n                 * appear in the array returned by the {@link argv} property, and do not\\n                 * include the Node.js executable, the name of the script, or any options following\\n                 * the script name. These options are useful in order to spawn child processes with\\n                 * the same execution environment as the parent.\\n                 *\\n                 * ```console\\n                 * $ node --harmony script.js --version\\n                 * ```\\n                 *\\n                 * Results in `process.execArgv`:\\n                 *\\n                 * ```js\\n                 * ['--harmony']\\n                 * ```\\n                 *\\n                 * And `process.argv`:\\n                 *\\n                 * ```js\\n                 * ['/usr/local/bin/node', 'script.js', '--version']\\n                 * ```\\n                 *\\n                 * Refer to `Worker constructor` for the detailed behavior of worker\\n                 * threads with this property.\\n                 * @since v0.7.7\\n                 */\\n                execArgv: string[];\\n                /**\\n                 * The `process.execPath` property returns the absolute pathname of the executable\\n                 * that started the Node.js process. Symbolic links, if any, are resolved.\\n                 *\\n                 * ```js\\n                 * '/usr/local/bin/node'\\n                 * ```\\n                 * @since v0.1.100\\n                 */\\n                execPath: string;\\n                /**\\n                 * The `process.abort()` method causes the Node.js process to exit immediately and\\n                 * generate a core file.\\n                 *\\n                 * This feature is not available in `Worker` threads.\\n                 * @since v0.7.0\\n                 */\\n                abort(): never;\\n                /**\\n                 * The `process.chdir()` method changes the current working directory of the\\n                 * Node.js process or throws an exception if doing so fails (for instance, if\\n                 * the specified `directory` does not exist).\\n                 *\\n                 * ```js\\n                 * import { chdir, cwd } from 'process';\\n                 *\\n                 * console.log(`Starting directory: ${cwd()}`);\\n                 * try {\\n                 *   chdir('/tmp');\\n                 *   console.log(`New directory: ${cwd()}`);\\n                 * } catch (err) {\\n                 *   console.error(`chdir: ${err}`);\\n                 * }\\n                 * ```\\n                 *\\n                 * This feature is not available in `Worker` threads.\\n                 * @since v0.1.17\\n                 */\\n                chdir(directory: string): void;\\n                /**\\n                 * The `process.cwd()` method returns the current working directory of the Node.js\\n                 * process.\\n                 *\\n                 * ```js\\n                 * import { cwd } from 'process';\\n                 *\\n                 * console.log(`Current directory: ${cwd()}`);\\n                 * ```\\n                 * @since v0.1.8\\n                 */\\n                cwd(): string;\\n                /**\\n                 * The port used by the Node.js debugger when enabled.\\n                 *\\n                 * ```js\\n                 * import process from 'process';\\n                 *\\n                 * process.debugPort = 5858;\\n                 * ```\\n                 * @since v0.7.2\\n                 */\\n                debugPort: number;\\n                /**\\n                 * The `process.emitWarning()` method can be used to emit custom or application\\n                 * specific process warnings. These can be listened for by adding a handler to the `'warning'` event.\\n                 *\\n                 * ```js\\n                 * import { emitWarning } from 'process';\\n                 *\\n                 * // Emit a warning with a code and additional detail.\\n                 * emitWarning('Something happened!', {\\n                 *   code: 'MY_WARNING',\\n                 *   detail: 'This is some additional information'\\n                 * });\\n                 * // Emits:\\n                 * // (node:56338) [MY_WARNING] Warning: Something happened!\\n                 * // This is some additional information\\n                 * ```\\n                 *\\n                 * In this example, an `Error` object is generated internally by`process.emitWarning()` and passed through to the `'warning'` handler.\\n                 *\\n                 * ```js\\n                 * import process from 'process';\\n                 *\\n                 * process.on('warning', (warning) => {\\n                 *   console.warn(warning.name);    // 'Warning'\\n                 *   console.warn(warning.message); // 'Something happened!'\\n                 *   console.warn(warning.code);    // 'MY_WARNING'\\n                 *   console.warn(warning.stack);   // Stack trace\\n                 *   console.warn(warning.detail);  // 'This is some additional information'\\n                 * });\\n                 * ```\\n                 *\\n                 * If `warning` is passed as an `Error` object, the `options` argument is ignored.\\n                 * @since v8.0.0\\n                 * @param warning The warning to emit.\\n                 */\\n                emitWarning(warning: string | Error, ctor?: Function): void;\\n                emitWarning(warning: string | Error, type?: string, ctor?: Function): void;\\n                emitWarning(warning: string | Error, type?: string, code?: string, ctor?: Function): void;\\n                emitWarning(warning: string | Error, options?: EmitWarningOptions): void;\\n                /**\\n                 * The `process.env` property returns an object containing the user environment.\\n                 * See [`environ(7)`](http://man7.org/linux/man-pages/man7/environ.7.html).\\n                 *\\n                 * An example of this object looks like:\\n                 *\\n                 * ```js\\n                 * {\\n                 *   TERM: 'xterm-256color',\\n                 *   SHELL: '/usr/local/bin/bash',\\n                 *   USER: 'maciej',\\n                 *   PATH: '~/.bin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin',\\n                 *   PWD: '/Users/maciej',\\n                 *   EDITOR: 'vim',\\n                 *   SHLVL: '1',\\n                 *   HOME: '/Users/maciej',\\n                 *   LOGNAME: 'maciej',\\n                 *   _: '/usr/local/bin/node'\\n                 * }\\n                 * ```\\n                 *\\n                 * It is possible to modify this object, but such modifications will not be\\n                 * reflected outside the Node.js process, or (unless explicitly requested)\\n                 * to other `Worker` threads.\\n                 * In other words, the following example would not work:\\n                 *\\n                 * ```console\\n                 * $ node -e 'process.env.foo = \\\"bar\\\"' &#x26;&#x26; echo $foo\\n                 * ```\\n                 *\\n                 * While the following will:\\n                 *\\n                 * ```js\\n                 * import { env } from 'process';\\n                 *\\n                 * env.foo = 'bar';\\n                 * console.log(env.foo);\\n                 * ```\\n                 *\\n                 * Assigning a property on `process.env` will implicitly convert the value\\n                 * to a string. **This behavior is deprecated.** Future versions of Node.js may\\n                 * throw an error when the value is not a string, number, or boolean.\\n                 *\\n                 * ```js\\n                 * import { env } from 'process';\\n                 *\\n                 * env.test = null;\\n                 * console.log(env.test);\\n                 * // => 'null'\\n                 * env.test = undefined;\\n                 * console.log(env.test);\\n                 * // => 'undefined'\\n                 * ```\\n                 *\\n                 * Use `delete` to delete a property from `process.env`.\\n                 *\\n                 * ```js\\n                 * import { env } from 'process';\\n                 *\\n                 * env.TEST = 1;\\n                 * delete env.TEST;\\n                 * console.log(env.TEST);\\n                 * // => undefined\\n                 * ```\\n                 *\\n                 * On Windows operating systems, environment variables are case-insensitive.\\n                 *\\n                 * ```js\\n                 * import { env } from 'process';\\n                 *\\n                 * env.TEST = 1;\\n                 * console.log(env.test);\\n                 * // => 1\\n                 * ```\\n                 *\\n                 * Unless explicitly specified when creating a `Worker` instance,\\n                 * each `Worker` thread has its own copy of `process.env`, based on its\\n                 * parent thread\u2019s `process.env`, or whatever was specified as the `env` option\\n                 * to the `Worker` constructor. Changes to `process.env` will not be visible\\n                 * across `Worker` threads, and only the main thread can make changes that\\n                 * are visible to the operating system or to native add-ons.\\n                 * @since v0.1.27\\n                 */\\n                env: ProcessEnv;\\n                /**\\n                 * The `process.exit()` method instructs Node.js to terminate the process\\n                 * synchronously with an exit status of `code`. If `code` is omitted, exit uses\\n                 * either the 'success' code `0` or the value of `process.exitCode` if it has been\\n                 * set. Node.js will not terminate until all the `'exit'` event listeners are\\n                 * called.\\n                 *\\n                 * To exit with a 'failure' code:\\n                 *\\n                 * ```js\\n                 * import { exit } from 'process';\\n                 *\\n                 * exit(1);\\n                 * ```\\n                 *\\n                 * The shell that executed Node.js should see the exit code as `1`.\\n                 *\\n                 * Calling `process.exit()` will force the process to exit as quickly as possible\\n                 * even if there are still asynchronous operations pending that have not yet\\n                 * completed fully, including I/O operations to `process.stdout` and`process.stderr`.\\n                 *\\n                 * In most situations, it is not actually necessary to call `process.exit()`explicitly. The Node.js process will exit on its own _if there is no additional_\\n                 * _work pending_ in the event loop. The `process.exitCode` property can be set to\\n                 * tell the process which exit code to use when the process exits gracefully.\\n                 *\\n                 * For instance, the following example illustrates a _misuse_ of the`process.exit()` method that could lead to data printed to stdout being\\n                 * truncated and lost:\\n                 *\\n                 * ```js\\n                 * import { exit } from 'process';\\n                 *\\n                 * // This is an example of what *not* to do:\\n                 * if (someConditionNotMet()) {\\n                 *   printUsageToStdout();\\n                 *   exit(1);\\n                 * }\\n                 * ```\\n                 *\\n                 * The reason this is problematic is because writes to `process.stdout` in Node.js\\n                 * are sometimes _asynchronous_ and may occur over multiple ticks of the Node.js\\n                 * event loop. Calling `process.exit()`, however, forces the process to exit _before_ those additional writes to `stdout` can be performed.\\n                 *\\n                 * Rather than calling `process.exit()` directly, the code _should_ set the`process.exitCode` and allow the process to exit naturally by avoiding\\n                 * scheduling any additional work for the event loop:\\n                 *\\n                 * ```js\\n                 * import process from 'process';\\n                 *\\n                 * // How to properly set the exit code while letting\\n                 * // the process exit gracefully.\\n                 * if (someConditionNotMet()) {\\n                 *   printUsageToStdout();\\n                 *   process.exitCode = 1;\\n                 * }\\n                 * ```\\n                 *\\n                 * If it is necessary to terminate the Node.js process due to an error condition,\\n                 * throwing an _uncaught_ error and allowing the process to terminate accordingly\\n                 * is safer than calling `process.exit()`.\\n                 *\\n                 * In `Worker` threads, this function stops the current thread rather\\n                 * than the current process.\\n                 * @since v0.1.13\\n                 * @param [code=0] The exit code.\\n                 */\\n                exit(code?: number): never;\\n                /**\\n                 * A number which will be the process exit code, when the process either\\n                 * exits gracefully, or is exited via {@link exit} without specifying\\n                 * a code.\\n                 *\\n                 * Specifying a code to {@link exit} will override any\\n                 * previous setting of `process.exitCode`.\\n                 * @since v0.11.8\\n                 */\\n                exitCode?: number | undefined;\\n                /**\\n                 * The `process.getgid()` method returns the numerical group identity of the\\n                 * process. (See [`getgid(2)`](http://man7.org/linux/man-pages/man2/getgid.2.html).)\\n                 *\\n                 * ```js\\n                 * import process from 'process';\\n                 *\\n                 * if (process.getgid) {\\n                 *   console.log(`Current gid: ${process.getgid()}`);\\n                 * }\\n                 * ```\\n                 *\\n                 * This function is only available on POSIX platforms (i.e. not Windows or\\n                 * Android).\\n                 * @since v0.1.31\\n                 */\\n                getgid?: () => number;\\n                /**\\n                 * The `process.setgid()` method sets the group identity of the process. (See [`setgid(2)`](http://man7.org/linux/man-pages/man2/setgid.2.html).) The `id` can be passed as either a\\n                 * numeric ID or a group name\\n                 * string. If a group name is specified, this method blocks while resolving the\\n                 * associated numeric ID.\\n                 *\\n                 * ```js\\n                 * import process from 'process';\\n                 *\\n                 * if (process.getgid &#x26;&#x26; process.setgid) {\\n                 *   console.log(`Current gid: ${process.getgid()}`);\\n                 *   try {\\n                 *     process.setgid(501);\\n                 *     console.log(`New gid: ${process.getgid()}`);\\n                 *   } catch (err) {\\n                 *     console.log(`Failed to set gid: ${err}`);\\n                 *   }\\n                 * }\\n                 * ```\\n                 *\\n                 * This function is only available on POSIX platforms (i.e. not Windows or\\n                 * Android).\\n                 * This feature is not available in `Worker` threads.\\n                 * @since v0.1.31\\n                 * @param id The group name or ID\\n                 */\\n                setgid?: (id: number | string) => void;\\n                /**\\n                 * The `process.getuid()` method returns the numeric user identity of the process.\\n                 * (See [`getuid(2)`](http://man7.org/linux/man-pages/man2/getuid.2.html).)\\n                 *\\n                 * ```js\\n                 * import process from 'process';\\n                 *\\n                 * if (process.getuid) {\\n                 *   console.log(`Current uid: ${process.getuid()}`);\\n                 * }\\n                 * ```\\n                 *\\n                 * This function is only available on POSIX platforms (i.e. not Windows or\\n                 * Android).\\n                 * @since v0.1.28\\n                 */\\n                getuid?: () => number;\\n                /**\\n                 * The `process.setuid(id)` method sets the user identity of the process. (See [`setuid(2)`](http://man7.org/linux/man-pages/man2/setuid.2.html).) The `id` can be passed as either a\\n                 * numeric ID or a username string.\\n                 * If a username is specified, the method blocks while resolving the associated\\n                 * numeric ID.\\n                 *\\n                 * ```js\\n                 * import process from 'process';\\n                 *\\n                 * if (process.getuid &#x26;&#x26; process.setuid) {\\n                 *   console.log(`Current uid: ${process.getuid()}`);\\n                 *   try {\\n                 *     process.setuid(501);\\n                 *     console.log(`New uid: ${process.getuid()}`);\\n                 *   } catch (err) {\\n                 *     console.log(`Failed to set uid: ${err}`);\\n                 *   }\\n                 * }\\n                 * ```\\n                 *\\n                 * This function is only available on POSIX platforms (i.e. not Windows or\\n                 * Android).\\n                 * This feature is not available in `Worker` threads.\\n                 * @since v0.1.28\\n                 */\\n                setuid?: (id: number | string) => void;\\n                /**\\n                 * The `process.geteuid()` method returns the numerical effective user identity of\\n                 * the process. (See [`geteuid(2)`](http://man7.org/linux/man-pages/man2/geteuid.2.html).)\\n                 *\\n                 * ```js\\n                 * import process from 'process';\\n                 *\\n                 * if (process.geteuid) {\\n                 *   console.log(`Current uid: ${process.geteuid()}`);\\n                 * }\\n                 * ```\\n                 *\\n                 * This function is only available on POSIX platforms (i.e. not Windows or\\n                 * Android).\\n                 * @since v2.0.0\\n                 */\\n                geteuid?: () => number;\\n                /**\\n                 * The `process.seteuid()` method sets the effective user identity of the process.\\n                 * (See [`seteuid(2)`](http://man7.org/linux/man-pages/man2/seteuid.2.html).) The `id` can be passed as either a numeric ID or a username\\n                 * string. If a username is specified, the method blocks while resolving the\\n                 * associated numeric ID.\\n                 *\\n                 * ```js\\n                 * import process from 'process';\\n                 *\\n                 * if (process.geteuid &#x26;&#x26; process.seteuid) {\\n                 *   console.log(`Current uid: ${process.geteuid()}`);\\n                 *   try {\\n                 *     process.seteuid(501);\\n                 *     console.log(`New uid: ${process.geteuid()}`);\\n                 *   } catch (err) {\\n                 *     console.log(`Failed to set uid: ${err}`);\\n                 *   }\\n                 * }\\n                 * ```\\n                 *\\n                 * This function is only available on POSIX platforms (i.e. not Windows or\\n                 * Android).\\n                 * This feature is not available in `Worker` threads.\\n                 * @since v2.0.0\\n                 * @param id A user name or ID\\n                 */\\n                seteuid?: (id: number | string) => void;\\n                /**\\n                 * The `process.getegid()` method returns the numerical effective group identity\\n                 * of the Node.js process. (See [`getegid(2)`](http://man7.org/linux/man-pages/man2/getegid.2.html).)\\n                 *\\n                 * ```js\\n                 * import process from 'process';\\n                 *\\n                 * if (process.getegid) {\\n                 *   console.log(`Current gid: ${process.getegid()}`);\\n                 * }\\n                 * ```\\n                 *\\n                 * This function is only available on POSIX platforms (i.e. not Windows or\\n                 * Android).\\n                 * @since v2.0.0\\n                 */\\n                getegid?: () => number;\\n                /**\\n                 * The `process.setegid()` method sets the effective group identity of the process.\\n                 * (See [`setegid(2)`](http://man7.org/linux/man-pages/man2/setegid.2.html).) The `id` can be passed as either a numeric ID or a group\\n                 * name string. If a group name is specified, this method blocks while resolving\\n                 * the associated a numeric ID.\\n                 *\\n                 * ```js\\n                 * import process from 'process';\\n                 *\\n                 * if (process.getegid &#x26;&#x26; process.setegid) {\\n                 *   console.log(`Current gid: ${process.getegid()}`);\\n                 *   try {\\n                 *     process.setegid(501);\\n                 *     console.log(`New gid: ${process.getegid()}`);\\n                 *   } catch (err) {\\n                 *     console.log(`Failed to set gid: ${err}`);\\n                 *   }\\n                 * }\\n                 * ```\\n                 *\\n                 * This function is only available on POSIX platforms (i.e. not Windows or\\n                 * Android).\\n                 * This feature is not available in `Worker` threads.\\n                 * @since v2.0.0\\n                 * @param id A group name or ID\\n                 */\\n                setegid?: (id: number | string) => void;\\n                /**\\n                 * The `process.getgroups()` method returns an array with the supplementary group\\n                 * IDs. POSIX leaves it unspecified if the effective group ID is included but\\n                 * Node.js ensures it always is.\\n                 *\\n                 * ```js\\n                 * import process from 'process';\\n                 *\\n                 * if (process.getgroups) {\\n                 *   console.log(process.getgroups()); // [ 16, 21, 297 ]\\n                 * }\\n                 * ```\\n                 *\\n                 * This function is only available on POSIX platforms (i.e. not Windows or\\n                 * Android).\\n                 * @since v0.9.4\\n                 */\\n                getgroups?: () => number[];\\n                /**\\n                 * The `process.setgroups()` method sets the supplementary group IDs for the\\n                 * Node.js process. This is a privileged operation that requires the Node.js\\n                 * process to have `root` or the `CAP_SETGID` capability.\\n                 *\\n                 * The `groups` array can contain numeric group IDs, group names, or both.\\n                 *\\n                 * ```js\\n                 * import process from 'process';\\n                 *\\n                 * if (process.getgroups &#x26;&#x26; process.setgroups) {\\n                 *   try {\\n                 *     process.setgroups([501]);\\n                 *     console.log(process.getgroups()); // new groups\\n                 *   } catch (err) {\\n                 *     console.log(`Failed to set groups: ${err}`);\\n                 *   }\\n                 * }\\n                 * ```\\n                 *\\n                 * This function is only available on POSIX platforms (i.e. not Windows or\\n                 * Android).\\n                 * This feature is not available in `Worker` threads.\\n                 * @since v0.9.4\\n                 */\\n                setgroups?: (groups: ReadonlyArray<string | number>) => void;\\n                /**\\n                 * The `process.setUncaughtExceptionCaptureCallback()` function sets a function\\n                 * that will be invoked when an uncaught exception occurs, which will receive the\\n                 * exception value itself as its first argument.\\n                 *\\n                 * If such a function is set, the `'uncaughtException'` event will\\n                 * not be emitted. If `--abort-on-uncaught-exception` was passed from the\\n                 * command line or set through `v8.setFlagsFromString()`, the process will\\n                 * not abort. Actions configured to take place on exceptions such as report\\n                 * generations will be affected too\\n                 *\\n                 * To unset the capture function,`process.setUncaughtExceptionCaptureCallback(null)` may be used. Calling this\\n                 * method with a non-`null` argument while another capture function is set will\\n                 * throw an error.\\n                 *\\n                 * Using this function is mutually exclusive with using the deprecated `domain` built-in module.\\n                 * @since v9.3.0\\n                 */\\n                setUncaughtExceptionCaptureCallback(cb: ((err: Error) => void) | null): void;\\n                /**\\n                 * Indicates whether a callback has been set using {@link setUncaughtExceptionCaptureCallback}.\\n                 * @since v9.3.0\\n                 */\\n                hasUncaughtExceptionCaptureCallback(): boolean;\\n                /**\\n                 * The `process.version` property contains the Node.js version string.\\n                 *\\n                 * ```js\\n                 * import { version } from 'process';\\n                 *\\n                 * console.log(`Version: ${version}`);\\n                 * // Version: v14.8.0\\n                 * ```\\n                 *\\n                 * To get the version string without the prepended _v_, use`process.versions.node`.\\n                 * @since v0.1.3\\n                 */\\n                readonly version: string;\\n                /**\\n                 * The `process.versions` property returns an object listing the version strings of\\n                 * Node.js and its dependencies. `process.versions.modules` indicates the current\\n                 * ABI version, which is increased whenever a C++ API changes. Node.js will refuse\\n                 * to load modules that were compiled against a different module ABI version.\\n                 *\\n                 * ```js\\n                 * import { versions } from 'process';\\n                 *\\n                 * console.log(versions);\\n                 * ```\\n                 *\\n                 * Will generate an object similar to:\\n                 *\\n                 * ```console\\n                 * { node: '11.13.0',\\n                 *   v8: '7.0.276.38-node.18',\\n                 *   uv: '1.27.0',\\n                 *   zlib: '1.2.11',\\n                 *   brotli: '1.0.7',\\n                 *   ares: '1.15.0',\\n                 *   modules: '67',\\n                 *   nghttp2: '1.34.0',\\n                 *   napi: '4',\\n                 *   llhttp: '1.1.1',\\n                 *   openssl: '1.1.1b',\\n                 *   cldr: '34.0',\\n                 *   icu: '63.1',\\n                 *   tz: '2018e',\\n                 *   unicode: '11.0' }\\n                 * ```\\n                 * @since v0.2.0\\n                 */\\n                readonly versions: ProcessVersions;\\n                /**\\n                 * The `process.config` property returns an `Object` containing the JavaScript\\n                 * representation of the configure options used to compile the current Node.js\\n                 * executable. This is the same as the `config.gypi` file that was produced when\\n                 * running the `./configure` script.\\n                 *\\n                 * An example of the possible output looks like:\\n                 *\\n                 * ```js\\n                 * {\\n                 *   target_defaults:\\n                 *    { cflags: [],\\n                 *      default_configuration: 'Release',\\n                 *      defines: [],\\n                 *      include_dirs: [],\\n                 *      libraries: [] },\\n                 *   variables:\\n                 *    {\\n                 *      host_arch: 'x64',\\n                 *      napi_build_version: 5,\\n                 *      node_install_npm: 'true',\\n                 *      node_prefix: '',\\n                 *      node_shared_cares: 'false',\\n                 *      node_shared_http_parser: 'false',\\n                 *      node_shared_libuv: 'false',\\n                 *      node_shared_zlib: 'false',\\n                 *      node_use_dtrace: 'false',\\n                 *      node_use_openssl: 'true',\\n                 *      node_shared_openssl: 'false',\\n                 *      strict_aliasing: 'true',\\n                 *      target_arch: 'x64',\\n                 *      v8_use_snapshot: 1\\n                 *    }\\n                 * }\\n                 * ```\\n                 *\\n                 * The `process.config` property is **not** read-only and there are existing\\n                 * modules in the ecosystem that are known to extend, modify, or entirely replace\\n                 * the value of `process.config`.\\n                 *\\n                 * Modifying the `process.config` property, or any child-property of the`process.config` object has been deprecated. The `process.config` will be made\\n                 * read-only in a future release.\\n                 * @since v0.7.7\\n                 */\\n                readonly config: ProcessConfig;\\n                /**\\n                 * The `process.kill()` method sends the `signal` to the process identified by`pid`.\\n                 *\\n                 * Signal names are strings such as `'SIGINT'` or `'SIGHUP'`. See `Signal Events` and [`kill(2)`](http://man7.org/linux/man-pages/man2/kill.2.html) for more information.\\n                 *\\n                 * This method will throw an error if the target `pid` does not exist. As a special\\n                 * case, a signal of `0` can be used to test for the existence of a process.\\n                 * Windows platforms will throw an error if the `pid` is used to kill a process\\n                 * group.\\n                 *\\n                 * Even though the name of this function is `process.kill()`, it is really just a\\n                 * signal sender, like the `kill` system call. The signal sent may do something\\n                 * other than kill the target process.\\n                 *\\n                 * ```js\\n                 * import process, { kill } from 'process';\\n                 *\\n                 * process.on('SIGHUP', () => {\\n                 *   console.log('Got SIGHUP signal.');\\n                 * });\\n                 *\\n                 * setTimeout(() => {\\n                 *   console.log('Exiting.');\\n                 *   process.exit(0);\\n                 * }, 100);\\n                 *\\n                 * kill(process.pid, 'SIGHUP');\\n                 * ```\\n                 *\\n                 * When `SIGUSR1` is received by a Node.js process, Node.js will start the\\n                 * debugger. See `Signal Events`.\\n                 * @since v0.0.6\\n                 * @param pid A process ID\\n                 * @param [signal='SIGTERM'] The signal to send, either as a string or number.\\n                 */\\n                kill(pid: number, signal?: string | number): true;\\n                /**\\n                 * The `process.pid` property returns the PID of the process.\\n                 *\\n                 * ```js\\n                 * import { pid } from 'process';\\n                 *\\n                 * console.log(`This process is pid ${pid}`);\\n                 * ```\\n                 * @since v0.1.15\\n                 */\\n                readonly pid: number;\\n                /**\\n                 * The `process.ppid` property returns the PID of the parent of the\\n                 * current process.\\n                 *\\n                 * ```js\\n                 * import { ppid } from 'process';\\n                 *\\n                 * console.log(`The parent process is pid ${ppid}`);\\n                 * ```\\n                 * @since v9.2.0, v8.10.0, v6.13.0\\n                 */\\n                readonly ppid: number;\\n                /**\\n                 * The `process.title` property returns the current process title (i.e. returns\\n                 * the current value of `ps`). Assigning a new value to `process.title` modifies\\n                 * the current value of `ps`.\\n                 *\\n                 * When a new value is assigned, different platforms will impose different maximum\\n                 * length restrictions on the title. Usually such restrictions are quite limited.\\n                 * For instance, on Linux and macOS, `process.title` is limited to the size of the\\n                 * binary name plus the length of the command-line arguments because setting the`process.title` overwrites the `argv` memory of the process. Node.js v0.8\\n                 * allowed for longer process title strings by also overwriting the `environ`memory but that was potentially insecure and confusing in some (rather obscure)\\n                 * cases.\\n                 *\\n                 * Assigning a value to `process.title` might not result in an accurate label\\n                 * within process manager applications such as macOS Activity Monitor or Windows\\n                 * Services Manager.\\n                 * @since v0.1.104\\n                 */\\n                title: string;\\n                /**\\n                 * The operating system CPU architecture for which the Node.js binary was compiled.\\n                 * Possible values are: `'arm'`, `'arm64'`, `'ia32'`, `'mips'`,`'mipsel'`, `'ppc'`,`'ppc64'`, `'s390'`, `'s390x'`, and `'x64'`.\\n                 *\\n                 * ```js\\n                 * import { arch } from 'process';\\n                 *\\n                 * console.log(`This processor architecture is ${arch}`);\\n                 * ```\\n                 * @since v0.5.0\\n                 */\\n                readonly arch: Architecture;\\n                /**\\n                 * The `process.platform` property returns a string identifying the operating\\n                 * system platform for which the Node.js binary was compiled.\\n                 *\\n                 * Currently possible values are:\\n                 *\\n                 * * `'aix'`\\n                 * * `'darwin'`\\n                 * * `'freebsd'`\\n                 * * `'linux'`\\n                 * * `'openbsd'`\\n                 * * `'sunos'`\\n                 * * `'win32'`\\n                 *\\n                 * ```js\\n                 * import { platform } from 'process';\\n                 *\\n                 * console.log(`This platform is ${platform}`);\\n                 * ```\\n                 *\\n                 * The value `'android'` may also be returned if the Node.js is built on the\\n                 * Android operating system. However, Android support in Node.js [is experimental](https://github.com/nodejs/node/blob/HEAD/BUILDING.md#androidandroid-based-devices-eg-firefox-os).\\n                 * @since v0.1.16\\n                 */\\n                readonly platform: Platform;\\n                /**\\n                 * The `process.mainModule` property provides an alternative way of retrieving `require.main`. The difference is that if the main module changes at\\n                 * runtime, `require.main` may still refer to the original main module in\\n                 * modules that were required before the change occurred. Generally, it's\\n                 * safe to assume that the two refer to the same module.\\n                 *\\n                 * As with `require.main`, `process.mainModule` will be `undefined` if there\\n                 * is no entry script.\\n                 * @since v0.1.17\\n                 * @deprecated Since v14.0.0 - Use `main` instead.\\n                 */\\n                mainModule?: Module | undefined;\\n                memoryUsage: MemoryUsageFn;\\n                /**\\n                 * Gets the amount of memory available to the process (in bytes) based on\\n                 * limits imposed by the OS. If there is no such constraint, or the constraint\\n                 * is unknown, `undefined` is returned.\\n                 */\\n                constrainedMemory(): number | undefined;\\n                /**\\n                 * The `process.cpuUsage()` method returns the user and system CPU time usage of\\n                 * the current process, in an object with properties `user` and `system`, whose\\n                 * values are microsecond values (millionth of a second). These values measure time\\n                 * spent in user and system code respectively, and may end up being greater than\\n                 * actual elapsed time if multiple CPU cores are performing work for this process.\\n                 *\\n                 * The result of a previous call to `process.cpuUsage()` can be passed as the\\n                 * argument to the function, to get a diff reading.\\n                 *\\n                 * ```js\\n                 * import { cpuUsage } from 'process';\\n                 *\\n                 * const startUsage = cpuUsage();\\n                 * // { user: 38579, system: 6986 }\\n                 *\\n                 * // spin the CPU for 500 milliseconds\\n                 * const now = Date.now();\\n                 * while (Date.now() - now < 500);\\n                 *\\n                 * console.log(cpuUsage(startUsage));\\n                 * // { user: 514883, system: 11226 }\\n                 * ```\\n                 * @since v6.1.0\\n                 * @param previousValue A previous return value from calling `process.cpuUsage()`\\n                 */\\n                cpuUsage(previousValue?: CpuUsage): CpuUsage;\\n                /**\\n                 * `process.nextTick()` adds `callback` to the \\\"next tick queue\\\". This queue is\\n                 * fully drained after the current operation on the JavaScript stack runs to\\n                 * completion and before the event loop is allowed to continue. It's possible to\\n                 * create an infinite loop if one were to recursively call `process.nextTick()`.\\n                 * See the [Event Loop](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#process-nexttick) guide for more background.\\n                 *\\n                 * ```js\\n                 * import { nextTick } from 'process';\\n                 *\\n                 * console.log('start');\\n                 * nextTick(() => {\\n                 *   console.log('nextTick callback');\\n                 * });\\n                 * console.log('scheduled');\\n                 * // Output:\\n                 * // start\\n                 * // scheduled\\n                 * // nextTick callback\\n                 * ```\\n                 *\\n                 * This is important when developing APIs in order to give users the opportunity\\n                 * to assign event handlers _after_ an object has been constructed but before any\\n                 * I/O has occurred:\\n                 *\\n                 * ```js\\n                 * import { nextTick } from 'process';\\n                 *\\n                 * function MyThing(options) {\\n                 *   this.setupOptions(options);\\n                 *\\n                 *   nextTick(() => {\\n                 *     this.startDoingStuff();\\n                 *   });\\n                 * }\\n                 *\\n                 * const thing = new MyThing();\\n                 * thing.getReadyForStuff();\\n                 *\\n                 * // thing.startDoingStuff() gets called now, not before.\\n                 * ```\\n                 *\\n                 * It is very important for APIs to be either 100% synchronous or 100%\\n                 * asynchronous. Consider this example:\\n                 *\\n                 * ```js\\n                 * // WARNING!  DO NOT USE!  BAD UNSAFE HAZARD!\\n                 * function maybeSync(arg, cb) {\\n                 *   if (arg) {\\n                 *     cb();\\n                 *     return;\\n                 *   }\\n                 *\\n                 *   fs.stat('file', cb);\\n                 * }\\n                 * ```\\n                 *\\n                 * This API is hazardous because in the following case:\\n                 *\\n                 * ```js\\n                 * const maybeTrue = Math.random() > 0.5;\\n                 *\\n                 * maybeSync(maybeTrue, () => {\\n                 *   foo();\\n                 * });\\n                 *\\n                 * bar();\\n                 * ```\\n                 *\\n                 * It is not clear whether `foo()` or `bar()` will be called first.\\n                 *\\n                 * The following approach is much better:\\n                 *\\n                 * ```js\\n                 * import { nextTick } from 'process';\\n                 *\\n                 * function definitelyAsync(arg, cb) {\\n                 *   if (arg) {\\n                 *     nextTick(cb);\\n                 *     return;\\n                 *   }\\n                 *\\n                 *   fs.stat('file', cb);\\n                 * }\\n                 * ```\\n                 * @since v0.1.26\\n                 * @param args Additional arguments to pass when invoking the `callback`\\n                 */\\n                nextTick(callback: Function, ...args: any[]): void;\\n                /**\\n                 * The `process.release` property returns an `Object` containing metadata related\\n                 * to the current release, including URLs for the source tarball and headers-only\\n                 * tarball.\\n                 *\\n                 * `process.release` contains the following properties:\\n                 *\\n                 * ```js\\n                 * {\\n                 *   name: 'node',\\n                 *   lts: 'Erbium',\\n                 *   sourceUrl: 'https://nodejs.org/download/release/v12.18.1/node-v12.18.1.tar.gz',\\n                 *   headersUrl: 'https://nodejs.org/download/release/v12.18.1/node-v12.18.1-headers.tar.gz',\\n                 *   libUrl: 'https://nodejs.org/download/release/v12.18.1/win-x64/node.lib'\\n                 * }\\n                 * ```\\n                 *\\n                 * In custom builds from non-release versions of the source tree, only the`name` property may be present. The additional properties should not be\\n                 * relied upon to exist.\\n                 * @since v3.0.0\\n                 */\\n                readonly release: ProcessRelease;\\n                features: {\\n                    inspector: boolean;\\n                    debug: boolean;\\n                    uv: boolean;\\n                    ipv6: boolean;\\n                    tls_alpn: boolean;\\n                    tls_sni: boolean;\\n                    tls_ocsp: boolean;\\n                    tls: boolean;\\n                };\\n                /**\\n                 * `process.umask()` returns the Node.js process's file mode creation mask. Child\\n                 * processes inherit the mask from the parent process.\\n                 * @since v0.1.19\\n                 * @deprecated Calling `process.umask()` with no argument causes the process-wide umask to be written twice. This introduces a race condition between threads, and is a potential   *\\n                 * security vulnerability. There is no safe, cross-platform alternative API.\\n                 */\\n                umask(): number;\\n                /**\\n                 * Can only be set if not in worker thread.\\n                 */\\n                umask(mask: string | number): number;\\n                /**\\n                 * The `process.uptime()` method returns the number of seconds the current Node.js\\n                 * process has been running.\\n                 *\\n                 * The return value includes fractions of a second. Use `Math.floor()` to get whole\\n                 * seconds.\\n                 * @since v0.5.0\\n                 */\\n                uptime(): number;\\n                hrtime: HRTime;\\n                /**\\n                 * If Node.js is spawned with an IPC channel, the `process.send()` method can be\\n                 * used to send messages to the parent process. Messages will be received as a `'message'` event on the parent's `ChildProcess` object.\\n                 *\\n                 * If Node.js was not spawned with an IPC channel, `process.send` will be`undefined`.\\n                 *\\n                 * The message goes through serialization and parsing. The resulting message might\\n                 * not be the same as what is originally sent.\\n                 * @since v0.5.9\\n                 * @param options used to parameterize the sending of certain types of handles.`options` supports the following properties:\\n                 */\\n                send?(\\n                    message: any,\\n                    sendHandle?: any,\\n                    options?: {\\n                        swallowErrors?: boolean | undefined;\\n                    },\\n                    callback?: (error: Error | null) => void\\n                ): boolean;\\n                /**\\n                 * If the Node.js process is spawned with an IPC channel (see the `Child Process` and `Cluster` documentation), the `process.disconnect()` method will close the\\n                 * IPC channel to the parent process, allowing the child process to exit gracefully\\n                 * once there are no other connections keeping it alive.\\n                 *\\n                 * The effect of calling `process.disconnect()` is the same as calling `ChildProcess.disconnect()` from the parent process.\\n                 *\\n                 * If the Node.js process was not spawned with an IPC channel,`process.disconnect()` will be `undefined`.\\n                 * @since v0.7.2\\n                 */\\n                disconnect(): void;\\n                /**\\n                 * If the Node.js process is spawned with an IPC channel (see the `Child Process` and `Cluster` documentation), the `process.connected` property will return`true` so long as the IPC\\n                 * channel is connected and will return `false` after`process.disconnect()` is called.\\n                 *\\n                 * Once `process.connected` is `false`, it is no longer possible to send messages\\n                 * over the IPC channel using `process.send()`.\\n                 * @since v0.7.2\\n                 */\\n                connected: boolean;\\n                /**\\n                 * The `process.allowedNodeEnvironmentFlags` property is a special,\\n                 * read-only `Set` of flags allowable within the `NODE_OPTIONS` environment variable.\\n                 *\\n                 * `process.allowedNodeEnvironmentFlags` extends `Set`, but overrides`Set.prototype.has` to recognize several different possible flag\\n                 * representations. `process.allowedNodeEnvironmentFlags.has()` will\\n                 * return `true` in the following cases:\\n                 *\\n                 * * Flags may omit leading single (`-`) or double (`--`) dashes; e.g.,`inspect-brk` for `--inspect-brk`, or `r` for `-r`.\\n                 * * Flags passed through to V8 (as listed in `--v8-options`) may replace\\n                 * one or more _non-leading_ dashes for an underscore, or vice-versa;\\n                 * e.g., `--perf_basic_prof`, `--perf-basic-prof`, `--perf_basic-prof`,\\n                 * etc.\\n                 * * Flags may contain one or more equals (`=`) characters; all\\n                 * characters after and including the first equals will be ignored;\\n                 * e.g., `--stack-trace-limit=100`.\\n                 * * Flags _must_ be allowable within `NODE_OPTIONS`.\\n                 *\\n                 * When iterating over `process.allowedNodeEnvironmentFlags`, flags will\\n                 * appear only _once_; each will begin with one or more dashes. Flags\\n                 * passed through to V8 will contain underscores instead of non-leading\\n                 * dashes:\\n                 *\\n                 * ```js\\n                 * import { allowedNodeEnvironmentFlags } from 'process';\\n                 *\\n                 * allowedNodeEnvironmentFlags.forEach((flag) => {\\n                 *   // -r\\n                 *   // --inspect-brk\\n                 *   // --abort_on_uncaught_exception\\n                 *   // ...\\n                 * });\\n                 * ```\\n                 *\\n                 * The methods `add()`, `clear()`, and `delete()` of`process.allowedNodeEnvironmentFlags` do nothing, and will fail\\n                 * silently.\\n                 *\\n                 * If Node.js was compiled _without_ `NODE_OPTIONS` support (shown in {@link config}), `process.allowedNodeEnvironmentFlags` will\\n                 * contain what _would have_ been allowable.\\n                 * @since v10.10.0\\n                 */\\n                allowedNodeEnvironmentFlags: ReadonlySet<string>;\\n                /**\\n                 * `process.report` is an object whose methods are used to generate diagnostic\\n                 * reports for the current process. Additional documentation is available in the `report documentation`.\\n                 * @since v11.8.0\\n                 */\\n                report?: ProcessReport | undefined;\\n                /**\\n                 * ```js\\n                 * import { resourceUsage } from 'process';\\n                 *\\n                 * console.log(resourceUsage());\\n                 * /*\\n                 *   Will output:\\n                 *   {\\n                 *     userCPUTime: 82872,\\n                 *     systemCPUTime: 4143,\\n                 *     maxRSS: 33164,\\n                 *     sharedMemorySize: 0,\\n                 *     unsharedDataSize: 0,\\n                 *     unsharedStackSize: 0,\\n                 *     minorPageFault: 2469,\\n                 *     majorPageFault: 0,\\n                 *     swappedOut: 0,\\n                 *     fsRead: 0,\\n                 *     fsWrite: 8,\\n                 *     ipcSent: 0,\\n                 *     ipcReceived: 0,\\n                 *     signalsCount: 0,\\n                 *     voluntaryContextSwitches: 79,\\n                 *     involuntaryContextSwitches: 1\\n                 *   }\\n                 *\\n                 * ```\\n                 * @since v12.6.0\\n                 * @return the resource usage for the current process. All of these values come from the `uv_getrusage` call which returns a [`uv_rusage_t` struct][uv_rusage_t].\\n                 */\\n                resourceUsage(): ResourceUsage;\\n                /**\\n                 * The `process.traceDeprecation` property indicates whether the`--trace-deprecation` flag is set on the current Node.js process. See the\\n                 * documentation for the `'warning' event` and the `emitWarning() method` for more information about this\\n                 * flag's behavior.\\n                 * @since v0.8.0\\n                 */\\n                traceDeprecation: boolean;\\n                /* EventEmitter */\\n                addListener(event: 'beforeExit', listener: BeforeExitListener): this;\\n                addListener(event: 'disconnect', listener: DisconnectListener): this;\\n                addListener(event: 'exit', listener: ExitListener): this;\\n                addListener(event: 'rejectionHandled', listener: RejectionHandledListener): this;\\n                addListener(event: 'uncaughtException', listener: UncaughtExceptionListener): this;\\n                addListener(event: 'uncaughtExceptionMonitor', listener: UncaughtExceptionListener): this;\\n                addListener(event: 'unhandledRejection', listener: UnhandledRejectionListener): this;\\n                addListener(event: 'warning', listener: WarningListener): this;\\n                addListener(event: 'message', listener: MessageListener): this;\\n                addListener(event: Signals, listener: SignalsListener): this;\\n                addListener(event: 'multipleResolves', listener: MultipleResolveListener): this;\\n                addListener(event: 'worker', listener: WorkerListener): this;\\n                emit(event: 'beforeExit', code: number): boolean;\\n                emit(event: 'disconnect'): boolean;\\n                emit(event: 'exit', code: number): boolean;\\n                emit(event: 'rejectionHandled', promise: Promise<unknown>): boolean;\\n                emit(event: 'uncaughtException', error: Error): boolean;\\n                emit(event: 'uncaughtExceptionMonitor', error: Error): boolean;\\n                emit(event: 'unhandledRejection', reason: unknown, promise: Promise<unknown>): boolean;\\n                emit(event: 'warning', warning: Error): boolean;\\n                emit(event: 'message', message: unknown, sendHandle: unknown): this;\\n                emit(event: Signals, signal?: Signals): boolean;\\n                emit(event: 'multipleResolves', type: MultipleResolveType, promise: Promise<unknown>, value: unknown): this;\\n                emit(event: 'worker', listener: WorkerListener): this;\\n                on(event: 'beforeExit', listener: BeforeExitListener): this;\\n                on(event: 'disconnect', listener: DisconnectListener): this;\\n                on(event: 'exit', listener: ExitListener): this;\\n                on(event: 'rejectionHandled', listener: RejectionHandledListener): this;\\n                on(event: 'uncaughtException', listener: UncaughtExceptionListener): this;\\n                on(event: 'uncaughtExceptionMonitor', listener: UncaughtExceptionListener): this;\\n                on(event: 'unhandledRejection', listener: UnhandledRejectionListener): this;\\n                on(event: 'warning', listener: WarningListener): this;\\n                on(event: 'message', listener: MessageListener): this;\\n                on(event: Signals, listener: SignalsListener): this;\\n                on(event: 'multipleResolves', listener: MultipleResolveListener): this;\\n                on(event: 'worker', listener: WorkerListener): this;\\n                on(event: string | symbol, listener: (...args: any[]) => void): this;\\n                once(event: 'beforeExit', listener: BeforeExitListener): this;\\n                once(event: 'disconnect', listener: DisconnectListener): this;\\n                once(event: 'exit', listener: ExitListener): this;\\n                once(event: 'rejectionHandled', listener: RejectionHandledListener): this;\\n                once(event: 'uncaughtException', listener: UncaughtExceptionListener): this;\\n                once(event: 'uncaughtExceptionMonitor', listener: UncaughtExceptionListener): this;\\n                once(event: 'unhandledRejection', listener: UnhandledRejectionListener): this;\\n                once(event: 'warning', listener: WarningListener): this;\\n                once(event: 'message', listener: MessageListener): this;\\n                once(event: Signals, listener: SignalsListener): this;\\n                once(event: 'multipleResolves', listener: MultipleResolveListener): this;\\n                once(event: 'worker', listener: WorkerListener): this;\\n                once(event: string | symbol, listener: (...args: any[]) => void): this;\\n                prependListener(event: 'beforeExit', listener: BeforeExitListener): this;\\n                prependListener(event: 'disconnect', listener: DisconnectListener): this;\\n                prependListener(event: 'exit', listener: ExitListener): this;\\n                prependListener(event: 'rejectionHandled', listener: RejectionHandledListener): this;\\n                prependListener(event: 'uncaughtException', listener: UncaughtExceptionListener): this;\\n                prependListener(event: 'uncaughtExceptionMonitor', listener: UncaughtExceptionListener): this;\\n                prependListener(event: 'unhandledRejection', listener: UnhandledRejectionListener): this;\\n                prependListener(event: 'warning', listener: WarningListener): this;\\n                prependListener(event: 'message', listener: MessageListener): this;\\n                prependListener(event: Signals, listener: SignalsListener): this;\\n                prependListener(event: 'multipleResolves', listener: MultipleResolveListener): this;\\n                prependListener(event: 'worker', listener: WorkerListener): this;\\n                prependOnceListener(event: 'beforeExit', listener: BeforeExitListener): this;\\n                prependOnceListener(event: 'disconnect', listener: DisconnectListener): this;\\n                prependOnceListener(event: 'exit', listener: ExitListener): this;\\n                prependOnceListener(event: 'rejectionHandled', listener: RejectionHandledListener): this;\\n                prependOnceListener(event: 'uncaughtException', listener: UncaughtExceptionListener): this;\\n                prependOnceListener(event: 'uncaughtExceptionMonitor', listener: UncaughtExceptionListener): this;\\n                prependOnceListener(event: 'unhandledRejection', listener: UnhandledRejectionListener): this;\\n                prependOnceListener(event: 'warning', listener: WarningListener): this;\\n                prependOnceListener(event: 'message', listener: MessageListener): this;\\n                prependOnceListener(event: Signals, listener: SignalsListener): this;\\n                prependOnceListener(event: 'multipleResolves', listener: MultipleResolveListener): this;\\n                prependOnceListener(event: 'worker', listener: WorkerListener): this;\\n                listeners(event: 'beforeExit'): BeforeExitListener[];\\n                listeners(event: 'disconnect'): DisconnectListener[];\\n                listeners(event: 'exit'): ExitListener[];\\n                listeners(event: 'rejectionHandled'): RejectionHandledListener[];\\n                listeners(event: 'uncaughtException'): UncaughtExceptionListener[];\\n                listeners(event: 'uncaughtExceptionMonitor'): UncaughtExceptionListener[];\\n                listeners(event: 'unhandledRejection'): UnhandledRejectionListener[];\\n                listeners(event: 'warning'): WarningListener[];\\n                listeners(event: 'message'): MessageListener[];\\n                listeners(event: Signals): SignalsListener[];\\n                listeners(event: 'multipleResolves'): MultipleResolveListener[];\\n                listeners(event: 'worker'): WorkerListener[];\\n            }\\n        }\\n    }\\n    export = process;\\n}\\ndeclare module 'node:process' {\\n    import process = require('process');\\n    export = process;\\n}\\n\",\"file:///node_modules/@types/node/punycode.d.ts\":\"/**\\n * **The version of the punycode module bundled in Node.js is being deprecated.**In a future major version of Node.js this module will be removed. Users\\n * currently depending on the `punycode` module should switch to using the\\n * userland-provided [Punycode.js](https://github.com/bestiejs/punycode.js) module instead. For punycode-based URL\\n * encoding, see `url.domainToASCII` or, more generally, the `WHATWG URL API`.\\n *\\n * The `punycode` module is a bundled version of the [Punycode.js](https://github.com/bestiejs/punycode.js) module. It\\n * can be accessed using:\\n *\\n * ```js\\n * const punycode = require('punycode');\\n * ```\\n *\\n * [Punycode](https://tools.ietf.org/html/rfc3492) is a character encoding scheme defined by RFC 3492 that is\\n * primarily intended for use in Internationalized Domain Names. Because host\\n * names in URLs are limited to ASCII characters only, Domain Names that contain\\n * non-ASCII characters must be converted into ASCII using the Punycode scheme.\\n * For instance, the Japanese character that translates into the English word,`'example'` is `'\u4f8b'`. The Internationalized Domain Name, `'\u4f8b.com'` (equivalent\\n * to `'example.com'`) is represented by Punycode as the ASCII string`'xn--fsq.com'`.\\n *\\n * The `punycode` module provides a simple implementation of the Punycode standard.\\n *\\n * The `punycode` module is a third-party dependency used by Node.js and\\n * made available to developers as a convenience. Fixes or other modifications to\\n * the module must be directed to the [Punycode.js](https://github.com/bestiejs/punycode.js) project.\\n * @deprecated Since v7.0.0 - Deprecated\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/punycode.js)\\n */\\ndeclare module 'punycode' {\\n    /**\\n     * The `punycode.decode()` method converts a [Punycode](https://tools.ietf.org/html/rfc3492) string of ASCII-only\\n     * characters to the equivalent string of Unicode codepoints.\\n     *\\n     * ```js\\n     * punycode.decode('maana-pta'); // 'ma\xf1ana'\\n     * punycode.decode('--dqo34k'); // '\u2603-\u2318'\\n     * ```\\n     * @since v0.5.1\\n     */\\n    function decode(string: string): string;\\n    /**\\n     * The `punycode.encode()` method converts a string of Unicode codepoints to a [Punycode](https://tools.ietf.org/html/rfc3492) string of ASCII-only characters.\\n     *\\n     * ```js\\n     * punycode.encode('ma\xf1ana'); // 'maana-pta'\\n     * punycode.encode('\u2603-\u2318'); // '--dqo34k'\\n     * ```\\n     * @since v0.5.1\\n     */\\n    function encode(string: string): string;\\n    /**\\n     * The `punycode.toUnicode()` method converts a string representing a domain name\\n     * containing [Punycode](https://tools.ietf.org/html/rfc3492) encoded characters into Unicode. Only the [Punycode](https://tools.ietf.org/html/rfc3492) encoded parts of the domain name are be\\n     * converted.\\n     *\\n     * ```js\\n     * // decode domain names\\n     * punycode.toUnicode('xn--maana-pta.com'); // 'ma\xf1ana.com'\\n     * punycode.toUnicode('xn----dqo34k.com');  // '\u2603-\u2318.com'\\n     * punycode.toUnicode('example.com');       // 'example.com'\\n     * ```\\n     * @since v0.6.1\\n     */\\n    function toUnicode(domain: string): string;\\n    /**\\n     * The `punycode.toASCII()` method converts a Unicode string representing an\\n     * Internationalized Domain Name to [Punycode](https://tools.ietf.org/html/rfc3492). Only the non-ASCII parts of the\\n     * domain name will be converted. Calling `punycode.toASCII()` on a string that\\n     * already only contains ASCII characters will have no effect.\\n     *\\n     * ```js\\n     * // encode domain names\\n     * punycode.toASCII('ma\xf1ana.com');  // 'xn--maana-pta.com'\\n     * punycode.toASCII('\u2603-\u2318.com');   // 'xn----dqo34k.com'\\n     * punycode.toASCII('example.com'); // 'example.com'\\n     * ```\\n     * @since v0.6.1\\n     */\\n    function toASCII(domain: string): string;\\n    /**\\n     * @deprecated since v7.0.0\\n     * The version of the punycode module bundled in Node.js is being deprecated.\\n     * In a future major version of Node.js this module will be removed.\\n     * Users currently depending on the punycode module should switch to using\\n     * the userland-provided Punycode.js module instead.\\n     */\\n    const ucs2: ucs2;\\n    interface ucs2 {\\n        /**\\n         * @deprecated since v7.0.0\\n         * The version of the punycode module bundled in Node.js is being deprecated.\\n         * In a future major version of Node.js this module will be removed.\\n         * Users currently depending on the punycode module should switch to using\\n         * the userland-provided Punycode.js module instead.\\n         */\\n        decode(string: string): number[];\\n        /**\\n         * @deprecated since v7.0.0\\n         * The version of the punycode module bundled in Node.js is being deprecated.\\n         * In a future major version of Node.js this module will be removed.\\n         * Users currently depending on the punycode module should switch to using\\n         * the userland-provided Punycode.js module instead.\\n         */\\n        encode(codePoints: ReadonlyArray<number>): string;\\n    }\\n    /**\\n     * @deprecated since v7.0.0\\n     * The version of the punycode module bundled in Node.js is being deprecated.\\n     * In a future major version of Node.js this module will be removed.\\n     * Users currently depending on the punycode module should switch to using\\n     * the userland-provided Punycode.js module instead.\\n     */\\n    const version: string;\\n}\\ndeclare module 'node:punycode' {\\n    export * from 'punycode';\\n}\\n\",\"file:///node_modules/@types/node/querystring.d.ts\":\"/**\\n * The `querystring` module provides utilities for parsing and formatting URL\\n * query strings. It can be accessed using:\\n *\\n * ```js\\n * const querystring = require('querystring');\\n * ```\\n *\\n * `querystring` is more performant than `URLSearchParams` but is not a\\n * standardized API. Use `URLSearchParams` when performance is not critical\\n * or when compatibility with browser code is desirable.\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/querystring.js)\\n */\\ndeclare module 'querystring' {\\n    interface StringifyOptions {\\n        encodeURIComponent?: ((str: string) => string) | undefined;\\n    }\\n    interface ParseOptions {\\n        maxKeys?: number | undefined;\\n        decodeURIComponent?: ((str: string) => string) | undefined;\\n    }\\n    interface ParsedUrlQuery extends NodeJS.Dict<string | string[]> {}\\n    interface ParsedUrlQueryInput extends NodeJS.Dict<string | number | boolean | ReadonlyArray<string> | ReadonlyArray<number> | ReadonlyArray<boolean> | null> {}\\n    /**\\n     * The `querystring.stringify()` method produces a URL query string from a\\n     * given `obj` by iterating through the object's \\\"own properties\\\".\\n     *\\n     * It serializes the following types of values passed in `obj`:[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type) |\\n     * [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type) |\\n     * [bigint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) |\\n     * [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type) |\\n     * [string\\\\[\\\\]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type) |\\n     * [number\\\\[\\\\]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type) |\\n     * [bigint\\\\[\\\\]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) |\\n     * [boolean\\\\[\\\\]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type) The numeric values must be finite. Any other input values will be coerced to\\n     * empty strings.\\n     *\\n     * ```js\\n     * querystring.stringify({ foo: 'bar', baz: ['qux', 'quux'], corge: '' });\\n     * // Returns 'foo=bar&#x26;baz=qux&#x26;baz=quux&#x26;corge='\\n     *\\n     * querystring.stringify({ foo: 'bar', baz: 'qux' }, ';', ':');\\n     * // Returns 'foo:bar;baz:qux'\\n     * ```\\n     *\\n     * By default, characters requiring percent-encoding within the query string will\\n     * be encoded as UTF-8\\\\. If an alternative encoding is required, then an alternative`encodeURIComponent` option will need to be specified:\\n     *\\n     * ```js\\n     * // Assuming gbkEncodeURIComponent function already exists,\\n     *\\n     * querystring.stringify({ w: '\u4e2d\u6587', foo: 'bar' }, null, null,\\n     *                       { encodeURIComponent: gbkEncodeURIComponent });\\n     * ```\\n     * @since v0.1.25\\n     * @param obj The object to serialize into a URL query string\\n     * @param [sep='&'] The substring used to delimit key and value pairs in the query string.\\n     * @param [eq='='] . The substring used to delimit keys and values in the query string.\\n     */\\n    function stringify(obj?: ParsedUrlQueryInput, sep?: string, eq?: string, options?: StringifyOptions): string;\\n    /**\\n     * The `querystring.parse()` method parses a URL query string (`str`) into a\\n     * collection of key and value pairs.\\n     *\\n     * For example, the query string `'foo=bar&#x26;abc=xyz&#x26;abc=123'` is parsed into:\\n     *\\n     * ```js\\n     * {\\n     *   foo: 'bar',\\n     *   abc: ['xyz', '123']\\n     * }\\n     * ```\\n     *\\n     * The object returned by the `querystring.parse()` method _does not_prototypically inherit from the JavaScript `Object`. This means that typical`Object` methods such as `obj.toString()`,\\n     * `obj.hasOwnProperty()`, and others\\n     * are not defined and _will not work_.\\n     *\\n     * By default, percent-encoded characters within the query string will be assumed\\n     * to use UTF-8 encoding. If an alternative character encoding is used, then an\\n     * alternative `decodeURIComponent` option will need to be specified:\\n     *\\n     * ```js\\n     * // Assuming gbkDecodeURIComponent function already exists...\\n     *\\n     * querystring.parse('w=%D6%D0%CE%C4&#x26;foo=bar', null, null,\\n     *                   { decodeURIComponent: gbkDecodeURIComponent });\\n     * ```\\n     * @since v0.1.25\\n     * @param str The URL query string to parse\\n     * @param [sep='&'] The substring used to delimit key and value pairs in the query string.\\n     * @param [eq='='] . The substring used to delimit keys and values in the query string.\\n     */\\n    function parse(str: string, sep?: string, eq?: string, options?: ParseOptions): ParsedUrlQuery;\\n    /**\\n     * The querystring.encode() function is an alias for querystring.stringify().\\n     */\\n    const encode: typeof stringify;\\n    /**\\n     * The querystring.decode() function is an alias for querystring.parse().\\n     */\\n    const decode: typeof parse;\\n    /**\\n     * The `querystring.escape()` method performs URL percent-encoding on the given`str` in a manner that is optimized for the specific requirements of URL\\n     * query strings.\\n     *\\n     * The `querystring.escape()` method is used by `querystring.stringify()` and is\\n     * generally not expected to be used directly. It is exported primarily to allow\\n     * application code to provide a replacement percent-encoding implementation if\\n     * necessary by assigning `querystring.escape` to an alternative function.\\n     * @since v0.1.25\\n     */\\n    function escape(str: string): string;\\n    /**\\n     * The `querystring.unescape()` method performs decoding of URL percent-encoded\\n     * characters on the given `str`.\\n     *\\n     * The `querystring.unescape()` method is used by `querystring.parse()` and is\\n     * generally not expected to be used directly. It is exported primarily to allow\\n     * application code to provide a replacement decoding implementation if\\n     * necessary by assigning `querystring.unescape` to an alternative function.\\n     *\\n     * By default, the `querystring.unescape()` method will attempt to use the\\n     * JavaScript built-in `decodeURIComponent()` method to decode. If that fails,\\n     * a safer equivalent that does not throw on malformed URLs will be used.\\n     * @since v0.1.25\\n     */\\n    function unescape(str: string): string;\\n}\\ndeclare module 'node:querystring' {\\n    export * from 'querystring';\\n}\\n\",\"file:///node_modules/@types/node/readline.d.ts\":\"/**\\n * The `readline` module provides an interface for reading data from a `Readable` stream (such as `process.stdin`) one line at a time.\\n *\\n * To use the promise-based APIs:\\n *\\n * ```js\\n * import * as readline from 'node:readline/promises';\\n * ```\\n *\\n * To use the callback and sync APIs:\\n *\\n * ```js\\n * import * as readline from 'node:readline';\\n * ```\\n *\\n * The following simple example illustrates the basic use of the `readline` module.\\n *\\n * ```js\\n * import * as readline from 'node:readline/promises';\\n * import { stdin as input, stdout as output } from 'node:process';\\n *\\n * const rl = readline.createInterface({ input, output });\\n *\\n * const answer = await rl.question('What do you think of Node.js? ');\\n *\\n * console.log(`Thank you for your valuable feedback: ${answer}`);\\n *\\n * rl.close();\\n * ```\\n *\\n * Once this code is invoked, the Node.js application will not terminate until the`readline.Interface` is closed because the interface waits for data to be\\n * received on the `input` stream.\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/readline.js)\\n */\\ndeclare module 'readline' {\\n    import { Abortable, EventEmitter } from 'node:events';\\n    import * as promises from 'node:readline/promises';\\n\\n    export { promises };\\n    export interface Key {\\n        sequence?: string | undefined;\\n        name?: string | undefined;\\n        ctrl?: boolean | undefined;\\n        meta?: boolean | undefined;\\n        shift?: boolean | undefined;\\n    }\\n    /**\\n     * Instances of the `readline.Interface` class are constructed using the`readline.createInterface()` method. Every instance is associated with a\\n     * single `input` `Readable` stream and a single `output` `Writable` stream.\\n     * The `output` stream is used to print prompts for user input that arrives on,\\n     * and is read from, the `input` stream.\\n     * @since v0.1.104\\n     */\\n    export class Interface extends EventEmitter {\\n        readonly terminal: boolean;\\n        /**\\n         * The current input data being processed by node.\\n         *\\n         * This can be used when collecting input from a TTY stream to retrieve the\\n         * current value that has been processed thus far, prior to the `line` event\\n         * being emitted. Once the `line` event has been emitted, this property will\\n         * be an empty string.\\n         *\\n         * Be aware that modifying the value during the instance runtime may have\\n         * unintended consequences if `rl.cursor` is not also controlled.\\n         *\\n         * **If not using a TTY stream for input, use the `'line'` event.**\\n         *\\n         * One possible use case would be as follows:\\n         *\\n         * ```js\\n         * const values = ['lorem ipsum', 'dolor sit amet'];\\n         * const rl = readline.createInterface(process.stdin);\\n         * const showResults = debounce(() => {\\n         *   console.log(\\n         *     '\\\\n',\\n         *     values.filter((val) => val.startsWith(rl.line)).join(' ')\\n         *   );\\n         * }, 300);\\n         * process.stdin.on('keypress', (c, k) => {\\n         *   showResults();\\n         * });\\n         * ```\\n         * @since v0.1.98\\n         */\\n        readonly line: string;\\n        /**\\n         * The cursor position relative to `rl.line`.\\n         *\\n         * This will track where the current cursor lands in the input string, when\\n         * reading input from a TTY stream. The position of cursor determines the\\n         * portion of the input string that will be modified as input is processed,\\n         * as well as the column where the terminal caret will be rendered.\\n         * @since v0.1.98\\n         */\\n        readonly cursor: number;\\n        /**\\n         * NOTE: According to the documentation:\\n         *\\n         * > Instances of the `readline.Interface` class are constructed using the\\n         * > `readline.createInterface()` method.\\n         *\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/readline.html#readline_class_interface\\n         */\\n        protected constructor(input: NodeJS.ReadableStream, output?: NodeJS.WritableStream, completer?: Completer | AsyncCompleter, terminal?: boolean);\\n        /**\\n         * NOTE: According to the documentation:\\n         *\\n         * > Instances of the `readline.Interface` class are constructed using the\\n         * > `readline.createInterface()` method.\\n         *\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/readline.html#readline_class_interface\\n         */\\n        protected constructor(options: ReadLineOptions);\\n        /**\\n         * The `rl.getPrompt()` method returns the current prompt used by `rl.prompt()`.\\n         * @since v15.3.0\\n         * @return the current prompt string\\n         */\\n        getPrompt(): string;\\n        /**\\n         * The `rl.setPrompt()` method sets the prompt that will be written to `output`whenever `rl.prompt()` is called.\\n         * @since v0.1.98\\n         */\\n        setPrompt(prompt: string): void;\\n        /**\\n         * The `rl.prompt()` method writes the `readline.Interface` instances configured`prompt` to a new line in `output` in order to provide a user with a new\\n         * location at which to provide input.\\n         *\\n         * When called, `rl.prompt()` will resume the `input` stream if it has been\\n         * paused.\\n         *\\n         * If the `readline.Interface` was created with `output` set to `null` or`undefined` the prompt is not written.\\n         * @since v0.1.98\\n         * @param preserveCursor If `true`, prevents the cursor placement from being reset to `0`.\\n         */\\n        prompt(preserveCursor?: boolean): void;\\n        /**\\n         * The `rl.question()` method displays the `query` by writing it to the `output`,\\n         * waits for user input to be provided on `input`, then invokes the `callback`function passing the provided input as the first argument.\\n         *\\n         * When called, `rl.question()` will resume the `input` stream if it has been\\n         * paused.\\n         *\\n         * If the `readline.Interface` was created with `output` set to `null` or`undefined` the `query` is not written.\\n         *\\n         * The `callback` function passed to `rl.question()` does not follow the typical\\n         * pattern of accepting an `Error` object or `null` as the first argument.\\n         * The `callback` is called with the provided answer as the only argument.\\n         *\\n         * Example usage:\\n         *\\n         * ```js\\n         * rl.question('What is your favorite food? ', (answer) => {\\n         *   console.log(`Oh, so your favorite food is ${answer}`);\\n         * });\\n         * ```\\n         *\\n         * Using an `AbortController` to cancel a question.\\n         *\\n         * ```js\\n         * const ac = new AbortController();\\n         * const signal = ac.signal;\\n         *\\n         * rl.question('What is your favorite food? ', { signal }, (answer) => {\\n         *   console.log(`Oh, so your favorite food is ${answer}`);\\n         * });\\n         *\\n         * signal.addEventListener('abort', () => {\\n         *   console.log('The food question timed out');\\n         * }, { once: true });\\n         *\\n         * setTimeout(() => ac.abort(), 10000);\\n         * ```\\n         *\\n         * If this method is invoked as it's util.promisify()ed version, it returns a\\n         * Promise that fulfills with the answer. If the question is canceled using\\n         * an `AbortController` it will reject with an `AbortError`.\\n         *\\n         * ```js\\n         * const util = require('util');\\n         * const question = util.promisify(rl.question).bind(rl);\\n         *\\n         * async function questionExample() {\\n         *   try {\\n         *     const answer = await question('What is you favorite food? ');\\n         *     console.log(`Oh, so your favorite food is ${answer}`);\\n         *   } catch (err) {\\n         *     console.error('Question rejected', err);\\n         *   }\\n         * }\\n         * questionExample();\\n         * ```\\n         * @since v0.3.3\\n         * @param query A statement or query to write to `output`, prepended to the prompt.\\n         * @param callback A callback function that is invoked with the user's input in response to the `query`.\\n         */\\n        question(query: string, callback: (answer: string) => void): void;\\n        question(query: string, options: Abortable, callback: (answer: string) => void): void;\\n        /**\\n         * The `rl.pause()` method pauses the `input` stream, allowing it to be resumed\\n         * later if necessary.\\n         *\\n         * Calling `rl.pause()` does not immediately pause other events (including`'line'`) from being emitted by the `readline.Interface` instance.\\n         * @since v0.3.4\\n         */\\n        pause(): this;\\n        /**\\n         * The `rl.resume()` method resumes the `input` stream if it has been paused.\\n         * @since v0.3.4\\n         */\\n        resume(): this;\\n        /**\\n         * The `rl.close()` method closes the `readline.Interface` instance and\\n         * relinquishes control over the `input` and `output` streams. When called,\\n         * the `'close'` event will be emitted.\\n         *\\n         * Calling `rl.close()` does not immediately stop other events (including `'line'`)\\n         * from being emitted by the `readline.Interface` instance.\\n         * @since v0.1.98\\n         */\\n        close(): void;\\n        /**\\n         * The `rl.write()` method will write either `data` or a key sequence identified\\n         * by `key` to the `output`. The `key` argument is supported only if `output` is\\n         * a `TTY` text terminal. See `TTY keybindings` for a list of key\\n         * combinations.\\n         *\\n         * If `key` is specified, `data` is ignored.\\n         *\\n         * When called, `rl.write()` will resume the `input` stream if it has been\\n         * paused.\\n         *\\n         * If the `readline.Interface` was created with `output` set to `null` or`undefined` the `data` and `key` are not written.\\n         *\\n         * ```js\\n         * rl.write('Delete this!');\\n         * // Simulate Ctrl+U to delete the line written previously\\n         * rl.write(null, { ctrl: true, name: 'u' });\\n         * ```\\n         *\\n         * The `rl.write()` method will write the data to the `readline` `Interface`'s`input`_as if it were provided by the user_.\\n         * @since v0.1.98\\n         */\\n        write(data: string | Buffer, key?: Key): void;\\n        write(data: undefined | null | string | Buffer, key: Key): void;\\n        /**\\n         * Returns the real position of the cursor in relation to the input\\n         * prompt + string. Long input (wrapping) strings, as well as multiple\\n         * line prompts are included in the calculations.\\n         * @since v13.5.0, v12.16.0\\n         */\\n        getCursorPos(): CursorPos;\\n        /**\\n         * events.EventEmitter\\n         * 1. close\\n         * 2. line\\n         * 3. pause\\n         * 4. resume\\n         * 5. SIGCONT\\n         * 6. SIGINT\\n         * 7. SIGTSTP\\n         * 8. history\\n         */\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        addListener(event: 'close', listener: () => void): this;\\n        addListener(event: 'line', listener: (input: string) => void): this;\\n        addListener(event: 'pause', listener: () => void): this;\\n        addListener(event: 'resume', listener: () => void): this;\\n        addListener(event: 'SIGCONT', listener: () => void): this;\\n        addListener(event: 'SIGINT', listener: () => void): this;\\n        addListener(event: 'SIGTSTP', listener: () => void): this;\\n        addListener(event: 'history', listener: (history: string[]) => void): this;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        emit(event: 'close'): boolean;\\n        emit(event: 'line', input: string): boolean;\\n        emit(event: 'pause'): boolean;\\n        emit(event: 'resume'): boolean;\\n        emit(event: 'SIGCONT'): boolean;\\n        emit(event: 'SIGINT'): boolean;\\n        emit(event: 'SIGTSTP'): boolean;\\n        emit(event: 'history', history: string[]): boolean;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        on(event: 'close', listener: () => void): this;\\n        on(event: 'line', listener: (input: string) => void): this;\\n        on(event: 'pause', listener: () => void): this;\\n        on(event: 'resume', listener: () => void): this;\\n        on(event: 'SIGCONT', listener: () => void): this;\\n        on(event: 'SIGINT', listener: () => void): this;\\n        on(event: 'SIGTSTP', listener: () => void): this;\\n        on(event: 'history', listener: (history: string[]) => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        once(event: 'close', listener: () => void): this;\\n        once(event: 'line', listener: (input: string) => void): this;\\n        once(event: 'pause', listener: () => void): this;\\n        once(event: 'resume', listener: () => void): this;\\n        once(event: 'SIGCONT', listener: () => void): this;\\n        once(event: 'SIGINT', listener: () => void): this;\\n        once(event: 'SIGTSTP', listener: () => void): this;\\n        once(event: 'history', listener: (history: string[]) => void): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'close', listener: () => void): this;\\n        prependListener(event: 'line', listener: (input: string) => void): this;\\n        prependListener(event: 'pause', listener: () => void): this;\\n        prependListener(event: 'resume', listener: () => void): this;\\n        prependListener(event: 'SIGCONT', listener: () => void): this;\\n        prependListener(event: 'SIGINT', listener: () => void): this;\\n        prependListener(event: 'SIGTSTP', listener: () => void): this;\\n        prependListener(event: 'history', listener: (history: string[]) => void): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'close', listener: () => void): this;\\n        prependOnceListener(event: 'line', listener: (input: string) => void): this;\\n        prependOnceListener(event: 'pause', listener: () => void): this;\\n        prependOnceListener(event: 'resume', listener: () => void): this;\\n        prependOnceListener(event: 'SIGCONT', listener: () => void): this;\\n        prependOnceListener(event: 'SIGINT', listener: () => void): this;\\n        prependOnceListener(event: 'SIGTSTP', listener: () => void): this;\\n        prependOnceListener(event: 'history', listener: (history: string[]) => void): this;\\n        [Symbol.asyncIterator](): AsyncIterableIterator<string>;\\n    }\\n    export type ReadLine = Interface; // type forwarded for backwards compatibility\\n    export type Completer = (line: string) => CompleterResult;\\n    export type AsyncCompleter = (line: string, callback: (err?: null | Error, result?: CompleterResult) => void) => void;\\n    export type CompleterResult = [string[], string];\\n    export interface ReadLineOptions {\\n        input: NodeJS.ReadableStream;\\n        output?: NodeJS.WritableStream | undefined;\\n        completer?: Completer | AsyncCompleter | undefined;\\n        terminal?: boolean | undefined;\\n        /**\\n         *  Initial list of history lines. This option makes sense\\n         * only if `terminal` is set to `true` by the user or by an internal `output`\\n         * check, otherwise the history caching mechanism is not initialized at all.\\n         * @default []\\n         */\\n        history?: string[] | undefined;\\n        historySize?: number | undefined;\\n        prompt?: string | undefined;\\n        crlfDelay?: number | undefined;\\n        /**\\n         * If `true`, when a new input line added\\n         * to the history list duplicates an older one, this removes the older line\\n         * from the list.\\n         * @default false\\n         */\\n        removeHistoryDuplicates?: boolean | undefined;\\n        escapeCodeTimeout?: number | undefined;\\n        tabSize?: number | undefined;\\n    }\\n    /**\\n     * The `readline.createInterface()` method creates a new `readline.Interface`instance.\\n     *\\n     * ```js\\n     * const readline = require('readline');\\n     * const rl = readline.createInterface({\\n     *   input: process.stdin,\\n     *   output: process.stdout\\n     * });\\n     * ```\\n     *\\n     * Once the `readline.Interface` instance is created, the most common case is to\\n     * listen for the `'line'` event:\\n     *\\n     * ```js\\n     * rl.on('line', (line) => {\\n     *   console.log(`Received: ${line}`);\\n     * });\\n     * ```\\n     *\\n     * If `terminal` is `true` for this instance then the `output` stream will get\\n     * the best compatibility if it defines an `output.columns` property and emits\\n     * a `'resize'` event on the `output` if or when the columns ever change\\n     * (`process.stdout` does this automatically when it is a TTY).\\n     *\\n     * When creating a `readline.Interface` using `stdin` as input, the program\\n     * will not terminate until it receives `EOF` (Ctrl+D on\\n     * Linux/macOS, Ctrl+Z followed by Return on\\n     * Windows).\\n     * If you want your application to exit without waiting for user input, you can `unref()` the standard input stream:\\n     *\\n     * ```js\\n     * process.stdin.unref();\\n     * ```\\n     * @since v0.1.98\\n     */\\n    export function createInterface(input: NodeJS.ReadableStream, output?: NodeJS.WritableStream, completer?: Completer | AsyncCompleter, terminal?: boolean): Interface;\\n    export function createInterface(options: ReadLineOptions): Interface;\\n    /**\\n     * The `readline.emitKeypressEvents()` method causes the given `Readable` stream to begin emitting `'keypress'` events corresponding to received input.\\n     *\\n     * Optionally, `interface` specifies a `readline.Interface` instance for which\\n     * autocompletion is disabled when copy-pasted input is detected.\\n     *\\n     * If the `stream` is a `TTY`, then it must be in raw mode.\\n     *\\n     * This is automatically called by any readline instance on its `input` if the`input` is a terminal. Closing the `readline` instance does not stop\\n     * the `input` from emitting `'keypress'` events.\\n     *\\n     * ```js\\n     * readline.emitKeypressEvents(process.stdin);\\n     * if (process.stdin.isTTY)\\n     *   process.stdin.setRawMode(true);\\n     * ```\\n     *\\n     * ## Example: Tiny CLI\\n     *\\n     * The following example illustrates the use of `readline.Interface` class to\\n     * implement a small command-line interface:\\n     *\\n     * ```js\\n     * const readline = require('readline');\\n     * const rl = readline.createInterface({\\n     *   input: process.stdin,\\n     *   output: process.stdout,\\n     *   prompt: 'OHAI> '\\n     * });\\n     *\\n     * rl.prompt();\\n     *\\n     * rl.on('line', (line) => {\\n     *   switch (line.trim()) {\\n     *     case 'hello':\\n     *       console.log('world!');\\n     *       break;\\n     *     default:\\n     *       console.log(`Say what? I might have heard '${line.trim()}'`);\\n     *       break;\\n     *   }\\n     *   rl.prompt();\\n     * }).on('close', () => {\\n     *   console.log('Have a great day!');\\n     *   process.exit(0);\\n     * });\\n     * ```\\n     *\\n     * ## Example: Read file stream line-by-Line\\n     *\\n     * A common use case for `readline` is to consume an input file one line at a\\n     * time. The easiest way to do so is leveraging the `fs.ReadStream` API as\\n     * well as a `for await...of` loop:\\n     *\\n     * ```js\\n     * const fs = require('fs');\\n     * const readline = require('readline');\\n     *\\n     * async function processLineByLine() {\\n     *   const fileStream = fs.createReadStream('input.txt');\\n     *\\n     *   const rl = readline.createInterface({\\n     *     input: fileStream,\\n     *     crlfDelay: Infinity\\n     *   });\\n     *   // Note: we use the crlfDelay option to recognize all instances of CR LF\\n     *   // ('\\\\r\\\\n') in input.txt as a single line break.\\n     *\\n     *   for await (const line of rl) {\\n     *     // Each line in input.txt will be successively available here as `line`.\\n     *     console.log(`Line from file: ${line}`);\\n     *   }\\n     * }\\n     *\\n     * processLineByLine();\\n     * ```\\n     *\\n     * Alternatively, one could use the `'line'` event:\\n     *\\n     * ```js\\n     * const fs = require('fs');\\n     * const readline = require('readline');\\n     *\\n     * const rl = readline.createInterface({\\n     *   input: fs.createReadStream('sample.txt'),\\n     *   crlfDelay: Infinity\\n     * });\\n     *\\n     * rl.on('line', (line) => {\\n     *   console.log(`Line from file: ${line}`);\\n     * });\\n     * ```\\n     *\\n     * Currently, `for await...of` loop can be a bit slower. If `async` / `await`flow and speed are both essential, a mixed approach can be applied:\\n     *\\n     * ```js\\n     * const { once } = require('events');\\n     * const { createReadStream } = require('fs');\\n     * const { createInterface } = require('readline');\\n     *\\n     * (async function processLineByLine() {\\n     *   try {\\n     *     const rl = createInterface({\\n     *       input: createReadStream('big-file.txt'),\\n     *       crlfDelay: Infinity\\n     *     });\\n     *\\n     *     rl.on('line', (line) => {\\n     *       // Process the line.\\n     *     });\\n     *\\n     *     await once(rl, 'close');\\n     *\\n     *     console.log('File processed.');\\n     *   } catch (err) {\\n     *     console.error(err);\\n     *   }\\n     * })();\\n     * ```\\n     * @since v0.7.7\\n     */\\n    export function emitKeypressEvents(stream: NodeJS.ReadableStream, readlineInterface?: Interface): void;\\n    export type Direction = -1 | 0 | 1;\\n    export interface CursorPos {\\n        rows: number;\\n        cols: number;\\n    }\\n    /**\\n     * The `readline.clearLine()` method clears current line of given `TTY` stream\\n     * in a specified direction identified by `dir`.\\n     * @since v0.7.7\\n     * @param callback Invoked once the operation completes.\\n     * @return `false` if `stream` wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`.\\n     */\\n    export function clearLine(stream: NodeJS.WritableStream, dir: Direction, callback?: () => void): boolean;\\n    /**\\n     * The `readline.clearScreenDown()` method clears the given `TTY` stream from\\n     * the current position of the cursor down.\\n     * @since v0.7.7\\n     * @param callback Invoked once the operation completes.\\n     * @return `false` if `stream` wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`.\\n     */\\n    export function clearScreenDown(stream: NodeJS.WritableStream, callback?: () => void): boolean;\\n    /**\\n     * The `readline.cursorTo()` method moves cursor to the specified position in a\\n     * given `TTY` `stream`.\\n     * @since v0.7.7\\n     * @param callback Invoked once the operation completes.\\n     * @return `false` if `stream` wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`.\\n     */\\n    export function cursorTo(stream: NodeJS.WritableStream, x: number, y?: number, callback?: () => void): boolean;\\n    /**\\n     * The `readline.moveCursor()` method moves the cursor _relative_ to its current\\n     * position in a given `TTY` `stream`.\\n     *\\n     * ## Example: Tiny CLI\\n     *\\n     * The following example illustrates the use of `readline.Interface` class to\\n     * implement a small command-line interface:\\n     *\\n     * ```js\\n     * const readline = require('readline');\\n     * const rl = readline.createInterface({\\n     *   input: process.stdin,\\n     *   output: process.stdout,\\n     *   prompt: 'OHAI> '\\n     * });\\n     *\\n     * rl.prompt();\\n     *\\n     * rl.on('line', (line) => {\\n     *   switch (line.trim()) {\\n     *     case 'hello':\\n     *       console.log('world!');\\n     *       break;\\n     *     default:\\n     *       console.log(`Say what? I might have heard '${line.trim()}'`);\\n     *       break;\\n     *   }\\n     *   rl.prompt();\\n     * }).on('close', () => {\\n     *   console.log('Have a great day!');\\n     *   process.exit(0);\\n     * });\\n     * ```\\n     *\\n     * ## Example: Read file stream line-by-Line\\n     *\\n     * A common use case for `readline` is to consume an input file one line at a\\n     * time. The easiest way to do so is leveraging the `fs.ReadStream` API as\\n     * well as a `for await...of` loop:\\n     *\\n     * ```js\\n     * const fs = require('fs');\\n     * const readline = require('readline');\\n     *\\n     * async function processLineByLine() {\\n     *   const fileStream = fs.createReadStream('input.txt');\\n     *\\n     *   const rl = readline.createInterface({\\n     *     input: fileStream,\\n     *     crlfDelay: Infinity\\n     *   });\\n     *   // Note: we use the crlfDelay option to recognize all instances of CR LF\\n     *   // ('\\\\r\\\\n') in input.txt as a single line break.\\n     *\\n     *   for await (const line of rl) {\\n     *     // Each line in input.txt will be successively available here as `line`.\\n     *     console.log(`Line from file: ${line}`);\\n     *   }\\n     * }\\n     *\\n     * processLineByLine();\\n     * ```\\n     *\\n     * Alternatively, one could use the `'line'` event:\\n     *\\n     * ```js\\n     * const fs = require('fs');\\n     * const readline = require('readline');\\n     *\\n     * const rl = readline.createInterface({\\n     *   input: fs.createReadStream('sample.txt'),\\n     *   crlfDelay: Infinity\\n     * });\\n     *\\n     * rl.on('line', (line) => {\\n     *   console.log(`Line from file: ${line}`);\\n     * });\\n     * ```\\n     *\\n     * Currently, `for await...of` loop can be a bit slower. If `async` / `await`flow and speed are both essential, a mixed approach can be applied:\\n     *\\n     * ```js\\n     * const { once } = require('events');\\n     * const { createReadStream } = require('fs');\\n     * const { createInterface } = require('readline');\\n     *\\n     * (async function processLineByLine() {\\n     *   try {\\n     *     const rl = createInterface({\\n     *       input: createReadStream('big-file.txt'),\\n     *       crlfDelay: Infinity\\n     *     });\\n     *\\n     *     rl.on('line', (line) => {\\n     *       // Process the line.\\n     *     });\\n     *\\n     *     await once(rl, 'close');\\n     *\\n     *     console.log('File processed.');\\n     *   } catch (err) {\\n     *     console.error(err);\\n     *   }\\n     * })();\\n     * ```\\n     * @since v0.7.7\\n     * @param callback Invoked once the operation completes.\\n     * @return `false` if `stream` wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`.\\n     */\\n    export function moveCursor(stream: NodeJS.WritableStream, dx: number, dy: number, callback?: () => void): boolean;\\n}\\ndeclare module 'node:readline' {\\n    export * from 'readline';\\n}\\n\",\"file:///node_modules/@types/node/repl.d.ts\":\"/**\\n * The `repl` module provides a Read-Eval-Print-Loop (REPL) implementation that\\n * is available both as a standalone program or includible in other applications.\\n * It can be accessed using:\\n *\\n * ```js\\n * const repl = require('repl');\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/repl.js)\\n */\\ndeclare module 'repl' {\\n    import { Interface, Completer, AsyncCompleter } from 'node:readline';\\n    import { Context } from 'node:vm';\\n    import { InspectOptions } from 'node:util';\\n    interface ReplOptions {\\n        /**\\n         * The input prompt to display.\\n         * @default \\\"> \\\"\\n         */\\n        prompt?: string | undefined;\\n        /**\\n         * The `Readable` stream from which REPL input will be read.\\n         * @default process.stdin\\n         */\\n        input?: NodeJS.ReadableStream | undefined;\\n        /**\\n         * The `Writable` stream to which REPL output will be written.\\n         * @default process.stdout\\n         */\\n        output?: NodeJS.WritableStream | undefined;\\n        /**\\n         * If `true`, specifies that the output should be treated as a TTY terminal, and have\\n         * ANSI/VT100 escape codes written to it.\\n         * Default: checking the value of the `isTTY` property on the output stream upon\\n         * instantiation.\\n         */\\n        terminal?: boolean | undefined;\\n        /**\\n         * The function to be used when evaluating each given line of input.\\n         * Default: an async wrapper for the JavaScript `eval()` function. An `eval` function can\\n         * error with `repl.Recoverable` to indicate the input was incomplete and prompt for\\n         * additional lines.\\n         *\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_default_evaluation\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_custom_evaluation_functions\\n         */\\n        eval?: REPLEval | undefined;\\n        /**\\n         * Defines if the repl prints output previews or not.\\n         * @default `true` Always `false` in case `terminal` is falsy.\\n         */\\n        preview?: boolean | undefined;\\n        /**\\n         * If `true`, specifies that the default `writer` function should include ANSI color\\n         * styling to REPL output. If a custom `writer` function is provided then this has no\\n         * effect.\\n         * Default: the REPL instance's `terminal` value.\\n         */\\n        useColors?: boolean | undefined;\\n        /**\\n         * If `true`, specifies that the default evaluation function will use the JavaScript\\n         * `global` as the context as opposed to creating a new separate context for the REPL\\n         * instance. The node CLI REPL sets this value to `true`.\\n         * Default: `false`.\\n         */\\n        useGlobal?: boolean | undefined;\\n        /**\\n         * If `true`, specifies that the default writer will not output the return value of a\\n         * command if it evaluates to `undefined`.\\n         * Default: `false`.\\n         */\\n        ignoreUndefined?: boolean | undefined;\\n        /**\\n         * The function to invoke to format the output of each command before writing to `output`.\\n         * Default: a wrapper for `util.inspect`.\\n         *\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_customizing_repl_output\\n         */\\n        writer?: REPLWriter | undefined;\\n        /**\\n         * An optional function used for custom Tab auto completion.\\n         *\\n         * @see https://nodejs.org/dist/latest-v11.x/docs/api/readline.html#readline_use_of_the_completer_function\\n         */\\n        completer?: Completer | AsyncCompleter | undefined;\\n        /**\\n         * A flag that specifies whether the default evaluator executes all JavaScript commands in\\n         * strict mode or default (sloppy) mode.\\n         * Accepted values are:\\n         * - `repl.REPL_MODE_SLOPPY` - evaluates expressions in sloppy mode.\\n         * - `repl.REPL_MODE_STRICT` - evaluates expressions in strict mode. This is equivalent to\\n         *   prefacing every repl statement with `'use strict'`.\\n         */\\n        replMode?: typeof REPL_MODE_SLOPPY | typeof REPL_MODE_STRICT | undefined;\\n        /**\\n         * Stop evaluating the current piece of code when `SIGINT` is received, i.e. `Ctrl+C` is\\n         * pressed. This cannot be used together with a custom `eval` function.\\n         * Default: `false`.\\n         */\\n        breakEvalOnSigint?: boolean | undefined;\\n    }\\n    type REPLEval = (this: REPLServer, evalCmd: string, context: Context, file: string, cb: (err: Error | null, result: any) => void) => void;\\n    type REPLWriter = (this: REPLServer, obj: any) => string;\\n    /**\\n     * This is the default \\\"writer\\\" value, if none is passed in the REPL options,\\n     * and it can be overridden by custom print functions.\\n     */\\n    const writer: REPLWriter & {\\n        options: InspectOptions;\\n    };\\n    type REPLCommandAction = (this: REPLServer, text: string) => void;\\n    interface REPLCommand {\\n        /**\\n         * Help text to be displayed when `.help` is entered.\\n         */\\n        help?: string | undefined;\\n        /**\\n         * The function to execute, optionally accepting a single string argument.\\n         */\\n        action: REPLCommandAction;\\n    }\\n    /**\\n     * Instances of `repl.REPLServer` are created using the {@link start} method\\n     * or directly using the JavaScript `new` keyword.\\n     *\\n     * ```js\\n     * const repl = require('repl');\\n     *\\n     * const options = { useColors: true };\\n     *\\n     * const firstInstance = repl.start(options);\\n     * const secondInstance = new repl.REPLServer(options);\\n     * ```\\n     * @since v0.1.91\\n     */\\n    class REPLServer extends Interface {\\n        /**\\n         * The `vm.Context` provided to the `eval` function to be used for JavaScript\\n         * evaluation.\\n         */\\n        readonly context: Context;\\n        /**\\n         * @deprecated since v14.3.0 - Use `input` instead.\\n         */\\n        readonly inputStream: NodeJS.ReadableStream;\\n        /**\\n         * @deprecated since v14.3.0 - Use `output` instead.\\n         */\\n        readonly outputStream: NodeJS.WritableStream;\\n        /**\\n         * The `Readable` stream from which REPL input will be read.\\n         */\\n        readonly input: NodeJS.ReadableStream;\\n        /**\\n         * The `Writable` stream to which REPL output will be written.\\n         */\\n        readonly output: NodeJS.WritableStream;\\n        /**\\n         * The commands registered via `replServer.defineCommand()`.\\n         */\\n        readonly commands: NodeJS.ReadOnlyDict<REPLCommand>;\\n        /**\\n         * A value indicating whether the REPL is currently in \\\"editor mode\\\".\\n         *\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_commands_and_special_keys\\n         */\\n        readonly editorMode: boolean;\\n        /**\\n         * A value indicating whether the `_` variable has been assigned.\\n         *\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_assignment_of_the_underscore_variable\\n         */\\n        readonly underscoreAssigned: boolean;\\n        /**\\n         * The last evaluation result from the REPL (assigned to the `_` variable inside of the REPL).\\n         *\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_assignment_of_the_underscore_variable\\n         */\\n        readonly last: any;\\n        /**\\n         * A value indicating whether the `_error` variable has been assigned.\\n         *\\n         * @since v9.8.0\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_assignment_of_the_underscore_variable\\n         */\\n        readonly underscoreErrAssigned: boolean;\\n        /**\\n         * The last error raised inside the REPL (assigned to the `_error` variable inside of the REPL).\\n         *\\n         * @since v9.8.0\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_assignment_of_the_underscore_variable\\n         */\\n        readonly lastError: any;\\n        /**\\n         * Specified in the REPL options, this is the function to be used when evaluating each\\n         * given line of input. If not specified in the REPL options, this is an async wrapper\\n         * for the JavaScript `eval()` function.\\n         */\\n        readonly eval: REPLEval;\\n        /**\\n         * Specified in the REPL options, this is a value indicating whether the default\\n         * `writer` function should include ANSI color styling to REPL output.\\n         */\\n        readonly useColors: boolean;\\n        /**\\n         * Specified in the REPL options, this is a value indicating whether the default `eval`\\n         * function will use the JavaScript `global` as the context as opposed to creating a new\\n         * separate context for the REPL instance.\\n         */\\n        readonly useGlobal: boolean;\\n        /**\\n         * Specified in the REPL options, this is a value indicating whether the default `writer`\\n         * function should output the result of a command if it evaluates to `undefined`.\\n         */\\n        readonly ignoreUndefined: boolean;\\n        /**\\n         * Specified in the REPL options, this is the function to invoke to format the output of\\n         * each command before writing to `outputStream`. If not specified in the REPL options,\\n         * this will be a wrapper for `util.inspect`.\\n         */\\n        readonly writer: REPLWriter;\\n        /**\\n         * Specified in the REPL options, this is the function to use for custom Tab auto-completion.\\n         */\\n        readonly completer: Completer | AsyncCompleter;\\n        /**\\n         * Specified in the REPL options, this is a flag that specifies whether the default `eval`\\n         * function should execute all JavaScript commands in strict mode or default (sloppy) mode.\\n         * Possible values are:\\n         * - `repl.REPL_MODE_SLOPPY` - evaluates expressions in sloppy mode.\\n         * - `repl.REPL_MODE_STRICT` - evaluates expressions in strict mode. This is equivalent to\\n         *    prefacing every repl statement with `'use strict'`.\\n         */\\n        readonly replMode: typeof REPL_MODE_SLOPPY | typeof REPL_MODE_STRICT;\\n        /**\\n         * NOTE: According to the documentation:\\n         *\\n         * > Instances of `repl.REPLServer` are created using the `repl.start()` method and\\n         * > _should not_ be created directly using the JavaScript `new` keyword.\\n         *\\n         * `REPLServer` cannot be subclassed due to implementation specifics in NodeJS.\\n         *\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_class_replserver\\n         */\\n        private constructor();\\n        /**\\n         * The `replServer.defineCommand()` method is used to add new `.`\\\\-prefixed commands\\n         * to the REPL instance. Such commands are invoked by typing a `.` followed by the`keyword`. The `cmd` is either a `Function` or an `Object` with the following\\n         * properties:\\n         *\\n         * The following example shows two new commands added to the REPL instance:\\n         *\\n         * ```js\\n         * const repl = require('repl');\\n         *\\n         * const replServer = repl.start({ prompt: '> ' });\\n         * replServer.defineCommand('sayhello', {\\n         *   help: 'Say hello',\\n         *   action(name) {\\n         *     this.clearBufferedCommand();\\n         *     console.log(`Hello, ${name}!`);\\n         *     this.displayPrompt();\\n         *   }\\n         * });\\n         * replServer.defineCommand('saybye', function saybye() {\\n         *   console.log('Goodbye!');\\n         *   this.close();\\n         * });\\n         * ```\\n         *\\n         * The new commands can then be used from within the REPL instance:\\n         *\\n         * ```console\\n         * > .sayhello Node.js User\\n         * Hello, Node.js User!\\n         * > .saybye\\n         * Goodbye!\\n         * ```\\n         * @since v0.3.0\\n         * @param keyword The command keyword (_without_ a leading `.` character).\\n         * @param cmd The function to invoke when the command is processed.\\n         */\\n        defineCommand(keyword: string, cmd: REPLCommandAction | REPLCommand): void;\\n        /**\\n         * The `replServer.displayPrompt()` method readies the REPL instance for input\\n         * from the user, printing the configured `prompt` to a new line in the `output`and resuming the `input` to accept new input.\\n         *\\n         * When multi-line input is being entered, an ellipsis is printed rather than the\\n         * 'prompt'.\\n         *\\n         * When `preserveCursor` is `true`, the cursor placement will not be reset to `0`.\\n         *\\n         * The `replServer.displayPrompt` method is primarily intended to be called from\\n         * within the action function for commands registered using the`replServer.defineCommand()` method.\\n         * @since v0.1.91\\n         */\\n        displayPrompt(preserveCursor?: boolean): void;\\n        /**\\n         * The `replServer.clearBufferedCommand()` method clears any command that has been\\n         * buffered but not yet executed. This method is primarily intended to be\\n         * called from within the action function for commands registered using the`replServer.defineCommand()` method.\\n         * @since v9.0.0\\n         */\\n        clearBufferedCommand(): void;\\n        /**\\n         * Initializes a history log file for the REPL instance. When executing the\\n         * Node.js binary and using the command-line REPL, a history file is initialized\\n         * by default. However, this is not the case when creating a REPL\\n         * programmatically. Use this method to initialize a history log file when working\\n         * with REPL instances programmatically.\\n         * @since v11.10.0\\n         * @param historyPath the path to the history file\\n         * @param callback called when history writes are ready or upon error\\n         */\\n        setupHistory(path: string, callback: (err: Error | null, repl: this) => void): void;\\n        /**\\n         * events.EventEmitter\\n         * 1. close - inherited from `readline.Interface`\\n         * 2. line - inherited from `readline.Interface`\\n         * 3. pause - inherited from `readline.Interface`\\n         * 4. resume - inherited from `readline.Interface`\\n         * 5. SIGCONT - inherited from `readline.Interface`\\n         * 6. SIGINT - inherited from `readline.Interface`\\n         * 7. SIGTSTP - inherited from `readline.Interface`\\n         * 8. exit\\n         * 9. reset\\n         */\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        addListener(event: 'close', listener: () => void): this;\\n        addListener(event: 'line', listener: (input: string) => void): this;\\n        addListener(event: 'pause', listener: () => void): this;\\n        addListener(event: 'resume', listener: () => void): this;\\n        addListener(event: 'SIGCONT', listener: () => void): this;\\n        addListener(event: 'SIGINT', listener: () => void): this;\\n        addListener(event: 'SIGTSTP', listener: () => void): this;\\n        addListener(event: 'exit', listener: () => void): this;\\n        addListener(event: 'reset', listener: (context: Context) => void): this;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        emit(event: 'close'): boolean;\\n        emit(event: 'line', input: string): boolean;\\n        emit(event: 'pause'): boolean;\\n        emit(event: 'resume'): boolean;\\n        emit(event: 'SIGCONT'): boolean;\\n        emit(event: 'SIGINT'): boolean;\\n        emit(event: 'SIGTSTP'): boolean;\\n        emit(event: 'exit'): boolean;\\n        emit(event: 'reset', context: Context): boolean;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        on(event: 'close', listener: () => void): this;\\n        on(event: 'line', listener: (input: string) => void): this;\\n        on(event: 'pause', listener: () => void): this;\\n        on(event: 'resume', listener: () => void): this;\\n        on(event: 'SIGCONT', listener: () => void): this;\\n        on(event: 'SIGINT', listener: () => void): this;\\n        on(event: 'SIGTSTP', listener: () => void): this;\\n        on(event: 'exit', listener: () => void): this;\\n        on(event: 'reset', listener: (context: Context) => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        once(event: 'close', listener: () => void): this;\\n        once(event: 'line', listener: (input: string) => void): this;\\n        once(event: 'pause', listener: () => void): this;\\n        once(event: 'resume', listener: () => void): this;\\n        once(event: 'SIGCONT', listener: () => void): this;\\n        once(event: 'SIGINT', listener: () => void): this;\\n        once(event: 'SIGTSTP', listener: () => void): this;\\n        once(event: 'exit', listener: () => void): this;\\n        once(event: 'reset', listener: (context: Context) => void): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'close', listener: () => void): this;\\n        prependListener(event: 'line', listener: (input: string) => void): this;\\n        prependListener(event: 'pause', listener: () => void): this;\\n        prependListener(event: 'resume', listener: () => void): this;\\n        prependListener(event: 'SIGCONT', listener: () => void): this;\\n        prependListener(event: 'SIGINT', listener: () => void): this;\\n        prependListener(event: 'SIGTSTP', listener: () => void): this;\\n        prependListener(event: 'exit', listener: () => void): this;\\n        prependListener(event: 'reset', listener: (context: Context) => void): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'close', listener: () => void): this;\\n        prependOnceListener(event: 'line', listener: (input: string) => void): this;\\n        prependOnceListener(event: 'pause', listener: () => void): this;\\n        prependOnceListener(event: 'resume', listener: () => void): this;\\n        prependOnceListener(event: 'SIGCONT', listener: () => void): this;\\n        prependOnceListener(event: 'SIGINT', listener: () => void): this;\\n        prependOnceListener(event: 'SIGTSTP', listener: () => void): this;\\n        prependOnceListener(event: 'exit', listener: () => void): this;\\n        prependOnceListener(event: 'reset', listener: (context: Context) => void): this;\\n    }\\n    /**\\n     * A flag passed in the REPL options. Evaluates expressions in sloppy mode.\\n     */\\n    const REPL_MODE_SLOPPY: unique symbol;\\n    /**\\n     * A flag passed in the REPL options. Evaluates expressions in strict mode.\\n     * This is equivalent to prefacing every repl statement with `'use strict'`.\\n     */\\n    const REPL_MODE_STRICT: unique symbol;\\n    /**\\n     * The `repl.start()` method creates and starts a {@link REPLServer} instance.\\n     *\\n     * If `options` is a string, then it specifies the input prompt:\\n     *\\n     * ```js\\n     * const repl = require('repl');\\n     *\\n     * // a Unix style prompt\\n     * repl.start('$ ');\\n     * ```\\n     * @since v0.1.91\\n     */\\n    function start(options?: string | ReplOptions): REPLServer;\\n    /**\\n     * Indicates a recoverable error that a `REPLServer` can use to support multi-line input.\\n     *\\n     * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_recoverable_errors\\n     */\\n    class Recoverable extends SyntaxError {\\n        err: Error;\\n        constructor(err: Error);\\n    }\\n}\\ndeclare module 'node:repl' {\\n    export * from 'repl';\\n}\\n\",\"file:///node_modules/@types/node/stream.d.ts\":\"/**\\n * A stream is an abstract interface for working with streaming data in Node.js.\\n * The `stream` module provides an API for implementing the stream interface.\\n *\\n * There are many stream objects provided by Node.js. For instance, a `request to an HTTP server` and `process.stdout` are both stream instances.\\n *\\n * Streams can be readable, writable, or both. All streams are instances of `EventEmitter`.\\n *\\n * To access the `stream` module:\\n *\\n * ```js\\n * const stream = require('stream');\\n * ```\\n *\\n * The `stream` module is useful for creating new types of stream instances. It is\\n * usually not necessary to use the `stream` module to consume streams.\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/stream.js)\\n */\\ndeclare module 'stream' {\\n    import { EventEmitter, Abortable } from 'node:events';\\n    import { Blob as NodeBlob } from \\\"node:buffer\\\";\\n    import * as streamPromises from 'node:stream/promises';\\n    import * as streamConsumers from 'node:stream/consumers';\\n    import * as streamWeb from 'node:stream/web';\\n    class internal extends EventEmitter {\\n        pipe<T extends NodeJS.WritableStream>(\\n            destination: T,\\n            options?: {\\n                end?: boolean | undefined;\\n            }\\n        ): T;\\n    }\\n    namespace internal {\\n        class Stream extends internal {\\n            constructor(opts?: ReadableOptions);\\n        }\\n        interface StreamOptions<T extends Stream> extends Abortable {\\n            emitClose?: boolean | undefined;\\n            highWaterMark?: number | undefined;\\n            objectMode?: boolean | undefined;\\n            construct?(this: T, callback: (error?: Error | null) => void): void;\\n            destroy?(this: T, error: Error | null, callback: (error: Error | null) => void): void;\\n            autoDestroy?: boolean | undefined;\\n        }\\n        interface ReadableOptions extends StreamOptions<Readable> {\\n            encoding?: BufferEncoding | undefined;\\n            read?(this: Readable, size: number): void;\\n        }\\n        /**\\n         * @since v0.9.4\\n         */\\n        class Readable extends Stream implements NodeJS.ReadableStream {\\n            /**\\n             * A utility method for creating Readable Streams out of iterators.\\n             */\\n            static from(iterable: Iterable<any> | AsyncIterable<any>, options?: ReadableOptions): Readable;\\n            /**\\n             * A utility method for creating a `Readable` from a web `ReadableStream`.\\n             * @since v17.0.0\\n             * @experimental\\n             */\\n            static fromWeb(readableStream: streamWeb.ReadableStream, options?: Pick<ReadableOptions, 'encoding' | 'highWaterMark' | 'objectMode' | 'signal'>): Readable;\\n            /**\\n             * Returns whether the stream has been read from or cancelled.\\n             * @since v16.8.0\\n             */\\n            static isDisturbed(stream: Readable | NodeJS.ReadableStream): boolean;\\n            /**\\n             * A utility method for creating a web `ReadableStream` from a `Readable`.\\n             * @since v17.0.0\\n             * @experimental\\n             */\\n            static toWeb(streamReadable: Readable): streamWeb.ReadableStream;\\n            /**\\n             * Returns whether the stream was destroyed or errored before emitting `'end'`.\\n             * @since v16.8.0\\n             * @experimental\\n             */\\n            readonly readableAborted: boolean;\\n            /**\\n             * Is `true` if it is safe to call `readable.read()`, which means\\n             * the stream has not been destroyed or emitted `'error'` or `'end'`.\\n             * @since v11.4.0\\n             */\\n            readable: boolean;\\n            /**\\n             * Returns whether `'data'` has been emitted.\\n             * @since v16.7.0, v14.18.0\\n             * @experimental\\n             */\\n            readonly readableDidRead: boolean;\\n            /**\\n             * Getter for the property `encoding` of a given `Readable` stream. The `encoding`property can be set using the `readable.setEncoding()` method.\\n             * @since v12.7.0\\n             */\\n            readonly readableEncoding: BufferEncoding | null;\\n            /**\\n             * Becomes `true` when `'end'` event is emitted.\\n             * @since v12.9.0\\n             */\\n            readonly readableEnded: boolean;\\n            /**\\n             * This property reflects the current state of a `Readable` stream as described\\n             * in the `Three states` section.\\n             * @since v9.4.0\\n             */\\n            readonly readableFlowing: boolean | null;\\n            /**\\n             * Returns the value of `highWaterMark` passed when creating this `Readable`.\\n             * @since v9.3.0\\n             */\\n            readonly readableHighWaterMark: number;\\n            /**\\n             * This property contains the number of bytes (or objects) in the queue\\n             * ready to be read. The value provides introspection data regarding\\n             * the status of the `highWaterMark`.\\n             * @since v9.4.0\\n             */\\n            readonly readableLength: number;\\n            /**\\n             * Getter for the property `objectMode` of a given `Readable` stream.\\n             * @since v12.3.0\\n             */\\n            readonly readableObjectMode: boolean;\\n            /**\\n             * Is `true` after `readable.destroy()` has been called.\\n             * @since v8.0.0\\n             */\\n            destroyed: boolean;\\n            /**\\n             * Is true after 'close' has been emitted.\\n             * @since v18.0.0\\n             */\\n            readonly closed: boolean;\\n            /**\\n             * Returns error if the stream has been destroyed with an error.\\n             * @since v18.0.0\\n             */\\n            readonly errored: Error | null;\\n            constructor(opts?: ReadableOptions);\\n            _construct?(callback: (error?: Error | null) => void): void;\\n            _read(size: number): void;\\n            /**\\n             * The `readable.read()` method reads data out of the internal buffer and\\n             * returns it. If no data is available to be read, `null` is returned. By default,\\n             * the data is returned as a `Buffer` object unless an encoding has been\\n             * specified using the `readable.setEncoding()` method or the stream is operating\\n             * in object mode.\\n             *\\n             * The optional `size` argument specifies a specific number of bytes to read. If`size` bytes are not available to be read, `null` will be returned _unless_the stream has ended, in which\\n             * case all of the data remaining in the internal\\n             * buffer will be returned.\\n             *\\n             * If the `size` argument is not specified, all of the data contained in the\\n             * internal buffer will be returned.\\n             *\\n             * The `size` argument must be less than or equal to 1 GiB.\\n             *\\n             * The `readable.read()` method should only be called on `Readable` streams\\n             * operating in paused mode. In flowing mode, `readable.read()` is called\\n             * automatically until the internal buffer is fully drained.\\n             *\\n             * ```js\\n             * const readable = getReadableStreamSomehow();\\n             *\\n             * // 'readable' may be triggered multiple times as data is buffered in\\n             * readable.on('readable', () => {\\n             *   let chunk;\\n             *   console.log('Stream is readable (new data received in buffer)');\\n             *   // Use a loop to make sure we read all currently available data\\n             *   while (null !== (chunk = readable.read())) {\\n             *     console.log(`Read ${chunk.length} bytes of data...`);\\n             *   }\\n             * });\\n             *\\n             * // 'end' will be triggered once when there is no more data available\\n             * readable.on('end', () => {\\n             *   console.log('Reached end of stream.');\\n             * });\\n             * ```\\n             *\\n             * Each call to `readable.read()` returns a chunk of data, or `null`. The chunks\\n             * are not concatenated. A `while` loop is necessary to consume all data\\n             * currently in the buffer. When reading a large file `.read()` may return `null`,\\n             * having consumed all buffered content so far, but there is still more data to\\n             * come not yet buffered. In this case a new `'readable'` event will be emitted\\n             * when there is more data in the buffer. Finally the `'end'` event will be\\n             * emitted when there is no more data to come.\\n             *\\n             * Therefore to read a file's whole contents from a `readable`, it is necessary\\n             * to collect chunks across multiple `'readable'` events:\\n             *\\n             * ```js\\n             * const chunks = [];\\n             *\\n             * readable.on('readable', () => {\\n             *   let chunk;\\n             *   while (null !== (chunk = readable.read())) {\\n             *     chunks.push(chunk);\\n             *   }\\n             * });\\n             *\\n             * readable.on('end', () => {\\n             *   const content = chunks.join('');\\n             * });\\n             * ```\\n             *\\n             * A `Readable` stream in object mode will always return a single item from\\n             * a call to `readable.read(size)`, regardless of the value of the`size` argument.\\n             *\\n             * If the `readable.read()` method returns a chunk of data, a `'data'` event will\\n             * also be emitted.\\n             *\\n             * Calling {@link read} after the `'end'` event has\\n             * been emitted will return `null`. No runtime error will be raised.\\n             * @since v0.9.4\\n             * @param size Optional argument to specify how much data to read.\\n             */\\n            read(size?: number): any;\\n            /**\\n             * The `readable.setEncoding()` method sets the character encoding for\\n             * data read from the `Readable` stream.\\n             *\\n             * By default, no encoding is assigned and stream data will be returned as`Buffer` objects. Setting an encoding causes the stream data\\n             * to be returned as strings of the specified encoding rather than as `Buffer`objects. For instance, calling `readable.setEncoding('utf8')` will cause the\\n             * output data to be interpreted as UTF-8 data, and passed as strings. Calling`readable.setEncoding('hex')` will cause the data to be encoded in hexadecimal\\n             * string format.\\n             *\\n             * The `Readable` stream will properly handle multi-byte characters delivered\\n             * through the stream that would otherwise become improperly decoded if simply\\n             * pulled from the stream as `Buffer` objects.\\n             *\\n             * ```js\\n             * const readable = getReadableStreamSomehow();\\n             * readable.setEncoding('utf8');\\n             * readable.on('data', (chunk) => {\\n             *   assert.equal(typeof chunk, 'string');\\n             *   console.log('Got %d characters of string data:', chunk.length);\\n             * });\\n             * ```\\n             * @since v0.9.4\\n             * @param encoding The encoding to use.\\n             */\\n            setEncoding(encoding: BufferEncoding): this;\\n            /**\\n             * The `readable.pause()` method will cause a stream in flowing mode to stop\\n             * emitting `'data'` events, switching out of flowing mode. Any data that\\n             * becomes available will remain in the internal buffer.\\n             *\\n             * ```js\\n             * const readable = getReadableStreamSomehow();\\n             * readable.on('data', (chunk) => {\\n             *   console.log(`Received ${chunk.length} bytes of data.`);\\n             *   readable.pause();\\n             *   console.log('There will be no additional data for 1 second.');\\n             *   setTimeout(() => {\\n             *     console.log('Now data will start flowing again.');\\n             *     readable.resume();\\n             *   }, 1000);\\n             * });\\n             * ```\\n             *\\n             * The `readable.pause()` method has no effect if there is a `'readable'`event listener.\\n             * @since v0.9.4\\n             */\\n            pause(): this;\\n            /**\\n             * The `readable.resume()` method causes an explicitly paused `Readable` stream to\\n             * resume emitting `'data'` events, switching the stream into flowing mode.\\n             *\\n             * The `readable.resume()` method can be used to fully consume the data from a\\n             * stream without actually processing any of that data:\\n             *\\n             * ```js\\n             * getReadableStreamSomehow()\\n             *   .resume()\\n             *   .on('end', () => {\\n             *     console.log('Reached the end, but did not read anything.');\\n             *   });\\n             * ```\\n             *\\n             * The `readable.resume()` method has no effect if there is a `'readable'`event listener.\\n             * @since v0.9.4\\n             */\\n            resume(): this;\\n            /**\\n             * The `readable.isPaused()` method returns the current operating state of the`Readable`. This is used primarily by the mechanism that underlies the`readable.pipe()` method. In most\\n             * typical cases, there will be no reason to\\n             * use this method directly.\\n             *\\n             * ```js\\n             * const readable = new stream.Readable();\\n             *\\n             * readable.isPaused(); // === false\\n             * readable.pause();\\n             * readable.isPaused(); // === true\\n             * readable.resume();\\n             * readable.isPaused(); // === false\\n             * ```\\n             * @since v0.11.14\\n             */\\n            isPaused(): boolean;\\n            /**\\n             * The `readable.unpipe()` method detaches a `Writable` stream previously attached\\n             * using the {@link pipe} method.\\n             *\\n             * If the `destination` is not specified, then _all_ pipes are detached.\\n             *\\n             * If the `destination` is specified, but no pipe is set up for it, then\\n             * the method does nothing.\\n             *\\n             * ```js\\n             * const fs = require('fs');\\n             * const readable = getReadableStreamSomehow();\\n             * const writable = fs.createWriteStream('file.txt');\\n             * // All the data from readable goes into 'file.txt',\\n             * // but only for the first second.\\n             * readable.pipe(writable);\\n             * setTimeout(() => {\\n             *   console.log('Stop writing to file.txt.');\\n             *   readable.unpipe(writable);\\n             *   console.log('Manually close the file stream.');\\n             *   writable.end();\\n             * }, 1000);\\n             * ```\\n             * @since v0.9.4\\n             * @param destination Optional specific stream to unpipe\\n             */\\n            unpipe(destination?: NodeJS.WritableStream): this;\\n            /**\\n             * Passing `chunk` as `null` signals the end of the stream (EOF) and behaves the\\n             * same as `readable.push(null)`, after which no more data can be written. The EOF\\n             * signal is put at the end of the buffer and any buffered data will still be\\n             * flushed.\\n             *\\n             * The `readable.unshift()` method pushes a chunk of data back into the internal\\n             * buffer. This is useful in certain situations where a stream is being consumed by\\n             * code that needs to \\\"un-consume\\\" some amount of data that it has optimistically\\n             * pulled out of the source, so that the data can be passed on to some other party.\\n             *\\n             * The `stream.unshift(chunk)` method cannot be called after the `'end'` event\\n             * has been emitted or a runtime error will be thrown.\\n             *\\n             * Developers using `stream.unshift()` often should consider switching to\\n             * use of a `Transform` stream instead. See the `API for stream implementers` section for more information.\\n             *\\n             * ```js\\n             * // Pull off a header delimited by \\\\n\\\\n.\\n             * // Use unshift() if we get too much.\\n             * // Call the callback with (error, header, stream).\\n             * const { StringDecoder } = require('string_decoder');\\n             * function parseHeader(stream, callback) {\\n             *   stream.on('error', callback);\\n             *   stream.on('readable', onReadable);\\n             *   const decoder = new StringDecoder('utf8');\\n             *   let header = '';\\n             *   function onReadable() {\\n             *     let chunk;\\n             *     while (null !== (chunk = stream.read())) {\\n             *       const str = decoder.write(chunk);\\n             *       if (str.includes('\\\\n\\\\n')) {\\n             *         // Found the header boundary.\\n             *         const split = str.split(/\\\\n\\\\n/);\\n             *         header += split.shift();\\n             *         const remaining = split.join('\\\\n\\\\n');\\n             *         const buf = Buffer.from(remaining, 'utf8');\\n             *         stream.removeListener('error', callback);\\n             *         // Remove the 'readable' listener before unshifting.\\n             *         stream.removeListener('readable', onReadable);\\n             *         if (buf.length)\\n             *           stream.unshift(buf);\\n             *         // Now the body of the message can be read from the stream.\\n             *         callback(null, header, stream);\\n             *         return;\\n             *       }\\n             *       // Still reading the header.\\n             *       header += str;\\n             *     }\\n             *   }\\n             * }\\n             * ```\\n             *\\n             * Unlike {@link push}, `stream.unshift(chunk)` will not\\n             * end the reading process by resetting the internal reading state of the stream.\\n             * This can cause unexpected results if `readable.unshift()` is called during a\\n             * read (i.e. from within a {@link _read} implementation on a\\n             * custom stream). Following the call to `readable.unshift()` with an immediate {@link push} will reset the reading state appropriately,\\n             * however it is best to simply avoid calling `readable.unshift()` while in the\\n             * process of performing a read.\\n             * @since v0.9.11\\n             * @param chunk Chunk of data to unshift onto the read queue. For streams not operating in object mode, `chunk` must be a string, `Buffer`, `Uint8Array` or `null`. For object mode\\n             * streams, `chunk` may be any JavaScript value.\\n             * @param encoding Encoding of string chunks. Must be a valid `Buffer` encoding, such as `'utf8'` or `'ascii'`.\\n             */\\n            unshift(chunk: any, encoding?: BufferEncoding): void;\\n            /**\\n             * Prior to Node.js 0.10, streams did not implement the entire `stream` module API\\n             * as it is currently defined. (See `Compatibility` for more information.)\\n             *\\n             * When using an older Node.js library that emits `'data'` events and has a {@link pause} method that is advisory only, the`readable.wrap()` method can be used to create a `Readable`\\n             * stream that uses\\n             * the old stream as its data source.\\n             *\\n             * It will rarely be necessary to use `readable.wrap()` but the method has been\\n             * provided as a convenience for interacting with older Node.js applications and\\n             * libraries.\\n             *\\n             * ```js\\n             * const { OldReader } = require('./old-api-module.js');\\n             * const { Readable } = require('stream');\\n             * const oreader = new OldReader();\\n             * const myReader = new Readable().wrap(oreader);\\n             *\\n             * myReader.on('readable', () => {\\n             *   myReader.read(); // etc.\\n             * });\\n             * ```\\n             * @since v0.9.4\\n             * @param stream An \\\"old style\\\" readable stream\\n             */\\n            wrap(stream: NodeJS.ReadableStream): this;\\n            push(chunk: any, encoding?: BufferEncoding): boolean;\\n            _destroy(error: Error | null, callback: (error?: Error | null) => void): void;\\n            /**\\n             * Destroy the stream. Optionally emit an `'error'` event, and emit a `'close'`event (unless `emitClose` is set to `false`). After this call, the readable\\n             * stream will release any internal resources and subsequent calls to `push()`will be ignored.\\n             *\\n             * Once `destroy()` has been called any further calls will be a no-op and no\\n             * further errors except from `_destroy()` may be emitted as `'error'`.\\n             *\\n             * Implementors should not override this method, but instead implement `readable._destroy()`.\\n             * @since v8.0.0\\n             * @param error Error which will be passed as payload in `'error'` event\\n             */\\n            destroy(error?: Error): this;\\n            /**\\n             * Event emitter\\n             * The defined events on documents including:\\n             * 1. close\\n             * 2. data\\n             * 3. end\\n             * 4. error\\n             * 5. pause\\n             * 6. readable\\n             * 7. resume\\n             */\\n            addListener(event: 'close', listener: () => void): this;\\n            addListener(event: 'data', listener: (chunk: any) => void): this;\\n            addListener(event: 'end', listener: () => void): this;\\n            addListener(event: 'error', listener: (err: Error) => void): this;\\n            addListener(event: 'pause', listener: () => void): this;\\n            addListener(event: 'readable', listener: () => void): this;\\n            addListener(event: 'resume', listener: () => void): this;\\n            addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n            emit(event: 'close'): boolean;\\n            emit(event: 'data', chunk: any): boolean;\\n            emit(event: 'end'): boolean;\\n            emit(event: 'error', err: Error): boolean;\\n            emit(event: 'pause'): boolean;\\n            emit(event: 'readable'): boolean;\\n            emit(event: 'resume'): boolean;\\n            emit(event: string | symbol, ...args: any[]): boolean;\\n            on(event: 'close', listener: () => void): this;\\n            on(event: 'data', listener: (chunk: any) => void): this;\\n            on(event: 'end', listener: () => void): this;\\n            on(event: 'error', listener: (err: Error) => void): this;\\n            on(event: 'pause', listener: () => void): this;\\n            on(event: 'readable', listener: () => void): this;\\n            on(event: 'resume', listener: () => void): this;\\n            on(event: string | symbol, listener: (...args: any[]) => void): this;\\n            once(event: 'close', listener: () => void): this;\\n            once(event: 'data', listener: (chunk: any) => void): this;\\n            once(event: 'end', listener: () => void): this;\\n            once(event: 'error', listener: (err: Error) => void): this;\\n            once(event: 'pause', listener: () => void): this;\\n            once(event: 'readable', listener: () => void): this;\\n            once(event: 'resume', listener: () => void): this;\\n            once(event: string | symbol, listener: (...args: any[]) => void): this;\\n            prependListener(event: 'close', listener: () => void): this;\\n            prependListener(event: 'data', listener: (chunk: any) => void): this;\\n            prependListener(event: 'end', listener: () => void): this;\\n            prependListener(event: 'error', listener: (err: Error) => void): this;\\n            prependListener(event: 'pause', listener: () => void): this;\\n            prependListener(event: 'readable', listener: () => void): this;\\n            prependListener(event: 'resume', listener: () => void): this;\\n            prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n            prependOnceListener(event: 'close', listener: () => void): this;\\n            prependOnceListener(event: 'data', listener: (chunk: any) => void): this;\\n            prependOnceListener(event: 'end', listener: () => void): this;\\n            prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n            prependOnceListener(event: 'pause', listener: () => void): this;\\n            prependOnceListener(event: 'readable', listener: () => void): this;\\n            prependOnceListener(event: 'resume', listener: () => void): this;\\n            prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n            removeListener(event: 'close', listener: () => void): this;\\n            removeListener(event: 'data', listener: (chunk: any) => void): this;\\n            removeListener(event: 'end', listener: () => void): this;\\n            removeListener(event: 'error', listener: (err: Error) => void): this;\\n            removeListener(event: 'pause', listener: () => void): this;\\n            removeListener(event: 'readable', listener: () => void): this;\\n            removeListener(event: 'resume', listener: () => void): this;\\n            removeListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n            [Symbol.asyncIterator](): AsyncIterableIterator<any>;\\n        }\\n        interface WritableOptions extends StreamOptions<Writable> {\\n            decodeStrings?: boolean | undefined;\\n            defaultEncoding?: BufferEncoding | undefined;\\n            write?(this: Writable, chunk: any, encoding: BufferEncoding, callback: (error?: Error | null) => void): void;\\n            writev?(\\n                this: Writable,\\n                chunks: Array<{\\n                    chunk: any;\\n                    encoding: BufferEncoding;\\n                }>,\\n                callback: (error?: Error | null) => void\\n            ): void;\\n            final?(this: Writable, callback: (error?: Error | null) => void): void;\\n        }\\n        /**\\n         * @since v0.9.4\\n         */\\n        class Writable extends Stream implements NodeJS.WritableStream {\\n            /**\\n             * A utility method for creating a `Writable` from a web `WritableStream`.\\n             * @since v17.0.0\\n             * @experimental\\n             */\\n            static fromWeb(writableStream: streamWeb.WritableStream, options?: Pick<WritableOptions, 'decodeStrings' | 'highWaterMark' | 'objectMode' | 'signal'>): Writable;\\n            /**\\n             * A utility method for creating a web `WritableStream` from a `Writable`.\\n             * @since v17.0.0\\n             * @experimental\\n             */\\n            static toWeb(streamWritable: Writable): streamWeb.WritableStream;\\n            /**\\n             * Is `true` if it is safe to call `writable.write()`, which means\\n             * the stream has not been destroyed, errored or ended.\\n             * @since v11.4.0\\n             */\\n            readonly writable: boolean;\\n            /**\\n             * Is `true` after `writable.end()` has been called. This property\\n             * does not indicate whether the data has been flushed, for this use `writable.writableFinished` instead.\\n             * @since v12.9.0\\n             */\\n            readonly writableEnded: boolean;\\n            /**\\n             * Is set to `true` immediately before the `'finish'` event is emitted.\\n             * @since v12.6.0\\n             */\\n            readonly writableFinished: boolean;\\n            /**\\n             * Return the value of `highWaterMark` passed when creating this `Writable`.\\n             * @since v9.3.0\\n             */\\n            readonly writableHighWaterMark: number;\\n            /**\\n             * This property contains the number of bytes (or objects) in the queue\\n             * ready to be written. The value provides introspection data regarding\\n             * the status of the `highWaterMark`.\\n             * @since v9.4.0\\n             */\\n            readonly writableLength: number;\\n            /**\\n             * Getter for the property `objectMode` of a given `Writable` stream.\\n             * @since v12.3.0\\n             */\\n            readonly writableObjectMode: boolean;\\n            /**\\n             * Number of times `writable.uncork()` needs to be\\n             * called in order to fully uncork the stream.\\n             * @since v13.2.0, v12.16.0\\n             */\\n            readonly writableCorked: number;\\n            /**\\n             * Is `true` after `writable.destroy()` has been called.\\n             * @since v8.0.0\\n             */\\n            destroyed: boolean;\\n            /**\\n             * Is true after 'close' has been emitted.\\n             * @since v18.0.0\\n             */\\n            readonly closed: boolean;\\n            /**\\n             * Returns error if the stream has been destroyed with an error.\\n             * @since v18.0.0\\n             */\\n            readonly errored: Error | null;\\n            /**\\n             * Is `true` if the stream's buffer has been full and stream will emit 'drain'.\\n             * @since v15.2.0, v14.17.0\\n             */\\n            readonly writableNeedDrain: boolean;\\n            constructor(opts?: WritableOptions);\\n            _write(chunk: any, encoding: BufferEncoding, callback: (error?: Error | null) => void): void;\\n            _writev?(\\n                chunks: Array<{\\n                    chunk: any;\\n                    encoding: BufferEncoding;\\n                }>,\\n                callback: (error?: Error | null) => void\\n            ): void;\\n            _construct?(callback: (error?: Error | null) => void): void;\\n            _destroy(error: Error | null, callback: (error?: Error | null) => void): void;\\n            _final(callback: (error?: Error | null) => void): void;\\n            /**\\n             * The `writable.write()` method writes some data to the stream, and calls the\\n             * supplied `callback` once the data has been fully handled. If an error\\n             * occurs, the `callback` will be called with the error as its\\n             * first argument. The `callback` is called asynchronously and before `'error'` is\\n             * emitted.\\n             *\\n             * The return value is `true` if the internal buffer is less than the`highWaterMark` configured when the stream was created after admitting `chunk`.\\n             * If `false` is returned, further attempts to write data to the stream should\\n             * stop until the `'drain'` event is emitted.\\n             *\\n             * While a stream is not draining, calls to `write()` will buffer `chunk`, and\\n             * return false. Once all currently buffered chunks are drained (accepted for\\n             * delivery by the operating system), the `'drain'` event will be emitted.\\n             * Once `write()` returns false, do not write more chunks\\n             * until the `'drain'` event is emitted. While calling `write()` on a stream that\\n             * is not draining is allowed, Node.js will buffer all written chunks until\\n             * maximum memory usage occurs, at which point it will abort unconditionally.\\n             * Even before it aborts, high memory usage will cause poor garbage collector\\n             * performance and high RSS (which is not typically released back to the system,\\n             * even after the memory is no longer required). Since TCP sockets may never\\n             * drain if the remote peer does not read the data, writing a socket that is\\n             * not draining may lead to a remotely exploitable vulnerability.\\n             *\\n             * Writing data while the stream is not draining is particularly\\n             * problematic for a `Transform`, because the `Transform` streams are paused\\n             * by default until they are piped or a `'data'` or `'readable'` event handler\\n             * is added.\\n             *\\n             * If the data to be written can be generated or fetched on demand, it is\\n             * recommended to encapsulate the logic into a `Readable` and use {@link pipe}. However, if calling `write()` is preferred, it is\\n             * possible to respect backpressure and avoid memory issues using the `'drain'` event:\\n             *\\n             * ```js\\n             * function write(data, cb) {\\n             *   if (!stream.write(data)) {\\n             *     stream.once('drain', cb);\\n             *   } else {\\n             *     process.nextTick(cb);\\n             *   }\\n             * }\\n             *\\n             * // Wait for cb to be called before doing any other write.\\n             * write('hello', () => {\\n             *   console.log('Write completed, do more writes now.');\\n             * });\\n             * ```\\n             *\\n             * A `Writable` stream in object mode will always ignore the `encoding` argument.\\n             * @since v0.9.4\\n             * @param chunk Optional data to write. For streams not operating in object mode, `chunk` must be a string, `Buffer` or `Uint8Array`. For object mode streams, `chunk` may be any\\n             * JavaScript value other than `null`.\\n             * @param [encoding='utf8'] The encoding, if `chunk` is a string.\\n             * @param callback Callback for when this chunk of data is flushed.\\n             * @return `false` if the stream wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`.\\n             */\\n            write(chunk: any, callback?: (error: Error | null | undefined) => void): boolean;\\n            write(chunk: any, encoding: BufferEncoding, callback?: (error: Error | null | undefined) => void): boolean;\\n            /**\\n             * The `writable.setDefaultEncoding()` method sets the default `encoding` for a `Writable` stream.\\n             * @since v0.11.15\\n             * @param encoding The new default encoding\\n             */\\n            setDefaultEncoding(encoding: BufferEncoding): this;\\n            /**\\n             * Calling the `writable.end()` method signals that no more data will be written\\n             * to the `Writable`. The optional `chunk` and `encoding` arguments allow one\\n             * final additional chunk of data to be written immediately before closing the\\n             * stream.\\n             *\\n             * Calling the {@link write} method after calling {@link end} will raise an error.\\n             *\\n             * ```js\\n             * // Write 'hello, ' and then end with 'world!'.\\n             * const fs = require('fs');\\n             * const file = fs.createWriteStream('example.txt');\\n             * file.write('hello, ');\\n             * file.end('world!');\\n             * // Writing more now is not allowed!\\n             * ```\\n             * @since v0.9.4\\n             * @param chunk Optional data to write. For streams not operating in object mode, `chunk` must be a string, `Buffer` or `Uint8Array`. For object mode streams, `chunk` may be any\\n             * JavaScript value other than `null`.\\n             * @param encoding The encoding if `chunk` is a string\\n             * @param callback Callback for when the stream is finished.\\n             */\\n            end(cb?: () => void): this;\\n            end(chunk: any, cb?: () => void): this;\\n            end(chunk: any, encoding: BufferEncoding, cb?: () => void): this;\\n            /**\\n             * The `writable.cork()` method forces all written data to be buffered in memory.\\n             * The buffered data will be flushed when either the {@link uncork} or {@link end} methods are called.\\n             *\\n             * The primary intent of `writable.cork()` is to accommodate a situation in which\\n             * several small chunks are written to the stream in rapid succession. Instead of\\n             * immediately forwarding them to the underlying destination, `writable.cork()`buffers all the chunks until `writable.uncork()` is called, which will pass them\\n             * all to `writable._writev()`, if present. This prevents a head-of-line blocking\\n             * situation where data is being buffered while waiting for the first small chunk\\n             * to be processed. However, use of `writable.cork()` without implementing`writable._writev()` may have an adverse effect on throughput.\\n             *\\n             * See also: `writable.uncork()`, `writable._writev()`.\\n             * @since v0.11.2\\n             */\\n            cork(): void;\\n            /**\\n             * The `writable.uncork()` method flushes all data buffered since {@link cork} was called.\\n             *\\n             * When using `writable.cork()` and `writable.uncork()` to manage the buffering\\n             * of writes to a stream, defer calls to `writable.uncork()` using`process.nextTick()`. Doing so allows batching of all`writable.write()` calls that occur within a given Node.js event\\n             * loop phase.\\n             *\\n             * ```js\\n             * stream.cork();\\n             * stream.write('some ');\\n             * stream.write('data ');\\n             * process.nextTick(() => stream.uncork());\\n             * ```\\n             *\\n             * If the `writable.cork()` method is called multiple times on a stream, the\\n             * same number of calls to `writable.uncork()` must be called to flush the buffered\\n             * data.\\n             *\\n             * ```js\\n             * stream.cork();\\n             * stream.write('some ');\\n             * stream.cork();\\n             * stream.write('data ');\\n             * process.nextTick(() => {\\n             *   stream.uncork();\\n             *   // The data will not be flushed until uncork() is called a second time.\\n             *   stream.uncork();\\n             * });\\n             * ```\\n             *\\n             * See also: `writable.cork()`.\\n             * @since v0.11.2\\n             */\\n            uncork(): void;\\n            /**\\n             * Destroy the stream. Optionally emit an `'error'` event, and emit a `'close'`event (unless `emitClose` is set to `false`). After this call, the writable\\n             * stream has ended and subsequent calls to `write()` or `end()` will result in\\n             * an `ERR_STREAM_DESTROYED` error.\\n             * This is a destructive and immediate way to destroy a stream. Previous calls to`write()` may not have drained, and may trigger an `ERR_STREAM_DESTROYED` error.\\n             * Use `end()` instead of destroy if data should flush before close, or wait for\\n             * the `'drain'` event before destroying the stream.\\n             *\\n             * Once `destroy()` has been called any further calls will be a no-op and no\\n             * further errors except from `_destroy()` may be emitted as `'error'`.\\n             *\\n             * Implementors should not override this method,\\n             * but instead implement `writable._destroy()`.\\n             * @since v8.0.0\\n             * @param error Optional, an error to emit with `'error'` event.\\n             */\\n            destroy(error?: Error): this;\\n            /**\\n             * Event emitter\\n             * The defined events on documents including:\\n             * 1. close\\n             * 2. drain\\n             * 3. error\\n             * 4. finish\\n             * 5. pipe\\n             * 6. unpipe\\n             */\\n            addListener(event: 'close', listener: () => void): this;\\n            addListener(event: 'drain', listener: () => void): this;\\n            addListener(event: 'error', listener: (err: Error) => void): this;\\n            addListener(event: 'finish', listener: () => void): this;\\n            addListener(event: 'pipe', listener: (src: Readable) => void): this;\\n            addListener(event: 'unpipe', listener: (src: Readable) => void): this;\\n            addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n            emit(event: 'close'): boolean;\\n            emit(event: 'drain'): boolean;\\n            emit(event: 'error', err: Error): boolean;\\n            emit(event: 'finish'): boolean;\\n            emit(event: 'pipe', src: Readable): boolean;\\n            emit(event: 'unpipe', src: Readable): boolean;\\n            emit(event: string | symbol, ...args: any[]): boolean;\\n            on(event: 'close', listener: () => void): this;\\n            on(event: 'drain', listener: () => void): this;\\n            on(event: 'error', listener: (err: Error) => void): this;\\n            on(event: 'finish', listener: () => void): this;\\n            on(event: 'pipe', listener: (src: Readable) => void): this;\\n            on(event: 'unpipe', listener: (src: Readable) => void): this;\\n            on(event: string | symbol, listener: (...args: any[]) => void): this;\\n            once(event: 'close', listener: () => void): this;\\n            once(event: 'drain', listener: () => void): this;\\n            once(event: 'error', listener: (err: Error) => void): this;\\n            once(event: 'finish', listener: () => void): this;\\n            once(event: 'pipe', listener: (src: Readable) => void): this;\\n            once(event: 'unpipe', listener: (src: Readable) => void): this;\\n            once(event: string | symbol, listener: (...args: any[]) => void): this;\\n            prependListener(event: 'close', listener: () => void): this;\\n            prependListener(event: 'drain', listener: () => void): this;\\n            prependListener(event: 'error', listener: (err: Error) => void): this;\\n            prependListener(event: 'finish', listener: () => void): this;\\n            prependListener(event: 'pipe', listener: (src: Readable) => void): this;\\n            prependListener(event: 'unpipe', listener: (src: Readable) => void): this;\\n            prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n            prependOnceListener(event: 'close', listener: () => void): this;\\n            prependOnceListener(event: 'drain', listener: () => void): this;\\n            prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n            prependOnceListener(event: 'finish', listener: () => void): this;\\n            prependOnceListener(event: 'pipe', listener: (src: Readable) => void): this;\\n            prependOnceListener(event: 'unpipe', listener: (src: Readable) => void): this;\\n            prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n            removeListener(event: 'close', listener: () => void): this;\\n            removeListener(event: 'drain', listener: () => void): this;\\n            removeListener(event: 'error', listener: (err: Error) => void): this;\\n            removeListener(event: 'finish', listener: () => void): this;\\n            removeListener(event: 'pipe', listener: (src: Readable) => void): this;\\n            removeListener(event: 'unpipe', listener: (src: Readable) => void): this;\\n            removeListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        }\\n        interface DuplexOptions extends ReadableOptions, WritableOptions {\\n            allowHalfOpen?: boolean | undefined;\\n            readableObjectMode?: boolean | undefined;\\n            writableObjectMode?: boolean | undefined;\\n            readableHighWaterMark?: number | undefined;\\n            writableHighWaterMark?: number | undefined;\\n            writableCorked?: number | undefined;\\n            construct?(this: Duplex, callback: (error?: Error | null) => void): void;\\n            read?(this: Duplex, size: number): void;\\n            write?(this: Duplex, chunk: any, encoding: BufferEncoding, callback: (error?: Error | null) => void): void;\\n            writev?(\\n                this: Duplex,\\n                chunks: Array<{\\n                    chunk: any;\\n                    encoding: BufferEncoding;\\n                }>,\\n                callback: (error?: Error | null) => void\\n            ): void;\\n            final?(this: Duplex, callback: (error?: Error | null) => void): void;\\n            destroy?(this: Duplex, error: Error | null, callback: (error: Error | null) => void): void;\\n        }\\n        /**\\n         * Duplex streams are streams that implement both the `Readable` and `Writable` interfaces.\\n         *\\n         * Examples of `Duplex` streams include:\\n         *\\n         * * `TCP sockets`\\n         * * `zlib streams`\\n         * * `crypto streams`\\n         * @since v0.9.4\\n         */\\n        class Duplex extends Readable implements Writable {\\n            readonly writable: boolean;\\n            readonly writableEnded: boolean;\\n            readonly writableFinished: boolean;\\n            readonly writableHighWaterMark: number;\\n            readonly writableLength: number;\\n            readonly writableObjectMode: boolean;\\n            readonly writableCorked: number;\\n            readonly writableNeedDrain: boolean;\\n            readonly closed: boolean;\\n            readonly errored: Error | null;\\n            /**\\n             * If `false` then the stream will automatically end the writable side when the\\n             * readable side ends. Set initially by the `allowHalfOpen` constructor option,\\n             * which defaults to `false`.\\n             *\\n             * This can be changed manually to change the half-open behavior of an existing`Duplex` stream instance, but must be changed before the `'end'` event is\\n             * emitted.\\n             * @since v0.9.4\\n             */\\n            allowHalfOpen: boolean;\\n            constructor(opts?: DuplexOptions);\\n            /**\\n             * A utility method for creating duplex streams.\\n             *\\n             * - `Stream` converts writable stream into writable `Duplex` and readable stream\\n             *   to `Duplex`.\\n             * - `Blob` converts into readable `Duplex`.\\n             * - `string` converts into readable `Duplex`.\\n             * - `ArrayBuffer` converts into readable `Duplex`.\\n             * - `AsyncIterable` converts into a readable `Duplex`. Cannot yield `null`.\\n             * - `AsyncGeneratorFunction` converts into a readable/writable transform\\n             *   `Duplex`. Must take a source `AsyncIterable` as first parameter. Cannot yield\\n             *   `null`.\\n             * - `AsyncFunction` converts into a writable `Duplex`. Must return\\n             *   either `null` or `undefined`\\n             * - `Object ({ writable, readable })` converts `readable` and\\n             *   `writable` into `Stream` and then combines them into `Duplex` where the\\n             *   `Duplex` will write to the `writable` and read from the `readable`.\\n             * - `Promise` converts into readable `Duplex`. Value `null` is ignored.\\n             *\\n             * @since v16.8.0\\n             */\\n            static from(src: Stream | NodeBlob | ArrayBuffer | string | Iterable<any> | AsyncIterable<any> | AsyncGeneratorFunction | Promise<any> | Object): Duplex;\\n            _write(chunk: any, encoding: BufferEncoding, callback: (error?: Error | null) => void): void;\\n            _writev?(\\n                chunks: Array<{\\n                    chunk: any;\\n                    encoding: BufferEncoding;\\n                }>,\\n                callback: (error?: Error | null) => void\\n            ): void;\\n            _destroy(error: Error | null, callback: (error: Error | null) => void): void;\\n            _final(callback: (error?: Error | null) => void): void;\\n            write(chunk: any, encoding?: BufferEncoding, cb?: (error: Error | null | undefined) => void): boolean;\\n            write(chunk: any, cb?: (error: Error | null | undefined) => void): boolean;\\n            setDefaultEncoding(encoding: BufferEncoding): this;\\n            end(cb?: () => void): this;\\n            end(chunk: any, cb?: () => void): this;\\n            end(chunk: any, encoding?: BufferEncoding, cb?: () => void): this;\\n            cork(): void;\\n            uncork(): void;\\n            /**\\n             * Event emitter\\n             * The defined events on documents including:\\n             * 1.  close\\n             * 2.  data\\n             * 3.  drain\\n             * 4.  end\\n             * 5.  error\\n             * 6.  finish\\n             * 7.  pause\\n             * 8.  pipe\\n             * 9.  readable\\n             * 10. resume\\n             * 11. unpipe\\n             */\\n            addListener(event: 'close', listener: () => void): this;\\n            addListener(event: 'data', listener: (chunk: any) => void): this;\\n            addListener(event: 'drain', listener: () => void): this;\\n            addListener(event: 'end', listener: () => void): this;\\n            addListener(event: 'error', listener: (err: Error) => void): this;\\n            addListener(event: 'finish', listener: () => void): this;\\n            addListener(event: 'pause', listener: () => void): this;\\n            addListener(event: 'pipe', listener: (src: Readable) => void): this;\\n            addListener(event: 'readable', listener: () => void): this;\\n            addListener(event: 'resume', listener: () => void): this;\\n            addListener(event: 'unpipe', listener: (src: Readable) => void): this;\\n            addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n            emit(event: 'close'): boolean;\\n            emit(event: 'data', chunk: any): boolean;\\n            emit(event: 'drain'): boolean;\\n            emit(event: 'end'): boolean;\\n            emit(event: 'error', err: Error): boolean;\\n            emit(event: 'finish'): boolean;\\n            emit(event: 'pause'): boolean;\\n            emit(event: 'pipe', src: Readable): boolean;\\n            emit(event: 'readable'): boolean;\\n            emit(event: 'resume'): boolean;\\n            emit(event: 'unpipe', src: Readable): boolean;\\n            emit(event: string | symbol, ...args: any[]): boolean;\\n            on(event: 'close', listener: () => void): this;\\n            on(event: 'data', listener: (chunk: any) => void): this;\\n            on(event: 'drain', listener: () => void): this;\\n            on(event: 'end', listener: () => void): this;\\n            on(event: 'error', listener: (err: Error) => void): this;\\n            on(event: 'finish', listener: () => void): this;\\n            on(event: 'pause', listener: () => void): this;\\n            on(event: 'pipe', listener: (src: Readable) => void): this;\\n            on(event: 'readable', listener: () => void): this;\\n            on(event: 'resume', listener: () => void): this;\\n            on(event: 'unpipe', listener: (src: Readable) => void): this;\\n            on(event: string | symbol, listener: (...args: any[]) => void): this;\\n            once(event: 'close', listener: () => void): this;\\n            once(event: 'data', listener: (chunk: any) => void): this;\\n            once(event: 'drain', listener: () => void): this;\\n            once(event: 'end', listener: () => void): this;\\n            once(event: 'error', listener: (err: Error) => void): this;\\n            once(event: 'finish', listener: () => void): this;\\n            once(event: 'pause', listener: () => void): this;\\n            once(event: 'pipe', listener: (src: Readable) => void): this;\\n            once(event: 'readable', listener: () => void): this;\\n            once(event: 'resume', listener: () => void): this;\\n            once(event: 'unpipe', listener: (src: Readable) => void): this;\\n            once(event: string | symbol, listener: (...args: any[]) => void): this;\\n            prependListener(event: 'close', listener: () => void): this;\\n            prependListener(event: 'data', listener: (chunk: any) => void): this;\\n            prependListener(event: 'drain', listener: () => void): this;\\n            prependListener(event: 'end', listener: () => void): this;\\n            prependListener(event: 'error', listener: (err: Error) => void): this;\\n            prependListener(event: 'finish', listener: () => void): this;\\n            prependListener(event: 'pause', listener: () => void): this;\\n            prependListener(event: 'pipe', listener: (src: Readable) => void): this;\\n            prependListener(event: 'readable', listener: () => void): this;\\n            prependListener(event: 'resume', listener: () => void): this;\\n            prependListener(event: 'unpipe', listener: (src: Readable) => void): this;\\n            prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n            prependOnceListener(event: 'close', listener: () => void): this;\\n            prependOnceListener(event: 'data', listener: (chunk: any) => void): this;\\n            prependOnceListener(event: 'drain', listener: () => void): this;\\n            prependOnceListener(event: 'end', listener: () => void): this;\\n            prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n            prependOnceListener(event: 'finish', listener: () => void): this;\\n            prependOnceListener(event: 'pause', listener: () => void): this;\\n            prependOnceListener(event: 'pipe', listener: (src: Readable) => void): this;\\n            prependOnceListener(event: 'readable', listener: () => void): this;\\n            prependOnceListener(event: 'resume', listener: () => void): this;\\n            prependOnceListener(event: 'unpipe', listener: (src: Readable) => void): this;\\n            prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n            removeListener(event: 'close', listener: () => void): this;\\n            removeListener(event: 'data', listener: (chunk: any) => void): this;\\n            removeListener(event: 'drain', listener: () => void): this;\\n            removeListener(event: 'end', listener: () => void): this;\\n            removeListener(event: 'error', listener: (err: Error) => void): this;\\n            removeListener(event: 'finish', listener: () => void): this;\\n            removeListener(event: 'pause', listener: () => void): this;\\n            removeListener(event: 'pipe', listener: (src: Readable) => void): this;\\n            removeListener(event: 'readable', listener: () => void): this;\\n            removeListener(event: 'resume', listener: () => void): this;\\n            removeListener(event: 'unpipe', listener: (src: Readable) => void): this;\\n            removeListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        }\\n        type TransformCallback = (error?: Error | null, data?: any) => void;\\n        interface TransformOptions extends DuplexOptions {\\n            construct?(this: Transform, callback: (error?: Error | null) => void): void;\\n            read?(this: Transform, size: number): void;\\n            write?(this: Transform, chunk: any, encoding: BufferEncoding, callback: (error?: Error | null) => void): void;\\n            writev?(\\n                this: Transform,\\n                chunks: Array<{\\n                    chunk: any;\\n                    encoding: BufferEncoding;\\n                }>,\\n                callback: (error?: Error | null) => void\\n            ): void;\\n            final?(this: Transform, callback: (error?: Error | null) => void): void;\\n            destroy?(this: Transform, error: Error | null, callback: (error: Error | null) => void): void;\\n            transform?(this: Transform, chunk: any, encoding: BufferEncoding, callback: TransformCallback): void;\\n            flush?(this: Transform, callback: TransformCallback): void;\\n        }\\n        /**\\n         * Transform streams are `Duplex` streams where the output is in some way\\n         * related to the input. Like all `Duplex` streams, `Transform` streams\\n         * implement both the `Readable` and `Writable` interfaces.\\n         *\\n         * Examples of `Transform` streams include:\\n         *\\n         * * `zlib streams`\\n         * * `crypto streams`\\n         * @since v0.9.4\\n         */\\n        class Transform extends Duplex {\\n            constructor(opts?: TransformOptions);\\n            _transform(chunk: any, encoding: BufferEncoding, callback: TransformCallback): void;\\n            _flush(callback: TransformCallback): void;\\n        }\\n        /**\\n         * The `stream.PassThrough` class is a trivial implementation of a `Transform` stream that simply passes the input bytes across to the output. Its purpose is\\n         * primarily for examples and testing, but there are some use cases where`stream.PassThrough` is useful as a building block for novel sorts of streams.\\n         */\\n        class PassThrough extends Transform {}\\n        /**\\n         * Attaches an AbortSignal to a readable or writeable stream. This lets code\\n         * control stream destruction using an `AbortController`.\\n         *\\n         * Calling `abort` on the `AbortController` corresponding to the passed`AbortSignal` will behave the same way as calling `.destroy(new AbortError())`on the stream.\\n         *\\n         * ```js\\n         * const fs = require('fs');\\n         *\\n         * const controller = new AbortController();\\n         * const read = addAbortSignal(\\n         *   controller.signal,\\n         *   fs.createReadStream(('object.json'))\\n         * );\\n         * // Later, abort the operation closing the stream\\n         * controller.abort();\\n         * ```\\n         *\\n         * Or using an `AbortSignal` with a readable stream as an async iterable:\\n         *\\n         * ```js\\n         * const controller = new AbortController();\\n         * setTimeout(() => controller.abort(), 10_000); // set a timeout\\n         * const stream = addAbortSignal(\\n         *   controller.signal,\\n         *   fs.createReadStream(('object.json'))\\n         * );\\n         * (async () => {\\n         *   try {\\n         *     for await (const chunk of stream) {\\n         *       await process(chunk);\\n         *     }\\n         *   } catch (e) {\\n         *     if (e.name === 'AbortError') {\\n         *       // The operation was cancelled\\n         *     } else {\\n         *       throw e;\\n         *     }\\n         *   }\\n         * })();\\n         * ```\\n         * @since v15.4.0\\n         * @param signal A signal representing possible cancellation\\n         * @param stream a stream to attach a signal to\\n         */\\n        function addAbortSignal<T extends Stream>(signal: AbortSignal, stream: T): T;\\n        interface FinishedOptions extends Abortable {\\n            error?: boolean | undefined;\\n            readable?: boolean | undefined;\\n            writable?: boolean | undefined;\\n        }\\n        /**\\n         * A function to get notified when a stream is no longer readable, writable\\n         * or has experienced an error or a premature close event.\\n         *\\n         * ```js\\n         * const { finished } = require('stream');\\n         *\\n         * const rs = fs.createReadStream('archive.tar');\\n         *\\n         * finished(rs, (err) => {\\n         *   if (err) {\\n         *     console.error('Stream failed.', err);\\n         *   } else {\\n         *     console.log('Stream is done reading.');\\n         *   }\\n         * });\\n         *\\n         * rs.resume(); // Drain the stream.\\n         * ```\\n         *\\n         * Especially useful in error handling scenarios where a stream is destroyed\\n         * prematurely (like an aborted HTTP request), and will not emit `'end'`or `'finish'`.\\n         *\\n         * The `finished` API provides promise version:\\n         *\\n         * ```js\\n         * const { finished } = require('stream/promises');\\n         *\\n         * const rs = fs.createReadStream('archive.tar');\\n         *\\n         * async function run() {\\n         *   await finished(rs);\\n         *   console.log('Stream is done reading.');\\n         * }\\n         *\\n         * run().catch(console.error);\\n         * rs.resume(); // Drain the stream.\\n         * ```\\n         *\\n         * `stream.finished()` leaves dangling event listeners (in particular`'error'`, `'end'`, `'finish'` and `'close'`) after `callback` has been\\n         * invoked. The reason for this is so that unexpected `'error'` events (due to\\n         * incorrect stream implementations) do not cause unexpected crashes.\\n         * If this is unwanted behavior then the returned cleanup function needs to be\\n         * invoked in the callback:\\n         *\\n         * ```js\\n         * const cleanup = finished(rs, (err) => {\\n         *   cleanup();\\n         *   // ...\\n         * });\\n         * ```\\n         * @since v10.0.0\\n         * @param stream A readable and/or writable stream.\\n         * @param callback A callback function that takes an optional error argument.\\n         * @return A cleanup function which removes all registered listeners.\\n         */\\n        function finished(stream: NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream, options: FinishedOptions, callback: (err?: NodeJS.ErrnoException | null) => void): () => void;\\n        function finished(stream: NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream, callback: (err?: NodeJS.ErrnoException | null) => void): () => void;\\n        namespace finished {\\n            function __promisify__(stream: NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream, options?: FinishedOptions): Promise<void>;\\n        }\\n        type PipelineSourceFunction<T> = () => Iterable<T> | AsyncIterable<T>;\\n        type PipelineSource<T> = Iterable<T> | AsyncIterable<T> | NodeJS.ReadableStream | PipelineSourceFunction<T>;\\n        type PipelineTransform<S extends PipelineTransformSource<any>, U> =\\n            | NodeJS.ReadWriteStream\\n            | ((source: S extends (...args: any[]) => Iterable<infer ST> | AsyncIterable<infer ST> ? AsyncIterable<ST> : S) => AsyncIterable<U>);\\n        type PipelineTransformSource<T> = PipelineSource<T> | PipelineTransform<any, T>;\\n        type PipelineDestinationIterableFunction<T> = (source: AsyncIterable<T>) => AsyncIterable<any>;\\n        type PipelineDestinationPromiseFunction<T, P> = (source: AsyncIterable<T>) => Promise<P>;\\n        type PipelineDestination<S extends PipelineTransformSource<any>, P> = S extends PipelineTransformSource<infer ST>\\n            ? NodeJS.WritableStream | PipelineDestinationIterableFunction<ST> | PipelineDestinationPromiseFunction<ST, P>\\n            : never;\\n        type PipelineCallback<S extends PipelineDestination<any, any>> = S extends PipelineDestinationPromiseFunction<any, infer P>\\n            ? (err: NodeJS.ErrnoException | null, value: P) => void\\n            : (err: NodeJS.ErrnoException | null) => void;\\n        type PipelinePromise<S extends PipelineDestination<any, any>> = S extends PipelineDestinationPromiseFunction<any, infer P> ? Promise<P> : Promise<void>;\\n        interface PipelineOptions {\\n            signal?: AbortSignal | undefined;\\n            end?: boolean | undefined;\\n        }\\n        /**\\n         * A module method to pipe between streams and generators forwarding errors and\\n         * properly cleaning up and provide a callback when the pipeline is complete.\\n         *\\n         * ```js\\n         * const { pipeline } = require('stream');\\n         * const fs = require('fs');\\n         * const zlib = require('zlib');\\n         *\\n         * // Use the pipeline API to easily pipe a series of streams\\n         * // together and get notified when the pipeline is fully done.\\n         *\\n         * // A pipeline to gzip a potentially huge tar file efficiently:\\n         *\\n         * pipeline(\\n         *   fs.createReadStream('archive.tar'),\\n         *   zlib.createGzip(),\\n         *   fs.createWriteStream('archive.tar.gz'),\\n         *   (err) => {\\n         *     if (err) {\\n         *       console.error('Pipeline failed.', err);\\n         *     } else {\\n         *       console.log('Pipeline succeeded.');\\n         *     }\\n         *   }\\n         * );\\n         * ```\\n         *\\n         * The `pipeline` API provides a promise version, which can also\\n         * receive an options argument as the last parameter with a`signal` `AbortSignal` property. When the signal is aborted,`destroy` will be called on the underlying pipeline, with\\n         * an`AbortError`.\\n         *\\n         * ```js\\n         * const { pipeline } = require('stream/promises');\\n         *\\n         * async function run() {\\n         *   await pipeline(\\n         *     fs.createReadStream('archive.tar'),\\n         *     zlib.createGzip(),\\n         *     fs.createWriteStream('archive.tar.gz')\\n         *   );\\n         *   console.log('Pipeline succeeded.');\\n         * }\\n         *\\n         * run().catch(console.error);\\n         * ```\\n         *\\n         * To use an `AbortSignal`, pass it inside an options object,\\n         * as the last argument:\\n         *\\n         * ```js\\n         * const { pipeline } = require('stream/promises');\\n         *\\n         * async function run() {\\n         *   const ac = new AbortController();\\n         *   const signal = ac.signal;\\n         *\\n         *   setTimeout(() => ac.abort(), 1);\\n         *   await pipeline(\\n         *     fs.createReadStream('archive.tar'),\\n         *     zlib.createGzip(),\\n         *     fs.createWriteStream('archive.tar.gz'),\\n         *     { signal },\\n         *   );\\n         * }\\n         *\\n         * run().catch(console.error); // AbortError\\n         * ```\\n         *\\n         * The `pipeline` API also supports async generators:\\n         *\\n         * ```js\\n         * const { pipeline } = require('stream/promises');\\n         * const fs = require('fs');\\n         *\\n         * async function run() {\\n         *   await pipeline(\\n         *     fs.createReadStream('lowercase.txt'),\\n         *     async function* (source, { signal }) {\\n         *       source.setEncoding('utf8');  // Work with strings rather than `Buffer`s.\\n         *       for await (const chunk of source) {\\n         *         yield await processChunk(chunk, { signal });\\n         *       }\\n         *     },\\n         *     fs.createWriteStream('uppercase.txt')\\n         *   );\\n         *   console.log('Pipeline succeeded.');\\n         * }\\n         *\\n         * run().catch(console.error);\\n         * ```\\n         *\\n         * Remember to handle the `signal` argument passed into the async generator.\\n         * Especially in the case where the async generator is the source for the\\n         * pipeline (i.e. first argument) or the pipeline will never complete.\\n         *\\n         * ```js\\n         * const { pipeline } = require('stream/promises');\\n         * const fs = require('fs');\\n         *\\n         * async function run() {\\n         *   await pipeline(\\n         *     async function* ({ signal }) {\\n         *       await someLongRunningfn({ signal });\\n         *       yield 'asd';\\n         *     },\\n         *     fs.createWriteStream('uppercase.txt')\\n         *   );\\n         *   console.log('Pipeline succeeded.');\\n         * }\\n         *\\n         * run().catch(console.error);\\n         * ```\\n         *\\n         * `stream.pipeline()` will call `stream.destroy(err)` on all streams except:\\n         *\\n         * * `Readable` streams which have emitted `'end'` or `'close'`.\\n         * * `Writable` streams which have emitted `'finish'` or `'close'`.\\n         *\\n         * `stream.pipeline()` leaves dangling event listeners on the streams\\n         * after the `callback` has been invoked. In the case of reuse of streams after\\n         * failure, this can cause event listener leaks and swallowed errors. If the last\\n         * stream is readable, dangling event listeners will be removed so that the last\\n         * stream can be consumed later.\\n         *\\n         * `stream.pipeline()` closes all the streams when an error is raised.\\n         * The `IncomingRequest` usage with `pipeline` could lead to an unexpected behavior\\n         * once it would destroy the socket without sending the expected response.\\n         * See the example below:\\n         *\\n         * ```js\\n         * const fs = require('fs');\\n         * const http = require('http');\\n         * const { pipeline } = require('stream');\\n         *\\n         * const server = http.createServer((req, res) => {\\n         *   const fileStream = fs.createReadStream('./fileNotExist.txt');\\n         *   pipeline(fileStream, res, (err) => {\\n         *     if (err) {\\n         *       console.log(err); // No such file\\n         *       // this message can't be sent once `pipeline` already destroyed the socket\\n         *       return res.end('error!!!');\\n         *     }\\n         *   });\\n         * });\\n         * ```\\n         * @since v10.0.0\\n         * @param callback Called when the pipeline is fully done.\\n         */\\n        function pipeline<A extends PipelineSource<any>, B extends PipelineDestination<A, any>>(\\n            source: A,\\n            destination: B,\\n            callback?: PipelineCallback<B>\\n        ): B extends NodeJS.WritableStream ? B : NodeJS.WritableStream;\\n        function pipeline<A extends PipelineSource<any>, T1 extends PipelineTransform<A, any>, B extends PipelineDestination<T1, any>>(\\n            source: A,\\n            transform1: T1,\\n            destination: B,\\n            callback?: PipelineCallback<B>\\n        ): B extends NodeJS.WritableStream ? B : NodeJS.WritableStream;\\n        function pipeline<A extends PipelineSource<any>, T1 extends PipelineTransform<A, any>, T2 extends PipelineTransform<T1, any>, B extends PipelineDestination<T2, any>>(\\n            source: A,\\n            transform1: T1,\\n            transform2: T2,\\n            destination: B,\\n            callback?: PipelineCallback<B>\\n        ): B extends NodeJS.WritableStream ? B : NodeJS.WritableStream;\\n        function pipeline<\\n            A extends PipelineSource<any>,\\n            T1 extends PipelineTransform<A, any>,\\n            T2 extends PipelineTransform<T1, any>,\\n            T3 extends PipelineTransform<T2, any>,\\n            B extends PipelineDestination<T3, any>\\n        >(source: A, transform1: T1, transform2: T2, transform3: T3, destination: B, callback?: PipelineCallback<B>): B extends NodeJS.WritableStream ? B : NodeJS.WritableStream;\\n        function pipeline<\\n            A extends PipelineSource<any>,\\n            T1 extends PipelineTransform<A, any>,\\n            T2 extends PipelineTransform<T1, any>,\\n            T3 extends PipelineTransform<T2, any>,\\n            T4 extends PipelineTransform<T3, any>,\\n            B extends PipelineDestination<T4, any>\\n        >(source: A, transform1: T1, transform2: T2, transform3: T3, transform4: T4, destination: B, callback?: PipelineCallback<B>): B extends NodeJS.WritableStream ? B : NodeJS.WritableStream;\\n        function pipeline(\\n            streams: ReadonlyArray<NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream>,\\n            callback?: (err: NodeJS.ErrnoException | null) => void\\n        ): NodeJS.WritableStream;\\n        function pipeline(\\n            stream1: NodeJS.ReadableStream,\\n            stream2: NodeJS.ReadWriteStream | NodeJS.WritableStream,\\n            ...streams: Array<NodeJS.ReadWriteStream | NodeJS.WritableStream | ((err: NodeJS.ErrnoException | null) => void)>\\n        ): NodeJS.WritableStream;\\n        namespace pipeline {\\n            function __promisify__<A extends PipelineSource<any>, B extends PipelineDestination<A, any>>(source: A, destination: B, options?: PipelineOptions): PipelinePromise<B>;\\n            function __promisify__<A extends PipelineSource<any>, T1 extends PipelineTransform<A, any>, B extends PipelineDestination<T1, any>>(\\n                source: A,\\n                transform1: T1,\\n                destination: B,\\n                options?: PipelineOptions\\n            ): PipelinePromise<B>;\\n            function __promisify__<A extends PipelineSource<any>, T1 extends PipelineTransform<A, any>, T2 extends PipelineTransform<T1, any>, B extends PipelineDestination<T2, any>>(\\n                source: A,\\n                transform1: T1,\\n                transform2: T2,\\n                destination: B,\\n                options?: PipelineOptions\\n            ): PipelinePromise<B>;\\n            function __promisify__<\\n                A extends PipelineSource<any>,\\n                T1 extends PipelineTransform<A, any>,\\n                T2 extends PipelineTransform<T1, any>,\\n                T3 extends PipelineTransform<T2, any>,\\n                B extends PipelineDestination<T3, any>\\n            >(source: A, transform1: T1, transform2: T2, transform3: T3, destination: B, options?: PipelineOptions): PipelinePromise<B>;\\n            function __promisify__<\\n                A extends PipelineSource<any>,\\n                T1 extends PipelineTransform<A, any>,\\n                T2 extends PipelineTransform<T1, any>,\\n                T3 extends PipelineTransform<T2, any>,\\n                T4 extends PipelineTransform<T3, any>,\\n                B extends PipelineDestination<T4, any>\\n            >(source: A, transform1: T1, transform2: T2, transform3: T3, transform4: T4, destination: B, options?: PipelineOptions): PipelinePromise<B>;\\n            function __promisify__(streams: ReadonlyArray<NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream>, options?: PipelineOptions): Promise<void>;\\n            function __promisify__(\\n                stream1: NodeJS.ReadableStream,\\n                stream2: NodeJS.ReadWriteStream | NodeJS.WritableStream,\\n                ...streams: Array<NodeJS.ReadWriteStream | NodeJS.WritableStream | PipelineOptions>\\n            ): Promise<void>;\\n        }\\n        interface Pipe {\\n            close(): void;\\n            hasRef(): boolean;\\n            ref(): void;\\n            unref(): void;\\n        }\\n\\n        /**\\n         * Returns whether the stream has encountered an error.\\n         * @since v17.3.0\\n         */\\n        function isErrored(stream: Readable | Writable | NodeJS.ReadableStream | NodeJS.WritableStream): boolean;\\n\\n        /**\\n         * Returns whether the stream is readable.\\n         * @since v17.4.0\\n         */\\n        function isReadable(stream: Readable | NodeJS.ReadableStream): boolean;\\n\\n        const promises: typeof streamPromises;\\n        const consumers: typeof streamConsumers;\\n    }\\n    export = internal;\\n}\\ndeclare module 'node:stream' {\\n    import stream = require('stream');\\n    export = stream;\\n}\\n\",\"file:///node_modules/@types/node/string_decoder.d.ts\":\"/**\\n * The `string_decoder` module provides an API for decoding `Buffer` objects into\\n * strings in a manner that preserves encoded multi-byte UTF-8 and UTF-16\\n * characters. It can be accessed using:\\n *\\n * ```js\\n * const { StringDecoder } = require('string_decoder');\\n * ```\\n *\\n * The following example shows the basic use of the `StringDecoder` class.\\n *\\n * ```js\\n * const { StringDecoder } = require('string_decoder');\\n * const decoder = new StringDecoder('utf8');\\n *\\n * const cent = Buffer.from([0xC2, 0xA2]);\\n * console.log(decoder.write(cent));\\n *\\n * const euro = Buffer.from([0xE2, 0x82, 0xAC]);\\n * console.log(decoder.write(euro));\\n * ```\\n *\\n * When a `Buffer` instance is written to the `StringDecoder` instance, an\\n * internal buffer is used to ensure that the decoded string does not contain\\n * any incomplete multibyte characters. These are held in the buffer until the\\n * next call to `stringDecoder.write()` or until `stringDecoder.end()` is called.\\n *\\n * In the following example, the three UTF-8 encoded bytes of the European Euro\\n * symbol (`\u20ac`) are written over three separate operations:\\n *\\n * ```js\\n * const { StringDecoder } = require('string_decoder');\\n * const decoder = new StringDecoder('utf8');\\n *\\n * decoder.write(Buffer.from([0xE2]));\\n * decoder.write(Buffer.from([0x82]));\\n * console.log(decoder.end(Buffer.from([0xAC])));\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/string_decoder.js)\\n */\\ndeclare module 'string_decoder' {\\n    class StringDecoder {\\n        constructor(encoding?: BufferEncoding);\\n        /**\\n         * Returns a decoded string, ensuring that any incomplete multibyte characters at\\n         * the end of the `Buffer`, or `TypedArray`, or `DataView` are omitted from the\\n         * returned string and stored in an internal buffer for the next call to`stringDecoder.write()` or `stringDecoder.end()`.\\n         * @since v0.1.99\\n         * @param buffer A `Buffer`, or `TypedArray`, or `DataView` containing the bytes to decode.\\n         */\\n        write(buffer: Buffer): string;\\n        /**\\n         * Returns any remaining input stored in the internal buffer as a string. Bytes\\n         * representing incomplete UTF-8 and UTF-16 characters will be replaced with\\n         * substitution characters appropriate for the character encoding.\\n         *\\n         * If the `buffer` argument is provided, one final call to `stringDecoder.write()`is performed before returning the remaining input.\\n         * After `end()` is called, the `stringDecoder` object can be reused for new input.\\n         * @since v0.9.3\\n         * @param buffer A `Buffer`, or `TypedArray`, or `DataView` containing the bytes to decode.\\n         */\\n        end(buffer?: Buffer): string;\\n    }\\n}\\ndeclare module 'node:string_decoder' {\\n    export * from 'string_decoder';\\n}\\n\",\"file:///node_modules/@types/node/test.d.ts\":\"/**\\n * The `node:test` module provides a standalone testing module.\\n * @see [source](https://github.com/nodejs/node/blob/v18.x/lib/test.js)\\n */\\ndeclare module 'node:test' {\\n    /**\\n     * Programmatically start the test runner.\\n     * @since v18.9.0\\n     * @param options Configuration options for running tests.\\n     * @returns A {@link TestsStream} that emits events about the test execution.\\n     */\\n    function run(options?: RunOptions): TestsStream;\\n\\n    /**\\n     * The `test()` function is the value imported from the test module. Each invocation of this\\n     * function results in reporting the test to the {@link TestsStream}.\\n     *\\n     * The {@link TestContext} object passed to the fn argument can be used to perform actions\\n     * related to the current test. Examples include skipping the test, adding additional\\n     * diagnostic information, or creating subtests.\\n     *\\n     * `test()` returns a {@link Promise} that resolves once the test completes. The return value\\n     * can usually be discarded for top level tests. However, the return value from subtests should\\n     * be used to prevent the parent test from finishing first and cancelling the subtest as shown\\n     * in the following example.\\n     *\\n     * ```js\\n     * test('top level test', async (t) => {\\n     *   // The setTimeout() in the following subtest would cause it to outlive its\\n     *   // parent test if 'await' is removed on the next line. Once the parent test\\n     *   // completes, it will cancel any outstanding subtests.\\n     *   await t.test('longer running subtest', async (t) => {\\n     *     return new Promise((resolve, reject) => {\\n     *       setTimeout(resolve, 1000);\\n     *     });\\n     *   });\\n     * });\\n     * ```\\n     * @since v18.0.0\\n     * @param name The name of the test, which is displayed when reporting test results.\\n     *    Default: The `name` property of fn, or `'<anonymous>'` if `fn` does not have a name.\\n     * @param options Configuration options for the test\\n     * @param fn The function under test. The first argument to this function is a\\n     *    {@link TestContext} object. If the test uses callbacks, the callback function is\\n     *    passed as the second argument. Default: A no-op function.\\n     * @returns A {@link Promise} resolved with `undefined` once the test completes.\\n     */\\n    function test(name?: string, fn?: TestFn): Promise<void>;\\n    function test(name?: string, options?: TestOptions, fn?: TestFn): Promise<void>;\\n    function test(options?: TestOptions, fn?: TestFn): Promise<void>;\\n    function test(fn?: TestFn): Promise<void>;\\n\\n    /**\\n     * @since v18.6.0\\n     * @param name The name of the suite, which is displayed when reporting suite results.\\n     *    Default: The `name` property of fn, or `'<anonymous>'` if `fn` does not have a name.\\n     * @param options Configuration options for the suite\\n     * @param fn The function under suite. Default: A no-op function.\\n     */\\n    function describe(name?: string, options?: TestOptions, fn?: SuiteFn): void;\\n    function describe(name?: string, fn?: SuiteFn): void;\\n    function describe(options?: TestOptions, fn?: SuiteFn): void;\\n    function describe(fn?: SuiteFn): void;\\n    namespace describe {\\n        // Shorthand for skipping a suite, same as `describe([name], { skip: true }[, fn])`.\\n        function skip(name?: string, options?: TestOptions, fn?: SuiteFn): void;\\n        function skip(name?: string, fn?: SuiteFn): void;\\n        function skip(options?: TestOptions, fn?: SuiteFn): void;\\n        function skip(fn?: SuiteFn): void;\\n\\n        // Shorthand for marking a suite as `TODO`, same as `describe([name], { todo: true }[, fn])`.\\n        function todo(name?: string, options?: TestOptions, fn?: SuiteFn): void;\\n        function todo(name?: string, fn?: SuiteFn): void;\\n        function todo(options?: TestOptions, fn?: SuiteFn): void;\\n        function todo(fn?: SuiteFn): void;\\n    }\\n\\n    /**\\n     * @since v18.6.0\\n     * @param name The name of the test, which is displayed when reporting test results.\\n     *    Default: The `name` property of fn, or `'<anonymous>'` if `fn` does not have a name.\\n     * @param options Configuration options for the test\\n     * @param fn The function under test. If the test uses callbacks, the callback function is\\n     *    passed as the second argument. Default: A no-op function.\\n     */\\n    function it(name?: string, options?: TestOptions, fn?: ItFn): void;\\n    function it(name?: string, fn?: ItFn): void;\\n    function it(options?: TestOptions, fn?: ItFn): void;\\n    function it(fn?: ItFn): void;\\n    namespace it {\\n        // Shorthand for skipping a test, same as `it([name], { skip: true }[, fn])`.\\n        function skip(name?: string, options?: TestOptions, fn?: ItFn): void;\\n        function skip(name?: string, fn?: ItFn): void;\\n        function skip(options?: TestOptions, fn?: ItFn): void;\\n        function skip(fn?: ItFn): void;\\n\\n        // Shorthand for marking a test as `TODO`, same as `it([name], { todo: true }[, fn])`.\\n        function todo(name?: string, options?: TestOptions, fn?: ItFn): void;\\n        function todo(name?: string, fn?: ItFn): void;\\n        function todo(options?: TestOptions, fn?: ItFn): void;\\n        function todo(fn?: ItFn): void;\\n    }\\n\\n    /**\\n     * The type of a function under test. The first argument to this function is a\\n     * {@link TestContext} object. If the test uses callbacks, the callback function is passed as\\n     * the second argument.\\n     */\\n    type TestFn = (t: TestContext, done: (result?: any) => void) => any;\\n\\n    /**\\n     * The type of a function under Suite.\\n     * If the test uses callbacks, the callback function is passed as an argument\\n     */\\n    type SuiteFn = (done: (result?: any) => void) => void;\\n\\n    /**\\n     * The type of a function under test.\\n     * If the test uses callbacks, the callback function is passed as an argument\\n     */\\n    type ItFn = (done: (result?: any) => void) => any;\\n\\n    interface RunOptions {\\n        /**\\n         * If a number is provided, then that many files would run in parallel.\\n         * If truthy, it would run (number of cpu cores - 1) files in parallel.\\n         * If falsy, it would only run one file at a time.\\n         * If unspecified, subtests inherit this value from their parent.\\n         * @default true\\n         */\\n        concurrency?: number | boolean | undefined;\\n\\n        /**\\n         * An array containing the list of files to run.\\n         * If unspecified, the test runner execution model will be used.\\n         */\\n        files?: readonly string[] | undefined;\\n\\n        /**\\n         * Allows aborting an in-progress test execution.\\n         * @default undefined\\n         */\\n        signal?: AbortSignal | undefined;\\n\\n        /**\\n         * A number of milliseconds the test will fail after.\\n         * If unspecified, subtests inherit this value from their parent.\\n         * @default Infinity\\n         */\\n        timeout?: number | undefined;\\n\\n        /**\\n         * Sets inspector port of test child process.\\n         * If a nullish value is provided, each process gets its own port,\\n         * incremented from the primary's `process.debugPort`.\\n         */\\n        inspectPort?: number | (() => number) | undefined;\\n    }\\n\\n    /**\\n     * A successful call of the `run()` method will return a new `TestsStream` object,\\n     * streaming a series of events representing the execution of the tests.\\n     * `TestsStream` will emit events in the order of the tests' definitions.\\n     * @since v18.9.0\\n     */\\n    interface TestsStream extends NodeJS.ReadableStream {\\n        addListener(event: 'test:diagnostic', listener: (data: DiagnosticData) => void): this;\\n        addListener(event: 'test:fail', listener: (data: TestFail) => void): this;\\n        addListener(event: 'test:pass', listener: (data: TestPass) => void): this;\\n        addListener(event: 'test:plan', listener: (data: TestPlan) => void): this;\\n        addListener(event: 'test:start', listener: (data: TestStart) => void): this;\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        emit(event: 'test:diagnostic', data: DiagnosticData): boolean;\\n        emit(event: 'test:fail', data: TestFail): boolean;\\n        emit(event: 'test:pass', data: TestPass): boolean;\\n        emit(event: 'test:plan', data: TestPlan): boolean;\\n        emit(event: 'test:start', data: TestStart): boolean;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        on(event: 'test:diagnostic', listener: (data: DiagnosticData) => void): this;\\n        on(event: 'test:fail', listener: (data: TestFail) => void): this;\\n        on(event: 'test:pass', listener: (data: TestPass) => void): this;\\n        on(event: 'test:plan', listener: (data: TestPlan) => void): this;\\n        on(event: 'test:start', listener: (data: TestStart) => void): this;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        once(event: 'test:diagnostic', listener: (data: DiagnosticData) => void): this;\\n        once(event: 'test:fail', listener: (data: TestFail) => void): this;\\n        once(event: 'test:pass', listener: (data: TestPass) => void): this;\\n        once(event: 'test:plan', listener: (data: TestPlan) => void): this;\\n        once(event: 'test:start', listener: (data: TestStart) => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'test:diagnostic', listener: (data: DiagnosticData) => void): this;\\n        prependListener(event: 'test:fail', listener: (data: TestFail) => void): this;\\n        prependListener(event: 'test:pass', listener: (data: TestPass) => void): this;\\n        prependListener(event: 'test:plan', listener: (data: TestPlan) => void): this;\\n        prependListener(event: 'test:start', listener: (data: TestStart) => void): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'test:diagnostic', listener: (data: DiagnosticData) => void): this;\\n        prependOnceListener(event: 'test:fail', listener: (data: TestFail) => void): this;\\n        prependOnceListener(event: 'test:pass', listener: (data: TestPass) => void): this;\\n        prependOnceListener(event: 'test:plan', listener: (data: TestPlan) => void): this;\\n        prependOnceListener(event: 'test:start', listener: (data: TestStart) => void): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n    }\\n\\n    interface DiagnosticData {\\n        /**\\n         * The diagnostic message.\\n         */\\n        message: string;\\n\\n        /**\\n         * The nesting level of the test.\\n         */\\n        nesting: number;\\n    }\\n\\n    interface TestFail {\\n        /**\\n         * Additional execution metadata.\\n         */\\n        details: {\\n            /**\\n             * The duration of the test in milliseconds.\\n             */\\n            duration: number;\\n\\n            /**\\n             * The error thrown by the test.\\n             */\\n            error: Error;\\n        };\\n\\n        /**\\n         * The test name.\\n         */\\n        name: string;\\n\\n        /**\\n         * The nesting level of the test.\\n         */\\n        nesting: number;\\n\\n        /**\\n         * The ordinal number of the test.\\n         */\\n        testNumber: number;\\n\\n        /**\\n         * Present if `context.todo` is called.\\n         */\\n        todo?: string | boolean;\\n\\n        /**\\n         * Present if `context.skip` is called.\\n         */\\n        skip?: string | boolean;\\n    }\\n\\n    interface TestPass {\\n        /**\\n         * Additional execution metadata.\\n         */\\n        details: {\\n            /**\\n             * The duration of the test in milliseconds.\\n             */\\n            duration: number;\\n        };\\n\\n        /**\\n         * The test name.\\n         */\\n        name: string;\\n\\n        /**\\n         * The nesting level of the test.\\n         */\\n        nesting: number;\\n\\n        /**\\n         * The ordinal number of the test.\\n         */\\n        testNumber: number;\\n\\n        /**\\n         * Present if `context.todo` is called.\\n         */\\n        todo?: string | boolean;\\n\\n        /**\\n         * Present if `context.skip` is called.\\n         */\\n        skip?: string | boolean;\\n    }\\n\\n    interface TestPlan {\\n        /**\\n         * The nesting level of the test.\\n         */\\n        nesting: number;\\n\\n        /**\\n         * The number of subtests that have ran.\\n         */\\n        count: number;\\n    }\\n\\n    interface TestStart {\\n        /**\\n         * The test name.\\n         */\\n        name: string;\\n\\n        /**\\n         * The nesting level of the test.\\n         */\\n        nesting: number;\\n    }\\n\\n    /**\\n     * An instance of `TestContext` is passed to each test function in order to interact with the\\n     * test runner. However, the `TestContext` constructor is not exposed as part of the API.\\n     * @since v18.0.0\\n     */\\n    interface TestContext {\\n        /**\\n         * This function is used to create a hook running before each subtest of the current test.\\n         * @param fn The hook function. If the hook uses callbacks, the callback function is passed as\\n         *    the second argument. Default: A no-op function.\\n         * @param options Configuration options for the hook.\\n         * @since v18.8.0\\n         */\\n        beforeEach: typeof beforeEach;\\n\\n        /**\\n         * This function is used to create a hook that runs after the current test finishes.\\n         * @param fn The hook function. If the hook uses callbacks, the callback function is passed as\\n         *    the second argument. Default: A no-op function.\\n         * @param options Configuration options for the hook.\\n         * @since v18.13.0\\n         */\\n        after: typeof after;\\n\\n        /**\\n         * This function is used to create a hook running after each subtest of the current test.\\n         * @param fn The hook function. If the hook uses callbacks, the callback function is passed as\\n         *    the second argument. Default: A no-op function.\\n         * @param options Configuration options for the hook.\\n         * @since v18.8.0\\n         */\\n        afterEach: typeof afterEach;\\n\\n        /**\\n         * This function is used to write diagnostics to the output. Any diagnostic information is\\n         * included at the end of the test's results. This function does not return a value.\\n         * @param message Message to be reported.\\n         * @since v18.0.0\\n         */\\n        diagnostic(message: string): void;\\n\\n        /**\\n         * The name of the test.\\n         * @since v18.8.0\\n         */\\n        readonly name: string;\\n\\n        /**\\n         * If `shouldRunOnlyTests` is truthy, the test context will only run tests that have the `only`\\n         * option set. Otherwise, all tests are run. If Node.js was not started with the `--test-only`\\n         * command-line option, this function is a no-op.\\n         * @param shouldRunOnlyTests Whether or not to run `only` tests.\\n         * @since v18.0.0\\n         */\\n        runOnly(shouldRunOnlyTests: boolean): void;\\n\\n        /**\\n         * Can be used to abort test subtasks when the test has been aborted.\\n         * @since v18.7.0\\n         */\\n        readonly signal: AbortSignal;\\n\\n        /**\\n         * This function causes the test's output to indicate the test as skipped. If `message` is\\n         * provided, it is included in the output. Calling `skip()` does not terminate execution of\\n         * the test function. This function does not return a value.\\n         * @param message Optional skip message.\\n         * @since v18.0.0\\n         */\\n        skip(message?: string): void;\\n\\n        /**\\n         * This function adds a `TODO` directive to the test's output. If `message` is provided, it is\\n         * included in the output. Calling `todo()` does not terminate execution of the test\\n         * function. This function does not return a value.\\n         * @param message Optional `TODO` message.\\n         * @since v18.0.0\\n         */\\n        todo(message?: string): void;\\n\\n        /**\\n         * This function is used to create subtests under the current test. This function behaves in\\n         * the same fashion as the top level {@link test} function.\\n         * @since v18.0.0\\n         * @param name The name of the test, which is displayed when reporting test results.\\n         *    Default: The `name` property of fn, or `'<anonymous>'` if `fn` does not have a name.\\n         * @param options Configuration options for the test\\n         * @param fn The function under test. This first argument to this function is a\\n         *    {@link TestContext} object. If the test uses callbacks, the callback function is\\n         *    passed as the second argument. Default: A no-op function.\\n         * @returns A {@link Promise} resolved with `undefined` once the test completes.\\n         */\\n        test: typeof test;\\n        /**\\n         * Each test provides its own MockTracker instance.\\n         */\\n        readonly mock: MockTracker;\\n    }\\n\\n    interface TestOptions {\\n        /**\\n         * If a number is provided, then that many tests would run in parallel.\\n         * If truthy, it would run (number of cpu cores - 1) tests in parallel.\\n         * For subtests, it will be `Infinity` tests in parallel.\\n         * If falsy, it would only run one test at a time.\\n         * If unspecified, subtests inherit this value from their parent.\\n         * @default false\\n         */\\n        concurrency?: number | boolean | undefined;\\n\\n        /**\\n         * If truthy, and the test context is configured to run `only` tests, then this test will be\\n         * run. Otherwise, the test is skipped.\\n         * @default false\\n         */\\n        only?: boolean | undefined;\\n\\n        /**\\n         * Allows aborting an in-progress test.\\n         * @since v18.8.0\\n         */\\n        signal?: AbortSignal | undefined;\\n\\n        /**\\n         * If truthy, the test is skipped. If a string is provided, that string is displayed in the\\n         * test results as the reason for skipping the test.\\n         * @default false\\n         */\\n        skip?: boolean | string | undefined;\\n\\n        /**\\n         * A number of milliseconds the test will fail after. If unspecified, subtests inherit this\\n         * value from their parent.\\n         * @default Infinity\\n         * @since v18.7.0\\n         */\\n        timeout?: number | undefined;\\n\\n        /**\\n         * If truthy, the test marked as `TODO`. If a string is provided, that string is displayed in\\n         * the test results as the reason why the test is `TODO`.\\n         * @default false\\n         */\\n        todo?: boolean | string | undefined;\\n    }\\n\\n    /**\\n     * This function is used to create a hook running before running a suite.\\n     * @param fn The hook function. If the hook uses callbacks, the callback function is passed as\\n     *    the second argument. Default: A no-op function.\\n     * @param options Configuration options for the hook.\\n     * @since v18.8.0\\n     */\\n    function before(fn?: HookFn, options?: HookOptions): void;\\n\\n    /**\\n     * This function is used to create a hook running after running a suite.\\n     * @param fn The hook function. If the hook uses callbacks, the callback function is passed as\\n     *    the second argument. Default: A no-op function.\\n     * @param options Configuration options for the hook.\\n     * @since v18.8.0\\n     */\\n    function after(fn?: HookFn, options?: HookOptions): void;\\n\\n    /**\\n     * This function is used to create a hook running before each subtest of the current suite.\\n     * @param fn The hook function. If the hook uses callbacks, the callback function is passed as\\n     *    the second argument. Default: A no-op function.\\n     * @param options Configuration options for the hook.\\n     * @since v18.8.0\\n     */\\n    function beforeEach(fn?: HookFn, options?: HookOptions): void;\\n\\n    /**\\n     * This function is used to create a hook running after each subtest of the current test.\\n     * @param fn The hook function. If the hook uses callbacks, the callback function is passed as\\n     *    the second argument. Default: A no-op function.\\n     * @param options Configuration options for the hook.\\n     * @since v18.8.0\\n     */\\n    function afterEach(fn?: HookFn, options?: HookOptions): void;\\n\\n    /**\\n     * The hook function. If the hook uses callbacks, the callback function is passed as the\\n     * second argument.\\n     */\\n    type HookFn = (done: (result?: any) => void) => any;\\n\\n    /**\\n     * Configuration options for hooks.\\n     * @since v18.8.0\\n     */\\n    interface HookOptions {\\n        /**\\n         * Allows aborting an in-progress hook.\\n         */\\n        signal?: AbortSignal | undefined;\\n\\n        /**\\n         * A number of milliseconds the hook will fail after. If unspecified, subtests inherit this\\n         * value from their parent.\\n         * @default Infinity\\n         */\\n        timeout?: number | undefined;\\n    }\\n\\n    interface MockFunctionOptions {\\n        /**\\n         * The number of times that the mock will use the behavior of `implementation`.\\n         * Once the mock function has been called `times` times,\\n         * it will automatically restore the behavior of `original`.\\n         * This value must be an integer greater than zero.\\n         * @default Infinity\\n         */\\n        times?: number | undefined;\\n    }\\n\\n    interface MockMethodOptions extends MockFunctionOptions {\\n        /**\\n         * If `true`, `object[methodName]` is treated as a getter.\\n         * This option cannot be used with the `setter` option.\\n         */\\n        getter?: boolean | undefined;\\n\\n        /**\\n         * If `true`, `object[methodName]` is treated as a setter.\\n         * This option cannot be used with the `getter` option.\\n         */\\n        setter?: boolean | undefined;\\n    }\\n\\n    type Mock<F extends Function> = F & {\\n        mock: MockFunctionContext<F>;\\n    };\\n\\n    type NoOpFunction = (...args: any[]) => undefined;\\n\\n    type FunctionPropertyNames<T> = {\\n        [K in keyof T]: T[K] extends Function ? K : never;\\n    }[keyof T];\\n\\n    interface MockTracker {\\n        /**\\n         * This function is used to create a mock function.\\n         * @param original An optional function to create a mock on.\\n         * @param implementation An optional function used as the mock implementation for `original`.\\n         *  This is useful for creating mocks that exhibit one behavior for a specified number of calls and then restore the behavior of `original`.\\n         * @param options Optional configuration options for the mock function.\\n         */\\n        fn<F extends Function = NoOpFunction>(original?: F, options?: MockFunctionOptions): Mock<F>;\\n        fn<F extends Function = NoOpFunction, Implementation extends Function = F>(original?: F, implementation?: Implementation, options?: MockFunctionOptions): Mock<F | Implementation>;\\n\\n        /**\\n         * This function is used to create a mock on an existing object method.\\n         * @param object The object whose method is being mocked.\\n         * @param methodName The identifier of the method on `object` to mock. If `object[methodName]` is not a function, an error is thrown.\\n         * @param implementation An optional function used as the mock implementation for `object[methodName]`.\\n         * @param options Optional configuration options for the mock method.\\n         */\\n        method<\\n            MockedObject extends object,\\n            MethodName extends FunctionPropertyNames<MockedObject>,\\n        >(\\n            object: MockedObject,\\n            methodName: MethodName,\\n            options?: MockFunctionOptions,\\n        ): MockedObject[MethodName] extends Function\\n            ? Mock<MockedObject[MethodName]>\\n            : never;\\n        method<\\n            MockedObject extends object,\\n            MethodName extends FunctionPropertyNames<MockedObject>,\\n            Implementation extends Function,\\n        >(\\n            object: MockedObject,\\n            methodName: MethodName,\\n            implementation: Implementation,\\n            options?: MockFunctionOptions,\\n        ): MockedObject[MethodName] extends Function\\n            ? Mock<MockedObject[MethodName] | Implementation>\\n            : never;\\n        method<MockedObject extends object>(\\n            object: MockedObject,\\n            methodName: keyof MockedObject,\\n            options: MockMethodOptions,\\n        ): Mock<Function>;\\n        method<MockedObject extends object>(\\n            object: MockedObject,\\n            methodName: keyof MockedObject,\\n            implementation: Function,\\n            options: MockMethodOptions,\\n        ): Mock<Function>;\\n\\n        /**\\n         * This function is syntax sugar for {@link MockTracker.method} with `options.getter` set to `true`.\\n         */\\n        getter<\\n            MockedObject extends object,\\n            MethodName extends keyof MockedObject,\\n        >(\\n            object: MockedObject,\\n            methodName: MethodName,\\n            options?: MockFunctionOptions,\\n        ): Mock<() => MockedObject[MethodName]>;\\n        getter<\\n            MockedObject extends object,\\n            MethodName extends keyof MockedObject,\\n            Implementation extends Function,\\n        >(\\n            object: MockedObject,\\n            methodName: MethodName,\\n            implementation?: Implementation,\\n            options?: MockFunctionOptions,\\n        ): Mock<(() => MockedObject[MethodName]) | Implementation>;\\n\\n        /**\\n         * This function is syntax sugar for {@link MockTracker.method} with `options.setter` set to `true`.\\n         */\\n        setter<\\n            MockedObject extends object,\\n            MethodName extends keyof MockedObject,\\n        >(\\n            object: MockedObject,\\n            methodName: MethodName,\\n            options?: MockFunctionOptions,\\n        ): Mock<(value: MockedObject[MethodName]) => void>;\\n        setter<\\n            MockedObject extends object,\\n            MethodName extends keyof MockedObject,\\n            Implementation extends Function,\\n        >(\\n            object: MockedObject,\\n            methodName: MethodName,\\n            implementation?: Implementation,\\n            options?: MockFunctionOptions,\\n        ): Mock<((value: MockedObject[MethodName]) => void) | Implementation>;\\n\\n        /**\\n         * This function restores the default behavior of all mocks that were previously created by this `MockTracker`\\n         * and disassociates the mocks from the `MockTracker` instance. Once disassociated, the mocks can still be used,\\n         * but the `MockTracker` instance can no longer be used to reset their behavior or otherwise interact with them.\\n         *\\n         * After each test completes, this function is called on the test context's `MockTracker`.\\n         * If the global `MockTracker` is used extensively, calling this function manually is recommended.\\n         */\\n        reset(): void;\\n\\n        /**\\n         * This function restores the default behavior of all mocks that were previously created by this `MockTracker`.\\n         * Unlike `mock.reset()`, `mock.restoreAll()` does not disassociate the mocks from the `MockTracker` instance.\\n         */\\n        restoreAll(): void;\\n    }\\n\\n    const mock: MockTracker;\\n\\n    interface MockFunctionCall<\\n        F extends Function,\\n        ReturnType = F extends (...args: any) => infer T\\n            ? T\\n            : F extends abstract new (...args: any) => infer T\\n                ? T\\n                : unknown,\\n        Args = F extends (...args: infer Y) => any\\n            ? Y\\n            : F extends abstract new (...args: infer Y) => any\\n                ? Y\\n                : unknown[],\\n    > {\\n        /**\\n         * An array of the arguments passed to the mock function.\\n         */\\n        arguments: Args;\\n        /**\\n         * If the mocked function threw then this property contains the thrown value.\\n         */\\n        error: unknown | undefined;\\n        /**\\n         * The value returned by the mocked function.\\n         *\\n         * If the mocked function threw, it will be `undefined`.\\n         */\\n        result: ReturnType | undefined;\\n        /**\\n         * An `Error` object whose stack can be used to determine the callsite of the mocked function invocation.\\n         */\\n        stack: Error;\\n        /**\\n         * If the mocked function is a constructor, this field contains the class being constructed.\\n         * Otherwise this will be `undefined`.\\n         */\\n        target: F extends abstract new (...args: any) => any ? F : undefined;\\n        /**\\n         * The mocked function's `this` value.\\n         */\\n        this: unknown;\\n    }\\n\\n    interface MockFunctionContext<F extends Function> {\\n        /**\\n         * A getter that returns a copy of the internal array used to track calls to the mock.\\n         */\\n        readonly calls: Array<MockFunctionCall<F>>;\\n\\n        /**\\n         * This function returns the number of times that this mock has been invoked.\\n         * This function is more efficient than checking `ctx.calls.length`\\n         * because `ctx.calls` is a getter that creates a copy of the internal call tracking array.\\n         */\\n        callCount(): number;\\n\\n        /**\\n         * This function is used to change the behavior of an existing mock.\\n         * @param implementation The function to be used as the mock's new implementation.\\n         */\\n        mockImplementation(implementation: Function): void;\\n\\n        /**\\n         * This function is used to change the behavior of an existing mock for a single invocation.\\n         * Once invocation `onCall` has occurred, the mock will revert to whatever behavior\\n         * it would have used had `mockImplementationOnce()` not been called.\\n         * @param implementation The function to be used as the mock's implementation for the invocation number specified by `onCall`.\\n         * @param onCall The invocation number that will use `implementation`.\\n         *  If the specified invocation has already occurred then an exception is thrown.\\n         */\\n        mockImplementationOnce(implementation: Function, onCall?: number): void;\\n\\n        /**\\n         * Resets the call history of the mock function.\\n         */\\n        resetCalls(): void;\\n\\n        /**\\n         * Resets the implementation of the mock function to its original behavior.\\n         * The mock can still be used after calling this function.\\n         */\\n        restore(): void;\\n    }\\n\\n    export { test as default, run, test, describe, it, before, after, beforeEach, afterEach, mock };\\n}\\n\",\"file:///node_modules/@types/node/timers.d.ts\":\"/**\\n * The `timer` module exposes a global API for scheduling functions to\\n * be called at some future period of time. Because the timer functions are\\n * globals, there is no need to call `require('timers')` to use the API.\\n *\\n * The timer functions within Node.js implement a similar API as the timers API\\n * provided by Web Browsers but use a different internal implementation that is\\n * built around the Node.js [Event Loop](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#setimmediate-vs-settimeout).\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/timers.js)\\n */\\ndeclare module 'timers' {\\n    import { Abortable } from 'node:events';\\n    import { setTimeout as setTimeoutPromise, setImmediate as setImmediatePromise, setInterval as setIntervalPromise } from 'node:timers/promises';\\n    interface TimerOptions extends Abortable {\\n        /**\\n         * Set to `false` to indicate that the scheduled `Timeout`\\n         * should not require the Node.js event loop to remain active.\\n         * @default true\\n         */\\n        ref?: boolean | undefined;\\n    }\\n    let setTimeout: typeof global.setTimeout;\\n    let clearTimeout: typeof global.clearTimeout;\\n    let setInterval: typeof global.setInterval;\\n    let clearInterval: typeof global.clearInterval;\\n    let setImmediate: typeof global.setImmediate;\\n    let clearImmediate: typeof global.clearImmediate;\\n    global {\\n        namespace NodeJS {\\n            // compatibility with older typings\\n            interface Timer extends RefCounted {\\n                hasRef(): boolean;\\n                refresh(): this;\\n                [Symbol.toPrimitive](): number;\\n            }\\n            interface Immediate extends RefCounted {\\n                /**\\n                 * If true, the `Immediate` object will keep the Node.js event loop active.\\n                 * @since v11.0.0\\n                 */\\n                hasRef(): boolean;\\n                _onImmediate: Function; // to distinguish it from the Timeout class\\n            }\\n            interface Timeout extends Timer {\\n                /**\\n                 * If true, the `Timeout` object will keep the Node.js event loop active.\\n                 * @since v11.0.0\\n                 */\\n                hasRef(): boolean;\\n                /**\\n                 * Sets the timer's start time to the current time, and reschedules the timer to\\n                 * call its callback at the previously specified duration adjusted to the current\\n                 * time. This is useful for refreshing a timer without allocating a new\\n                 * JavaScript object.\\n                 *\\n                 * Using this on a timer that has already called its callback will reactivate the\\n                 * timer.\\n                 * @since v10.2.0\\n                 * @return a reference to `timeout`\\n                 */\\n                refresh(): this;\\n                [Symbol.toPrimitive](): number;\\n            }\\n        }\\n        /**\\n         * Schedules execution of a one-time `callback` after `delay` milliseconds. The `callback` will likely not be invoked in precisely `delay` milliseconds.\\n         * Node.js makes no guarantees about the exact timing of when callbacks will fire, nor of their ordering. The callback will be called as close as possible to the time specified.\\n         * When `delay` is larger than `2147483647` or less than `1`, the `delay` will be set to `1`. Non-integer delays are truncated to an integer.\\n         * If `callback` is not a function, a [TypeError](https://nodejs.org/api/errors.html#class-typeerror) will be thrown.\\n         * @since v0.0.1\\n         */\\n        function setTimeout<TArgs extends any[]>(callback: (...args: TArgs) => void, ms?: number, ...args: TArgs): NodeJS.Timeout;\\n        // util.promisify no rest args compability\\n        // tslint:disable-next-line void-return\\n        function setTimeout(callback: (args: void) => void, ms?: number): NodeJS.Timeout;\\n        namespace setTimeout {\\n            const __promisify__: typeof setTimeoutPromise;\\n        }\\n        function clearTimeout(timeoutId: NodeJS.Timeout | string | number | undefined): void;\\n        function setInterval<TArgs extends any[]>(callback: (...args: TArgs) => void, ms?: number, ...args: TArgs): NodeJS.Timer;\\n        // util.promisify no rest args compability\\n        // tslint:disable-next-line void-return\\n        function setInterval(callback: (args: void) => void, ms?: number): NodeJS.Timer;\\n        namespace setInterval {\\n            const __promisify__: typeof setIntervalPromise;\\n        }\\n        function clearInterval(intervalId: NodeJS.Timeout | string | number | undefined): void;\\n        function setImmediate<TArgs extends any[]>(callback: (...args: TArgs) => void, ...args: TArgs): NodeJS.Immediate;\\n        // util.promisify no rest args compability\\n        // tslint:disable-next-line void-return\\n        function setImmediate(callback: (args: void) => void): NodeJS.Immediate;\\n        namespace setImmediate {\\n            const __promisify__: typeof setImmediatePromise;\\n        }\\n        function clearImmediate(immediateId: NodeJS.Immediate | undefined): void;\\n        function queueMicrotask(callback: () => void): void;\\n    }\\n}\\ndeclare module 'node:timers' {\\n    export * from 'timers';\\n}\\n\",\"file:///node_modules/@types/node/tls.d.ts\":\"/**\\n * The `tls` module provides an implementation of the Transport Layer Security\\n * (TLS) and Secure Socket Layer (SSL) protocols that is built on top of OpenSSL.\\n * The module can be accessed using:\\n *\\n * ```js\\n * const tls = require('tls');\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/tls.js)\\n */\\ndeclare module 'tls' {\\n    import { X509Certificate } from 'node:crypto';\\n    import * as net from 'node:net';\\n    import * as stream from 'stream';\\n    const CLIENT_RENEG_LIMIT: number;\\n    const CLIENT_RENEG_WINDOW: number;\\n    interface Certificate {\\n        /**\\n         * Country code.\\n         */\\n        C: string;\\n        /**\\n         * Street.\\n         */\\n        ST: string;\\n        /**\\n         * Locality.\\n         */\\n        L: string;\\n        /**\\n         * Organization.\\n         */\\n        O: string;\\n        /**\\n         * Organizational unit.\\n         */\\n        OU: string;\\n        /**\\n         * Common name.\\n         */\\n        CN: string;\\n    }\\n    interface PeerCertificate {\\n        /**\\n         * `true` if a Certificate Authority (CA), `false` otherwise.\\n         * @since v18.13.0\\n         */\\n        ca: boolean;\\n        /**\\n         * The DER encoded X.509 certificate data.\\n         */\\n        raw: Buffer;\\n        /**\\n         * The certificate subject.\\n         */\\n        subject: Certificate;\\n        /**\\n         * The certificate issuer, described in the same terms as the `subject`.\\n         */\\n        issuer: Certificate;\\n        /**\\n         * The date-time the certificate is valid from.\\n         */\\n        valid_from: string;\\n        /**\\n         * The date-time the certificate is valid to.\\n         */\\n        valid_to: string;\\n        /**\\n         * The certificate serial number, as a hex string.\\n         */\\n        serialNumber: string;\\n        /**\\n         * The SHA-1 digest of the DER encoded certificate.\\n         * It is returned as a `:` separated hexadecimal string.\\n         */\\n        fingerprint: string;\\n        /**\\n         * The SHA-256 digest of the DER encoded certificate.\\n         * It is returned as a `:` separated hexadecimal string.\\n         */\\n        fingerprint256: string;\\n        /**\\n         * The SHA-512 digest of the DER encoded certificate.\\n         * It is returned as a `:` separated hexadecimal string.\\n         */\\n        fingerprint512: string;\\n        /**\\n         * The extended key usage, a set of OIDs.\\n         */\\n        ext_key_usage?: string[];\\n        /**\\n         * A string containing concatenated names for the subject,\\n         * an alternative to the `subject` names.\\n         */\\n        subjectaltname?: string;\\n        /**\\n         * An array describing the AuthorityInfoAccess, used with OCSP.\\n         */\\n        infoAccess?: NodeJS.Dict<string[]>;\\n        /**\\n         * For RSA keys: The RSA bit size.\\n         *\\n         * For EC keys: The key size in bits.\\n         */\\n        bits?: number;\\n        /**\\n         * The RSA exponent, as a string in hexadecimal number notation.\\n         */\\n        exponent?: string;\\n        /**\\n         * The RSA modulus, as a hexadecimal string.\\n         */\\n        modulus?: string;\\n        /**\\n         * The public key.\\n         */\\n        pubkey?: Buffer;\\n        /**\\n         * The ASN.1 name of the OID of the elliptic curve.\\n         * Well-known curves are identified by an OID.\\n         * While it is unusual, it is possible that the curve\\n         * is identified by its mathematical properties,\\n         * in which case it will not have an OID.\\n         */\\n        asn1Curve?: string;\\n        /**\\n         * The NIST name for the elliptic curve,if it has one\\n         * (not all well-known curves have been assigned names by NIST).\\n         */\\n        nistCurve?: string;\\n    }\\n    interface DetailedPeerCertificate extends PeerCertificate {\\n        /**\\n         * The issuer certificate object.\\n         * For self-signed certificates, this may be a circular reference.\\n         */\\n        issuerCertificate: DetailedPeerCertificate;\\n    }\\n    interface CipherNameAndProtocol {\\n        /**\\n         * The cipher name.\\n         */\\n        name: string;\\n        /**\\n         * SSL/TLS protocol version.\\n         */\\n        version: string;\\n        /**\\n         * IETF name for the cipher suite.\\n         */\\n        standardName: string;\\n    }\\n    interface EphemeralKeyInfo {\\n        /**\\n         * The supported types are 'DH' and 'ECDH'.\\n         */\\n        type: string;\\n        /**\\n         * The name property is available only when type is 'ECDH'.\\n         */\\n        name?: string | undefined;\\n        /**\\n         * The size of parameter of an ephemeral key exchange.\\n         */\\n        size: number;\\n    }\\n    interface KeyObject {\\n        /**\\n         * Private keys in PEM format.\\n         */\\n        pem: string | Buffer;\\n        /**\\n         * Optional passphrase.\\n         */\\n        passphrase?: string | undefined;\\n    }\\n    interface PxfObject {\\n        /**\\n         * PFX or PKCS12 encoded private key and certificate chain.\\n         */\\n        buf: string | Buffer;\\n        /**\\n         * Optional passphrase.\\n         */\\n        passphrase?: string | undefined;\\n    }\\n    interface TLSSocketOptions extends SecureContextOptions, CommonConnectionOptions {\\n        /**\\n         * If true the TLS socket will be instantiated in server-mode.\\n         * Defaults to false.\\n         */\\n        isServer?: boolean | undefined;\\n        /**\\n         * An optional net.Server instance.\\n         */\\n        server?: net.Server | undefined;\\n        /**\\n         * An optional Buffer instance containing a TLS session.\\n         */\\n        session?: Buffer | undefined;\\n        /**\\n         * If true, specifies that the OCSP status request extension will be\\n         * added to the client hello and an 'OCSPResponse' event will be\\n         * emitted on the socket before establishing a secure communication\\n         */\\n        requestOCSP?: boolean | undefined;\\n    }\\n    /**\\n     * Performs transparent encryption of written data and all required TLS\\n     * negotiation.\\n     *\\n     * Instances of `tls.TLSSocket` implement the duplex `Stream` interface.\\n     *\\n     * Methods that return TLS connection metadata (e.g.{@link TLSSocket.getPeerCertificate} will only return data while the\\n     * connection is open.\\n     * @since v0.11.4\\n     */\\n    class TLSSocket extends net.Socket {\\n        /**\\n         * Construct a new tls.TLSSocket object from an existing TCP socket.\\n         */\\n        constructor(socket: net.Socket, options?: TLSSocketOptions);\\n        /**\\n         * This property is `true` if the peer certificate was signed by one of the CAs\\n         * specified when creating the `tls.TLSSocket` instance, otherwise `false`.\\n         * @since v0.11.4\\n         */\\n        authorized: boolean;\\n        /**\\n         * Returns the reason why the peer's certificate was not been verified. This\\n         * property is set only when `tlsSocket.authorized === false`.\\n         * @since v0.11.4\\n         */\\n        authorizationError: Error;\\n        /**\\n         * Always returns `true`. This may be used to distinguish TLS sockets from regular`net.Socket` instances.\\n         * @since v0.11.4\\n         */\\n        encrypted: true;\\n        /**\\n         * String containing the selected ALPN protocol.\\n         * Before a handshake has completed, this value is always null.\\n         * When a handshake is completed but not ALPN protocol was selected, tlsSocket.alpnProtocol equals false.\\n         */\\n        alpnProtocol: string | false | null;\\n        /**\\n         * Returns an object representing the local certificate. The returned object has\\n         * some properties corresponding to the fields of the certificate.\\n         *\\n         * See {@link TLSSocket.getPeerCertificate} for an example of the certificate\\n         * structure.\\n         *\\n         * If there is no local certificate, an empty object will be returned. If the\\n         * socket has been destroyed, `null` will be returned.\\n         * @since v11.2.0\\n         */\\n        getCertificate(): PeerCertificate | object | null;\\n        /**\\n         * Returns an object containing information on the negotiated cipher suite.\\n         *\\n         * For example:\\n         *\\n         * ```json\\n         * {\\n         *     \\\"name\\\": \\\"AES128-SHA256\\\",\\n         *     \\\"standardName\\\": \\\"TLS_RSA_WITH_AES_128_CBC_SHA256\\\",\\n         *     \\\"version\\\": \\\"TLSv1.2\\\"\\n         * }\\n         * ```\\n         *\\n         * See [SSL\\\\_CIPHER\\\\_get\\\\_name](https://www.openssl.org/docs/man1.1.1/man3/SSL_CIPHER_get_name.html) for more information.\\n         * @since v0.11.4\\n         */\\n        getCipher(): CipherNameAndProtocol;\\n        /**\\n         * Returns an object representing the type, name, and size of parameter of\\n         * an ephemeral key exchange in `perfect forward secrecy` on a client\\n         * connection. It returns an empty object when the key exchange is not\\n         * ephemeral. As this is only supported on a client socket; `null` is returned\\n         * if called on a server socket. The supported types are `'DH'` and `'ECDH'`. The`name` property is available only when type is `'ECDH'`.\\n         *\\n         * For example: `{ type: 'ECDH', name: 'prime256v1', size: 256 }`.\\n         * @since v5.0.0\\n         */\\n        getEphemeralKeyInfo(): EphemeralKeyInfo | object | null;\\n        /**\\n         * As the `Finished` messages are message digests of the complete handshake\\n         * (with a total of 192 bits for TLS 1.0 and more for SSL 3.0), they can\\n         * be used for external authentication procedures when the authentication\\n         * provided by SSL/TLS is not desired or is not enough.\\n         *\\n         * Corresponds to the `SSL_get_finished` routine in OpenSSL and may be used\\n         * to implement the `tls-unique` channel binding from [RFC 5929](https://tools.ietf.org/html/rfc5929).\\n         * @since v9.9.0\\n         * @return The latest `Finished` message that has been sent to the socket as part of a SSL/TLS handshake, or `undefined` if no `Finished` message has been sent yet.\\n         */\\n        getFinished(): Buffer | undefined;\\n        /**\\n         * Returns an object representing the peer's certificate. If the peer does not\\n         * provide a certificate, an empty object will be returned. If the socket has been\\n         * destroyed, `null` will be returned.\\n         *\\n         * If the full certificate chain was requested, each certificate will include an`issuerCertificate` property containing an object representing its issuer's\\n         * certificate.\\n         * @since v0.11.4\\n         * @param detailed Include the full certificate chain if `true`, otherwise include just the peer's certificate.\\n         * @return A certificate object.\\n         */\\n        getPeerCertificate(detailed: true): DetailedPeerCertificate;\\n        getPeerCertificate(detailed?: false): PeerCertificate;\\n        getPeerCertificate(detailed?: boolean): PeerCertificate | DetailedPeerCertificate;\\n        /**\\n         * As the `Finished` messages are message digests of the complete handshake\\n         * (with a total of 192 bits for TLS 1.0 and more for SSL 3.0), they can\\n         * be used for external authentication procedures when the authentication\\n         * provided by SSL/TLS is not desired or is not enough.\\n         *\\n         * Corresponds to the `SSL_get_peer_finished` routine in OpenSSL and may be used\\n         * to implement the `tls-unique` channel binding from [RFC 5929](https://tools.ietf.org/html/rfc5929).\\n         * @since v9.9.0\\n         * @return The latest `Finished` message that is expected or has actually been received from the socket as part of a SSL/TLS handshake, or `undefined` if there is no `Finished` message so\\n         * far.\\n         */\\n        getPeerFinished(): Buffer | undefined;\\n        /**\\n         * Returns a string containing the negotiated SSL/TLS protocol version of the\\n         * current connection. The value `'unknown'` will be returned for connected\\n         * sockets that have not completed the handshaking process. The value `null` will\\n         * be returned for server sockets or disconnected client sockets.\\n         *\\n         * Protocol versions are:\\n         *\\n         * * `'SSLv3'`\\n         * * `'TLSv1'`\\n         * * `'TLSv1.1'`\\n         * * `'TLSv1.2'`\\n         * * `'TLSv1.3'`\\n         *\\n         * See the OpenSSL [`SSL_get_version`](https://www.openssl.org/docs/man1.1.1/man3/SSL_get_version.html) documentation for more information.\\n         * @since v5.7.0\\n         */\\n        getProtocol(): string | null;\\n        /**\\n         * Returns the TLS session data or `undefined` if no session was\\n         * negotiated. On the client, the data can be provided to the `session` option of {@link connect} to resume the connection. On the server, it may be useful\\n         * for debugging.\\n         *\\n         * See `Session Resumption` for more information.\\n         *\\n         * Note: `getSession()` works only for TLSv1.2 and below. For TLSv1.3, applications\\n         * must use the `'session'` event (it also works for TLSv1.2 and below).\\n         * @since v0.11.4\\n         */\\n        getSession(): Buffer | undefined;\\n        /**\\n         * See [SSL\\\\_get\\\\_shared\\\\_sigalgs](https://www.openssl.org/docs/man1.1.1/man3/SSL_get_shared_sigalgs.html) for more information.\\n         * @since v12.11.0\\n         * @return List of signature algorithms shared between the server and the client in the order of decreasing preference.\\n         */\\n        getSharedSigalgs(): string[];\\n        /**\\n         * For a client, returns the TLS session ticket if one is available, or`undefined`. For a server, always returns `undefined`.\\n         *\\n         * It may be useful for debugging.\\n         *\\n         * See `Session Resumption` for more information.\\n         * @since v0.11.4\\n         */\\n        getTLSTicket(): Buffer | undefined;\\n        /**\\n         * See `Session Resumption` for more information.\\n         * @since v0.5.6\\n         * @return `true` if the session was reused, `false` otherwise.\\n         */\\n        isSessionReused(): boolean;\\n        /**\\n         * The `tlsSocket.renegotiate()` method initiates a TLS renegotiation process.\\n         * Upon completion, the `callback` function will be passed a single argument\\n         * that is either an `Error` (if the request failed) or `null`.\\n         *\\n         * This method can be used to request a peer's certificate after the secure\\n         * connection has been established.\\n         *\\n         * When running as the server, the socket will be destroyed with an error after`handshakeTimeout` timeout.\\n         *\\n         * For TLSv1.3, renegotiation cannot be initiated, it is not supported by the\\n         * protocol.\\n         * @since v0.11.8\\n         * @param callback If `renegotiate()` returned `true`, callback is attached once to the `'secure'` event. If `renegotiate()` returned `false`, `callback` will be called in the next tick with\\n         * an error, unless the `tlsSocket` has been destroyed, in which case `callback` will not be called at all.\\n         * @return `true` if renegotiation was initiated, `false` otherwise.\\n         */\\n        renegotiate(\\n            options: {\\n                rejectUnauthorized?: boolean | undefined;\\n                requestCert?: boolean | undefined;\\n            },\\n            callback: (err: Error | null) => void\\n        ): undefined | boolean;\\n        /**\\n         * The `tlsSocket.setMaxSendFragment()` method sets the maximum TLS fragment size.\\n         * Returns `true` if setting the limit succeeded; `false` otherwise.\\n         *\\n         * Smaller fragment sizes decrease the buffering latency on the client: larger\\n         * fragments are buffered by the TLS layer until the entire fragment is received\\n         * and its integrity is verified; large fragments can span multiple roundtrips\\n         * and their processing can be delayed due to packet loss or reordering. However,\\n         * smaller fragments add extra TLS framing bytes and CPU overhead, which may\\n         * decrease overall server throughput.\\n         * @since v0.11.11\\n         * @param [size=16384] The maximum TLS fragment size. The maximum value is `16384`.\\n         */\\n        setMaxSendFragment(size: number): boolean;\\n        /**\\n         * Disables TLS renegotiation for this `TLSSocket` instance. Once called, attempts\\n         * to renegotiate will trigger an `'error'` event on the `TLSSocket`.\\n         * @since v8.4.0\\n         */\\n        disableRenegotiation(): void;\\n        /**\\n         * When enabled, TLS packet trace information is written to `stderr`. This can be\\n         * used to debug TLS connection problems.\\n         *\\n         * The format of the output is identical to the output of`openssl s_client -trace` or `openssl s_server -trace`. While it is produced by\\n         * OpenSSL's `SSL_trace()` function, the format is undocumented, can change\\n         * without notice, and should not be relied on.\\n         * @since v12.2.0\\n         */\\n        enableTrace(): void;\\n        /**\\n         * Returns the peer certificate as an `X509Certificate` object.\\n         *\\n         * If there is no peer certificate, or the socket has been destroyed,`undefined` will be returned.\\n         * @since v15.9.0\\n         */\\n        getPeerX509Certificate(): X509Certificate | undefined;\\n        /**\\n         * Returns the local certificate as an `X509Certificate` object.\\n         *\\n         * If there is no local certificate, or the socket has been destroyed,`undefined` will be returned.\\n         * @since v15.9.0\\n         */\\n        getX509Certificate(): X509Certificate | undefined;\\n        /**\\n         * Keying material is used for validations to prevent different kind of attacks in\\n         * network protocols, for example in the specifications of IEEE 802.1X.\\n         *\\n         * Example\\n         *\\n         * ```js\\n         * const keyingMaterial = tlsSocket.exportKeyingMaterial(\\n         *   128,\\n         *   'client finished');\\n         *\\n         * /*\\n         *  Example return value of keyingMaterial:\\n         *  <Buffer 76 26 af 99 c5 56 8e 42 09 91 ef 9f 93 cb ad 6c 7b 65 f8 53 f1 d8 d9\\n         *     12 5a 33 b8 b5 25 df 7b 37 9f e0 e2 4f b8 67 83 a3 2f cd 5d 41 42 4c 91\\n         *     74 ef 2c ... 78 more bytes>\\n         *\\n         * ```\\n         *\\n         * See the OpenSSL [`SSL_export_keying_material`](https://www.openssl.org/docs/man1.1.1/man3/SSL_export_keying_material.html) documentation for more\\n         * information.\\n         * @since v13.10.0, v12.17.0\\n         * @param length number of bytes to retrieve from keying material\\n         * @param label an application specific label, typically this will be a value from the [IANA Exporter Label\\n         * Registry](https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#exporter-labels).\\n         * @param context Optionally provide a context.\\n         * @return requested bytes of the keying material\\n         */\\n        exportKeyingMaterial(length: number, label: string, context: Buffer): Buffer;\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        addListener(event: 'OCSPResponse', listener: (response: Buffer) => void): this;\\n        addListener(event: 'secureConnect', listener: () => void): this;\\n        addListener(event: 'session', listener: (session: Buffer) => void): this;\\n        addListener(event: 'keylog', listener: (line: Buffer) => void): this;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        emit(event: 'OCSPResponse', response: Buffer): boolean;\\n        emit(event: 'secureConnect'): boolean;\\n        emit(event: 'session', session: Buffer): boolean;\\n        emit(event: 'keylog', line: Buffer): boolean;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        on(event: 'OCSPResponse', listener: (response: Buffer) => void): this;\\n        on(event: 'secureConnect', listener: () => void): this;\\n        on(event: 'session', listener: (session: Buffer) => void): this;\\n        on(event: 'keylog', listener: (line: Buffer) => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        once(event: 'OCSPResponse', listener: (response: Buffer) => void): this;\\n        once(event: 'secureConnect', listener: () => void): this;\\n        once(event: 'session', listener: (session: Buffer) => void): this;\\n        once(event: 'keylog', listener: (line: Buffer) => void): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'OCSPResponse', listener: (response: Buffer) => void): this;\\n        prependListener(event: 'secureConnect', listener: () => void): this;\\n        prependListener(event: 'session', listener: (session: Buffer) => void): this;\\n        prependListener(event: 'keylog', listener: (line: Buffer) => void): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'OCSPResponse', listener: (response: Buffer) => void): this;\\n        prependOnceListener(event: 'secureConnect', listener: () => void): this;\\n        prependOnceListener(event: 'session', listener: (session: Buffer) => void): this;\\n        prependOnceListener(event: 'keylog', listener: (line: Buffer) => void): this;\\n    }\\n    interface CommonConnectionOptions {\\n        /**\\n         * An optional TLS context object from tls.createSecureContext()\\n         */\\n        secureContext?: SecureContext | undefined;\\n        /**\\n         * When enabled, TLS packet trace information is written to `stderr`. This can be\\n         * used to debug TLS connection problems.\\n         * @default false\\n         */\\n        enableTrace?: boolean | undefined;\\n        /**\\n         * If true the server will request a certificate from clients that\\n         * connect and attempt to verify that certificate. Defaults to\\n         * false.\\n         */\\n        requestCert?: boolean | undefined;\\n        /**\\n         * An array of strings or a Buffer naming possible ALPN protocols.\\n         * (Protocols should be ordered by their priority.)\\n         */\\n        ALPNProtocols?: string[] | Uint8Array[] | Uint8Array | undefined;\\n        /**\\n         * SNICallback(servername, cb) <Function> A function that will be\\n         * called if the client supports SNI TLS extension. Two arguments\\n         * will be passed when called: servername and cb. SNICallback should\\n         * invoke cb(null, ctx), where ctx is a SecureContext instance.\\n         * (tls.createSecureContext(...) can be used to get a proper\\n         * SecureContext.) If SNICallback wasn't provided the default callback\\n         * with high-level API will be used (see below).\\n         */\\n        SNICallback?: ((servername: string, cb: (err: Error | null, ctx?: SecureContext) => void) => void) | undefined;\\n        /**\\n         * If true the server will reject any connection which is not\\n         * authorized with the list of supplied CAs. This option only has an\\n         * effect if requestCert is true.\\n         * @default true\\n         */\\n        rejectUnauthorized?: boolean | undefined;\\n    }\\n    interface TlsOptions extends SecureContextOptions, CommonConnectionOptions, net.ServerOpts {\\n        /**\\n         * Abort the connection if the SSL/TLS handshake does not finish in the\\n         * specified number of milliseconds. A 'tlsClientError' is emitted on\\n         * the tls.Server object whenever a handshake times out. Default:\\n         * 120000 (120 seconds).\\n         */\\n        handshakeTimeout?: number | undefined;\\n        /**\\n         * The number of seconds after which a TLS session created by the\\n         * server will no longer be resumable. See Session Resumption for more\\n         * information. Default: 300.\\n         */\\n        sessionTimeout?: number | undefined;\\n        /**\\n         * 48-bytes of cryptographically strong pseudo-random data.\\n         */\\n        ticketKeys?: Buffer | undefined;\\n        /**\\n         *\\n         * @param socket\\n         * @param identity identity parameter sent from the client.\\n         * @return pre-shared key that must either be\\n         * a buffer or `null` to stop the negotiation process. Returned PSK must be\\n         * compatible with the selected cipher's digest.\\n         *\\n         * When negotiating TLS-PSK (pre-shared keys), this function is called\\n         * with the identity provided by the client.\\n         * If the return value is `null` the negotiation process will stop and an\\n         * \\\"unknown_psk_identity\\\" alert message will be sent to the other party.\\n         * If the server wishes to hide the fact that the PSK identity was not known,\\n         * the callback must provide some random data as `psk` to make the connection\\n         * fail with \\\"decrypt_error\\\" before negotiation is finished.\\n         * PSK ciphers are disabled by default, and using TLS-PSK thus\\n         * requires explicitly specifying a cipher suite with the `ciphers` option.\\n         * More information can be found in the RFC 4279.\\n         */\\n        pskCallback?(socket: TLSSocket, identity: string): DataView | NodeJS.TypedArray | null;\\n        /**\\n         * hint to send to a client to help\\n         * with selecting the identity during TLS-PSK negotiation. Will be ignored\\n         * in TLS 1.3. Upon failing to set pskIdentityHint `tlsClientError` will be\\n         * emitted with `ERR_TLS_PSK_SET_IDENTIY_HINT_FAILED` code.\\n         */\\n        pskIdentityHint?: string | undefined;\\n    }\\n    interface PSKCallbackNegotation {\\n        psk: DataView | NodeJS.TypedArray;\\n        identity: string;\\n    }\\n    interface ConnectionOptions extends SecureContextOptions, CommonConnectionOptions {\\n        host?: string | undefined;\\n        port?: number | undefined;\\n        path?: string | undefined; // Creates unix socket connection to path. If this option is specified, `host` and `port` are ignored.\\n        socket?: stream.Duplex | undefined; // Establish secure connection on a given socket rather than creating a new socket\\n        checkServerIdentity?: typeof checkServerIdentity | undefined;\\n        servername?: string | undefined; // SNI TLS Extension\\n        session?: Buffer | undefined;\\n        minDHSize?: number | undefined;\\n        lookup?: net.LookupFunction | undefined;\\n        timeout?: number | undefined;\\n        /**\\n         * When negotiating TLS-PSK (pre-shared keys), this function is called\\n         * with optional identity `hint` provided by the server or `null`\\n         * in case of TLS 1.3 where `hint` was removed.\\n         * It will be necessary to provide a custom `tls.checkServerIdentity()`\\n         * for the connection as the default one will try to check hostname/IP\\n         * of the server against the certificate but that's not applicable for PSK\\n         * because there won't be a certificate present.\\n         * More information can be found in the RFC 4279.\\n         *\\n         * @param hint message sent from the server to help client\\n         * decide which identity to use during negotiation.\\n         * Always `null` if TLS 1.3 is used.\\n         * @returns Return `null` to stop the negotiation process. `psk` must be\\n         * compatible with the selected cipher's digest.\\n         * `identity` must use UTF-8 encoding.\\n         */\\n        pskCallback?(hint: string | null): PSKCallbackNegotation | null;\\n    }\\n    /**\\n     * Accepts encrypted connections using TLS or SSL.\\n     * @since v0.3.2\\n     */\\n    class Server extends net.Server {\\n        constructor(secureConnectionListener?: (socket: TLSSocket) => void);\\n        constructor(options: TlsOptions, secureConnectionListener?: (socket: TLSSocket) => void);\\n        /**\\n         * The `server.addContext()` method adds a secure context that will be used if\\n         * the client request's SNI name matches the supplied `hostname` (or wildcard).\\n         *\\n         * When there are multiple matching contexts, the most recently added one is\\n         * used.\\n         * @since v0.5.3\\n         * @param hostname A SNI host name or wildcard (e.g. `'*'`)\\n         * @param context An object containing any of the possible properties from the {@link createSecureContext} `options` arguments (e.g. `key`, `cert`, `ca`, etc).\\n         */\\n        addContext(hostname: string, context: SecureContextOptions): void;\\n        /**\\n         * Returns the session ticket keys.\\n         *\\n         * See `Session Resumption` for more information.\\n         * @since v3.0.0\\n         * @return A 48-byte buffer containing the session ticket keys.\\n         */\\n        getTicketKeys(): Buffer;\\n        /**\\n         * The `server.setSecureContext()` method replaces the secure context of an\\n         * existing server. Existing connections to the server are not interrupted.\\n         * @since v11.0.0\\n         * @param options An object containing any of the possible properties from the {@link createSecureContext} `options` arguments (e.g. `key`, `cert`, `ca`, etc).\\n         */\\n        setSecureContext(options: SecureContextOptions): void;\\n        /**\\n         * Sets the session ticket keys.\\n         *\\n         * Changes to the ticket keys are effective only for future server connections.\\n         * Existing or currently pending server connections will use the previous keys.\\n         *\\n         * See `Session Resumption` for more information.\\n         * @since v3.0.0\\n         * @param keys A 48-byte buffer containing the session ticket keys.\\n         */\\n        setTicketKeys(keys: Buffer): void;\\n        /**\\n         * events.EventEmitter\\n         * 1. tlsClientError\\n         * 2. newSession\\n         * 3. OCSPRequest\\n         * 4. resumeSession\\n         * 5. secureConnection\\n         * 6. keylog\\n         */\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        addListener(event: 'tlsClientError', listener: (err: Error, tlsSocket: TLSSocket) => void): this;\\n        addListener(event: 'newSession', listener: (sessionId: Buffer, sessionData: Buffer, callback: () => void) => void): this;\\n        addListener(event: 'OCSPRequest', listener: (certificate: Buffer, issuer: Buffer, callback: (err: Error | null, resp: Buffer) => void) => void): this;\\n        addListener(event: 'resumeSession', listener: (sessionId: Buffer, callback: (err: Error | null, sessionData: Buffer | null) => void) => void): this;\\n        addListener(event: 'secureConnection', listener: (tlsSocket: TLSSocket) => void): this;\\n        addListener(event: 'keylog', listener: (line: Buffer, tlsSocket: TLSSocket) => void): this;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        emit(event: 'tlsClientError', err: Error, tlsSocket: TLSSocket): boolean;\\n        emit(event: 'newSession', sessionId: Buffer, sessionData: Buffer, callback: () => void): boolean;\\n        emit(event: 'OCSPRequest', certificate: Buffer, issuer: Buffer, callback: (err: Error | null, resp: Buffer) => void): boolean;\\n        emit(event: 'resumeSession', sessionId: Buffer, callback: (err: Error | null, sessionData: Buffer | null) => void): boolean;\\n        emit(event: 'secureConnection', tlsSocket: TLSSocket): boolean;\\n        emit(event: 'keylog', line: Buffer, tlsSocket: TLSSocket): boolean;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        on(event: 'tlsClientError', listener: (err: Error, tlsSocket: TLSSocket) => void): this;\\n        on(event: 'newSession', listener: (sessionId: Buffer, sessionData: Buffer, callback: () => void) => void): this;\\n        on(event: 'OCSPRequest', listener: (certificate: Buffer, issuer: Buffer, callback: (err: Error | null, resp: Buffer) => void) => void): this;\\n        on(event: 'resumeSession', listener: (sessionId: Buffer, callback: (err: Error | null, sessionData: Buffer | null) => void) => void): this;\\n        on(event: 'secureConnection', listener: (tlsSocket: TLSSocket) => void): this;\\n        on(event: 'keylog', listener: (line: Buffer, tlsSocket: TLSSocket) => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        once(event: 'tlsClientError', listener: (err: Error, tlsSocket: TLSSocket) => void): this;\\n        once(event: 'newSession', listener: (sessionId: Buffer, sessionData: Buffer, callback: () => void) => void): this;\\n        once(event: 'OCSPRequest', listener: (certificate: Buffer, issuer: Buffer, callback: (err: Error | null, resp: Buffer) => void) => void): this;\\n        once(event: 'resumeSession', listener: (sessionId: Buffer, callback: (err: Error | null, sessionData: Buffer | null) => void) => void): this;\\n        once(event: 'secureConnection', listener: (tlsSocket: TLSSocket) => void): this;\\n        once(event: 'keylog', listener: (line: Buffer, tlsSocket: TLSSocket) => void): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'tlsClientError', listener: (err: Error, tlsSocket: TLSSocket) => void): this;\\n        prependListener(event: 'newSession', listener: (sessionId: Buffer, sessionData: Buffer, callback: () => void) => void): this;\\n        prependListener(event: 'OCSPRequest', listener: (certificate: Buffer, issuer: Buffer, callback: (err: Error | null, resp: Buffer) => void) => void): this;\\n        prependListener(event: 'resumeSession', listener: (sessionId: Buffer, callback: (err: Error | null, sessionData: Buffer | null) => void) => void): this;\\n        prependListener(event: 'secureConnection', listener: (tlsSocket: TLSSocket) => void): this;\\n        prependListener(event: 'keylog', listener: (line: Buffer, tlsSocket: TLSSocket) => void): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'tlsClientError', listener: (err: Error, tlsSocket: TLSSocket) => void): this;\\n        prependOnceListener(event: 'newSession', listener: (sessionId: Buffer, sessionData: Buffer, callback: () => void) => void): this;\\n        prependOnceListener(event: 'OCSPRequest', listener: (certificate: Buffer, issuer: Buffer, callback: (err: Error | null, resp: Buffer) => void) => void): this;\\n        prependOnceListener(event: 'resumeSession', listener: (sessionId: Buffer, callback: (err: Error | null, sessionData: Buffer | null) => void) => void): this;\\n        prependOnceListener(event: 'secureConnection', listener: (tlsSocket: TLSSocket) => void): this;\\n        prependOnceListener(event: 'keylog', listener: (line: Buffer, tlsSocket: TLSSocket) => void): this;\\n    }\\n    /**\\n     * @deprecated since v0.11.3 Use `tls.TLSSocket` instead.\\n     */\\n    interface SecurePair {\\n        encrypted: TLSSocket;\\n        cleartext: TLSSocket;\\n    }\\n    type SecureVersion = 'TLSv1.3' | 'TLSv1.2' | 'TLSv1.1' | 'TLSv1';\\n    interface SecureContextOptions {\\n        /**\\n         * Optionally override the trusted CA certificates. Default is to trust\\n         * the well-known CAs curated by Mozilla. Mozilla's CAs are completely\\n         * replaced when CAs are explicitly specified using this option.\\n         */\\n        ca?: string | Buffer | Array<string | Buffer> | undefined;\\n        /**\\n         *  Cert chains in PEM format. One cert chain should be provided per\\n         *  private key. Each cert chain should consist of the PEM formatted\\n         *  certificate for a provided private key, followed by the PEM\\n         *  formatted intermediate certificates (if any), in order, and not\\n         *  including the root CA (the root CA must be pre-known to the peer,\\n         *  see ca). When providing multiple cert chains, they do not have to\\n         *  be in the same order as their private keys in key. If the\\n         *  intermediate certificates are not provided, the peer will not be\\n         *  able to validate the certificate, and the handshake will fail.\\n         */\\n        cert?: string | Buffer | Array<string | Buffer> | undefined;\\n        /**\\n         *  Colon-separated list of supported signature algorithms. The list\\n         *  can contain digest algorithms (SHA256, MD5 etc.), public key\\n         *  algorithms (RSA-PSS, ECDSA etc.), combination of both (e.g\\n         *  'RSA+SHA384') or TLS v1.3 scheme names (e.g. rsa_pss_pss_sha512).\\n         */\\n        sigalgs?: string | undefined;\\n        /**\\n         * Cipher suite specification, replacing the default. For more\\n         * information, see modifying the default cipher suite. Permitted\\n         * ciphers can be obtained via tls.getCiphers(). Cipher names must be\\n         * uppercased in order for OpenSSL to accept them.\\n         */\\n        ciphers?: string | undefined;\\n        /**\\n         * Name of an OpenSSL engine which can provide the client certificate.\\n         */\\n        clientCertEngine?: string | undefined;\\n        /**\\n         * PEM formatted CRLs (Certificate Revocation Lists).\\n         */\\n        crl?: string | Buffer | Array<string | Buffer> | undefined;\\n        /**\\n         * `'auto'` or custom Diffie-Hellman parameters, required for non-ECDHE perfect forward secrecy.\\n         * If omitted or invalid, the parameters are silently discarded and DHE ciphers will not be available.\\n         * ECDHE-based perfect forward secrecy will still be available.\\n         */\\n        dhparam?: string | Buffer | undefined;\\n        /**\\n         * A string describing a named curve or a colon separated list of curve\\n         * NIDs or names, for example P-521:P-384:P-256, to use for ECDH key\\n         * agreement. Set to auto to select the curve automatically. Use\\n         * crypto.getCurves() to obtain a list of available curve names. On\\n         * recent releases, openssl ecparam -list_curves will also display the\\n         * name and description of each available elliptic curve. Default:\\n         * tls.DEFAULT_ECDH_CURVE.\\n         */\\n        ecdhCurve?: string | undefined;\\n        /**\\n         * Attempt to use the server's cipher suite preferences instead of the\\n         * client's. When true, causes SSL_OP_CIPHER_SERVER_PREFERENCE to be\\n         * set in secureOptions\\n         */\\n        honorCipherOrder?: boolean | undefined;\\n        /**\\n         * Private keys in PEM format. PEM allows the option of private keys\\n         * being encrypted. Encrypted keys will be decrypted with\\n         * options.passphrase. Multiple keys using different algorithms can be\\n         * provided either as an array of unencrypted key strings or buffers,\\n         * or an array of objects in the form {pem: <string|buffer>[,\\n         * passphrase: <string>]}. The object form can only occur in an array.\\n         * object.passphrase is optional. Encrypted keys will be decrypted with\\n         * object.passphrase if provided, or options.passphrase if it is not.\\n         */\\n        key?: string | Buffer | Array<string | Buffer | KeyObject> | undefined;\\n        /**\\n         * Name of an OpenSSL engine to get private key from. Should be used\\n         * together with privateKeyIdentifier.\\n         */\\n        privateKeyEngine?: string | undefined;\\n        /**\\n         * Identifier of a private key managed by an OpenSSL engine. Should be\\n         * used together with privateKeyEngine. Should not be set together with\\n         * key, because both options define a private key in different ways.\\n         */\\n        privateKeyIdentifier?: string | undefined;\\n        /**\\n         * Optionally set the maximum TLS version to allow. One\\n         * of `'TLSv1.3'`, `'TLSv1.2'`, `'TLSv1.1'`, or `'TLSv1'`. Cannot be specified along with the\\n         * `secureProtocol` option, use one or the other.\\n         * **Default:** `'TLSv1.3'`, unless changed using CLI options. Using\\n         * `--tls-max-v1.2` sets the default to `'TLSv1.2'`. Using `--tls-max-v1.3` sets the default to\\n         * `'TLSv1.3'`. If multiple of the options are provided, the highest maximum is used.\\n         */\\n        maxVersion?: SecureVersion | undefined;\\n        /**\\n         * Optionally set the minimum TLS version to allow. One\\n         * of `'TLSv1.3'`, `'TLSv1.2'`, `'TLSv1.1'`, or `'TLSv1'`. Cannot be specified along with the\\n         * `secureProtocol` option, use one or the other.  It is not recommended to use\\n         * less than TLSv1.2, but it may be required for interoperability.\\n         * **Default:** `'TLSv1.2'`, unless changed using CLI options. Using\\n         * `--tls-v1.0` sets the default to `'TLSv1'`. Using `--tls-v1.1` sets the default to\\n         * `'TLSv1.1'`. Using `--tls-min-v1.3` sets the default to\\n         * 'TLSv1.3'. If multiple of the options are provided, the lowest minimum is used.\\n         */\\n        minVersion?: SecureVersion | undefined;\\n        /**\\n         * Shared passphrase used for a single private key and/or a PFX.\\n         */\\n        passphrase?: string | undefined;\\n        /**\\n         * PFX or PKCS12 encoded private key and certificate chain. pfx is an\\n         * alternative to providing key and cert individually. PFX is usually\\n         * encrypted, if it is, passphrase will be used to decrypt it. Multiple\\n         * PFX can be provided either as an array of unencrypted PFX buffers,\\n         * or an array of objects in the form {buf: <string|buffer>[,\\n         * passphrase: <string>]}. The object form can only occur in an array.\\n         * object.passphrase is optional. Encrypted PFX will be decrypted with\\n         * object.passphrase if provided, or options.passphrase if it is not.\\n         */\\n        pfx?: string | Buffer | Array<string | Buffer | PxfObject> | undefined;\\n        /**\\n         * Optionally affect the OpenSSL protocol behavior, which is not\\n         * usually necessary. This should be used carefully if at all! Value is\\n         * a numeric bitmask of the SSL_OP_* options from OpenSSL Options\\n         */\\n        secureOptions?: number | undefined; // Value is a numeric bitmask of the `SSL_OP_*` options\\n        /**\\n         * Legacy mechanism to select the TLS protocol version to use, it does\\n         * not support independent control of the minimum and maximum version,\\n         * and does not support limiting the protocol to TLSv1.3. Use\\n         * minVersion and maxVersion instead. The possible values are listed as\\n         * SSL_METHODS, use the function names as strings. For example, use\\n         * 'TLSv1_1_method' to force TLS version 1.1, or 'TLS_method' to allow\\n         * any TLS protocol version up to TLSv1.3. It is not recommended to use\\n         * TLS versions less than 1.2, but it may be required for\\n         * interoperability. Default: none, see minVersion.\\n         */\\n        secureProtocol?: string | undefined;\\n        /**\\n         * Opaque identifier used by servers to ensure session state is not\\n         * shared between applications. Unused by clients.\\n         */\\n        sessionIdContext?: string | undefined;\\n        /**\\n         * 48-bytes of cryptographically strong pseudo-random data.\\n         * See Session Resumption for more information.\\n         */\\n        ticketKeys?: Buffer | undefined;\\n        /**\\n         * The number of seconds after which a TLS session created by the\\n         * server will no longer be resumable. See Session Resumption for more\\n         * information. Default: 300.\\n         */\\n        sessionTimeout?: number | undefined;\\n    }\\n    interface SecureContext {\\n        context: any;\\n    }\\n    /**\\n     * Verifies the certificate `cert` is issued to `hostname`.\\n     *\\n     * Returns [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object, populating it with `reason`, `host`, and `cert` on\\n     * failure. On success, returns [undefined](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type).\\n     *\\n     * This function is intended to be used in combination with the`checkServerIdentity` option that can be passed to {@link connect} and as\\n     * such operates on a `certificate object`. For other purposes, consider using `x509.checkHost()` instead.\\n     *\\n     * This function can be overwritten by providing an alternative function as the`options.checkServerIdentity` option that is passed to `tls.connect()`. The\\n     * overwriting function can call `tls.checkServerIdentity()` of course, to augment\\n     * the checks done with additional verification.\\n     *\\n     * This function is only called if the certificate passed all other checks, such as\\n     * being issued by trusted CA (`options.ca`).\\n     *\\n     * Earlier versions of Node.js incorrectly accepted certificates for a given`hostname` if a matching `uniformResourceIdentifier` subject alternative name\\n     * was present (see [CVE-2021-44531](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44531)). Applications that wish to accept`uniformResourceIdentifier` subject alternative names can use\\n     * a custom`options.checkServerIdentity` function that implements the desired behavior.\\n     * @since v0.8.4\\n     * @param hostname The host name or IP address to verify the certificate against.\\n     * @param cert A `certificate object` representing the peer's certificate.\\n     */\\n    function checkServerIdentity(hostname: string, cert: PeerCertificate): Error | undefined;\\n    /**\\n     * Creates a new {@link Server}. The `secureConnectionListener`, if provided, is\\n     * automatically set as a listener for the `'secureConnection'` event.\\n     *\\n     * The `ticketKeys` options is automatically shared between `cluster` module\\n     * workers.\\n     *\\n     * The following illustrates a simple echo server:\\n     *\\n     * ```js\\n     * const tls = require('tls');\\n     * const fs = require('fs');\\n     *\\n     * const options = {\\n     *   key: fs.readFileSync('server-key.pem'),\\n     *   cert: fs.readFileSync('server-cert.pem'),\\n     *\\n     *   // This is necessary only if using client certificate authentication.\\n     *   requestCert: true,\\n     *\\n     *   // This is necessary only if the client uses a self-signed certificate.\\n     *   ca: [ fs.readFileSync('client-cert.pem') ]\\n     * };\\n     *\\n     * const server = tls.createServer(options, (socket) => {\\n     *   console.log('server connected',\\n     *               socket.authorized ? 'authorized' : 'unauthorized');\\n     *   socket.write('welcome!\\\\n');\\n     *   socket.setEncoding('utf8');\\n     *   socket.pipe(socket);\\n     * });\\n     * server.listen(8000, () => {\\n     *   console.log('server bound');\\n     * });\\n     * ```\\n     *\\n     * The server can be tested by connecting to it using the example client from {@link connect}.\\n     * @since v0.3.2\\n     */\\n    function createServer(secureConnectionListener?: (socket: TLSSocket) => void): Server;\\n    function createServer(options: TlsOptions, secureConnectionListener?: (socket: TLSSocket) => void): Server;\\n    /**\\n     * The `callback` function, if specified, will be added as a listener for the `'secureConnect'` event.\\n     *\\n     * `tls.connect()` returns a {@link TLSSocket} object.\\n     *\\n     * Unlike the `https` API, `tls.connect()` does not enable the\\n     * SNI (Server Name Indication) extension by default, which may cause some\\n     * servers to return an incorrect certificate or reject the connection\\n     * altogether. To enable SNI, set the `servername` option in addition\\n     * to `host`.\\n     *\\n     * The following illustrates a client for the echo server example from {@link createServer}:\\n     *\\n     * ```js\\n     * // Assumes an echo server that is listening on port 8000.\\n     * const tls = require('tls');\\n     * const fs = require('fs');\\n     *\\n     * const options = {\\n     *   // Necessary only if the server requires client certificate authentication.\\n     *   key: fs.readFileSync('client-key.pem'),\\n     *   cert: fs.readFileSync('client-cert.pem'),\\n     *\\n     *   // Necessary only if the server uses a self-signed certificate.\\n     *   ca: [ fs.readFileSync('server-cert.pem') ],\\n     *\\n     *   // Necessary only if the server's cert isn't for \\\"localhost\\\".\\n     *   checkServerIdentity: () => { return null; },\\n     * };\\n     *\\n     * const socket = tls.connect(8000, options, () => {\\n     *   console.log('client connected',\\n     *               socket.authorized ? 'authorized' : 'unauthorized');\\n     *   process.stdin.pipe(socket);\\n     *   process.stdin.resume();\\n     * });\\n     * socket.setEncoding('utf8');\\n     * socket.on('data', (data) => {\\n     *   console.log(data);\\n     * });\\n     * socket.on('end', () => {\\n     *   console.log('server ends connection');\\n     * });\\n     * ```\\n     * @since v0.11.3\\n     */\\n    function connect(options: ConnectionOptions, secureConnectListener?: () => void): TLSSocket;\\n    function connect(port: number, host?: string, options?: ConnectionOptions, secureConnectListener?: () => void): TLSSocket;\\n    function connect(port: number, options?: ConnectionOptions, secureConnectListener?: () => void): TLSSocket;\\n    /**\\n     * Creates a new secure pair object with two streams, one of which reads and writes\\n     * the encrypted data and the other of which reads and writes the cleartext data.\\n     * Generally, the encrypted stream is piped to/from an incoming encrypted data\\n     * stream and the cleartext one is used as a replacement for the initial encrypted\\n     * stream.\\n     *\\n     * `tls.createSecurePair()` returns a `tls.SecurePair` object with `cleartext` and`encrypted` stream properties.\\n     *\\n     * Using `cleartext` has the same API as {@link TLSSocket}.\\n     *\\n     * The `tls.createSecurePair()` method is now deprecated in favor of`tls.TLSSocket()`. For example, the code:\\n     *\\n     * ```js\\n     * pair = tls.createSecurePair(// ... );\\n     * pair.encrypted.pipe(socket);\\n     * socket.pipe(pair.encrypted);\\n     * ```\\n     *\\n     * can be replaced by:\\n     *\\n     * ```js\\n     * secureSocket = tls.TLSSocket(socket, options);\\n     * ```\\n     *\\n     * where `secureSocket` has the same API as `pair.cleartext`.\\n     * @since v0.3.2\\n     * @deprecated Since v0.11.3 - Use {@link TLSSocket} instead.\\n     * @param context A secure context object as returned by `tls.createSecureContext()`\\n     * @param isServer `true` to specify that this TLS connection should be opened as a server.\\n     * @param requestCert `true` to specify whether a server should request a certificate from a connecting client. Only applies when `isServer` is `true`.\\n     * @param rejectUnauthorized If not `false` a server automatically reject clients with invalid certificates. Only applies when `isServer` is `true`.\\n     */\\n    function createSecurePair(context?: SecureContext, isServer?: boolean, requestCert?: boolean, rejectUnauthorized?: boolean): SecurePair;\\n    /**\\n     * {@link createServer} sets the default value of the `honorCipherOrder` option\\n     * to `true`, other APIs that create secure contexts leave it unset.\\n     *\\n     * {@link createServer} uses a 128 bit truncated SHA1 hash value generated\\n     * from `process.argv` as the default value of the `sessionIdContext` option, other\\n     * APIs that create secure contexts have no default value.\\n     *\\n     * The `tls.createSecureContext()` method creates a `SecureContext` object. It is\\n     * usable as an argument to several `tls` APIs, such as {@link createServer} and `server.addContext()`, but has no public methods.\\n     *\\n     * A key is _required_ for ciphers that use certificates. Either `key` or`pfx` can be used to provide it.\\n     *\\n     * If the `ca` option is not given, then Node.js will default to using [Mozilla's publicly trusted list of\\n     * CAs](https://hg.mozilla.org/mozilla-central/raw-file/tip/security/nss/lib/ckfw/builtins/certdata.txt).\\n     * @since v0.11.13\\n     */\\n    function createSecureContext(options?: SecureContextOptions): SecureContext;\\n    /**\\n     * Returns an array with the names of the supported TLS ciphers. The names are\\n     * lower-case for historical reasons, but must be uppercased to be used in\\n     * the `ciphers` option of {@link createSecureContext}.\\n     *\\n     * Not all supported ciphers are enabled by default. See `Modifying the default TLS cipher suite`.\\n     *\\n     * Cipher names that start with `'tls_'` are for TLSv1.3, all the others are for\\n     * TLSv1.2 and below.\\n     *\\n     * ```js\\n     * console.log(tls.getCiphers()); // ['aes128-gcm-sha256', 'aes128-sha', ...]\\n     * ```\\n     * @since v0.10.2\\n     */\\n    function getCiphers(): string[];\\n    /**\\n     * The default curve name to use for ECDH key agreement in a tls server.\\n     * The default value is 'auto'. See tls.createSecureContext() for further\\n     * information.\\n     */\\n    let DEFAULT_ECDH_CURVE: string;\\n    /**\\n     * The default value of the maxVersion option of\\n     * tls.createSecureContext(). It can be assigned any of the supported TLS\\n     * protocol versions, 'TLSv1.3', 'TLSv1.2', 'TLSv1.1', or 'TLSv1'. Default:\\n     * 'TLSv1.3', unless changed using CLI options. Using --tls-max-v1.2 sets\\n     * the default to 'TLSv1.2'. Using --tls-max-v1.3 sets the default to\\n     * 'TLSv1.3'. If multiple of the options are provided, the highest maximum\\n     * is used.\\n     */\\n    let DEFAULT_MAX_VERSION: SecureVersion;\\n    /**\\n     * The default value of the minVersion option of tls.createSecureContext().\\n     * It can be assigned any of the supported TLS protocol versions,\\n     * 'TLSv1.3', 'TLSv1.2', 'TLSv1.1', or 'TLSv1'. Default: 'TLSv1.2', unless\\n     * changed using CLI options. Using --tls-min-v1.0 sets the default to\\n     * 'TLSv1'. Using --tls-min-v1.1 sets the default to 'TLSv1.1'. Using\\n     * --tls-min-v1.3 sets the default to 'TLSv1.3'. If multiple of the options\\n     * are provided, the lowest minimum is used.\\n     */\\n    let DEFAULT_MIN_VERSION: SecureVersion;\\n    /**\\n     * The default value of the ciphers option of tls.createSecureContext().\\n     * It can be assigned any of the supported OpenSSL ciphers.\\n     * Defaults to the content of crypto.constants.defaultCoreCipherList, unless\\n     * changed using CLI options using --tls-default-ciphers.\\n     */\\n    let DEFAULT_CIPHERS: string;\\n    /**\\n     * An immutable array of strings representing the root certificates (in PEM\\n     * format) used for verifying peer certificates. This is the default value\\n     * of the ca option to tls.createSecureContext().\\n     */\\n    const rootCertificates: ReadonlyArray<string>;\\n}\\ndeclare module 'node:tls' {\\n    export * from 'tls';\\n}\\n\",\"file:///node_modules/@types/node/trace_events.d.ts\":\"/**\\n * The `trace_events` module provides a mechanism to centralize tracing information\\n * generated by V8, Node.js core, and userspace code.\\n *\\n * Tracing can be enabled with the `--trace-event-categories` command-line flag\\n * or by using the `trace_events` module. The `--trace-event-categories` flag\\n * accepts a list of comma-separated category names.\\n *\\n * The available categories are:\\n *\\n * * `node`: An empty placeholder.\\n * * `node.async_hooks`: Enables capture of detailed `async_hooks` trace data.\\n * The `async_hooks` events have a unique `asyncId` and a special `triggerId` `triggerAsyncId` property.\\n * * `node.bootstrap`: Enables capture of Node.js bootstrap milestones.\\n * * `node.console`: Enables capture of `console.time()` and `console.count()`output.\\n * * `node.dns.native`: Enables capture of trace data for DNS queries.\\n * * `node.environment`: Enables capture of Node.js Environment milestones.\\n * * `node.fs.sync`: Enables capture of trace data for file system sync methods.\\n * * `node.perf`: Enables capture of `Performance API` measurements.\\n *    * `node.perf.usertiming`: Enables capture of only Performance API User Timing\\n *    measures and marks.\\n *    * `node.perf.timerify`: Enables capture of only Performance API timerify\\n *    measurements.\\n * * `node.promises.rejections`: Enables capture of trace data tracking the number\\n * of unhandled Promise rejections and handled-after-rejections.\\n * * `node.vm.script`: Enables capture of trace data for the `vm` module's`runInNewContext()`, `runInContext()`, and `runInThisContext()` methods.\\n * * `v8`: The `V8` events are GC, compiling, and execution related.\\n *\\n * By default the `node`, `node.async_hooks`, and `v8` categories are enabled.\\n *\\n * ```bash\\n * node --trace-event-categories v8,node,node.async_hooks server.js\\n * ```\\n *\\n * Prior versions of Node.js required the use of the `--trace-events-enabled`flag to enable trace events. This requirement has been removed. However, the`--trace-events-enabled` flag _may_ still be\\n * used and will enable the`node`, `node.async_hooks`, and `v8` trace event categories by default.\\n *\\n * ```bash\\n * node --trace-events-enabled\\n *\\n * # is equivalent to\\n *\\n * node --trace-event-categories v8,node,node.async_hooks\\n * ```\\n *\\n * Alternatively, trace events may be enabled using the `trace_events` module:\\n *\\n * ```js\\n * const trace_events = require('trace_events');\\n * const tracing = trace_events.createTracing({ categories: ['node.perf'] });\\n * tracing.enable();  // Enable trace event capture for the 'node.perf' category\\n *\\n * // do work\\n *\\n * tracing.disable();  // Disable trace event capture for the 'node.perf' category\\n * ```\\n *\\n * Running Node.js with tracing enabled will produce log files that can be opened\\n * in the [`chrome://tracing`](https://www.chromium.org/developers/how-tos/trace-event-profiling-tool) tab of Chrome.\\n *\\n * The logging file is by default called `node_trace.${rotation}.log`, where`${rotation}` is an incrementing log-rotation id. The filepath pattern can\\n * be specified with `--trace-event-file-pattern` that accepts a template\\n * string that supports `${rotation}` and `${pid}`:\\n *\\n * ```bash\\n * node --trace-event-categories v8 --trace-event-file-pattern '${pid}-${rotation}.log' server.js\\n * ```\\n *\\n * To guarantee that the log file is properly generated after signal events like`SIGINT`, `SIGTERM`, or `SIGBREAK`, make sure to have the appropriate handlers\\n * in your code, such as:\\n *\\n * ```js\\n * process.on('SIGINT', function onSigint() {\\n *   console.info('Received SIGINT.');\\n *   process.exit(130);  // Or applicable exit code depending on OS and signal\\n * });\\n * ```\\n *\\n * The tracing system uses the same time source\\n * as the one used by `process.hrtime()`.\\n * However the trace-event timestamps are expressed in microseconds,\\n * unlike `process.hrtime()` which returns nanoseconds.\\n *\\n * The features from this module are not available in `Worker` threads.\\n * @experimental\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/trace_events.js)\\n */\\ndeclare module 'trace_events' {\\n    /**\\n     * The `Tracing` object is used to enable or disable tracing for sets of\\n     * categories. Instances are created using the\\n     * `trace_events.createTracing()` method.\\n     *\\n     * When created, the `Tracing` object is disabled. Calling the\\n     * `tracing.enable()` method adds the categories to the set of enabled trace\\n     * event categories. Calling `tracing.disable()` will remove the categories\\n     * from the set of enabled trace event categories.\\n     */\\n    interface Tracing {\\n        /**\\n         * A comma-separated list of the trace event categories covered by this\\n         * `Tracing` object.\\n         */\\n        readonly categories: string;\\n        /**\\n         * Disables this `Tracing` object.\\n         *\\n         * Only trace event categories _not_ covered by other enabled `Tracing`\\n         * objects and _not_ specified by the `--trace-event-categories` flag\\n         * will be disabled.\\n         */\\n        disable(): void;\\n        /**\\n         * Enables this `Tracing` object for the set of categories covered by\\n         * the `Tracing` object.\\n         */\\n        enable(): void;\\n        /**\\n         * `true` only if the `Tracing` object has been enabled.\\n         */\\n        readonly enabled: boolean;\\n    }\\n    interface CreateTracingOptions {\\n        /**\\n         * An array of trace category names. Values included in the array are\\n         * coerced to a string when possible. An error will be thrown if the\\n         * value cannot be coerced.\\n         */\\n        categories: string[];\\n    }\\n    /**\\n     * Creates and returns a `Tracing` object for the given set of `categories`.\\n     *\\n     * ```js\\n     * const trace_events = require('trace_events');\\n     * const categories = ['node.perf', 'node.async_hooks'];\\n     * const tracing = trace_events.createTracing({ categories });\\n     * tracing.enable();\\n     * // do stuff\\n     * tracing.disable();\\n     * ```\\n     * @since v10.0.0\\n     * @return .\\n     */\\n    function createTracing(options: CreateTracingOptions): Tracing;\\n    /**\\n     * Returns a comma-separated list of all currently-enabled trace event\\n     * categories. The current set of enabled trace event categories is determined\\n     * by the _union_ of all currently-enabled `Tracing` objects and any categories\\n     * enabled using the `--trace-event-categories` flag.\\n     *\\n     * Given the file `test.js` below, the command`node --trace-event-categories node.perf test.js` will print`'node.async_hooks,node.perf'` to the console.\\n     *\\n     * ```js\\n     * const trace_events = require('trace_events');\\n     * const t1 = trace_events.createTracing({ categories: ['node.async_hooks'] });\\n     * const t2 = trace_events.createTracing({ categories: ['node.perf'] });\\n     * const t3 = trace_events.createTracing({ categories: ['v8'] });\\n     *\\n     * t1.enable();\\n     * t2.enable();\\n     *\\n     * console.log(trace_events.getEnabledCategories());\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function getEnabledCategories(): string | undefined;\\n}\\ndeclare module 'node:trace_events' {\\n    export * from 'trace_events';\\n}\\n\",\"file:///node_modules/@types/node/tty.d.ts\":\"/**\\n * The `tty` module provides the `tty.ReadStream` and `tty.WriteStream` classes.\\n * In most cases, it will not be necessary or possible to use this module directly.\\n * However, it can be accessed using:\\n *\\n * ```js\\n * const tty = require('tty');\\n * ```\\n *\\n * When Node.js detects that it is being run with a text terminal (\\\"TTY\\\")\\n * attached, `process.stdin` will, by default, be initialized as an instance of`tty.ReadStream` and both `process.stdout` and `process.stderr` will, by\\n * default, be instances of `tty.WriteStream`. The preferred method of determining\\n * whether Node.js is being run within a TTY context is to check that the value of\\n * the `process.stdout.isTTY` property is `true`:\\n *\\n * ```console\\n * $ node -p -e \\\"Boolean(process.stdout.isTTY)\\\"\\n * true\\n * $ node -p -e \\\"Boolean(process.stdout.isTTY)\\\" | cat\\n * false\\n * ```\\n *\\n * In most cases, there should be little to no reason for an application to\\n * manually create instances of the `tty.ReadStream` and `tty.WriteStream`classes.\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/tty.js)\\n */\\ndeclare module 'tty' {\\n    import * as net from 'node:net';\\n    /**\\n     * The `tty.isatty()` method returns `true` if the given `fd` is associated with\\n     * a TTY and `false` if it is not, including whenever `fd` is not a non-negative\\n     * integer.\\n     * @since v0.5.8\\n     * @param fd A numeric file descriptor\\n     */\\n    function isatty(fd: number): boolean;\\n    /**\\n     * Represents the readable side of a TTY. In normal circumstances `process.stdin` will be the only `tty.ReadStream` instance in a Node.js\\n     * process and there should be no reason to create additional instances.\\n     * @since v0.5.8\\n     */\\n    class ReadStream extends net.Socket {\\n        constructor(fd: number, options?: net.SocketConstructorOpts);\\n        /**\\n         * A `boolean` that is `true` if the TTY is currently configured to operate as a\\n         * raw device. Defaults to `false`.\\n         * @since v0.7.7\\n         */\\n        isRaw: boolean;\\n        /**\\n         * Allows configuration of `tty.ReadStream` so that it operates as a raw device.\\n         *\\n         * When in raw mode, input is always available character-by-character, not\\n         * including modifiers. Additionally, all special processing of characters by the\\n         * terminal is disabled, including echoing input\\n         * characters. Ctrl+C will no longer cause a `SIGINT` when\\n         * in this mode.\\n         * @since v0.7.7\\n         * @param mode If `true`, configures the `tty.ReadStream` to operate as a raw device. If `false`, configures the `tty.ReadStream` to operate in its default mode. The `readStream.isRaw`\\n         * property will be set to the resulting mode.\\n         * @return The read stream instance.\\n         */\\n        setRawMode(mode: boolean): this;\\n        /**\\n         * A `boolean` that is always `true` for `tty.ReadStream` instances.\\n         * @since v0.5.8\\n         */\\n        isTTY: boolean;\\n    }\\n    /**\\n     * -1 - to the left from cursor\\n     *  0 - the entire line\\n     *  1 - to the right from cursor\\n     */\\n    type Direction = -1 | 0 | 1;\\n    /**\\n     * Represents the writable side of a TTY. In normal circumstances,`process.stdout` and `process.stderr` will be the only`tty.WriteStream` instances created for a Node.js process and there\\n     * should be no reason to create additional instances.\\n     * @since v0.5.8\\n     */\\n    class WriteStream extends net.Socket {\\n        constructor(fd: number);\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        addListener(event: 'resize', listener: () => void): this;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        emit(event: 'resize'): boolean;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        on(event: 'resize', listener: () => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        once(event: 'resize', listener: () => void): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'resize', listener: () => void): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'resize', listener: () => void): this;\\n        /**\\n         * `writeStream.clearLine()` clears the current line of this `WriteStream` in a\\n         * direction identified by `dir`.\\n         * @since v0.7.7\\n         * @param callback Invoked once the operation completes.\\n         * @return `false` if the stream wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`.\\n         */\\n        clearLine(dir: Direction, callback?: () => void): boolean;\\n        /**\\n         * `writeStream.clearScreenDown()` clears this `WriteStream` from the current\\n         * cursor down.\\n         * @since v0.7.7\\n         * @param callback Invoked once the operation completes.\\n         * @return `false` if the stream wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`.\\n         */\\n        clearScreenDown(callback?: () => void): boolean;\\n        /**\\n         * `writeStream.cursorTo()` moves this `WriteStream`'s cursor to the specified\\n         * position.\\n         * @since v0.7.7\\n         * @param callback Invoked once the operation completes.\\n         * @return `false` if the stream wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`.\\n         */\\n        cursorTo(x: number, y?: number, callback?: () => void): boolean;\\n        cursorTo(x: number, callback: () => void): boolean;\\n        /**\\n         * `writeStream.moveCursor()` moves this `WriteStream`'s cursor _relative_ to its\\n         * current position.\\n         * @since v0.7.7\\n         * @param callback Invoked once the operation completes.\\n         * @return `false` if the stream wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`.\\n         */\\n        moveCursor(dx: number, dy: number, callback?: () => void): boolean;\\n        /**\\n         * Returns:\\n         *\\n         * * `1` for 2,\\n         * * `4` for 16,\\n         * * `8` for 256,\\n         * * `24` for 16,777,216 colors supported.\\n         *\\n         * Use this to determine what colors the terminal supports. Due to the nature of\\n         * colors in terminals it is possible to either have false positives or false\\n         * negatives. It depends on process information and the environment variables that\\n         * may lie about what terminal is used.\\n         * It is possible to pass in an `env` object to simulate the usage of a specific\\n         * terminal. This can be useful to check how specific environment settings behave.\\n         *\\n         * To enforce a specific color support, use one of the below environment settings.\\n         *\\n         * * 2 colors: `FORCE_COLOR = 0` (Disables colors)\\n         * * 16 colors: `FORCE_COLOR = 1`\\n         * * 256 colors: `FORCE_COLOR = 2`\\n         * * 16,777,216 colors: `FORCE_COLOR = 3`\\n         *\\n         * Disabling color support is also possible by using the `NO_COLOR` and`NODE_DISABLE_COLORS` environment variables.\\n         * @since v9.9.0\\n         * @param [env=process.env] An object containing the environment variables to check. This enables simulating the usage of a specific terminal.\\n         */\\n        getColorDepth(env?: object): number;\\n        /**\\n         * Returns `true` if the `writeStream` supports at least as many colors as provided\\n         * in `count`. Minimum support is 2 (black and white).\\n         *\\n         * This has the same false positives and negatives as described in `writeStream.getColorDepth()`.\\n         *\\n         * ```js\\n         * process.stdout.hasColors();\\n         * // Returns true or false depending on if `stdout` supports at least 16 colors.\\n         * process.stdout.hasColors(256);\\n         * // Returns true or false depending on if `stdout` supports at least 256 colors.\\n         * process.stdout.hasColors({ TMUX: '1' });\\n         * // Returns true.\\n         * process.stdout.hasColors(2 ** 24, { TMUX: '1' });\\n         * // Returns false (the environment setting pretends to support 2 ** 8 colors).\\n         * ```\\n         * @since v11.13.0, v10.16.0\\n         * @param [count=16] The number of colors that are requested (minimum 2).\\n         * @param [env=process.env] An object containing the environment variables to check. This enables simulating the usage of a specific terminal.\\n         */\\n        hasColors(count?: number): boolean;\\n        hasColors(env?: object): boolean;\\n        hasColors(count: number, env?: object): boolean;\\n        /**\\n         * `writeStream.getWindowSize()` returns the size of the TTY\\n         * corresponding to this `WriteStream`. The array is of the type`[numColumns, numRows]` where `numColumns` and `numRows` represent the number\\n         * of columns and rows in the corresponding TTY.\\n         * @since v0.7.7\\n         */\\n        getWindowSize(): [number, number];\\n        /**\\n         * A `number` specifying the number of columns the TTY currently has. This property\\n         * is updated whenever the `'resize'` event is emitted.\\n         * @since v0.7.7\\n         */\\n        columns: number;\\n        /**\\n         * A `number` specifying the number of rows the TTY currently has. This property\\n         * is updated whenever the `'resize'` event is emitted.\\n         * @since v0.7.7\\n         */\\n        rows: number;\\n        /**\\n         * A `boolean` that is always `true`.\\n         * @since v0.5.8\\n         */\\n        isTTY: boolean;\\n    }\\n}\\ndeclare module 'node:tty' {\\n    export * from 'tty';\\n}\\n\",\"file:///node_modules/@types/node/url.d.ts\":\"/**\\n * The `url` module provides utilities for URL resolution and parsing. It can be\\n * accessed using:\\n *\\n * ```js\\n * import url from 'url';\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/url.js)\\n */\\ndeclare module 'url' {\\n    import { Blob as NodeBlob } from 'node:buffer';\\n    import { ClientRequestArgs } from 'node:http';\\n    import { ParsedUrlQuery, ParsedUrlQueryInput } from 'node:querystring';\\n    // Input to `url.format`\\n    interface UrlObject {\\n        auth?: string | null | undefined;\\n        hash?: string | null | undefined;\\n        host?: string | null | undefined;\\n        hostname?: string | null | undefined;\\n        href?: string | null | undefined;\\n        pathname?: string | null | undefined;\\n        protocol?: string | null | undefined;\\n        search?: string | null | undefined;\\n        slashes?: boolean | null | undefined;\\n        port?: string | number | null | undefined;\\n        query?: string | null | ParsedUrlQueryInput | undefined;\\n    }\\n    // Output of `url.parse`\\n    interface Url {\\n        auth: string | null;\\n        hash: string | null;\\n        host: string | null;\\n        hostname: string | null;\\n        href: string;\\n        path: string | null;\\n        pathname: string | null;\\n        protocol: string | null;\\n        search: string | null;\\n        slashes: boolean | null;\\n        port: string | null;\\n        query: string | null | ParsedUrlQuery;\\n    }\\n    interface UrlWithParsedQuery extends Url {\\n        query: ParsedUrlQuery;\\n    }\\n    interface UrlWithStringQuery extends Url {\\n        query: string | null;\\n    }\\n    /**\\n     * The `url.parse()` method takes a URL string, parses it, and returns a URL\\n     * object.\\n     *\\n     * A `TypeError` is thrown if `urlString` is not a string.\\n     *\\n     * A `URIError` is thrown if the `auth` property is present but cannot be decoded.\\n     *\\n     * Use of the legacy `url.parse()` method is discouraged. Users should\\n     * use the WHATWG `URL` API. Because the `url.parse()` method uses a\\n     * lenient, non-standard algorithm for parsing URL strings, security\\n     * issues can be introduced. Specifically, issues with [host name spoofing](https://hackerone.com/reports/678487) and\\n     * incorrect handling of usernames and passwords have been identified.\\n     *\\n     * Deprecation of this API has been shelved for now primarily due to the the\\n     * inability of the [WHATWG API to parse relative URLs](https://github.com/nodejs/node/issues/12682#issuecomment-1154492373).\\n     * [Discussions are ongoing](https://github.com/whatwg/url/issues/531) for the  best way to resolve this.\\n     *\\n     * @since v0.1.25\\n     * @param urlString The URL string to parse.\\n     * @param [parseQueryString=false] If `true`, the `query` property will always be set to an object returned by the {@link querystring} module's `parse()` method. If `false`, the `query` property\\n     * on the returned URL object will be an unparsed, undecoded string.\\n     * @param [slashesDenoteHost=false] If `true`, the first token after the literal string `//` and preceding the next `/` will be interpreted as the `host`. For instance, given `//foo/bar`, the\\n     * result would be `{host: 'foo', pathname: '/bar'}` rather than `{pathname: '//foo/bar'}`.\\n     */\\n    function parse(urlString: string): UrlWithStringQuery;\\n    function parse(urlString: string, parseQueryString: false | undefined, slashesDenoteHost?: boolean): UrlWithStringQuery;\\n    function parse(urlString: string, parseQueryString: true, slashesDenoteHost?: boolean): UrlWithParsedQuery;\\n    function parse(urlString: string, parseQueryString: boolean, slashesDenoteHost?: boolean): Url;\\n    /**\\n     * The `url.format()` method returns a formatted URL string derived from`urlObject`.\\n     *\\n     * ```js\\n     * const url = require('url');\\n     * url.format({\\n     *   protocol: 'https',\\n     *   hostname: 'example.com',\\n     *   pathname: '/some/path',\\n     *   query: {\\n     *     page: 1,\\n     *     format: 'json'\\n     *   }\\n     * });\\n     *\\n     * // => 'https://example.com/some/path?page=1&#x26;format=json'\\n     * ```\\n     *\\n     * If `urlObject` is not an object or a string, `url.format()` will throw a `TypeError`.\\n     *\\n     * The formatting process operates as follows:\\n     *\\n     * * A new empty string `result` is created.\\n     * * If `urlObject.protocol` is a string, it is appended as-is to `result`.\\n     * * Otherwise, if `urlObject.protocol` is not `undefined` and is not a string, an `Error` is thrown.\\n     * * For all string values of `urlObject.protocol` that _do not end_ with an ASCII\\n     * colon (`:`) character, the literal string `:` will be appended to `result`.\\n     * * If either of the following conditions is true, then the literal string `//`will be appended to `result`:\\n     *    * `urlObject.slashes` property is true;\\n     *    * `urlObject.protocol` begins with `http`, `https`, `ftp`, `gopher`, or`file`;\\n     * * If the value of the `urlObject.auth` property is truthy, and either`urlObject.host` or `urlObject.hostname` are not `undefined`, the value of`urlObject.auth` will be coerced into a string\\n     * and appended to `result`followed by the literal string `@`.\\n     * * If the `urlObject.host` property is `undefined` then:\\n     *    * If the `urlObject.hostname` is a string, it is appended to `result`.\\n     *    * Otherwise, if `urlObject.hostname` is not `undefined` and is not a string,\\n     *    an `Error` is thrown.\\n     *    * If the `urlObject.port` property value is truthy, and `urlObject.hostname`is not `undefined`:\\n     *          * The literal string `:` is appended to `result`, and\\n     *          * The value of `urlObject.port` is coerced to a string and appended to`result`.\\n     * * Otherwise, if the `urlObject.host` property value is truthy, the value of`urlObject.host` is coerced to a string and appended to `result`.\\n     * * If the `urlObject.pathname` property is a string that is not an empty string:\\n     *    * If the `urlObject.pathname`_does not start_ with an ASCII forward slash\\n     *    (`/`), then the literal string `'/'` is appended to `result`.\\n     *    * The value of `urlObject.pathname` is appended to `result`.\\n     * * Otherwise, if `urlObject.pathname` is not `undefined` and is not a string, an `Error` is thrown.\\n     * * If the `urlObject.search` property is `undefined` and if the `urlObject.query`property is an `Object`, the literal string `?` is appended to `result`followed by the output of calling the\\n     * `querystring` module's `stringify()`method passing the value of `urlObject.query`.\\n     * * Otherwise, if `urlObject.search` is a string:\\n     *    * If the value of `urlObject.search`_does not start_ with the ASCII question\\n     *    mark (`?`) character, the literal string `?` is appended to `result`.\\n     *    * The value of `urlObject.search` is appended to `result`.\\n     * * Otherwise, if `urlObject.search` is not `undefined` and is not a string, an `Error` is thrown.\\n     * * If the `urlObject.hash` property is a string:\\n     *    * If the value of `urlObject.hash`_does not start_ with the ASCII hash (`#`)\\n     *    character, the literal string `#` is appended to `result`.\\n     *    * The value of `urlObject.hash` is appended to `result`.\\n     * * Otherwise, if the `urlObject.hash` property is not `undefined` and is not a\\n     * string, an `Error` is thrown.\\n     * * `result` is returned.\\n     * @since v0.1.25\\n     * @deprecated Legacy: Use the WHATWG URL API instead.\\n     * @param urlObject A URL object (as returned by `url.parse()` or constructed otherwise). If a string, it is converted to an object by passing it to `url.parse()`.\\n     */\\n    function format(urlObject: URL, options?: URLFormatOptions): string;\\n    /**\\n     * The `url.format()` method returns a formatted URL string derived from`urlObject`.\\n     *\\n     * ```js\\n     * const url = require('url');\\n     * url.format({\\n     *   protocol: 'https',\\n     *   hostname: 'example.com',\\n     *   pathname: '/some/path',\\n     *   query: {\\n     *     page: 1,\\n     *     format: 'json'\\n     *   }\\n     * });\\n     *\\n     * // => 'https://example.com/some/path?page=1&#x26;format=json'\\n     * ```\\n     *\\n     * If `urlObject` is not an object or a string, `url.format()` will throw a `TypeError`.\\n     *\\n     * The formatting process operates as follows:\\n     *\\n     * * A new empty string `result` is created.\\n     * * If `urlObject.protocol` is a string, it is appended as-is to `result`.\\n     * * Otherwise, if `urlObject.protocol` is not `undefined` and is not a string, an `Error` is thrown.\\n     * * For all string values of `urlObject.protocol` that _do not end_ with an ASCII\\n     * colon (`:`) character, the literal string `:` will be appended to `result`.\\n     * * If either of the following conditions is true, then the literal string `//`will be appended to `result`:\\n     *    * `urlObject.slashes` property is true;\\n     *    * `urlObject.protocol` begins with `http`, `https`, `ftp`, `gopher`, or`file`;\\n     * * If the value of the `urlObject.auth` property is truthy, and either`urlObject.host` or `urlObject.hostname` are not `undefined`, the value of`urlObject.auth` will be coerced into a string\\n     * and appended to `result`followed by the literal string `@`.\\n     * * If the `urlObject.host` property is `undefined` then:\\n     *    * If the `urlObject.hostname` is a string, it is appended to `result`.\\n     *    * Otherwise, if `urlObject.hostname` is not `undefined` and is not a string,\\n     *    an `Error` is thrown.\\n     *    * If the `urlObject.port` property value is truthy, and `urlObject.hostname`is not `undefined`:\\n     *          * The literal string `:` is appended to `result`, and\\n     *          * The value of `urlObject.port` is coerced to a string and appended to`result`.\\n     * * Otherwise, if the `urlObject.host` property value is truthy, the value of`urlObject.host` is coerced to a string and appended to `result`.\\n     * * If the `urlObject.pathname` property is a string that is not an empty string:\\n     *    * If the `urlObject.pathname`_does not start_ with an ASCII forward slash\\n     *    (`/`), then the literal string `'/'` is appended to `result`.\\n     *    * The value of `urlObject.pathname` is appended to `result`.\\n     * * Otherwise, if `urlObject.pathname` is not `undefined` and is not a string, an `Error` is thrown.\\n     * * If the `urlObject.search` property is `undefined` and if the `urlObject.query`property is an `Object`, the literal string `?` is appended to `result`followed by the output of calling the\\n     * `querystring` module's `stringify()`method passing the value of `urlObject.query`.\\n     * * Otherwise, if `urlObject.search` is a string:\\n     *    * If the value of `urlObject.search`_does not start_ with the ASCII question\\n     *    mark (`?`) character, the literal string `?` is appended to `result`.\\n     *    * The value of `urlObject.search` is appended to `result`.\\n     * * Otherwise, if `urlObject.search` is not `undefined` and is not a string, an `Error` is thrown.\\n     * * If the `urlObject.hash` property is a string:\\n     *    * If the value of `urlObject.hash`_does not start_ with the ASCII hash (`#`)\\n     *    character, the literal string `#` is appended to `result`.\\n     *    * The value of `urlObject.hash` is appended to `result`.\\n     * * Otherwise, if the `urlObject.hash` property is not `undefined` and is not a\\n     * string, an `Error` is thrown.\\n     * * `result` is returned.\\n     * @since v0.1.25\\n     * @deprecated Legacy: Use the WHATWG URL API instead.\\n     * @param urlObject A URL object (as returned by `url.parse()` or constructed otherwise). If a string, it is converted to an object by passing it to `url.parse()`.\\n     */\\n    function format(urlObject: UrlObject | string): string;\\n    /**\\n     * The `url.resolve()` method resolves a target URL relative to a base URL in a\\n     * manner similar to that of a web browser resolving an anchor tag.\\n     *\\n     * ```js\\n     * const url = require('url');\\n     * url.resolve('/one/two/three', 'four');         // '/one/two/four'\\n     * url.resolve('http://example.com/', '/one');    // 'http://example.com/one'\\n     * url.resolve('http://example.com/one', '/two'); // 'http://example.com/two'\\n     * ```\\n     *\\n     * To achieve the same result using the WHATWG URL API:\\n     *\\n     * ```js\\n     * function resolve(from, to) {\\n     *   const resolvedUrl = new URL(to, new URL(from, 'resolve://'));\\n     *   if (resolvedUrl.protocol === 'resolve:') {\\n     *     // `from` is a relative URL.\\n     *     const { pathname, search, hash } = resolvedUrl;\\n     *     return pathname + search + hash;\\n     *   }\\n     *   return resolvedUrl.toString();\\n     * }\\n     *\\n     * resolve('/one/two/three', 'four');         // '/one/two/four'\\n     * resolve('http://example.com/', '/one');    // 'http://example.com/one'\\n     * resolve('http://example.com/one', '/two'); // 'http://example.com/two'\\n     * ```\\n     * @since v0.1.25\\n     * @deprecated Legacy: Use the WHATWG URL API instead.\\n     * @param from The base URL to use if `to` is a relative URL.\\n     * @param to The target URL to resolve.\\n     */\\n    function resolve(from: string, to: string): string;\\n    /**\\n     * Returns the [Punycode](https://tools.ietf.org/html/rfc5891#section-4.4) ASCII serialization of the `domain`. If `domain` is an\\n     * invalid domain, the empty string is returned.\\n     *\\n     * It performs the inverse operation to {@link domainToUnicode}.\\n     *\\n     * This feature is only available if the `node` executable was compiled with `ICU` enabled. If not, the domain names are passed through unchanged.\\n     *\\n     * ```js\\n     * import url from 'url';\\n     *\\n     * console.log(url.domainToASCII('espa\xf1ol.com'));\\n     * // Prints xn--espaol-zwa.com\\n     * console.log(url.domainToASCII('\u4e2d\u6587.com'));\\n     * // Prints xn--fiq228c.com\\n     * console.log(url.domainToASCII('xn--i\xf1valid.com'));\\n     * // Prints an empty string\\n     * ```\\n     * @since v7.4.0, v6.13.0\\n     */\\n    function domainToASCII(domain: string): string;\\n    /**\\n     * Returns the Unicode serialization of the `domain`. If `domain` is an invalid\\n     * domain, the empty string is returned.\\n     *\\n     * It performs the inverse operation to {@link domainToASCII}.\\n     *\\n     * This feature is only available if the `node` executable was compiled with `ICU` enabled. If not, the domain names are passed through unchanged.\\n     *\\n     * ```js\\n     * import url from 'url';\\n     *\\n     * console.log(url.domainToUnicode('xn--espaol-zwa.com'));\\n     * // Prints espa\xf1ol.com\\n     * console.log(url.domainToUnicode('xn--fiq228c.com'));\\n     * // Prints \u4e2d\u6587.com\\n     * console.log(url.domainToUnicode('xn--i\xf1valid.com'));\\n     * // Prints an empty string\\n     * ```\\n     * @since v7.4.0, v6.13.0\\n     */\\n    function domainToUnicode(domain: string): string;\\n    /**\\n     * This function ensures the correct decodings of percent-encoded characters as\\n     * well as ensuring a cross-platform valid absolute path string.\\n     *\\n     * ```js\\n     * import { fileURLToPath } from 'url';\\n     *\\n     * const __filename = fileURLToPath(import.meta.url);\\n     *\\n     * new URL('file:///C:/path/').pathname;      // Incorrect: /C:/path/\\n     * fileURLToPath('file:///C:/path/');         // Correct:   C:\\\\path\\\\ (Windows)\\n     *\\n     * new URL('file://nas/foo.txt').pathname;    // Incorrect: /foo.txt\\n     * fileURLToPath('file://nas/foo.txt');       // Correct:   \\\\\\\\nas\\\\foo.txt (Windows)\\n     *\\n     * new URL('file:///\u4f60\u597d.txt').pathname;      // Incorrect: /%E4%BD%A0%E5%A5%BD.txt\\n     * fileURLToPath('file:///\u4f60\u597d.txt');         // Correct:   /\u4f60\u597d.txt (POSIX)\\n     *\\n     * new URL('file:///hello world').pathname;   // Incorrect: /hello%20world\\n     * fileURLToPath('file:///hello world');      // Correct:   /hello world (POSIX)\\n     * ```\\n     * @since v10.12.0\\n     * @param url The file URL string or URL object to convert to a path.\\n     * @return The fully-resolved platform-specific Node.js file path.\\n     */\\n    function fileURLToPath(url: string | URL): string;\\n    /**\\n     * This function ensures that `path` is resolved absolutely, and that the URL\\n     * control characters are correctly encoded when converting into a File URL.\\n     *\\n     * ```js\\n     * import { pathToFileURL } from 'url';\\n     *\\n     * new URL('/foo#1', 'file:');           // Incorrect: file:///foo#1\\n     * pathToFileURL('/foo#1');              // Correct:   file:///foo%231 (POSIX)\\n     *\\n     * new URL('/some/path%.c', 'file:');    // Incorrect: file:///some/path%.c\\n     * pathToFileURL('/some/path%.c');       // Correct:   file:///some/path%25.c (POSIX)\\n     * ```\\n     * @since v10.12.0\\n     * @param path The path to convert to a File URL.\\n     * @return The file URL object.\\n     */\\n    function pathToFileURL(path: string): URL;\\n    /**\\n     * This utility function converts a URL object into an ordinary options object as\\n     * expected by the `http.request()` and `https.request()` APIs.\\n     *\\n     * ```js\\n     * import { urlToHttpOptions } from 'url';\\n     * const myURL = new URL('https://a:b@\u6e2c\u8a66?abc#foo');\\n     *\\n     * console.log(urlToHttpOptions(myURL));\\n     * /*\\n     * {\\n     *   protocol: 'https:',\\n     *   hostname: 'xn--g6w251d',\\n     *   hash: '#foo',\\n     *   search: '?abc',\\n     *   pathname: '/',\\n     *   path: '/?abc',\\n     *   href: 'https://a:b@xn--g6w251d/?abc#foo',\\n     *   auth: 'a:b'\\n     * }\\n     *\\n     * ```\\n     * @since v15.7.0, v14.18.0\\n     * @param url The `WHATWG URL` object to convert to an options object.\\n     * @return Options object\\n     */\\n    function urlToHttpOptions(url: URL): ClientRequestArgs;\\n    interface URLFormatOptions {\\n        auth?: boolean | undefined;\\n        fragment?: boolean | undefined;\\n        search?: boolean | undefined;\\n        unicode?: boolean | undefined;\\n    }\\n    /**\\n     * Browser-compatible `URL` class, implemented by following the WHATWG URL\\n     * Standard. [Examples of parsed URLs](https://url.spec.whatwg.org/#example-url-parsing) may be found in the Standard itself.\\n     * The `URL` class is also available on the global object.\\n     *\\n     * In accordance with browser conventions, all properties of `URL` objects\\n     * are implemented as getters and setters on the class prototype, rather than as\\n     * data properties on the object itself. Thus, unlike `legacy urlObject` s,\\n     * using the `delete` keyword on any properties of `URL` objects (e.g. `delete myURL.protocol`, `delete myURL.pathname`, etc) has no effect but will still\\n     * return `true`.\\n     * @since v7.0.0, v6.13.0\\n     */\\n    class URL {\\n        /**\\n         * Creates a `'blob:nodedata:...'` URL string that represents the given `Blob` object and can be used to retrieve the `Blob` later.\\n         *\\n         * ```js\\n         * const {\\n         *   Blob,\\n         *   resolveObjectURL,\\n         * } = require('buffer');\\n         *\\n         * const blob = new Blob(['hello']);\\n         * const id = URL.createObjectURL(blob);\\n         *\\n         * // later...\\n         *\\n         * const otherBlob = resolveObjectURL(id);\\n         * console.log(otherBlob.size);\\n         * ```\\n         *\\n         * The data stored by the registered `Blob` will be retained in memory until`URL.revokeObjectURL()` is called to remove it.\\n         *\\n         * `Blob` objects are registered within the current thread. If using Worker\\n         * Threads, `Blob` objects registered within one Worker will not be available\\n         * to other workers or the main thread.\\n         * @since v16.7.0\\n         * @experimental\\n         */\\n        static createObjectURL(blob: NodeBlob): string;\\n        /**\\n         * Removes the stored `Blob` identified by the given ID. Attempting to revoke a\\n         * ID that isn\u2019t registered will silently fail.\\n         * @since v16.7.0\\n         * @experimental\\n         * @param id A `'blob:nodedata:...` URL string returned by a prior call to `URL.createObjectURL()`.\\n         */\\n        static revokeObjectURL(objectUrl: string): void;\\n        constructor(input: string, base?: string | URL);\\n        /**\\n         * Gets and sets the fragment portion of the URL.\\n         *\\n         * ```js\\n         * const myURL = new URL('https://example.org/foo#bar');\\n         * console.log(myURL.hash);\\n         * // Prints #bar\\n         *\\n         * myURL.hash = 'baz';\\n         * console.log(myURL.href);\\n         * // Prints https://example.org/foo#baz\\n         * ```\\n         *\\n         * Invalid URL characters included in the value assigned to the `hash` property\\n         * are `percent-encoded`. The selection of which characters to\\n         * percent-encode may vary somewhat from what the {@link parse} and {@link format} methods would produce.\\n         */\\n        hash: string;\\n        /**\\n         * Gets and sets the host portion of the URL.\\n         *\\n         * ```js\\n         * const myURL = new URL('https://example.org:81/foo');\\n         * console.log(myURL.host);\\n         * // Prints example.org:81\\n         *\\n         * myURL.host = 'example.com:82';\\n         * console.log(myURL.href);\\n         * // Prints https://example.com:82/foo\\n         * ```\\n         *\\n         * Invalid host values assigned to the `host` property are ignored.\\n         */\\n        host: string;\\n        /**\\n         * Gets and sets the host name portion of the URL. The key difference between`url.host` and `url.hostname` is that `url.hostname` does _not_ include the\\n         * port.\\n         *\\n         * ```js\\n         * const myURL = new URL('https://example.org:81/foo');\\n         * console.log(myURL.hostname);\\n         * // Prints example.org\\n         *\\n         * // Setting the hostname does not change the port\\n         * myURL.hostname = 'example.com:82';\\n         * console.log(myURL.href);\\n         * // Prints https://example.com:81/foo\\n         *\\n         * // Use myURL.host to change the hostname and port\\n         * myURL.host = 'example.org:82';\\n         * console.log(myURL.href);\\n         * // Prints https://example.org:82/foo\\n         * ```\\n         *\\n         * Invalid host name values assigned to the `hostname` property are ignored.\\n         */\\n        hostname: string;\\n        /**\\n         * Gets and sets the serialized URL.\\n         *\\n         * ```js\\n         * const myURL = new URL('https://example.org/foo');\\n         * console.log(myURL.href);\\n         * // Prints https://example.org/foo\\n         *\\n         * myURL.href = 'https://example.com/bar';\\n         * console.log(myURL.href);\\n         * // Prints https://example.com/bar\\n         * ```\\n         *\\n         * Getting the value of the `href` property is equivalent to calling {@link toString}.\\n         *\\n         * Setting the value of this property to a new value is equivalent to creating a\\n         * new `URL` object using `new URL(value)`. Each of the `URL`object's properties will be modified.\\n         *\\n         * If the value assigned to the `href` property is not a valid URL, a `TypeError`will be thrown.\\n         */\\n        href: string;\\n        /**\\n         * Gets the read-only serialization of the URL's origin.\\n         *\\n         * ```js\\n         * const myURL = new URL('https://example.org/foo/bar?baz');\\n         * console.log(myURL.origin);\\n         * // Prints https://example.org\\n         * ```\\n         *\\n         * ```js\\n         * const idnURL = new URL('https://\u6e2c\u8a66');\\n         * console.log(idnURL.origin);\\n         * // Prints https://xn--g6w251d\\n         *\\n         * console.log(idnURL.hostname);\\n         * // Prints xn--g6w251d\\n         * ```\\n         */\\n        readonly origin: string;\\n        /**\\n         * Gets and sets the password portion of the URL.\\n         *\\n         * ```js\\n         * const myURL = new URL('https://abc:xyz@example.com');\\n         * console.log(myURL.password);\\n         * // Prints xyz\\n         *\\n         * myURL.password = '123';\\n         * console.log(myURL.href);\\n         * // Prints https://abc:123@example.com\\n         * ```\\n         *\\n         * Invalid URL characters included in the value assigned to the `password` property\\n         * are `percent-encoded`. The selection of which characters to\\n         * percent-encode may vary somewhat from what the {@link parse} and {@link format} methods would produce.\\n         */\\n        password: string;\\n        /**\\n         * Gets and sets the path portion of the URL.\\n         *\\n         * ```js\\n         * const myURL = new URL('https://example.org/abc/xyz?123');\\n         * console.log(myURL.pathname);\\n         * // Prints /abc/xyz\\n         *\\n         * myURL.pathname = '/abcdef';\\n         * console.log(myURL.href);\\n         * // Prints https://example.org/abcdef?123\\n         * ```\\n         *\\n         * Invalid URL characters included in the value assigned to the `pathname`property are `percent-encoded`. The selection of which characters\\n         * to percent-encode may vary somewhat from what the {@link parse} and {@link format} methods would produce.\\n         */\\n        pathname: string;\\n        /**\\n         * Gets and sets the port portion of the URL.\\n         *\\n         * The port value may be a number or a string containing a number in the range`0` to `65535` (inclusive). Setting the value to the default port of the`URL` objects given `protocol` will\\n         * result in the `port` value becoming\\n         * the empty string (`''`).\\n         *\\n         * The port value can be an empty string in which case the port depends on\\n         * the protocol/scheme:\\n         *\\n         * <omitted>\\n         *\\n         * Upon assigning a value to the port, the value will first be converted to a\\n         * string using `.toString()`.\\n         *\\n         * If that string is invalid but it begins with a number, the leading number is\\n         * assigned to `port`.\\n         * If the number lies outside the range denoted above, it is ignored.\\n         *\\n         * ```js\\n         * const myURL = new URL('https://example.org:8888');\\n         * console.log(myURL.port);\\n         * // Prints 8888\\n         *\\n         * // Default ports are automatically transformed to the empty string\\n         * // (HTTPS protocol's default port is 443)\\n         * myURL.port = '443';\\n         * console.log(myURL.port);\\n         * // Prints the empty string\\n         * console.log(myURL.href);\\n         * // Prints https://example.org/\\n         *\\n         * myURL.port = 1234;\\n         * console.log(myURL.port);\\n         * // Prints 1234\\n         * console.log(myURL.href);\\n         * // Prints https://example.org:1234/\\n         *\\n         * // Completely invalid port strings are ignored\\n         * myURL.port = 'abcd';\\n         * console.log(myURL.port);\\n         * // Prints 1234\\n         *\\n         * // Leading numbers are treated as a port number\\n         * myURL.port = '5678abcd';\\n         * console.log(myURL.port);\\n         * // Prints 5678\\n         *\\n         * // Non-integers are truncated\\n         * myURL.port = 1234.5678;\\n         * console.log(myURL.port);\\n         * // Prints 1234\\n         *\\n         * // Out-of-range numbers which are not represented in scientific notation\\n         * // will be ignored.\\n         * myURL.port = 1e10; // 10000000000, will be range-checked as described below\\n         * console.log(myURL.port);\\n         * // Prints 1234\\n         * ```\\n         *\\n         * Numbers which contain a decimal point,\\n         * such as floating-point numbers or numbers in scientific notation,\\n         * are not an exception to this rule.\\n         * Leading numbers up to the decimal point will be set as the URL's port,\\n         * assuming they are valid:\\n         *\\n         * ```js\\n         * myURL.port = 4.567e21;\\n         * console.log(myURL.port);\\n         * // Prints 4 (because it is the leading number in the string '4.567e21')\\n         * ```\\n         */\\n        port: string;\\n        /**\\n         * Gets and sets the protocol portion of the URL.\\n         *\\n         * ```js\\n         * const myURL = new URL('https://example.org');\\n         * console.log(myURL.protocol);\\n         * // Prints https:\\n         *\\n         * myURL.protocol = 'ftp';\\n         * console.log(myURL.href);\\n         * // Prints ftp://example.org/\\n         * ```\\n         *\\n         * Invalid URL protocol values assigned to the `protocol` property are ignored.\\n         */\\n        protocol: string;\\n        /**\\n         * Gets and sets the serialized query portion of the URL.\\n         *\\n         * ```js\\n         * const myURL = new URL('https://example.org/abc?123');\\n         * console.log(myURL.search);\\n         * // Prints ?123\\n         *\\n         * myURL.search = 'abc=xyz';\\n         * console.log(myURL.href);\\n         * // Prints https://example.org/abc?abc=xyz\\n         * ```\\n         *\\n         * Any invalid URL characters appearing in the value assigned the `search`property will be `percent-encoded`. The selection of which\\n         * characters to percent-encode may vary somewhat from what the {@link parse} and {@link format} methods would produce.\\n         */\\n        search: string;\\n        /**\\n         * Gets the `URLSearchParams` object representing the query parameters of the\\n         * URL. This property is read-only but the `URLSearchParams` object it provides\\n         * can be used to mutate the URL instance; to replace the entirety of query\\n         * parameters of the URL, use the {@link search} setter. See `URLSearchParams` documentation for details.\\n         *\\n         * Use care when using `.searchParams` to modify the `URL` because,\\n         * per the WHATWG specification, the `URLSearchParams` object uses\\n         * different rules to determine which characters to percent-encode. For\\n         * instance, the `URL` object will not percent encode the ASCII tilde (`~`)\\n         * character, while `URLSearchParams` will always encode it:\\n         *\\n         * ```js\\n         * const myUrl = new URL('https://example.org/abc?foo=~bar');\\n         *\\n         * console.log(myUrl.search);  // prints ?foo=~bar\\n         *\\n         * // Modify the URL via searchParams...\\n         * myUrl.searchParams.sort();\\n         *\\n         * console.log(myUrl.search);  // prints ?foo=%7Ebar\\n         * ```\\n         */\\n        readonly searchParams: URLSearchParams;\\n        /**\\n         * Gets and sets the username portion of the URL.\\n         *\\n         * ```js\\n         * const myURL = new URL('https://abc:xyz@example.com');\\n         * console.log(myURL.username);\\n         * // Prints abc\\n         *\\n         * myURL.username = '123';\\n         * console.log(myURL.href);\\n         * // Prints https://123:xyz@example.com/\\n         * ```\\n         *\\n         * Any invalid URL characters appearing in the value assigned the `username`property will be `percent-encoded`. The selection of which\\n         * characters to percent-encode may vary somewhat from what the {@link parse} and {@link format} methods would produce.\\n         */\\n        username: string;\\n        /**\\n         * The `toString()` method on the `URL` object returns the serialized URL. The\\n         * value returned is equivalent to that of {@link href} and {@link toJSON}.\\n         */\\n        toString(): string;\\n        /**\\n         * The `toJSON()` method on the `URL` object returns the serialized URL. The\\n         * value returned is equivalent to that of {@link href} and {@link toString}.\\n         *\\n         * This method is automatically called when an `URL` object is serialized\\n         * with [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify).\\n         *\\n         * ```js\\n         * const myURLs = [\\n         *   new URL('https://www.example.com'),\\n         *   new URL('https://test.example.org'),\\n         * ];\\n         * console.log(JSON.stringify(myURLs));\\n         * // Prints [\\\"https://www.example.com/\\\",\\\"https://test.example.org/\\\"]\\n         * ```\\n         */\\n        toJSON(): string;\\n    }\\n    /**\\n     * The `URLSearchParams` API provides read and write access to the query of a`URL`. The `URLSearchParams` class can also be used standalone with one of the\\n     * four following constructors.\\n     * The `URLSearchParams` class is also available on the global object.\\n     *\\n     * The WHATWG `URLSearchParams` interface and the `querystring` module have\\n     * similar purpose, but the purpose of the `querystring` module is more\\n     * general, as it allows the customization of delimiter characters (`&#x26;` and `=`).\\n     * On the other hand, this API is designed purely for URL query strings.\\n     *\\n     * ```js\\n     * const myURL = new URL('https://example.org/?abc=123');\\n     * console.log(myURL.searchParams.get('abc'));\\n     * // Prints 123\\n     *\\n     * myURL.searchParams.append('abc', 'xyz');\\n     * console.log(myURL.href);\\n     * // Prints https://example.org/?abc=123&#x26;abc=xyz\\n     *\\n     * myURL.searchParams.delete('abc');\\n     * myURL.searchParams.set('a', 'b');\\n     * console.log(myURL.href);\\n     * // Prints https://example.org/?a=b\\n     *\\n     * const newSearchParams = new URLSearchParams(myURL.searchParams);\\n     * // The above is equivalent to\\n     * // const newSearchParams = new URLSearchParams(myURL.search);\\n     *\\n     * newSearchParams.append('a', 'c');\\n     * console.log(myURL.href);\\n     * // Prints https://example.org/?a=b\\n     * console.log(newSearchParams.toString());\\n     * // Prints a=b&#x26;a=c\\n     *\\n     * // newSearchParams.toString() is implicitly called\\n     * myURL.search = newSearchParams;\\n     * console.log(myURL.href);\\n     * // Prints https://example.org/?a=b&#x26;a=c\\n     * newSearchParams.delete('a');\\n     * console.log(myURL.href);\\n     * // Prints https://example.org/?a=b&#x26;a=c\\n     * ```\\n     * @since v7.5.0, v6.13.0\\n     */\\n    class URLSearchParams implements Iterable<[string, string]> {\\n        constructor(init?: URLSearchParams | string | Record<string, string | ReadonlyArray<string>> | Iterable<[string, string]> | ReadonlyArray<[string, string]>);\\n        /**\\n         * Append a new name-value pair to the query string.\\n         */\\n        append(name: string, value: string): void;\\n        /**\\n         * Remove all name-value pairs whose name is `name`.\\n         */\\n        delete(name: string): void;\\n        /**\\n         * Returns an ES6 `Iterator` over each of the name-value pairs in the query.\\n         * Each item of the iterator is a JavaScript `Array`. The first item of the `Array`is the `name`, the second item of the `Array` is the `value`.\\n         *\\n         * Alias for `urlSearchParams[@@iterator]()`.\\n         */\\n        entries(): IterableIterator<[string, string]>;\\n        /**\\n         * Iterates over each name-value pair in the query and invokes the given function.\\n         *\\n         * ```js\\n         * const myURL = new URL('https://example.org/?a=b&#x26;c=d');\\n         * myURL.searchParams.forEach((value, name, searchParams) => {\\n         *   console.log(name, value, myURL.searchParams === searchParams);\\n         * });\\n         * // Prints:\\n         * //   a b true\\n         * //   c d true\\n         * ```\\n         * @param fn Invoked for each name-value pair in the query\\n         * @param thisArg To be used as `this` value for when `fn` is called\\n         */\\n        forEach<TThis = this>(callback: (this: TThis, value: string, name: string, searchParams: URLSearchParams) => void, thisArg?: TThis): void;\\n        /**\\n         * Returns the value of the first name-value pair whose name is `name`. If there\\n         * are no such pairs, `null` is returned.\\n         * @return or `null` if there is no name-value pair with the given `name`.\\n         */\\n        get(name: string): string | null;\\n        /**\\n         * Returns the values of all name-value pairs whose name is `name`. If there are\\n         * no such pairs, an empty array is returned.\\n         */\\n        getAll(name: string): string[];\\n        /**\\n         * Returns `true` if there is at least one name-value pair whose name is `name`.\\n         */\\n        has(name: string): boolean;\\n        /**\\n         * Returns an ES6 `Iterator` over the names of each name-value pair.\\n         *\\n         * ```js\\n         * const params = new URLSearchParams('foo=bar&#x26;foo=baz');\\n         * for (const name of params.keys()) {\\n         *   console.log(name);\\n         * }\\n         * // Prints:\\n         * //   foo\\n         * //   foo\\n         * ```\\n         */\\n        keys(): IterableIterator<string>;\\n        /**\\n         * Sets the value in the `URLSearchParams` object associated with `name` to`value`. If there are any pre-existing name-value pairs whose names are `name`,\\n         * set the first such pair's value to `value` and remove all others. If not,\\n         * append the name-value pair to the query string.\\n         *\\n         * ```js\\n         * const params = new URLSearchParams();\\n         * params.append('foo', 'bar');\\n         * params.append('foo', 'baz');\\n         * params.append('abc', 'def');\\n         * console.log(params.toString());\\n         * // Prints foo=bar&#x26;foo=baz&#x26;abc=def\\n         *\\n         * params.set('foo', 'def');\\n         * params.set('xyz', 'opq');\\n         * console.log(params.toString());\\n         * // Prints foo=def&#x26;abc=def&#x26;xyz=opq\\n         * ```\\n         */\\n        set(name: string, value: string): void;\\n        /**\\n         * The total number of parameter entries.\\n         * @since v18.16.0\\n         */\\n        readonly size: number;\\n        /**\\n         * Sort all existing name-value pairs in-place by their names. Sorting is done\\n         * with a [stable sorting algorithm](https://en.wikipedia.org/wiki/Sorting_algorithm#Stability), so relative order between name-value pairs\\n         * with the same name is preserved.\\n         *\\n         * This method can be used, in particular, to increase cache hits.\\n         *\\n         * ```js\\n         * const params = new URLSearchParams('query[]=abc&#x26;type=search&#x26;query[]=123');\\n         * params.sort();\\n         * console.log(params.toString());\\n         * // Prints query%5B%5D=abc&#x26;query%5B%5D=123&#x26;type=search\\n         * ```\\n         * @since v7.7.0, v6.13.0\\n         */\\n        sort(): void;\\n        /**\\n         * Returns the search parameters serialized as a string, with characters\\n         * percent-encoded where necessary.\\n         */\\n        toString(): string;\\n        /**\\n         * Returns an ES6 `Iterator` over the values of each name-value pair.\\n         */\\n        values(): IterableIterator<string>;\\n        [Symbol.iterator](): IterableIterator<[string, string]>;\\n    }\\n    import { URL as _URL, URLSearchParams as _URLSearchParams } from 'url';\\n    global {\\n        interface URLSearchParams extends _URLSearchParams {}\\n        interface URL extends _URL {}\\n        interface Global {\\n            URL: typeof _URL;\\n            URLSearchParams: typeof _URLSearchParams;\\n        }\\n        /**\\n         * `URL` class is a global reference for `require('url').URL`\\n         * https://nodejs.org/api/url.html#the-whatwg-url-api\\n         * @since v10.0.0\\n         */\\n        var URL: typeof globalThis extends {\\n            onmessage: any;\\n            URL: infer T;\\n        }\\n            ? T\\n            : typeof _URL;\\n        /**\\n         * `URLSearchParams` class is a global reference for `require('url').URLSearchParams`\\n         * https://nodejs.org/api/url.html#class-urlsearchparams\\n         * @since v10.0.0\\n         */\\n        var URLSearchParams: typeof globalThis extends {\\n            onmessage: any;\\n            URLSearchParams: infer T;\\n        }\\n            ? T\\n            : typeof _URLSearchParams;\\n    }\\n}\\ndeclare module 'node:url' {\\n    export * from 'url';\\n}\\n\",\"file:///node_modules/@types/node/util.d.ts\":\"/**\\n * The `util` module supports the needs of Node.js internal APIs. Many of the\\n * utilities are useful for application and module developers as well. To access\\n * it:\\n *\\n * ```js\\n * const util = require('util');\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.x/lib/util.js)\\n */\\ndeclare module 'util' {\\n    import * as types from 'node:util/types';\\n    export interface InspectOptions {\\n        /**\\n         * If `true`, object's non-enumerable symbols and properties are included in the formatted result.\\n         * `WeakMap` and `WeakSet` entries are also included as well as user defined prototype properties (excluding method properties).\\n         * @default false\\n         */\\n        showHidden?: boolean | undefined;\\n        /**\\n         * Specifies the number of times to recurse while formatting object.\\n         * This is useful for inspecting large objects.\\n         * To recurse up to the maximum call stack size pass `Infinity` or `null`.\\n         * @default 2\\n         */\\n        depth?: number | null | undefined;\\n        /**\\n         * If `true`, the output is styled with ANSI color codes. Colors are customizable.\\n         */\\n        colors?: boolean | undefined;\\n        /**\\n         * If `false`, `[util.inspect.custom](depth, opts, inspect)` functions are not invoked.\\n         * @default true\\n         */\\n        customInspect?: boolean | undefined;\\n        /**\\n         * If `true`, `Proxy` inspection includes the target and handler objects.\\n         * @default false\\n         */\\n        showProxy?: boolean | undefined;\\n        /**\\n         * Specifies the maximum number of `Array`, `TypedArray`, `WeakMap`, and `WeakSet` elements\\n         * to include when formatting. Set to `null` or `Infinity` to show all elements.\\n         * Set to `0` or negative to show no elements.\\n         * @default 100\\n         */\\n        maxArrayLength?: number | null | undefined;\\n        /**\\n         * Specifies the maximum number of characters to\\n         * include when formatting. Set to `null` or `Infinity` to show all elements.\\n         * Set to `0` or negative to show no characters.\\n         * @default 10000\\n         */\\n        maxStringLength?: number | null | undefined;\\n        /**\\n         * The length at which input values are split across multiple lines.\\n         * Set to `Infinity` to format the input as a single line\\n         * (in combination with `compact` set to `true` or any number >= `1`).\\n         * @default 80\\n         */\\n        breakLength?: number | undefined;\\n        /**\\n         * Setting this to `false` causes each object key\\n         * to be displayed on a new line. It will also add new lines to text that is\\n         * longer than `breakLength`. If set to a number, the most `n` inner elements\\n         * are united on a single line as long as all properties fit into\\n         * `breakLength`. Short array elements are also grouped together. Note that no\\n         * text will be reduced below 16 characters, no matter the `breakLength` size.\\n         * For more information, see the example below.\\n         * @default true\\n         */\\n        compact?: boolean | number | undefined;\\n        /**\\n         * If set to `true` or a function, all properties of an object, and `Set` and `Map`\\n         * entries are sorted in the resulting string.\\n         * If set to `true` the default sort is used.\\n         * If set to a function, it is used as a compare function.\\n         */\\n        sorted?: boolean | ((a: string, b: string) => number) | undefined;\\n        /**\\n         * If set to `true`, getters are going to be\\n         * inspected as well. If set to `'get'` only getters without setter are going\\n         * to be inspected. If set to `'set'` only getters having a corresponding\\n         * setter are going to be inspected. This might cause side effects depending on\\n         * the getter function.\\n         * @default false\\n         */\\n        getters?: 'get' | 'set' | boolean | undefined;\\n        /**\\n         * If set to `true`, an underscore is used to separate every three digits in all bigints and numbers.\\n         * @default false\\n         */\\n        numericSeparator?: boolean | undefined;\\n    }\\n    export type Style = 'special' | 'number' | 'bigint' | 'boolean' | 'undefined' | 'null' | 'string' | 'symbol' | 'date' | 'regexp' | 'module';\\n    export type CustomInspectFunction = (depth: number, options: InspectOptionsStylized) => any; // TODO: , inspect: inspect\\n    export interface InspectOptionsStylized extends InspectOptions {\\n        stylize(text: string, styleType: Style): string;\\n    }\\n    /**\\n     * The `util.format()` method returns a formatted string using the first argument\\n     * as a `printf`\\\\-like format string which can contain zero or more format\\n     * specifiers. Each specifier is replaced with the converted value from the\\n     * corresponding argument. Supported specifiers are:\\n     *\\n     * If a specifier does not have a corresponding argument, it is not replaced:\\n     *\\n     * ```js\\n     * util.format('%s:%s', 'foo');\\n     * // Returns: 'foo:%s'\\n     * ```\\n     *\\n     * Values that are not part of the format string are formatted using`util.inspect()` if their type is not `string`.\\n     *\\n     * If there are more arguments passed to the `util.format()` method than the\\n     * number of specifiers, the extra arguments are concatenated to the returned\\n     * string, separated by spaces:\\n     *\\n     * ```js\\n     * util.format('%s:%s', 'foo', 'bar', 'baz');\\n     * // Returns: 'foo:bar baz'\\n     * ```\\n     *\\n     * If the first argument does not contain a valid format specifier, `util.format()`returns a string that is the concatenation of all arguments separated by spaces:\\n     *\\n     * ```js\\n     * util.format(1, 2, 3);\\n     * // Returns: '1 2 3'\\n     * ```\\n     *\\n     * If only one argument is passed to `util.format()`, it is returned as it is\\n     * without any formatting:\\n     *\\n     * ```js\\n     * util.format('%% %s');\\n     * // Returns: '%% %s'\\n     * ```\\n     *\\n     * `util.format()` is a synchronous method that is intended as a debugging tool.\\n     * Some input values can have a significant performance overhead that can block the\\n     * event loop. Use this function with care and never in a hot code path.\\n     * @since v0.5.3\\n     * @param format A `printf`-like format string.\\n     */\\n    export function format(format?: any, ...param: any[]): string;\\n    /**\\n     * This function is identical to {@link format}, except in that it takes\\n     * an `inspectOptions` argument which specifies options that are passed along to {@link inspect}.\\n     *\\n     * ```js\\n     * util.formatWithOptions({ colors: true }, 'See object %O', { foo: 42 });\\n     * // Returns 'See object { foo: 42 }', where `42` is colored as a number\\n     * // when printed to a terminal.\\n     * ```\\n     * @since v10.0.0\\n     */\\n    export function formatWithOptions(inspectOptions: InspectOptions, format?: any, ...param: any[]): string;\\n    /**\\n     * Returns the string name for a numeric error code that comes from a Node.js API.\\n     * The mapping between error codes and error names is platform-dependent.\\n     * See `Common System Errors` for the names of common errors.\\n     *\\n     * ```js\\n     * fs.access('file/that/does/not/exist', (err) => {\\n     *   const name = util.getSystemErrorName(err.errno);\\n     *   console.error(name);  // ENOENT\\n     * });\\n     * ```\\n     * @since v9.7.0\\n     */\\n    export function getSystemErrorName(err: number): string;\\n    /**\\n     * Returns a Map of all system error codes available from the Node.js API.\\n     * The mapping between error codes and error names is platform-dependent.\\n     * See `Common System Errors` for the names of common errors.\\n     *\\n     * ```js\\n     * fs.access('file/that/does/not/exist', (err) => {\\n     *   const errorMap = util.getSystemErrorMap();\\n     *   const name = errorMap.get(err.errno);\\n     *   console.error(name);  // ENOENT\\n     * });\\n     * ```\\n     * @since v16.0.0, v14.17.0\\n     */\\n    export function getSystemErrorMap(): Map<number, [string, string]>;\\n    /**\\n     * The `util.log()` method prints the given `string` to `stdout` with an included\\n     * timestamp.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * util.log('Timestamped message.');\\n     * ```\\n     * @since v0.3.0\\n     * @deprecated Since v6.0.0 - Use a third party module instead.\\n     */\\n    export function log(string: string): void;\\n    /**\\n     * Returns the `string` after replacing any surrogate code points\\n     * (or equivalently, any unpaired surrogate code units) with the\\n     * Unicode \\\"replacement character\\\" U+FFFD.\\n     * @since v16.8.0, v14.18.0\\n     */\\n    export function toUSVString(string: string): string;\\n    /**\\n     * Creates and returns an `AbortController` instance whose `AbortSignal` is marked\\n     * as transferable and can be used with `structuredClone()` or `postMessage()`.\\n     * @since v18.11.0\\n     * @returns A transferable AbortController\\n     */\\n    export function transferableAbortController(): AbortController;\\n    /**\\n     * Marks the given {AbortSignal} as transferable so that it can be used with\\n     * `structuredClone()` and `postMessage()`.\\n     *\\n     * ```js\\n     * const signal = transferableAbortSignal(AbortSignal.timeout(100));\\n     * const channel = new MessageChannel();\\n     * channel.port2.postMessage(signal, [signal]);\\n     * ```\\n     * @since v18.11.0\\n     * @param signal The AbortSignal\\n     * @returns The same AbortSignal\\n     */\\n    export function transferableAbortSignal(signal: AbortSignal): AbortSignal;\\n    /**\\n     * Listens to abort event on the provided `signal` and returns a promise that is fulfilled when the `signal` is aborted.\\n     * If the passed `resource` is garbage collected before the `signal` is aborted, the returned promise shall remain pending indefinitely.\\n     * @param resource  Any non-null entity, reference to which is held weakly.\\n     */\\n    export function aborted(signal: AbortSignal, resource: any): Promise<void>;\\n    /**\\n     * The `util.inspect()` method returns a string representation of `object` that is\\n     * intended for debugging. The output of `util.inspect` may change at any time\\n     * and should not be depended upon programmatically. Additional `options` may be\\n     * passed that alter the result.`util.inspect()` will use the constructor's name and/or `@@toStringTag` to make\\n     * an identifiable tag for an inspected value.\\n     *\\n     * ```js\\n     * class Foo {\\n     *   get [Symbol.toStringTag]() {\\n     *     return 'bar';\\n     *   }\\n     * }\\n     *\\n     * class Bar {}\\n     *\\n     * const baz = Object.create(null, { [Symbol.toStringTag]: { value: 'foo' } });\\n     *\\n     * util.inspect(new Foo()); // 'Foo [bar] {}'\\n     * util.inspect(new Bar()); // 'Bar {}'\\n     * util.inspect(baz);       // '[foo] {}'\\n     * ```\\n     *\\n     * Circular references point to their anchor by using a reference index:\\n     *\\n     * ```js\\n     * const { inspect } = require('util');\\n     *\\n     * const obj = {};\\n     * obj.a = [obj];\\n     * obj.b = {};\\n     * obj.b.inner = obj.b;\\n     * obj.b.obj = obj;\\n     *\\n     * console.log(inspect(obj));\\n     * // <ref *1> {\\n     * //   a: [ [Circular *1] ],\\n     * //   b: <ref *2> { inner: [Circular *2], obj: [Circular *1] }\\n     * // }\\n     * ```\\n     *\\n     * The following example inspects all properties of the `util` object:\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * console.log(util.inspect(util, { showHidden: true, depth: null }));\\n     * ```\\n     *\\n     * The following example highlights the effect of the `compact` option:\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * const o = {\\n     *   a: [1, 2, [[\\n     *     'Lorem ipsum dolor sit amet,\\\\nconsectetur adipiscing elit, sed do ' +\\n     *       'eiusmod \\\\ntempor incididunt ut labore et dolore magna aliqua.',\\n     *     'test',\\n     *     'foo']], 4],\\n     *   b: new Map([['za', 1], ['zb', 'test']])\\n     * };\\n     * console.log(util.inspect(o, { compact: true, depth: 5, breakLength: 80 }));\\n     *\\n     * // { a:\\n     * //   [ 1,\\n     * //     2,\\n     * //     [ [ 'Lorem ipsum dolor sit amet,\\\\nconsectetur [...]', // A long line\\n     * //           'test',\\n     * //           'foo' ] ],\\n     * //     4 ],\\n     * //   b: Map(2) { 'za' => 1, 'zb' => 'test' } }\\n     *\\n     * // Setting `compact` to false or an integer creates more reader friendly output.\\n     * console.log(util.inspect(o, { compact: false, depth: 5, breakLength: 80 }));\\n     *\\n     * // {\\n     * //   a: [\\n     * //     1,\\n     * //     2,\\n     * //     [\\n     * //       [\\n     * //         'Lorem ipsum dolor sit amet,\\\\n' +\\n     * //           'consectetur adipiscing elit, sed do eiusmod \\\\n' +\\n     * //           'tempor incididunt ut labore et dolore magna aliqua.',\\n     * //         'test',\\n     * //         'foo'\\n     * //       ]\\n     * //     ],\\n     * //     4\\n     * //   ],\\n     * //   b: Map(2) {\\n     * //     'za' => 1,\\n     * //     'zb' => 'test'\\n     * //   }\\n     * // }\\n     *\\n     * // Setting `breakLength` to e.g. 150 will print the \\\"Lorem ipsum\\\" text in a\\n     * // single line.\\n     * ```\\n     *\\n     * The `showHidden` option allows [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap) and\\n     * [`WeakSet`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet) entries to be\\n     * inspected. If there are more entries than `maxArrayLength`, there is no\\n     * guarantee which entries are displayed. That means retrieving the same [`WeakSet`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet) entries twice may\\n     * result in different output. Furthermore, entries\\n     * with no remaining strong references may be garbage collected at any time.\\n     *\\n     * ```js\\n     * const { inspect } = require('util');\\n     *\\n     * const obj = { a: 1 };\\n     * const obj2 = { b: 2 };\\n     * const weakSet = new WeakSet([obj, obj2]);\\n     *\\n     * console.log(inspect(weakSet, { showHidden: true }));\\n     * // WeakSet { { a: 1 }, { b: 2 } }\\n     * ```\\n     *\\n     * The `sorted` option ensures that an object's property insertion order does not\\n     * impact the result of `util.inspect()`.\\n     *\\n     * ```js\\n     * const { inspect } = require('util');\\n     * const assert = require('assert');\\n     *\\n     * const o1 = {\\n     *   b: [2, 3, 1],\\n     *   a: '`a` comes before `b`',\\n     *   c: new Set([2, 3, 1])\\n     * };\\n     * console.log(inspect(o1, { sorted: true }));\\n     * // { a: '`a` comes before `b`', b: [ 2, 3, 1 ], c: Set(3) { 1, 2, 3 } }\\n     * console.log(inspect(o1, { sorted: (a, b) => b.localeCompare(a) }));\\n     * // { c: Set(3) { 3, 2, 1 }, b: [ 2, 3, 1 ], a: '`a` comes before `b`' }\\n     *\\n     * const o2 = {\\n     *   c: new Set([2, 1, 3]),\\n     *   a: '`a` comes before `b`',\\n     *   b: [2, 3, 1]\\n     * };\\n     * assert.strict.equal(\\n     *   inspect(o1, { sorted: true }),\\n     *   inspect(o2, { sorted: true })\\n     * );\\n     * ```\\n     *\\n     * The `numericSeparator` option adds an underscore every three digits to all\\n     * numbers.\\n     *\\n     * ```js\\n     * const { inspect } = require('util');\\n     *\\n     * const thousand = 1_000;\\n     * const million = 1_000_000;\\n     * const bigNumber = 123_456_789n;\\n     * const bigDecimal = 1_234.123_45;\\n     *\\n     * console.log(thousand, million, bigNumber, bigDecimal);\\n     * // 1_000 1_000_000 123_456_789n 1_234.123_45\\n     * ```\\n     *\\n     * `util.inspect()` is a synchronous method intended for debugging. Its maximum\\n     * output length is approximately 128 MB. Inputs that result in longer output will\\n     * be truncated.\\n     * @since v0.3.0\\n     * @param object Any JavaScript primitive or `Object`.\\n     * @return The representation of `object`.\\n     */\\n    export function inspect(object: any, showHidden?: boolean, depth?: number | null, color?: boolean): string;\\n    export function inspect(object: any, options?: InspectOptions): string;\\n    export namespace inspect {\\n        let colors: NodeJS.Dict<[number, number]>;\\n        let styles: {\\n            [K in Style]: string;\\n        };\\n        let defaultOptions: InspectOptions;\\n        /**\\n         * Allows changing inspect settings from the repl.\\n         */\\n        let replDefaults: InspectOptions;\\n        /**\\n         * That can be used to declare custom inspect functions.\\n         */\\n        const custom: unique symbol;\\n    }\\n    /**\\n     * Alias for [`Array.isArray()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray).\\n     *\\n     * Returns `true` if the given `object` is an `Array`. Otherwise, returns `false`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * util.isArray([]);\\n     * // Returns: true\\n     * util.isArray(new Array());\\n     * // Returns: true\\n     * util.isArray({});\\n     * // Returns: false\\n     * ```\\n     * @since v0.6.0\\n     * @deprecated Since v4.0.0 - Use `isArray` instead.\\n     */\\n    export function isArray(object: unknown): object is unknown[];\\n    /**\\n     * Returns `true` if the given `object` is a `RegExp`. Otherwise, returns `false`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * util.isRegExp(/some regexp/);\\n     * // Returns: true\\n     * util.isRegExp(new RegExp('another regexp'));\\n     * // Returns: true\\n     * util.isRegExp({});\\n     * // Returns: false\\n     * ```\\n     * @since v0.6.0\\n     * @deprecated Since v4.0.0 - Deprecated\\n     */\\n    export function isRegExp(object: unknown): object is RegExp;\\n    /**\\n     * Returns `true` if the given `object` is a `Date`. Otherwise, returns `false`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * util.isDate(new Date());\\n     * // Returns: true\\n     * util.isDate(Date());\\n     * // false (without 'new' returns a String)\\n     * util.isDate({});\\n     * // Returns: false\\n     * ```\\n     * @since v0.6.0\\n     * @deprecated Since v4.0.0 - Use {@link types.isDate} instead.\\n     */\\n    export function isDate(object: unknown): object is Date;\\n    /**\\n     * Returns `true` if the given `object` is an `Error`. Otherwise, returns`false`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * util.isError(new Error());\\n     * // Returns: true\\n     * util.isError(new TypeError());\\n     * // Returns: true\\n     * util.isError({ name: 'Error', message: 'an error occurred' });\\n     * // Returns: false\\n     * ```\\n     *\\n     * This method relies on `Object.prototype.toString()` behavior. It is\\n     * possible to obtain an incorrect result when the `object` argument manipulates`@@toStringTag`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     * const obj = { name: 'Error', message: 'an error occurred' };\\n     *\\n     * util.isError(obj);\\n     * // Returns: false\\n     * obj[Symbol.toStringTag] = 'Error';\\n     * util.isError(obj);\\n     * // Returns: true\\n     * ```\\n     * @since v0.6.0\\n     * @deprecated Since v4.0.0 - Use {@link types.isNativeError} instead.\\n     */\\n    export function isError(object: unknown): object is Error;\\n    /**\\n     * Usage of `util.inherits()` is discouraged. Please use the ES6 `class` and`extends` keywords to get language level inheritance support. Also note\\n     * that the two styles are [semantically incompatible](https://github.com/nodejs/node/issues/4179).\\n     *\\n     * Inherit the prototype methods from one [constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor) into another. The\\n     * prototype of `constructor` will be set to a new object created from`superConstructor`.\\n     *\\n     * This mainly adds some input validation on top of`Object.setPrototypeOf(constructor.prototype, superConstructor.prototype)`.\\n     * As an additional convenience, `superConstructor` will be accessible\\n     * through the `constructor.super_` property.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     * const EventEmitter = require('events');\\n     *\\n     * function MyStream() {\\n     *   EventEmitter.call(this);\\n     * }\\n     *\\n     * util.inherits(MyStream, EventEmitter);\\n     *\\n     * MyStream.prototype.write = function(data) {\\n     *   this.emit('data', data);\\n     * };\\n     *\\n     * const stream = new MyStream();\\n     *\\n     * console.log(stream instanceof EventEmitter); // true\\n     * console.log(MyStream.super_ === EventEmitter); // true\\n     *\\n     * stream.on('data', (data) => {\\n     *   console.log(`Received data: \\\"${data}\\\"`);\\n     * });\\n     * stream.write('It works!'); // Received data: \\\"It works!\\\"\\n     * ```\\n     *\\n     * ES6 example using `class` and `extends`:\\n     *\\n     * ```js\\n     * const EventEmitter = require('events');\\n     *\\n     * class MyStream extends EventEmitter {\\n     *   write(data) {\\n     *     this.emit('data', data);\\n     *   }\\n     * }\\n     *\\n     * const stream = new MyStream();\\n     *\\n     * stream.on('data', (data) => {\\n     *   console.log(`Received data: \\\"${data}\\\"`);\\n     * });\\n     * stream.write('With ES6');\\n     * ```\\n     * @since v0.3.0\\n     * @deprecated Legacy: Use ES2015 class syntax and `extends` keyword instead.\\n     */\\n    export function inherits(constructor: unknown, superConstructor: unknown): void;\\n    export type DebugLoggerFunction = (msg: string, ...param: unknown[]) => void;\\n    export interface DebugLogger extends DebugLoggerFunction {\\n        enabled: boolean;\\n    }\\n    /**\\n     * The `util.debuglog()` method is used to create a function that conditionally\\n     * writes debug messages to `stderr` based on the existence of the `NODE_DEBUG`environment variable. If the `section` name appears within the value of that\\n     * environment variable, then the returned function operates similar to `console.error()`. If not, then the returned function is a no-op.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     * const debuglog = util.debuglog('foo');\\n     *\\n     * debuglog('hello from foo [%d]', 123);\\n     * ```\\n     *\\n     * If this program is run with `NODE_DEBUG=foo` in the environment, then\\n     * it will output something like:\\n     *\\n     * ```console\\n     * FOO 3245: hello from foo [123]\\n     * ```\\n     *\\n     * where `3245` is the process id. If it is not run with that\\n     * environment variable set, then it will not print anything.\\n     *\\n     * The `section` supports wildcard also:\\n     *\\n     * ```js\\n     * const util = require('util');\\n     * const debuglog = util.debuglog('foo-bar');\\n     *\\n     * debuglog('hi there, it\\\\'s foo-bar [%d]', 2333);\\n     * ```\\n     *\\n     * if it is run with `NODE_DEBUG=foo*` in the environment, then it will output\\n     * something like:\\n     *\\n     * ```console\\n     * FOO-BAR 3257: hi there, it's foo-bar [2333]\\n     * ```\\n     *\\n     * Multiple comma-separated `section` names may be specified in the `NODE_DEBUG`environment variable: `NODE_DEBUG=fs,net,tls`.\\n     *\\n     * The optional `callback` argument can be used to replace the logging function\\n     * with a different function that doesn't have any initialization or\\n     * unnecessary wrapping.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     * let debuglog = util.debuglog('internals', (debug) => {\\n     *   // Replace with a logging function that optimizes out\\n     *   // testing if the section is enabled\\n     *   debuglog = debug;\\n     * });\\n     * ```\\n     * @since v0.11.3\\n     * @param section A string identifying the portion of the application for which the `debuglog` function is being created.\\n     * @param callback A callback invoked the first time the logging function is called with a function argument that is a more optimized logging function.\\n     * @return The logging function\\n     */\\n    export function debuglog(section: string, callback?: (fn: DebugLoggerFunction) => void): DebugLogger;\\n    export const debug: typeof debuglog;\\n    /**\\n     * Returns `true` if the given `object` is a `Boolean`. Otherwise, returns `false`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * util.isBoolean(1);\\n     * // Returns: false\\n     * util.isBoolean(0);\\n     * // Returns: false\\n     * util.isBoolean(false);\\n     * // Returns: true\\n     * ```\\n     * @since v0.11.5\\n     * @deprecated Since v4.0.0 - Use `typeof value === 'boolean'` instead.\\n     */\\n    export function isBoolean(object: unknown): object is boolean;\\n    /**\\n     * Returns `true` if the given `object` is a `Buffer`. Otherwise, returns `false`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * util.isBuffer({ length: 0 });\\n     * // Returns: false\\n     * util.isBuffer([]);\\n     * // Returns: false\\n     * util.isBuffer(Buffer.from('hello world'));\\n     * // Returns: true\\n     * ```\\n     * @since v0.11.5\\n     * @deprecated Since v4.0.0 - Use `isBuffer` instead.\\n     */\\n    export function isBuffer(object: unknown): object is Buffer;\\n    /**\\n     * Returns `true` if the given `object` is a `Function`. Otherwise, returns`false`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * function Foo() {}\\n     * const Bar = () => {};\\n     *\\n     * util.isFunction({});\\n     * // Returns: false\\n     * util.isFunction(Foo);\\n     * // Returns: true\\n     * util.isFunction(Bar);\\n     * // Returns: true\\n     * ```\\n     * @since v0.11.5\\n     * @deprecated Since v4.0.0 - Use `typeof value === 'function'` instead.\\n     */\\n    export function isFunction(object: unknown): boolean;\\n    /**\\n     * Returns `true` if the given `object` is strictly `null`. Otherwise, returns`false`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * util.isNull(0);\\n     * // Returns: false\\n     * util.isNull(undefined);\\n     * // Returns: false\\n     * util.isNull(null);\\n     * // Returns: true\\n     * ```\\n     * @since v0.11.5\\n     * @deprecated Since v4.0.0 - Use `value === null` instead.\\n     */\\n    export function isNull(object: unknown): object is null;\\n    /**\\n     * Returns `true` if the given `object` is `null` or `undefined`. Otherwise,\\n     * returns `false`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * util.isNullOrUndefined(0);\\n     * // Returns: false\\n     * util.isNullOrUndefined(undefined);\\n     * // Returns: true\\n     * util.isNullOrUndefined(null);\\n     * // Returns: true\\n     * ```\\n     * @since v0.11.5\\n     * @deprecated Since v4.0.0 - Use `value === undefined || value === null` instead.\\n     */\\n    export function isNullOrUndefined(object: unknown): object is null | undefined;\\n    /**\\n     * Returns `true` if the given `object` is a `Number`. Otherwise, returns `false`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * util.isNumber(false);\\n     * // Returns: false\\n     * util.isNumber(Infinity);\\n     * // Returns: true\\n     * util.isNumber(0);\\n     * // Returns: true\\n     * util.isNumber(NaN);\\n     * // Returns: true\\n     * ```\\n     * @since v0.11.5\\n     * @deprecated Since v4.0.0 - Use `typeof value === 'number'` instead.\\n     */\\n    export function isNumber(object: unknown): object is number;\\n    /**\\n     * Returns `true` if the given `object` is strictly an `Object`**and** not a`Function` (even though functions are objects in JavaScript).\\n     * Otherwise, returns `false`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * util.isObject(5);\\n     * // Returns: false\\n     * util.isObject(null);\\n     * // Returns: false\\n     * util.isObject({});\\n     * // Returns: true\\n     * util.isObject(() => {});\\n     * // Returns: false\\n     * ```\\n     * @since v0.11.5\\n     * @deprecated Since v4.0.0 - Deprecated: Use `value !== null && typeof value === 'object'` instead.\\n     */\\n    export function isObject(object: unknown): boolean;\\n    /**\\n     * Returns `true` if the given `object` is a primitive type. Otherwise, returns`false`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * util.isPrimitive(5);\\n     * // Returns: true\\n     * util.isPrimitive('foo');\\n     * // Returns: true\\n     * util.isPrimitive(false);\\n     * // Returns: true\\n     * util.isPrimitive(null);\\n     * // Returns: true\\n     * util.isPrimitive(undefined);\\n     * // Returns: true\\n     * util.isPrimitive({});\\n     * // Returns: false\\n     * util.isPrimitive(() => {});\\n     * // Returns: false\\n     * util.isPrimitive(/^$/);\\n     * // Returns: false\\n     * util.isPrimitive(new Date());\\n     * // Returns: false\\n     * ```\\n     * @since v0.11.5\\n     * @deprecated Since v4.0.0 - Use `(typeof value !== 'object' && typeof value !== 'function') || value === null` instead.\\n     */\\n    export function isPrimitive(object: unknown): boolean;\\n    /**\\n     * Returns `true` if the given `object` is a `string`. Otherwise, returns `false`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * util.isString('');\\n     * // Returns: true\\n     * util.isString('foo');\\n     * // Returns: true\\n     * util.isString(String('foo'));\\n     * // Returns: true\\n     * util.isString(5);\\n     * // Returns: false\\n     * ```\\n     * @since v0.11.5\\n     * @deprecated Since v4.0.0 - Use `typeof value === 'string'` instead.\\n     */\\n    export function isString(object: unknown): object is string;\\n    /**\\n     * Returns `true` if the given `object` is a `Symbol`. Otherwise, returns `false`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * util.isSymbol(5);\\n     * // Returns: false\\n     * util.isSymbol('foo');\\n     * // Returns: false\\n     * util.isSymbol(Symbol('foo'));\\n     * // Returns: true\\n     * ```\\n     * @since v0.11.5\\n     * @deprecated Since v4.0.0 - Use `typeof value === 'symbol'` instead.\\n     */\\n    export function isSymbol(object: unknown): object is symbol;\\n    /**\\n     * Returns `true` if the given `object` is `undefined`. Otherwise, returns `false`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * const foo = undefined;\\n     * util.isUndefined(5);\\n     * // Returns: false\\n     * util.isUndefined(foo);\\n     * // Returns: true\\n     * util.isUndefined(null);\\n     * // Returns: false\\n     * ```\\n     * @since v0.11.5\\n     * @deprecated Since v4.0.0 - Use `value === undefined` instead.\\n     */\\n    export function isUndefined(object: unknown): object is undefined;\\n    /**\\n     * The `util.deprecate()` method wraps `fn` (which may be a function or class) in\\n     * such a way that it is marked as deprecated.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * exports.obsoleteFunction = util.deprecate(() => {\\n     *   // Do something here.\\n     * }, 'obsoleteFunction() is deprecated. Use newShinyFunction() instead.');\\n     * ```\\n     *\\n     * When called, `util.deprecate()` will return a function that will emit a`DeprecationWarning` using the `'warning'` event. The warning will\\n     * be emitted and printed to `stderr` the first time the returned function is\\n     * called. After the warning is emitted, the wrapped function is called without\\n     * emitting a warning.\\n     *\\n     * If the same optional `code` is supplied in multiple calls to `util.deprecate()`,\\n     * the warning will be emitted only once for that `code`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * const fn1 = util.deprecate(someFunction, someMessage, 'DEP0001');\\n     * const fn2 = util.deprecate(someOtherFunction, someOtherMessage, 'DEP0001');\\n     * fn1(); // Emits a deprecation warning with code DEP0001\\n     * fn2(); // Does not emit a deprecation warning because it has the same code\\n     * ```\\n     *\\n     * If either the `--no-deprecation` or `--no-warnings` command-line flags are\\n     * used, or if the `process.noDeprecation` property is set to `true`_prior_ to\\n     * the first deprecation warning, the `util.deprecate()` method does nothing.\\n     *\\n     * If the `--trace-deprecation` or `--trace-warnings` command-line flags are set,\\n     * or the `process.traceDeprecation` property is set to `true`, a warning and a\\n     * stack trace are printed to `stderr` the first time the deprecated function is\\n     * called.\\n     *\\n     * If the `--throw-deprecation` command-line flag is set, or the`process.throwDeprecation` property is set to `true`, then an exception will be\\n     * thrown when the deprecated function is called.\\n     *\\n     * The `--throw-deprecation` command-line flag and `process.throwDeprecation`property take precedence over `--trace-deprecation` and`process.traceDeprecation`.\\n     * @since v0.8.0\\n     * @param fn The function that is being deprecated.\\n     * @param msg A warning message to display when the deprecated function is invoked.\\n     * @param code A deprecation code. See the `list of deprecated APIs` for a list of codes.\\n     * @return The deprecated function wrapped to emit a warning.\\n     */\\n    export function deprecate<T extends Function>(fn: T, msg: string, code?: string): T;\\n    /**\\n     * Returns `true` if there is deep strict equality between `val1` and `val2`.\\n     * Otherwise, returns `false`.\\n     *\\n     * See `assert.deepStrictEqual()` for more information about deep strict\\n     * equality.\\n     * @since v9.0.0\\n     */\\n    export function isDeepStrictEqual(val1: unknown, val2: unknown): boolean;\\n    /**\\n     * Returns `str` with any ANSI escape codes removed.\\n     *\\n     * ```js\\n     * console.log(util.stripVTControlCharacters('\\\\u001B[4mvalue\\\\u001B[0m'));\\n     * // Prints \\\"value\\\"\\n     * ```\\n     * @since v16.11.0\\n     */\\n    export function stripVTControlCharacters(str: string): string;\\n    /**\\n     * Takes an `async` function (or a function that returns a `Promise`) and returns a\\n     * function following the error-first callback style, i.e. taking\\n     * an `(err, value) => ...` callback as the last argument. In the callback, the\\n     * first argument will be the rejection reason (or `null` if the `Promise`resolved), and the second argument will be the resolved value.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * async function fn() {\\n     *   return 'hello world';\\n     * }\\n     * const callbackFunction = util.callbackify(fn);\\n     *\\n     * callbackFunction((err, ret) => {\\n     *   if (err) throw err;\\n     *   console.log(ret);\\n     * });\\n     * ```\\n     *\\n     * Will print:\\n     *\\n     * ```text\\n     * hello world\\n     * ```\\n     *\\n     * The callback is executed asynchronously, and will have a limited stack trace.\\n     * If the callback throws, the process will emit an `'uncaughtException'` event, and if not handled will exit.\\n     *\\n     * Since `null` has a special meaning as the first argument to a callback, if a\\n     * wrapped function rejects a `Promise` with a falsy value as a reason, the value\\n     * is wrapped in an `Error` with the original value stored in a field named`reason`.\\n     *\\n     * ```js\\n     * function fn() {\\n     *   return Promise.reject(null);\\n     * }\\n     * const callbackFunction = util.callbackify(fn);\\n     *\\n     * callbackFunction((err, ret) => {\\n     *   // When the Promise was rejected with `null` it is wrapped with an Error and\\n     *   // the original value is stored in `reason`.\\n     *   err &#x26;&#x26; Object.hasOwn(err, 'reason') &#x26;&#x26; err.reason === null;  // true\\n     * });\\n     * ```\\n     * @since v8.2.0\\n     * @param fn An `async` function\\n     * @return a callback style function\\n     */\\n    export function callbackify(fn: () => Promise<void>): (callback: (err: NodeJS.ErrnoException) => void) => void;\\n    export function callbackify<TResult>(fn: () => Promise<TResult>): (callback: (err: NodeJS.ErrnoException, result: TResult) => void) => void;\\n    export function callbackify<T1>(fn: (arg1: T1) => Promise<void>): (arg1: T1, callback: (err: NodeJS.ErrnoException) => void) => void;\\n    export function callbackify<T1, TResult>(fn: (arg1: T1) => Promise<TResult>): (arg1: T1, callback: (err: NodeJS.ErrnoException, result: TResult) => void) => void;\\n    export function callbackify<T1, T2>(fn: (arg1: T1, arg2: T2) => Promise<void>): (arg1: T1, arg2: T2, callback: (err: NodeJS.ErrnoException) => void) => void;\\n    export function callbackify<T1, T2, TResult>(fn: (arg1: T1, arg2: T2) => Promise<TResult>): (arg1: T1, arg2: T2, callback: (err: NodeJS.ErrnoException | null, result: TResult) => void) => void;\\n    export function callbackify<T1, T2, T3>(fn: (arg1: T1, arg2: T2, arg3: T3) => Promise<void>): (arg1: T1, arg2: T2, arg3: T3, callback: (err: NodeJS.ErrnoException) => void) => void;\\n    export function callbackify<T1, T2, T3, TResult>(\\n        fn: (arg1: T1, arg2: T2, arg3: T3) => Promise<TResult>\\n    ): (arg1: T1, arg2: T2, arg3: T3, callback: (err: NodeJS.ErrnoException | null, result: TResult) => void) => void;\\n    export function callbackify<T1, T2, T3, T4>(\\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => Promise<void>\\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, callback: (err: NodeJS.ErrnoException) => void) => void;\\n    export function callbackify<T1, T2, T3, T4, TResult>(\\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => Promise<TResult>\\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, callback: (err: NodeJS.ErrnoException | null, result: TResult) => void) => void;\\n    export function callbackify<T1, T2, T3, T4, T5>(\\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => Promise<void>\\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, callback: (err: NodeJS.ErrnoException) => void) => void;\\n    export function callbackify<T1, T2, T3, T4, T5, TResult>(\\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => Promise<TResult>\\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, callback: (err: NodeJS.ErrnoException | null, result: TResult) => void) => void;\\n    export function callbackify<T1, T2, T3, T4, T5, T6>(\\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => Promise<void>\\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, callback: (err: NodeJS.ErrnoException) => void) => void;\\n    export function callbackify<T1, T2, T3, T4, T5, T6, TResult>(\\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => Promise<TResult>\\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, callback: (err: NodeJS.ErrnoException | null, result: TResult) => void) => void;\\n    export interface CustomPromisifyLegacy<TCustom extends Function> extends Function {\\n        __promisify__: TCustom;\\n    }\\n    export interface CustomPromisifySymbol<TCustom extends Function> extends Function {\\n        [promisify.custom]: TCustom;\\n    }\\n    export type CustomPromisify<TCustom extends Function> = CustomPromisifySymbol<TCustom> | CustomPromisifyLegacy<TCustom>;\\n    /**\\n     * Takes a function following the common error-first callback style, i.e. taking\\n     * an `(err, value) => ...` callback as the last argument, and returns a version\\n     * that returns promises.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     * const fs = require('fs');\\n     *\\n     * const stat = util.promisify(fs.stat);\\n     * stat('.').then((stats) => {\\n     *   // Do something with `stats`\\n     * }).catch((error) => {\\n     *   // Handle the error.\\n     * });\\n     * ```\\n     *\\n     * Or, equivalently using `async function`s:\\n     *\\n     * ```js\\n     * const util = require('util');\\n     * const fs = require('fs');\\n     *\\n     * const stat = util.promisify(fs.stat);\\n     *\\n     * async function callStat() {\\n     *   const stats = await stat('.');\\n     *   console.log(`This directory is owned by ${stats.uid}`);\\n     * }\\n     * ```\\n     *\\n     * If there is an `original[util.promisify.custom]` property present, `promisify`will return its value, see `Custom promisified functions`.\\n     *\\n     * `promisify()` assumes that `original` is a function taking a callback as its\\n     * final argument in all cases. If `original` is not a function, `promisify()`will throw an error. If `original` is a function but its last argument is not\\n     * an error-first callback, it will still be passed an error-first\\n     * callback as its last argument.\\n     *\\n     * Using `promisify()` on class methods or other methods that use `this` may not\\n     * work as expected unless handled specially:\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * class Foo {\\n     *   constructor() {\\n     *     this.a = 42;\\n     *   }\\n     *\\n     *   bar(callback) {\\n     *     callback(null, this.a);\\n     *   }\\n     * }\\n     *\\n     * const foo = new Foo();\\n     *\\n     * const naiveBar = util.promisify(foo.bar);\\n     * // TypeError: Cannot read property 'a' of undefined\\n     * // naiveBar().then(a => console.log(a));\\n     *\\n     * naiveBar.call(foo).then((a) => console.log(a)); // '42'\\n     *\\n     * const bindBar = naiveBar.bind(foo);\\n     * bindBar().then((a) => console.log(a)); // '42'\\n     * ```\\n     * @since v8.0.0\\n     */\\n    export function promisify<TCustom extends Function>(fn: CustomPromisify<TCustom>): TCustom;\\n    export function promisify<TResult>(fn: (callback: (err: any, result: TResult) => void) => void): () => Promise<TResult>;\\n    export function promisify(fn: (callback: (err?: any) => void) => void): () => Promise<void>;\\n    export function promisify<T1, TResult>(fn: (arg1: T1, callback: (err: any, result: TResult) => void) => void): (arg1: T1) => Promise<TResult>;\\n    export function promisify<T1>(fn: (arg1: T1, callback: (err?: any) => void) => void): (arg1: T1) => Promise<void>;\\n    export function promisify<T1, T2, TResult>(fn: (arg1: T1, arg2: T2, callback: (err: any, result: TResult) => void) => void): (arg1: T1, arg2: T2) => Promise<TResult>;\\n    export function promisify<T1, T2>(fn: (arg1: T1, arg2: T2, callback: (err?: any) => void) => void): (arg1: T1, arg2: T2) => Promise<void>;\\n    export function promisify<T1, T2, T3, TResult>(fn: (arg1: T1, arg2: T2, arg3: T3, callback: (err: any, result: TResult) => void) => void): (arg1: T1, arg2: T2, arg3: T3) => Promise<TResult>;\\n    export function promisify<T1, T2, T3>(fn: (arg1: T1, arg2: T2, arg3: T3, callback: (err?: any) => void) => void): (arg1: T1, arg2: T2, arg3: T3) => Promise<void>;\\n    export function promisify<T1, T2, T3, T4, TResult>(\\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, callback: (err: any, result: TResult) => void) => void\\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => Promise<TResult>;\\n    export function promisify<T1, T2, T3, T4>(fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, callback: (err?: any) => void) => void): (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => Promise<void>;\\n    export function promisify<T1, T2, T3, T4, T5, TResult>(\\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, callback: (err: any, result: TResult) => void) => void\\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => Promise<TResult>;\\n    export function promisify<T1, T2, T3, T4, T5>(\\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, callback: (err?: any) => void) => void\\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => Promise<void>;\\n    export function promisify(fn: Function): Function;\\n    export namespace promisify {\\n        /**\\n         * That can be used to declare custom promisified variants of functions.\\n         */\\n        const custom: unique symbol;\\n    }\\n    /**\\n     * An implementation of the [WHATWG Encoding Standard](https://encoding.spec.whatwg.org/) `TextDecoder` API.\\n     *\\n     * ```js\\n     * const decoder = new TextDecoder();\\n     * const u8arr = new Uint8Array([72, 101, 108, 108, 111]);\\n     * console.log(decoder.decode(u8arr)); // Hello\\n     * ```\\n     * @since v8.3.0\\n     */\\n    export class TextDecoder {\\n        /**\\n         * The encoding supported by the `TextDecoder` instance.\\n         */\\n        readonly encoding: string;\\n        /**\\n         * The value will be `true` if decoding errors result in a `TypeError` being\\n         * thrown.\\n         */\\n        readonly fatal: boolean;\\n        /**\\n         * The value will be `true` if the decoding result will include the byte order\\n         * mark.\\n         */\\n        readonly ignoreBOM: boolean;\\n        constructor(\\n            encoding?: string,\\n            options?: {\\n                fatal?: boolean | undefined;\\n                ignoreBOM?: boolean | undefined;\\n            }\\n        );\\n        /**\\n         * Decodes the `input` and returns a string. If `options.stream` is `true`, any\\n         * incomplete byte sequences occurring at the end of the `input` are buffered\\n         * internally and emitted after the next call to `textDecoder.decode()`.\\n         *\\n         * If `textDecoder.fatal` is `true`, decoding errors that occur will result in a`TypeError` being thrown.\\n         * @param input An `ArrayBuffer`, `DataView` or `TypedArray` instance containing the encoded data.\\n         */\\n        decode(\\n            input?: NodeJS.ArrayBufferView | ArrayBuffer | null,\\n            options?: {\\n                stream?: boolean | undefined;\\n            }\\n        ): string;\\n    }\\n    export interface EncodeIntoResult {\\n        /**\\n         * The read Unicode code units of input.\\n         */\\n        read: number;\\n        /**\\n         * The written UTF-8 bytes of output.\\n         */\\n        written: number;\\n    }\\n    export { types };\\n\\n    //// TextEncoder/Decoder\\n    /**\\n     * An implementation of the [WHATWG Encoding Standard](https://encoding.spec.whatwg.org/) `TextEncoder` API. All\\n     * instances of `TextEncoder` only support UTF-8 encoding.\\n     *\\n     * ```js\\n     * const encoder = new TextEncoder();\\n     * const uint8array = encoder.encode('this is some data');\\n     * ```\\n     *\\n     * The `TextEncoder` class is also available on the global object.\\n     * @since v8.3.0\\n     */\\n    export class TextEncoder {\\n        /**\\n         * The encoding supported by the `TextEncoder` instance. Always set to `'utf-8'`.\\n         */\\n        readonly encoding: string;\\n        /**\\n         * UTF-8 encodes the `input` string and returns a `Uint8Array` containing the\\n         * encoded bytes.\\n         * @param [input='an empty string'] The text to encode.\\n         */\\n        encode(input?: string): Uint8Array;\\n        /**\\n         * UTF-8 encodes the `src` string to the `dest` Uint8Array and returns an object\\n         * containing the read Unicode code units and written UTF-8 bytes.\\n         *\\n         * ```js\\n         * const encoder = new TextEncoder();\\n         * const src = 'this is some data';\\n         * const dest = new Uint8Array(10);\\n         * const { read, written } = encoder.encodeInto(src, dest);\\n         * ```\\n         * @param src The text to encode.\\n         * @param dest The array to hold the encode result.\\n         */\\n        encodeInto(src: string, dest: Uint8Array): EncodeIntoResult;\\n    }\\n\\n    import { TextDecoder as _TextDecoder, TextEncoder as _TextEncoder } from 'util';\\n    global {\\n        /**\\n         * `TextDecoder` class is a global reference for `require('util').TextDecoder`\\n         * https://nodejs.org/api/globals.html#textdecoder\\n         * @since v11.0.0\\n         */\\n         var TextDecoder: typeof globalThis extends {\\n            onmessage: any;\\n            TextDecoder: infer TextDecoder;\\n        }\\n            ? TextDecoder\\n            : typeof _TextDecoder;\\n\\n        /**\\n         * `TextEncoder` class is a global reference for `require('util').TextEncoder`\\n         * https://nodejs.org/api/globals.html#textencoder\\n         * @since v11.0.0\\n         */\\n         var TextEncoder: typeof globalThis extends {\\n            onmessage: any;\\n            TextEncoder: infer TextEncoder;\\n        }\\n            ? TextEncoder\\n            : typeof _TextEncoder;\\n    }\\n\\n    //// parseArgs\\n    /**\\n     * Provides a high-level API for command-line argument parsing. Takes a\\n     * specification for the expected arguments and returns a structured object\\n     * with the parsed values and positionals.\\n     *\\n     * `config` provides arguments for parsing and configures the parser. It\\n     * supports the following properties:\\n     *\\n     *   - `args` The array of argument strings. **Default:** `process.argv` with\\n     *     `execPath` and `filename` removed.\\n     *   - `options` Arguments known to the parser. Keys of `options` are the long\\n     *     names of options and values are objects accepting the following properties:\\n     *\\n     *     - `type` Type of argument, which must be either `boolean` (for options\\n     *        which do not take values) or `string` (for options which do).\\n     *     - `multiple` Whether this option can be provided multiple\\n     *       times. If `true`, all values will be collected in an array. If\\n     *       `false`, values for the option are last-wins. **Default:** `false`.\\n     *     - `short` A single character alias for the option.\\n     *     - `default` The default option value when it is not set by args. It\\n     *       must be of the same type as the `type` property. When `multiple`\\n     *       is `true`, it must be an array.\\n     *\\n     *   - `strict`: Whether an error should be thrown when unknown arguments\\n     *     are encountered, or when arguments are passed that do not match the\\n     *     `type` configured in `options`. **Default:** `true`.\\n     *   - `allowPositionals`: Whether this command accepts positional arguments.\\n     *     **Default:** `false` if `strict` is `true`, otherwise `true`.\\n     *   - `tokens`: Whether tokens {boolean} Return the parsed tokens. This is useful\\n     *     for extending the built-in behavior, from adding additional checks through\\n     *     to reprocessing the tokens in different ways.\\n     *     **Default:** `false`.\\n     *\\n     * @returns The parsed command line arguments:\\n     *\\n     *   - `values` A mapping of parsed option names with their string\\n     *     or boolean values.\\n     *   - `positionals` Positional arguments.\\n     *   - `tokens` Detailed parse information (only if `tokens` was specified).\\n     *\\n     */\\n    export function parseArgs<T extends ParseArgsConfig>(config?: T): ParsedResults<T>;\\n\\n    interface ParseArgsOptionConfig {\\n        /**\\n         * Type of argument.\\n         */\\n        type: 'string' | 'boolean';\\n        /**\\n         * Whether this option can be provided multiple times.\\n         * If `true`, all values will be collected in an array.\\n         * If `false`, values for the option are last-wins.\\n         * @default false.\\n         */\\n        multiple?: boolean | undefined;\\n        /**\\n         * A single character alias for the option.\\n         */\\n        short?: string | undefined;\\n        /**\\n         * The default option value when it is not set by args.\\n         * It must be of the same type as the the `type` property.\\n         * When `multiple` is `true`, it must be an array.\\n         * @since v18.11.0\\n         */\\n        default?: string | boolean | string[] | boolean[] | undefined;\\n    }\\n\\n    interface ParseArgsOptionsConfig {\\n        [longOption: string]: ParseArgsOptionConfig;\\n    }\\n\\n    export interface ParseArgsConfig {\\n        /**\\n         * Array of argument strings.\\n         */\\n        args?: string[] | undefined;\\n        /**\\n         * Used to describe arguments known to the parser.\\n         */\\n        options?: ParseArgsOptionsConfig | undefined;\\n        /**\\n         * Should an error be thrown when unknown arguments are encountered,\\n         * or when arguments are passed that do not match the `type` configured in `options`.\\n         * @default true\\n         */\\n        strict?: boolean | undefined;\\n        /**\\n         * Whether this command accepts positional arguments.\\n         */\\n        allowPositionals?: boolean | undefined;\\n        /**\\n         * Return the parsed tokens. This is useful for extending the built-in behavior,\\n         * from adding additional checks through to reprocessing the tokens in different ways.\\n         * @default false\\n         */\\n        tokens?: boolean | undefined;\\n    }\\n\\n    /*\\n    IfDefaultsTrue and IfDefaultsFalse are helpers to handle default values for missing boolean properties.\\n    TypeScript does not have exact types for objects: https://github.com/microsoft/TypeScript/issues/12936\\n    This means it is impossible to distinguish between \\\"field X is definitely not present\\\" and \\\"field X may or may not be present\\\".\\n    But we expect users to generally provide their config inline or `as const`, which means TS will always know whether a given field is present.\\n    So this helper treats \\\"not definitely present\\\" (i.e., not `extends boolean`) as being \\\"definitely not present\\\", i.e. it should have its default value.\\n    This is technically incorrect but is a much nicer UX for the common case.\\n    The IfDefaultsTrue version is for things which default to true; the IfDefaultsFalse version is for things which default to false.\\n    */\\n    type IfDefaultsTrue<T, IfTrue, IfFalse> = T extends true\\n        ? IfTrue\\n        : T extends false\\n        ? IfFalse\\n        : IfTrue;\\n\\n    // we put the `extends false` condition first here because `undefined` compares like `any` when `strictNullChecks: false`\\n    type IfDefaultsFalse<T, IfTrue, IfFalse> = T extends false\\n        ? IfFalse\\n        : T extends true\\n        ? IfTrue\\n        : IfFalse;\\n\\n    type ExtractOptionValue<T extends ParseArgsConfig, O extends ParseArgsOptionConfig> = IfDefaultsTrue<\\n        T['strict'],\\n        O['type'] extends 'string' ? string : O['type'] extends 'boolean' ? boolean : string | boolean,\\n        string | boolean\\n    >;\\n\\n    type ParsedValues<T extends ParseArgsConfig> =\\n        & IfDefaultsTrue<T['strict'], unknown, { [longOption: string]: undefined | string | boolean }>\\n        & (T['options'] extends ParseArgsOptionsConfig\\n            ? {\\n                -readonly [LongOption in keyof T['options']]: IfDefaultsFalse<\\n                    T['options'][LongOption]['multiple'],\\n                    undefined | Array<ExtractOptionValue<T, T['options'][LongOption]>>,\\n                    undefined | ExtractOptionValue<T, T['options'][LongOption]>\\n                >;\\n            }\\n            : {});\\n\\n    type ParsedPositionals<T extends ParseArgsConfig> = IfDefaultsTrue<\\n        T['strict'],\\n        IfDefaultsFalse<T['allowPositionals'], string[], []>,\\n        IfDefaultsTrue<T['allowPositionals'], string[], []>\\n    >;\\n\\n    type PreciseTokenForOptions<\\n        K extends string,\\n        O extends ParseArgsOptionConfig,\\n    > = O['type'] extends 'string'\\n        ? {\\n              kind: 'option';\\n              index: number;\\n              name: K;\\n              rawName: string;\\n              value: string;\\n              inlineValue: boolean;\\n          }\\n        : O['type'] extends 'boolean'\\n        ? {\\n              kind: 'option';\\n              index: number;\\n              name: K;\\n              rawName: string;\\n              value: undefined;\\n              inlineValue: undefined;\\n          }\\n        : OptionToken & { name: K };\\n\\n    type TokenForOptions<\\n        T extends ParseArgsConfig,\\n        K extends keyof T['options'] = keyof T['options'],\\n    > = K extends unknown\\n        ? T['options'] extends ParseArgsOptionsConfig\\n            ? PreciseTokenForOptions<K & string, T['options'][K]>\\n            : OptionToken\\n        : never;\\n\\n    type ParsedOptionToken<T extends ParseArgsConfig> = IfDefaultsTrue<T['strict'], TokenForOptions<T>, OptionToken>;\\n\\n    type ParsedPositionalToken<T extends ParseArgsConfig> = IfDefaultsTrue<\\n        T['strict'],\\n        IfDefaultsFalse<T['allowPositionals'], { kind: 'positional'; index: number; value: string }, never>,\\n        IfDefaultsTrue<T['allowPositionals'], { kind: 'positional'; index: number; value: string }, never>\\n    >;\\n\\n    type ParsedTokens<T extends ParseArgsConfig> = Array<\\n        ParsedOptionToken<T> | ParsedPositionalToken<T> | { kind: 'option-terminator'; index: number }\\n    >;\\n\\n    type PreciseParsedResults<T extends ParseArgsConfig> = IfDefaultsFalse<\\n        T['tokens'],\\n        {\\n            values: ParsedValues<T>;\\n            positionals: ParsedPositionals<T>;\\n            tokens: ParsedTokens<T>;\\n        },\\n        {\\n            values: ParsedValues<T>;\\n            positionals: ParsedPositionals<T>;\\n        }\\n    >;\\n\\n    type OptionToken =\\n        | { kind: 'option'; index: number; name: string; rawName: string; value: string; inlineValue: boolean }\\n        | {\\n              kind: 'option';\\n              index: number;\\n              name: string;\\n              rawName: string;\\n              value: undefined;\\n              inlineValue: undefined;\\n          };\\n\\n    type Token =\\n        | OptionToken\\n        | { kind: 'positional'; index: number; value: string }\\n        | { kind: 'option-terminator'; index: number };\\n\\n    // If ParseArgsConfig extends T, then the user passed config constructed elsewhere.\\n    // So we can't rely on the `\\\"not definitely present\\\" implies \\\"definitely not present\\\"` assumption mentioned above.\\n    type ParsedResults<T extends ParseArgsConfig> = ParseArgsConfig extends T\\n        ? {\\n              values: { [longOption: string]: undefined | string | boolean | Array<string | boolean> };\\n              positionals: string[];\\n              tokens?: Token[];\\n          }\\n        : PreciseParsedResults<T>;\\n\\n    /**\\n     * @since v18.13.0\\n     */\\n    export class MIMEType {\\n        /**\\n         * Creates a new MIMEType object by parsing the input.\\n         *\\n         * A `TypeError` will be thrown if the `input` is not a valid MIME.\\n         * Note that an effort will be made to coerce the given values into strings.\\n         * @param input The input MIME to parse.\\n         */\\n        constructor(input: string | { toString: () => string });\\n\\n        /**\\n         * Gets and sets the type portion of the MIME.\\n         */\\n        type: string;\\n\\n        /**\\n         * Gets and sets the subtype portion of the MIME.\\n         */\\n        subtype: string;\\n\\n        /**\\n         * Gets the essence of the MIME.\\n         *\\n         * Use `mime.type` or `mime.subtype` to alter the MIME.\\n         */\\n        readonly essence: string;\\n\\n        /**\\n         * Gets the `MIMEParams` object representing the parameters of the MIME.\\n         */\\n        readonly params: MIMEParams;\\n\\n        /**\\n         * Returns the serialized MIME.\\n         *\\n         * Because of the need for standard compliance, this method\\n         * does not allow users to customize the serialization process of the MIME.\\n         */\\n        toString(): string;\\n    }\\n\\n    /**\\n     * @since v18.13.0\\n     */\\n    export class MIMEParams {\\n        /**\\n         * Remove all name-value pairs whose name is `name`.\\n         */\\n        delete(name: string): void;\\n        /**\\n         * Returns an iterator over each of the name-value pairs in the parameters.\\n         */\\n        entries(): IterableIterator<[name: string, value: string]>;\\n        /**\\n         * Returns the value of the first name-value pair whose name is `name`.\\n         * If there are no such pairs, `null` is returned.\\n         */\\n        get(name: string): string | null;\\n        /**\\n         * Returns `true` if there is at least one name-value pair whose name is `name`.\\n         */\\n        has(name: string): boolean;\\n        /**\\n         * Returns an iterator over the names of each name-value pair.\\n         */\\n        keys(): IterableIterator<string>;\\n        /**\\n         * Sets the value in the `MIMEParams` object associated with `name` to `value`.\\n         * If there are any pre-existing name-value pairs whose names are `name`,\\n         * set the first such pair's value to `value`.\\n         */\\n        set(name: string, value: string): void;\\n        /**\\n         * Returns an iterator over the values of each name-value pair.\\n         */\\n        values(): IterableIterator<string>;\\n        /**\\n         * Returns an iterator over each of the name-value pairs in the parameters.\\n         */\\n        [Symbol.iterator]: typeof MIMEParams.prototype.entries;\\n    }\\n}\\ndeclare module 'util/types' {\\n    export * from 'util/types';\\n}\\ndeclare module 'util/types' {\\n    import { KeyObject, webcrypto } from 'node:crypto';\\n    /**\\n     * Returns `true` if the value is a built-in [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) or\\n     * [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) instance.\\n     *\\n     * See also `util.types.isArrayBuffer()` and `util.types.isSharedArrayBuffer()`.\\n     *\\n     * ```js\\n     * util.types.isAnyArrayBuffer(new ArrayBuffer());  // Returns true\\n     * util.types.isAnyArrayBuffer(new SharedArrayBuffer());  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isAnyArrayBuffer(object: unknown): object is ArrayBufferLike;\\n    /**\\n     * Returns `true` if the value is an `arguments` object.\\n     *\\n     * ```js\\n     * function foo() {\\n     *   util.types.isArgumentsObject(arguments);  // Returns true\\n     * }\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isArgumentsObject(object: unknown): object is IArguments;\\n    /**\\n     * Returns `true` if the value is a built-in [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) instance.\\n     * This does _not_ include [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) instances. Usually, it is\\n     * desirable to test for both; See `util.types.isAnyArrayBuffer()` for that.\\n     *\\n     * ```js\\n     * util.types.isArrayBuffer(new ArrayBuffer());  // Returns true\\n     * util.types.isArrayBuffer(new SharedArrayBuffer());  // Returns false\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isArrayBuffer(object: unknown): object is ArrayBuffer;\\n    /**\\n     * Returns `true` if the value is an instance of one of the [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) views, such as typed\\n     * array objects or [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView). Equivalent to\\n     * [`ArrayBuffer.isView()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/isView).\\n     *\\n     * ```js\\n     * util.types.isArrayBufferView(new Int8Array());  // true\\n     * util.types.isArrayBufferView(Buffer.from('hello world')); // true\\n     * util.types.isArrayBufferView(new DataView(new ArrayBuffer(16)));  // true\\n     * util.types.isArrayBufferView(new ArrayBuffer());  // false\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isArrayBufferView(object: unknown): object is NodeJS.ArrayBufferView;\\n    /**\\n     * Returns `true` if the value is an [async function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function).\\n     * This only reports back what the JavaScript engine is seeing;\\n     * in particular, the return value may not match the original source code if\\n     * a transpilation tool was used.\\n     *\\n     * ```js\\n     * util.types.isAsyncFunction(function foo() {});  // Returns false\\n     * util.types.isAsyncFunction(async function foo() {});  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isAsyncFunction(object: unknown): boolean;\\n    /**\\n     * Returns `true` if the value is a `BigInt64Array` instance.\\n     *\\n     * ```js\\n     * util.types.isBigInt64Array(new BigInt64Array());   // Returns true\\n     * util.types.isBigInt64Array(new BigUint64Array());  // Returns false\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isBigInt64Array(value: unknown): value is BigInt64Array;\\n    /**\\n     * Returns `true` if the value is a `BigUint64Array` instance.\\n     *\\n     * ```js\\n     * util.types.isBigUint64Array(new BigInt64Array());   // Returns false\\n     * util.types.isBigUint64Array(new BigUint64Array());  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isBigUint64Array(value: unknown): value is BigUint64Array;\\n    /**\\n     * Returns `true` if the value is a boolean object, e.g. created\\n     * by `new Boolean()`.\\n     *\\n     * ```js\\n     * util.types.isBooleanObject(false);  // Returns false\\n     * util.types.isBooleanObject(true);   // Returns false\\n     * util.types.isBooleanObject(new Boolean(false)); // Returns true\\n     * util.types.isBooleanObject(new Boolean(true));  // Returns true\\n     * util.types.isBooleanObject(Boolean(false)); // Returns false\\n     * util.types.isBooleanObject(Boolean(true));  // Returns false\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isBooleanObject(object: unknown): object is Boolean;\\n    /**\\n     * Returns `true` if the value is any boxed primitive object, e.g. created\\n     * by `new Boolean()`, `new String()` or `Object(Symbol())`.\\n     *\\n     * For example:\\n     *\\n     * ```js\\n     * util.types.isBoxedPrimitive(false); // Returns false\\n     * util.types.isBoxedPrimitive(new Boolean(false)); // Returns true\\n     * util.types.isBoxedPrimitive(Symbol('foo')); // Returns false\\n     * util.types.isBoxedPrimitive(Object(Symbol('foo'))); // Returns true\\n     * util.types.isBoxedPrimitive(Object(BigInt(5))); // Returns true\\n     * ```\\n     * @since v10.11.0\\n     */\\n    function isBoxedPrimitive(object: unknown): object is String | Number | BigInt | Boolean | Symbol;\\n    /**\\n     * Returns `true` if the value is a built-in [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instance.\\n     *\\n     * ```js\\n     * const ab = new ArrayBuffer(20);\\n     * util.types.isDataView(new DataView(ab));  // Returns true\\n     * util.types.isDataView(new Float64Array());  // Returns false\\n     * ```\\n     *\\n     * See also [`ArrayBuffer.isView()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/isView).\\n     * @since v10.0.0\\n     */\\n    function isDataView(object: unknown): object is DataView;\\n    /**\\n     * Returns `true` if the value is a built-in [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instance.\\n     *\\n     * ```js\\n     * util.types.isDate(new Date());  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isDate(object: unknown): object is Date;\\n    /**\\n     * Returns `true` if the value is a native `External` value.\\n     *\\n     * A native `External` value is a special type of object that contains a\\n     * raw C++ pointer (`void*`) for access from native code, and has no other\\n     * properties. Such objects are created either by Node.js internals or native\\n     * addons. In JavaScript, they are [frozen](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze) objects with a`null` prototype.\\n     *\\n     * ```c\\n     * #include <js_native_api.h>\\n     * #include <stdlib.h>\\n     * napi_value result;\\n     * static napi_value MyNapi(napi_env env, napi_callback_info info) {\\n     *   int* raw = (int*) malloc(1024);\\n     *   napi_status status = napi_create_external(env, (void*) raw, NULL, NULL, &#x26;result);\\n     *   if (status != napi_ok) {\\n     *     napi_throw_error(env, NULL, \\\"napi_create_external failed\\\");\\n     *     return NULL;\\n     *   }\\n     *   return result;\\n     * }\\n     * ...\\n     * DECLARE_NAPI_PROPERTY(\\\"myNapi\\\", MyNapi)\\n     * ...\\n     * ```\\n     *\\n     * ```js\\n     * const native = require('napi_addon.node');\\n     * const data = native.myNapi();\\n     * util.types.isExternal(data); // returns true\\n     * util.types.isExternal(0); // returns false\\n     * util.types.isExternal(new String('foo')); // returns false\\n     * ```\\n     *\\n     * For further information on `napi_create_external`, refer to `napi_create_external()`.\\n     * @since v10.0.0\\n     */\\n    function isExternal(object: unknown): boolean;\\n    /**\\n     * Returns `true` if the value is a built-in [`Float32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array) instance.\\n     *\\n     * ```js\\n     * util.types.isFloat32Array(new ArrayBuffer());  // Returns false\\n     * util.types.isFloat32Array(new Float32Array());  // Returns true\\n     * util.types.isFloat32Array(new Float64Array());  // Returns false\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isFloat32Array(object: unknown): object is Float32Array;\\n    /**\\n     * Returns `true` if the value is a built-in [`Float64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array) instance.\\n     *\\n     * ```js\\n     * util.types.isFloat64Array(new ArrayBuffer());  // Returns false\\n     * util.types.isFloat64Array(new Uint8Array());  // Returns false\\n     * util.types.isFloat64Array(new Float64Array());  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isFloat64Array(object: unknown): object is Float64Array;\\n    /**\\n     * Returns `true` if the value is a generator function.\\n     * This only reports back what the JavaScript engine is seeing;\\n     * in particular, the return value may not match the original source code if\\n     * a transpilation tool was used.\\n     *\\n     * ```js\\n     * util.types.isGeneratorFunction(function foo() {});  // Returns false\\n     * util.types.isGeneratorFunction(function* foo() {});  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isGeneratorFunction(object: unknown): object is GeneratorFunction;\\n    /**\\n     * Returns `true` if the value is a generator object as returned from a\\n     * built-in generator function.\\n     * This only reports back what the JavaScript engine is seeing;\\n     * in particular, the return value may not match the original source code if\\n     * a transpilation tool was used.\\n     *\\n     * ```js\\n     * function* foo() {}\\n     * const generator = foo();\\n     * util.types.isGeneratorObject(generator);  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isGeneratorObject(object: unknown): object is Generator;\\n    /**\\n     * Returns `true` if the value is a built-in [`Int8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array) instance.\\n     *\\n     * ```js\\n     * util.types.isInt8Array(new ArrayBuffer());  // Returns false\\n     * util.types.isInt8Array(new Int8Array());  // Returns true\\n     * util.types.isInt8Array(new Float64Array());  // Returns false\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isInt8Array(object: unknown): object is Int8Array;\\n    /**\\n     * Returns `true` if the value is a built-in [`Int16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array) instance.\\n     *\\n     * ```js\\n     * util.types.isInt16Array(new ArrayBuffer());  // Returns false\\n     * util.types.isInt16Array(new Int16Array());  // Returns true\\n     * util.types.isInt16Array(new Float64Array());  // Returns false\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isInt16Array(object: unknown): object is Int16Array;\\n    /**\\n     * Returns `true` if the value is a built-in [`Int32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array) instance.\\n     *\\n     * ```js\\n     * util.types.isInt32Array(new ArrayBuffer());  // Returns false\\n     * util.types.isInt32Array(new Int32Array());  // Returns true\\n     * util.types.isInt32Array(new Float64Array());  // Returns false\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isInt32Array(object: unknown): object is Int32Array;\\n    /**\\n     * Returns `true` if the value is a built-in [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instance.\\n     *\\n     * ```js\\n     * util.types.isMap(new Map());  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isMap<T>(object: T | {}): object is T extends ReadonlyMap<any, any> ? (unknown extends T ? never : ReadonlyMap<any, any>) : Map<unknown, unknown>;\\n    /**\\n     * Returns `true` if the value is an iterator returned for a built-in [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instance.\\n     *\\n     * ```js\\n     * const map = new Map();\\n     * util.types.isMapIterator(map.keys());  // Returns true\\n     * util.types.isMapIterator(map.values());  // Returns true\\n     * util.types.isMapIterator(map.entries());  // Returns true\\n     * util.types.isMapIterator(map[Symbol.iterator]());  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isMapIterator(object: unknown): boolean;\\n    /**\\n     * Returns `true` if the value is an instance of a [Module Namespace Object](https://tc39.github.io/ecma262/#sec-module-namespace-exotic-objects).\\n     *\\n     * ```js\\n     * import * as ns from './a.js';\\n     *\\n     * util.types.isModuleNamespaceObject(ns);  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isModuleNamespaceObject(value: unknown): boolean;\\n    /**\\n     * Returns `true` if the value is an instance of a built-in `Error` type.\\n     *\\n     * ```js\\n     * util.types.isNativeError(new Error());  // Returns true\\n     * util.types.isNativeError(new TypeError());  // Returns true\\n     * util.types.isNativeError(new RangeError());  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isNativeError(object: unknown): object is Error;\\n    /**\\n     * Returns `true` if the value is a number object, e.g. created\\n     * by `new Number()`.\\n     *\\n     * ```js\\n     * util.types.isNumberObject(0);  // Returns false\\n     * util.types.isNumberObject(new Number(0));   // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isNumberObject(object: unknown): object is Number;\\n    /**\\n     * Returns `true` if the value is a built-in [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\\n     *\\n     * ```js\\n     * util.types.isPromise(Promise.resolve(42));  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isPromise(object: unknown): object is Promise<unknown>;\\n    /**\\n     * Returns `true` if the value is a [`Proxy`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) instance.\\n     *\\n     * ```js\\n     * const target = {};\\n     * const proxy = new Proxy(target, {});\\n     * util.types.isProxy(target);  // Returns false\\n     * util.types.isProxy(proxy);  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isProxy(object: unknown): boolean;\\n    /**\\n     * Returns `true` if the value is a regular expression object.\\n     *\\n     * ```js\\n     * util.types.isRegExp(/abc/);  // Returns true\\n     * util.types.isRegExp(new RegExp('abc'));  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isRegExp(object: unknown): object is RegExp;\\n    /**\\n     * Returns `true` if the value is a built-in [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instance.\\n     *\\n     * ```js\\n     * util.types.isSet(new Set());  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isSet<T>(object: T | {}): object is T extends ReadonlySet<any> ? (unknown extends T ? never : ReadonlySet<any>) : Set<unknown>;\\n    /**\\n     * Returns `true` if the value is an iterator returned for a built-in [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instance.\\n     *\\n     * ```js\\n     * const set = new Set();\\n     * util.types.isSetIterator(set.keys());  // Returns true\\n     * util.types.isSetIterator(set.values());  // Returns true\\n     * util.types.isSetIterator(set.entries());  // Returns true\\n     * util.types.isSetIterator(set[Symbol.iterator]());  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isSetIterator(object: unknown): boolean;\\n    /**\\n     * Returns `true` if the value is a built-in [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) instance.\\n     * This does _not_ include [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) instances. Usually, it is\\n     * desirable to test for both; See `util.types.isAnyArrayBuffer()` for that.\\n     *\\n     * ```js\\n     * util.types.isSharedArrayBuffer(new ArrayBuffer());  // Returns false\\n     * util.types.isSharedArrayBuffer(new SharedArrayBuffer());  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isSharedArrayBuffer(object: unknown): object is SharedArrayBuffer;\\n    /**\\n     * Returns `true` if the value is a string object, e.g. created\\n     * by `new String()`.\\n     *\\n     * ```js\\n     * util.types.isStringObject('foo');  // Returns false\\n     * util.types.isStringObject(new String('foo'));   // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isStringObject(object: unknown): object is String;\\n    /**\\n     * Returns `true` if the value is a symbol object, created\\n     * by calling `Object()` on a `Symbol` primitive.\\n     *\\n     * ```js\\n     * const symbol = Symbol('foo');\\n     * util.types.isSymbolObject(symbol);  // Returns false\\n     * util.types.isSymbolObject(Object(symbol));   // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isSymbolObject(object: unknown): object is Symbol;\\n    /**\\n     * Returns `true` if the value is a built-in [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instance.\\n     *\\n     * ```js\\n     * util.types.isTypedArray(new ArrayBuffer());  // Returns false\\n     * util.types.isTypedArray(new Uint8Array());  // Returns true\\n     * util.types.isTypedArray(new Float64Array());  // Returns true\\n     * ```\\n     *\\n     * See also [`ArrayBuffer.isView()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/isView).\\n     * @since v10.0.0\\n     */\\n    function isTypedArray(object: unknown): object is NodeJS.TypedArray;\\n    /**\\n     * Returns `true` if the value is a built-in [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) instance.\\n     *\\n     * ```js\\n     * util.types.isUint8Array(new ArrayBuffer());  // Returns false\\n     * util.types.isUint8Array(new Uint8Array());  // Returns true\\n     * util.types.isUint8Array(new Float64Array());  // Returns false\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isUint8Array(object: unknown): object is Uint8Array;\\n    /**\\n     * Returns `true` if the value is a built-in [`Uint8ClampedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray) instance.\\n     *\\n     * ```js\\n     * util.types.isUint8ClampedArray(new ArrayBuffer());  // Returns false\\n     * util.types.isUint8ClampedArray(new Uint8ClampedArray());  // Returns true\\n     * util.types.isUint8ClampedArray(new Float64Array());  // Returns false\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isUint8ClampedArray(object: unknown): object is Uint8ClampedArray;\\n    /**\\n     * Returns `true` if the value is a built-in [`Uint16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array) instance.\\n     *\\n     * ```js\\n     * util.types.isUint16Array(new ArrayBuffer());  // Returns false\\n     * util.types.isUint16Array(new Uint16Array());  // Returns true\\n     * util.types.isUint16Array(new Float64Array());  // Returns false\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isUint16Array(object: unknown): object is Uint16Array;\\n    /**\\n     * Returns `true` if the value is a built-in [`Uint32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array) instance.\\n     *\\n     * ```js\\n     * util.types.isUint32Array(new ArrayBuffer());  // Returns false\\n     * util.types.isUint32Array(new Uint32Array());  // Returns true\\n     * util.types.isUint32Array(new Float64Array());  // Returns false\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isUint32Array(object: unknown): object is Uint32Array;\\n    /**\\n     * Returns `true` if the value is a built-in [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap) instance.\\n     *\\n     * ```js\\n     * util.types.isWeakMap(new WeakMap());  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isWeakMap(object: unknown): object is WeakMap<object, unknown>;\\n    /**\\n     * Returns `true` if the value is a built-in [`WeakSet`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet) instance.\\n     *\\n     * ```js\\n     * util.types.isWeakSet(new WeakSet());  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isWeakSet(object: unknown): object is WeakSet<object>;\\n    /**\\n     * Returns `true` if `value` is a `KeyObject`, `false` otherwise.\\n     * @since v16.2.0\\n     */\\n    function isKeyObject(object: unknown): object is KeyObject;\\n    /**\\n     * Returns `true` if `value` is a `CryptoKey`, `false` otherwise.\\n     * @since v16.2.0\\n     */\\n    function isCryptoKey(object: unknown): object is webcrypto.CryptoKey;\\n}\\ndeclare module 'node:util' {\\n    export * from 'util';\\n}\\ndeclare module 'node:util/types' {\\n    export * from 'util/types';\\n}\\n\",\"file:///node_modules/@types/node/v8.d.ts\":\"/**\\n * The `v8` module exposes APIs that are specific to the version of [V8](https://developers.google.com/v8/) built into the Node.js binary. It can be accessed using:\\n *\\n * ```js\\n * const v8 = require('v8');\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/v8.js)\\n */\\ndeclare module 'v8' {\\n    import { Readable } from 'node:stream';\\n    interface HeapSpaceInfo {\\n        space_name: string;\\n        space_size: number;\\n        space_used_size: number;\\n        space_available_size: number;\\n        physical_space_size: number;\\n    }\\n    // ** Signifies if the --zap_code_space option is enabled or not.  1 == enabled, 0 == disabled. */\\n    type DoesZapCodeSpaceFlag = 0 | 1;\\n    interface HeapInfo {\\n        total_heap_size: number;\\n        total_heap_size_executable: number;\\n        total_physical_size: number;\\n        total_available_size: number;\\n        used_heap_size: number;\\n        heap_size_limit: number;\\n        malloced_memory: number;\\n        peak_malloced_memory: number;\\n        does_zap_garbage: DoesZapCodeSpaceFlag;\\n        number_of_native_contexts: number;\\n        number_of_detached_contexts: number;\\n    }\\n    interface HeapCodeStatistics {\\n        code_and_metadata_size: number;\\n        bytecode_and_metadata_size: number;\\n        external_script_source_size: number;\\n    }\\n    /**\\n     * Returns an integer representing a version tag derived from the V8 version,\\n     * command-line flags, and detected CPU features. This is useful for determining\\n     * whether a `vm.Script` `cachedData` buffer is compatible with this instance\\n     * of V8.\\n     *\\n     * ```js\\n     * console.log(v8.cachedDataVersionTag()); // 3947234607\\n     * // The value returned by v8.cachedDataVersionTag() is derived from the V8\\n     * // version, command-line flags, and detected CPU features. Test that the value\\n     * // does indeed update when flags are toggled.\\n     * v8.setFlagsFromString('--allow_natives_syntax');\\n     * console.log(v8.cachedDataVersionTag()); // 183726201\\n     * ```\\n     * @since v8.0.0\\n     */\\n    function cachedDataVersionTag(): number;\\n    /**\\n     * Returns an object with the following properties:\\n     *\\n     * `does_zap_garbage` is a 0/1 boolean, which signifies whether the`--zap_code_space` option is enabled or not. This makes V8 overwrite heap\\n     * garbage with a bit pattern. The RSS footprint (resident set size) gets bigger\\n     * because it continuously touches all heap pages and that makes them less likely\\n     * to get swapped out by the operating system.\\n     *\\n     * `number_of_native_contexts` The value of native\\\\_context is the number of the\\n     * top-level contexts currently active. Increase of this number over time indicates\\n     * a memory leak.\\n     *\\n     * `number_of_detached_contexts` The value of detached\\\\_context is the number\\n     * of contexts that were detached and not yet garbage collected. This number\\n     * being non-zero indicates a potential memory leak.\\n     *\\n     * ```js\\n     * {\\n     *   total_heap_size: 7326976,\\n     *   total_heap_size_executable: 4194304,\\n     *   total_physical_size: 7326976,\\n     *   total_available_size: 1152656,\\n     *   used_heap_size: 3476208,\\n     *   heap_size_limit: 1535115264,\\n     *   malloced_memory: 16384,\\n     *   peak_malloced_memory: 1127496,\\n     *   does_zap_garbage: 0,\\n     *   number_of_native_contexts: 1,\\n     *   number_of_detached_contexts: 0\\n     * }\\n     * ```\\n     * @since v1.0.0\\n     */\\n    function getHeapStatistics(): HeapInfo;\\n    /**\\n     * Returns statistics about the V8 heap spaces, i.e. the segments which make up\\n     * the V8 heap. Neither the ordering of heap spaces, nor the availability of a\\n     * heap space can be guaranteed as the statistics are provided via the\\n     * V8[`GetHeapSpaceStatistics`](https://v8docs.nodesource.com/node-13.2/d5/dda/classv8_1_1_isolate.html#ac673576f24fdc7a33378f8f57e1d13a4) function and may change from one V8 version to the\\n     * next.\\n     *\\n     * The value returned is an array of objects containing the following properties:\\n     *\\n     * ```json\\n     * [\\n     *   {\\n     *     \\\"space_name\\\": \\\"new_space\\\",\\n     *     \\\"space_size\\\": 2063872,\\n     *     \\\"space_used_size\\\": 951112,\\n     *     \\\"space_available_size\\\": 80824,\\n     *     \\\"physical_space_size\\\": 2063872\\n     *   },\\n     *   {\\n     *     \\\"space_name\\\": \\\"old_space\\\",\\n     *     \\\"space_size\\\": 3090560,\\n     *     \\\"space_used_size\\\": 2493792,\\n     *     \\\"space_available_size\\\": 0,\\n     *     \\\"physical_space_size\\\": 3090560\\n     *   },\\n     *   {\\n     *     \\\"space_name\\\": \\\"code_space\\\",\\n     *     \\\"space_size\\\": 1260160,\\n     *     \\\"space_used_size\\\": 644256,\\n     *     \\\"space_available_size\\\": 960,\\n     *     \\\"physical_space_size\\\": 1260160\\n     *   },\\n     *   {\\n     *     \\\"space_name\\\": \\\"map_space\\\",\\n     *     \\\"space_size\\\": 1094160,\\n     *     \\\"space_used_size\\\": 201608,\\n     *     \\\"space_available_size\\\": 0,\\n     *     \\\"physical_space_size\\\": 1094160\\n     *   },\\n     *   {\\n     *     \\\"space_name\\\": \\\"large_object_space\\\",\\n     *     \\\"space_size\\\": 0,\\n     *     \\\"space_used_size\\\": 0,\\n     *     \\\"space_available_size\\\": 1490980608,\\n     *     \\\"physical_space_size\\\": 0\\n     *   }\\n     * ]\\n     * ```\\n     * @since v6.0.0\\n     */\\n    function getHeapSpaceStatistics(): HeapSpaceInfo[];\\n    /**\\n     * The `v8.setFlagsFromString()` method can be used to programmatically set\\n     * V8 command-line flags. This method should be used with care. Changing settings\\n     * after the VM has started may result in unpredictable behavior, including\\n     * crashes and data loss; or it may simply do nothing.\\n     *\\n     * The V8 options available for a version of Node.js may be determined by running`node --v8-options`.\\n     *\\n     * Usage:\\n     *\\n     * ```js\\n     * // Print GC events to stdout for one minute.\\n     * const v8 = require('v8');\\n     * v8.setFlagsFromString('--trace_gc');\\n     * setTimeout(() => { v8.setFlagsFromString('--notrace_gc'); }, 60e3);\\n     * ```\\n     * @since v1.0.0\\n     */\\n    function setFlagsFromString(flags: string): void;\\n    /**\\n     * Generates a snapshot of the current V8 heap and returns a Readable\\n     * Stream that may be used to read the JSON serialized representation.\\n     * This JSON stream format is intended to be used with tools such as\\n     * Chrome DevTools. The JSON schema is undocumented and specific to the\\n     * V8 engine. Therefore, the schema may change from one version of V8 to the next.\\n     *\\n     * Creating a heap snapshot requires memory about twice the size of the heap at\\n     * the time the snapshot is created. This results in the risk of OOM killers\\n     * terminating the process.\\n     *\\n     * Generating a snapshot is a synchronous operation which blocks the event loop\\n     * for a duration depending on the heap size.\\n     *\\n     * ```js\\n     * // Print heap snapshot to the console\\n     * const v8 = require('v8');\\n     * const stream = v8.getHeapSnapshot();\\n     * stream.pipe(process.stdout);\\n     * ```\\n     * @since v11.13.0\\n     * @return A Readable Stream containing the V8 heap snapshot\\n     */\\n    function getHeapSnapshot(): Readable;\\n    /**\\n     * Generates a snapshot of the current V8 heap and writes it to a JSON\\n     * file. This file is intended to be used with tools such as Chrome\\n     * DevTools. The JSON schema is undocumented and specific to the V8\\n     * engine, and may change from one version of V8 to the next.\\n     *\\n     * A heap snapshot is specific to a single V8 isolate. When using `worker threads`, a heap snapshot generated from the main thread will\\n     * not contain any information about the workers, and vice versa.\\n     *\\n     * Creating a heap snapshot requires memory about twice the size of the heap at\\n     * the time the snapshot is created. This results in the risk of OOM killers\\n     * terminating the process.\\n     *\\n     * Generating a snapshot is a synchronous operation which blocks the event loop\\n     * for a duration depending on the heap size.\\n     *\\n     * ```js\\n     * const { writeHeapSnapshot } = require('v8');\\n     * const {\\n     *   Worker,\\n     *   isMainThread,\\n     *   parentPort\\n     * } = require('worker_threads');\\n     *\\n     * if (isMainThread) {\\n     *   const worker = new Worker(__filename);\\n     *\\n     *   worker.once('message', (filename) => {\\n     *     console.log(`worker heapdump: ${filename}`);\\n     *     // Now get a heapdump for the main thread.\\n     *     console.log(`main thread heapdump: ${writeHeapSnapshot()}`);\\n     *   });\\n     *\\n     *   // Tell the worker to create a heapdump.\\n     *   worker.postMessage('heapdump');\\n     * } else {\\n     *   parentPort.once('message', (message) => {\\n     *     if (message === 'heapdump') {\\n     *       // Generate a heapdump for the worker\\n     *       // and return the filename to the parent.\\n     *       parentPort.postMessage(writeHeapSnapshot());\\n     *     }\\n     *   });\\n     * }\\n     * ```\\n     * @since v11.13.0\\n     * @param filename The file path where the V8 heap snapshot is to be saved. If not specified, a file name with the pattern `'Heap-${yyyymmdd}-${hhmmss}-${pid}-${thread_id}.heapsnapshot'` will be\\n     * generated, where `{pid}` will be the PID of the Node.js process, `{thread_id}` will be `0` when `writeHeapSnapshot()` is called from the main Node.js thread or the id of a\\n     * worker thread.\\n     * @return The filename where the snapshot was saved.\\n     */\\n    function writeHeapSnapshot(filename?: string): string;\\n    /**\\n     * Returns an object with the following properties:\\n     *\\n     * ```js\\n     * {\\n     *   code_and_metadata_size: 212208,\\n     *   bytecode_and_metadata_size: 161368,\\n     *   external_script_source_size: 1410794\\n     * }\\n     * ```\\n     * @since v12.8.0\\n     */\\n    function getHeapCodeStatistics(): HeapCodeStatistics;\\n    /**\\n     * @since v8.0.0\\n     */\\n    class Serializer {\\n        /**\\n         * Writes out a header, which includes the serialization format version.\\n         */\\n        writeHeader(): void;\\n        /**\\n         * Serializes a JavaScript value and adds the serialized representation to the\\n         * internal buffer.\\n         *\\n         * This throws an error if `value` cannot be serialized.\\n         */\\n        writeValue(val: any): boolean;\\n        /**\\n         * Returns the stored internal buffer. This serializer should not be used once\\n         * the buffer is released. Calling this method results in undefined behavior\\n         * if a previous write has failed.\\n         */\\n        releaseBuffer(): Buffer;\\n        /**\\n         * Marks an `ArrayBuffer` as having its contents transferred out of band.\\n         * Pass the corresponding `ArrayBuffer` in the deserializing context to `deserializer.transferArrayBuffer()`.\\n         * @param id A 32-bit unsigned integer.\\n         * @param arrayBuffer An `ArrayBuffer` instance.\\n         */\\n        transferArrayBuffer(id: number, arrayBuffer: ArrayBuffer): void;\\n        /**\\n         * Write a raw 32-bit unsigned integer.\\n         * For use inside of a custom `serializer._writeHostObject()`.\\n         */\\n        writeUint32(value: number): void;\\n        /**\\n         * Write a raw 64-bit unsigned integer, split into high and low 32-bit parts.\\n         * For use inside of a custom `serializer._writeHostObject()`.\\n         */\\n        writeUint64(hi: number, lo: number): void;\\n        /**\\n         * Write a JS `number` value.\\n         * For use inside of a custom `serializer._writeHostObject()`.\\n         */\\n        writeDouble(value: number): void;\\n        /**\\n         * Write raw bytes into the serializer\u2019s internal buffer. The deserializer\\n         * will require a way to compute the length of the buffer.\\n         * For use inside of a custom `serializer._writeHostObject()`.\\n         */\\n        writeRawBytes(buffer: NodeJS.TypedArray): void;\\n    }\\n    /**\\n     * A subclass of `Serializer` that serializes `TypedArray`(in particular `Buffer`) and `DataView` objects as host objects, and only\\n     * stores the part of their underlying `ArrayBuffer`s that they are referring to.\\n     * @since v8.0.0\\n     */\\n    class DefaultSerializer extends Serializer {}\\n    /**\\n     * @since v8.0.0\\n     */\\n    class Deserializer {\\n        constructor(data: NodeJS.TypedArray);\\n        /**\\n         * Reads and validates a header (including the format version).\\n         * May, for example, reject an invalid or unsupported wire format. In that case,\\n         * an `Error` is thrown.\\n         */\\n        readHeader(): boolean;\\n        /**\\n         * Deserializes a JavaScript value from the buffer and returns it.\\n         */\\n        readValue(): any;\\n        /**\\n         * Marks an `ArrayBuffer` as having its contents transferred out of band.\\n         * Pass the corresponding `ArrayBuffer` in the serializing context to `serializer.transferArrayBuffer()` (or return the `id` from `serializer._getSharedArrayBufferId()` in the case of\\n         * `SharedArrayBuffer`s).\\n         * @param id A 32-bit unsigned integer.\\n         * @param arrayBuffer An `ArrayBuffer` instance.\\n         */\\n        transferArrayBuffer(id: number, arrayBuffer: ArrayBuffer): void;\\n        /**\\n         * Reads the underlying wire format version. Likely mostly to be useful to\\n         * legacy code reading old wire format versions. May not be called before`.readHeader()`.\\n         */\\n        getWireFormatVersion(): number;\\n        /**\\n         * Read a raw 32-bit unsigned integer and return it.\\n         * For use inside of a custom `deserializer._readHostObject()`.\\n         */\\n        readUint32(): number;\\n        /**\\n         * Read a raw 64-bit unsigned integer and return it as an array `[hi, lo]`with two 32-bit unsigned integer entries.\\n         * For use inside of a custom `deserializer._readHostObject()`.\\n         */\\n        readUint64(): [number, number];\\n        /**\\n         * Read a JS `number` value.\\n         * For use inside of a custom `deserializer._readHostObject()`.\\n         */\\n        readDouble(): number;\\n        /**\\n         * Read raw bytes from the deserializer\u2019s internal buffer. The `length` parameter\\n         * must correspond to the length of the buffer that was passed to `serializer.writeRawBytes()`.\\n         * For use inside of a custom `deserializer._readHostObject()`.\\n         */\\n        readRawBytes(length: number): Buffer;\\n    }\\n    /**\\n     * A subclass of `Deserializer` corresponding to the format written by `DefaultSerializer`.\\n     * @since v8.0.0\\n     */\\n    class DefaultDeserializer extends Deserializer {}\\n    /**\\n     * Uses a `DefaultSerializer` to serialize `value` into a buffer.\\n     *\\n     * `ERR_BUFFER_TOO_LARGE` will be thrown when trying to\\n     * serialize a huge object which requires buffer\\n     * larger than `buffer.constants.MAX_LENGTH`.\\n     * @since v8.0.0\\n     */\\n    function serialize(value: any): Buffer;\\n    /**\\n     * Uses a `DefaultDeserializer` with default options to read a JS value\\n     * from a buffer.\\n     * @since v8.0.0\\n     * @param buffer A buffer returned by {@link serialize}.\\n     */\\n    function deserialize(buffer: NodeJS.TypedArray): any;\\n    /**\\n     * The `v8.takeCoverage()` method allows the user to write the coverage started by `NODE_V8_COVERAGE` to disk on demand. This method can be invoked multiple\\n     * times during the lifetime of the process. Each time the execution counter will\\n     * be reset and a new coverage report will be written to the directory specified\\n     * by `NODE_V8_COVERAGE`.\\n     *\\n     * When the process is about to exit, one last coverage will still be written to\\n     * disk unless {@link stopCoverage} is invoked before the process exits.\\n     * @since v15.1.0, v14.18.0, v12.22.0\\n     */\\n    function takeCoverage(): void;\\n    /**\\n     * The `v8.stopCoverage()` method allows the user to stop the coverage collection\\n     * started by `NODE_V8_COVERAGE`, so that V8 can release the execution count\\n     * records and optimize code. This can be used in conjunction with {@link takeCoverage} if the user wants to collect the coverage on demand.\\n     * @since v15.1.0, v14.18.0, v12.22.0\\n     */\\n    function stopCoverage(): void;\\n\\n    /**\\n     * This API collects GC data in current thread.\\n     */\\n    class GCProfiler {\\n        /**\\n         * Start collecting GC data.\\n         */\\n        start(): void;\\n        /**\\n         * Stop collecting GC data and return a object.\\n         */\\n        stop(): GCProfilerResult;\\n    }\\n    interface GCProfilerResult {\\n        version: number;\\n        startTime: number;\\n        endTime: number;\\n        statistics: Array<{\\n            gcType: string;\\n            cost: number;\\n            beforeGC: {\\n                heapStatistics: HeapStatistics;\\n                heapSpaceStatistics: HeapSpaceStatistics[];\\n            };\\n            afterGC: {\\n                heapStatistics: HeapStatistics;\\n                heapSpaceStatistics: HeapSpaceStatistics[];\\n            };\\n        }>;\\n    }\\n    interface HeapStatistics {\\n        totalHeapSize: number;\\n        totalHeapSizeExecutable: number;\\n        totalPhysicalSize: number;\\n        totalAvailableSize: number;\\n        totalGlobalHandlesSize: number;\\n        usedGlobalHandlesSize: number;\\n        usedHeapSize: number;\\n        heapSizeLimit: number;\\n        mallocedMemory: number;\\n        externalMemory: number;\\n        peakMallocedMemory: number;\\n    }\\n    interface HeapSpaceStatistics {\\n        spaceName: string;\\n        spaceSize: number;\\n        spaceUsedSize: number;\\n        spaceAvailableSize: number;\\n        physicalSpaceSize: number;\\n    }\\n    /**\\n     * Called when a promise is constructed. This does not mean that corresponding before/after events will occur, only that the possibility exists. This will\\n     * happen if a promise is created without ever getting a continuation.\\n     * @since v17.1.0, v16.14.0\\n     * @param promise The promise being created.\\n     * @param parent The promise continued from, if applicable.\\n     */\\n    interface Init {\\n        (promise: Promise<unknown>, parent: Promise<unknown>): void;\\n    }\\n    /**\\n     * Called before a promise continuation executes. This can be in the form of `then()`, `catch()`, or `finally()` handlers or an await resuming.\\n     *\\n     * The before callback will be called 0 to N times. The before callback will typically be called 0 times if no continuation was ever made for the promise.\\n     * The before callback may be called many times in the case where many continuations have been made from the same promise.\\n     * @since v17.1.0, v16.14.0\\n     */\\n    interface Before {\\n        (promise: Promise<unknown>): void;\\n    }\\n    /**\\n     * Called immediately after a promise continuation executes. This may be after a `then()`, `catch()`, or `finally()` handler or before an await after another await.\\n     * @since v17.1.0, v16.14.0\\n     */\\n    interface After {\\n        (promise: Promise<unknown>): void;\\n    }\\n    /**\\n     * Called when the promise receives a resolution or rejection value. This may occur synchronously in the case of {@link Promise.resolve()} or\\n     * {@link Promise.reject()}.\\n     * @since v17.1.0, v16.14.0\\n     */\\n    interface Settled {\\n        (promise: Promise<unknown>): void;\\n    }\\n    /**\\n     * Key events in the lifetime of a promise have been categorized into four areas: creation of a promise, before/after a continuation handler is called or\\n     * around an await, and when the promise resolves or rejects.\\n     *\\n     * Because promises are asynchronous resources whose lifecycle is tracked via the promise hooks mechanism, the `init()`, `before()`, `after()`, and\\n     * `settled()` callbacks must not be async functions as they create more promises which would produce an infinite loop.\\n     * @since v17.1.0, v16.14.0\\n     */\\n    interface HookCallbacks {\\n        init?: Init;\\n        before?: Before;\\n        after?: After;\\n        settled?: Settled;\\n    }\\n    interface PromiseHooks {\\n        /**\\n         * The `init` hook must be a plain function. Providing an async function will throw as it would produce an infinite microtask loop.\\n         * @since v17.1.0, v16.14.0\\n         * @param init The {@link Init | `init` callback} to call when a promise is created.\\n         * @return Call to stop the hook.\\n         */\\n        onInit: (init: Init) => Function;\\n        /**\\n         * The `settled` hook must be a plain function. Providing an async function will throw as it would produce an infinite microtask loop.\\n         * @since v17.1.0, v16.14.0\\n         * @param settled The {@link Settled | `settled` callback} to call when a promise is created.\\n         * @return Call to stop the hook.\\n         */\\n        onSettled: (settled: Settled) => Function;\\n        /**\\n         * The `before` hook must be a plain function. Providing an async function will throw as it would produce an infinite microtask loop.\\n         * @since v17.1.0, v16.14.0\\n         * @param before The {@link Before | `before` callback} to call before a promise continuation executes.\\n         * @return Call to stop the hook.\\n         */\\n        onBefore: (before: Before) => Function;\\n        /**\\n         * The `after` hook must be a plain function. Providing an async function will throw as it would produce an infinite microtask loop.\\n         * @since v17.1.0, v16.14.0\\n         * @param after The {@link After | `after` callback} to call after a promise continuation executes.\\n         * @return Call to stop the hook.\\n         */\\n        onAfter: (after: After) => Function;\\n        /**\\n         * Registers functions to be called for different lifetime events of each promise.\\n         * The callbacks `init()`/`before()`/`after()`/`settled()` are called for the respective events during a promise's lifetime.\\n         * All callbacks are optional. For example, if only promise creation needs to be tracked, then only the init callback needs to be passed.\\n         * The hook callbacks must be plain functions. Providing async functions will throw as it would produce an infinite microtask loop.\\n         * @since v17.1.0, v16.14.0\\n         * @param callbacks The {@link HookCallbacks | Hook Callbacks} to register\\n         * @return Used for disabling hooks\\n         */\\n        createHook: (callbacks: HookCallbacks) => Function;\\n    }\\n    /**\\n     * The `promiseHooks` interface can be used to track promise lifecycle events.\\n     * @since v17.1.0, v16.14.0\\n     */\\n    const promiseHooks: PromiseHooks;\\n}\\ndeclare module 'node:v8' {\\n    export * from 'v8';\\n}\\n\",\"file:///node_modules/@types/node/vm.d.ts\":\"/**\\n * The `vm` module enables compiling and running code within V8 Virtual\\n * Machine contexts.\\n *\\n * **The `vm` module is not a security**\\n * **mechanism. Do not use it to run untrusted code.**\\n *\\n * JavaScript code can be compiled and run immediately or\\n * compiled, saved, and run later.\\n *\\n * A common use case is to run the code in a different V8 Context. This means\\n * invoked code has a different global object than the invoking code.\\n *\\n * One can provide the context by `contextifying` an\\n * object. The invoked code treats any property in the context like a\\n * global variable. Any changes to global variables caused by the invoked\\n * code are reflected in the context object.\\n *\\n * ```js\\n * const vm = require('vm');\\n *\\n * const x = 1;\\n *\\n * const context = { x: 2 };\\n * vm.createContext(context); // Contextify the object.\\n *\\n * const code = 'x += 40; var y = 17;';\\n * // `x` and `y` are global variables in the context.\\n * // Initially, x has the value 2 because that is the value of context.x.\\n * vm.runInContext(code, context);\\n *\\n * console.log(context.x); // 42\\n * console.log(context.y); // 17\\n *\\n * console.log(x); // 1; y is not defined.\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/vm.js)\\n */\\ndeclare module 'vm' {\\n    interface Context extends NodeJS.Dict<any> {}\\n    interface BaseOptions {\\n        /**\\n         * Specifies the filename used in stack traces produced by this script.\\n         * Default: `''`.\\n         */\\n        filename?: string | undefined;\\n        /**\\n         * Specifies the line number offset that is displayed in stack traces produced by this script.\\n         * Default: `0`.\\n         */\\n        lineOffset?: number | undefined;\\n        /**\\n         * Specifies the column number offset that is displayed in stack traces produced by this script.\\n         * @default 0\\n         */\\n        columnOffset?: number | undefined;\\n    }\\n    interface ScriptOptions extends BaseOptions {\\n        /**\\n         * V8's code cache data for the supplied source.\\n         */\\n        cachedData?: Buffer | NodeJS.ArrayBufferView | undefined;\\n        /** @deprecated in favor of `script.createCachedData()` */\\n        produceCachedData?: boolean | undefined;\\n        /**\\n         * Called during evaluation of this module when `import()` is called.\\n         * If this option is not specified, calls to `import()` will reject with `ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING`.\\n         */\\n        importModuleDynamically?: ((specifier: string, script: Script, importAssertions: Object) => Module) | undefined;\\n    }\\n    interface RunningScriptOptions extends BaseOptions {\\n        /**\\n         * When `true`, if an `Error` occurs while compiling the `code`, the line of code causing the error is attached to the stack trace.\\n         * Default: `true`.\\n         */\\n        displayErrors?: boolean | undefined;\\n        /**\\n         * Specifies the number of milliseconds to execute code before terminating execution.\\n         * If execution is terminated, an `Error` will be thrown. This value must be a strictly positive integer.\\n         */\\n        timeout?: number | undefined;\\n        /**\\n         * If `true`, the execution will be terminated when `SIGINT` (Ctrl+C) is received.\\n         * Existing handlers for the event that have been attached via `process.on('SIGINT')` will be disabled during script execution, but will continue to work after that.\\n         * If execution is terminated, an `Error` will be thrown.\\n         * Default: `false`.\\n         */\\n        breakOnSigint?: boolean | undefined;\\n    }\\n    interface RunningScriptInNewContextOptions extends RunningScriptOptions {\\n        /**\\n         * Human-readable name of the newly created context.\\n         */\\n        contextName?: CreateContextOptions['name'];\\n        /**\\n         * Origin corresponding to the newly created context for display purposes. The origin should be formatted like a URL,\\n         * but with only the scheme, host, and port (if necessary), like the value of the `url.origin` property of a `URL` object.\\n         * Most notably, this string should omit the trailing slash, as that denotes a path.\\n         */\\n        contextOrigin?: CreateContextOptions['origin'];\\n        contextCodeGeneration?: CreateContextOptions['codeGeneration'];\\n        /**\\n         * If set to `afterEvaluate`, microtasks will be run immediately after the script has run.\\n         */\\n        microtaskMode?: CreateContextOptions['microtaskMode'];\\n    }\\n    interface RunningCodeOptions extends RunningScriptOptions {\\n        cachedData?: ScriptOptions['cachedData'];\\n        importModuleDynamically?: ScriptOptions['importModuleDynamically'];\\n    }\\n    interface RunningCodeInNewContextOptions extends RunningScriptInNewContextOptions {\\n        cachedData?: ScriptOptions['cachedData'];\\n        importModuleDynamically?: ScriptOptions['importModuleDynamically'];\\n    }\\n    interface CompileFunctionOptions extends BaseOptions {\\n        /**\\n         * Provides an optional data with V8's code cache data for the supplied source.\\n         */\\n        cachedData?: Buffer | undefined;\\n        /**\\n         * Specifies whether to produce new cache data.\\n         * Default: `false`,\\n         */\\n        produceCachedData?: boolean | undefined;\\n        /**\\n         * The sandbox/context in which the said function should be compiled in.\\n         */\\n        parsingContext?: Context | undefined;\\n        /**\\n         * An array containing a collection of context extensions (objects wrapping the current scope) to be applied while compiling\\n         */\\n        contextExtensions?: Object[] | undefined;\\n    }\\n    interface CreateContextOptions {\\n        /**\\n         * Human-readable name of the newly created context.\\n         * @default 'VM Context i' Where i is an ascending numerical index of the created context.\\n         */\\n        name?: string | undefined;\\n        /**\\n         * Corresponds to the newly created context for display purposes.\\n         * The origin should be formatted like a `URL`, but with only the scheme, host, and port (if necessary),\\n         * like the value of the `url.origin` property of a URL object.\\n         * Most notably, this string should omit the trailing slash, as that denotes a path.\\n         * @default ''\\n         */\\n        origin?: string | undefined;\\n        codeGeneration?:\\n            | {\\n                  /**\\n                   * If set to false any calls to eval or function constructors (Function, GeneratorFunction, etc)\\n                   * will throw an EvalError.\\n                   * @default true\\n                   */\\n                  strings?: boolean | undefined;\\n                  /**\\n                   * If set to false any attempt to compile a WebAssembly module will throw a WebAssembly.CompileError.\\n                   * @default true\\n                   */\\n                  wasm?: boolean | undefined;\\n              }\\n            | undefined;\\n        /**\\n         * If set to `afterEvaluate`, microtasks will be run immediately after the script has run.\\n         */\\n        microtaskMode?: 'afterEvaluate' | undefined;\\n    }\\n    type MeasureMemoryMode = 'summary' | 'detailed';\\n    interface MeasureMemoryOptions {\\n        /**\\n         * @default 'summary'\\n         */\\n        mode?: MeasureMemoryMode | undefined;\\n        /**\\n         * @default 'default'\\n         */\\n        execution?: 'default' | 'eager' | undefined;\\n    }\\n    interface MemoryMeasurement {\\n        total: {\\n            jsMemoryEstimate: number;\\n            jsMemoryRange: [number, number];\\n        };\\n    }\\n    /**\\n     * Instances of the `vm.Script` class contain precompiled scripts that can be\\n     * executed in specific contexts.\\n     * @since v0.3.1\\n     */\\n    class Script {\\n        constructor(code: string, options?: ScriptOptions | string);\\n        /**\\n         * Runs the compiled code contained by the `vm.Script` object within the given`contextifiedObject` and returns the result. Running code does not have access\\n         * to local scope.\\n         *\\n         * The following example compiles code that increments a global variable, sets\\n         * the value of another global variable, then execute the code multiple times.\\n         * The globals are contained in the `context` object.\\n         *\\n         * ```js\\n         * const vm = require('vm');\\n         *\\n         * const context = {\\n         *   animal: 'cat',\\n         *   count: 2\\n         * };\\n         *\\n         * const script = new vm.Script('count += 1; name = \\\"kitty\\\";');\\n         *\\n         * vm.createContext(context);\\n         * for (let i = 0; i < 10; ++i) {\\n         *   script.runInContext(context);\\n         * }\\n         *\\n         * console.log(context);\\n         * // Prints: { animal: 'cat', count: 12, name: 'kitty' }\\n         * ```\\n         *\\n         * Using the `timeout` or `breakOnSigint` options will result in new event loops\\n         * and corresponding threads being started, which have a non-zero performance\\n         * overhead.\\n         * @since v0.3.1\\n         * @param contextifiedObject A `contextified` object as returned by the `vm.createContext()` method.\\n         * @return the result of the very last statement executed in the script.\\n         */\\n        runInContext(contextifiedObject: Context, options?: RunningScriptOptions): any;\\n        /**\\n         * First contextifies the given `contextObject`, runs the compiled code contained\\n         * by the `vm.Script` object within the created context, and returns the result.\\n         * Running code does not have access to local scope.\\n         *\\n         * The following example compiles code that sets a global variable, then executes\\n         * the code multiple times in different contexts. The globals are set on and\\n         * contained within each individual `context`.\\n         *\\n         * ```js\\n         * const vm = require('vm');\\n         *\\n         * const script = new vm.Script('globalVar = \\\"set\\\"');\\n         *\\n         * const contexts = [{}, {}, {}];\\n         * contexts.forEach((context) => {\\n         *   script.runInNewContext(context);\\n         * });\\n         *\\n         * console.log(contexts);\\n         * // Prints: [{ globalVar: 'set' }, { globalVar: 'set' }, { globalVar: 'set' }]\\n         * ```\\n         * @since v0.3.1\\n         * @param contextObject An object that will be `contextified`. If `undefined`, a new object will be created.\\n         * @return the result of the very last statement executed in the script.\\n         */\\n        runInNewContext(contextObject?: Context, options?: RunningScriptInNewContextOptions): any;\\n        /**\\n         * Runs the compiled code contained by the `vm.Script` within the context of the\\n         * current `global` object. Running code does not have access to local scope, but _does_ have access to the current `global` object.\\n         *\\n         * The following example compiles code that increments a `global` variable then\\n         * executes that code multiple times:\\n         *\\n         * ```js\\n         * const vm = require('vm');\\n         *\\n         * global.globalVar = 0;\\n         *\\n         * const script = new vm.Script('globalVar += 1', { filename: 'myfile.vm' });\\n         *\\n         * for (let i = 0; i < 1000; ++i) {\\n         *   script.runInThisContext();\\n         * }\\n         *\\n         * console.log(globalVar);\\n         *\\n         * // 1000\\n         * ```\\n         * @since v0.3.1\\n         * @return the result of the very last statement executed in the script.\\n         */\\n        runInThisContext(options?: RunningScriptOptions): any;\\n        /**\\n         * Creates a code cache that can be used with the `Script` constructor's`cachedData` option. Returns a `Buffer`. This method may be called at any\\n         * time and any number of times.\\n         *\\n         * ```js\\n         * const script = new vm.Script(`\\n         * function add(a, b) {\\n         *   return a + b;\\n         * }\\n         *\\n         * const x = add(1, 2);\\n         * `);\\n         *\\n         * const cacheWithoutX = script.createCachedData();\\n         *\\n         * script.runInThisContext();\\n         *\\n         * const cacheWithX = script.createCachedData();\\n         * ```\\n         * @since v10.6.0\\n         */\\n        createCachedData(): Buffer;\\n        /** @deprecated in favor of `script.createCachedData()` */\\n        cachedDataProduced?: boolean | undefined;\\n        cachedDataRejected?: boolean | undefined;\\n        cachedData?: Buffer | undefined;\\n        /**\\n         * When the script is compiled from a source that contains a source map magic comment, this property will be set to the URL of the source map.\\n         */\\n        sourceMapURL?: string | undefined;\\n    }\\n    /**\\n     * If given a `contextObject`, the `vm.createContext()` method will `prepare\\n     * that object` so that it can be used in calls to {@link runInContext} or `script.runInContext()`. Inside such scripts,\\n     * the `contextObject` will be the global object, retaining all of its existing\\n     * properties but also having the built-in objects and functions any standard [global object](https://es5.github.io/#x15.1) has. Outside of scripts run by the vm module, global variables\\n     * will remain unchanged.\\n     *\\n     * ```js\\n     * const vm = require('vm');\\n     *\\n     * global.globalVar = 3;\\n     *\\n     * const context = { globalVar: 1 };\\n     * vm.createContext(context);\\n     *\\n     * vm.runInContext('globalVar *= 2;', context);\\n     *\\n     * console.log(context);\\n     * // Prints: { globalVar: 2 }\\n     *\\n     * console.log(global.globalVar);\\n     * // Prints: 3\\n     * ```\\n     *\\n     * If `contextObject` is omitted (or passed explicitly as `undefined`), a new,\\n     * empty `contextified` object will be returned.\\n     *\\n     * The `vm.createContext()` method is primarily useful for creating a single\\n     * context that can be used to run multiple scripts. For instance, if emulating a\\n     * web browser, the method can be used to create a single context representing a\\n     * window's global object, then run all `<script>` tags together within that\\n     * context.\\n     *\\n     * The provided `name` and `origin` of the context are made visible through the\\n     * Inspector API.\\n     * @since v0.3.1\\n     * @return contextified object.\\n     */\\n    function createContext(sandbox?: Context, options?: CreateContextOptions): Context;\\n    /**\\n     * Returns `true` if the given `object` object has been `contextified` using {@link createContext}.\\n     * @since v0.11.7\\n     */\\n    function isContext(sandbox: Context): boolean;\\n    /**\\n     * The `vm.runInContext()` method compiles `code`, runs it within the context of\\n     * the `contextifiedObject`, then returns the result. Running code does not have\\n     * access to the local scope. The `contextifiedObject` object _must_ have been\\n     * previously `contextified` using the {@link createContext} method.\\n     *\\n     * If `options` is a string, then it specifies the filename.\\n     *\\n     * The following example compiles and executes different scripts using a single `contextified` object:\\n     *\\n     * ```js\\n     * const vm = require('vm');\\n     *\\n     * const contextObject = { globalVar: 1 };\\n     * vm.createContext(contextObject);\\n     *\\n     * for (let i = 0; i < 10; ++i) {\\n     *   vm.runInContext('globalVar *= 2;', contextObject);\\n     * }\\n     * console.log(contextObject);\\n     * // Prints: { globalVar: 1024 }\\n     * ```\\n     * @since v0.3.1\\n     * @param code The JavaScript code to compile and run.\\n     * @param contextifiedObject The `contextified` object that will be used as the `global` when the `code` is compiled and run.\\n     * @return the result of the very last statement executed in the script.\\n     */\\n    function runInContext(code: string, contextifiedObject: Context, options?: RunningCodeOptions | string): any;\\n    /**\\n     * The `vm.runInNewContext()` first contextifies the given `contextObject` (or\\n     * creates a new `contextObject` if passed as `undefined`), compiles the `code`,\\n     * runs it within the created context, then returns the result. Running code\\n     * does not have access to the local scope.\\n     *\\n     * If `options` is a string, then it specifies the filename.\\n     *\\n     * The following example compiles and executes code that increments a global\\n     * variable and sets a new one. These globals are contained in the `contextObject`.\\n     *\\n     * ```js\\n     * const vm = require('vm');\\n     *\\n     * const contextObject = {\\n     *   animal: 'cat',\\n     *   count: 2\\n     * };\\n     *\\n     * vm.runInNewContext('count += 1; name = \\\"kitty\\\"', contextObject);\\n     * console.log(contextObject);\\n     * // Prints: { animal: 'cat', count: 3, name: 'kitty' }\\n     * ```\\n     * @since v0.3.1\\n     * @param code The JavaScript code to compile and run.\\n     * @param contextObject An object that will be `contextified`. If `undefined`, a new object will be created.\\n     * @return the result of the very last statement executed in the script.\\n     */\\n    function runInNewContext(code: string, contextObject?: Context, options?: RunningCodeInNewContextOptions | string): any;\\n    /**\\n     * `vm.runInThisContext()` compiles `code`, runs it within the context of the\\n     * current `global` and returns the result. Running code does not have access to\\n     * local scope, but does have access to the current `global` object.\\n     *\\n     * If `options` is a string, then it specifies the filename.\\n     *\\n     * The following example illustrates using both `vm.runInThisContext()` and\\n     * the JavaScript [`eval()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval) function to run the same code:\\n     *\\n     * ```js\\n     * const vm = require('vm');\\n     * let localVar = 'initial value';\\n     *\\n     * const vmResult = vm.runInThisContext('localVar = \\\"vm\\\";');\\n     * console.log(`vmResult: '${vmResult}', localVar: '${localVar}'`);\\n     * // Prints: vmResult: 'vm', localVar: 'initial value'\\n     *\\n     * const evalResult = eval('localVar = \\\"eval\\\";');\\n     * console.log(`evalResult: '${evalResult}', localVar: '${localVar}'`);\\n     * // Prints: evalResult: 'eval', localVar: 'eval'\\n     * ```\\n     *\\n     * Because `vm.runInThisContext()` does not have access to the local scope,`localVar` is unchanged. In contrast,\\n     * [`eval()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval) _does_ have access to the\\n     * local scope, so the value `localVar` is changed. In this way`vm.runInThisContext()` is much like an [indirect `eval()` call](https://es5.github.io/#x10.4.2), e.g.`(0,eval)('code')`.\\n     *\\n     * ## Example: Running an HTTP server within a VM\\n     *\\n     * When using either `script.runInThisContext()` or {@link runInThisContext}, the code is executed within the current V8 global\\n     * context. The code passed to this VM context will have its own isolated scope.\\n     *\\n     * In order to run a simple web server using the `http` module the code passed to\\n     * the context must either call `require('http')` on its own, or have a reference\\n     * to the `http` module passed to it. For instance:\\n     *\\n     * ```js\\n     * 'use strict';\\n     * const vm = require('vm');\\n     *\\n     * const code = `\\n     * ((require) => {\\n     *   const http = require('http');\\n     *\\n     *   http.createServer((request, response) => {\\n     *     response.writeHead(200, { 'Content-Type': 'text/plain' });\\n     *     response.end('Hello World\\\\\\\\n');\\n     *   }).listen(8124);\\n     *\\n     *   console.log('Server running at http://127.0.0.1:8124/');\\n     * })`;\\n     *\\n     * vm.runInThisContext(code)(require);\\n     * ```\\n     *\\n     * The `require()` in the above case shares the state with the context it is\\n     * passed from. This may introduce risks when untrusted code is executed, e.g.\\n     * altering objects in the context in unwanted ways.\\n     * @since v0.3.1\\n     * @param code The JavaScript code to compile and run.\\n     * @return the result of the very last statement executed in the script.\\n     */\\n    function runInThisContext(code: string, options?: RunningCodeOptions | string): any;\\n    /**\\n     * Compiles the given code into the provided context (if no context is\\n     * supplied, the current context is used), and returns it wrapped inside a\\n     * function with the given `params`.\\n     * @since v10.10.0\\n     * @param code The body of the function to compile.\\n     * @param params An array of strings containing all parameters for the function.\\n     */\\n    function compileFunction(code: string, params?: ReadonlyArray<string>, options?: CompileFunctionOptions): Function & {\\n        cachedData?: Script['cachedData'] | undefined;\\n        cachedDataProduced?: Script['cachedDataProduced'] | undefined;\\n        cachedDataRejected?: Script['cachedDataRejected'] | undefined;\\n    };\\n    /**\\n     * Measure the memory known to V8 and used by all contexts known to the\\n     * current V8 isolate, or the main context.\\n     *\\n     * The format of the object that the returned Promise may resolve with is\\n     * specific to the V8 engine and may change from one version of V8 to the next.\\n     *\\n     * The returned result is different from the statistics returned by`v8.getHeapSpaceStatistics()` in that `vm.measureMemory()` measure the\\n     * memory reachable by each V8 specific contexts in the current instance of\\n     * the V8 engine, while the result of `v8.getHeapSpaceStatistics()` measure\\n     * the memory occupied by each heap space in the current V8 instance.\\n     *\\n     * ```js\\n     * const vm = require('vm');\\n     * // Measure the memory used by the main context.\\n     * vm.measureMemory({ mode: 'summary' })\\n     *   // This is the same as vm.measureMemory()\\n     *   .then((result) => {\\n     *     // The current format is:\\n     *     // {\\n     *     //   total: {\\n     *     //      jsMemoryEstimate: 2418479, jsMemoryRange: [ 2418479, 2745799 ]\\n     *     //    }\\n     *     // }\\n     *     console.log(result);\\n     *   });\\n     *\\n     * const context = vm.createContext({ a: 1 });\\n     * vm.measureMemory({ mode: 'detailed', execution: 'eager' })\\n     *   .then((result) => {\\n     *     // Reference the context here so that it won't be GC'ed\\n     *     // until the measurement is complete.\\n     *     console.log(context.a);\\n     *     // {\\n     *     //   total: {\\n     *     //     jsMemoryEstimate: 2574732,\\n     *     //     jsMemoryRange: [ 2574732, 2904372 ]\\n     *     //   },\\n     *     //   current: {\\n     *     //     jsMemoryEstimate: 2438996,\\n     *     //     jsMemoryRange: [ 2438996, 2768636 ]\\n     *     //   },\\n     *     //   other: [\\n     *     //     {\\n     *     //       jsMemoryEstimate: 135736,\\n     *     //       jsMemoryRange: [ 135736, 465376 ]\\n     *     //     }\\n     *     //   ]\\n     *     // }\\n     *     console.log(result);\\n     *   });\\n     * ```\\n     * @since v13.10.0\\n     * @experimental\\n     */\\n    function measureMemory(options?: MeasureMemoryOptions): Promise<MemoryMeasurement>;\\n\\n    interface ModuleEvaluateOptions {\\n        timeout?: RunningScriptOptions['timeout'] | undefined;\\n        breakOnSigint?: RunningScriptOptions['breakOnSigint'] | undefined;\\n    }\\n    type ModuleLinker = (specifier: string, referencingModule: Module, extra: { assert: Object }) => Module | Promise<Module>;\\n    type ModuleStatus = 'unlinked' | 'linking' | 'linked' | 'evaluating' | 'evaluated' | 'errored';\\n    class Module {\\n        /**\\n         * The specifiers of all dependencies of this module.\\n         */\\n        dependencySpecifiers: readonly string[];\\n        /**\\n         * If the `module.status` is `'errored'`, this property contains the exception thrown by the module during evaluation.\\n         * If the status is anything else, accessing this property will result in a thrown exception.\\n         */\\n        error: any;\\n        /**\\n         * The identifier of the current module, as set in the constructor.\\n         */\\n        identifier: string;\\n        context: Context;\\n        /**\\n         * The namespace object of the module. This is only available after linking (`module.link()`) has completed.\\n         */\\n        namespace: Object;\\n        /**\\n         * The current status of the module.\\n         */\\n        status: ModuleStatus;\\n        /**\\n         * Evaluate the module.\\n         *\\n         * This must be called after the module has been linked; otherwise it will reject\\n         * It could be called also when the module has already been evaluated, in which case it will either do nothing\\n         * if the initial evaluation ended in success (`module.status` is `'evaluated'`) or it will re-throw the exception\\n         * that the initial evaluation resulted in (`module.status` is `'errored'`).\\n         *\\n         * This method cannot be called while the module is being evaluated (`module.status` is `'evaluating'`).\\n         */\\n        evaluate(options?: ModuleEvaluateOptions): Promise<void>;\\n        /**\\n         * Link module dependencies. This method must be called before evaluation, and can only be called once per module.\\n         */\\n        link(linker: ModuleLinker): Promise<void>;\\n    }\\n\\n    interface SourceTextModuleOptions {\\n        /**\\n         * String used in stack traces.\\n         * @default 'vm:module(i)' where i is a context-specific ascending index.\\n         */\\n        identifier?: string | undefined;\\n        cachedData?: ScriptOptions['cachedData'] | undefined;\\n        context?: Context | undefined;\\n        lineOffset?: BaseOptions['lineOffset'] | undefined;\\n        columnOffset?: BaseOptions['columnOffset'] | undefined;\\n        /**\\n         * Called during evaluation of this module to initialize the `import.meta`.\\n         */\\n        initializeImportMeta?: ((meta: ImportMeta, module: SourceTextModule) => void) | undefined;\\n        importModuleDynamically?: ScriptOptions['importModuleDynamically'] | undefined;\\n    }\\n    class SourceTextModule extends Module {\\n        /**\\n         * Creates a new `SourceTextModule` instance.\\n         * @param code JavaScript Module code to parse\\n         */\\n        constructor(code: string, options?: SourceTextModuleOptions);\\n    }\\n\\n    interface SyntheticModuleOptions {\\n        /**\\n         * String used in stack traces.\\n         * @default 'vm:module(i)' where i is a context-specific ascending index.\\n         */\\n        identifier?: string | undefined;\\n        /**\\n         * The contextified object as returned by the `vm.createContext()` method, to compile and evaluate this module in.\\n         */\\n        context?: Context | undefined;\\n    }\\n    class SyntheticModule extends Module {\\n        /**\\n         * Creates a new `SyntheticModule` instance.\\n         * @param exportNames Array of names that will be exported from the module.\\n         * @param evaluateCallback Called when the module is evaluated.\\n         */\\n        constructor(exportNames: string[], evaluateCallback: (this: SyntheticModule) => void, options?: SyntheticModuleOptions);\\n        /**\\n         * This method is used after the module is linked to set the values of exports.\\n         * If it is called before the module is linked, an `ERR_VM_MODULE_STATUS` error will be thrown.\\n         * @param name\\n         * @param value\\n         */\\n        setExport(name: string, value: any): void;\\n    }\\n}\\ndeclare module 'node:vm' {\\n    export * from 'vm';\\n}\\n\",\"file:///node_modules/@types/node/wasi.d.ts\":\"/**\\n * The WASI API provides an implementation of the [WebAssembly System Interface](https://wasi.dev/) specification. WASI gives sandboxed WebAssembly applications access to the\\n * underlying operating system via a collection of POSIX-like functions.\\n *\\n * ```js\\n * import { readFile } from 'fs/promises';\\n * import { WASI } from 'wasi';\\n * import { argv, env } from 'process';\\n *\\n * const wasi = new WASI({\\n *   args: argv,\\n *   env,\\n *   preopens: {\\n *     '/sandbox': '/some/real/path/that/wasm/can/access'\\n *   }\\n * });\\n *\\n * // Some WASI binaries require:\\n * //   const importObject = { wasi_unstable: wasi.wasiImport };\\n * const importObject = { wasi_snapshot_preview1: wasi.wasiImport };\\n *\\n * const wasm = await WebAssembly.compile(\\n *   await readFile(new URL('./demo.wasm', import.meta.url))\\n * );\\n * const instance = await WebAssembly.instantiate(wasm, importObject);\\n *\\n * wasi.start(instance);\\n * ```\\n *\\n * To run the above example, create a new WebAssembly text format file named`demo.wat`:\\n *\\n * ```text\\n * (module\\n *     ;; Import the required fd_write WASI function which will write the given io vectors to stdout\\n *     ;; The function signature for fd_write is:\\n *     ;; (File Descriptor, *iovs, iovs_len, nwritten) -> Returns number of bytes written\\n *     (import \\\"wasi_snapshot_preview1\\\" \\\"fd_write\\\" (func $fd_write (param i32 i32 i32 i32) (result i32)))\\n *\\n *     (memory 1)\\n *     (export \\\"memory\\\" (memory 0))\\n *\\n *     ;; Write 'hello world\\\\n' to memory at an offset of 8 bytes\\n *     ;; Note the trailing newline which is required for the text to appear\\n *     (data (i32.const 8) \\\"hello world\\\\n\\\")\\n *\\n *     (func $main (export \\\"_start\\\")\\n *         ;; Creating a new io vector within linear memory\\n *         (i32.store (i32.const 0) (i32.const 8))  ;; iov.iov_base - This is a pointer to the start of the 'hello world\\\\n' string\\n *         (i32.store (i32.const 4) (i32.const 12))  ;; iov.iov_len - The length of the 'hello world\\\\n' string\\n *\\n *         (call $fd_write\\n *             (i32.const 1) ;; file_descriptor - 1 for stdout\\n *             (i32.const 0) ;; *iovs - The pointer to the iov array, which is stored at memory location 0\\n *             (i32.const 1) ;; iovs_len - We're printing 1 string stored in an iov - so one.\\n *             (i32.const 20) ;; nwritten - A place in memory to store the number of bytes written\\n *         )\\n *         drop ;; Discard the number of bytes written from the top of the stack\\n *     )\\n * )\\n * ```\\n *\\n * Use [wabt](https://github.com/WebAssembly/wabt) to compile `.wat` to `.wasm`\\n *\\n * ```console\\n * $ wat2wasm demo.wat\\n * ```\\n *\\n * The `--experimental-wasi-unstable-preview1` CLI argument is needed for this\\n * example to run.\\n * @experimental\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/wasi.js)\\n */\\ndeclare module 'wasi' {\\n    interface WASIOptions {\\n        /**\\n         * An array of strings that the WebAssembly application will\\n         * see as command line arguments. The first argument is the virtual path to the\\n         * WASI command itself.\\n         */\\n        args?: string[] | undefined;\\n        /**\\n         * An object similar to `process.env` that the WebAssembly\\n         * application will see as its environment.\\n         */\\n        env?: object | undefined;\\n        /**\\n         * This object represents the WebAssembly application's\\n         * sandbox directory structure. The string keys of `preopens` are treated as\\n         * directories within the sandbox. The corresponding values in `preopens` are\\n         * the real paths to those directories on the host machine.\\n         */\\n        preopens?: NodeJS.Dict<string> | undefined;\\n        /**\\n         * By default, WASI applications terminate the Node.js\\n         * process via the `__wasi_proc_exit()` function. Setting this option to `true`\\n         * causes `wasi.start()` to return the exit code rather than terminate the\\n         * process.\\n         * @default false\\n         */\\n        returnOnExit?: boolean | undefined;\\n        /**\\n         * The file descriptor used as standard input in the WebAssembly application.\\n         * @default 0\\n         */\\n        stdin?: number | undefined;\\n        /**\\n         * The file descriptor used as standard output in the WebAssembly application.\\n         * @default 1\\n         */\\n        stdout?: number | undefined;\\n        /**\\n         * The file descriptor used as standard error in the WebAssembly application.\\n         * @default 2\\n         */\\n        stderr?: number | undefined;\\n    }\\n    /**\\n     * The `WASI` class provides the WASI system call API and additional convenience\\n     * methods for working with WASI-based applications. Each `WASI` instance\\n     * represents a distinct sandbox environment. For security purposes, each `WASI`instance must have its command-line arguments, environment variables, and\\n     * sandbox directory structure configured explicitly.\\n     * @since v13.3.0, v12.16.0\\n     */\\n    class WASI {\\n        constructor(options?: WASIOptions);\\n        /**\\n         * Attempt to begin execution of `instance` as a WASI command by invoking its`_start()` export. If `instance` does not contain a `_start()` export, or if`instance` contains an `_initialize()`\\n         * export, then an exception is thrown.\\n         *\\n         * `start()` requires that `instance` exports a [`WebAssembly.Memory`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory) named`memory`. If\\n         * `instance` does not have a `memory` export an exception is thrown.\\n         *\\n         * If `start()` is called more than once, an exception is thrown.\\n         * @since v13.3.0, v12.16.0\\n         */\\n        start(instance: object): void; // TODO: avoid DOM dependency until WASM moved to own lib.\\n        /**\\n         * Attempt to initialize `instance` as a WASI reactor by invoking its`_initialize()` export, if it is present. If `instance` contains a `_start()`export, then an exception is thrown.\\n         *\\n         * `initialize()` requires that `instance` exports a [`WebAssembly.Memory`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory) named`memory`.\\n         * If `instance` does not have a `memory` export an exception is thrown.\\n         *\\n         * If `initialize()` is called more than once, an exception is thrown.\\n         * @since v14.6.0, v12.19.0\\n         */\\n        initialize(instance: object): void; // TODO: avoid DOM dependency until WASM moved to own lib.\\n        /**\\n         * `wasiImport` is an object that implements the WASI system call API. This object\\n         * should be passed as the `wasi_snapshot_preview1` import during the instantiation\\n         * of a [`WebAssembly.Instance`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance).\\n         * @since v13.3.0, v12.16.0\\n         */\\n        readonly wasiImport: NodeJS.Dict<any>; // TODO: Narrow to DOM types\\n    }\\n}\\ndeclare module 'node:wasi' {\\n    export * from 'wasi';\\n}\\n\",\"file:///node_modules/@types/node/worker_threads.d.ts\":\"/**\\n * The `worker_threads` module enables the use of threads that execute JavaScript\\n * in parallel. To access it:\\n *\\n * ```js\\n * const worker = require('worker_threads');\\n * ```\\n *\\n * Workers (threads) are useful for performing CPU-intensive JavaScript operations.\\n * They do not help much with I/O-intensive work. The Node.js built-in\\n * asynchronous I/O operations are more efficient than Workers can be.\\n *\\n * Unlike `child_process` or `cluster`, `worker_threads` can share memory. They do\\n * so by transferring `ArrayBuffer` instances or sharing `SharedArrayBuffer`instances.\\n *\\n * ```js\\n * const {\\n *   Worker, isMainThread, parentPort, workerData\\n * } = require('worker_threads');\\n *\\n * if (isMainThread) {\\n *   module.exports = function parseJSAsync(script) {\\n *     return new Promise((resolve, reject) => {\\n *       const worker = new Worker(__filename, {\\n *         workerData: script\\n *       });\\n *       worker.on('message', resolve);\\n *       worker.on('error', reject);\\n *       worker.on('exit', (code) => {\\n *         if (code !== 0)\\n *           reject(new Error(`Worker stopped with exit code ${code}`));\\n *       });\\n *     });\\n *   };\\n * } else {\\n *   const { parse } = require('some-js-parsing-library');\\n *   const script = workerData;\\n *   parentPort.postMessage(parse(script));\\n * }\\n * ```\\n *\\n * The above example spawns a Worker thread for each `parseJSAsync()` call. In\\n * practice, use a pool of Workers for these kinds of tasks. Otherwise, the\\n * overhead of creating Workers would likely exceed their benefit.\\n *\\n * When implementing a worker pool, use the `AsyncResource` API to inform\\n * diagnostic tools (e.g. to provide asynchronous stack traces) about the\\n * correlation between tasks and their outcomes. See `\\\"Using AsyncResource for a Worker thread pool\\\"` in the `async_hooks` documentation for an example implementation.\\n *\\n * Worker threads inherit non-process-specific options by default. Refer to `Worker constructor options` to know how to customize worker thread options,\\n * specifically `argv` and `execArgv` options.\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/worker_threads.js)\\n */\\ndeclare module 'worker_threads' {\\n    import { Blob } from 'node:buffer';\\n    import { Context } from 'node:vm';\\n    import { EventEmitter } from 'node:events';\\n    import { EventLoopUtilityFunction } from 'node:perf_hooks';\\n    import { FileHandle } from 'node:fs/promises';\\n    import { Readable, Writable } from 'node:stream';\\n    import { URL } from 'node:url';\\n    import { X509Certificate } from 'node:crypto';\\n    const isMainThread: boolean;\\n    const parentPort: null | MessagePort;\\n    const resourceLimits: ResourceLimits;\\n    const SHARE_ENV: unique symbol;\\n    const threadId: number;\\n    const workerData: any;\\n    /**\\n     * Instances of the `worker.MessageChannel` class represent an asynchronous,\\n     * two-way communications channel.\\n     * The `MessageChannel` has no methods of its own. `new MessageChannel()`yields an object with `port1` and `port2` properties, which refer to linked `MessagePort` instances.\\n     *\\n     * ```js\\n     * const { MessageChannel } = require('worker_threads');\\n     *\\n     * const { port1, port2 } = new MessageChannel();\\n     * port1.on('message', (message) => console.log('received', message));\\n     * port2.postMessage({ foo: 'bar' });\\n     * // Prints: received { foo: 'bar' } from the `port1.on('message')` listener\\n     * ```\\n     * @since v10.5.0\\n     */\\n    class MessageChannel {\\n        readonly port1: MessagePort;\\n        readonly port2: MessagePort;\\n    }\\n    interface WorkerPerformance {\\n        eventLoopUtilization: EventLoopUtilityFunction;\\n    }\\n    type TransferListItem = ArrayBuffer | MessagePort | FileHandle | X509Certificate | Blob;\\n    /**\\n     * Instances of the `worker.MessagePort` class represent one end of an\\n     * asynchronous, two-way communications channel. It can be used to transfer\\n     * structured data, memory regions and other `MessagePort`s between different `Worker` s.\\n     *\\n     * This implementation matches [browser `MessagePort`](https://developer.mozilla.org/en-US/docs/Web/API/MessagePort) s.\\n     * @since v10.5.0\\n     */\\n    class MessagePort extends EventEmitter {\\n        /**\\n         * Disables further sending of messages on either side of the connection.\\n         * This method can be called when no further communication will happen over this`MessagePort`.\\n         *\\n         * The `'close' event` is emitted on both `MessagePort` instances that\\n         * are part of the channel.\\n         * @since v10.5.0\\n         */\\n        close(): void;\\n        /**\\n         * Sends a JavaScript value to the receiving side of this channel.`value` is transferred in a way which is compatible with\\n         * the [HTML structured clone algorithm](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm).\\n         *\\n         * In particular, the significant differences to `JSON` are:\\n         *\\n         * * `value` may contain circular references.\\n         * * `value` may contain instances of builtin JS types such as `RegExp`s,`BigInt`s, `Map`s, `Set`s, etc.\\n         * * `value` may contain typed arrays, both using `ArrayBuffer`s\\n         * and `SharedArrayBuffer`s.\\n         * * `value` may contain [`WebAssembly.Module`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module) instances.\\n         * * `value` may not contain native (C++-backed) objects other than:\\n         *\\n         * ```js\\n         * const { MessageChannel } = require('worker_threads');\\n         * const { port1, port2 } = new MessageChannel();\\n         *\\n         * port1.on('message', (message) => console.log(message));\\n         *\\n         * const circularData = {};\\n         * circularData.foo = circularData;\\n         * // Prints: { foo: [Circular] }\\n         * port2.postMessage(circularData);\\n         * ```\\n         *\\n         * `transferList` may be a list of [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer), `MessagePort` and `FileHandle` objects.\\n         * After transferring, they are not usable on the sending side of the channel\\n         * anymore (even if they are not contained in `value`). Unlike with `child processes`, transferring handles such as network sockets is currently\\n         * not supported.\\n         *\\n         * If `value` contains [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) instances, those are accessible\\n         * from either thread. They cannot be listed in `transferList`.\\n         *\\n         * `value` may still contain `ArrayBuffer` instances that are not in`transferList`; in that case, the underlying memory is copied rather than moved.\\n         *\\n         * ```js\\n         * const { MessageChannel } = require('worker_threads');\\n         * const { port1, port2 } = new MessageChannel();\\n         *\\n         * port1.on('message', (message) => console.log(message));\\n         *\\n         * const uint8Array = new Uint8Array([ 1, 2, 3, 4 ]);\\n         * // This posts a copy of `uint8Array`:\\n         * port2.postMessage(uint8Array);\\n         * // This does not copy data, but renders `uint8Array` unusable:\\n         * port2.postMessage(uint8Array, [ uint8Array.buffer ]);\\n         *\\n         * // The memory for the `sharedUint8Array` is accessible from both the\\n         * // original and the copy received by `.on('message')`:\\n         * const sharedUint8Array = new Uint8Array(new SharedArrayBuffer(4));\\n         * port2.postMessage(sharedUint8Array);\\n         *\\n         * // This transfers a freshly created message port to the receiver.\\n         * // This can be used, for example, to create communication channels between\\n         * // multiple `Worker` threads that are children of the same parent thread.\\n         * const otherChannel = new MessageChannel();\\n         * port2.postMessage({ port: otherChannel.port1 }, [ otherChannel.port1 ]);\\n         * ```\\n         *\\n         * The message object is cloned immediately, and can be modified after\\n         * posting without having side effects.\\n         *\\n         * For more information on the serialization and deserialization mechanisms\\n         * behind this API, see the `serialization API of the v8 module`.\\n         * @since v10.5.0\\n         */\\n        postMessage(value: any, transferList?: ReadonlyArray<TransferListItem>): void;\\n        /**\\n         * Opposite of `unref()`. Calling `ref()` on a previously `unref()`ed port does _not_ let the program exit if it's the only active handle left (the default\\n         * behavior). If the port is `ref()`ed, calling `ref()` again has no effect.\\n         *\\n         * If listeners are attached or removed using `.on('message')`, the port\\n         * is `ref()`ed and `unref()`ed automatically depending on whether\\n         * listeners for the event exist.\\n         * @since v10.5.0\\n         */\\n        ref(): void;\\n        /**\\n         * Calling `unref()` on a port allows the thread to exit if this is the only\\n         * active handle in the event system. If the port is already `unref()`ed calling`unref()` again has no effect.\\n         *\\n         * If listeners are attached or removed using `.on('message')`, the port is`ref()`ed and `unref()`ed automatically depending on whether\\n         * listeners for the event exist.\\n         * @since v10.5.0\\n         */\\n        unref(): void;\\n        /**\\n         * Starts receiving messages on this `MessagePort`. When using this port\\n         * as an event emitter, this is called automatically once `'message'`listeners are attached.\\n         *\\n         * This method exists for parity with the Web `MessagePort` API. In Node.js,\\n         * it is only useful for ignoring messages when no event listener is present.\\n         * Node.js also diverges in its handling of `.onmessage`. Setting it\\n         * automatically calls `.start()`, but unsetting it lets messages queue up\\n         * until a new handler is set or the port is discarded.\\n         * @since v10.5.0\\n         */\\n        start(): void;\\n        addListener(event: 'close', listener: () => void): this;\\n        addListener(event: 'message', listener: (value: any) => void): this;\\n        addListener(event: 'messageerror', listener: (error: Error) => void): this;\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        emit(event: 'close'): boolean;\\n        emit(event: 'message', value: any): boolean;\\n        emit(event: 'messageerror', error: Error): boolean;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        on(event: 'close', listener: () => void): this;\\n        on(event: 'message', listener: (value: any) => void): this;\\n        on(event: 'messageerror', listener: (error: Error) => void): this;\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\n        once(event: 'close', listener: () => void): this;\\n        once(event: 'message', listener: (value: any) => void): this;\\n        once(event: 'messageerror', listener: (error: Error) => void): this;\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'close', listener: () => void): this;\\n        prependListener(event: 'message', listener: (value: any) => void): this;\\n        prependListener(event: 'messageerror', listener: (error: Error) => void): this;\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'close', listener: () => void): this;\\n        prependOnceListener(event: 'message', listener: (value: any) => void): this;\\n        prependOnceListener(event: 'messageerror', listener: (error: Error) => void): this;\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        removeListener(event: 'close', listener: () => void): this;\\n        removeListener(event: 'message', listener: (value: any) => void): this;\\n        removeListener(event: 'messageerror', listener: (error: Error) => void): this;\\n        removeListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        off(event: 'close', listener: () => void): this;\\n        off(event: 'message', listener: (value: any) => void): this;\\n        off(event: 'messageerror', listener: (error: Error) => void): this;\\n        off(event: string | symbol, listener: (...args: any[]) => void): this;\\n    }\\n    interface WorkerOptions {\\n        /**\\n         * List of arguments which would be stringified and appended to\\n         * `process.argv` in the worker. This is mostly similar to the `workerData`\\n         * but the values will be available on the global `process.argv` as if they\\n         * were passed as CLI options to the script.\\n         */\\n        argv?: any[] | undefined;\\n        env?: NodeJS.Dict<string> | typeof SHARE_ENV | undefined;\\n        eval?: boolean | undefined;\\n        workerData?: any;\\n        stdin?: boolean | undefined;\\n        stdout?: boolean | undefined;\\n        stderr?: boolean | undefined;\\n        execArgv?: string[] | undefined;\\n        resourceLimits?: ResourceLimits | undefined;\\n        /**\\n         * Additional data to send in the first worker message.\\n         */\\n        transferList?: TransferListItem[] | undefined;\\n        /**\\n         * @default true\\n         */\\n        trackUnmanagedFds?: boolean | undefined;\\n        /**\\n         * An optional `name` to be appended to the worker title\\n         * for debuggin/identification purposes, making the final title as\\n         * `[worker ${id}] ${name}`.\\n         */\\n        name?: string | undefined;\\n    }\\n    interface ResourceLimits {\\n        /**\\n         * The maximum size of a heap space for recently created objects.\\n         */\\n        maxYoungGenerationSizeMb?: number | undefined;\\n        /**\\n         * The maximum size of the main heap in MB.\\n         */\\n        maxOldGenerationSizeMb?: number | undefined;\\n        /**\\n         * The size of a pre-allocated memory range used for generated code.\\n         */\\n        codeRangeSizeMb?: number | undefined;\\n        /**\\n         * The default maximum stack size for the thread. Small values may lead to unusable Worker instances.\\n         * @default 4\\n         */\\n        stackSizeMb?: number | undefined;\\n    }\\n    /**\\n     * The `Worker` class represents an independent JavaScript execution thread.\\n     * Most Node.js APIs are available inside of it.\\n     *\\n     * Notable differences inside a Worker environment are:\\n     *\\n     * * The `process.stdin`, `process.stdout` and `process.stderr` may be redirected by the parent thread.\\n     * * The `require('worker_threads').isMainThread` property is set to `false`.\\n     * * The `require('worker_threads').parentPort` message port is available.\\n     * * `process.exit()` does not stop the whole program, just the single thread,\\n     * and `process.abort()` is not available.\\n     * * `process.chdir()` and `process` methods that set group or user ids\\n     * are not available.\\n     * * `process.env` is a copy of the parent thread's environment variables,\\n     * unless otherwise specified. Changes to one copy are not visible in other\\n     * threads, and are not visible to native add-ons (unless `worker.SHARE_ENV` is passed as the `env` option to the `Worker` constructor).\\n     * * `process.title` cannot be modified.\\n     * * Signals are not delivered through `process.on('...')`.\\n     * * Execution may stop at any point as a result of `worker.terminate()` being invoked.\\n     * * IPC channels from parent processes are not accessible.\\n     * * The `trace_events` module is not supported.\\n     * * Native add-ons can only be loaded from multiple threads if they fulfill `certain conditions`.\\n     *\\n     * Creating `Worker` instances inside of other `Worker`s is possible.\\n     *\\n     * Like [Web Workers](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API) and the `cluster module`, two-way communication can be\\n     * achieved through inter-thread message passing. Internally, a `Worker` has a\\n     * built-in pair of `MessagePort` s that are already associated with each other\\n     * when the `Worker` is created. While the `MessagePort` object on the parent side\\n     * is not directly exposed, its functionalities are exposed through `worker.postMessage()` and the `worker.on('message')` event\\n     * on the `Worker` object for the parent thread.\\n     *\\n     * To create custom messaging channels (which is encouraged over using the default\\n     * global channel because it facilitates separation of concerns), users can create\\n     * a `MessageChannel` object on either thread and pass one of the`MessagePort`s on that `MessageChannel` to the other thread through a\\n     * pre-existing channel, such as the global one.\\n     *\\n     * See `port.postMessage()` for more information on how messages are passed,\\n     * and what kind of JavaScript values can be successfully transported through\\n     * the thread barrier.\\n     *\\n     * ```js\\n     * const assert = require('assert');\\n     * const {\\n     *   Worker, MessageChannel, MessagePort, isMainThread, parentPort\\n     * } = require('worker_threads');\\n     * if (isMainThread) {\\n     *   const worker = new Worker(__filename);\\n     *   const subChannel = new MessageChannel();\\n     *   worker.postMessage({ hereIsYourPort: subChannel.port1 }, [subChannel.port1]);\\n     *   subChannel.port2.on('message', (value) => {\\n     *     console.log('received:', value);\\n     *   });\\n     * } else {\\n     *   parentPort.once('message', (value) => {\\n     *     assert(value.hereIsYourPort instanceof MessagePort);\\n     *     value.hereIsYourPort.postMessage('the worker is sending this');\\n     *     value.hereIsYourPort.close();\\n     *   });\\n     * }\\n     * ```\\n     * @since v10.5.0\\n     */\\n    class Worker extends EventEmitter {\\n        /**\\n         * If `stdin: true` was passed to the `Worker` constructor, this is a\\n         * writable stream. The data written to this stream will be made available in\\n         * the worker thread as `process.stdin`.\\n         * @since v10.5.0\\n         */\\n        readonly stdin: Writable | null;\\n        /**\\n         * This is a readable stream which contains data written to `process.stdout` inside the worker thread. If `stdout: true` was not passed to the `Worker` constructor, then data is piped to the\\n         * parent thread's `process.stdout` stream.\\n         * @since v10.5.0\\n         */\\n        readonly stdout: Readable;\\n        /**\\n         * This is a readable stream which contains data written to `process.stderr` inside the worker thread. If `stderr: true` was not passed to the `Worker` constructor, then data is piped to the\\n         * parent thread's `process.stderr` stream.\\n         * @since v10.5.0\\n         */\\n        readonly stderr: Readable;\\n        /**\\n         * An integer identifier for the referenced thread. Inside the worker thread,\\n         * it is available as `require('worker_threads').threadId`.\\n         * This value is unique for each `Worker` instance inside a single process.\\n         * @since v10.5.0\\n         */\\n        readonly threadId: number;\\n        /**\\n         * Provides the set of JS engine resource constraints for this Worker thread.\\n         * If the `resourceLimits` option was passed to the `Worker` constructor,\\n         * this matches its values.\\n         *\\n         * If the worker has stopped, the return value is an empty object.\\n         * @since v13.2.0, v12.16.0\\n         */\\n        readonly resourceLimits?: ResourceLimits | undefined;\\n        /**\\n         * An object that can be used to query performance information from a worker\\n         * instance. Similar to `perf_hooks.performance`.\\n         * @since v15.1.0, v14.17.0, v12.22.0\\n         */\\n        readonly performance: WorkerPerformance;\\n        /**\\n         * @param filename  The path to the Worker\u2019s main script or module.\\n         *                  Must be either an absolute path or a relative path (i.e. relative to the current working directory) starting with ./ or ../,\\n         *                  or a WHATWG URL object using file: protocol. If options.eval is true, this is a string containing JavaScript code rather than a path.\\n         */\\n        constructor(filename: string | URL, options?: WorkerOptions);\\n        /**\\n         * Send a message to the worker that is received via `require('worker_threads').parentPort.on('message')`.\\n         * See `port.postMessage()` for more details.\\n         * @since v10.5.0\\n         */\\n        postMessage(value: any, transferList?: ReadonlyArray<TransferListItem>): void;\\n        /**\\n         * Opposite of `unref()`, calling `ref()` on a previously `unref()`ed worker does _not_ let the program exit if it's the only active handle left (the default\\n         * behavior). If the worker is `ref()`ed, calling `ref()` again has\\n         * no effect.\\n         * @since v10.5.0\\n         */\\n        ref(): void;\\n        /**\\n         * Calling `unref()` on a worker allows the thread to exit if this is the only\\n         * active handle in the event system. If the worker is already `unref()`ed calling`unref()` again has no effect.\\n         * @since v10.5.0\\n         */\\n        unref(): void;\\n        /**\\n         * Stop all JavaScript execution in the worker thread as soon as possible.\\n         * Returns a Promise for the exit code that is fulfilled when the `'exit' event` is emitted.\\n         * @since v10.5.0\\n         */\\n        terminate(): Promise<number>;\\n        /**\\n         * Returns a readable stream for a V8 snapshot of the current state of the Worker.\\n         * See `v8.getHeapSnapshot()` for more details.\\n         *\\n         * If the Worker thread is no longer running, which may occur before the `'exit' event` is emitted, the returned `Promise` is rejected\\n         * immediately with an `ERR_WORKER_NOT_RUNNING` error.\\n         * @since v13.9.0, v12.17.0\\n         * @return A promise for a Readable Stream containing a V8 heap snapshot\\n         */\\n        getHeapSnapshot(): Promise<Readable>;\\n        addListener(event: 'error', listener: (err: Error) => void): this;\\n        addListener(event: 'exit', listener: (exitCode: number) => void): this;\\n        addListener(event: 'message', listener: (value: any) => void): this;\\n        addListener(event: 'messageerror', listener: (error: Error) => void): this;\\n        addListener(event: 'online', listener: () => void): this;\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        emit(event: 'error', err: Error): boolean;\\n        emit(event: 'exit', exitCode: number): boolean;\\n        emit(event: 'message', value: any): boolean;\\n        emit(event: 'messageerror', error: Error): boolean;\\n        emit(event: 'online'): boolean;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        on(event: 'error', listener: (err: Error) => void): this;\\n        on(event: 'exit', listener: (exitCode: number) => void): this;\\n        on(event: 'message', listener: (value: any) => void): this;\\n        on(event: 'messageerror', listener: (error: Error) => void): this;\\n        on(event: 'online', listener: () => void): this;\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\n        once(event: 'error', listener: (err: Error) => void): this;\\n        once(event: 'exit', listener: (exitCode: number) => void): this;\\n        once(event: 'message', listener: (value: any) => void): this;\\n        once(event: 'messageerror', listener: (error: Error) => void): this;\\n        once(event: 'online', listener: () => void): this;\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'error', listener: (err: Error) => void): this;\\n        prependListener(event: 'exit', listener: (exitCode: number) => void): this;\\n        prependListener(event: 'message', listener: (value: any) => void): this;\\n        prependListener(event: 'messageerror', listener: (error: Error) => void): this;\\n        prependListener(event: 'online', listener: () => void): this;\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n        prependOnceListener(event: 'exit', listener: (exitCode: number) => void): this;\\n        prependOnceListener(event: 'message', listener: (value: any) => void): this;\\n        prependOnceListener(event: 'messageerror', listener: (error: Error) => void): this;\\n        prependOnceListener(event: 'online', listener: () => void): this;\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        removeListener(event: 'error', listener: (err: Error) => void): this;\\n        removeListener(event: 'exit', listener: (exitCode: number) => void): this;\\n        removeListener(event: 'message', listener: (value: any) => void): this;\\n        removeListener(event: 'messageerror', listener: (error: Error) => void): this;\\n        removeListener(event: 'online', listener: () => void): this;\\n        removeListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        off(event: 'error', listener: (err: Error) => void): this;\\n        off(event: 'exit', listener: (exitCode: number) => void): this;\\n        off(event: 'message', listener: (value: any) => void): this;\\n        off(event: 'messageerror', listener: (error: Error) => void): this;\\n        off(event: 'online', listener: () => void): this;\\n        off(event: string | symbol, listener: (...args: any[]) => void): this;\\n    }\\n    interface BroadcastChannel extends NodeJS.RefCounted {}\\n    /**\\n     * Instances of `BroadcastChannel` allow asynchronous one-to-many communication\\n     * with all other `BroadcastChannel` instances bound to the same channel name.\\n     *\\n     * ```js\\n     * 'use strict';\\n     *\\n     * const {\\n     *   isMainThread,\\n     *   BroadcastChannel,\\n     *   Worker\\n     * } = require('worker_threads');\\n     *\\n     * const bc = new BroadcastChannel('hello');\\n     *\\n     * if (isMainThread) {\\n     *   let c = 0;\\n     *   bc.onmessage = (event) => {\\n     *     console.log(event.data);\\n     *     if (++c === 10) bc.close();\\n     *   };\\n     *   for (let n = 0; n < 10; n++)\\n     *     new Worker(__filename);\\n     * } else {\\n     *   bc.postMessage('hello from every worker');\\n     *   bc.close();\\n     * }\\n     * ```\\n     * @since v15.4.0\\n     */\\n    class BroadcastChannel {\\n        readonly name: string;\\n        /**\\n         * Invoked with a single \\\\`MessageEvent\\\\` argument when a message is received.\\n         * @since v15.4.0\\n         */\\n        onmessage: (message: unknown) => void;\\n        /**\\n         * Invoked with a received message cannot be deserialized.\\n         * @since v15.4.0\\n         */\\n        onmessageerror: (message: unknown) => void;\\n        constructor(name: string);\\n        /**\\n         * Closes the `BroadcastChannel` connection.\\n         * @since v15.4.0\\n         */\\n        close(): void;\\n        /**\\n         * @since v15.4.0\\n         * @param message Any cloneable JavaScript value.\\n         */\\n        postMessage(message: unknown): void;\\n    }\\n    /**\\n     * Mark an object as not transferable. If `object` occurs in the transfer list of\\n     * a `port.postMessage()` call, it is ignored.\\n     *\\n     * In particular, this makes sense for objects that can be cloned, rather than\\n     * transferred, and which are used by other objects on the sending side.\\n     * For example, Node.js marks the `ArrayBuffer`s it uses for its `Buffer pool` with this.\\n     *\\n     * This operation cannot be undone.\\n     *\\n     * ```js\\n     * const { MessageChannel, markAsUntransferable } = require('worker_threads');\\n     *\\n     * const pooledBuffer = new ArrayBuffer(8);\\n     * const typedArray1 = new Uint8Array(pooledBuffer);\\n     * const typedArray2 = new Float64Array(pooledBuffer);\\n     *\\n     * markAsUntransferable(pooledBuffer);\\n     *\\n     * const { port1 } = new MessageChannel();\\n     * port1.postMessage(typedArray1, [ typedArray1.buffer ]);\\n     *\\n     * // The following line prints the contents of typedArray1 -- it still owns\\n     * // its memory and has been cloned, not transferred. Without\\n     * // `markAsUntransferable()`, this would print an empty Uint8Array.\\n     * // typedArray2 is intact as well.\\n     * console.log(typedArray1);\\n     * console.log(typedArray2);\\n     * ```\\n     *\\n     * There is no equivalent to this API in browsers.\\n     * @since v14.5.0, v12.19.0\\n     */\\n    function markAsUntransferable(object: object): void;\\n    /**\\n     * Transfer a `MessagePort` to a different `vm` Context. The original `port`object is rendered unusable, and the returned `MessagePort` instance\\n     * takes its place.\\n     *\\n     * The returned `MessagePort` is an object in the target context and\\n     * inherits from its global `Object` class. Objects passed to the [`port.onmessage()`](https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage) listener are also created in the\\n     * target context\\n     * and inherit from its global `Object` class.\\n     *\\n     * However, the created `MessagePort` no longer inherits from [`EventTarget`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget), and only\\n     * [`port.onmessage()`](https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage) can be used to receive\\n     * events using it.\\n     * @since v11.13.0\\n     * @param port The message port to transfer.\\n     * @param contextifiedSandbox A `contextified` object as returned by the `vm.createContext()` method.\\n     */\\n    function moveMessagePortToContext(port: MessagePort, contextifiedSandbox: Context): MessagePort;\\n    /**\\n     * Receive a single message from a given `MessagePort`. If no message is available,`undefined` is returned, otherwise an object with a single `message` property\\n     * that contains the message payload, corresponding to the oldest message in the`MessagePort`\u2019s queue.\\n     *\\n     * ```js\\n     * const { MessageChannel, receiveMessageOnPort } = require('worker_threads');\\n     * const { port1, port2 } = new MessageChannel();\\n     * port1.postMessage({ hello: 'world' });\\n     *\\n     * console.log(receiveMessageOnPort(port2));\\n     * // Prints: { message: { hello: 'world' } }\\n     * console.log(receiveMessageOnPort(port2));\\n     * // Prints: undefined\\n     * ```\\n     *\\n     * When this function is used, no `'message'` event is emitted and the`onmessage` listener is not invoked.\\n     * @since v12.3.0\\n     */\\n    function receiveMessageOnPort(port: MessagePort):\\n        | {\\n              message: any;\\n          }\\n        | undefined;\\n    type Serializable = string | object | number | boolean | bigint;\\n    /**\\n     * Within a worker thread, `worker.getEnvironmentData()` returns a clone\\n     * of data passed to the spawning thread's `worker.setEnvironmentData()`.\\n     * Every new `Worker` receives its own copy of the environment data\\n     * automatically.\\n     *\\n     * ```js\\n     * const {\\n     *   Worker,\\n     *   isMainThread,\\n     *   setEnvironmentData,\\n     *   getEnvironmentData,\\n     * } = require('worker_threads');\\n     *\\n     * if (isMainThread) {\\n     *   setEnvironmentData('Hello', 'World!');\\n     *   const worker = new Worker(__filename);\\n     * } else {\\n     *   console.log(getEnvironmentData('Hello'));  // Prints 'World!'.\\n     * }\\n     * ```\\n     * @since v15.12.0, v14.18.0\\n     * @param key Any arbitrary, cloneable JavaScript value that can be used as a {Map} key.\\n     */\\n    function getEnvironmentData(key: Serializable): Serializable;\\n    /**\\n     * The `worker.setEnvironmentData()` API sets the content of`worker.getEnvironmentData()` in the current thread and all new `Worker`instances spawned from the current context.\\n     * @since v15.12.0, v14.18.0\\n     * @param key Any arbitrary, cloneable JavaScript value that can be used as a {Map} key.\\n     * @param value Any arbitrary, cloneable JavaScript value that will be cloned and passed automatically to all new `Worker` instances. If `value` is passed as `undefined`, any previously set value\\n     * for the `key` will be deleted.\\n     */\\n    function setEnvironmentData(key: Serializable, value: Serializable): void;\\n\\n    import {\\n        BroadcastChannel as _BroadcastChannel,\\n        MessageChannel as _MessageChannel,\\n        MessagePort as _MessagePort,\\n    } from 'worker_threads';\\n    global {\\n        /**\\n         * `BroadcastChannel` class is a global reference for `require('worker_threads').BroadcastChannel`\\n         * https://nodejs.org/api/globals.html#broadcastchannel\\n         * @since v18.0.0\\n         */\\n        var BroadcastChannel: typeof globalThis extends {\\n            onmessage: any;\\n            BroadcastChannel: infer T;\\n        }\\n            ? T\\n            : typeof _BroadcastChannel;\\n\\n        /**\\n         * `MessageChannel` class is a global reference for `require('worker_threads').MessageChannel`\\n         * https://nodejs.org/api/globals.html#messagechannel\\n         * @since v15.0.0\\n         */\\n        var MessageChannel: typeof globalThis extends {\\n            onmessage: any;\\n            MessageChannel: infer T;\\n        }\\n            ? T\\n            : typeof _MessageChannel;\\n\\n        /**\\n         * `MessagePort` class is a global reference for `require('worker_threads').MessagePort`\\n         * https://nodejs.org/api/globals.html#messageport\\n         * @since v15.0.0\\n         */\\n         var MessagePort: typeof globalThis extends {\\n            onmessage: any;\\n            MessagePort: infer T;\\n        }\\n            ? T\\n            : typeof _MessagePort;\\n    }\\n}\\ndeclare module 'node:worker_threads' {\\n    export * from 'worker_threads';\\n}\\n\",\"file:///node_modules/@types/node/zlib.d.ts\":\"/**\\n * The `zlib` module provides compression functionality implemented using Gzip,\\n * Deflate/Inflate, and Brotli.\\n *\\n * To access it:\\n *\\n * ```js\\n * const zlib = require('zlib');\\n * ```\\n *\\n * Compression and decompression are built around the Node.js `Streams API`.\\n *\\n * Compressing or decompressing a stream (such as a file) can be accomplished by\\n * piping the source stream through a `zlib` `Transform` stream into a destination\\n * stream:\\n *\\n * ```js\\n * const { createGzip } = require('zlib');\\n * const { pipeline } = require('stream');\\n * const {\\n *   createReadStream,\\n *   createWriteStream\\n * } = require('fs');\\n *\\n * const gzip = createGzip();\\n * const source = createReadStream('input.txt');\\n * const destination = createWriteStream('input.txt.gz');\\n *\\n * pipeline(source, gzip, destination, (err) => {\\n *   if (err) {\\n *     console.error('An error occurred:', err);\\n *     process.exitCode = 1;\\n *   }\\n * });\\n *\\n * // Or, Promisified\\n *\\n * const { promisify } = require('util');\\n * const pipe = promisify(pipeline);\\n *\\n * async function do_gzip(input, output) {\\n *   const gzip = createGzip();\\n *   const source = createReadStream(input);\\n *   const destination = createWriteStream(output);\\n *   await pipe(source, gzip, destination);\\n * }\\n *\\n * do_gzip('input.txt', 'input.txt.gz')\\n *   .catch((err) => {\\n *     console.error('An error occurred:', err);\\n *     process.exitCode = 1;\\n *   });\\n * ```\\n *\\n * It is also possible to compress or decompress data in a single step:\\n *\\n * ```js\\n * const { deflate, unzip } = require('zlib');\\n *\\n * const input = '.................................';\\n * deflate(input, (err, buffer) => {\\n *   if (err) {\\n *     console.error('An error occurred:', err);\\n *     process.exitCode = 1;\\n *   }\\n *   console.log(buffer.toString('base64'));\\n * });\\n *\\n * const buffer = Buffer.from('eJzT0yMAAGTvBe8=', 'base64');\\n * unzip(buffer, (err, buffer) => {\\n *   if (err) {\\n *     console.error('An error occurred:', err);\\n *     process.exitCode = 1;\\n *   }\\n *   console.log(buffer.toString());\\n * });\\n *\\n * // Or, Promisified\\n *\\n * const { promisify } = require('util');\\n * const do_unzip = promisify(unzip);\\n *\\n * do_unzip(buffer)\\n *   .then((buf) => console.log(buf.toString()))\\n *   .catch((err) => {\\n *     console.error('An error occurred:', err);\\n *     process.exitCode = 1;\\n *   });\\n * ```\\n * @since v0.5.8\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/zlib.js)\\n */\\ndeclare module 'zlib' {\\n    import * as stream from 'node:stream';\\n    interface ZlibOptions {\\n        /**\\n         * @default constants.Z_NO_FLUSH\\n         */\\n        flush?: number | undefined;\\n        /**\\n         * @default constants.Z_FINISH\\n         */\\n        finishFlush?: number | undefined;\\n        /**\\n         * @default 16*1024\\n         */\\n        chunkSize?: number | undefined;\\n        windowBits?: number | undefined;\\n        level?: number | undefined; // compression only\\n        memLevel?: number | undefined; // compression only\\n        strategy?: number | undefined; // compression only\\n        dictionary?: NodeJS.ArrayBufferView | ArrayBuffer | undefined; // deflate/inflate only, empty dictionary by default\\n        info?: boolean | undefined;\\n        maxOutputLength?: number | undefined;\\n    }\\n    interface BrotliOptions {\\n        /**\\n         * @default constants.BROTLI_OPERATION_PROCESS\\n         */\\n        flush?: number | undefined;\\n        /**\\n         * @default constants.BROTLI_OPERATION_FINISH\\n         */\\n        finishFlush?: number | undefined;\\n        /**\\n         * @default 16*1024\\n         */\\n        chunkSize?: number | undefined;\\n        params?:\\n            | {\\n                  /**\\n                   * Each key is a `constants.BROTLI_*` constant.\\n                   */\\n                  [key: number]: boolean | number;\\n              }\\n            | undefined;\\n        maxOutputLength?: number | undefined;\\n    }\\n    interface Zlib {\\n        /** @deprecated Use bytesWritten instead. */\\n        readonly bytesRead: number;\\n        readonly bytesWritten: number;\\n        shell?: boolean | string | undefined;\\n        close(callback?: () => void): void;\\n        flush(kind?: number, callback?: () => void): void;\\n        flush(callback?: () => void): void;\\n    }\\n    interface ZlibParams {\\n        params(level: number, strategy: number, callback: () => void): void;\\n    }\\n    interface ZlibReset {\\n        reset(): void;\\n    }\\n    interface BrotliCompress extends stream.Transform, Zlib {}\\n    interface BrotliDecompress extends stream.Transform, Zlib {}\\n    interface Gzip extends stream.Transform, Zlib {}\\n    interface Gunzip extends stream.Transform, Zlib {}\\n    interface Deflate extends stream.Transform, Zlib, ZlibReset, ZlibParams {}\\n    interface Inflate extends stream.Transform, Zlib, ZlibReset {}\\n    interface DeflateRaw extends stream.Transform, Zlib, ZlibReset, ZlibParams {}\\n    interface InflateRaw extends stream.Transform, Zlib, ZlibReset {}\\n    interface Unzip extends stream.Transform, Zlib {}\\n    /**\\n     * Creates and returns a new `BrotliCompress` object.\\n     * @since v11.7.0, v10.16.0\\n     */\\n    function createBrotliCompress(options?: BrotliOptions): BrotliCompress;\\n    /**\\n     * Creates and returns a new `BrotliDecompress` object.\\n     * @since v11.7.0, v10.16.0\\n     */\\n    function createBrotliDecompress(options?: BrotliOptions): BrotliDecompress;\\n    /**\\n     * Creates and returns a new `Gzip` object.\\n     * See `example`.\\n     * @since v0.5.8\\n     */\\n    function createGzip(options?: ZlibOptions): Gzip;\\n    /**\\n     * Creates and returns a new `Gunzip` object.\\n     * @since v0.5.8\\n     */\\n    function createGunzip(options?: ZlibOptions): Gunzip;\\n    /**\\n     * Creates and returns a new `Deflate` object.\\n     * @since v0.5.8\\n     */\\n    function createDeflate(options?: ZlibOptions): Deflate;\\n    /**\\n     * Creates and returns a new `Inflate` object.\\n     * @since v0.5.8\\n     */\\n    function createInflate(options?: ZlibOptions): Inflate;\\n    /**\\n     * Creates and returns a new `DeflateRaw` object.\\n     *\\n     * An upgrade of zlib from 1.2.8 to 1.2.11 changed behavior when `windowBits`is set to 8 for raw deflate streams. zlib would automatically set `windowBits`to 9 if was initially set to 8\\\\. Newer\\n     * versions of zlib will throw an exception,\\n     * so Node.js restored the original behavior of upgrading a value of 8 to 9,\\n     * since passing `windowBits = 9` to zlib actually results in a compressed stream\\n     * that effectively uses an 8-bit window only.\\n     * @since v0.5.8\\n     */\\n    function createDeflateRaw(options?: ZlibOptions): DeflateRaw;\\n    /**\\n     * Creates and returns a new `InflateRaw` object.\\n     * @since v0.5.8\\n     */\\n    function createInflateRaw(options?: ZlibOptions): InflateRaw;\\n    /**\\n     * Creates and returns a new `Unzip` object.\\n     * @since v0.5.8\\n     */\\n    function createUnzip(options?: ZlibOptions): Unzip;\\n    type InputType = string | ArrayBuffer | NodeJS.ArrayBufferView;\\n    type CompressCallback = (error: Error | null, result: Buffer) => void;\\n    /**\\n     * @since v11.7.0, v10.16.0\\n     */\\n    function brotliCompress(buf: InputType, options: BrotliOptions, callback: CompressCallback): void;\\n    function brotliCompress(buf: InputType, callback: CompressCallback): void;\\n    namespace brotliCompress {\\n        function __promisify__(buffer: InputType, options?: BrotliOptions): Promise<Buffer>;\\n    }\\n    /**\\n     * Compress a chunk of data with `BrotliCompress`.\\n     * @since v11.7.0, v10.16.0\\n     */\\n    function brotliCompressSync(buf: InputType, options?: BrotliOptions): Buffer;\\n    /**\\n     * @since v11.7.0, v10.16.0\\n     */\\n    function brotliDecompress(buf: InputType, options: BrotliOptions, callback: CompressCallback): void;\\n    function brotliDecompress(buf: InputType, callback: CompressCallback): void;\\n    namespace brotliDecompress {\\n        function __promisify__(buffer: InputType, options?: BrotliOptions): Promise<Buffer>;\\n    }\\n    /**\\n     * Decompress a chunk of data with `BrotliDecompress`.\\n     * @since v11.7.0, v10.16.0\\n     */\\n    function brotliDecompressSync(buf: InputType, options?: BrotliOptions): Buffer;\\n    /**\\n     * @since v0.6.0\\n     */\\n    function deflate(buf: InputType, callback: CompressCallback): void;\\n    function deflate(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\\n    namespace deflate {\\n        function __promisify__(buffer: InputType, options?: ZlibOptions): Promise<Buffer>;\\n    }\\n    /**\\n     * Compress a chunk of data with `Deflate`.\\n     * @since v0.11.12\\n     */\\n    function deflateSync(buf: InputType, options?: ZlibOptions): Buffer;\\n    /**\\n     * @since v0.6.0\\n     */\\n    function deflateRaw(buf: InputType, callback: CompressCallback): void;\\n    function deflateRaw(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\\n    namespace deflateRaw {\\n        function __promisify__(buffer: InputType, options?: ZlibOptions): Promise<Buffer>;\\n    }\\n    /**\\n     * Compress a chunk of data with `DeflateRaw`.\\n     * @since v0.11.12\\n     */\\n    function deflateRawSync(buf: InputType, options?: ZlibOptions): Buffer;\\n    /**\\n     * @since v0.6.0\\n     */\\n    function gzip(buf: InputType, callback: CompressCallback): void;\\n    function gzip(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\\n    namespace gzip {\\n        function __promisify__(buffer: InputType, options?: ZlibOptions): Promise<Buffer>;\\n    }\\n    /**\\n     * Compress a chunk of data with `Gzip`.\\n     * @since v0.11.12\\n     */\\n    function gzipSync(buf: InputType, options?: ZlibOptions): Buffer;\\n    /**\\n     * @since v0.6.0\\n     */\\n    function gunzip(buf: InputType, callback: CompressCallback): void;\\n    function gunzip(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\\n    namespace gunzip {\\n        function __promisify__(buffer: InputType, options?: ZlibOptions): Promise<Buffer>;\\n    }\\n    /**\\n     * Decompress a chunk of data with `Gunzip`.\\n     * @since v0.11.12\\n     */\\n    function gunzipSync(buf: InputType, options?: ZlibOptions): Buffer;\\n    /**\\n     * @since v0.6.0\\n     */\\n    function inflate(buf: InputType, callback: CompressCallback): void;\\n    function inflate(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\\n    namespace inflate {\\n        function __promisify__(buffer: InputType, options?: ZlibOptions): Promise<Buffer>;\\n    }\\n    /**\\n     * Decompress a chunk of data with `Inflate`.\\n     * @since v0.11.12\\n     */\\n    function inflateSync(buf: InputType, options?: ZlibOptions): Buffer;\\n    /**\\n     * @since v0.6.0\\n     */\\n    function inflateRaw(buf: InputType, callback: CompressCallback): void;\\n    function inflateRaw(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\\n    namespace inflateRaw {\\n        function __promisify__(buffer: InputType, options?: ZlibOptions): Promise<Buffer>;\\n    }\\n    /**\\n     * Decompress a chunk of data with `InflateRaw`.\\n     * @since v0.11.12\\n     */\\n    function inflateRawSync(buf: InputType, options?: ZlibOptions): Buffer;\\n    /**\\n     * @since v0.6.0\\n     */\\n    function unzip(buf: InputType, callback: CompressCallback): void;\\n    function unzip(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\\n    namespace unzip {\\n        function __promisify__(buffer: InputType, options?: ZlibOptions): Promise<Buffer>;\\n    }\\n    /**\\n     * Decompress a chunk of data with `Unzip`.\\n     * @since v0.11.12\\n     */\\n    function unzipSync(buf: InputType, options?: ZlibOptions): Buffer;\\n    namespace constants {\\n        const BROTLI_DECODE: number;\\n        const BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES: number;\\n        const BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP: number;\\n        const BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES: number;\\n        const BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1: number;\\n        const BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2: number;\\n        const BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS: number;\\n        const BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_CL_SPACE: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_DICTIONARY: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_DISTANCE: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_PADDING_1: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_PADDING_2: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_RESERVED: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_TRANSFORM: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS: number;\\n        const BROTLI_DECODER_ERROR_INVALID_ARGUMENTS: number;\\n        const BROTLI_DECODER_ERROR_UNREACHABLE: number;\\n        const BROTLI_DECODER_NEEDS_MORE_INPUT: number;\\n        const BROTLI_DECODER_NEEDS_MORE_OUTPUT: number;\\n        const BROTLI_DECODER_NO_ERROR: number;\\n        const BROTLI_DECODER_PARAM_DISABLE_RING_BUFFER_REALLOCATION: number;\\n        const BROTLI_DECODER_PARAM_LARGE_WINDOW: number;\\n        const BROTLI_DECODER_RESULT_ERROR: number;\\n        const BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT: number;\\n        const BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT: number;\\n        const BROTLI_DECODER_RESULT_SUCCESS: number;\\n        const BROTLI_DECODER_SUCCESS: number;\\n        const BROTLI_DEFAULT_MODE: number;\\n        const BROTLI_DEFAULT_QUALITY: number;\\n        const BROTLI_DEFAULT_WINDOW: number;\\n        const BROTLI_ENCODE: number;\\n        const BROTLI_LARGE_MAX_WINDOW_BITS: number;\\n        const BROTLI_MAX_INPUT_BLOCK_BITS: number;\\n        const BROTLI_MAX_QUALITY: number;\\n        const BROTLI_MAX_WINDOW_BITS: number;\\n        const BROTLI_MIN_INPUT_BLOCK_BITS: number;\\n        const BROTLI_MIN_QUALITY: number;\\n        const BROTLI_MIN_WINDOW_BITS: number;\\n        const BROTLI_MODE_FONT: number;\\n        const BROTLI_MODE_GENERIC: number;\\n        const BROTLI_MODE_TEXT: number;\\n        const BROTLI_OPERATION_EMIT_METADATA: number;\\n        const BROTLI_OPERATION_FINISH: number;\\n        const BROTLI_OPERATION_FLUSH: number;\\n        const BROTLI_OPERATION_PROCESS: number;\\n        const BROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING: number;\\n        const BROTLI_PARAM_LARGE_WINDOW: number;\\n        const BROTLI_PARAM_LGBLOCK: number;\\n        const BROTLI_PARAM_LGWIN: number;\\n        const BROTLI_PARAM_MODE: number;\\n        const BROTLI_PARAM_NDIRECT: number;\\n        const BROTLI_PARAM_NPOSTFIX: number;\\n        const BROTLI_PARAM_QUALITY: number;\\n        const BROTLI_PARAM_SIZE_HINT: number;\\n        const DEFLATE: number;\\n        const DEFLATERAW: number;\\n        const GUNZIP: number;\\n        const GZIP: number;\\n        const INFLATE: number;\\n        const INFLATERAW: number;\\n        const UNZIP: number;\\n        // Allowed flush values.\\n        const Z_NO_FLUSH: number;\\n        const Z_PARTIAL_FLUSH: number;\\n        const Z_SYNC_FLUSH: number;\\n        const Z_FULL_FLUSH: number;\\n        const Z_FINISH: number;\\n        const Z_BLOCK: number;\\n        const Z_TREES: number;\\n        // Return codes for the compression/decompression functions.\\n        // Negative values are errors, positive values are used for special but normal events.\\n        const Z_OK: number;\\n        const Z_STREAM_END: number;\\n        const Z_NEED_DICT: number;\\n        const Z_ERRNO: number;\\n        const Z_STREAM_ERROR: number;\\n        const Z_DATA_ERROR: number;\\n        const Z_MEM_ERROR: number;\\n        const Z_BUF_ERROR: number;\\n        const Z_VERSION_ERROR: number;\\n        // Compression levels.\\n        const Z_NO_COMPRESSION: number;\\n        const Z_BEST_SPEED: number;\\n        const Z_BEST_COMPRESSION: number;\\n        const Z_DEFAULT_COMPRESSION: number;\\n        // Compression strategy.\\n        const Z_FILTERED: number;\\n        const Z_HUFFMAN_ONLY: number;\\n        const Z_RLE: number;\\n        const Z_FIXED: number;\\n        const Z_DEFAULT_STRATEGY: number;\\n        const Z_DEFAULT_WINDOWBITS: number;\\n        const Z_MIN_WINDOWBITS: number;\\n        const Z_MAX_WINDOWBITS: number;\\n        const Z_MIN_CHUNK: number;\\n        const Z_MAX_CHUNK: number;\\n        const Z_DEFAULT_CHUNK: number;\\n        const Z_MIN_MEMLEVEL: number;\\n        const Z_MAX_MEMLEVEL: number;\\n        const Z_DEFAULT_MEMLEVEL: number;\\n        const Z_MIN_LEVEL: number;\\n        const Z_MAX_LEVEL: number;\\n        const Z_DEFAULT_LEVEL: number;\\n        const ZLIB_VERNUM: number;\\n    }\\n    // Allowed flush values.\\n    /** @deprecated Use `constants.Z_NO_FLUSH` */\\n    const Z_NO_FLUSH: number;\\n    /** @deprecated Use `constants.Z_PARTIAL_FLUSH` */\\n    const Z_PARTIAL_FLUSH: number;\\n    /** @deprecated Use `constants.Z_SYNC_FLUSH` */\\n    const Z_SYNC_FLUSH: number;\\n    /** @deprecated Use `constants.Z_FULL_FLUSH` */\\n    const Z_FULL_FLUSH: number;\\n    /** @deprecated Use `constants.Z_FINISH` */\\n    const Z_FINISH: number;\\n    /** @deprecated Use `constants.Z_BLOCK` */\\n    const Z_BLOCK: number;\\n    /** @deprecated Use `constants.Z_TREES` */\\n    const Z_TREES: number;\\n    // Return codes for the compression/decompression functions.\\n    // Negative values are errors, positive values are used for special but normal events.\\n    /** @deprecated Use `constants.Z_OK` */\\n    const Z_OK: number;\\n    /** @deprecated Use `constants.Z_STREAM_END` */\\n    const Z_STREAM_END: number;\\n    /** @deprecated Use `constants.Z_NEED_DICT` */\\n    const Z_NEED_DICT: number;\\n    /** @deprecated Use `constants.Z_ERRNO` */\\n    const Z_ERRNO: number;\\n    /** @deprecated Use `constants.Z_STREAM_ERROR` */\\n    const Z_STREAM_ERROR: number;\\n    /** @deprecated Use `constants.Z_DATA_ERROR` */\\n    const Z_DATA_ERROR: number;\\n    /** @deprecated Use `constants.Z_MEM_ERROR` */\\n    const Z_MEM_ERROR: number;\\n    /** @deprecated Use `constants.Z_BUF_ERROR` */\\n    const Z_BUF_ERROR: number;\\n    /** @deprecated Use `constants.Z_VERSION_ERROR` */\\n    const Z_VERSION_ERROR: number;\\n    // Compression levels.\\n    /** @deprecated Use `constants.Z_NO_COMPRESSION` */\\n    const Z_NO_COMPRESSION: number;\\n    /** @deprecated Use `constants.Z_BEST_SPEED` */\\n    const Z_BEST_SPEED: number;\\n    /** @deprecated Use `constants.Z_BEST_COMPRESSION` */\\n    const Z_BEST_COMPRESSION: number;\\n    /** @deprecated Use `constants.Z_DEFAULT_COMPRESSION` */\\n    const Z_DEFAULT_COMPRESSION: number;\\n    // Compression strategy.\\n    /** @deprecated Use `constants.Z_FILTERED` */\\n    const Z_FILTERED: number;\\n    /** @deprecated Use `constants.Z_HUFFMAN_ONLY` */\\n    const Z_HUFFMAN_ONLY: number;\\n    /** @deprecated Use `constants.Z_RLE` */\\n    const Z_RLE: number;\\n    /** @deprecated Use `constants.Z_FIXED` */\\n    const Z_FIXED: number;\\n    /** @deprecated Use `constants.Z_DEFAULT_STRATEGY` */\\n    const Z_DEFAULT_STRATEGY: number;\\n    /** @deprecated */\\n    const Z_BINARY: number;\\n    /** @deprecated */\\n    const Z_TEXT: number;\\n    /** @deprecated */\\n    const Z_ASCII: number;\\n    /** @deprecated  */\\n    const Z_UNKNOWN: number;\\n    /** @deprecated */\\n    const Z_DEFLATED: number;\\n}\\ndeclare module 'node:zlib' {\\n    export * from 'zlib';\\n}\\n\",\"file:///node_modules/@types/node/assert/strict.d.ts\":\"declare module 'assert/strict' {\\n    import { strict } from 'node:assert';\\n    export = strict;\\n}\\ndeclare module 'node:assert/strict' {\\n    import { strict } from 'node:assert';\\n    export = strict;\\n}\\n\",\"file:///node_modules/@types/node/dns/promises.d.ts\":\"/**\\n * The `dns.promises` API provides an alternative set of asynchronous DNS methods\\n * that return `Promise` objects rather than using callbacks. The API is accessible\\n * via `require('dns').promises` or `require('dns/promises')`.\\n * @since v10.6.0\\n */\\ndeclare module 'dns/promises' {\\n    import {\\n        LookupAddress,\\n        LookupOneOptions,\\n        LookupAllOptions,\\n        LookupOptions,\\n        AnyRecord,\\n        CaaRecord,\\n        MxRecord,\\n        NaptrRecord,\\n        SoaRecord,\\n        SrvRecord,\\n        ResolveWithTtlOptions,\\n        RecordWithTtl,\\n        ResolveOptions,\\n        ResolverOptions,\\n    } from 'node:dns';\\n    /**\\n     * Returns an array of IP address strings, formatted according to [RFC 5952](https://tools.ietf.org/html/rfc5952#section-6),\\n     * that are currently configured for DNS resolution. A string will include a port\\n     * section if a custom port is used.\\n     *\\n     * ```js\\n     * [\\n     *   '4.4.4.4',\\n     *   '2001:4860:4860::8888',\\n     *   '4.4.4.4:1053',\\n     *   '[2001:4860:4860::8888]:1053',\\n     * ]\\n     * ```\\n     * @since v10.6.0\\n     */\\n    function getServers(): string[];\\n    /**\\n     * Resolves a host name (e.g. `'nodejs.org'`) into the first found A (IPv4) or\\n     * AAAA (IPv6) record. All `option` properties are optional. If `options` is an\\n     * integer, then it must be `4` or `6` \u2013 if `options` is not provided, then IPv4\\n     * and IPv6 addresses are both returned if found.\\n     *\\n     * With the `all` option set to `true`, the `Promise` is resolved with `addresses`being an array of objects with the properties `address` and `family`.\\n     *\\n     * On error, the `Promise` is rejected with an `Error` object, where `err.code`is the error code.\\n     * Keep in mind that `err.code` will be set to `'ENOTFOUND'` not only when\\n     * the host name does not exist but also when the lookup fails in other ways\\n     * such as no available file descriptors.\\n     *\\n     * `dnsPromises.lookup()` does not necessarily have anything to do with the DNS\\n     * protocol. The implementation uses an operating system facility that can\\n     * associate names with addresses, and vice versa. This implementation can have\\n     * subtle but important consequences on the behavior of any Node.js program. Please\\n     * take some time to consult the `Implementation considerations section` before\\n     * using `dnsPromises.lookup()`.\\n     *\\n     * Example usage:\\n     *\\n     * ```js\\n     * const dns = require('dns');\\n     * const dnsPromises = dns.promises;\\n     * const options = {\\n     *   family: 6,\\n     *   hints: dns.ADDRCONFIG | dns.V4MAPPED,\\n     * };\\n     *\\n     * dnsPromises.lookup('example.com', options).then((result) => {\\n     *   console.log('address: %j family: IPv%s', result.address, result.family);\\n     *   // address: \\\"2606:2800:220:1:248:1893:25c8:1946\\\" family: IPv6\\n     * });\\n     *\\n     * // When options.all is true, the result will be an Array.\\n     * options.all = true;\\n     * dnsPromises.lookup('example.com', options).then((result) => {\\n     *   console.log('addresses: %j', result);\\n     *   // addresses: [{\\\"address\\\":\\\"2606:2800:220:1:248:1893:25c8:1946\\\",\\\"family\\\":6}]\\n     * });\\n     * ```\\n     * @since v10.6.0\\n     */\\n    function lookup(hostname: string, family: number): Promise<LookupAddress>;\\n    function lookup(hostname: string, options: LookupOneOptions): Promise<LookupAddress>;\\n    function lookup(hostname: string, options: LookupAllOptions): Promise<LookupAddress[]>;\\n    function lookup(hostname: string, options: LookupOptions): Promise<LookupAddress | LookupAddress[]>;\\n    function lookup(hostname: string): Promise<LookupAddress>;\\n    /**\\n     * Resolves the given `address` and `port` into a host name and service using\\n     * the operating system's underlying `getnameinfo` implementation.\\n     *\\n     * If `address` is not a valid IP address, a `TypeError` will be thrown.\\n     * The `port` will be coerced to a number. If it is not a legal port, a `TypeError`will be thrown.\\n     *\\n     * On error, the `Promise` is rejected with an `Error` object, where `err.code`is the error code.\\n     *\\n     * ```js\\n     * const dnsPromises = require('dns').promises;\\n     * dnsPromises.lookupService('127.0.0.1', 22).then((result) => {\\n     *   console.log(result.hostname, result.service);\\n     *   // Prints: localhost ssh\\n     * });\\n     * ```\\n     * @since v10.6.0\\n     */\\n    function lookupService(\\n        address: string,\\n        port: number\\n    ): Promise<{\\n        hostname: string;\\n        service: string;\\n    }>;\\n    /**\\n     * Uses the DNS protocol to resolve a host name (e.g. `'nodejs.org'`) into an array\\n     * of the resource records. When successful, the `Promise` is resolved with an\\n     * array of resource records. The type and structure of individual results vary\\n     * based on `rrtype`:\\n     *\\n     * <omitted>\\n     *\\n     * On error, the `Promise` is rejected with an `Error` object, where `err.code`is one of the `DNS error codes`.\\n     * @since v10.6.0\\n     * @param hostname Host name to resolve.\\n     * @param [rrtype='A'] Resource record type.\\n     */\\n    function resolve(hostname: string): Promise<string[]>;\\n    function resolve(hostname: string, rrtype: 'A'): Promise<string[]>;\\n    function resolve(hostname: string, rrtype: 'AAAA'): Promise<string[]>;\\n    function resolve(hostname: string, rrtype: 'ANY'): Promise<AnyRecord[]>;\\n    function resolve(hostname: string, rrtype: 'CAA'): Promise<CaaRecord[]>;\\n    function resolve(hostname: string, rrtype: 'CNAME'): Promise<string[]>;\\n    function resolve(hostname: string, rrtype: 'MX'): Promise<MxRecord[]>;\\n    function resolve(hostname: string, rrtype: 'NAPTR'): Promise<NaptrRecord[]>;\\n    function resolve(hostname: string, rrtype: 'NS'): Promise<string[]>;\\n    function resolve(hostname: string, rrtype: 'PTR'): Promise<string[]>;\\n    function resolve(hostname: string, rrtype: 'SOA'): Promise<SoaRecord>;\\n    function resolve(hostname: string, rrtype: 'SRV'): Promise<SrvRecord[]>;\\n    function resolve(hostname: string, rrtype: 'TXT'): Promise<string[][]>;\\n    function resolve(hostname: string, rrtype: string): Promise<string[] | MxRecord[] | NaptrRecord[] | SoaRecord | SrvRecord[] | string[][] | AnyRecord[]>;\\n    /**\\n     * Uses the DNS protocol to resolve IPv4 addresses (`A` records) for the`hostname`. On success, the `Promise` is resolved with an array of IPv4\\n     * addresses (e.g. `['74.125.79.104', '74.125.79.105', '74.125.79.106']`).\\n     * @since v10.6.0\\n     * @param hostname Host name to resolve.\\n     */\\n    function resolve4(hostname: string): Promise<string[]>;\\n    function resolve4(hostname: string, options: ResolveWithTtlOptions): Promise<RecordWithTtl[]>;\\n    function resolve4(hostname: string, options: ResolveOptions): Promise<string[] | RecordWithTtl[]>;\\n    /**\\n     * Uses the DNS protocol to resolve IPv6 addresses (`AAAA` records) for the`hostname`. On success, the `Promise` is resolved with an array of IPv6\\n     * addresses.\\n     * @since v10.6.0\\n     * @param hostname Host name to resolve.\\n     */\\n    function resolve6(hostname: string): Promise<string[]>;\\n    function resolve6(hostname: string, options: ResolveWithTtlOptions): Promise<RecordWithTtl[]>;\\n    function resolve6(hostname: string, options: ResolveOptions): Promise<string[] | RecordWithTtl[]>;\\n    /**\\n     * Uses the DNS protocol to resolve all records (also known as `ANY` or `*` query).\\n     * On success, the `Promise` is resolved with an array containing various types of\\n     * records. Each object has a property `type` that indicates the type of the\\n     * current record. And depending on the `type`, additional properties will be\\n     * present on the object:\\n     *\\n     * <omitted>\\n     *\\n     * Here is an example of the result object:\\n     *\\n     * ```js\\n     * [ { type: 'A', address: '127.0.0.1', ttl: 299 },\\n     *   { type: 'CNAME', value: 'example.com' },\\n     *   { type: 'MX', exchange: 'alt4.aspmx.l.example.com', priority: 50 },\\n     *   { type: 'NS', value: 'ns1.example.com' },\\n     *   { type: 'TXT', entries: [ 'v=spf1 include:_spf.example.com ~all' ] },\\n     *   { type: 'SOA',\\n     *     nsname: 'ns1.example.com',\\n     *     hostmaster: 'admin.example.com',\\n     *     serial: 156696742,\\n     *     refresh: 900,\\n     *     retry: 900,\\n     *     expire: 1800,\\n     *     minttl: 60 } ]\\n     * ```\\n     * @since v10.6.0\\n     */\\n    function resolveAny(hostname: string): Promise<AnyRecord[]>;\\n    /**\\n     * Uses the DNS protocol to resolve `CAA` records for the `hostname`. On success,\\n     * the `Promise` is resolved with an array of objects containing available\\n     * certification authority authorization records available for the `hostname`(e.g. `[{critical: 0, iodef: 'mailto:pki@example.com'},{critical: 128, issue: 'pki.example.com'}]`).\\n     * @since v15.0.0, v14.17.0\\n     */\\n    function resolveCaa(hostname: string): Promise<CaaRecord[]>;\\n    /**\\n     * Uses the DNS protocol to resolve `CNAME` records for the `hostname`. On success,\\n     * the `Promise` is resolved with an array of canonical name records available for\\n     * the `hostname` (e.g. `['bar.example.com']`).\\n     * @since v10.6.0\\n     */\\n    function resolveCname(hostname: string): Promise<string[]>;\\n    /**\\n     * Uses the DNS protocol to resolve mail exchange records (`MX` records) for the`hostname`. On success, the `Promise` is resolved with an array of objects\\n     * containing both a `priority` and `exchange` property (e.g.`[{priority: 10, exchange: 'mx.example.com'}, ...]`).\\n     * @since v10.6.0\\n     */\\n    function resolveMx(hostname: string): Promise<MxRecord[]>;\\n    /**\\n     * Uses the DNS protocol to resolve regular expression based records (`NAPTR`records) for the `hostname`. On success, the `Promise` is resolved with an array\\n     * of objects with the following properties:\\n     *\\n     * * `flags`\\n     * * `service`\\n     * * `regexp`\\n     * * `replacement`\\n     * * `order`\\n     * * `preference`\\n     *\\n     * ```js\\n     * {\\n     *   flags: 's',\\n     *   service: 'SIP+D2U',\\n     *   regexp: '',\\n     *   replacement: '_sip._udp.example.com',\\n     *   order: 30,\\n     *   preference: 100\\n     * }\\n     * ```\\n     * @since v10.6.0\\n     */\\n    function resolveNaptr(hostname: string): Promise<NaptrRecord[]>;\\n    /**\\n     * Uses the DNS protocol to resolve name server records (`NS` records) for the`hostname`. On success, the `Promise` is resolved with an array of name server\\n     * records available for `hostname` (e.g.`['ns1.example.com', 'ns2.example.com']`).\\n     * @since v10.6.0\\n     */\\n    function resolveNs(hostname: string): Promise<string[]>;\\n    /**\\n     * Uses the DNS protocol to resolve pointer records (`PTR` records) for the`hostname`. On success, the `Promise` is resolved with an array of strings\\n     * containing the reply records.\\n     * @since v10.6.0\\n     */\\n    function resolvePtr(hostname: string): Promise<string[]>;\\n    /**\\n     * Uses the DNS protocol to resolve a start of authority record (`SOA` record) for\\n     * the `hostname`. On success, the `Promise` is resolved with an object with the\\n     * following properties:\\n     *\\n     * * `nsname`\\n     * * `hostmaster`\\n     * * `serial`\\n     * * `refresh`\\n     * * `retry`\\n     * * `expire`\\n     * * `minttl`\\n     *\\n     * ```js\\n     * {\\n     *   nsname: 'ns.example.com',\\n     *   hostmaster: 'root.example.com',\\n     *   serial: 2013101809,\\n     *   refresh: 10000,\\n     *   retry: 2400,\\n     *   expire: 604800,\\n     *   minttl: 3600\\n     * }\\n     * ```\\n     * @since v10.6.0\\n     */\\n    function resolveSoa(hostname: string): Promise<SoaRecord>;\\n    /**\\n     * Uses the DNS protocol to resolve service records (`SRV` records) for the`hostname`. On success, the `Promise` is resolved with an array of objects with\\n     * the following properties:\\n     *\\n     * * `priority`\\n     * * `weight`\\n     * * `port`\\n     * * `name`\\n     *\\n     * ```js\\n     * {\\n     *   priority: 10,\\n     *   weight: 5,\\n     *   port: 21223,\\n     *   name: 'service.example.com'\\n     * }\\n     * ```\\n     * @since v10.6.0\\n     */\\n    function resolveSrv(hostname: string): Promise<SrvRecord[]>;\\n    /**\\n     * Uses the DNS protocol to resolve text queries (`TXT` records) for the`hostname`. On success, the `Promise` is resolved with a two-dimensional array\\n     * of the text records available for `hostname` (e.g.`[ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]`). Each sub-array contains TXT chunks of\\n     * one record. Depending on the use case, these could be either joined together or\\n     * treated separately.\\n     * @since v10.6.0\\n     */\\n    function resolveTxt(hostname: string): Promise<string[][]>;\\n    /**\\n     * Performs a reverse DNS query that resolves an IPv4 or IPv6 address to an\\n     * array of host names.\\n     *\\n     * On error, the `Promise` is rejected with an `Error` object, where `err.code`is one of the `DNS error codes`.\\n     * @since v10.6.0\\n     */\\n    function reverse(ip: string): Promise<string[]>;\\n    /**\\n     * Sets the IP address and port of servers to be used when performing DNS\\n     * resolution. The `servers` argument is an array of [RFC 5952](https://tools.ietf.org/html/rfc5952#section-6) formatted\\n     * addresses. If the port is the IANA default DNS port (53) it can be omitted.\\n     *\\n     * ```js\\n     * dnsPromises.setServers([\\n     *   '4.4.4.4',\\n     *   '[2001:4860:4860::8888]',\\n     *   '4.4.4.4:1053',\\n     *   '[2001:4860:4860::8888]:1053',\\n     * ]);\\n     * ```\\n     *\\n     * An error will be thrown if an invalid address is provided.\\n     *\\n     * The `dnsPromises.setServers()` method must not be called while a DNS query is in\\n     * progress.\\n     *\\n     * This method works much like [resolve.conf](https://man7.org/linux/man-pages/man5/resolv.conf.5.html).\\n     * That is, if attempting to resolve with the first server provided results in a`NOTFOUND` error, the `resolve()` method will _not_ attempt to resolve with\\n     * subsequent servers provided. Fallback DNS servers will only be used if the\\n     * earlier ones time out or result in some other error.\\n     * @since v10.6.0\\n     * @param servers array of `RFC 5952` formatted addresses\\n     */\\n    function setServers(servers: ReadonlyArray<string>): void;\\n    /**\\n     * Set the default value of `verbatim` in `dns.lookup()` and `dnsPromises.lookup()`. The value could be:\\n     *\\n     * * `ipv4first`: sets default `verbatim` `false`.\\n     * * `verbatim`: sets default `verbatim` `true`.\\n     *\\n     * The default is `ipv4first` and `dnsPromises.setDefaultResultOrder()` have\\n     * higher priority than `--dns-result-order`. When using `worker threads`,`dnsPromises.setDefaultResultOrder()` from the main thread won't affect the\\n     * default dns orders in workers.\\n     * @since v16.4.0, v14.18.0\\n     * @param order must be `'ipv4first'` or `'verbatim'`.\\n     */\\n    function setDefaultResultOrder(order: 'ipv4first' | 'verbatim'): void;\\n    class Resolver {\\n        constructor(options?: ResolverOptions);\\n        cancel(): void;\\n        getServers: typeof getServers;\\n        resolve: typeof resolve;\\n        resolve4: typeof resolve4;\\n        resolve6: typeof resolve6;\\n        resolveAny: typeof resolveAny;\\n        resolveCname: typeof resolveCname;\\n        resolveMx: typeof resolveMx;\\n        resolveNaptr: typeof resolveNaptr;\\n        resolveNs: typeof resolveNs;\\n        resolvePtr: typeof resolvePtr;\\n        resolveSoa: typeof resolveSoa;\\n        resolveSrv: typeof resolveSrv;\\n        resolveTxt: typeof resolveTxt;\\n        reverse: typeof reverse;\\n        setLocalAddress(ipv4?: string, ipv6?: string): void;\\n        setServers: typeof setServers;\\n    }\\n}\\ndeclare module 'node:dns/promises' {\\n    export * from 'dns/promises';\\n}\\n\",\"file:///node_modules/@types/node/fs/promises.d.ts\":\"/**\\n * The `fs/promises` API provides asynchronous file system methods that return\\n * promises.\\n *\\n * The promise APIs use the underlying Node.js threadpool to perform file\\n * system operations off the event loop thread. These operations are not\\n * synchronized or threadsafe. Care must be taken when performing multiple\\n * concurrent modifications on the same file or data corruption may occur.\\n * @since v10.0.0\\n */\\ndeclare module 'fs/promises' {\\n    import { Abortable } from 'node:events';\\n    import { Stream } from 'node:stream';\\n    import { ReadableStream } from 'node:stream/web';\\n    import {\\n        BigIntStats,\\n        BigIntStatsFs,\\n        BufferEncodingOption,\\n        constants as fsConstants,\\n        CopyOptions,\\n        Dir,\\n        Dirent,\\n        MakeDirectoryOptions,\\n        Mode,\\n        ObjectEncodingOptions,\\n        OpenDirOptions,\\n        OpenMode,\\n        PathLike,\\n        ReadStream,\\n        ReadVResult,\\n        RmDirOptions,\\n        RmOptions,\\n        StatOptions,\\n        StatFsOptions,\\n        Stats,\\n        StatsFs,\\n        TimeLike,\\n        WatchEventType,\\n        WatchOptions,\\n        WriteStream,\\n        WriteVResult,\\n    } from 'node:fs';\\n    import { Interface as ReadlineInterface } from 'node:readline';\\n\\n    interface FileChangeInfo<T extends string | Buffer> {\\n        eventType: WatchEventType;\\n        filename: T;\\n    }\\n    interface FlagAndOpenMode {\\n        mode?: Mode | undefined;\\n        flag?: OpenMode | undefined;\\n    }\\n    interface FileReadResult<T extends NodeJS.ArrayBufferView> {\\n        bytesRead: number;\\n        buffer: T;\\n    }\\n    interface FileReadOptions<T extends NodeJS.ArrayBufferView = Buffer> {\\n        /**\\n         * @default `Buffer.alloc(0xffff)`\\n         */\\n        buffer?: T;\\n        /**\\n         * @default 0\\n         */\\n        offset?: number | null;\\n        /**\\n         * @default `buffer.byteLength`\\n         */\\n        length?: number | null;\\n        position?: number | null;\\n    }\\n    interface CreateReadStreamOptions {\\n        encoding?: BufferEncoding | null | undefined;\\n        autoClose?: boolean | undefined;\\n        emitClose?: boolean | undefined;\\n        start?: number | undefined;\\n        end?: number | undefined;\\n        highWaterMark?: number | undefined;\\n    }\\n    interface CreateWriteStreamOptions {\\n        encoding?: BufferEncoding | null | undefined;\\n        autoClose?: boolean | undefined;\\n        emitClose?: boolean | undefined;\\n        start?: number | undefined;\\n    }\\n    // TODO: Add `EventEmitter` close\\n    interface FileHandle {\\n        /**\\n         * The numeric file descriptor managed by the {FileHandle} object.\\n         * @since v10.0.0\\n         */\\n        readonly fd: number;\\n        /**\\n         * Alias of `filehandle.writeFile()`.\\n         *\\n         * When operating on file handles, the mode cannot be changed from what it was set\\n         * to with `fsPromises.open()`. Therefore, this is equivalent to `filehandle.writeFile()`.\\n         * @since v10.0.0\\n         * @return Fulfills with `undefined` upon success.\\n         */\\n        appendFile(data: string | Uint8Array, options?: (ObjectEncodingOptions & FlagAndOpenMode) | BufferEncoding | null): Promise<void>;\\n        /**\\n         * Changes the ownership of the file. A wrapper for [`chown(2)`](http://man7.org/linux/man-pages/man2/chown.2.html).\\n         * @since v10.0.0\\n         * @param uid The file's new owner's user id.\\n         * @param gid The file's new group's group id.\\n         * @return Fulfills with `undefined` upon success.\\n         */\\n        chown(uid: number, gid: number): Promise<void>;\\n        /**\\n         * Modifies the permissions on the file. See [`chmod(2)`](http://man7.org/linux/man-pages/man2/chmod.2.html).\\n         * @since v10.0.0\\n         * @param mode the file mode bit mask.\\n         * @return Fulfills with `undefined` upon success.\\n         */\\n        chmod(mode: Mode): Promise<void>;\\n        /**\\n         * Unlike the 16 kb default `highWaterMark` for a `stream.Readable`, the stream\\n         * returned by this method has a default `highWaterMark` of 64 kb.\\n         *\\n         * `options` can include `start` and `end` values to read a range of bytes from\\n         * the file instead of the entire file. Both `start` and `end` are inclusive and\\n         * start counting at 0, allowed values are in the\\n         * \\\\[0, [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER)\\\\] range. If `start` is\\n         * omitted or `undefined`, `filehandle.createReadStream()` reads sequentially from\\n         * the current file position. The `encoding` can be any one of those accepted by `Buffer`.\\n         *\\n         * If the `FileHandle` points to a character device that only supports blocking\\n         * reads (such as keyboard or sound card), read operations do not finish until data\\n         * is available. This can prevent the process from exiting and the stream from\\n         * closing naturally.\\n         *\\n         * By default, the stream will emit a `'close'` event after it has been\\n         * destroyed.  Set the `emitClose` option to `false` to change this behavior.\\n         *\\n         * ```js\\n         * import { open } from 'fs/promises';\\n         *\\n         * const fd = await open('/dev/input/event0');\\n         * // Create a stream from some character device.\\n         * const stream = fd.createReadStream();\\n         * setTimeout(() => {\\n         *   stream.close(); // This may not close the stream.\\n         *   // Artificially marking end-of-stream, as if the underlying resource had\\n         *   // indicated end-of-file by itself, allows the stream to close.\\n         *   // This does not cancel pending read operations, and if there is such an\\n         *   // operation, the process may still not be able to exit successfully\\n         *   // until it finishes.\\n         *   stream.push(null);\\n         *   stream.read(0);\\n         * }, 100);\\n         * ```\\n         *\\n         * If `autoClose` is false, then the file descriptor won't be closed, even if\\n         * there's an error. It is the application's responsibility to close it and make\\n         * sure there's no file descriptor leak. If `autoClose` is set to true (default\\n         * behavior), on `'error'` or `'end'` the file descriptor will be closed\\n         * automatically.\\n         *\\n         * An example to read the last 10 bytes of a file which is 100 bytes long:\\n         *\\n         * ```js\\n         * import { open } from 'fs/promises';\\n         *\\n         * const fd = await open('sample.txt');\\n         * fd.createReadStream({ start: 90, end: 99 });\\n         * ```\\n         * @since v16.11.0\\n         */\\n        createReadStream(options?: CreateReadStreamOptions): ReadStream;\\n        /**\\n         * `options` may also include a `start` option to allow writing data at some\\n         * position past the beginning of the file, allowed values are in the\\n         * \\\\[0, [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER)\\\\] range. Modifying a file rather than\\n         * replacing it may require the `flags` `open` option to be set to `r+` rather than\\n         * the default `r`. The `encoding` can be any one of those accepted by `Buffer`.\\n         *\\n         * If `autoClose` is set to true (default behavior) on `'error'` or `'finish'`the file descriptor will be closed automatically. If `autoClose` is false,\\n         * then the file descriptor won't be closed, even if there's an error.\\n         * It is the application's responsibility to close it and make sure there's no\\n         * file descriptor leak.\\n         *\\n         * By default, the stream will emit a `'close'` event after it has been\\n         * destroyed.  Set the `emitClose` option to `false` to change this behavior.\\n         * @since v16.11.0\\n         */\\n        createWriteStream(options?: CreateWriteStreamOptions): WriteStream;\\n        /**\\n         * Forces all currently queued I/O operations associated with the file to the\\n         * operating system's synchronized I/O completion state. Refer to the POSIX [`fdatasync(2)`](http://man7.org/linux/man-pages/man2/fdatasync.2.html) documentation for details.\\n         *\\n         * Unlike `filehandle.sync` this method does not flush modified metadata.\\n         * @since v10.0.0\\n         * @return Fulfills with `undefined` upon success.\\n         */\\n        datasync(): Promise<void>;\\n        /**\\n         * Request that all data for the open file descriptor is flushed to the storage\\n         * device. The specific implementation is operating system and device specific.\\n         * Refer to the POSIX [`fsync(2)`](http://man7.org/linux/man-pages/man2/fsync.2.html) documentation for more detail.\\n         * @since v10.0.0\\n         * @return Fufills with `undefined` upon success.\\n         */\\n        sync(): Promise<void>;\\n        /**\\n         * Reads data from the file and stores that in the given buffer.\\n         *\\n         * If the file is not modified concurrently, the end-of-file is reached when the\\n         * number of bytes read is zero.\\n         * @since v10.0.0\\n         * @param buffer A buffer that will be filled with the file data read.\\n         * @param offset The location in the buffer at which to start filling.\\n         * @param length The number of bytes to read.\\n         * @param position The location where to begin reading data from the file. If `null`, data will be read from the current file position, and the position will be updated. If `position` is an\\n         * integer, the current file position will remain unchanged.\\n         * @return Fulfills upon success with an object with two properties:\\n         */\\n        read<T extends NodeJS.ArrayBufferView>(buffer: T, offset?: number | null, length?: number | null, position?: number | null): Promise<FileReadResult<T>>;\\n        read<T extends NodeJS.ArrayBufferView = Buffer>(options?: FileReadOptions<T>): Promise<FileReadResult<T>>;\\n        /**\\n         * Returns a `ReadableStream` that may be used to read the files data.\\n         *\\n         * An error will be thrown if this method is called more than once or is called after the `FileHandle` is closed\\n         * or closing.\\n         *\\n         * ```js\\n         * import { open } from 'node:fs/promises';\\n         *\\n         * const file = await open('./some/file/to/read');\\n         *\\n         * for await (const chunk of file.readableWebStream())\\n         *   console.log(chunk);\\n         *\\n         * await file.close();\\n         * ```\\n         *\\n         * While the `ReadableStream` will read the file to completion, it will not close the `FileHandle` automatically. User code must still call the `fileHandle.close()` method.\\n         *\\n         * @since v17.0.0\\n         * @experimental\\n         */\\n        readableWebStream(): ReadableStream;\\n        /**\\n         * Asynchronously reads the entire contents of a file.\\n         *\\n         * If `options` is a string, then it specifies the `encoding`.\\n         *\\n         * The `FileHandle` has to support reading.\\n         *\\n         * If one or more `filehandle.read()` calls are made on a file handle and then a`filehandle.readFile()` call is made, the data will be read from the current\\n         * position till the end of the file. It doesn't always read from the beginning\\n         * of the file.\\n         * @since v10.0.0\\n         * @return Fulfills upon a successful read with the contents of the file. If no encoding is specified (using `options.encoding`), the data is returned as a {Buffer} object. Otherwise, the\\n         * data will be a string.\\n         */\\n        readFile(\\n            options?: {\\n                encoding?: null | undefined;\\n                flag?: OpenMode | undefined;\\n            } | null\\n        ): Promise<Buffer>;\\n        /**\\n         * Asynchronously reads the entire contents of a file. The underlying file will _not_ be closed automatically.\\n         * The `FileHandle` must have been opened for reading.\\n         * @param options An object that may contain an optional flag.\\n         * If a flag is not provided, it defaults to `'r'`.\\n         */\\n        readFile(\\n            options:\\n                | {\\n                      encoding: BufferEncoding;\\n                      flag?: OpenMode | undefined;\\n                  }\\n                | BufferEncoding\\n        ): Promise<string>;\\n        /**\\n         * Asynchronously reads the entire contents of a file. The underlying file will _not_ be closed automatically.\\n         * The `FileHandle` must have been opened for reading.\\n         * @param options An object that may contain an optional flag.\\n         * If a flag is not provided, it defaults to `'r'`.\\n         */\\n        readFile(\\n            options?:\\n                | (ObjectEncodingOptions & {\\n                      flag?: OpenMode | undefined;\\n                  })\\n                | BufferEncoding\\n                | null\\n        ): Promise<string | Buffer>;\\n        /**\\n         * Convenience method to create a `readline` interface and stream over the file. For example:\\n         *\\n         * ```js\\n         * import { open } from 'node:fs/promises';\\n         *\\n         * const file = await open('./some/file/to/read');\\n         *\\n         * for await (const line of file.readLines()) {\\n         *   console.log(line);\\n         * }\\n         * ```\\n         *\\n         * @since v18.11.0\\n         * @param options See `filehandle.createReadStream()` for the options.\\n         */\\n        readLines(options?: CreateReadStreamOptions): ReadlineInterface;\\n        /**\\n         * @since v10.0.0\\n         * @return Fulfills with an {fs.Stats} for the file.\\n         */\\n        stat(\\n            opts?: StatOptions & {\\n                bigint?: false | undefined;\\n            }\\n        ): Promise<Stats>;\\n        stat(\\n            opts: StatOptions & {\\n                bigint: true;\\n            }\\n        ): Promise<BigIntStats>;\\n        stat(opts?: StatOptions): Promise<Stats | BigIntStats>;\\n        /**\\n         * Truncates the file.\\n         *\\n         * If the file was larger than `len` bytes, only the first `len` bytes will be\\n         * retained in the file.\\n         *\\n         * The following example retains only the first four bytes of the file:\\n         *\\n         * ```js\\n         * import { open } from 'fs/promises';\\n         *\\n         * let filehandle = null;\\n         * try {\\n         *   filehandle = await open('temp.txt', 'r+');\\n         *   await filehandle.truncate(4);\\n         * } finally {\\n         *   await filehandle?.close();\\n         * }\\n         * ```\\n         *\\n         * If the file previously was shorter than `len` bytes, it is extended, and the\\n         * extended part is filled with null bytes (`'\\\\0'`):\\n         *\\n         * If `len` is negative then `0` will be used.\\n         * @since v10.0.0\\n         * @param [len=0]\\n         * @return Fulfills with `undefined` upon success.\\n         */\\n        truncate(len?: number): Promise<void>;\\n        /**\\n         * Change the file system timestamps of the object referenced by the `FileHandle` then resolves the promise with no arguments upon success.\\n         * @since v10.0.0\\n         */\\n        utimes(atime: TimeLike, mtime: TimeLike): Promise<void>;\\n        /**\\n         * Asynchronously writes data to a file, replacing the file if it already exists.`data` can be a string, a buffer, an\\n         * [AsyncIterable](https://tc39.github.io/ecma262/#sec-asynciterable-interface) or\\n         * [Iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol) object.\\n         * The promise is resolved with no arguments upon success.\\n         *\\n         * If `options` is a string, then it specifies the `encoding`.\\n         *\\n         * The `FileHandle` has to support writing.\\n         *\\n         * It is unsafe to use `filehandle.writeFile()` multiple times on the same file\\n         * without waiting for the promise to be resolved (or rejected).\\n         *\\n         * If one or more `filehandle.write()` calls are made on a file handle and then a`filehandle.writeFile()` call is made, the data will be written from the\\n         * current position till the end of the file. It doesn't always write from the\\n         * beginning of the file.\\n         * @since v10.0.0\\n         */\\n        writeFile(data: string | Uint8Array, options?: (ObjectEncodingOptions & FlagAndOpenMode & Abortable) | BufferEncoding | null): Promise<void>;\\n        /**\\n         * Write `buffer` to the file.\\n         *\\n         * The promise is resolved with an object containing two properties:\\n         *\\n         * It is unsafe to use `filehandle.write()` multiple times on the same file\\n         * without waiting for the promise to be resolved (or rejected). For this\\n         * scenario, use `filehandle.createWriteStream()`.\\n         *\\n         * On Linux, positional writes do not work when the file is opened in append mode.\\n         * The kernel ignores the position argument and always appends the data to\\n         * the end of the file.\\n         * @since v10.0.0\\n         * @param [offset=0] The start position from within `buffer` where the data to write begins.\\n         * @param [length=buffer.byteLength - offset] The number of bytes from `buffer` to write.\\n         * @param position The offset from the beginning of the file where the data from `buffer` should be written. If `position` is not a `number`, the data will be written at the current position.\\n         * See the POSIX pwrite(2) documentation for more detail.\\n         */\\n        write<TBuffer extends Uint8Array>(\\n            buffer: TBuffer,\\n            offset?: number | null,\\n            length?: number | null,\\n            position?: number | null\\n        ): Promise<{\\n            bytesWritten: number;\\n            buffer: TBuffer;\\n        }>;\\n        write(\\n            data: string,\\n            position?: number | null,\\n            encoding?: BufferEncoding | null\\n        ): Promise<{\\n            bytesWritten: number;\\n            buffer: string;\\n        }>;\\n        /**\\n         * Write an array of [ArrayBufferView](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView) s to the file.\\n         *\\n         * The promise is resolved with an object containing a two properties:\\n         *\\n         * It is unsafe to call `writev()` multiple times on the same file without waiting\\n         * for the promise to be resolved (or rejected).\\n         *\\n         * On Linux, positional writes don't work when the file is opened in append mode.\\n         * The kernel ignores the position argument and always appends the data to\\n         * the end of the file.\\n         * @since v12.9.0\\n         * @param position The offset from the beginning of the file where the data from `buffers` should be written. If `position` is not a `number`, the data will be written at the current\\n         * position.\\n         */\\n        writev(buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number): Promise<WriteVResult>;\\n        /**\\n         * Read from a file and write to an array of [ArrayBufferView](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView) s\\n         * @since v13.13.0, v12.17.0\\n         * @param position The offset from the beginning of the file where the data should be read from. If `position` is not a `number`, the data will be read from the current position.\\n         * @return Fulfills upon success an object containing two properties:\\n         */\\n        readv(buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number): Promise<ReadVResult>;\\n        /**\\n         * Closes the file handle after waiting for any pending operation on the handle to\\n         * complete.\\n         *\\n         * ```js\\n         * import { open } from 'fs/promises';\\n         *\\n         * let filehandle;\\n         * try {\\n         *   filehandle = await open('thefile.txt', 'r');\\n         * } finally {\\n         *   await filehandle?.close();\\n         * }\\n         * ```\\n         * @since v10.0.0\\n         * @return Fulfills with `undefined` upon success.\\n         */\\n        close(): Promise<void>;\\n    }\\n\\n    const constants: typeof fsConstants;\\n\\n    /**\\n     * Tests a user's permissions for the file or directory specified by `path`.\\n     * The `mode` argument is an optional integer that specifies the accessibility\\n     * checks to be performed. `mode` should be either the value `fs.constants.F_OK`or a mask consisting of the bitwise OR of any of `fs.constants.R_OK`,`fs.constants.W_OK`, and `fs.constants.X_OK`\\n     * (e.g.`fs.constants.W_OK | fs.constants.R_OK`). Check `File access constants` for\\n     * possible values of `mode`.\\n     *\\n     * If the accessibility check is successful, the promise is resolved with no\\n     * value. If any of the accessibility checks fail, the promise is rejected\\n     * with an [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object. The following example checks if the file`/etc/passwd` can be read and\\n     * written by the current process.\\n     *\\n     * ```js\\n     * import { access } from 'fs/promises';\\n     * import { constants } from 'fs';\\n     *\\n     * try {\\n     *   await access('/etc/passwd', constants.R_OK | constants.W_OK);\\n     *   console.log('can access');\\n     * } catch {\\n     *   console.error('cannot access');\\n     * }\\n     * ```\\n     *\\n     * Using `fsPromises.access()` to check for the accessibility of a file before\\n     * calling `fsPromises.open()` is not recommended. Doing so introduces a race\\n     * condition, since other processes may change the file's state between the two\\n     * calls. Instead, user code should open/read/write the file directly and handle\\n     * the error raised if the file is not accessible.\\n     * @since v10.0.0\\n     * @param [mode=fs.constants.F_OK]\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function access(path: PathLike, mode?: number): Promise<void>;\\n    /**\\n     * Asynchronously copies `src` to `dest`. By default, `dest` is overwritten if it\\n     * already exists.\\n     *\\n     * No guarantees are made about the atomicity of the copy operation. If an\\n     * error occurs after the destination file has been opened for writing, an attempt\\n     * will be made to remove the destination.\\n     *\\n     * ```js\\n     * import { constants } from 'fs';\\n     * import { copyFile } from 'fs/promises';\\n     *\\n     * try {\\n     *   await copyFile('source.txt', 'destination.txt');\\n     *   console.log('source.txt was copied to destination.txt');\\n     * } catch {\\n     *   console.log('The file could not be copied');\\n     * }\\n     *\\n     * // By using COPYFILE_EXCL, the operation will fail if destination.txt exists.\\n     * try {\\n     *   await copyFile('source.txt', 'destination.txt', constants.COPYFILE_EXCL);\\n     *   console.log('source.txt was copied to destination.txt');\\n     * } catch {\\n     *   console.log('The file could not be copied');\\n     * }\\n     * ```\\n     * @since v10.0.0\\n     * @param src source filename to copy\\n     * @param dest destination filename of the copy operation\\n     * @param [mode=0] Optional modifiers that specify the behavior of the copy operation. It is possible to create a mask consisting of the bitwise OR of two or more values (e.g.\\n     * `fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE`)\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function copyFile(src: PathLike, dest: PathLike, mode?: number): Promise<void>;\\n    /**\\n     * Opens a `FileHandle`.\\n     *\\n     * Refer to the POSIX [`open(2)`](http://man7.org/linux/man-pages/man2/open.2.html) documentation for more detail.\\n     *\\n     * Some characters (`< > : \\\" / \\\\ | ? *`) are reserved under Windows as documented\\n     * by [Naming Files, Paths, and Namespaces](https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file). Under NTFS, if the filename contains\\n     * a colon, Node.js will open a file system stream, as described by [this MSDN page](https://docs.microsoft.com/en-us/windows/desktop/FileIO/using-streams).\\n     * @since v10.0.0\\n     * @param [flags='r'] See `support of file system `flags``.\\n     * @param [mode=0o666] Sets the file mode (permission and sticky bits) if the file is created.\\n     * @return Fulfills with a {FileHandle} object.\\n     */\\n    function open(path: PathLike, flags?: string | number, mode?: Mode): Promise<FileHandle>;\\n    /**\\n     * Renames `oldPath` to `newPath`.\\n     * @since v10.0.0\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function rename(oldPath: PathLike, newPath: PathLike): Promise<void>;\\n    /**\\n     * Truncates (shortens or extends the length) of the content at `path` to `len`bytes.\\n     * @since v10.0.0\\n     * @param [len=0]\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function truncate(path: PathLike, len?: number): Promise<void>;\\n    /**\\n     * Removes the directory identified by `path`.\\n     *\\n     * Using `fsPromises.rmdir()` on a file (not a directory) results in the\\n     * promise being rejected with an `ENOENT` error on Windows and an `ENOTDIR`error on POSIX.\\n     *\\n     * To get a behavior similar to the `rm -rf` Unix command, use `fsPromises.rm()` with options `{ recursive: true, force: true }`.\\n     * @since v10.0.0\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function rmdir(path: PathLike, options?: RmDirOptions): Promise<void>;\\n    /**\\n     * Removes files and directories (modeled on the standard POSIX `rm` utility).\\n     * @since v14.14.0\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function rm(path: PathLike, options?: RmOptions): Promise<void>;\\n    /**\\n     * Asynchronously creates a directory.\\n     *\\n     * The optional `options` argument can be an integer specifying `mode` (permission\\n     * and sticky bits), or an object with a `mode` property and a `recursive`property indicating whether parent directories should be created. Calling`fsPromises.mkdir()` when `path` is a directory\\n     * that exists results in a\\n     * rejection only when `recursive` is false.\\n     * @since v10.0.0\\n     * @return Upon success, fulfills with `undefined` if `recursive` is `false`, or the first directory path created if `recursive` is `true`.\\n     */\\n    function mkdir(\\n        path: PathLike,\\n        options: MakeDirectoryOptions & {\\n            recursive: true;\\n        }\\n    ): Promise<string | undefined>;\\n    /**\\n     * Asynchronous mkdir(2) - create a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\\n     * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\\n     */\\n    function mkdir(\\n        path: PathLike,\\n        options?:\\n            | Mode\\n            | (MakeDirectoryOptions & {\\n                  recursive?: false | undefined;\\n              })\\n            | null\\n    ): Promise<void>;\\n    /**\\n     * Asynchronous mkdir(2) - create a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\\n     * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\\n     */\\n    function mkdir(path: PathLike, options?: Mode | MakeDirectoryOptions | null): Promise<string | undefined>;\\n    /**\\n     * Reads the contents of a directory.\\n     *\\n     * The optional `options` argument can be a string specifying an encoding, or an\\n     * object with an `encoding` property specifying the character encoding to use for\\n     * the filenames. If the `encoding` is set to `'buffer'`, the filenames returned\\n     * will be passed as `Buffer` objects.\\n     *\\n     * If `options.withFileTypes` is set to `true`, the resolved array will contain `fs.Dirent` objects.\\n     *\\n     * ```js\\n     * import { readdir } from 'fs/promises';\\n     *\\n     * try {\\n     *   const files = await readdir(path);\\n     *   for (const file of files)\\n     *     console.log(file);\\n     * } catch (err) {\\n     *   console.error(err);\\n     * }\\n     * ```\\n     * @since v10.0.0\\n     * @return Fulfills with an array of the names of the files in the directory excluding `'.'` and `'..'`.\\n     */\\n    function readdir(\\n        path: PathLike,\\n        options?:\\n            | (ObjectEncodingOptions & {\\n                  withFileTypes?: false | undefined;\\n              })\\n            | BufferEncoding\\n            | null\\n    ): Promise<string[]>;\\n    /**\\n     * Asynchronous readdir(3) - read a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    function readdir(\\n        path: PathLike,\\n        options:\\n            | {\\n                  encoding: 'buffer';\\n                  withFileTypes?: false | undefined;\\n              }\\n            | 'buffer'\\n    ): Promise<Buffer[]>;\\n    /**\\n     * Asynchronous readdir(3) - read a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    function readdir(\\n        path: PathLike,\\n        options?:\\n            | (ObjectEncodingOptions & {\\n                  withFileTypes?: false | undefined;\\n              })\\n            | BufferEncoding\\n            | null\\n    ): Promise<string[] | Buffer[]>;\\n    /**\\n     * Asynchronous readdir(3) - read a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options If called with `withFileTypes: true` the result data will be an array of Dirent.\\n     */\\n    function readdir(\\n        path: PathLike,\\n        options: ObjectEncodingOptions & {\\n            withFileTypes: true;\\n        }\\n    ): Promise<Dirent[]>;\\n    /**\\n     * Reads the contents of the symbolic link referred to by `path`. See the POSIX [`readlink(2)`](http://man7.org/linux/man-pages/man2/readlink.2.html) documentation for more detail. The promise is\\n     * resolved with the`linkString` upon success.\\n     *\\n     * The optional `options` argument can be a string specifying an encoding, or an\\n     * object with an `encoding` property specifying the character encoding to use for\\n     * the link path returned. If the `encoding` is set to `'buffer'`, the link path\\n     * returned will be passed as a `Buffer` object.\\n     * @since v10.0.0\\n     * @return Fulfills with the `linkString` upon success.\\n     */\\n    function readlink(path: PathLike, options?: ObjectEncodingOptions | BufferEncoding | null): Promise<string>;\\n    /**\\n     * Asynchronous readlink(2) - read value of a symbolic link.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    function readlink(path: PathLike, options: BufferEncodingOption): Promise<Buffer>;\\n    /**\\n     * Asynchronous readlink(2) - read value of a symbolic link.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    function readlink(path: PathLike, options?: ObjectEncodingOptions | string | null): Promise<string | Buffer>;\\n    /**\\n     * Creates a symbolic link.\\n     *\\n     * The `type` argument is only used on Windows platforms and can be one of `'dir'`,`'file'`, or `'junction'`. Windows junction points require the destination path\\n     * to be absolute. When using `'junction'`, the `target` argument will\\n     * automatically be normalized to absolute path.\\n     * @since v10.0.0\\n     * @param [type='file']\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function symlink(target: PathLike, path: PathLike, type?: string | null): Promise<void>;\\n    /**\\n     * Equivalent to `fsPromises.stat()` unless `path` refers to a symbolic link,\\n     * in which case the link itself is stat-ed, not the file that it refers to.\\n     * Refer to the POSIX [`lstat(2)`](http://man7.org/linux/man-pages/man2/lstat.2.html) document for more detail.\\n     * @since v10.0.0\\n     * @return Fulfills with the {fs.Stats} object for the given symbolic link `path`.\\n     */\\n    function lstat(\\n        path: PathLike,\\n        opts?: StatOptions & {\\n            bigint?: false | undefined;\\n        }\\n    ): Promise<Stats>;\\n    function lstat(\\n        path: PathLike,\\n        opts: StatOptions & {\\n            bigint: true;\\n        }\\n    ): Promise<BigIntStats>;\\n    function lstat(path: PathLike, opts?: StatOptions): Promise<Stats | BigIntStats>;\\n    /**\\n     * @since v10.0.0\\n     * @return Fulfills with the {fs.Stats} object for the given `path`.\\n     */\\n    function stat(\\n        path: PathLike,\\n        opts?: StatOptions & {\\n            bigint?: false | undefined;\\n        }\\n    ): Promise<Stats>;\\n    function stat(\\n        path: PathLike,\\n        opts: StatOptions & {\\n            bigint: true;\\n        }\\n    ): Promise<BigIntStats>;\\n    function stat(path: PathLike, opts?: StatOptions): Promise<Stats | BigIntStats>;\\n    /**\\n     * @since v18.15.0\\n     * @return Fulfills with an {fs.StatFs} for the file system.\\n     */\\n    function statfs(\\n        path: PathLike,\\n        opts?: StatFsOptions & {\\n            bigint?: false | undefined;\\n        }\\n    ): Promise<StatsFs>;\\n    function statfs(\\n        path: PathLike,\\n        opts: StatFsOptions & {\\n            bigint: true;\\n        }\\n    ): Promise<BigIntStatsFs>;\\n    function statfs(path: PathLike, opts?: StatFsOptions): Promise<StatsFs | BigIntStatsFs>;\\n\\n    /**\\n     * Creates a new link from the `existingPath` to the `newPath`. See the POSIX [`link(2)`](http://man7.org/linux/man-pages/man2/link.2.html) documentation for more detail.\\n     * @since v10.0.0\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function link(existingPath: PathLike, newPath: PathLike): Promise<void>;\\n    /**\\n     * If `path` refers to a symbolic link, then the link is removed without affecting\\n     * the file or directory to which that link refers. If the `path` refers to a file\\n     * path that is not a symbolic link, the file is deleted. See the POSIX [`unlink(2)`](http://man7.org/linux/man-pages/man2/unlink.2.html) documentation for more detail.\\n     * @since v10.0.0\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function unlink(path: PathLike): Promise<void>;\\n    /**\\n     * Changes the permissions of a file.\\n     * @since v10.0.0\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function chmod(path: PathLike, mode: Mode): Promise<void>;\\n    /**\\n     * Changes the permissions on a symbolic link.\\n     *\\n     * This method is only implemented on macOS.\\n     * @deprecated Since v10.0.0\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function lchmod(path: PathLike, mode: Mode): Promise<void>;\\n    /**\\n     * Changes the ownership on a symbolic link.\\n     * @since v10.0.0\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function lchown(path: PathLike, uid: number, gid: number): Promise<void>;\\n    /**\\n     * Changes the access and modification times of a file in the same way as `fsPromises.utimes()`, with the difference that if the path refers to a\\n     * symbolic link, then the link is not dereferenced: instead, the timestamps of\\n     * the symbolic link itself are changed.\\n     * @since v14.5.0, v12.19.0\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function lutimes(path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void>;\\n    /**\\n     * Changes the ownership of a file.\\n     * @since v10.0.0\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function chown(path: PathLike, uid: number, gid: number): Promise<void>;\\n    /**\\n     * Change the file system timestamps of the object referenced by `path`.\\n     *\\n     * The `atime` and `mtime` arguments follow these rules:\\n     *\\n     * * Values can be either numbers representing Unix epoch time, `Date`s, or a\\n     * numeric string like `'123456789.0'`.\\n     * * If the value can not be converted to a number, or is `NaN`, `Infinity` or`-Infinity`, an `Error` will be thrown.\\n     * @since v10.0.0\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function utimes(path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void>;\\n    /**\\n     * Determines the actual location of `path` using the same semantics as the`fs.realpath.native()` function.\\n     *\\n     * Only paths that can be converted to UTF8 strings are supported.\\n     *\\n     * The optional `options` argument can be a string specifying an encoding, or an\\n     * object with an `encoding` property specifying the character encoding to use for\\n     * the path. If the `encoding` is set to `'buffer'`, the path returned will be\\n     * passed as a `Buffer` object.\\n     *\\n     * On Linux, when Node.js is linked against musl libc, the procfs file system must\\n     * be mounted on `/proc` in order for this function to work. Glibc does not have\\n     * this restriction.\\n     * @since v10.0.0\\n     * @return Fulfills with the resolved path upon success.\\n     */\\n    function realpath(path: PathLike, options?: ObjectEncodingOptions | BufferEncoding | null): Promise<string>;\\n    /**\\n     * Asynchronous realpath(3) - return the canonicalized absolute pathname.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    function realpath(path: PathLike, options: BufferEncodingOption): Promise<Buffer>;\\n    /**\\n     * Asynchronous realpath(3) - return the canonicalized absolute pathname.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    function realpath(path: PathLike, options?: ObjectEncodingOptions | BufferEncoding | null): Promise<string | Buffer>;\\n    /**\\n     * Creates a unique temporary directory. A unique directory name is generated by\\n     * appending six random characters to the end of the provided `prefix`. Due to\\n     * platform inconsistencies, avoid trailing `X` characters in `prefix`. Some\\n     * platforms, notably the BSDs, can return more than six random characters, and\\n     * replace trailing `X` characters in `prefix` with random characters.\\n     *\\n     * The optional `options` argument can be a string specifying an encoding, or an\\n     * object with an `encoding` property specifying the character encoding to use.\\n     *\\n     * ```js\\n     * import { mkdtemp } from 'fs/promises';\\n     *\\n     * try {\\n     *   await mkdtemp(path.join(os.tmpdir(), 'foo-'));\\n     * } catch (err) {\\n     *   console.error(err);\\n     * }\\n     * ```\\n     *\\n     * The `fsPromises.mkdtemp()` method will append the six randomly selected\\n     * characters directly to the `prefix` string. For instance, given a directory`/tmp`, if the intention is to create a temporary directory _within_`/tmp`, the`prefix` must end with a trailing\\n     * platform-specific path separator\\n     * (`require('path').sep`).\\n     * @since v10.0.0\\n     * @return Fulfills with a string containing the filesystem path of the newly created temporary directory.\\n     */\\n    function mkdtemp(prefix: string, options?: ObjectEncodingOptions | BufferEncoding | null): Promise<string>;\\n    /**\\n     * Asynchronously creates a unique temporary directory.\\n     * Generates six random characters to be appended behind a required `prefix` to create a unique temporary directory.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    function mkdtemp(prefix: string, options: BufferEncodingOption): Promise<Buffer>;\\n    /**\\n     * Asynchronously creates a unique temporary directory.\\n     * Generates six random characters to be appended behind a required `prefix` to create a unique temporary directory.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    function mkdtemp(prefix: string, options?: ObjectEncodingOptions | BufferEncoding | null): Promise<string | Buffer>;\\n    /**\\n     * Asynchronously writes data to a file, replacing the file if it already exists.`data` can be a string, a buffer, an\\n     * [AsyncIterable](https://tc39.github.io/ecma262/#sec-asynciterable-interface) or\\n     * [Iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol) object.\\n     *\\n     * The `encoding` option is ignored if `data` is a buffer.\\n     *\\n     * If `options` is a string, then it specifies the encoding.\\n     *\\n     * The `mode` option only affects the newly created file. See `fs.open()` for more details.\\n     *\\n     * Any specified `FileHandle` has to support writing.\\n     *\\n     * It is unsafe to use `fsPromises.writeFile()` multiple times on the same file\\n     * without waiting for the promise to be settled.\\n     *\\n     * Similarly to `fsPromises.readFile` \\\\- `fsPromises.writeFile` is a convenience\\n     * method that performs multiple `write` calls internally to write the buffer\\n     * passed to it. For performance sensitive code consider using `fs.createWriteStream()` or `filehandle.createWriteStream()`.\\n     *\\n     * It is possible to use an `AbortSignal` to cancel an `fsPromises.writeFile()`.\\n     * Cancelation is \\\"best effort\\\", and some amount of data is likely still\\n     * to be written.\\n     *\\n     * ```js\\n     * import { writeFile } from 'fs/promises';\\n     * import { Buffer } from 'buffer';\\n     *\\n     * try {\\n     *   const controller = new AbortController();\\n     *   const { signal } = controller;\\n     *   const data = new Uint8Array(Buffer.from('Hello Node.js'));\\n     *   const promise = writeFile('message.txt', data, { signal });\\n     *\\n     *   // Abort the request before the promise settles.\\n     *   controller.abort();\\n     *\\n     *   await promise;\\n     * } catch (err) {\\n     *   // When a request is aborted - err is an AbortError\\n     *   console.error(err);\\n     * }\\n     * ```\\n     *\\n     * Aborting an ongoing request does not abort individual operating\\n     * system requests but rather the internal buffering `fs.writeFile` performs.\\n     * @since v10.0.0\\n     * @param file filename or `FileHandle`\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function writeFile(\\n        file: PathLike | FileHandle,\\n        data: string | NodeJS.ArrayBufferView | Iterable<string | NodeJS.ArrayBufferView> | AsyncIterable<string | NodeJS.ArrayBufferView> | Stream,\\n        options?:\\n            | (ObjectEncodingOptions & {\\n                  mode?: Mode | undefined;\\n                  flag?: OpenMode | undefined;\\n              } & Abortable)\\n            | BufferEncoding\\n            | null\\n    ): Promise<void>;\\n    /**\\n     * Asynchronously append data to a file, creating the file if it does not yet\\n     * exist. `data` can be a string or a `Buffer`.\\n     *\\n     * If `options` is a string, then it specifies the `encoding`.\\n     *\\n     * The `mode` option only affects the newly created file. See `fs.open()` for more details.\\n     *\\n     * The `path` may be specified as a `FileHandle` that has been opened\\n     * for appending (using `fsPromises.open()`).\\n     * @since v10.0.0\\n     * @param path filename or {FileHandle}\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function appendFile(path: PathLike | FileHandle, data: string | Uint8Array, options?: (ObjectEncodingOptions & FlagAndOpenMode) | BufferEncoding | null): Promise<void>;\\n    /**\\n     * Asynchronously reads the entire contents of a file.\\n     *\\n     * If no encoding is specified (using `options.encoding`), the data is returned\\n     * as a `Buffer` object. Otherwise, the data will be a string.\\n     *\\n     * If `options` is a string, then it specifies the encoding.\\n     *\\n     * When the `path` is a directory, the behavior of `fsPromises.readFile()` is\\n     * platform-specific. On macOS, Linux, and Windows, the promise will be rejected\\n     * with an error. On FreeBSD, a representation of the directory's contents will be\\n     * returned.\\n     *\\n     * It is possible to abort an ongoing `readFile` using an `AbortSignal`. If a\\n     * request is aborted the promise returned is rejected with an `AbortError`:\\n     *\\n     * ```js\\n     * import { readFile } from 'fs/promises';\\n     *\\n     * try {\\n     *   const controller = new AbortController();\\n     *   const { signal } = controller;\\n     *   const promise = readFile(fileName, { signal });\\n     *\\n     *   // Abort the request before the promise settles.\\n     *   controller.abort();\\n     *\\n     *   await promise;\\n     * } catch (err) {\\n     *   // When a request is aborted - err is an AbortError\\n     *   console.error(err);\\n     * }\\n     * ```\\n     *\\n     * Aborting an ongoing request does not abort individual operating\\n     * system requests but rather the internal buffering `fs.readFile` performs.\\n     *\\n     * Any specified `FileHandle` has to support reading.\\n     * @since v10.0.0\\n     * @param path filename or `FileHandle`\\n     * @return Fulfills with the contents of the file.\\n     */\\n    function readFile(\\n        path: PathLike | FileHandle,\\n        options?:\\n            | ({\\n                  encoding?: null | undefined;\\n                  flag?: OpenMode | undefined;\\n              } & Abortable)\\n            | null\\n    ): Promise<Buffer>;\\n    /**\\n     * Asynchronously reads the entire contents of a file.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * If a `FileHandle` is provided, the underlying file will _not_ be closed automatically.\\n     * @param options An object that may contain an optional flag.\\n     * If a flag is not provided, it defaults to `'r'`.\\n     */\\n    function readFile(\\n        path: PathLike | FileHandle,\\n        options:\\n            | ({\\n                  encoding: BufferEncoding;\\n                  flag?: OpenMode | undefined;\\n              } & Abortable)\\n            | BufferEncoding\\n    ): Promise<string>;\\n    /**\\n     * Asynchronously reads the entire contents of a file.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * If a `FileHandle` is provided, the underlying file will _not_ be closed automatically.\\n     * @param options An object that may contain an optional flag.\\n     * If a flag is not provided, it defaults to `'r'`.\\n     */\\n    function readFile(\\n        path: PathLike | FileHandle,\\n        options?:\\n            | (ObjectEncodingOptions &\\n                  Abortable & {\\n                      flag?: OpenMode | undefined;\\n                  })\\n            | BufferEncoding\\n            | null\\n    ): Promise<string | Buffer>;\\n    /**\\n     * Asynchronously open a directory for iterative scanning. See the POSIX [`opendir(3)`](http://man7.org/linux/man-pages/man3/opendir.3.html) documentation for more detail.\\n     *\\n     * Creates an `fs.Dir`, which contains all further functions for reading from\\n     * and cleaning up the directory.\\n     *\\n     * The `encoding` option sets the encoding for the `path` while opening the\\n     * directory and subsequent read operations.\\n     *\\n     * Example using async iteration:\\n     *\\n     * ```js\\n     * import { opendir } from 'fs/promises';\\n     *\\n     * try {\\n     *   const dir = await opendir('./');\\n     *   for await (const dirent of dir)\\n     *     console.log(dirent.name);\\n     * } catch (err) {\\n     *   console.error(err);\\n     * }\\n     * ```\\n     *\\n     * When using the async iterator, the `fs.Dir` object will be automatically\\n     * closed after the iterator exits.\\n     * @since v12.12.0\\n     * @return Fulfills with an {fs.Dir}.\\n     */\\n    function opendir(path: PathLike, options?: OpenDirOptions): Promise<Dir>;\\n    /**\\n     * Returns an async iterator that watches for changes on `filename`, where `filename`is either a file or a directory.\\n     *\\n     * ```js\\n     * const { watch } = require('fs/promises');\\n     *\\n     * const ac = new AbortController();\\n     * const { signal } = ac;\\n     * setTimeout(() => ac.abort(), 10000);\\n     *\\n     * (async () => {\\n     *   try {\\n     *     const watcher = watch(__filename, { signal });\\n     *     for await (const event of watcher)\\n     *       console.log(event);\\n     *   } catch (err) {\\n     *     if (err.name === 'AbortError')\\n     *       return;\\n     *     throw err;\\n     *   }\\n     * })();\\n     * ```\\n     *\\n     * On most platforms, `'rename'` is emitted whenever a filename appears or\\n     * disappears in the directory.\\n     *\\n     * All the `caveats` for `fs.watch()` also apply to `fsPromises.watch()`.\\n     * @since v15.9.0, v14.18.0\\n     * @return of objects with the properties:\\n     */\\n    function watch(\\n        filename: PathLike,\\n        options:\\n            | (WatchOptions & {\\n                  encoding: 'buffer';\\n              })\\n            | 'buffer'\\n    ): AsyncIterable<FileChangeInfo<Buffer>>;\\n    /**\\n     * Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.\\n     * @param filename A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\n     * @param options Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.\\n     * If `encoding` is not supplied, the default of `'utf8'` is used.\\n     * If `persistent` is not supplied, the default of `true` is used.\\n     * If `recursive` is not supplied, the default of `false` is used.\\n     */\\n    function watch(filename: PathLike, options?: WatchOptions | BufferEncoding): AsyncIterable<FileChangeInfo<string>>;\\n    /**\\n     * Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.\\n     * @param filename A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\n     * @param options Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.\\n     * If `encoding` is not supplied, the default of `'utf8'` is used.\\n     * If `persistent` is not supplied, the default of `true` is used.\\n     * If `recursive` is not supplied, the default of `false` is used.\\n     */\\n    function watch(filename: PathLike, options: WatchOptions | string): AsyncIterable<FileChangeInfo<string>> | AsyncIterable<FileChangeInfo<Buffer>>;\\n    /**\\n     * Asynchronously copies the entire directory structure from `src` to `dest`,\\n     * including subdirectories and files.\\n     *\\n     * When copying a directory to another directory, globs are not supported and\\n     * behavior is similar to `cp dir1/ dir2/`.\\n     * @since v16.7.0\\n     * @experimental\\n     * @param src source path to copy.\\n     * @param dest destination path to copy to.\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function cp(source: string | URL, destination: string | URL, opts?: CopyOptions): Promise<void>;\\n}\\ndeclare module 'node:fs/promises' {\\n    export * from 'fs/promises';\\n}\\n\",\"file:///node_modules/@types/node/readline/promises.d.ts\":\"/**\\n * The `readline/promise` module provides an API for reading lines of input from a Readable stream one line at a time.\\n *\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/readline/promises.js)\\n * @since v17.0.0\\n */\\ndeclare module 'readline/promises' {\\n    import { Interface as _Interface, ReadLineOptions, Completer, AsyncCompleter, Direction } from 'node:readline';\\n    import { Abortable } from 'node:events';\\n\\n    class Interface extends _Interface {\\n        /**\\n         * The rl.question() method displays the query by writing it to the output, waits for user input to be provided on input,\\n         * then invokes the callback function passing the provided input as the first argument.\\n         *\\n         * When called, rl.question() will resume the input stream if it has been paused.\\n         *\\n         * If the readlinePromises.Interface was created with output set to null or undefined the query is not written.\\n         *\\n         * If the question is called after rl.close(), it returns a rejected promise.\\n         *\\n         * Example usage:\\n         *\\n         * ```js\\n         * const answer = await rl.question('What is your favorite food? ');\\n         * console.log(`Oh, so your favorite food is ${answer}`);\\n         * ```\\n         *\\n         * Using an AbortSignal to cancel a question.\\n         *\\n         * ```js\\n         * const signal = AbortSignal.timeout(10_000);\\n         *\\n         * signal.addEventListener('abort', () => {\\n         *   console.log('The food question timed out');\\n         * }, { once: true });\\n         *\\n         * const answer = await rl.question('What is your favorite food? ', { signal });\\n         * console.log(`Oh, so your favorite food is ${answer}`);\\n         * ```\\n         *\\n         * @since v17.0.0\\n         * @param query A statement or query to write to output, prepended to the prompt.\\n         */\\n        question(query: string): Promise<string>;\\n        question(query: string, options: Abortable): Promise<string>;\\n    }\\n\\n    class Readline {\\n        /**\\n         * @param stream A TTY stream.\\n         */\\n        constructor(stream: NodeJS.WritableStream, options?: { autoCommit?: boolean });\\n        /**\\n         * The `rl.clearLine()` method adds to the internal list of pending action an action that clears current line of the associated `stream` in a specified direction identified by `dir`.\\n         * Call `rl.commit()` to see the effect of this method, unless `autoCommit: true` was passed to the constructor.\\n         */\\n        clearLine(dir: Direction): this;\\n        /**\\n         * The `rl.clearScreenDown()` method adds to the internal list of pending action an action that clears the associated `stream` from the current position of the cursor down.\\n         * Call `rl.commit()` to see the effect of this method, unless `autoCommit: true` was passed to the constructor.\\n         */\\n        clearScreenDown(): this;\\n        /**\\n         * The `rl.commit()` method sends all the pending actions to the associated `stream` and clears the internal list of pending actions.\\n         */\\n        commit(): Promise<void>;\\n        /**\\n         * The `rl.cursorTo()` method adds to the internal list of pending action an action that moves cursor to the specified position in the associated `stream`.\\n         * Call `rl.commit()` to see the effect of this method, unless `autoCommit: true` was passed to the constructor.\\n         */\\n        cursorTo(x: number, y?: number): this;\\n        /**\\n         * The `rl.moveCursor()` method adds to the internal list of pending action an action that moves the cursor relative to its current position in the associated `stream`.\\n         * Call `rl.commit()` to see the effect of this method, unless autoCommit: true was passed to the constructor.\\n         */\\n        moveCursor(dx: number, dy: number): this;\\n        /**\\n         * The `rl.rollback()` method clears the internal list of pending actions without sending it to the associated `stream`.\\n         */\\n        rollback(): this;\\n    }\\n\\n    /**\\n     * The `readlinePromises.createInterface()` method creates a new `readlinePromises.Interface` instance.\\n     *\\n     * ```js\\n     * const readlinePromises = require('node:readline/promises');\\n     * const rl = readlinePromises.createInterface({\\n     *   input: process.stdin,\\n     *   output: process.stdout\\n     * });\\n     * ```\\n     *\\n     * Once the `readlinePromises.Interface` instance is created, the most common case is to listen for the `'line'` event:\\n     *\\n     * ```js\\n     * rl.on('line', (line) => {\\n     *   console.log(`Received: ${line}`);\\n     * });\\n     * ```\\n     *\\n     * If `terminal` is `true` for this instance then the `output` stream will get the best compatibility if it defines an `output.columns` property,\\n     * and emits a `'resize'` event on the `output`, if or when the columns ever change (`process.stdout` does this automatically when it is a TTY).\\n     *\\n     * ## Use of the `completer` function\\n     *\\n     * The `completer` function takes the current line entered by the user as an argument, and returns an `Array` with 2 entries:\\n     *\\n     * - An Array with matching entries for the completion.\\n     * - The substring that was used for the matching.\\n     *\\n     * For instance: `[[substr1, substr2, ...], originalsubstring]`.\\n     *\\n     * ```js\\n     * function completer(line) {\\n     *   const completions = '.help .error .exit .quit .q'.split(' ');\\n     *   const hits = completions.filter((c) => c.startsWith(line));\\n     *   // Show all completions if none found\\n     *   return [hits.length ? hits : completions, line];\\n     * }\\n     * ```\\n     *\\n     * The `completer` function can also returns a `Promise`, or be asynchronous:\\n     *\\n     * ```js\\n     * async function completer(linePartial) {\\n     *   await someAsyncWork();\\n     *   return [['123'], linePartial];\\n     * }\\n     * ```\\n     */\\n    function createInterface(\\n        input: NodeJS.ReadableStream,\\n        output?: NodeJS.WritableStream,\\n        completer?: Completer | AsyncCompleter,\\n        terminal?: boolean,\\n    ): Interface;\\n    function createInterface(options: ReadLineOptions): Interface;\\n}\\ndeclare module 'node:readline/promises' {\\n    export * from 'readline/promises';\\n}\\n\",\"file:///node_modules/@types/node/stream/consumers.d.ts\":\"declare module 'stream/consumers' {\\n    import { Blob as NodeBlob } from \\\"node:buffer\\\";\\n    import { Readable } from 'node:stream';\\n    function buffer(stream: NodeJS.ReadableStream | Readable | AsyncIterator<any>): Promise<Buffer>;\\n    function text(stream: NodeJS.ReadableStream | Readable | AsyncIterator<any>): Promise<string>;\\n    function arrayBuffer(stream: NodeJS.ReadableStream | Readable | AsyncIterator<any>): Promise<ArrayBuffer>;\\n    function blob(stream: NodeJS.ReadableStream | Readable | AsyncIterator<any>): Promise<NodeBlob>;\\n    function json(stream: NodeJS.ReadableStream | Readable | AsyncIterator<any>): Promise<unknown>;\\n}\\ndeclare module 'node:stream/consumers' {\\n    export * from 'stream/consumers';\\n}\\n\",\"file:///node_modules/@types/node/stream/promises.d.ts\":\"declare module 'stream/promises' {\\n    import { FinishedOptions, PipelineSource, PipelineTransform, PipelineDestination, PipelinePromise, PipelineOptions } from 'node:stream';\\n    function finished(stream: NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream, options?: FinishedOptions): Promise<void>;\\n    function pipeline<A extends PipelineSource<any>, B extends PipelineDestination<A, any>>(source: A, destination: B, options?: PipelineOptions): PipelinePromise<B>;\\n    function pipeline<A extends PipelineSource<any>, T1 extends PipelineTransform<A, any>, B extends PipelineDestination<T1, any>>(\\n        source: A,\\n        transform1: T1,\\n        destination: B,\\n        options?: PipelineOptions\\n    ): PipelinePromise<B>;\\n    function pipeline<A extends PipelineSource<any>, T1 extends PipelineTransform<A, any>, T2 extends PipelineTransform<T1, any>, B extends PipelineDestination<T2, any>>(\\n        source: A,\\n        transform1: T1,\\n        transform2: T2,\\n        destination: B,\\n        options?: PipelineOptions\\n    ): PipelinePromise<B>;\\n    function pipeline<\\n        A extends PipelineSource<any>,\\n        T1 extends PipelineTransform<A, any>,\\n        T2 extends PipelineTransform<T1, any>,\\n        T3 extends PipelineTransform<T2, any>,\\n        B extends PipelineDestination<T3, any>\\n    >(source: A, transform1: T1, transform2: T2, transform3: T3, destination: B, options?: PipelineOptions): PipelinePromise<B>;\\n    function pipeline<\\n        A extends PipelineSource<any>,\\n        T1 extends PipelineTransform<A, any>,\\n        T2 extends PipelineTransform<T1, any>,\\n        T3 extends PipelineTransform<T2, any>,\\n        T4 extends PipelineTransform<T3, any>,\\n        B extends PipelineDestination<T4, any>\\n    >(source: A, transform1: T1, transform2: T2, transform3: T3, transform4: T4, destination: B, options?: PipelineOptions): PipelinePromise<B>;\\n    function pipeline(streams: ReadonlyArray<NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream>, options?: PipelineOptions): Promise<void>;\\n    function pipeline(\\n        stream1: NodeJS.ReadableStream,\\n        stream2: NodeJS.ReadWriteStream | NodeJS.WritableStream,\\n        ...streams: Array<NodeJS.ReadWriteStream | NodeJS.WritableStream | PipelineOptions>\\n    ): Promise<void>;\\n}\\ndeclare module 'node:stream/promises' {\\n    export * from 'stream/promises';\\n}\\n\",\"file:///node_modules/@types/node/stream/web.d.ts\":\"declare module 'stream/web' {\\n    // stub module, pending copy&paste from .d.ts or manual impl\\n    // copy from lib.dom.d.ts\\n    interface ReadableWritablePair<R = any, W = any> {\\n        readable: ReadableStream<R>;\\n        /**\\n         * Provides a convenient, chainable way of piping this readable stream\\n         * through a transform stream (or any other { writable, readable }\\n         * pair). It simply pipes the stream into the writable side of the\\n         * supplied pair, and returns the readable side for further use.\\n         *\\n         * Piping a stream will lock it for the duration of the pipe, preventing\\n         * any other consumer from acquiring a reader.\\n         */\\n        writable: WritableStream<W>;\\n    }\\n    interface StreamPipeOptions {\\n        preventAbort?: boolean;\\n        preventCancel?: boolean;\\n        /**\\n         * Pipes this readable stream to a given writable stream destination.\\n         * The way in which the piping process behaves under various error\\n         * conditions can be customized with a number of passed options. It\\n         * returns a promise that fulfills when the piping process completes\\n         * successfully, or rejects if any errors were encountered.\\n         *\\n         * Piping a stream will lock it for the duration of the pipe, preventing\\n         * any other consumer from acquiring a reader.\\n         *\\n         * Errors and closures of the source and destination streams propagate\\n         * as follows:\\n         *\\n         * An error in this source readable stream will abort destination,\\n         * unless preventAbort is truthy. The returned promise will be rejected\\n         * with the source's error, or with any error that occurs during\\n         * aborting the destination.\\n         *\\n         * An error in destination will cancel this source readable stream,\\n         * unless preventCancel is truthy. The returned promise will be rejected\\n         * with the destination's error, or with any error that occurs during\\n         * canceling the source.\\n         *\\n         * When this source readable stream closes, destination will be closed,\\n         * unless preventClose is truthy. The returned promise will be fulfilled\\n         * once this process completes, unless an error is encountered while\\n         * closing the destination, in which case it will be rejected with that\\n         * error.\\n         *\\n         * If destination starts out closed or closing, this source readable\\n         * stream will be canceled, unless preventCancel is true. The returned\\n         * promise will be rejected with an error indicating piping to a closed\\n         * stream failed, or with any error that occurs during canceling the\\n         * source.\\n         *\\n         * The signal option can be set to an AbortSignal to allow aborting an\\n         * ongoing pipe operation via the corresponding AbortController. In this\\n         * case, this source readable stream will be canceled, and destination\\n         * aborted, unless the respective options preventCancel or preventAbort\\n         * are set.\\n         */\\n        preventClose?: boolean;\\n        signal?: AbortSignal;\\n    }\\n    interface ReadableStreamGenericReader {\\n        readonly closed: Promise<undefined>;\\n        cancel(reason?: any): Promise<void>;\\n    }\\n    interface ReadableStreamDefaultReadValueResult<T> {\\n        done: false;\\n        value: T;\\n    }\\n    interface ReadableStreamDefaultReadDoneResult {\\n        done: true;\\n        value?: undefined;\\n    }\\n    type ReadableStreamController<T> = ReadableStreamDefaultController<T>;\\n    type ReadableStreamDefaultReadResult<T> = ReadableStreamDefaultReadValueResult<T> | ReadableStreamDefaultReadDoneResult;\\n    interface ReadableByteStreamControllerCallback {\\n        (controller: ReadableByteStreamController): void | PromiseLike<void>;\\n    }\\n    interface UnderlyingSinkAbortCallback {\\n        (reason?: any): void | PromiseLike<void>;\\n    }\\n    interface UnderlyingSinkCloseCallback {\\n        (): void | PromiseLike<void>;\\n    }\\n    interface UnderlyingSinkStartCallback {\\n        (controller: WritableStreamDefaultController): any;\\n    }\\n    interface UnderlyingSinkWriteCallback<W> {\\n        (chunk: W, controller: WritableStreamDefaultController): void | PromiseLike<void>;\\n    }\\n    interface UnderlyingSourceCancelCallback {\\n        (reason?: any): void | PromiseLike<void>;\\n    }\\n    interface UnderlyingSourcePullCallback<R> {\\n        (controller: ReadableStreamController<R>): void | PromiseLike<void>;\\n    }\\n    interface UnderlyingSourceStartCallback<R> {\\n        (controller: ReadableStreamController<R>): any;\\n    }\\n    interface TransformerFlushCallback<O> {\\n        (controller: TransformStreamDefaultController<O>): void | PromiseLike<void>;\\n    }\\n    interface TransformerStartCallback<O> {\\n        (controller: TransformStreamDefaultController<O>): any;\\n    }\\n    interface TransformerTransformCallback<I, O> {\\n        (chunk: I, controller: TransformStreamDefaultController<O>): void | PromiseLike<void>;\\n    }\\n    interface UnderlyingByteSource {\\n        autoAllocateChunkSize?: number;\\n        cancel?: ReadableStreamErrorCallback;\\n        pull?: ReadableByteStreamControllerCallback;\\n        start?: ReadableByteStreamControllerCallback;\\n        type: 'bytes';\\n    }\\n    interface UnderlyingSource<R = any> {\\n        cancel?: UnderlyingSourceCancelCallback;\\n        pull?: UnderlyingSourcePullCallback<R>;\\n        start?: UnderlyingSourceStartCallback<R>;\\n        type?: undefined;\\n    }\\n    interface UnderlyingSink<W = any> {\\n        abort?: UnderlyingSinkAbortCallback;\\n        close?: UnderlyingSinkCloseCallback;\\n        start?: UnderlyingSinkStartCallback;\\n        type?: undefined;\\n        write?: UnderlyingSinkWriteCallback<W>;\\n    }\\n    interface ReadableStreamErrorCallback {\\n        (reason: any): void | PromiseLike<void>;\\n    }\\n    /** This Streams API interface represents a readable stream of byte data. */\\n    interface ReadableStream<R = any> {\\n        readonly locked: boolean;\\n        cancel(reason?: any): Promise<void>;\\n        getReader(): ReadableStreamDefaultReader<R>;\\n        pipeThrough<T>(transform: ReadableWritablePair<T, R>, options?: StreamPipeOptions): ReadableStream<T>;\\n        pipeTo(destination: WritableStream<R>, options?: StreamPipeOptions): Promise<void>;\\n        tee(): [ReadableStream<R>, ReadableStream<R>];\\n        values(options?: { preventCancel?: boolean }): AsyncIterableIterator<R>;\\n        [Symbol.asyncIterator](): AsyncIterableIterator<R>;\\n    }\\n    const ReadableStream: {\\n        prototype: ReadableStream;\\n        new (underlyingSource: UnderlyingByteSource, strategy?: QueuingStrategy<Uint8Array>): ReadableStream<Uint8Array>;\\n        new <R = any>(underlyingSource?: UnderlyingSource<R>, strategy?: QueuingStrategy<R>): ReadableStream<R>;\\n    };\\n    interface ReadableStreamDefaultReader<R = any> extends ReadableStreamGenericReader {\\n        read(): Promise<ReadableStreamDefaultReadResult<R>>;\\n        releaseLock(): void;\\n    }\\n    const ReadableStreamDefaultReader: {\\n        prototype: ReadableStreamDefaultReader;\\n        new <R = any>(stream: ReadableStream<R>): ReadableStreamDefaultReader<R>;\\n    };\\n    const ReadableStreamBYOBReader: any;\\n    const ReadableStreamBYOBRequest: any;\\n    interface ReadableByteStreamController {\\n        readonly byobRequest: undefined;\\n        readonly desiredSize: number | null;\\n        close(): void;\\n        enqueue(chunk: ArrayBufferView): void;\\n        error(error?: any): void;\\n    }\\n    const ReadableByteStreamController: {\\n        prototype: ReadableByteStreamController;\\n        new (): ReadableByteStreamController;\\n    };\\n    interface ReadableStreamDefaultController<R = any> {\\n        readonly desiredSize: number | null;\\n        close(): void;\\n        enqueue(chunk?: R): void;\\n        error(e?: any): void;\\n    }\\n    const ReadableStreamDefaultController: {\\n        prototype: ReadableStreamDefaultController;\\n        new (): ReadableStreamDefaultController;\\n    };\\n    interface Transformer<I = any, O = any> {\\n        flush?: TransformerFlushCallback<O>;\\n        readableType?: undefined;\\n        start?: TransformerStartCallback<O>;\\n        transform?: TransformerTransformCallback<I, O>;\\n        writableType?: undefined;\\n    }\\n    interface TransformStream<I = any, O = any> {\\n        readonly readable: ReadableStream<O>;\\n        readonly writable: WritableStream<I>;\\n    }\\n    const TransformStream: {\\n        prototype: TransformStream;\\n        new <I = any, O = any>(transformer?: Transformer<I, O>, writableStrategy?: QueuingStrategy<I>, readableStrategy?: QueuingStrategy<O>): TransformStream<I, O>;\\n    };\\n    interface TransformStreamDefaultController<O = any> {\\n        readonly desiredSize: number | null;\\n        enqueue(chunk?: O): void;\\n        error(reason?: any): void;\\n        terminate(): void;\\n    }\\n    const TransformStreamDefaultController: {\\n        prototype: TransformStreamDefaultController;\\n        new (): TransformStreamDefaultController;\\n    };\\n    /**\\n     * This Streams API interface provides a standard abstraction for writing\\n     * streaming data to a destination, known as a sink. This object comes with\\n     * built-in back pressure and queuing.\\n     */\\n    interface WritableStream<W = any> {\\n        readonly locked: boolean;\\n        abort(reason?: any): Promise<void>;\\n        close(): Promise<void>;\\n        getWriter(): WritableStreamDefaultWriter<W>;\\n    }\\n    const WritableStream: {\\n        prototype: WritableStream;\\n        new <W = any>(underlyingSink?: UnderlyingSink<W>, strategy?: QueuingStrategy<W>): WritableStream<W>;\\n    };\\n    /**\\n     * This Streams API interface is the object returned by\\n     * WritableStream.getWriter() and once created locks the < writer to the\\n     * WritableStream ensuring that no other streams can write to the underlying\\n     * sink.\\n     */\\n    interface WritableStreamDefaultWriter<W = any> {\\n        readonly closed: Promise<undefined>;\\n        readonly desiredSize: number | null;\\n        readonly ready: Promise<undefined>;\\n        abort(reason?: any): Promise<void>;\\n        close(): Promise<void>;\\n        releaseLock(): void;\\n        write(chunk?: W): Promise<void>;\\n    }\\n    const WritableStreamDefaultWriter: {\\n        prototype: WritableStreamDefaultWriter;\\n        new <W = any>(stream: WritableStream<W>): WritableStreamDefaultWriter<W>;\\n    };\\n    /**\\n     * This Streams API interface represents a controller allowing control of a\\n     * WritableStream's state. When constructing a WritableStream, the\\n     * underlying sink is given a corresponding WritableStreamDefaultController\\n     * instance to manipulate.\\n     */\\n    interface WritableStreamDefaultController {\\n        error(e?: any): void;\\n    }\\n    const WritableStreamDefaultController: {\\n        prototype: WritableStreamDefaultController;\\n        new (): WritableStreamDefaultController;\\n    };\\n    interface QueuingStrategy<T = any> {\\n        highWaterMark?: number;\\n        size?: QueuingStrategySize<T>;\\n    }\\n    interface QueuingStrategySize<T = any> {\\n        (chunk?: T): number;\\n    }\\n    interface QueuingStrategyInit {\\n        /**\\n         * Creates a new ByteLengthQueuingStrategy with the provided high water\\n         * mark.\\n         *\\n         * Note that the provided high water mark will not be validated ahead of\\n         * time. Instead, if it is negative, NaN, or not a number, the resulting\\n         * ByteLengthQueuingStrategy will cause the corresponding stream\\n         * constructor to throw.\\n         */\\n        highWaterMark: number;\\n    }\\n    /**\\n     * This Streams API interface provides a built-in byte length queuing\\n     * strategy that can be used when constructing streams.\\n     */\\n    interface ByteLengthQueuingStrategy extends QueuingStrategy<ArrayBufferView> {\\n        readonly highWaterMark: number;\\n        readonly size: QueuingStrategySize<ArrayBufferView>;\\n    }\\n    const ByteLengthQueuingStrategy: {\\n        prototype: ByteLengthQueuingStrategy;\\n        new (init: QueuingStrategyInit): ByteLengthQueuingStrategy;\\n    };\\n    /**\\n     * This Streams API interface provides a built-in byte length queuing\\n     * strategy that can be used when constructing streams.\\n     */\\n    interface CountQueuingStrategy extends QueuingStrategy {\\n        readonly highWaterMark: number;\\n        readonly size: QueuingStrategySize;\\n    }\\n    const CountQueuingStrategy: {\\n        prototype: CountQueuingStrategy;\\n        new (init: QueuingStrategyInit): CountQueuingStrategy;\\n    };\\n    interface TextEncoderStream {\\n        /** Returns \\\"utf-8\\\". */\\n        readonly encoding: 'utf-8';\\n        readonly readable: ReadableStream<Uint8Array>;\\n        readonly writable: WritableStream<string>;\\n        readonly [Symbol.toStringTag]: string;\\n    }\\n    const TextEncoderStream: {\\n        prototype: TextEncoderStream;\\n        new (): TextEncoderStream;\\n    };\\n    interface TextDecoderOptions {\\n        fatal?: boolean;\\n        ignoreBOM?: boolean;\\n    }\\n    type BufferSource = ArrayBufferView | ArrayBuffer;\\n    interface TextDecoderStream {\\n        /** Returns encoding's name, lower cased. */\\n        readonly encoding: string;\\n        /** Returns `true` if error mode is \\\"fatal\\\", and `false` otherwise. */\\n        readonly fatal: boolean;\\n        /** Returns `true` if ignore BOM flag is set, and `false` otherwise. */\\n        readonly ignoreBOM: boolean;\\n        readonly readable: ReadableStream<string>;\\n        readonly writable: WritableStream<BufferSource>;\\n        readonly [Symbol.toStringTag]: string;\\n    }\\n    const TextDecoderStream: {\\n        prototype: TextDecoderStream;\\n        new (label?: string, options?: TextDecoderOptions): TextDecoderStream;\\n    };\\n}\\ndeclare module 'node:stream/web' {\\n    export * from 'stream/web';\\n}\\n\",\"file:///node_modules/@types/node/timers/promises.d.ts\":\"/**\\n * The `timers/promises` API provides an alternative set of timer functions\\n * that return `Promise` objects. The API is accessible via`require('timers/promises')`.\\n *\\n * ```js\\n * import {\\n *   setTimeout,\\n *   setImmediate,\\n *   setInterval,\\n * } from 'timers/promises';\\n * ```\\n * @since v15.0.0\\n */\\ndeclare module 'timers/promises' {\\n    import { TimerOptions } from 'node:timers';\\n    /**\\n     * ```js\\n     * import {\\n     *   setTimeout,\\n     * } from 'timers/promises';\\n     *\\n     * const res = await setTimeout(100, 'result');\\n     *\\n     * console.log(res);  // Prints 'result'\\n     * ```\\n     * @since v15.0.0\\n     * @param [delay=1] The number of milliseconds to wait before fulfilling the promise.\\n     * @param value A value with which the promise is fulfilled.\\n     */\\n    function setTimeout<T = void>(delay?: number, value?: T, options?: TimerOptions): Promise<T>;\\n    /**\\n     * ```js\\n     * import {\\n     *   setImmediate,\\n     * } from 'timers/promises';\\n     *\\n     * const res = await setImmediate('result');\\n     *\\n     * console.log(res);  // Prints 'result'\\n     * ```\\n     * @since v15.0.0\\n     * @param value A value with which the promise is fulfilled.\\n     */\\n    function setImmediate<T = void>(value?: T, options?: TimerOptions): Promise<T>;\\n    /**\\n     * Returns an async iterator that generates values in an interval of `delay` ms.\\n     *\\n     * ```js\\n     * import {\\n     *   setInterval,\\n     * } from 'timers/promises';\\n     *\\n     * const interval = 100;\\n     * for await (const startTime of setInterval(interval, Date.now())) {\\n     *   const now = Date.now();\\n     *   console.log(now);\\n     *   if ((now - startTime) > 1000)\\n     *     break;\\n     * }\\n     * console.log(Date.now());\\n     * ```\\n     * @since v15.9.0\\n     */\\n    function setInterval<T = void>(delay?: number, value?: T, options?: TimerOptions): AsyncIterable<T>;\\n\\n    interface Scheduler {\\n        /**\\n         * ```js\\n         * import { scheduler } from 'node:timers/promises';\\n         *\\n         * await scheduler.wait(1000); // Wait one second before continuing\\n         * ```\\n         * An experimental API defined by the Scheduling APIs draft specification being developed as a standard Web Platform API.\\n         * Calling timersPromises.scheduler.wait(delay, options) is roughly equivalent to calling timersPromises.setTimeout(delay, undefined, options) except that the ref option is not supported.\\n         * @since v16.14.0\\n         * @experimental\\n         * @param [delay=1] The number of milliseconds to wait before fulfilling the promise.\\n         */\\n        wait: (delay?: number, options?: TimerOptions) => Promise<void>;\\n        /**\\n         * An experimental API defined by the Scheduling APIs draft specification being developed as a standard Web Platform API.\\n         * Calling timersPromises.scheduler.yield() is equivalent to calling timersPromises.setImmediate() with no arguments.\\n         * @since v16.14.0\\n         * @experimental\\n         */\\n        yield: () => Promise<void>;\\n    }\\n\\n    const scheduler: Scheduler;\\n}\\ndeclare module 'node:timers/promises' {\\n    export * from 'timers/promises';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/assert.d.ts\":\"/**\\n * The `assert` module provides a set of assertion functions for verifying\\n * invariants.\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/assert.js)\\n */\\ndeclare module 'assert' {\\n    /**\\n     * An alias of {@link ok}.\\n     * @since v0.5.9\\n     * @param value The input that is checked for being truthy.\\n     */\\n    function assert(value: unknown, message?: string | Error): asserts value;\\n    namespace assert {\\n        /**\\n         * Indicates the failure of an assertion. All errors thrown by the `assert` module\\n         * will be instances of the `AssertionError` class.\\n         */\\n        class AssertionError extends Error {\\n            actual: unknown;\\n            expected: unknown;\\n            operator: string;\\n            generatedMessage: boolean;\\n            code: 'ERR_ASSERTION';\\n            constructor(options?: {\\n                /** If provided, the error message is set to this value. */\\n                message?: string | undefined;\\n                /** The `actual` property on the error instance. */\\n                actual?: unknown | undefined;\\n                /** The `expected` property on the error instance. */\\n                expected?: unknown | undefined;\\n                /** The `operator` property on the error instance. */\\n                operator?: string | undefined;\\n                /** If provided, the generated stack trace omits frames before this function. */\\n                // tslint:disable-next-line:ban-types\\n                stackStartFn?: Function | undefined;\\n            });\\n        }\\n        /**\\n         * This feature is currently experimental and behavior might still change.\\n         * @since v14.2.0, v12.19.0\\n         * @experimental\\n         */\\n        class CallTracker {\\n            /**\\n             * The wrapper function is expected to be called exactly `exact` times. If the\\n             * function has not been called exactly `exact` times when `tracker.verify()` is called, then `tracker.verify()` will throw an\\n             * error.\\n             *\\n             * ```js\\n             * import assert from 'assert';\\n             *\\n             * // Creates call tracker.\\n             * const tracker = new assert.CallTracker();\\n             *\\n             * function func() {}\\n             *\\n             * // Returns a function that wraps func() that must be called exact times\\n             * // before tracker.verify().\\n             * const callsfunc = tracker.calls(func);\\n             * ```\\n             * @since v14.2.0, v12.19.0\\n             * @param [fn='A no-op function']\\n             * @param [exact=1]\\n             * @return that wraps `fn`.\\n             */\\n            calls(exact?: number): () => void;\\n            calls<Func extends (...args: any[]) => any>(fn?: Func, exact?: number): Func;\\n            /**\\n             * Example:\\n             *\\n             * ```js\\n             * import assert from 'node:assert';\\n             *\\n             * const tracker = new assert.CallTracker();\\n             *\\n             * function func() {}\\n             * const callsfunc = tracker.calls(func);\\n             * callsfunc(1, 2, 3);\\n             *\\n             * assert.deepStrictEqual(tracker.getCalls(callsfunc),\\n             *                        [{ thisArg: this, arguments: [1, 2, 3 ] }]);\\n             * ```\\n             *\\n             * @since v18.8.0, v16.18.0\\n             * @params fn\\n             * @returns An Array with the calls to a tracked function.\\n             */\\n            getCalls(fn: Function): CallTrackerCall[];\\n            /**\\n             * The arrays contains information about the expected and actual number of calls of\\n             * the functions that have not been called the expected number of times.\\n             *\\n             * ```js\\n             * import assert from 'assert';\\n             *\\n             * // Creates call tracker.\\n             * const tracker = new assert.CallTracker();\\n             *\\n             * function func() {}\\n             *\\n             * function foo() {}\\n             *\\n             * // Returns a function that wraps func() that must be called exact times\\n             * // before tracker.verify().\\n             * const callsfunc = tracker.calls(func, 2);\\n             *\\n             * // Returns an array containing information on callsfunc()\\n             * tracker.report();\\n             * // [\\n             * //  {\\n             * //    message: 'Expected the func function to be executed 2 time(s) but was\\n             * //    executed 0 time(s).',\\n             * //    actual: 0,\\n             * //    expected: 2,\\n             * //    operator: 'func',\\n             * //    stack: stack trace\\n             * //  }\\n             * // ]\\n             * ```\\n             * @since v14.2.0, v12.19.0\\n             * @return of objects containing information about the wrapper functions returned by `calls`.\\n             */\\n            report(): CallTrackerReportInformation[];\\n            /**\\n             * Reset calls of the call tracker.\\n             * If a tracked function is passed as an argument, the calls will be reset for it.\\n             * If no arguments are passed, all tracked functions will be reset.\\n             *\\n             * ```js\\n             * import assert from 'node:assert';\\n             *\\n             * const tracker = new assert.CallTracker();\\n             *\\n             * function func() {}\\n             * const callsfunc = tracker.calls(func);\\n             *\\n             * callsfunc();\\n             * // Tracker was called once\\n             * tracker.getCalls(callsfunc).length === 1;\\n             *\\n             * tracker.reset(callsfunc);\\n             * tracker.getCalls(callsfunc).length === 0;\\n             * ```\\n             *\\n             * @since v18.8.0, v16.18.0\\n             * @param fn a tracked function to reset.\\n             */\\n            reset(fn?: Function): void;\\n            /**\\n             * Iterates through the list of functions passed to `tracker.calls()` and will throw an error for functions that\\n             * have not been called the expected number of times.\\n             *\\n             * ```js\\n             * import assert from 'assert';\\n             *\\n             * // Creates call tracker.\\n             * const tracker = new assert.CallTracker();\\n             *\\n             * function func() {}\\n             *\\n             * // Returns a function that wraps func() that must be called exact times\\n             * // before tracker.verify().\\n             * const callsfunc = tracker.calls(func, 2);\\n             *\\n             * callsfunc();\\n             *\\n             * // Will throw an error since callsfunc() was only called once.\\n             * tracker.verify();\\n             * ```\\n             * @since v14.2.0, v12.19.0\\n             */\\n            verify(): void;\\n        }\\n        interface CallTrackerCall {\\n            thisArg: object;\\n            arguments: unknown[];\\n        }\\n        interface CallTrackerReportInformation {\\n            message: string;\\n            /** The actual number of times the function was called. */\\n            actual: number;\\n            /** The number of times the function was expected to be called. */\\n            expected: number;\\n            /** The name of the function that is wrapped. */\\n            operator: string;\\n            /** A stack trace of the function. */\\n            stack: object;\\n        }\\n        type AssertPredicate = RegExp | (new () => object) | ((thrown: unknown) => boolean) | object | Error;\\n        /**\\n         * Throws an `AssertionError` with the provided error message or a default\\n         * error message. If the `message` parameter is an instance of an `Error` then\\n         * it will be thrown instead of the `AssertionError`.\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.fail();\\n         * // AssertionError [ERR_ASSERTION]: Failed\\n         *\\n         * assert.fail('boom');\\n         * // AssertionError [ERR_ASSERTION]: boom\\n         *\\n         * assert.fail(new TypeError('need array'));\\n         * // TypeError: need array\\n         * ```\\n         *\\n         * Using `assert.fail()` with more than two arguments is possible but deprecated.\\n         * See below for further details.\\n         * @since v0.1.21\\n         * @param [message='Failed']\\n         */\\n        function fail(message?: string | Error): never;\\n        /** @deprecated since v10.0.0 - use fail([message]) or other assert functions instead. */\\n        function fail(\\n            actual: unknown,\\n            expected: unknown,\\n            message?: string | Error,\\n            operator?: string,\\n            // tslint:disable-next-line:ban-types\\n            stackStartFn?: Function\\n        ): never;\\n        /**\\n         * Tests if `value` is truthy. It is equivalent to`assert.equal(!!value, true, message)`.\\n         *\\n         * If `value` is not truthy, an `AssertionError` is thrown with a `message`property set equal to the value of the `message` parameter. If the `message`parameter is `undefined`, a default\\n         * error message is assigned. If the `message`parameter is an instance of an `Error` then it will be thrown instead of the`AssertionError`.\\n         * If no arguments are passed in at all `message` will be set to the string:`` 'No value argument passed to `assert.ok()`' ``.\\n         *\\n         * Be aware that in the `repl` the error message will be different to the one\\n         * thrown in a file! See below for further details.\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.ok(true);\\n         * // OK\\n         * assert.ok(1);\\n         * // OK\\n         *\\n         * assert.ok();\\n         * // AssertionError: No value argument passed to `assert.ok()`\\n         *\\n         * assert.ok(false, 'it\\\\'s false');\\n         * // AssertionError: it's false\\n         *\\n         * // In the repl:\\n         * assert.ok(typeof 123 === 'string');\\n         * // AssertionError: false == true\\n         *\\n         * // In a file (e.g. test.js):\\n         * assert.ok(typeof 123 === 'string');\\n         * // AssertionError: The expression evaluated to a falsy value:\\n         * //\\n         * //   assert.ok(typeof 123 === 'string')\\n         *\\n         * assert.ok(false);\\n         * // AssertionError: The expression evaluated to a falsy value:\\n         * //\\n         * //   assert.ok(false)\\n         *\\n         * assert.ok(0);\\n         * // AssertionError: The expression evaluated to a falsy value:\\n         * //\\n         * //   assert.ok(0)\\n         * ```\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * // Using `assert()` works the same:\\n         * assert(0);\\n         * // AssertionError: The expression evaluated to a falsy value:\\n         * //\\n         * //   assert(0)\\n         * ```\\n         * @since v0.1.21\\n         */\\n        function ok(value: unknown, message?: string | Error): asserts value;\\n        /**\\n         * **Strict assertion mode**\\n         *\\n         * An alias of {@link strictEqual}.\\n         *\\n         * **Legacy assertion mode**\\n         *\\n         * > Stability: 3 - Legacy: Use {@link strictEqual} instead.\\n         *\\n         * Tests shallow, coercive equality between the `actual` and `expected` parameters\\n         * using the [`==` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality). `NaN` is specially handled\\n         * and treated as being identical if both sides are `NaN`.\\n         *\\n         * ```js\\n         * import assert from 'assert';\\n         *\\n         * assert.equal(1, 1);\\n         * // OK, 1 == 1\\n         * assert.equal(1, '1');\\n         * // OK, 1 == '1'\\n         * assert.equal(NaN, NaN);\\n         * // OK\\n         *\\n         * assert.equal(1, 2);\\n         * // AssertionError: 1 == 2\\n         * assert.equal({ a: { b: 1 } }, { a: { b: 1 } });\\n         * // AssertionError: { a: { b: 1 } } == { a: { b: 1 } }\\n         * ```\\n         *\\n         * If the values are not equal, an `AssertionError` is thrown with a `message`property set equal to the value of the `message` parameter. If the `message`parameter is undefined, a default\\n         * error message is assigned. If the `message`parameter is an instance of an `Error` then it will be thrown instead of the`AssertionError`.\\n         * @since v0.1.21\\n         */\\n        function equal(actual: unknown, expected: unknown, message?: string | Error): void;\\n        /**\\n         * **Strict assertion mode**\\n         *\\n         * An alias of {@link notStrictEqual}.\\n         *\\n         * **Legacy assertion mode**\\n         *\\n         * > Stability: 3 - Legacy: Use {@link notStrictEqual} instead.\\n         *\\n         * Tests shallow, coercive inequality with the [`!=` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Inequality). `NaN` is\\n         * specially handled and treated as being identical if both sides are `NaN`.\\n         *\\n         * ```js\\n         * import assert from 'assert';\\n         *\\n         * assert.notEqual(1, 2);\\n         * // OK\\n         *\\n         * assert.notEqual(1, 1);\\n         * // AssertionError: 1 != 1\\n         *\\n         * assert.notEqual(1, '1');\\n         * // AssertionError: 1 != '1'\\n         * ```\\n         *\\n         * If the values are equal, an `AssertionError` is thrown with a `message`property set equal to the value of the `message` parameter. If the `message`parameter is undefined, a default error\\n         * message is assigned. If the `message`parameter is an instance of an `Error` then it will be thrown instead of the`AssertionError`.\\n         * @since v0.1.21\\n         */\\n        function notEqual(actual: unknown, expected: unknown, message?: string | Error): void;\\n        /**\\n         * **Strict assertion mode**\\n         *\\n         * An alias of {@link deepStrictEqual}.\\n         *\\n         * **Legacy assertion mode**\\n         *\\n         * > Stability: 3 - Legacy: Use {@link deepStrictEqual} instead.\\n         *\\n         * Tests for deep equality between the `actual` and `expected` parameters. Consider\\n         * using {@link deepStrictEqual} instead. {@link deepEqual} can have\\n         * surprising results.\\n         *\\n         * _Deep equality_ means that the enumerable \\\"own\\\" properties of child objects\\n         * are also recursively evaluated by the following rules.\\n         * @since v0.1.21\\n         */\\n        function deepEqual(actual: unknown, expected: unknown, message?: string | Error): void;\\n        /**\\n         * **Strict assertion mode**\\n         *\\n         * An alias of {@link notDeepStrictEqual}.\\n         *\\n         * **Legacy assertion mode**\\n         *\\n         * > Stability: 3 - Legacy: Use {@link notDeepStrictEqual} instead.\\n         *\\n         * Tests for any deep inequality. Opposite of {@link deepEqual}.\\n         *\\n         * ```js\\n         * import assert from 'assert';\\n         *\\n         * const obj1 = {\\n         *   a: {\\n         *     b: 1\\n         *   }\\n         * };\\n         * const obj2 = {\\n         *   a: {\\n         *     b: 2\\n         *   }\\n         * };\\n         * const obj3 = {\\n         *   a: {\\n         *     b: 1\\n         *   }\\n         * };\\n         * const obj4 = Object.create(obj1);\\n         *\\n         * assert.notDeepEqual(obj1, obj1);\\n         * // AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }\\n         *\\n         * assert.notDeepEqual(obj1, obj2);\\n         * // OK\\n         *\\n         * assert.notDeepEqual(obj1, obj3);\\n         * // AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }\\n         *\\n         * assert.notDeepEqual(obj1, obj4);\\n         * // OK\\n         * ```\\n         *\\n         * If the values are deeply equal, an `AssertionError` is thrown with a`message` property set equal to the value of the `message` parameter. If the`message` parameter is undefined, a default\\n         * error message is assigned. If the`message` parameter is an instance of an `Error` then it will be thrown\\n         * instead of the `AssertionError`.\\n         * @since v0.1.21\\n         */\\n        function notDeepEqual(actual: unknown, expected: unknown, message?: string | Error): void;\\n        /**\\n         * Tests strict equality between the `actual` and `expected` parameters as\\n         * determined by [`Object.is()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.strictEqual(1, 2);\\n         * // AssertionError [ERR_ASSERTION]: Expected inputs to be strictly equal:\\n         * //\\n         * // 1 !== 2\\n         *\\n         * assert.strictEqual(1, 1);\\n         * // OK\\n         *\\n         * assert.strictEqual('Hello foobar', 'Hello World!');\\n         * // AssertionError [ERR_ASSERTION]: Expected inputs to be strictly equal:\\n         * // + actual - expected\\n         * //\\n         * // + 'Hello foobar'\\n         * // - 'Hello World!'\\n         * //          ^\\n         *\\n         * const apples = 1;\\n         * const oranges = 2;\\n         * assert.strictEqual(apples, oranges, `apples ${apples} !== oranges ${oranges}`);\\n         * // AssertionError [ERR_ASSERTION]: apples 1 !== oranges 2\\n         *\\n         * assert.strictEqual(1, '1', new TypeError('Inputs are not identical'));\\n         * // TypeError: Inputs are not identical\\n         * ```\\n         *\\n         * If the values are not strictly equal, an `AssertionError` is thrown with a`message` property set equal to the value of the `message` parameter. If the`message` parameter is undefined, a\\n         * default error message is assigned. If the`message` parameter is an instance of an `Error` then it will be thrown\\n         * instead of the `AssertionError`.\\n         * @since v0.1.21\\n         */\\n        function strictEqual<T>(actual: unknown, expected: T, message?: string | Error): asserts actual is T;\\n        /**\\n         * Tests strict inequality between the `actual` and `expected` parameters as\\n         * determined by [`Object.is()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.notStrictEqual(1, 2);\\n         * // OK\\n         *\\n         * assert.notStrictEqual(1, 1);\\n         * // AssertionError [ERR_ASSERTION]: Expected \\\"actual\\\" to be strictly unequal to:\\n         * //\\n         * // 1\\n         *\\n         * assert.notStrictEqual(1, '1');\\n         * // OK\\n         * ```\\n         *\\n         * If the values are strictly equal, an `AssertionError` is thrown with a`message` property set equal to the value of the `message` parameter. If the`message` parameter is undefined, a\\n         * default error message is assigned. If the`message` parameter is an instance of an `Error` then it will be thrown\\n         * instead of the `AssertionError`.\\n         * @since v0.1.21\\n         */\\n        function notStrictEqual(actual: unknown, expected: unknown, message?: string | Error): void;\\n        /**\\n         * Tests for deep equality between the `actual` and `expected` parameters.\\n         * \\\"Deep\\\" equality means that the enumerable \\\"own\\\" properties of child objects\\n         * are recursively evaluated also by the following rules.\\n         * @since v1.2.0\\n         */\\n        function deepStrictEqual<T>(actual: unknown, expected: T, message?: string | Error): asserts actual is T;\\n        /**\\n         * Tests for deep strict inequality. Opposite of {@link deepStrictEqual}.\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.notDeepStrictEqual({ a: 1 }, { a: '1' });\\n         * // OK\\n         * ```\\n         *\\n         * If the values are deeply and strictly equal, an `AssertionError` is thrown\\n         * with a `message` property set equal to the value of the `message` parameter. If\\n         * the `message` parameter is undefined, a default error message is assigned. If\\n         * the `message` parameter is an instance of an `Error` then it will be thrown\\n         * instead of the `AssertionError`.\\n         * @since v1.2.0\\n         */\\n        function notDeepStrictEqual(actual: unknown, expected: unknown, message?: string | Error): void;\\n        /**\\n         * Expects the function `fn` to throw an error.\\n         *\\n         * If specified, `error` can be a [`Class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes),\\n         * [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions), a validation function,\\n         * a validation object where each property will be tested for strict deep equality,\\n         * or an instance of error where each property will be tested for strict deep\\n         * equality including the non-enumerable `message` and `name` properties. When\\n         * using an object, it is also possible to use a regular expression, when\\n         * validating against a string property. See below for examples.\\n         *\\n         * If specified, `message` will be appended to the message provided by the`AssertionError` if the `fn` call fails to throw or in case the error validation\\n         * fails.\\n         *\\n         * Custom validation object/error instance:\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * const err = new TypeError('Wrong value');\\n         * err.code = 404;\\n         * err.foo = 'bar';\\n         * err.info = {\\n         *   nested: true,\\n         *   baz: 'text'\\n         * };\\n         * err.reg = /abc/i;\\n         *\\n         * assert.throws(\\n         *   () => {\\n         *     throw err;\\n         *   },\\n         *   {\\n         *     name: 'TypeError',\\n         *     message: 'Wrong value',\\n         *     info: {\\n         *       nested: true,\\n         *       baz: 'text'\\n         *     }\\n         *     // Only properties on the validation object will be tested for.\\n         *     // Using nested objects requires all properties to be present. Otherwise\\n         *     // the validation is going to fail.\\n         *   }\\n         * );\\n         *\\n         * // Using regular expressions to validate error properties:\\n         * throws(\\n         *   () => {\\n         *     throw err;\\n         *   },\\n         *   {\\n         *     // The `name` and `message` properties are strings and using regular\\n         *     // expressions on those will match against the string. If they fail, an\\n         *     // error is thrown.\\n         *     name: /^TypeError$/,\\n         *     message: /Wrong/,\\n         *     foo: 'bar',\\n         *     info: {\\n         *       nested: true,\\n         *       // It is not possible to use regular expressions for nested properties!\\n         *       baz: 'text'\\n         *     },\\n         *     // The `reg` property contains a regular expression and only if the\\n         *     // validation object contains an identical regular expression, it is going\\n         *     // to pass.\\n         *     reg: /abc/i\\n         *   }\\n         * );\\n         *\\n         * // Fails due to the different `message` and `name` properties:\\n         * throws(\\n         *   () => {\\n         *     const otherErr = new Error('Not found');\\n         *     // Copy all enumerable properties from `err` to `otherErr`.\\n         *     for (const [key, value] of Object.entries(err)) {\\n         *       otherErr[key] = value;\\n         *     }\\n         *     throw otherErr;\\n         *   },\\n         *   // The error's `message` and `name` properties will also be checked when using\\n         *   // an error as validation object.\\n         *   err\\n         * );\\n         * ```\\n         *\\n         * Validate instanceof using constructor:\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.throws(\\n         *   () => {\\n         *     throw new Error('Wrong value');\\n         *   },\\n         *   Error\\n         * );\\n         * ```\\n         *\\n         * Validate error message using [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions):\\n         *\\n         * Using a regular expression runs `.toString` on the error object, and will\\n         * therefore also include the error name.\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.throws(\\n         *   () => {\\n         *     throw new Error('Wrong value');\\n         *   },\\n         *   /^Error: Wrong value$/\\n         * );\\n         * ```\\n         *\\n         * Custom error validation:\\n         *\\n         * The function must return `true` to indicate all internal validations passed.\\n         * It will otherwise fail with an `AssertionError`.\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.throws(\\n         *   () => {\\n         *     throw new Error('Wrong value');\\n         *   },\\n         *   (err) => {\\n         *     assert(err instanceof Error);\\n         *     assert(/value/.test(err));\\n         *     // Avoid returning anything from validation functions besides `true`.\\n         *     // Otherwise, it's not clear what part of the validation failed. Instead,\\n         *     // throw an error about the specific validation that failed (as done in this\\n         *     // example) and add as much helpful debugging information to that error as\\n         *     // possible.\\n         *     return true;\\n         *   },\\n         *   'unexpected error'\\n         * );\\n         * ```\\n         *\\n         * `error` cannot be a string. If a string is provided as the second\\n         * argument, then `error` is assumed to be omitted and the string will be used for`message` instead. This can lead to easy-to-miss mistakes. Using the same\\n         * message as the thrown error message is going to result in an`ERR_AMBIGUOUS_ARGUMENT` error. Please read the example below carefully if using\\n         * a string as the second argument gets considered:\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * function throwingFirst() {\\n         *   throw new Error('First');\\n         * }\\n         *\\n         * function throwingSecond() {\\n         *   throw new Error('Second');\\n         * }\\n         *\\n         * function notThrowing() {}\\n         *\\n         * // The second argument is a string and the input function threw an Error.\\n         * // The first case will not throw as it does not match for the error message\\n         * // thrown by the input function!\\n         * assert.throws(throwingFirst, 'Second');\\n         * // In the next example the message has no benefit over the message from the\\n         * // error and since it is not clear if the user intended to actually match\\n         * // against the error message, Node.js throws an `ERR_AMBIGUOUS_ARGUMENT` error.\\n         * assert.throws(throwingSecond, 'Second');\\n         * // TypeError [ERR_AMBIGUOUS_ARGUMENT]\\n         *\\n         * // The string is only used (as message) in case the function does not throw:\\n         * assert.throws(notThrowing, 'Second');\\n         * // AssertionError [ERR_ASSERTION]: Missing expected exception: Second\\n         *\\n         * // If it was intended to match for the error message do this instead:\\n         * // It does not throw because the error messages match.\\n         * assert.throws(throwingSecond, /Second$/);\\n         *\\n         * // If the error message does not match, an AssertionError is thrown.\\n         * assert.throws(throwingFirst, /Second$/);\\n         * // AssertionError [ERR_ASSERTION]\\n         * ```\\n         *\\n         * Due to the confusing error-prone notation, avoid a string as the second\\n         * argument.\\n         * @since v0.1.21\\n         */\\n        function throws(block: () => unknown, message?: string | Error): void;\\n        function throws(block: () => unknown, error: AssertPredicate, message?: string | Error): void;\\n        /**\\n         * Asserts that the function `fn` does not throw an error.\\n         *\\n         * Using `assert.doesNotThrow()` is actually not useful because there\\n         * is no benefit in catching an error and then rethrowing it. Instead, consider\\n         * adding a comment next to the specific code path that should not throw and keep\\n         * error messages as expressive as possible.\\n         *\\n         * When `assert.doesNotThrow()` is called, it will immediately call the `fn`function.\\n         *\\n         * If an error is thrown and it is the same type as that specified by the `error`parameter, then an `AssertionError` is thrown. If the error is of a\\n         * different type, or if the `error` parameter is undefined, the error is\\n         * propagated back to the caller.\\n         *\\n         * If specified, `error` can be a [`Class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes),\\n         * [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions) or a validation\\n         * function. See {@link throws} for more details.\\n         *\\n         * The following, for instance, will throw the `TypeError` because there is no\\n         * matching error type in the assertion:\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.doesNotThrow(\\n         *   () => {\\n         *     throw new TypeError('Wrong value');\\n         *   },\\n         *   SyntaxError\\n         * );\\n         * ```\\n         *\\n         * However, the following will result in an `AssertionError` with the message\\n         * 'Got unwanted exception...':\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.doesNotThrow(\\n         *   () => {\\n         *     throw new TypeError('Wrong value');\\n         *   },\\n         *   TypeError\\n         * );\\n         * ```\\n         *\\n         * If an `AssertionError` is thrown and a value is provided for the `message`parameter, the value of `message` will be appended to the `AssertionError` message:\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.doesNotThrow(\\n         *   () => {\\n         *     throw new TypeError('Wrong value');\\n         *   },\\n         *   /Wrong value/,\\n         *   'Whoops'\\n         * );\\n         * // Throws: AssertionError: Got unwanted exception: Whoops\\n         * ```\\n         * @since v0.1.21\\n         */\\n        function doesNotThrow(block: () => unknown, message?: string | Error): void;\\n        function doesNotThrow(block: () => unknown, error: AssertPredicate, message?: string | Error): void;\\n        /**\\n         * Throws `value` if `value` is not `undefined` or `null`. This is useful when\\n         * testing the `error` argument in callbacks. The stack trace contains all frames\\n         * from the error passed to `ifError()` including the potential new frames for`ifError()` itself.\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.ifError(null);\\n         * // OK\\n         * assert.ifError(0);\\n         * // AssertionError [ERR_ASSERTION]: ifError got unwanted exception: 0\\n         * assert.ifError('error');\\n         * // AssertionError [ERR_ASSERTION]: ifError got unwanted exception: 'error'\\n         * assert.ifError(new Error());\\n         * // AssertionError [ERR_ASSERTION]: ifError got unwanted exception: Error\\n         *\\n         * // Create some random error frames.\\n         * let err;\\n         * (function errorFrame() {\\n         *   err = new Error('test error');\\n         * })();\\n         *\\n         * (function ifErrorFrame() {\\n         *   assert.ifError(err);\\n         * })();\\n         * // AssertionError [ERR_ASSERTION]: ifError got unwanted exception: test error\\n         * //     at ifErrorFrame\\n         * //     at errorFrame\\n         * ```\\n         * @since v0.1.97\\n         */\\n        function ifError(value: unknown): asserts value is null | undefined;\\n        /**\\n         * Awaits the `asyncFn` promise or, if `asyncFn` is a function, immediately\\n         * calls the function and awaits the returned promise to complete. It will then\\n         * check that the promise is rejected.\\n         *\\n         * If `asyncFn` is a function and it throws an error synchronously,`assert.rejects()` will return a rejected `Promise` with that error. If the\\n         * function does not return a promise, `assert.rejects()` will return a rejected`Promise` with an `ERR_INVALID_RETURN_VALUE` error. In both cases the error\\n         * handler is skipped.\\n         *\\n         * Besides the async nature to await the completion behaves identically to {@link throws}.\\n         *\\n         * If specified, `error` can be a [`Class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes),\\n         * [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions), a validation function,\\n         * an object where each property will be tested for, or an instance of error where\\n         * each property will be tested for including the non-enumerable `message` and`name` properties.\\n         *\\n         * If specified, `message` will be the message provided by the `AssertionError` if the `asyncFn` fails to reject.\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * await assert.rejects(\\n         *   async () => {\\n         *     throw new TypeError('Wrong value');\\n         *   },\\n         *   {\\n         *     name: 'TypeError',\\n         *     message: 'Wrong value'\\n         *   }\\n         * );\\n         * ```\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * await assert.rejects(\\n         *   async () => {\\n         *     throw new TypeError('Wrong value');\\n         *   },\\n         *   (err) => {\\n         *     assert.strictEqual(err.name, 'TypeError');\\n         *     assert.strictEqual(err.message, 'Wrong value');\\n         *     return true;\\n         *   }\\n         * );\\n         * ```\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.rejects(\\n         *   Promise.reject(new Error('Wrong value')),\\n         *   Error\\n         * ).then(() => {\\n         *   // ...\\n         * });\\n         * ```\\n         *\\n         * `error` cannot be a string. If a string is provided as the second\\n         * argument, then `error` is assumed to be omitted and the string will be used for`message` instead. This can lead to easy-to-miss mistakes. Please read the\\n         * example in {@link throws} carefully if using a string as the second\\n         * argument gets considered.\\n         * @since v10.0.0\\n         */\\n        function rejects(block: (() => Promise<unknown>) | Promise<unknown>, message?: string | Error): Promise<void>;\\n        function rejects(block: (() => Promise<unknown>) | Promise<unknown>, error: AssertPredicate, message?: string | Error): Promise<void>;\\n        /**\\n         * Awaits the `asyncFn` promise or, if `asyncFn` is a function, immediately\\n         * calls the function and awaits the returned promise to complete. It will then\\n         * check that the promise is not rejected.\\n         *\\n         * If `asyncFn` is a function and it throws an error synchronously,`assert.doesNotReject()` will return a rejected `Promise` with that error. If\\n         * the function does not return a promise, `assert.doesNotReject()` will return a\\n         * rejected `Promise` with an `ERR_INVALID_RETURN_VALUE` error. In both cases\\n         * the error handler is skipped.\\n         *\\n         * Using `assert.doesNotReject()` is actually not useful because there is little\\n         * benefit in catching a rejection and then rejecting it again. Instead, consider\\n         * adding a comment next to the specific code path that should not reject and keep\\n         * error messages as expressive as possible.\\n         *\\n         * If specified, `error` can be a [`Class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes),\\n         * [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions) or a validation\\n         * function. See {@link throws} for more details.\\n         *\\n         * Besides the async nature to await the completion behaves identically to {@link doesNotThrow}.\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * await assert.doesNotReject(\\n         *   async () => {\\n         *     throw new TypeError('Wrong value');\\n         *   },\\n         *   SyntaxError\\n         * );\\n         * ```\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.doesNotReject(Promise.reject(new TypeError('Wrong value')))\\n         *   .then(() => {\\n         *     // ...\\n         *   });\\n         * ```\\n         * @since v10.0.0\\n         */\\n        function doesNotReject(block: (() => Promise<unknown>) | Promise<unknown>, message?: string | Error): Promise<void>;\\n        function doesNotReject(block: (() => Promise<unknown>) | Promise<unknown>, error: AssertPredicate, message?: string | Error): Promise<void>;\\n        /**\\n         * Expects the `string` input to match the regular expression.\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.match('I will fail', /pass/);\\n         * // AssertionError [ERR_ASSERTION]: The input did not match the regular ...\\n         *\\n         * assert.match(123, /pass/);\\n         * // AssertionError [ERR_ASSERTION]: The \\\"string\\\" argument must be of type string.\\n         *\\n         * assert.match('I will pass', /pass/);\\n         * // OK\\n         * ```\\n         *\\n         * If the values do not match, or if the `string` argument is of another type than`string`, an `AssertionError` is thrown with a `message` property set equal\\n         * to the value of the `message` parameter. If the `message` parameter is\\n         * undefined, a default error message is assigned. If the `message` parameter is an\\n         * instance of an `Error` then it will be thrown instead of the `AssertionError`.\\n         * @since v13.6.0, v12.16.0\\n         */\\n        function match(value: string, regExp: RegExp, message?: string | Error): void;\\n        /**\\n         * Expects the `string` input not to match the regular expression.\\n         *\\n         * ```js\\n         * import assert from 'assert/strict';\\n         *\\n         * assert.doesNotMatch('I will fail', /fail/);\\n         * // AssertionError [ERR_ASSERTION]: The input was expected to not match the ...\\n         *\\n         * assert.doesNotMatch(123, /pass/);\\n         * // AssertionError [ERR_ASSERTION]: The \\\"string\\\" argument must be of type string.\\n         *\\n         * assert.doesNotMatch('I will pass', /different/);\\n         * // OK\\n         * ```\\n         *\\n         * If the values do match, or if the `string` argument is of another type than`string`, an `AssertionError` is thrown with a `message` property set equal\\n         * to the value of the `message` parameter. If the `message` parameter is\\n         * undefined, a default error message is assigned. If the `message` parameter is an\\n         * instance of an `Error` then it will be thrown instead of the `AssertionError`.\\n         * @since v13.6.0, v12.16.0\\n         */\\n        function doesNotMatch(value: string, regExp: RegExp, message?: string | Error): void;\\n        const strict: Omit<typeof assert, 'equal' | 'notEqual' | 'deepEqual' | 'notDeepEqual' | 'ok' | 'strictEqual' | 'deepStrictEqual' | 'ifError' | 'strict'> & {\\n            (value: unknown, message?: string | Error): asserts value;\\n            equal: typeof strictEqual;\\n            notEqual: typeof notStrictEqual;\\n            deepEqual: typeof deepStrictEqual;\\n            notDeepEqual: typeof notDeepStrictEqual;\\n            // Mapped types and assertion functions are incompatible?\\n            // TS2775: Assertions require every name in the call target\\n            // to be declared with an explicit type annotation.\\n            ok: typeof ok;\\n            strictEqual: typeof strictEqual;\\n            deepStrictEqual: typeof deepStrictEqual;\\n            ifError: typeof ifError;\\n            strict: typeof strict;\\n        };\\n    }\\n    export = assert;\\n}\\ndeclare module 'node:assert' {\\n    import assert = require('assert');\\n    export = assert;\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/async_hooks.d.ts\":\"/**\\n * The `async_hooks` module provides an API to track asynchronous resources. It\\n * can be accessed using:\\n *\\n * ```js\\n * import async_hooks from 'async_hooks';\\n * ```\\n * @experimental\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/async_hooks.js)\\n */\\ndeclare module 'async_hooks' {\\n    /**\\n     * ```js\\n     * import { executionAsyncId } from 'async_hooks';\\n     *\\n     * console.log(executionAsyncId());  // 1 - bootstrap\\n     * fs.open(path, 'r', (err, fd) => {\\n     *   console.log(executionAsyncId());  // 6 - open()\\n     * });\\n     * ```\\n     *\\n     * The ID returned from `executionAsyncId()` is related to execution timing, not\\n     * causality (which is covered by `triggerAsyncId()`):\\n     *\\n     * ```js\\n     * const server = net.createServer((conn) => {\\n     *   // Returns the ID of the server, not of the new connection, because the\\n     *   // callback runs in the execution scope of the server's MakeCallback().\\n     *   async_hooks.executionAsyncId();\\n     *\\n     * }).listen(port, () => {\\n     *   // Returns the ID of a TickObject (process.nextTick()) because all\\n     *   // callbacks passed to .listen() are wrapped in a nextTick().\\n     *   async_hooks.executionAsyncId();\\n     * });\\n     * ```\\n     *\\n     * Promise contexts may not get precise `executionAsyncIds` by default.\\n     * See the section on `promise execution tracking`.\\n     * @since v8.1.0\\n     * @return The `asyncId` of the current execution context. Useful to track when something calls.\\n     */\\n    function executionAsyncId(): number;\\n    /**\\n     * Resource objects returned by `executionAsyncResource()` are most often internal\\n     * Node.js handle objects with undocumented APIs. Using any functions or properties\\n     * on the object is likely to crash your application and should be avoided.\\n     *\\n     * Using `executionAsyncResource()` in the top-level execution context will\\n     * return an empty object as there is no handle or request object to use,\\n     * but having an object representing the top-level can be helpful.\\n     *\\n     * ```js\\n     * import { open } from 'fs';\\n     * import { executionAsyncId, executionAsyncResource } from 'async_hooks';\\n     *\\n     * console.log(executionAsyncId(), executionAsyncResource());  // 1 {}\\n     * open(new URL(import.meta.url), 'r', (err, fd) => {\\n     *   console.log(executionAsyncId(), executionAsyncResource());  // 7 FSReqWrap\\n     * });\\n     * ```\\n     *\\n     * This can be used to implement continuation local storage without the\\n     * use of a tracking `Map` to store the metadata:\\n     *\\n     * ```js\\n     * import { createServer } from 'http';\\n     * import {\\n     *   executionAsyncId,\\n     *   executionAsyncResource,\\n     *   createHook\\n     * } from 'async_hooks';\\n     * const sym = Symbol('state'); // Private symbol to avoid pollution\\n     *\\n     * createHook({\\n     *   init(asyncId, type, triggerAsyncId, resource) {\\n     *     const cr = executionAsyncResource();\\n     *     if (cr) {\\n     *       resource[sym] = cr[sym];\\n     *     }\\n     *   }\\n     * }).enable();\\n     *\\n     * const server = createServer((req, res) => {\\n     *   executionAsyncResource()[sym] = { state: req.url };\\n     *   setTimeout(function() {\\n     *     res.end(JSON.stringify(executionAsyncResource()[sym]));\\n     *   }, 100);\\n     * }).listen(3000);\\n     * ```\\n     * @since v13.9.0, v12.17.0\\n     * @return The resource representing the current execution. Useful to store data within the resource.\\n     */\\n    function executionAsyncResource(): object;\\n    /**\\n     * ```js\\n     * const server = net.createServer((conn) => {\\n     *   // The resource that caused (or triggered) this callback to be called\\n     *   // was that of the new connection. Thus the return value of triggerAsyncId()\\n     *   // is the asyncId of \\\"conn\\\".\\n     *   async_hooks.triggerAsyncId();\\n     *\\n     * }).listen(port, () => {\\n     *   // Even though all callbacks passed to .listen() are wrapped in a nextTick()\\n     *   // the callback itself exists because the call to the server's .listen()\\n     *   // was made. So the return value would be the ID of the server.\\n     *   async_hooks.triggerAsyncId();\\n     * });\\n     * ```\\n     *\\n     * Promise contexts may not get valid `triggerAsyncId`s by default. See\\n     * the section on `promise execution tracking`.\\n     * @return The ID of the resource responsible for calling the callback that is currently being executed.\\n     */\\n    function triggerAsyncId(): number;\\n    interface HookCallbacks {\\n        /**\\n         * Called when a class is constructed that has the possibility to emit an asynchronous event.\\n         * @param asyncId a unique ID for the async resource\\n         * @param type the type of the async resource\\n         * @param triggerAsyncId the unique ID of the async resource in whose execution context this async resource was created\\n         * @param resource reference to the resource representing the async operation, needs to be released during destroy\\n         */\\n        init?(asyncId: number, type: string, triggerAsyncId: number, resource: object): void;\\n        /**\\n         * When an asynchronous operation is initiated or completes a callback is called to notify the user.\\n         * The before callback is called just before said callback is executed.\\n         * @param asyncId the unique identifier assigned to the resource about to execute the callback.\\n         */\\n        before?(asyncId: number): void;\\n        /**\\n         * Called immediately after the callback specified in before is completed.\\n         * @param asyncId the unique identifier assigned to the resource which has executed the callback.\\n         */\\n        after?(asyncId: number): void;\\n        /**\\n         * Called when a promise has resolve() called. This may not be in the same execution id\\n         * as the promise itself.\\n         * @param asyncId the unique id for the promise that was resolve()d.\\n         */\\n        promiseResolve?(asyncId: number): void;\\n        /**\\n         * Called after the resource corresponding to asyncId is destroyed\\n         * @param asyncId a unique ID for the async resource\\n         */\\n        destroy?(asyncId: number): void;\\n    }\\n    interface AsyncHook {\\n        /**\\n         * Enable the callbacks for a given AsyncHook instance. If no callbacks are provided enabling is a noop.\\n         */\\n        enable(): this;\\n        /**\\n         * Disable the callbacks for a given AsyncHook instance from the global pool of AsyncHook callbacks to be executed. Once a hook has been disabled it will not be called again until enabled.\\n         */\\n        disable(): this;\\n    }\\n    /**\\n     * Registers functions to be called for different lifetime events of each async\\n     * operation.\\n     *\\n     * The callbacks `init()`/`before()`/`after()`/`destroy()` are called for the\\n     * respective asynchronous event during a resource's lifetime.\\n     *\\n     * All callbacks are optional. For example, if only resource cleanup needs to\\n     * be tracked, then only the `destroy` callback needs to be passed. The\\n     * specifics of all functions that can be passed to `callbacks` is in the `Hook Callbacks` section.\\n     *\\n     * ```js\\n     * import { createHook } from 'async_hooks';\\n     *\\n     * const asyncHook = createHook({\\n     *   init(asyncId, type, triggerAsyncId, resource) { },\\n     *   destroy(asyncId) { }\\n     * });\\n     * ```\\n     *\\n     * The callbacks will be inherited via the prototype chain:\\n     *\\n     * ```js\\n     * class MyAsyncCallbacks {\\n     *   init(asyncId, type, triggerAsyncId, resource) { }\\n     *   destroy(asyncId) {}\\n     * }\\n     *\\n     * class MyAddedCallbacks extends MyAsyncCallbacks {\\n     *   before(asyncId) { }\\n     *   after(asyncId) { }\\n     * }\\n     *\\n     * const asyncHook = async_hooks.createHook(new MyAddedCallbacks());\\n     * ```\\n     *\\n     * Because promises are asynchronous resources whose lifecycle is tracked\\n     * via the async hooks mechanism, the `init()`, `before()`, `after()`, and`destroy()` callbacks _must not_ be async functions that return promises.\\n     * @since v8.1.0\\n     * @param callbacks The `Hook Callbacks` to register\\n     * @return Instance used for disabling and enabling hooks\\n     */\\n    function createHook(callbacks: HookCallbacks): AsyncHook;\\n    interface AsyncResourceOptions {\\n        /**\\n         * The ID of the execution context that created this async event.\\n         * @default executionAsyncId()\\n         */\\n        triggerAsyncId?: number | undefined;\\n        /**\\n         * Disables automatic `emitDestroy` when the object is garbage collected.\\n         * This usually does not need to be set (even if `emitDestroy` is called\\n         * manually), unless the resource's `asyncId` is retrieved and the\\n         * sensitive API's `emitDestroy` is called with it.\\n         * @default false\\n         */\\n        requireManualDestroy?: boolean | undefined;\\n    }\\n    /**\\n     * The class `AsyncResource` is designed to be extended by the embedder's async\\n     * resources. Using this, users can easily trigger the lifetime events of their\\n     * own resources.\\n     *\\n     * The `init` hook will trigger when an `AsyncResource` is instantiated.\\n     *\\n     * The following is an overview of the `AsyncResource` API.\\n     *\\n     * ```js\\n     * import { AsyncResource, executionAsyncId } from 'async_hooks';\\n     *\\n     * // AsyncResource() is meant to be extended. Instantiating a\\n     * // new AsyncResource() also triggers init. If triggerAsyncId is omitted then\\n     * // async_hook.executionAsyncId() is used.\\n     * const asyncResource = new AsyncResource(\\n     *   type, { triggerAsyncId: executionAsyncId(), requireManualDestroy: false }\\n     * );\\n     *\\n     * // Run a function in the execution context of the resource. This will\\n     * // * establish the context of the resource\\n     * // * trigger the AsyncHooks before callbacks\\n     * // * call the provided function `fn` with the supplied arguments\\n     * // * trigger the AsyncHooks after callbacks\\n     * // * restore the original execution context\\n     * asyncResource.runInAsyncScope(fn, thisArg, ...args);\\n     *\\n     * // Call AsyncHooks destroy callbacks.\\n     * asyncResource.emitDestroy();\\n     *\\n     * // Return the unique ID assigned to the AsyncResource instance.\\n     * asyncResource.asyncId();\\n     *\\n     * // Return the trigger ID for the AsyncResource instance.\\n     * asyncResource.triggerAsyncId();\\n     * ```\\n     */\\n    class AsyncResource {\\n        /**\\n         * AsyncResource() is meant to be extended. Instantiating a\\n         * new AsyncResource() also triggers init. If triggerAsyncId is omitted then\\n         * async_hook.executionAsyncId() is used.\\n         * @param type The type of async event.\\n         * @param triggerAsyncId The ID of the execution context that created\\n         *   this async event (default: `executionAsyncId()`), or an\\n         *   AsyncResourceOptions object (since v9.3.0)\\n         */\\n        constructor(type: string, triggerAsyncId?: number | AsyncResourceOptions);\\n        /**\\n         * Binds the given function to the current execution context.\\n         *\\n         * The returned function will have an `asyncResource` property referencing\\n         * the `AsyncResource` to which the function is bound.\\n         * @since v14.8.0, v12.19.0\\n         * @param fn The function to bind to the current execution context.\\n         * @param type An optional name to associate with the underlying `AsyncResource`.\\n         */\\n        static bind<Func extends (this: ThisArg, ...args: any[]) => any, ThisArg>(\\n            fn: Func,\\n            type?: string,\\n            thisArg?: ThisArg\\n        ): Func & {\\n            asyncResource: AsyncResource;\\n        };\\n        /**\\n         * Binds the given function to execute to this `AsyncResource`'s scope.\\n         *\\n         * The returned function will have an `asyncResource` property referencing\\n         * the `AsyncResource` to which the function is bound.\\n         * @since v14.8.0, v12.19.0\\n         * @param fn The function to bind to the current `AsyncResource`.\\n         */\\n        bind<Func extends (...args: any[]) => any>(\\n            fn: Func\\n        ): Func & {\\n            asyncResource: AsyncResource;\\n        };\\n        /**\\n         * Call the provided function with the provided arguments in the execution context\\n         * of the async resource. This will establish the context, trigger the AsyncHooks\\n         * before callbacks, call the function, trigger the AsyncHooks after callbacks, and\\n         * then restore the original execution context.\\n         * @since v9.6.0\\n         * @param fn The function to call in the execution context of this async resource.\\n         * @param thisArg The receiver to be used for the function call.\\n         * @param args Optional arguments to pass to the function.\\n         */\\n        runInAsyncScope<This, Result>(fn: (this: This, ...args: any[]) => Result, thisArg?: This, ...args: any[]): Result;\\n        /**\\n         * Call all `destroy` hooks. This should only ever be called once. An error will\\n         * be thrown if it is called more than once. This **must** be manually called. If\\n         * the resource is left to be collected by the GC then the `destroy` hooks will\\n         * never be called.\\n         * @return A reference to `asyncResource`.\\n         */\\n        emitDestroy(): this;\\n        /**\\n         * @return The unique `asyncId` assigned to the resource.\\n         */\\n        asyncId(): number;\\n        /**\\n         *\\n         * @return The same `triggerAsyncId` that is passed to the `AsyncResource` constructor.\\n         */\\n        triggerAsyncId(): number;\\n    }\\n    /**\\n     * This class creates stores that stay coherent through asynchronous operations.\\n     *\\n     * While you can create your own implementation on top of the `async_hooks` module,`AsyncLocalStorage` should be preferred as it is a performant and memory safe\\n     * implementation that involves significant optimizations that are non-obvious to\\n     * implement.\\n     *\\n     * The following example uses `AsyncLocalStorage` to build a simple logger\\n     * that assigns IDs to incoming HTTP requests and includes them in messages\\n     * logged within each request.\\n     *\\n     * ```js\\n     * import http from 'http';\\n     * import { AsyncLocalStorage } from 'async_hooks';\\n     *\\n     * const asyncLocalStorage = new AsyncLocalStorage();\\n     *\\n     * function logWithId(msg) {\\n     *   const id = asyncLocalStorage.getStore();\\n     *   console.log(`${id !== undefined ? id : '-'}:`, msg);\\n     * }\\n     *\\n     * let idSeq = 0;\\n     * http.createServer((req, res) => {\\n     *   asyncLocalStorage.run(idSeq++, () => {\\n     *     logWithId('start');\\n     *     // Imagine any chain of async operations here\\n     *     setImmediate(() => {\\n     *       logWithId('finish');\\n     *       res.end();\\n     *     });\\n     *   });\\n     * }).listen(8080);\\n     *\\n     * http.get('http://localhost:8080');\\n     * http.get('http://localhost:8080');\\n     * // Prints:\\n     * //   0: start\\n     * //   1: start\\n     * //   0: finish\\n     * //   1: finish\\n     * ```\\n     *\\n     * Each instance of `AsyncLocalStorage` maintains an independent storage context.\\n     * Multiple instances can safely exist simultaneously without risk of interfering\\n     * with each other's data.\\n     * @since v13.10.0, v12.17.0\\n     */\\n    class AsyncLocalStorage<T> {\\n        /**\\n         * Binds the given function to the current execution context.\\n         * @since v18.16.0\\n         * @param fn The function to bind to the current execution context.\\n         * @returns A new function that calls `fn` within the captured execution context.\\n         */\\n        static bind<Func extends (...args: any[]) => any>(fn: Func): Func & {\\n            asyncResource: AsyncResource;\\n        };\\n        /**\\n         * Captures the current execution context and returns a function that accepts a function as an argument.\\n         * Whenever the returned function is called, it calls the function passed to it within the captured context.\\n         * @since v18.16.0\\n         */\\n        static snapshot(): (<R, TArgs extends any[]>(fn: (...args: TArgs) => R, ...args: TArgs) => R) & {\\n            asyncResource: AsyncResource;\\n        };\\n        /**\\n         * Disables the instance of `AsyncLocalStorage`. All subsequent calls\\n         * to `asyncLocalStorage.getStore()` will return `undefined` until`asyncLocalStorage.run()` or `asyncLocalStorage.enterWith()` is called again.\\n         *\\n         * When calling `asyncLocalStorage.disable()`, all current contexts linked to the\\n         * instance will be exited.\\n         *\\n         * Calling `asyncLocalStorage.disable()` is required before the`asyncLocalStorage` can be garbage collected. This does not apply to stores\\n         * provided by the `asyncLocalStorage`, as those objects are garbage collected\\n         * along with the corresponding async resources.\\n         *\\n         * Use this method when the `asyncLocalStorage` is not in use anymore\\n         * in the current process.\\n         * @since v13.10.0, v12.17.0\\n         * @experimental\\n         */\\n        disable(): void;\\n        /**\\n         * Returns the current store.\\n         * If called outside of an asynchronous context initialized by\\n         * calling `asyncLocalStorage.run()` or `asyncLocalStorage.enterWith()`, it\\n         * returns `undefined`.\\n         * @since v13.10.0, v12.17.0\\n         */\\n        getStore(): T | undefined;\\n        /**\\n         * Runs a function synchronously within a context and returns its\\n         * return value. The store is not accessible outside of the callback function.\\n         * The store is accessible to any asynchronous operations created within the\\n         * callback.\\n         *\\n         * The optional `args` are passed to the callback function.\\n         *\\n         * If the callback function throws an error, the error is thrown by `run()` too.\\n         * The stacktrace is not impacted by this call and the context is exited.\\n         *\\n         * Example:\\n         *\\n         * ```js\\n         * const store = { id: 2 };\\n         * try {\\n         *   asyncLocalStorage.run(store, () => {\\n         *     asyncLocalStorage.getStore(); // Returns the store object\\n         *     setTimeout(() => {\\n         *       asyncLocalStorage.getStore(); // Returns the store object\\n         *     }, 200);\\n         *     throw new Error();\\n         *   });\\n         * } catch (e) {\\n         *   asyncLocalStorage.getStore(); // Returns undefined\\n         *   // The error will be caught here\\n         * }\\n         * ```\\n         * @since v13.10.0, v12.17.0\\n         */\\n        run<R, TArgs extends any[]>(store: T, callback: (...args: TArgs) => R, ...args: TArgs): R;\\n        /**\\n         * Runs a function synchronously outside of a context and returns its\\n         * return value. The store is not accessible within the callback function or\\n         * the asynchronous operations created within the callback. Any `getStore()`call done within the callback function will always return `undefined`.\\n         *\\n         * The optional `args` are passed to the callback function.\\n         *\\n         * If the callback function throws an error, the error is thrown by `exit()` too.\\n         * The stacktrace is not impacted by this call and the context is re-entered.\\n         *\\n         * Example:\\n         *\\n         * ```js\\n         * // Within a call to run\\n         * try {\\n         *   asyncLocalStorage.getStore(); // Returns the store object or value\\n         *   asyncLocalStorage.exit(() => {\\n         *     asyncLocalStorage.getStore(); // Returns undefined\\n         *     throw new Error();\\n         *   });\\n         * } catch (e) {\\n         *   asyncLocalStorage.getStore(); // Returns the same object or value\\n         *   // The error will be caught here\\n         * }\\n         * ```\\n         * @since v13.10.0, v12.17.0\\n         * @experimental\\n         */\\n        exit<R, TArgs extends any[]>(callback: (...args: TArgs) => R, ...args: TArgs): R;\\n        /**\\n         * Transitions into the context for the remainder of the current\\n         * synchronous execution and then persists the store through any following\\n         * asynchronous calls.\\n         *\\n         * Example:\\n         *\\n         * ```js\\n         * const store = { id: 1 };\\n         * // Replaces previous store with the given store object\\n         * asyncLocalStorage.enterWith(store);\\n         * asyncLocalStorage.getStore(); // Returns the store object\\n         * someAsyncOperation(() => {\\n         *   asyncLocalStorage.getStore(); // Returns the same object\\n         * });\\n         * ```\\n         *\\n         * This transition will continue for the _entire_ synchronous execution.\\n         * This means that if, for example, the context is entered within an event\\n         * handler subsequent event handlers will also run within that context unless\\n         * specifically bound to another context with an `AsyncResource`. That is why`run()` should be preferred over `enterWith()` unless there are strong reasons\\n         * to use the latter method.\\n         *\\n         * ```js\\n         * const store = { id: 1 };\\n         *\\n         * emitter.on('my-event', () => {\\n         *   asyncLocalStorage.enterWith(store);\\n         * });\\n         * emitter.on('my-event', () => {\\n         *   asyncLocalStorage.getStore(); // Returns the same object\\n         * });\\n         *\\n         * asyncLocalStorage.getStore(); // Returns undefined\\n         * emitter.emit('my-event');\\n         * asyncLocalStorage.getStore(); // Returns the same object\\n         * ```\\n         * @since v13.11.0, v12.17.0\\n         * @experimental\\n         */\\n        enterWith(store: T): void;\\n    }\\n}\\ndeclare module 'node:async_hooks' {\\n    export * from 'async_hooks';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/buffer.d.ts\":\"/**\\n * `Buffer` objects are used to represent a fixed-length sequence of bytes. Many\\n * Node.js APIs support `Buffer`s.\\n *\\n * The `Buffer` class is a subclass of JavaScript's [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) class and\\n * extends it with methods that cover additional use cases. Node.js APIs accept\\n * plain [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) s wherever `Buffer`s are supported as well.\\n *\\n * While the `Buffer` class is available within the global scope, it is still\\n * recommended to explicitly reference it via an import or require statement.\\n *\\n * ```js\\n * import { Buffer } from 'buffer';\\n *\\n * // Creates a zero-filled Buffer of length 10.\\n * const buf1 = Buffer.alloc(10);\\n *\\n * // Creates a Buffer of length 10,\\n * // filled with bytes which all have the value `1`.\\n * const buf2 = Buffer.alloc(10, 1);\\n *\\n * // Creates an uninitialized buffer of length 10.\\n * // This is faster than calling Buffer.alloc() but the returned\\n * // Buffer instance might contain old data that needs to be\\n * // overwritten using fill(), write(), or other functions that fill the Buffer's\\n * // contents.\\n * const buf3 = Buffer.allocUnsafe(10);\\n *\\n * // Creates a Buffer containing the bytes [1, 2, 3].\\n * const buf4 = Buffer.from([1, 2, 3]);\\n *\\n * // Creates a Buffer containing the bytes [1, 1, 1, 1] \u2013 the entries\\n * // are all truncated using `(value &#x26; 255)` to fit into the range 0\u2013255.\\n * const buf5 = Buffer.from([257, 257.5, -255, '1']);\\n *\\n * // Creates a Buffer containing the UTF-8-encoded bytes for the string 't\xe9st':\\n * // [0x74, 0xc3, 0xa9, 0x73, 0x74] (in hexadecimal notation)\\n * // [116, 195, 169, 115, 116] (in decimal notation)\\n * const buf6 = Buffer.from('t\xe9st');\\n *\\n * // Creates a Buffer containing the Latin-1 bytes [0x74, 0xe9, 0x73, 0x74].\\n * const buf7 = Buffer.from('t\xe9st', 'latin1');\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/buffer.js)\\n */\\ndeclare module 'buffer' {\\n    import { BinaryLike } from 'node:crypto';\\n    import { ReadableStream as WebReadableStream } from 'node:stream/web';\\n    export function isUtf8(input: Buffer | ArrayBuffer | NodeJS.TypedArray): boolean;\\n    export function isAscii(input: Buffer | ArrayBuffer | NodeJS.TypedArray): boolean;\\n    export const INSPECT_MAX_BYTES: number;\\n    export const kMaxLength: number;\\n    export const kStringMaxLength: number;\\n    export const constants: {\\n        MAX_LENGTH: number;\\n        MAX_STRING_LENGTH: number;\\n    };\\n    export type TranscodeEncoding = 'ascii' | 'utf8' | 'utf16le' | 'ucs2' | 'latin1' | 'binary';\\n    /**\\n     * Re-encodes the given `Buffer` or `Uint8Array` instance from one character\\n     * encoding to another. Returns a new `Buffer` instance.\\n     *\\n     * Throws if the `fromEnc` or `toEnc` specify invalid character encodings or if\\n     * conversion from `fromEnc` to `toEnc` is not permitted.\\n     *\\n     * Encodings supported by `buffer.transcode()` are: `'ascii'`, `'utf8'`,`'utf16le'`, `'ucs2'`, `'latin1'`, and `'binary'`.\\n     *\\n     * The transcoding process will use substitution characters if a given byte\\n     * sequence cannot be adequately represented in the target encoding. For instance:\\n     *\\n     * ```js\\n     * import { Buffer, transcode } from 'buffer';\\n     *\\n     * const newBuf = transcode(Buffer.from('\u20ac'), 'utf8', 'ascii');\\n     * console.log(newBuf.toString('ascii'));\\n     * // Prints: '?'\\n     * ```\\n     *\\n     * Because the Euro (`\u20ac`) sign is not representable in US-ASCII, it is replaced\\n     * with `?` in the transcoded `Buffer`.\\n     * @since v7.1.0\\n     * @param source A `Buffer` or `Uint8Array` instance.\\n     * @param fromEnc The current encoding.\\n     * @param toEnc To target encoding.\\n     */\\n    export function transcode(source: Uint8Array, fromEnc: TranscodeEncoding, toEnc: TranscodeEncoding): Buffer;\\n    export const SlowBuffer: {\\n        /** @deprecated since v6.0.0, use `Buffer.allocUnsafeSlow()` */\\n        new (size: number): Buffer;\\n        prototype: Buffer;\\n    };\\n    /**\\n     * Resolves a `'blob:nodedata:...'` an associated `Blob` object registered using\\n     * a prior call to `URL.createObjectURL()`.\\n     * @since v16.7.0\\n     * @experimental\\n     * @param id A `'blob:nodedata:...` URL string returned by a prior call to `URL.createObjectURL()`.\\n     */\\n    export function resolveObjectURL(id: string): Blob | undefined;\\n    export { Buffer };\\n    /**\\n     * @experimental\\n     */\\n    export interface BlobOptions {\\n        /**\\n         * @default 'utf8'\\n         */\\n        encoding?: BufferEncoding | undefined;\\n        /**\\n         * The Blob content-type. The intent is for `type` to convey\\n         * the MIME media type of the data, however no validation of the type format\\n         * is performed.\\n         */\\n        type?: string | undefined;\\n    }\\n    /**\\n     * A [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) encapsulates immutable, raw data that can be safely shared across\\n     * multiple worker threads.\\n     * @since v15.7.0, v14.18.0\\n     */\\n    export class Blob {\\n        /**\\n         * The total size of the `Blob` in bytes.\\n         * @since v15.7.0, v14.18.0\\n         */\\n        readonly size: number;\\n        /**\\n         * The content-type of the `Blob`.\\n         * @since v15.7.0, v14.18.0\\n         */\\n        readonly type: string;\\n        /**\\n         * Creates a new `Blob` object containing a concatenation of the given sources.\\n         *\\n         * {ArrayBuffer}, {TypedArray}, {DataView}, and {Buffer} sources are copied into\\n         * the 'Blob' and can therefore be safely modified after the 'Blob' is created.\\n         *\\n         * String sources are also copied into the `Blob`.\\n         */\\n        constructor(sources: Array<BinaryLike | Blob>, options?: BlobOptions);\\n        /**\\n         * Returns a promise that fulfills with an [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) containing a copy of\\n         * the `Blob` data.\\n         * @since v15.7.0, v14.18.0\\n         */\\n        arrayBuffer(): Promise<ArrayBuffer>;\\n        /**\\n         * Creates and returns a new `Blob` containing a subset of this `Blob` objects\\n         * data. The original `Blob` is not altered.\\n         * @since v15.7.0, v14.18.0\\n         * @param start The starting index.\\n         * @param end The ending index.\\n         * @param type The content-type for the new `Blob`\\n         */\\n        slice(start?: number, end?: number, type?: string): Blob;\\n        /**\\n         * Returns a promise that fulfills with the contents of the `Blob` decoded as a\\n         * UTF-8 string.\\n         * @since v15.7.0, v14.18.0\\n         */\\n        text(): Promise<string>;\\n        /**\\n         * Returns a new (WHATWG) `ReadableStream` that allows the content of the `Blob` to be read.\\n         * @since v16.7.0\\n         */\\n        stream(): WebReadableStream;\\n    }\\n    export interface FileOptions {\\n        /**\\n         * One of either `'transparent'` or `'native'`. When set to `'native'`, line endings in string source parts will be\\n         * converted to the platform native line-ending as specified by `require('node:os').EOL`.\\n         */\\n        endings?: 'native' | 'transparent';\\n        /** The File content-type. */\\n        type?: string;\\n        /** The last modified date of the file. `Default`: Date.now(). */\\n        lastModified?: number;\\n    }\\n    /**\\n     * A [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File) provides information about files.\\n     * @experimental\\n     * @since v18.13.0\\n     */\\n    export class File extends Blob {\\n        constructor(sources: Array<BinaryLike | Blob>, fileName: string, options?: FileOptions);\\n        /**\\n         * The name of the `File`.\\n         * @since v18.13.0\\n         */\\n        readonly name: string;\\n        /**\\n         * The last modified date of the `File`.\\n         * @since v18.13.0\\n         */\\n        readonly lastModified: number;\\n    }\\n    export import atob = globalThis.atob;\\n    export import btoa = globalThis.btoa;\\n\\n    import { Blob as NodeBlob } from 'buffer';\\n    // This conditional type will be the existing global Blob in a browser, or\\n    // the copy below in a Node environment.\\n    type __Blob = typeof globalThis extends { onmessage: any; Blob: infer T } ? T : NodeBlob;\\n    global {\\n        // Buffer class\\n        type BufferEncoding =\\n            | 'ascii'\\n            | 'utf8'\\n            | 'utf-8'\\n            | 'utf16le'\\n            | 'ucs2'\\n            | 'ucs-2'\\n            | 'base64'\\n            | 'base64url'\\n            | 'latin1'\\n            | 'binary'\\n            | 'hex';\\n        type WithImplicitCoercion<T> =\\n            | T\\n            | {\\n                  valueOf(): T;\\n              };\\n        /**\\n         * Raw data is stored in instances of the Buffer class.\\n         * A Buffer is similar to an array of integers but corresponds to a raw memory allocation outside the V8 heap.  A Buffer cannot be resized.\\n         * Valid string encodings: 'ascii'|'utf8'|'utf16le'|'ucs2'(alias of 'utf16le')|'base64'|'base64url'|'binary'(deprecated)|'hex'\\n         */\\n        interface BufferConstructor {\\n            /**\\n             * Allocates a new buffer containing the given {str}.\\n             *\\n             * @param str String to store in buffer.\\n             * @param encoding encoding to use, optional.  Default is 'utf8'\\n             * @deprecated since v10.0.0 - Use `Buffer.from(string[, encoding])` instead.\\n             */\\n            new (str: string, encoding?: BufferEncoding): Buffer;\\n            /**\\n             * Allocates a new buffer of {size} octets.\\n             *\\n             * @param size count of octets to allocate.\\n             * @deprecated since v10.0.0 - Use `Buffer.alloc()` instead (also see `Buffer.allocUnsafe()`).\\n             */\\n            new (size: number): Buffer;\\n            /**\\n             * Allocates a new buffer containing the given {array} of octets.\\n             *\\n             * @param array The octets to store.\\n             * @deprecated since v10.0.0 - Use `Buffer.from(array)` instead.\\n             */\\n            new (array: Uint8Array): Buffer;\\n            /**\\n             * Produces a Buffer backed by the same allocated memory as\\n             * the given {ArrayBuffer}/{SharedArrayBuffer}.\\n             *\\n             *\\n             * @param arrayBuffer The ArrayBuffer with which to share memory.\\n             * @deprecated since v10.0.0 - Use `Buffer.from(arrayBuffer[, byteOffset[, length]])` instead.\\n             */\\n            new (arrayBuffer: ArrayBuffer | SharedArrayBuffer): Buffer;\\n            /**\\n             * Allocates a new buffer containing the given {array} of octets.\\n             *\\n             * @param array The octets to store.\\n             * @deprecated since v10.0.0 - Use `Buffer.from(array)` instead.\\n             */\\n            new (array: ReadonlyArray<any>): Buffer;\\n            /**\\n             * Copies the passed {buffer} data onto a new {Buffer} instance.\\n             *\\n             * @param buffer The buffer to copy.\\n             * @deprecated since v10.0.0 - Use `Buffer.from(buffer)` instead.\\n             */\\n            new (buffer: Buffer): Buffer;\\n            /**\\n             * Allocates a new `Buffer` using an `array` of bytes in the range `0` \u2013 `255`.\\n             * Array entries outside that range will be truncated to fit into it.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * // Creates a new Buffer containing the UTF-8 bytes of the string 'buffer'.\\n             * const buf = Buffer.from([0x62, 0x75, 0x66, 0x66, 0x65, 0x72]);\\n             * ```\\n             *\\n             * A `TypeError` will be thrown if `array` is not an `Array` or another type\\n             * appropriate for `Buffer.from()` variants.\\n             *\\n             * `Buffer.from(array)` and `Buffer.from(string)` may also use the internal`Buffer` pool like `Buffer.allocUnsafe()` does.\\n             * @since v5.10.0\\n             */\\n            from(\\n                arrayBuffer: WithImplicitCoercion<ArrayBuffer | SharedArrayBuffer>,\\n                byteOffset?: number,\\n                length?: number,\\n            ): Buffer;\\n            /**\\n             * Creates a new Buffer using the passed {data}\\n             * @param data data to create a new Buffer\\n             */\\n            from(data: Uint8Array | ReadonlyArray<number>): Buffer;\\n            from(data: WithImplicitCoercion<Uint8Array | ReadonlyArray<number> | string>): Buffer;\\n            /**\\n             * Creates a new Buffer containing the given JavaScript string {str}.\\n             * If provided, the {encoding} parameter identifies the character encoding.\\n             * If not provided, {encoding} defaults to 'utf8'.\\n             */\\n            from(\\n                str:\\n                    | WithImplicitCoercion<string>\\n                    | {\\n                          [Symbol.toPrimitive](hint: 'string'): string;\\n                      },\\n                encoding?: BufferEncoding,\\n            ): Buffer;\\n            /**\\n             * Creates a new Buffer using the passed {data}\\n             * @param values to create a new Buffer\\n             */\\n            of(...items: number[]): Buffer;\\n            /**\\n             * Returns `true` if `obj` is a `Buffer`, `false` otherwise.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * Buffer.isBuffer(Buffer.alloc(10)); // true\\n             * Buffer.isBuffer(Buffer.from('foo')); // true\\n             * Buffer.isBuffer('a string'); // false\\n             * Buffer.isBuffer([]); // false\\n             * Buffer.isBuffer(new Uint8Array(1024)); // false\\n             * ```\\n             * @since v0.1.101\\n             */\\n            isBuffer(obj: any): obj is Buffer;\\n            /**\\n             * Returns `true` if `encoding` is the name of a supported character encoding,\\n             * or `false` otherwise.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * console.log(Buffer.isEncoding('utf8'));\\n             * // Prints: true\\n             *\\n             * console.log(Buffer.isEncoding('hex'));\\n             * // Prints: true\\n             *\\n             * console.log(Buffer.isEncoding('utf/8'));\\n             * // Prints: false\\n             *\\n             * console.log(Buffer.isEncoding(''));\\n             * // Prints: false\\n             * ```\\n             * @since v0.9.1\\n             * @param encoding A character encoding name to check.\\n             */\\n            isEncoding(encoding: string): encoding is BufferEncoding;\\n            /**\\n             * Returns the byte length of a string when encoded using `encoding`.\\n             * This is not the same as [`String.prototype.length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length), which does not account\\n             * for the encoding that is used to convert the string into bytes.\\n             *\\n             * For `'base64'`, `'base64url'`, and `'hex'`, this function assumes valid input.\\n             * For strings that contain non-base64/hex-encoded data (e.g. whitespace), the\\n             * return value might be greater than the length of a `Buffer` created from the\\n             * string.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const str = '\\\\u00bd + \\\\u00bc = \\\\u00be';\\n             *\\n             * console.log(`${str}: ${str.length} characters, ` +\\n             *             `${Buffer.byteLength(str, 'utf8')} bytes`);\\n             * // Prints: \xbd + \xbc = \xbe: 9 characters, 12 bytes\\n             * ```\\n             *\\n             * When `string` is a\\n             * `Buffer`/[`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView)/[`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/-\\n             * Reference/Global_Objects/TypedArray)/[`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer)/[`SharedArrayBuffer`](https://develop-\\n             * er.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer), the byte length as reported by `.byteLength`is returned.\\n             * @since v0.1.90\\n             * @param string A value to calculate the length of.\\n             * @param [encoding='utf8'] If `string` is a string, this is its encoding.\\n             * @return The number of bytes contained within `string`.\\n             */\\n            byteLength(\\n                string: string | NodeJS.ArrayBufferView | ArrayBuffer | SharedArrayBuffer,\\n                encoding?: BufferEncoding,\\n            ): number;\\n            /**\\n             * Returns a new `Buffer` which is the result of concatenating all the `Buffer`instances in the `list` together.\\n             *\\n             * If the list has no items, or if the `totalLength` is 0, then a new zero-length`Buffer` is returned.\\n             *\\n             * If `totalLength` is not provided, it is calculated from the `Buffer` instances\\n             * in `list` by adding their lengths.\\n             *\\n             * If `totalLength` is provided, it is coerced to an unsigned integer. If the\\n             * combined length of the `Buffer`s in `list` exceeds `totalLength`, the result is\\n             * truncated to `totalLength`.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * // Create a single `Buffer` from a list of three `Buffer` instances.\\n             *\\n             * const buf1 = Buffer.alloc(10);\\n             * const buf2 = Buffer.alloc(14);\\n             * const buf3 = Buffer.alloc(18);\\n             * const totalLength = buf1.length + buf2.length + buf3.length;\\n             *\\n             * console.log(totalLength);\\n             * // Prints: 42\\n             *\\n             * const bufA = Buffer.concat([buf1, buf2, buf3], totalLength);\\n             *\\n             * console.log(bufA);\\n             * // Prints: <Buffer 00 00 00 00 ...>\\n             * console.log(bufA.length);\\n             * // Prints: 42\\n             * ```\\n             *\\n             * `Buffer.concat()` may also use the internal `Buffer` pool like `Buffer.allocUnsafe()` does.\\n             * @since v0.7.11\\n             * @param list List of `Buffer` or {@link Uint8Array} instances to concatenate.\\n             * @param totalLength Total length of the `Buffer` instances in `list` when concatenated.\\n             */\\n            concat(list: ReadonlyArray<Uint8Array>, totalLength?: number): Buffer;\\n            /**\\n             * Copies the underlying memory of `view` into a new `Buffer`.\\n             * @since v18.16.0\\n             * @param view The `TypedArray` to copy.\\n             * @param offset The starting offset within `view`.\\n             * @param length The number of elements from `view` to copy.\\n             */\\n            copyBytesFrom(view: NodeJS.TypedArray, offset?: number, length?: number): Buffer;\\n            /**\\n             * Compares `buf1` to `buf2`, typically for the purpose of sorting arrays of`Buffer` instances. This is equivalent to calling `buf1.compare(buf2)`.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf1 = Buffer.from('1234');\\n             * const buf2 = Buffer.from('0123');\\n             * const arr = [buf1, buf2];\\n             *\\n             * console.log(arr.sort(Buffer.compare));\\n             * // Prints: [ <Buffer 30 31 32 33>, <Buffer 31 32 33 34> ]\\n             * // (This result is equal to: [buf2, buf1].)\\n             * ```\\n             * @since v0.11.13\\n             * @return Either `-1`, `0`, or `1`, depending on the result of the comparison. See `compare` for details.\\n             */\\n            compare(buf1: Uint8Array, buf2: Uint8Array): -1 | 0 | 1;\\n            /**\\n             * Allocates a new `Buffer` of `size` bytes. If `fill` is `undefined`, the`Buffer` will be zero-filled.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.alloc(5);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 00 00 00 00 00>\\n             * ```\\n             *\\n             * If `size` is larger than {@link constants.MAX_LENGTH} or smaller than 0, `ERR_INVALID_ARG_VALUE` is thrown.\\n             *\\n             * If `fill` is specified, the allocated `Buffer` will be initialized by calling `buf.fill(fill)`.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.alloc(5, 'a');\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 61 61 61 61 61>\\n             * ```\\n             *\\n             * If both `fill` and `encoding` are specified, the allocated `Buffer` will be\\n             * initialized by calling `buf.fill(fill, encoding)`.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.alloc(11, 'aGVsbG8gd29ybGQ=', 'base64');\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64>\\n             * ```\\n             *\\n             * Calling `Buffer.alloc()` can be measurably slower than the alternative `Buffer.allocUnsafe()` but ensures that the newly created `Buffer` instance\\n             * contents will never contain sensitive data from previous allocations, including\\n             * data that might not have been allocated for `Buffer`s.\\n             *\\n             * A `TypeError` will be thrown if `size` is not a number.\\n             * @since v5.10.0\\n             * @param size The desired length of the new `Buffer`.\\n             * @param [fill=0] A value to pre-fill the new `Buffer` with.\\n             * @param [encoding='utf8'] If `fill` is a string, this is its encoding.\\n             */\\n            alloc(size: number, fill?: string | Buffer | number, encoding?: BufferEncoding): Buffer;\\n            /**\\n             * Allocates a new `Buffer` of `size` bytes. If `size` is larger than {@link constants.MAX_LENGTH} or smaller than 0, `ERR_INVALID_ARG_VALUE` is thrown.\\n             *\\n             * The underlying memory for `Buffer` instances created in this way is _not_\\n             * _initialized_. The contents of the newly created `Buffer` are unknown and _may contain sensitive data_. Use `Buffer.alloc()` instead to initialize`Buffer` instances with zeroes.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(10);\\n             *\\n             * console.log(buf);\\n             * // Prints (contents may vary): <Buffer a0 8b 28 3f 01 00 00 00 50 32>\\n             *\\n             * buf.fill(0);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 00 00 00 00 00 00 00 00 00 00>\\n             * ```\\n             *\\n             * A `TypeError` will be thrown if `size` is not a number.\\n             *\\n             * The `Buffer` module pre-allocates an internal `Buffer` instance of\\n             * size `Buffer.poolSize` that is used as a pool for the fast allocation of new`Buffer` instances created using `Buffer.allocUnsafe()`,`Buffer.from(array)`, `Buffer.concat()`, and the\\n             * deprecated`new Buffer(size)` constructor only when `size` is less than or equal\\n             * to `Buffer.poolSize >> 1` (floor of `Buffer.poolSize` divided by two).\\n             *\\n             * Use of this pre-allocated internal memory pool is a key difference between\\n             * calling `Buffer.alloc(size, fill)` vs. `Buffer.allocUnsafe(size).fill(fill)`.\\n             * Specifically, `Buffer.alloc(size, fill)` will _never_ use the internal `Buffer`pool, while `Buffer.allocUnsafe(size).fill(fill)`_will_ use the internal`Buffer` pool if `size` is less\\n             * than or equal to half `Buffer.poolSize`. The\\n             * difference is subtle but can be important when an application requires the\\n             * additional performance that `Buffer.allocUnsafe()` provides.\\n             * @since v5.10.0\\n             * @param size The desired length of the new `Buffer`.\\n             */\\n            allocUnsafe(size: number): Buffer;\\n            /**\\n             * Allocates a new `Buffer` of `size` bytes. If `size` is larger than {@link constants.MAX_LENGTH} or smaller than 0, `ERR_INVALID_ARG_VALUE` is thrown. A zero-length `Buffer` is created\\n             * if `size` is 0.\\n             *\\n             * The underlying memory for `Buffer` instances created in this way is _not_\\n             * _initialized_. The contents of the newly created `Buffer` are unknown and _may contain sensitive data_. Use `buf.fill(0)` to initialize\\n             * such `Buffer` instances with zeroes.\\n             *\\n             * When using `Buffer.allocUnsafe()` to allocate new `Buffer` instances,\\n             * allocations under 4 KB are sliced from a single pre-allocated `Buffer`. This\\n             * allows applications to avoid the garbage collection overhead of creating many\\n             * individually allocated `Buffer` instances. This approach improves both\\n             * performance and memory usage by eliminating the need to track and clean up as\\n             * many individual `ArrayBuffer` objects.\\n             *\\n             * However, in the case where a developer may need to retain a small chunk of\\n             * memory from a pool for an indeterminate amount of time, it may be appropriate\\n             * to create an un-pooled `Buffer` instance using `Buffer.allocUnsafeSlow()` and\\n             * then copying out the relevant bits.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * // Need to keep around a few small chunks of memory.\\n             * const store = [];\\n             *\\n             * socket.on('readable', () => {\\n             *   let data;\\n             *   while (null !== (data = readable.read())) {\\n             *     // Allocate for retained data.\\n             *     const sb = Buffer.allocUnsafeSlow(10);\\n             *\\n             *     // Copy the data into the new allocation.\\n             *     data.copy(sb, 0, 0, 10);\\n             *\\n             *     store.push(sb);\\n             *   }\\n             * });\\n             * ```\\n             *\\n             * A `TypeError` will be thrown if `size` is not a number.\\n             * @since v5.12.0\\n             * @param size The desired length of the new `Buffer`.\\n             */\\n            allocUnsafeSlow(size: number): Buffer;\\n            /**\\n             * This is the size (in bytes) of pre-allocated internal `Buffer` instances used\\n             * for pooling. This value may be modified.\\n             * @since v0.11.3\\n             */\\n            poolSize: number;\\n        }\\n        interface Buffer extends Uint8Array {\\n            /**\\n             * Writes `string` to `buf` at `offset` according to the character encoding in`encoding`. The `length` parameter is the number of bytes to write. If `buf` did\\n             * not contain enough space to fit the entire string, only part of `string` will be\\n             * written. However, partially encoded characters will not be written.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.alloc(256);\\n             *\\n             * const len = buf.write('\\\\u00bd + \\\\u00bc = \\\\u00be', 0);\\n             *\\n             * console.log(`${len} bytes: ${buf.toString('utf8', 0, len)}`);\\n             * // Prints: 12 bytes: \xbd + \xbc = \xbe\\n             *\\n             * const buffer = Buffer.alloc(10);\\n             *\\n             * const length = buffer.write('abcd', 8);\\n             *\\n             * console.log(`${length} bytes: ${buffer.toString('utf8', 8, 10)}`);\\n             * // Prints: 2 bytes : ab\\n             * ```\\n             * @since v0.1.90\\n             * @param string String to write to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write `string`.\\n             * @param [length=buf.length - offset] Maximum number of bytes to write (written bytes will not exceed `buf.length - offset`).\\n             * @param [encoding='utf8'] The character encoding of `string`.\\n             * @return Number of bytes written.\\n             */\\n            write(string: string, encoding?: BufferEncoding): number;\\n            write(string: string, offset: number, encoding?: BufferEncoding): number;\\n            write(string: string, offset: number, length: number, encoding?: BufferEncoding): number;\\n            /**\\n             * Decodes `buf` to a string according to the specified character encoding in`encoding`. `start` and `end` may be passed to decode only a subset of `buf`.\\n             *\\n             * If `encoding` is `'utf8'` and a byte sequence in the input is not valid UTF-8,\\n             * then each invalid byte is replaced with the replacement character `U+FFFD`.\\n             *\\n             * The maximum length of a string instance (in UTF-16 code units) is available\\n             * as {@link constants.MAX_STRING_LENGTH}.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf1 = Buffer.allocUnsafe(26);\\n             *\\n             * for (let i = 0; i < 26; i++) {\\n             *   // 97 is the decimal ASCII value for 'a'.\\n             *   buf1[i] = i + 97;\\n             * }\\n             *\\n             * console.log(buf1.toString('utf8'));\\n             * // Prints: abcdefghijklmnopqrstuvwxyz\\n             * console.log(buf1.toString('utf8', 0, 5));\\n             * // Prints: abcde\\n             *\\n             * const buf2 = Buffer.from('t\xe9st');\\n             *\\n             * console.log(buf2.toString('hex'));\\n             * // Prints: 74c3a97374\\n             * console.log(buf2.toString('utf8', 0, 3));\\n             * // Prints: t\xe9\\n             * console.log(buf2.toString(undefined, 0, 3));\\n             * // Prints: t\xe9\\n             * ```\\n             * @since v0.1.90\\n             * @param [encoding='utf8'] The character encoding to use.\\n             * @param [start=0] The byte offset to start decoding at.\\n             * @param [end=buf.length] The byte offset to stop decoding at (not inclusive).\\n             */\\n            toString(encoding?: BufferEncoding, start?: number, end?: number): string;\\n            /**\\n             * Returns a JSON representation of `buf`. [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) implicitly calls\\n             * this function when stringifying a `Buffer` instance.\\n             *\\n             * `Buffer.from()` accepts objects in the format returned from this method.\\n             * In particular, `Buffer.from(buf.toJSON())` works like `Buffer.from(buf)`.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5]);\\n             * const json = JSON.stringify(buf);\\n             *\\n             * console.log(json);\\n             * // Prints: {\\\"type\\\":\\\"Buffer\\\",\\\"data\\\":[1,2,3,4,5]}\\n             *\\n             * const copy = JSON.parse(json, (key, value) => {\\n             *   return value &#x26;&#x26; value.type === 'Buffer' ?\\n             *     Buffer.from(value) :\\n             *     value;\\n             * });\\n             *\\n             * console.log(copy);\\n             * // Prints: <Buffer 01 02 03 04 05>\\n             * ```\\n             * @since v0.9.2\\n             */\\n            toJSON(): {\\n                type: 'Buffer';\\n                data: number[];\\n            };\\n            /**\\n             * Returns `true` if both `buf` and `otherBuffer` have exactly the same bytes,`false` otherwise. Equivalent to `buf.compare(otherBuffer) === 0`.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf1 = Buffer.from('ABC');\\n             * const buf2 = Buffer.from('414243', 'hex');\\n             * const buf3 = Buffer.from('ABCD');\\n             *\\n             * console.log(buf1.equals(buf2));\\n             * // Prints: true\\n             * console.log(buf1.equals(buf3));\\n             * // Prints: false\\n             * ```\\n             * @since v0.11.13\\n             * @param otherBuffer A `Buffer` or {@link Uint8Array} with which to compare `buf`.\\n             */\\n            equals(otherBuffer: Uint8Array): boolean;\\n            /**\\n             * Compares `buf` with `target` and returns a number indicating whether `buf`comes before, after, or is the same as `target` in sort order.\\n             * Comparison is based on the actual sequence of bytes in each `Buffer`.\\n             *\\n             * * `0` is returned if `target` is the same as `buf`\\n             * * `1` is returned if `target` should come _before_`buf` when sorted.\\n             * * `-1` is returned if `target` should come _after_`buf` when sorted.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf1 = Buffer.from('ABC');\\n             * const buf2 = Buffer.from('BCD');\\n             * const buf3 = Buffer.from('ABCD');\\n             *\\n             * console.log(buf1.compare(buf1));\\n             * // Prints: 0\\n             * console.log(buf1.compare(buf2));\\n             * // Prints: -1\\n             * console.log(buf1.compare(buf3));\\n             * // Prints: -1\\n             * console.log(buf2.compare(buf1));\\n             * // Prints: 1\\n             * console.log(buf2.compare(buf3));\\n             * // Prints: 1\\n             * console.log([buf1, buf2, buf3].sort(Buffer.compare));\\n             * // Prints: [ <Buffer 41 42 43>, <Buffer 41 42 43 44>, <Buffer 42 43 44> ]\\n             * // (This result is equal to: [buf1, buf3, buf2].)\\n             * ```\\n             *\\n             * The optional `targetStart`, `targetEnd`, `sourceStart`, and `sourceEnd`arguments can be used to limit the comparison to specific ranges within `target`and `buf` respectively.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf1 = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8, 9]);\\n             * const buf2 = Buffer.from([5, 6, 7, 8, 9, 1, 2, 3, 4]);\\n             *\\n             * console.log(buf1.compare(buf2, 5, 9, 0, 4));\\n             * // Prints: 0\\n             * console.log(buf1.compare(buf2, 0, 6, 4));\\n             * // Prints: -1\\n             * console.log(buf1.compare(buf2, 5, 6, 5));\\n             * // Prints: 1\\n             * ```\\n             *\\n             * `ERR_OUT_OF_RANGE` is thrown if `targetStart < 0`, `sourceStart < 0`,`targetEnd > target.byteLength`, or `sourceEnd > source.byteLength`.\\n             * @since v0.11.13\\n             * @param target A `Buffer` or {@link Uint8Array} with which to compare `buf`.\\n             * @param [targetStart=0] The offset within `target` at which to begin comparison.\\n             * @param [targetEnd=target.length] The offset within `target` at which to end comparison (not inclusive).\\n             * @param [sourceStart=0] The offset within `buf` at which to begin comparison.\\n             * @param [sourceEnd=buf.length] The offset within `buf` at which to end comparison (not inclusive).\\n             */\\n            compare(\\n                target: Uint8Array,\\n                targetStart?: number,\\n                targetEnd?: number,\\n                sourceStart?: number,\\n                sourceEnd?: number,\\n            ): -1 | 0 | 1;\\n            /**\\n             * Copies data from a region of `buf` to a region in `target`, even if the `target`memory region overlaps with `buf`.\\n             *\\n             * [`TypedArray.prototype.set()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set) performs the same operation, and is available\\n             * for all TypedArrays, including Node.js `Buffer`s, although it takes\\n             * different function arguments.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * // Create two `Buffer` instances.\\n             * const buf1 = Buffer.allocUnsafe(26);\\n             * const buf2 = Buffer.allocUnsafe(26).fill('!');\\n             *\\n             * for (let i = 0; i < 26; i++) {\\n             *   // 97 is the decimal ASCII value for 'a'.\\n             *   buf1[i] = i + 97;\\n             * }\\n             *\\n             * // Copy `buf1` bytes 16 through 19 into `buf2` starting at byte 8 of `buf2`.\\n             * buf1.copy(buf2, 8, 16, 20);\\n             * // This is equivalent to:\\n             * // buf2.set(buf1.subarray(16, 20), 8);\\n             *\\n             * console.log(buf2.toString('ascii', 0, 25));\\n             * // Prints: !!!!!!!!qrst!!!!!!!!!!!!!\\n             * ```\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * // Create a `Buffer` and copy data from one region to an overlapping region\\n             * // within the same `Buffer`.\\n             *\\n             * const buf = Buffer.allocUnsafe(26);\\n             *\\n             * for (let i = 0; i < 26; i++) {\\n             *   // 97 is the decimal ASCII value for 'a'.\\n             *   buf[i] = i + 97;\\n             * }\\n             *\\n             * buf.copy(buf, 0, 4, 10);\\n             *\\n             * console.log(buf.toString());\\n             * // Prints: efghijghijklmnopqrstuvwxyz\\n             * ```\\n             * @since v0.1.90\\n             * @param target A `Buffer` or {@link Uint8Array} to copy into.\\n             * @param [targetStart=0] The offset within `target` at which to begin writing.\\n             * @param [sourceStart=0] The offset within `buf` from which to begin copying.\\n             * @param [sourceEnd=buf.length] The offset within `buf` at which to stop copying (not inclusive).\\n             * @return The number of bytes copied.\\n             */\\n            copy(target: Uint8Array, targetStart?: number, sourceStart?: number, sourceEnd?: number): number;\\n            /**\\n             * Returns a new `Buffer` that references the same memory as the original, but\\n             * offset and cropped by the `start` and `end` indices.\\n             *\\n             * This method is not compatible with the `Uint8Array.prototype.slice()`,\\n             * which is a superclass of `Buffer`. To copy the slice, use`Uint8Array.prototype.slice()`.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from('buffer');\\n             *\\n             * const copiedBuf = Uint8Array.prototype.slice.call(buf);\\n             * copiedBuf[0]++;\\n             * console.log(copiedBuf.toString());\\n             * // Prints: cuffer\\n             *\\n             * console.log(buf.toString());\\n             * // Prints: buffer\\n             *\\n             * // With buf.slice(), the original buffer is modified.\\n             * const notReallyCopiedBuf = buf.slice();\\n             * notReallyCopiedBuf[0]++;\\n             * console.log(notReallyCopiedBuf.toString());\\n             * // Prints: cuffer\\n             * console.log(buf.toString());\\n             * // Also prints: cuffer (!)\\n             * ```\\n             * @since v0.3.0\\n             * @deprecated Use `subarray` instead.\\n             * @param [start=0] Where the new `Buffer` will start.\\n             * @param [end=buf.length] Where the new `Buffer` will end (not inclusive).\\n             */\\n            slice(start?: number, end?: number): Buffer;\\n            /**\\n             * Returns a new `Buffer` that references the same memory as the original, but\\n             * offset and cropped by the `start` and `end` indices.\\n             *\\n             * Specifying `end` greater than `buf.length` will return the same result as\\n             * that of `end` equal to `buf.length`.\\n             *\\n             * This method is inherited from [`TypedArray.prototype.subarray()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray).\\n             *\\n             * Modifying the new `Buffer` slice will modify the memory in the original `Buffer`because the allocated memory of the two objects overlap.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * // Create a `Buffer` with the ASCII alphabet, take a slice, and modify one byte\\n             * // from the original `Buffer`.\\n             *\\n             * const buf1 = Buffer.allocUnsafe(26);\\n             *\\n             * for (let i = 0; i < 26; i++) {\\n             *   // 97 is the decimal ASCII value for 'a'.\\n             *   buf1[i] = i + 97;\\n             * }\\n             *\\n             * const buf2 = buf1.subarray(0, 3);\\n             *\\n             * console.log(buf2.toString('ascii', 0, buf2.length));\\n             * // Prints: abc\\n             *\\n             * buf1[0] = 33;\\n             *\\n             * console.log(buf2.toString('ascii', 0, buf2.length));\\n             * // Prints: !bc\\n             * ```\\n             *\\n             * Specifying negative indexes causes the slice to be generated relative to the\\n             * end of `buf` rather than the beginning.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from('buffer');\\n             *\\n             * console.log(buf.subarray(-6, -1).toString());\\n             * // Prints: buffe\\n             * // (Equivalent to buf.subarray(0, 5).)\\n             *\\n             * console.log(buf.subarray(-6, -2).toString());\\n             * // Prints: buff\\n             * // (Equivalent to buf.subarray(0, 4).)\\n             *\\n             * console.log(buf.subarray(-5, -2).toString());\\n             * // Prints: uff\\n             * // (Equivalent to buf.subarray(1, 4).)\\n             * ```\\n             * @since v3.0.0\\n             * @param [start=0] Where the new `Buffer` will start.\\n             * @param [end=buf.length] Where the new `Buffer` will end (not inclusive).\\n             */\\n            subarray(start?: number, end?: number): Buffer;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as big-endian.\\n             *\\n             * `value` is interpreted and written as a two's complement signed integer.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(8);\\n             *\\n             * buf.writeBigInt64BE(0x0102030405060708n, 0);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 01 02 03 04 05 06 07 08>\\n             * ```\\n             * @since v12.0.0, v10.20.0\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy: `0 <= offset <= buf.length - 8`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeBigInt64BE(value: bigint, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as little-endian.\\n             *\\n             * `value` is interpreted and written as a two's complement signed integer.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(8);\\n             *\\n             * buf.writeBigInt64LE(0x0102030405060708n, 0);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 08 07 06 05 04 03 02 01>\\n             * ```\\n             * @since v12.0.0, v10.20.0\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy: `0 <= offset <= buf.length - 8`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeBigInt64LE(value: bigint, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as big-endian.\\n             *\\n             * This function is also available under the `writeBigUint64BE` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(8);\\n             *\\n             * buf.writeBigUInt64BE(0xdecafafecacefaden, 0);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer de ca fa fe ca ce fa de>\\n             * ```\\n             * @since v12.0.0, v10.20.0\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy: `0 <= offset <= buf.length - 8`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeBigUInt64BE(value: bigint, offset?: number): number;\\n            /**\\n             * @alias Buffer.writeBigUInt64BE\\n             * @since v14.10.0, v12.19.0\\n             */\\n            writeBigUint64BE(value: bigint, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as little-endian\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(8);\\n             *\\n             * buf.writeBigUInt64LE(0xdecafafecacefaden, 0);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer de fa ce ca fe fa ca de>\\n             * ```\\n             *\\n             * This function is also available under the `writeBigUint64LE` alias.\\n             * @since v12.0.0, v10.20.0\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy: `0 <= offset <= buf.length - 8`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeBigUInt64LE(value: bigint, offset?: number): number;\\n            /**\\n             * @alias Buffer.writeBigUInt64LE\\n             * @since v14.10.0, v12.19.0\\n             */\\n            writeBigUint64LE(value: bigint, offset?: number): number;\\n            /**\\n             * Writes `byteLength` bytes of `value` to `buf` at the specified `offset`as little-endian. Supports up to 48 bits of accuracy. Behavior is undefined\\n             * when `value` is anything other than an unsigned integer.\\n             *\\n             * This function is also available under the `writeUintLE` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(6);\\n             *\\n             * buf.writeUIntLE(0x1234567890ab, 0, 6);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer ab 90 78 56 34 12>\\n             * ```\\n             * @since v0.5.5\\n             * @param value Number to be written to `buf`.\\n             * @param offset Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - byteLength`.\\n             * @param byteLength Number of bytes to write. Must satisfy `0 < byteLength <= 6`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeUIntLE(value: number, offset: number, byteLength: number): number;\\n            /**\\n             * @alias Buffer.writeUIntLE\\n             * @since v14.9.0, v12.19.0\\n             */\\n            writeUintLE(value: number, offset: number, byteLength: number): number;\\n            /**\\n             * Writes `byteLength` bytes of `value` to `buf` at the specified `offset`as big-endian. Supports up to 48 bits of accuracy. Behavior is undefined\\n             * when `value` is anything other than an unsigned integer.\\n             *\\n             * This function is also available under the `writeUintBE` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(6);\\n             *\\n             * buf.writeUIntBE(0x1234567890ab, 0, 6);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 12 34 56 78 90 ab>\\n             * ```\\n             * @since v0.5.5\\n             * @param value Number to be written to `buf`.\\n             * @param offset Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - byteLength`.\\n             * @param byteLength Number of bytes to write. Must satisfy `0 < byteLength <= 6`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeUIntBE(value: number, offset: number, byteLength: number): number;\\n            /**\\n             * @alias Buffer.writeUIntBE\\n             * @since v14.9.0, v12.19.0\\n             */\\n            writeUintBE(value: number, offset: number, byteLength: number): number;\\n            /**\\n             * Writes `byteLength` bytes of `value` to `buf` at the specified `offset`as little-endian. Supports up to 48 bits of accuracy. Behavior is undefined\\n             * when `value` is anything other than a signed integer.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(6);\\n             *\\n             * buf.writeIntLE(0x1234567890ab, 0, 6);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer ab 90 78 56 34 12>\\n             * ```\\n             * @since v0.11.15\\n             * @param value Number to be written to `buf`.\\n             * @param offset Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - byteLength`.\\n             * @param byteLength Number of bytes to write. Must satisfy `0 < byteLength <= 6`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeIntLE(value: number, offset: number, byteLength: number): number;\\n            /**\\n             * Writes `byteLength` bytes of `value` to `buf` at the specified `offset`as big-endian. Supports up to 48 bits of accuracy. Behavior is undefined when`value` is anything other than a\\n             * signed integer.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(6);\\n             *\\n             * buf.writeIntBE(0x1234567890ab, 0, 6);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 12 34 56 78 90 ab>\\n             * ```\\n             * @since v0.11.15\\n             * @param value Number to be written to `buf`.\\n             * @param offset Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - byteLength`.\\n             * @param byteLength Number of bytes to write. Must satisfy `0 < byteLength <= 6`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeIntBE(value: number, offset: number, byteLength: number): number;\\n            /**\\n             * Reads an unsigned, big-endian 64-bit integer from `buf` at the specified`offset`.\\n             *\\n             * This function is also available under the `readBigUint64BE` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff]);\\n             *\\n             * console.log(buf.readBigUInt64BE(0));\\n             * // Prints: 4294967295n\\n             * ```\\n             * @since v12.0.0, v10.20.0\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy: `0 <= offset <= buf.length - 8`.\\n             */\\n            readBigUInt64BE(offset?: number): bigint;\\n            /**\\n             * @alias Buffer.readBigUInt64BE\\n             * @since v14.10.0, v12.19.0\\n             */\\n            readBigUint64BE(offset?: number): bigint;\\n            /**\\n             * Reads an unsigned, little-endian 64-bit integer from `buf` at the specified`offset`.\\n             *\\n             * This function is also available under the `readBigUint64LE` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff]);\\n             *\\n             * console.log(buf.readBigUInt64LE(0));\\n             * // Prints: 18446744069414584320n\\n             * ```\\n             * @since v12.0.0, v10.20.0\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy: `0 <= offset <= buf.length - 8`.\\n             */\\n            readBigUInt64LE(offset?: number): bigint;\\n            /**\\n             * @alias Buffer.readBigUInt64LE\\n             * @since v14.10.0, v12.19.0\\n             */\\n            readBigUint64LE(offset?: number): bigint;\\n            /**\\n             * Reads a signed, big-endian 64-bit integer from `buf` at the specified `offset`.\\n             *\\n             * Integers read from a `Buffer` are interpreted as two's complement signed\\n             * values.\\n             * @since v12.0.0, v10.20.0\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy: `0 <= offset <= buf.length - 8`.\\n             */\\n            readBigInt64BE(offset?: number): bigint;\\n            /**\\n             * Reads a signed, little-endian 64-bit integer from `buf` at the specified`offset`.\\n             *\\n             * Integers read from a `Buffer` are interpreted as two's complement signed\\n             * values.\\n             * @since v12.0.0, v10.20.0\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy: `0 <= offset <= buf.length - 8`.\\n             */\\n            readBigInt64LE(offset?: number): bigint;\\n            /**\\n             * Reads `byteLength` number of bytes from `buf` at the specified `offset`and interprets the result as an unsigned, little-endian integer supporting\\n             * up to 48 bits of accuracy.\\n             *\\n             * This function is also available under the `readUintLE` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\\n             *\\n             * console.log(buf.readUIntLE(0, 6).toString(16));\\n             * // Prints: ab9078563412\\n             * ```\\n             * @since v0.11.15\\n             * @param offset Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - byteLength`.\\n             * @param byteLength Number of bytes to read. Must satisfy `0 < byteLength <= 6`.\\n             */\\n            readUIntLE(offset: number, byteLength: number): number;\\n            /**\\n             * @alias Buffer.readUIntLE\\n             * @since v14.9.0, v12.19.0\\n             */\\n            readUintLE(offset: number, byteLength: number): number;\\n            /**\\n             * Reads `byteLength` number of bytes from `buf` at the specified `offset`and interprets the result as an unsigned big-endian integer supporting\\n             * up to 48 bits of accuracy.\\n             *\\n             * This function is also available under the `readUintBE` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\\n             *\\n             * console.log(buf.readUIntBE(0, 6).toString(16));\\n             * // Prints: 1234567890ab\\n             * console.log(buf.readUIntBE(1, 6).toString(16));\\n             * // Throws ERR_OUT_OF_RANGE.\\n             * ```\\n             * @since v0.11.15\\n             * @param offset Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - byteLength`.\\n             * @param byteLength Number of bytes to read. Must satisfy `0 < byteLength <= 6`.\\n             */\\n            readUIntBE(offset: number, byteLength: number): number;\\n            /**\\n             * @alias Buffer.readUIntBE\\n             * @since v14.9.0, v12.19.0\\n             */\\n            readUintBE(offset: number, byteLength: number): number;\\n            /**\\n             * Reads `byteLength` number of bytes from `buf` at the specified `offset`and interprets the result as a little-endian, two's complement signed value\\n             * supporting up to 48 bits of accuracy.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\\n             *\\n             * console.log(buf.readIntLE(0, 6).toString(16));\\n             * // Prints: -546f87a9cbee\\n             * ```\\n             * @since v0.11.15\\n             * @param offset Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - byteLength`.\\n             * @param byteLength Number of bytes to read. Must satisfy `0 < byteLength <= 6`.\\n             */\\n            readIntLE(offset: number, byteLength: number): number;\\n            /**\\n             * Reads `byteLength` number of bytes from `buf` at the specified `offset`and interprets the result as a big-endian, two's complement signed value\\n             * supporting up to 48 bits of accuracy.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\\n             *\\n             * console.log(buf.readIntBE(0, 6).toString(16));\\n             * // Prints: 1234567890ab\\n             * console.log(buf.readIntBE(1, 6).toString(16));\\n             * // Throws ERR_OUT_OF_RANGE.\\n             * console.log(buf.readIntBE(1, 0).toString(16));\\n             * // Throws ERR_OUT_OF_RANGE.\\n             * ```\\n             * @since v0.11.15\\n             * @param offset Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - byteLength`.\\n             * @param byteLength Number of bytes to read. Must satisfy `0 < byteLength <= 6`.\\n             */\\n            readIntBE(offset: number, byteLength: number): number;\\n            /**\\n             * Reads an unsigned 8-bit integer from `buf` at the specified `offset`.\\n             *\\n             * This function is also available under the `readUint8` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([1, -2]);\\n             *\\n             * console.log(buf.readUInt8(0));\\n             * // Prints: 1\\n             * console.log(buf.readUInt8(1));\\n             * // Prints: 254\\n             * console.log(buf.readUInt8(2));\\n             * // Throws ERR_OUT_OF_RANGE.\\n             * ```\\n             * @since v0.5.0\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 1`.\\n             */\\n            readUInt8(offset?: number): number;\\n            /**\\n             * @alias Buffer.readUInt8\\n             * @since v14.9.0, v12.19.0\\n             */\\n            readUint8(offset?: number): number;\\n            /**\\n             * Reads an unsigned, little-endian 16-bit integer from `buf` at the specified`offset`.\\n             *\\n             * This function is also available under the `readUint16LE` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([0x12, 0x34, 0x56]);\\n             *\\n             * console.log(buf.readUInt16LE(0).toString(16));\\n             * // Prints: 3412\\n             * console.log(buf.readUInt16LE(1).toString(16));\\n             * // Prints: 5634\\n             * console.log(buf.readUInt16LE(2).toString(16));\\n             * // Throws ERR_OUT_OF_RANGE.\\n             * ```\\n             * @since v0.5.5\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 2`.\\n             */\\n            readUInt16LE(offset?: number): number;\\n            /**\\n             * @alias Buffer.readUInt16LE\\n             * @since v14.9.0, v12.19.0\\n             */\\n            readUint16LE(offset?: number): number;\\n            /**\\n             * Reads an unsigned, big-endian 16-bit integer from `buf` at the specified`offset`.\\n             *\\n             * This function is also available under the `readUint16BE` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([0x12, 0x34, 0x56]);\\n             *\\n             * console.log(buf.readUInt16BE(0).toString(16));\\n             * // Prints: 1234\\n             * console.log(buf.readUInt16BE(1).toString(16));\\n             * // Prints: 3456\\n             * ```\\n             * @since v0.5.5\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 2`.\\n             */\\n            readUInt16BE(offset?: number): number;\\n            /**\\n             * @alias Buffer.readUInt16BE\\n             * @since v14.9.0, v12.19.0\\n             */\\n            readUint16BE(offset?: number): number;\\n            /**\\n             * Reads an unsigned, little-endian 32-bit integer from `buf` at the specified`offset`.\\n             *\\n             * This function is also available under the `readUint32LE` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([0x12, 0x34, 0x56, 0x78]);\\n             *\\n             * console.log(buf.readUInt32LE(0).toString(16));\\n             * // Prints: 78563412\\n             * console.log(buf.readUInt32LE(1).toString(16));\\n             * // Throws ERR_OUT_OF_RANGE.\\n             * ```\\n             * @since v0.5.5\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`.\\n             */\\n            readUInt32LE(offset?: number): number;\\n            /**\\n             * @alias Buffer.readUInt32LE\\n             * @since v14.9.0, v12.19.0\\n             */\\n            readUint32LE(offset?: number): number;\\n            /**\\n             * Reads an unsigned, big-endian 32-bit integer from `buf` at the specified`offset`.\\n             *\\n             * This function is also available under the `readUint32BE` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([0x12, 0x34, 0x56, 0x78]);\\n             *\\n             * console.log(buf.readUInt32BE(0).toString(16));\\n             * // Prints: 12345678\\n             * ```\\n             * @since v0.5.5\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`.\\n             */\\n            readUInt32BE(offset?: number): number;\\n            /**\\n             * @alias Buffer.readUInt32BE\\n             * @since v14.9.0, v12.19.0\\n             */\\n            readUint32BE(offset?: number): number;\\n            /**\\n             * Reads a signed 8-bit integer from `buf` at the specified `offset`.\\n             *\\n             * Integers read from a `Buffer` are interpreted as two's complement signed values.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([-1, 5]);\\n             *\\n             * console.log(buf.readInt8(0));\\n             * // Prints: -1\\n             * console.log(buf.readInt8(1));\\n             * // Prints: 5\\n             * console.log(buf.readInt8(2));\\n             * // Throws ERR_OUT_OF_RANGE.\\n             * ```\\n             * @since v0.5.0\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 1`.\\n             */\\n            readInt8(offset?: number): number;\\n            /**\\n             * Reads a signed, little-endian 16-bit integer from `buf` at the specified`offset`.\\n             *\\n             * Integers read from a `Buffer` are interpreted as two's complement signed values.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([0, 5]);\\n             *\\n             * console.log(buf.readInt16LE(0));\\n             * // Prints: 1280\\n             * console.log(buf.readInt16LE(1));\\n             * // Throws ERR_OUT_OF_RANGE.\\n             * ```\\n             * @since v0.5.5\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 2`.\\n             */\\n            readInt16LE(offset?: number): number;\\n            /**\\n             * Reads a signed, big-endian 16-bit integer from `buf` at the specified `offset`.\\n             *\\n             * Integers read from a `Buffer` are interpreted as two's complement signed values.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([0, 5]);\\n             *\\n             * console.log(buf.readInt16BE(0));\\n             * // Prints: 5\\n             * ```\\n             * @since v0.5.5\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 2`.\\n             */\\n            readInt16BE(offset?: number): number;\\n            /**\\n             * Reads a signed, little-endian 32-bit integer from `buf` at the specified`offset`.\\n             *\\n             * Integers read from a `Buffer` are interpreted as two's complement signed values.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([0, 0, 0, 5]);\\n             *\\n             * console.log(buf.readInt32LE(0));\\n             * // Prints: 83886080\\n             * console.log(buf.readInt32LE(1));\\n             * // Throws ERR_OUT_OF_RANGE.\\n             * ```\\n             * @since v0.5.5\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`.\\n             */\\n            readInt32LE(offset?: number): number;\\n            /**\\n             * Reads a signed, big-endian 32-bit integer from `buf` at the specified `offset`.\\n             *\\n             * Integers read from a `Buffer` are interpreted as two's complement signed values.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([0, 0, 0, 5]);\\n             *\\n             * console.log(buf.readInt32BE(0));\\n             * // Prints: 5\\n             * ```\\n             * @since v0.5.5\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`.\\n             */\\n            readInt32BE(offset?: number): number;\\n            /**\\n             * Reads a 32-bit, little-endian float from `buf` at the specified `offset`.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([1, 2, 3, 4]);\\n             *\\n             * console.log(buf.readFloatLE(0));\\n             * // Prints: 1.539989614439558e-36\\n             * console.log(buf.readFloatLE(1));\\n             * // Throws ERR_OUT_OF_RANGE.\\n             * ```\\n             * @since v0.11.15\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`.\\n             */\\n            readFloatLE(offset?: number): number;\\n            /**\\n             * Reads a 32-bit, big-endian float from `buf` at the specified `offset`.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([1, 2, 3, 4]);\\n             *\\n             * console.log(buf.readFloatBE(0));\\n             * // Prints: 2.387939260590663e-38\\n             * ```\\n             * @since v0.11.15\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`.\\n             */\\n            readFloatBE(offset?: number): number;\\n            /**\\n             * Reads a 64-bit, little-endian double from `buf` at the specified `offset`.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8]);\\n             *\\n             * console.log(buf.readDoubleLE(0));\\n             * // Prints: 5.447603722011605e-270\\n             * console.log(buf.readDoubleLE(1));\\n             * // Throws ERR_OUT_OF_RANGE.\\n             * ```\\n             * @since v0.11.15\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 8`.\\n             */\\n            readDoubleLE(offset?: number): number;\\n            /**\\n             * Reads a 64-bit, big-endian double from `buf` at the specified `offset`.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8]);\\n             *\\n             * console.log(buf.readDoubleBE(0));\\n             * // Prints: 8.20788039913184e-304\\n             * ```\\n             * @since v0.11.15\\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 8`.\\n             */\\n            readDoubleBE(offset?: number): number;\\n            reverse(): this;\\n            /**\\n             * Interprets `buf` as an array of unsigned 16-bit integers and swaps the\\n             * byte order _in-place_. Throws `ERR_INVALID_BUFFER_SIZE` if `buf.length` is not a multiple of 2.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\\n             *\\n             * console.log(buf1);\\n             * // Prints: <Buffer 01 02 03 04 05 06 07 08>\\n             *\\n             * buf1.swap16();\\n             *\\n             * console.log(buf1);\\n             * // Prints: <Buffer 02 01 04 03 06 05 08 07>\\n             *\\n             * const buf2 = Buffer.from([0x1, 0x2, 0x3]);\\n             *\\n             * buf2.swap16();\\n             * // Throws ERR_INVALID_BUFFER_SIZE.\\n             * ```\\n             *\\n             * One convenient use of `buf.swap16()` is to perform a fast in-place conversion\\n             * between UTF-16 little-endian and UTF-16 big-endian:\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from('This is little-endian UTF-16', 'utf16le');\\n             * buf.swap16(); // Convert to big-endian UTF-16 text.\\n             * ```\\n             * @since v5.10.0\\n             * @return A reference to `buf`.\\n             */\\n            swap16(): Buffer;\\n            /**\\n             * Interprets `buf` as an array of unsigned 32-bit integers and swaps the\\n             * byte order _in-place_. Throws `ERR_INVALID_BUFFER_SIZE` if `buf.length` is not a multiple of 4.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\\n             *\\n             * console.log(buf1);\\n             * // Prints: <Buffer 01 02 03 04 05 06 07 08>\\n             *\\n             * buf1.swap32();\\n             *\\n             * console.log(buf1);\\n             * // Prints: <Buffer 04 03 02 01 08 07 06 05>\\n             *\\n             * const buf2 = Buffer.from([0x1, 0x2, 0x3]);\\n             *\\n             * buf2.swap32();\\n             * // Throws ERR_INVALID_BUFFER_SIZE.\\n             * ```\\n             * @since v5.10.0\\n             * @return A reference to `buf`.\\n             */\\n            swap32(): Buffer;\\n            /**\\n             * Interprets `buf` as an array of 64-bit numbers and swaps byte order _in-place_.\\n             * Throws `ERR_INVALID_BUFFER_SIZE` if `buf.length` is not a multiple of 8.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\\n             *\\n             * console.log(buf1);\\n             * // Prints: <Buffer 01 02 03 04 05 06 07 08>\\n             *\\n             * buf1.swap64();\\n             *\\n             * console.log(buf1);\\n             * // Prints: <Buffer 08 07 06 05 04 03 02 01>\\n             *\\n             * const buf2 = Buffer.from([0x1, 0x2, 0x3]);\\n             *\\n             * buf2.swap64();\\n             * // Throws ERR_INVALID_BUFFER_SIZE.\\n             * ```\\n             * @since v6.3.0\\n             * @return A reference to `buf`.\\n             */\\n            swap64(): Buffer;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset`. `value` must be a\\n             * valid unsigned 8-bit integer. Behavior is undefined when `value` is anything\\n             * other than an unsigned 8-bit integer.\\n             *\\n             * This function is also available under the `writeUint8` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(4);\\n             *\\n             * buf.writeUInt8(0x3, 0);\\n             * buf.writeUInt8(0x4, 1);\\n             * buf.writeUInt8(0x23, 2);\\n             * buf.writeUInt8(0x42, 3);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 03 04 23 42>\\n             * ```\\n             * @since v0.5.0\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 1`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeUInt8(value: number, offset?: number): number;\\n            /**\\n             * @alias Buffer.writeUInt8\\n             * @since v14.9.0, v12.19.0\\n             */\\n            writeUint8(value: number, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as little-endian. The `value`must be a valid unsigned 16-bit integer. Behavior is undefined when `value` is\\n             * anything other than an unsigned 16-bit integer.\\n             *\\n             * This function is also available under the `writeUint16LE` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(4);\\n             *\\n             * buf.writeUInt16LE(0xdead, 0);\\n             * buf.writeUInt16LE(0xbeef, 2);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer ad de ef be>\\n             * ```\\n             * @since v0.5.5\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 2`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeUInt16LE(value: number, offset?: number): number;\\n            /**\\n             * @alias Buffer.writeUInt16LE\\n             * @since v14.9.0, v12.19.0\\n             */\\n            writeUint16LE(value: number, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as big-endian. The `value`must be a valid unsigned 16-bit integer. Behavior is undefined when `value`is anything other than an\\n             * unsigned 16-bit integer.\\n             *\\n             * This function is also available under the `writeUint16BE` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(4);\\n             *\\n             * buf.writeUInt16BE(0xdead, 0);\\n             * buf.writeUInt16BE(0xbeef, 2);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer de ad be ef>\\n             * ```\\n             * @since v0.5.5\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 2`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeUInt16BE(value: number, offset?: number): number;\\n            /**\\n             * @alias Buffer.writeUInt16BE\\n             * @since v14.9.0, v12.19.0\\n             */\\n            writeUint16BE(value: number, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as little-endian. The `value`must be a valid unsigned 32-bit integer. Behavior is undefined when `value` is\\n             * anything other than an unsigned 32-bit integer.\\n             *\\n             * This function is also available under the `writeUint32LE` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(4);\\n             *\\n             * buf.writeUInt32LE(0xfeedface, 0);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer ce fa ed fe>\\n             * ```\\n             * @since v0.5.5\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeUInt32LE(value: number, offset?: number): number;\\n            /**\\n             * @alias Buffer.writeUInt32LE\\n             * @since v14.9.0, v12.19.0\\n             */\\n            writeUint32LE(value: number, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as big-endian. The `value`must be a valid unsigned 32-bit integer. Behavior is undefined when `value`is anything other than an\\n             * unsigned 32-bit integer.\\n             *\\n             * This function is also available under the `writeUint32BE` alias.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(4);\\n             *\\n             * buf.writeUInt32BE(0xfeedface, 0);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer fe ed fa ce>\\n             * ```\\n             * @since v0.5.5\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeUInt32BE(value: number, offset?: number): number;\\n            /**\\n             * @alias Buffer.writeUInt32BE\\n             * @since v14.9.0, v12.19.0\\n             */\\n            writeUint32BE(value: number, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset`. `value` must be a valid\\n             * signed 8-bit integer. Behavior is undefined when `value` is anything other than\\n             * a signed 8-bit integer.\\n             *\\n             * `value` is interpreted and written as a two's complement signed integer.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(2);\\n             *\\n             * buf.writeInt8(2, 0);\\n             * buf.writeInt8(-2, 1);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 02 fe>\\n             * ```\\n             * @since v0.5.0\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 1`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeInt8(value: number, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as little-endian.  The `value`must be a valid signed 16-bit integer. Behavior is undefined when `value` is\\n             * anything other than a signed 16-bit integer.\\n             *\\n             * The `value` is interpreted and written as a two's complement signed integer.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(2);\\n             *\\n             * buf.writeInt16LE(0x0304, 0);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 04 03>\\n             * ```\\n             * @since v0.5.5\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 2`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeInt16LE(value: number, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as big-endian.  The `value`must be a valid signed 16-bit integer. Behavior is undefined when `value` is\\n             * anything other than a signed 16-bit integer.\\n             *\\n             * The `value` is interpreted and written as a two's complement signed integer.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(2);\\n             *\\n             * buf.writeInt16BE(0x0102, 0);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 01 02>\\n             * ```\\n             * @since v0.5.5\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 2`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeInt16BE(value: number, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as little-endian. The `value`must be a valid signed 32-bit integer. Behavior is undefined when `value` is\\n             * anything other than a signed 32-bit integer.\\n             *\\n             * The `value` is interpreted and written as a two's complement signed integer.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(4);\\n             *\\n             * buf.writeInt32LE(0x05060708, 0);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 08 07 06 05>\\n             * ```\\n             * @since v0.5.5\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeInt32LE(value: number, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as big-endian. The `value`must be a valid signed 32-bit integer. Behavior is undefined when `value` is\\n             * anything other than a signed 32-bit integer.\\n             *\\n             * The `value` is interpreted and written as a two's complement signed integer.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(4);\\n             *\\n             * buf.writeInt32BE(0x01020304, 0);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 01 02 03 04>\\n             * ```\\n             * @since v0.5.5\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeInt32BE(value: number, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as little-endian. Behavior is\\n             * undefined when `value` is anything other than a JavaScript number.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(4);\\n             *\\n             * buf.writeFloatLE(0xcafebabe, 0);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer bb fe 4a 4f>\\n             * ```\\n             * @since v0.11.15\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeFloatLE(value: number, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as big-endian. Behavior is\\n             * undefined when `value` is anything other than a JavaScript number.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(4);\\n             *\\n             * buf.writeFloatBE(0xcafebabe, 0);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 4f 4a fe bb>\\n             * ```\\n             * @since v0.11.15\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeFloatBE(value: number, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as little-endian. The `value`must be a JavaScript number. Behavior is undefined when `value` is anything\\n             * other than a JavaScript number.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(8);\\n             *\\n             * buf.writeDoubleLE(123.456, 0);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 77 be 9f 1a 2f dd 5e 40>\\n             * ```\\n             * @since v0.11.15\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 8`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeDoubleLE(value: number, offset?: number): number;\\n            /**\\n             * Writes `value` to `buf` at the specified `offset` as big-endian. The `value`must be a JavaScript number. Behavior is undefined when `value` is anything\\n             * other than a JavaScript number.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(8);\\n             *\\n             * buf.writeDoubleBE(123.456, 0);\\n             *\\n             * console.log(buf);\\n             * // Prints: <Buffer 40 5e dd 2f 1a 9f be 77>\\n             * ```\\n             * @since v0.11.15\\n             * @param value Number to be written to `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 8`.\\n             * @return `offset` plus the number of bytes written.\\n             */\\n            writeDoubleBE(value: number, offset?: number): number;\\n            /**\\n             * Fills `buf` with the specified `value`. If the `offset` and `end` are not given,\\n             * the entire `buf` will be filled:\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * // Fill a `Buffer` with the ASCII character 'h'.\\n             *\\n             * const b = Buffer.allocUnsafe(50).fill('h');\\n             *\\n             * console.log(b.toString());\\n             * // Prints: hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh\\n             * ```\\n             *\\n             * `value` is coerced to a `uint32` value if it is not a string, `Buffer`, or\\n             * integer. If the resulting integer is greater than `255` (decimal), `buf` will be\\n             * filled with `value &#x26; 255`.\\n             *\\n             * If the final write of a `fill()` operation falls on a multi-byte character,\\n             * then only the bytes of that character that fit into `buf` are written:\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * // Fill a `Buffer` with character that takes up two bytes in UTF-8.\\n             *\\n             * console.log(Buffer.allocUnsafe(5).fill('\\\\u0222'));\\n             * // Prints: <Buffer c8 a2 c8 a2 c8>\\n             * ```\\n             *\\n             * If `value` contains invalid characters, it is truncated; if no valid\\n             * fill data remains, an exception is thrown:\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.allocUnsafe(5);\\n             *\\n             * console.log(buf.fill('a'));\\n             * // Prints: <Buffer 61 61 61 61 61>\\n             * console.log(buf.fill('aazz', 'hex'));\\n             * // Prints: <Buffer aa aa aa aa aa>\\n             * console.log(buf.fill('zz', 'hex'));\\n             * // Throws an exception.\\n             * ```\\n             * @since v0.5.0\\n             * @param value The value with which to fill `buf`.\\n             * @param [offset=0] Number of bytes to skip before starting to fill `buf`.\\n             * @param [end=buf.length] Where to stop filling `buf` (not inclusive).\\n             * @param [encoding='utf8'] The encoding for `value` if `value` is a string.\\n             * @return A reference to `buf`.\\n             */\\n            fill(value: string | Uint8Array | number, offset?: number, end?: number, encoding?: BufferEncoding): this;\\n            /**\\n             * If `value` is:\\n             *\\n             * * a string, `value` is interpreted according to the character encoding in`encoding`.\\n             * * a `Buffer` or [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array), `value` will be used in its entirety.\\n             * To compare a partial `Buffer`, use `buf.subarray`.\\n             * * a number, `value` will be interpreted as an unsigned 8-bit integer\\n             * value between `0` and `255`.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from('this is a buffer');\\n             *\\n             * console.log(buf.indexOf('this'));\\n             * // Prints: 0\\n             * console.log(buf.indexOf('is'));\\n             * // Prints: 2\\n             * console.log(buf.indexOf(Buffer.from('a buffer')));\\n             * // Prints: 8\\n             * console.log(buf.indexOf(97));\\n             * // Prints: 8 (97 is the decimal ASCII value for 'a')\\n             * console.log(buf.indexOf(Buffer.from('a buffer example')));\\n             * // Prints: -1\\n             * console.log(buf.indexOf(Buffer.from('a buffer example').slice(0, 8)));\\n             * // Prints: 8\\n             *\\n             * const utf16Buffer = Buffer.from('\\\\u039a\\\\u0391\\\\u03a3\\\\u03a3\\\\u0395', 'utf16le');\\n             *\\n             * console.log(utf16Buffer.indexOf('\\\\u03a3', 0, 'utf16le'));\\n             * // Prints: 4\\n             * console.log(utf16Buffer.indexOf('\\\\u03a3', -4, 'utf16le'));\\n             * // Prints: 6\\n             * ```\\n             *\\n             * If `value` is not a string, number, or `Buffer`, this method will throw a`TypeError`. If `value` is a number, it will be coerced to a valid byte value,\\n             * an integer between 0 and 255.\\n             *\\n             * If `byteOffset` is not a number, it will be coerced to a number. If the result\\n             * of coercion is `NaN` or `0`, then the entire buffer will be searched. This\\n             * behavior matches [`String.prototype.indexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf).\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const b = Buffer.from('abcdef');\\n             *\\n             * // Passing a value that's a number, but not a valid byte.\\n             * // Prints: 2, equivalent to searching for 99 or 'c'.\\n             * console.log(b.indexOf(99.9));\\n             * console.log(b.indexOf(256 + 99));\\n             *\\n             * // Passing a byteOffset that coerces to NaN or 0.\\n             * // Prints: 1, searching the whole buffer.\\n             * console.log(b.indexOf('b', undefined));\\n             * console.log(b.indexOf('b', {}));\\n             * console.log(b.indexOf('b', null));\\n             * console.log(b.indexOf('b', []));\\n             * ```\\n             *\\n             * If `value` is an empty string or empty `Buffer` and `byteOffset` is less\\n             * than `buf.length`, `byteOffset` will be returned. If `value` is empty and`byteOffset` is at least `buf.length`, `buf.length` will be returned.\\n             * @since v1.5.0\\n             * @param value What to search for.\\n             * @param [byteOffset=0] Where to begin searching in `buf`. If negative, then offset is calculated from the end of `buf`.\\n             * @param [encoding='utf8'] If `value` is a string, this is the encoding used to determine the binary representation of the string that will be searched for in `buf`.\\n             * @return The index of the first occurrence of `value` in `buf`, or `-1` if `buf` does not contain `value`.\\n             */\\n            indexOf(value: string | number | Uint8Array, byteOffset?: number, encoding?: BufferEncoding): number;\\n            /**\\n             * Identical to `buf.indexOf()`, except the last occurrence of `value` is found\\n             * rather than the first occurrence.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from('this buffer is a buffer');\\n             *\\n             * console.log(buf.lastIndexOf('this'));\\n             * // Prints: 0\\n             * console.log(buf.lastIndexOf('buffer'));\\n             * // Prints: 17\\n             * console.log(buf.lastIndexOf(Buffer.from('buffer')));\\n             * // Prints: 17\\n             * console.log(buf.lastIndexOf(97));\\n             * // Prints: 15 (97 is the decimal ASCII value for 'a')\\n             * console.log(buf.lastIndexOf(Buffer.from('yolo')));\\n             * // Prints: -1\\n             * console.log(buf.lastIndexOf('buffer', 5));\\n             * // Prints: 5\\n             * console.log(buf.lastIndexOf('buffer', 4));\\n             * // Prints: -1\\n             *\\n             * const utf16Buffer = Buffer.from('\\\\u039a\\\\u0391\\\\u03a3\\\\u03a3\\\\u0395', 'utf16le');\\n             *\\n             * console.log(utf16Buffer.lastIndexOf('\\\\u03a3', undefined, 'utf16le'));\\n             * // Prints: 6\\n             * console.log(utf16Buffer.lastIndexOf('\\\\u03a3', -5, 'utf16le'));\\n             * // Prints: 4\\n             * ```\\n             *\\n             * If `value` is not a string, number, or `Buffer`, this method will throw a`TypeError`. If `value` is a number, it will be coerced to a valid byte value,\\n             * an integer between 0 and 255.\\n             *\\n             * If `byteOffset` is not a number, it will be coerced to a number. Any arguments\\n             * that coerce to `NaN`, like `{}` or `undefined`, will search the whole buffer.\\n             * This behavior matches [`String.prototype.lastIndexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf).\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const b = Buffer.from('abcdef');\\n             *\\n             * // Passing a value that's a number, but not a valid byte.\\n             * // Prints: 2, equivalent to searching for 99 or 'c'.\\n             * console.log(b.lastIndexOf(99.9));\\n             * console.log(b.lastIndexOf(256 + 99));\\n             *\\n             * // Passing a byteOffset that coerces to NaN.\\n             * // Prints: 1, searching the whole buffer.\\n             * console.log(b.lastIndexOf('b', undefined));\\n             * console.log(b.lastIndexOf('b', {}));\\n             *\\n             * // Passing a byteOffset that coerces to 0.\\n             * // Prints: -1, equivalent to passing 0.\\n             * console.log(b.lastIndexOf('b', null));\\n             * console.log(b.lastIndexOf('b', []));\\n             * ```\\n             *\\n             * If `value` is an empty string or empty `Buffer`, `byteOffset` will be returned.\\n             * @since v6.0.0\\n             * @param value What to search for.\\n             * @param [byteOffset=buf.length - 1] Where to begin searching in `buf`. If negative, then offset is calculated from the end of `buf`.\\n             * @param [encoding='utf8'] If `value` is a string, this is the encoding used to determine the binary representation of the string that will be searched for in `buf`.\\n             * @return The index of the last occurrence of `value` in `buf`, or `-1` if `buf` does not contain `value`.\\n             */\\n            lastIndexOf(value: string | number | Uint8Array, byteOffset?: number, encoding?: BufferEncoding): number;\\n            /**\\n             * Creates and returns an [iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) of `[index, byte]` pairs from the contents\\n             * of `buf`.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * // Log the entire contents of a `Buffer`.\\n             *\\n             * const buf = Buffer.from('buffer');\\n             *\\n             * for (const pair of buf.entries()) {\\n             *   console.log(pair);\\n             * }\\n             * // Prints:\\n             * //   [0, 98]\\n             * //   [1, 117]\\n             * //   [2, 102]\\n             * //   [3, 102]\\n             * //   [4, 101]\\n             * //   [5, 114]\\n             * ```\\n             * @since v1.1.0\\n             */\\n            entries(): IterableIterator<[number, number]>;\\n            /**\\n             * Equivalent to `buf.indexOf() !== -1`.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from('this is a buffer');\\n             *\\n             * console.log(buf.includes('this'));\\n             * // Prints: true\\n             * console.log(buf.includes('is'));\\n             * // Prints: true\\n             * console.log(buf.includes(Buffer.from('a buffer')));\\n             * // Prints: true\\n             * console.log(buf.includes(97));\\n             * // Prints: true (97 is the decimal ASCII value for 'a')\\n             * console.log(buf.includes(Buffer.from('a buffer example')));\\n             * // Prints: false\\n             * console.log(buf.includes(Buffer.from('a buffer example').slice(0, 8)));\\n             * // Prints: true\\n             * console.log(buf.includes('this', 4));\\n             * // Prints: false\\n             * ```\\n             * @since v5.3.0\\n             * @param value What to search for.\\n             * @param [byteOffset=0] Where to begin searching in `buf`. If negative, then offset is calculated from the end of `buf`.\\n             * @param [encoding='utf8'] If `value` is a string, this is its encoding.\\n             * @return `true` if `value` was found in `buf`, `false` otherwise.\\n             */\\n            includes(value: string | number | Buffer, byteOffset?: number, encoding?: BufferEncoding): boolean;\\n            /**\\n             * Creates and returns an [iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) of `buf` keys (indices).\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from('buffer');\\n             *\\n             * for (const key of buf.keys()) {\\n             *   console.log(key);\\n             * }\\n             * // Prints:\\n             * //   0\\n             * //   1\\n             * //   2\\n             * //   3\\n             * //   4\\n             * //   5\\n             * ```\\n             * @since v1.1.0\\n             */\\n            keys(): IterableIterator<number>;\\n            /**\\n             * Creates and returns an [iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) for `buf` values (bytes). This function is\\n             * called automatically when a `Buffer` is used in a `for..of` statement.\\n             *\\n             * ```js\\n             * import { Buffer } from 'buffer';\\n             *\\n             * const buf = Buffer.from('buffer');\\n             *\\n             * for (const value of buf.values()) {\\n             *   console.log(value);\\n             * }\\n             * // Prints:\\n             * //   98\\n             * //   117\\n             * //   102\\n             * //   102\\n             * //   101\\n             * //   114\\n             *\\n             * for (const value of buf) {\\n             *   console.log(value);\\n             * }\\n             * // Prints:\\n             * //   98\\n             * //   117\\n             * //   102\\n             * //   102\\n             * //   101\\n             * //   114\\n             * ```\\n             * @since v1.1.0\\n             */\\n            values(): IterableIterator<number>;\\n        }\\n        var Buffer: BufferConstructor;\\n        /**\\n         * Decodes a string of Base64-encoded data into bytes, and encodes those bytes\\n         * into a string using Latin-1 (ISO-8859-1).\\n         *\\n         * The `data` may be any JavaScript-value that can be coerced into a string.\\n         *\\n         * **This function is only provided for compatibility with legacy web platform APIs**\\n         * **and should never be used in new code, because they use strings to represent**\\n         * **binary data and predate the introduction of typed arrays in JavaScript.**\\n         * **For code running using Node.js APIs, converting between base64-encoded strings**\\n         * **and binary data should be performed using `Buffer.from(str, 'base64')` and`buf.toString('base64')`.**\\n         * @since v15.13.0, v14.17.0\\n         * @deprecated Use `Buffer.from(data, 'base64')` instead.\\n         * @param data The Base64-encoded input string.\\n         */\\n        function atob(data: string): string;\\n        /**\\n         * Decodes a string into bytes using Latin-1 (ISO-8859), and encodes those bytes\\n         * into a string using Base64.\\n         *\\n         * The `data` may be any JavaScript-value that can be coerced into a string.\\n         *\\n         * **This function is only provided for compatibility with legacy web platform APIs**\\n         * **and should never be used in new code, because they use strings to represent**\\n         * **binary data and predate the introduction of typed arrays in JavaScript.**\\n         * **For code running using Node.js APIs, converting between base64-encoded strings**\\n         * **and binary data should be performed using `Buffer.from(str, 'base64')` and`buf.toString('base64')`.**\\n         * @since v15.13.0, v14.17.0\\n         * @deprecated Use `buf.toString('base64')` instead.\\n         * @param data An ASCII (Latin1) string.\\n         */\\n        function btoa(data: string): string;\\n\\n        interface Blob extends __Blob {}\\n        /**\\n         * `Blob` class is a global reference for `require('node:buffer').Blob`\\n         * https://nodejs.org/api/buffer.html#class-blob\\n         * @since v18.0.0\\n         */\\n        var Blob: typeof globalThis extends {\\n            onmessage: any;\\n            Blob: infer T;\\n        }\\n            ? T\\n            : typeof NodeBlob;\\n    }\\n}\\ndeclare module 'node:buffer' {\\n    export * from 'buffer';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/child_process.d.ts\":\"/**\\n * The `child_process` module provides the ability to spawn subprocesses in\\n * a manner that is similar, but not identical, to [`popen(3)`](http://man7.org/linux/man-pages/man3/popen.3.html). This capability\\n * is primarily provided by the {@link spawn} function:\\n *\\n * ```js\\n * const { spawn } = require('child_process');\\n * const ls = spawn('ls', ['-lh', '/usr']);\\n *\\n * ls.stdout.on('data', (data) => {\\n *   console.log(`stdout: ${data}`);\\n * });\\n *\\n * ls.stderr.on('data', (data) => {\\n *   console.error(`stderr: ${data}`);\\n * });\\n *\\n * ls.on('close', (code) => {\\n *   console.log(`child process exited with code ${code}`);\\n * });\\n * ```\\n *\\n * By default, pipes for `stdin`, `stdout`, and `stderr` are established between\\n * the parent Node.js process and the spawned subprocess. These pipes have\\n * limited (and platform-specific) capacity. If the subprocess writes to\\n * stdout in excess of that limit without the output being captured, the\\n * subprocess blocks waiting for the pipe buffer to accept more data. This is\\n * identical to the behavior of pipes in the shell. Use the `{ stdio: 'ignore' }`option if the output will not be consumed.\\n *\\n * The command lookup is performed using the `options.env.PATH` environment\\n * variable if `env` is in the `options` object. Otherwise, `process.env.PATH` is\\n * used. If `options.env` is set without `PATH`, lookup on Unix is performed\\n * on a default search path search of `/usr/bin:/bin` (see your operating system's\\n * manual for execvpe/execvp), on Windows the current processes environment\\n * variable `PATH` is used.\\n *\\n * On Windows, environment variables are case-insensitive. Node.js\\n * lexicographically sorts the `env` keys and uses the first one that\\n * case-insensitively matches. Only first (in lexicographic order) entry will be\\n * passed to the subprocess. This might lead to issues on Windows when passing\\n * objects to the `env` option that have multiple variants of the same key, such as`PATH` and `Path`.\\n *\\n * The {@link spawn} method spawns the child process asynchronously,\\n * without blocking the Node.js event loop. The {@link spawnSync} function provides equivalent functionality in a synchronous manner that blocks\\n * the event loop until the spawned process either exits or is terminated.\\n *\\n * For convenience, the `child_process` module provides a handful of synchronous\\n * and asynchronous alternatives to {@link spawn} and {@link spawnSync}. Each of these alternatives are implemented on\\n * top of {@link spawn} or {@link spawnSync}.\\n *\\n * * {@link exec}: spawns a shell and runs a command within that\\n * shell, passing the `stdout` and `stderr` to a callback function when\\n * complete.\\n * * {@link execFile}: similar to {@link exec} except\\n * that it spawns the command directly without first spawning a shell by\\n * default.\\n * * {@link fork}: spawns a new Node.js process and invokes a\\n * specified module with an IPC communication channel established that allows\\n * sending messages between parent and child.\\n * * {@link execSync}: a synchronous version of {@link exec} that will block the Node.js event loop.\\n * * {@link execFileSync}: a synchronous version of {@link execFile} that will block the Node.js event loop.\\n *\\n * For certain use cases, such as automating shell scripts, the `synchronous counterparts` may be more convenient. In many cases, however,\\n * the synchronous methods can have significant impact on performance due to\\n * stalling the event loop while spawned processes complete.\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/child_process.js)\\n */\\ndeclare module 'child_process' {\\n    import { ObjectEncodingOptions } from 'node:fs';\\n    import { EventEmitter, Abortable } from 'node:events';\\n    import * as net from 'node:net';\\n    import { Writable, Readable, Stream, Pipe } from 'node:stream';\\n    import { URL } from 'node:url';\\n    type Serializable = string | object | number | boolean | bigint;\\n    type SendHandle = net.Socket | net.Server;\\n    /**\\n     * Instances of the `ChildProcess` represent spawned child processes.\\n     *\\n     * Instances of `ChildProcess` are not intended to be created directly. Rather,\\n     * use the {@link spawn}, {@link exec},{@link execFile}, or {@link fork} methods to create\\n     * instances of `ChildProcess`.\\n     * @since v2.2.0\\n     */\\n    class ChildProcess extends EventEmitter {\\n        /**\\n         * A `Writable Stream` that represents the child process's `stdin`.\\n         *\\n         * If a child process waits to read all of its input, the child will not continue\\n         * until this stream has been closed via `end()`.\\n         *\\n         * If the child was spawned with `stdio[0]` set to anything other than `'pipe'`,\\n         * then this will be `null`.\\n         *\\n         * `subprocess.stdin` is an alias for `subprocess.stdio[0]`. Both properties will\\n         * refer to the same value.\\n         *\\n         * The `subprocess.stdin` property can be `undefined` if the child process could\\n         * not be successfully spawned.\\n         * @since v0.1.90\\n         */\\n        stdin: Writable | null;\\n        /**\\n         * A `Readable Stream` that represents the child process's `stdout`.\\n         *\\n         * If the child was spawned with `stdio[1]` set to anything other than `'pipe'`,\\n         * then this will be `null`.\\n         *\\n         * `subprocess.stdout` is an alias for `subprocess.stdio[1]`. Both properties will\\n         * refer to the same value.\\n         *\\n         * ```js\\n         * const { spawn } = require('child_process');\\n         *\\n         * const subprocess = spawn('ls');\\n         *\\n         * subprocess.stdout.on('data', (data) => {\\n         *   console.log(`Received chunk ${data}`);\\n         * });\\n         * ```\\n         *\\n         * The `subprocess.stdout` property can be `null` if the child process could\\n         * not be successfully spawned.\\n         * @since v0.1.90\\n         */\\n        stdout: Readable | null;\\n        /**\\n         * A `Readable Stream` that represents the child process's `stderr`.\\n         *\\n         * If the child was spawned with `stdio[2]` set to anything other than `'pipe'`,\\n         * then this will be `null`.\\n         *\\n         * `subprocess.stderr` is an alias for `subprocess.stdio[2]`. Both properties will\\n         * refer to the same value.\\n         *\\n         * The `subprocess.stderr` property can be `null` if the child process could\\n         * not be successfully spawned.\\n         * @since v0.1.90\\n         */\\n        stderr: Readable | null;\\n        /**\\n         * The `subprocess.channel` property is a reference to the child's IPC channel. If\\n         * no IPC channel currently exists, this property is `undefined`.\\n         * @since v7.1.0\\n         */\\n        readonly channel?: Pipe | null | undefined;\\n        /**\\n         * A sparse array of pipes to the child process, corresponding with positions in\\n         * the `stdio` option passed to {@link spawn} that have been set\\n         * to the value `'pipe'`. `subprocess.stdio[0]`, `subprocess.stdio[1]`, and`subprocess.stdio[2]` are also available as `subprocess.stdin`,`subprocess.stdout`, and `subprocess.stderr`,\\n         * respectively.\\n         *\\n         * In the following example, only the child's fd `1` (stdout) is configured as a\\n         * pipe, so only the parent's `subprocess.stdio[1]` is a stream, all other values\\n         * in the array are `null`.\\n         *\\n         * ```js\\n         * const assert = require('assert');\\n         * const fs = require('fs');\\n         * const child_process = require('child_process');\\n         *\\n         * const subprocess = child_process.spawn('ls', {\\n         *   stdio: [\\n         *     0, // Use parent's stdin for child.\\n         *     'pipe', // Pipe child's stdout to parent.\\n         *     fs.openSync('err.out', 'w'), // Direct child's stderr to a file.\\n         *   ]\\n         * });\\n         *\\n         * assert.strictEqual(subprocess.stdio[0], null);\\n         * assert.strictEqual(subprocess.stdio[0], subprocess.stdin);\\n         *\\n         * assert(subprocess.stdout);\\n         * assert.strictEqual(subprocess.stdio[1], subprocess.stdout);\\n         *\\n         * assert.strictEqual(subprocess.stdio[2], null);\\n         * assert.strictEqual(subprocess.stdio[2], subprocess.stderr);\\n         * ```\\n         *\\n         * The `subprocess.stdio` property can be `undefined` if the child process could\\n         * not be successfully spawned.\\n         * @since v0.7.10\\n         */\\n        readonly stdio: [\\n            Writable | null,\\n            // stdin\\n            Readable | null,\\n            // stdout\\n            Readable | null,\\n            // stderr\\n            Readable | Writable | null | undefined,\\n            // extra\\n            Readable | Writable | null | undefined // extra\\n        ];\\n        /**\\n         * The `subprocess.killed` property indicates whether the child process\\n         * successfully received a signal from `subprocess.kill()`. The `killed` property\\n         * does not indicate that the child process has been terminated.\\n         * @since v0.5.10\\n         */\\n        readonly killed: boolean;\\n        /**\\n         * Returns the process identifier (PID) of the child process. If the child process\\n         * fails to spawn due to errors, then the value is `undefined` and `error` is\\n         * emitted.\\n         *\\n         * ```js\\n         * const { spawn } = require('child_process');\\n         * const grep = spawn('grep', ['ssh']);\\n         *\\n         * console.log(`Spawned child pid: ${grep.pid}`);\\n         * grep.stdin.end();\\n         * ```\\n         * @since v0.1.90\\n         */\\n        readonly pid?: number | undefined;\\n        /**\\n         * The `subprocess.connected` property indicates whether it is still possible to\\n         * send and receive messages from a child process. When `subprocess.connected` is`false`, it is no longer possible to send or receive messages.\\n         * @since v0.7.2\\n         */\\n        readonly connected: boolean;\\n        /**\\n         * The `subprocess.exitCode` property indicates the exit code of the child process.\\n         * If the child process is still running, the field will be `null`.\\n         */\\n        readonly exitCode: number | null;\\n        /**\\n         * The `subprocess.signalCode` property indicates the signal received by\\n         * the child process if any, else `null`.\\n         */\\n        readonly signalCode: NodeJS.Signals | null;\\n        /**\\n         * The `subprocess.spawnargs` property represents the full list of command-line\\n         * arguments the child process was launched with.\\n         */\\n        readonly spawnargs: string[];\\n        /**\\n         * The `subprocess.spawnfile` property indicates the executable file name of\\n         * the child process that is launched.\\n         *\\n         * For {@link fork}, its value will be equal to `process.execPath`.\\n         * For {@link spawn}, its value will be the name of\\n         * the executable file.\\n         * For {@link exec},  its value will be the name of the shell\\n         * in which the child process is launched.\\n         */\\n        readonly spawnfile: string;\\n        /**\\n         * The `subprocess.kill()` method sends a signal to the child process. If no\\n         * argument is given, the process will be sent the `'SIGTERM'` signal. See [`signal(7)`](http://man7.org/linux/man-pages/man7/signal.7.html) for a list of available signals. This function\\n         * returns `true` if [`kill(2)`](http://man7.org/linux/man-pages/man2/kill.2.html) succeeds, and `false` otherwise.\\n         *\\n         * ```js\\n         * const { spawn } = require('child_process');\\n         * const grep = spawn('grep', ['ssh']);\\n         *\\n         * grep.on('close', (code, signal) => {\\n         *   console.log(\\n         *     `child process terminated due to receipt of signal ${signal}`);\\n         * });\\n         *\\n         * // Send SIGHUP to process.\\n         * grep.kill('SIGHUP');\\n         * ```\\n         *\\n         * The `ChildProcess` object may emit an `'error'` event if the signal\\n         * cannot be delivered. Sending a signal to a child process that has already exited\\n         * is not an error but may have unforeseen consequences. Specifically, if the\\n         * process identifier (PID) has been reassigned to another process, the signal will\\n         * be delivered to that process instead which can have unexpected results.\\n         *\\n         * While the function is called `kill`, the signal delivered to the child process\\n         * may not actually terminate the process.\\n         *\\n         * See [`kill(2)`](http://man7.org/linux/man-pages/man2/kill.2.html) for reference.\\n         *\\n         * On Windows, where POSIX signals do not exist, the `signal` argument will be\\n         * ignored, and the process will be killed forcefully and abruptly (similar to`'SIGKILL'`).\\n         * See `Signal Events` for more details.\\n         *\\n         * On Linux, child processes of child processes will not be terminated\\n         * when attempting to kill their parent. This is likely to happen when running a\\n         * new process in a shell or with the use of the `shell` option of `ChildProcess`:\\n         *\\n         * ```js\\n         * 'use strict';\\n         * const { spawn } = require('child_process');\\n         *\\n         * const subprocess = spawn(\\n         *   'sh',\\n         *   [\\n         *     '-c',\\n         *     `node -e \\\"setInterval(() => {\\n         *       console.log(process.pid, 'is alive')\\n         *     }, 500);\\\"`,\\n         *   ], {\\n         *     stdio: ['inherit', 'inherit', 'inherit']\\n         *   }\\n         * );\\n         *\\n         * setTimeout(() => {\\n         *   subprocess.kill(); // Does not terminate the Node.js process in the shell.\\n         * }, 2000);\\n         * ```\\n         * @since v0.1.90\\n         */\\n        kill(signal?: NodeJS.Signals | number): boolean;\\n        /**\\n         * When an IPC channel has been established between the parent and child (\\n         * i.e. when using {@link fork}), the `subprocess.send()` method can\\n         * be used to send messages to the child process. When the child process is a\\n         * Node.js instance, these messages can be received via the `'message'` event.\\n         *\\n         * The message goes through serialization and parsing. The resulting\\n         * message might not be the same as what is originally sent.\\n         *\\n         * For example, in the parent script:\\n         *\\n         * ```js\\n         * const cp = require('child_process');\\n         * const n = cp.fork(`${__dirname}/sub.js`);\\n         *\\n         * n.on('message', (m) => {\\n         *   console.log('PARENT got message:', m);\\n         * });\\n         *\\n         * // Causes the child to print: CHILD got message: { hello: 'world' }\\n         * n.send({ hello: 'world' });\\n         * ```\\n         *\\n         * And then the child script, `'sub.js'` might look like this:\\n         *\\n         * ```js\\n         * process.on('message', (m) => {\\n         *   console.log('CHILD got message:', m);\\n         * });\\n         *\\n         * // Causes the parent to print: PARENT got message: { foo: 'bar', baz: null }\\n         * process.send({ foo: 'bar', baz: NaN });\\n         * ```\\n         *\\n         * Child Node.js processes will have a `process.send()` method of their own\\n         * that allows the child to send messages back to the parent.\\n         *\\n         * There is a special case when sending a `{cmd: 'NODE_foo'}` message. Messages\\n         * containing a `NODE_` prefix in the `cmd` property are reserved for use within\\n         * Node.js core and will not be emitted in the child's `'message'` event. Rather, such messages are emitted using the`'internalMessage'` event and are consumed internally by Node.js.\\n         * Applications should avoid using such messages or listening for`'internalMessage'` events as it is subject to change without notice.\\n         *\\n         * The optional `sendHandle` argument that may be passed to `subprocess.send()` is\\n         * for passing a TCP server or socket object to the child process. The child will\\n         * receive the object as the second argument passed to the callback function\\n         * registered on the `'message'` event. Any data that is received\\n         * and buffered in the socket will not be sent to the child.\\n         *\\n         * The optional `callback` is a function that is invoked after the message is\\n         * sent but before the child may have received it. The function is called with a\\n         * single argument: `null` on success, or an `Error` object on failure.\\n         *\\n         * If no `callback` function is provided and the message cannot be sent, an`'error'` event will be emitted by the `ChildProcess` object. This can\\n         * happen, for instance, when the child process has already exited.\\n         *\\n         * `subprocess.send()` will return `false` if the channel has closed or when the\\n         * backlog of unsent messages exceeds a threshold that makes it unwise to send\\n         * more. Otherwise, the method returns `true`. The `callback` function can be\\n         * used to implement flow control.\\n         *\\n         * #### Example: sending a server object\\n         *\\n         * The `sendHandle` argument can be used, for instance, to pass the handle of\\n         * a TCP server object to the child process as illustrated in the example below:\\n         *\\n         * ```js\\n         * const subprocess = require('child_process').fork('subprocess.js');\\n         *\\n         * // Open up the server object and send the handle.\\n         * const server = require('net').createServer();\\n         * server.on('connection', (socket) => {\\n         *   socket.end('handled by parent');\\n         * });\\n         * server.listen(1337, () => {\\n         *   subprocess.send('server', server);\\n         * });\\n         * ```\\n         *\\n         * The child would then receive the server object as:\\n         *\\n         * ```js\\n         * process.on('message', (m, server) => {\\n         *   if (m === 'server') {\\n         *     server.on('connection', (socket) => {\\n         *       socket.end('handled by child');\\n         *     });\\n         *   }\\n         * });\\n         * ```\\n         *\\n         * Once the server is now shared between the parent and child, some connections\\n         * can be handled by the parent and some by the child.\\n         *\\n         * While the example above uses a server created using the `net` module, `dgram`module servers use exactly the same workflow with the exceptions of listening on\\n         * a `'message'` event instead of `'connection'` and using `server.bind()` instead\\n         * of `server.listen()`. This is, however, currently only supported on Unix\\n         * platforms.\\n         *\\n         * #### Example: sending a socket object\\n         *\\n         * Similarly, the `sendHandler` argument can be used to pass the handle of a\\n         * socket to the child process. The example below spawns two children that each\\n         * handle connections with \\\"normal\\\" or \\\"special\\\" priority:\\n         *\\n         * ```js\\n         * const { fork } = require('child_process');\\n         * const normal = fork('subprocess.js', ['normal']);\\n         * const special = fork('subprocess.js', ['special']);\\n         *\\n         * // Open up the server and send sockets to child. Use pauseOnConnect to prevent\\n         * // the sockets from being read before they are sent to the child process.\\n         * const server = require('net').createServer({ pauseOnConnect: true });\\n         * server.on('connection', (socket) => {\\n         *\\n         *   // If this is special priority...\\n         *   if (socket.remoteAddress === '74.125.127.100') {\\n         *     special.send('socket', socket);\\n         *     return;\\n         *   }\\n         *   // This is normal priority.\\n         *   normal.send('socket', socket);\\n         * });\\n         * server.listen(1337);\\n         * ```\\n         *\\n         * The `subprocess.js` would receive the socket handle as the second argument\\n         * passed to the event callback function:\\n         *\\n         * ```js\\n         * process.on('message', (m, socket) => {\\n         *   if (m === 'socket') {\\n         *     if (socket) {\\n         *       // Check that the client socket exists.\\n         *       // It is possible for the socket to be closed between the time it is\\n         *       // sent and the time it is received in the child process.\\n         *       socket.end(`Request handled with ${process.argv[2]} priority`);\\n         *     }\\n         *   }\\n         * });\\n         * ```\\n         *\\n         * Do not use `.maxConnections` on a socket that has been passed to a subprocess.\\n         * The parent cannot track when the socket is destroyed.\\n         *\\n         * Any `'message'` handlers in the subprocess should verify that `socket` exists,\\n         * as the connection may have been closed during the time it takes to send the\\n         * connection to the child.\\n         * @since v0.5.9\\n         * @param options The `options` argument, if present, is an object used to parameterize the sending of certain types of handles. `options` supports the following properties:\\n         */\\n        send(message: Serializable, callback?: (error: Error | null) => void): boolean;\\n        send(message: Serializable, sendHandle?: SendHandle, callback?: (error: Error | null) => void): boolean;\\n        send(message: Serializable, sendHandle?: SendHandle, options?: MessageOptions, callback?: (error: Error | null) => void): boolean;\\n        /**\\n         * Closes the IPC channel between parent and child, allowing the child to exit\\n         * gracefully once there are no other connections keeping it alive. After calling\\n         * this method the `subprocess.connected` and `process.connected` properties in\\n         * both the parent and child (respectively) will be set to `false`, and it will be\\n         * no longer possible to pass messages between the processes.\\n         *\\n         * The `'disconnect'` event will be emitted when there are no messages in the\\n         * process of being received. This will most often be triggered immediately after\\n         * calling `subprocess.disconnect()`.\\n         *\\n         * When the child process is a Node.js instance (e.g. spawned using {@link fork}), the `process.disconnect()` method can be invoked\\n         * within the child process to close the IPC channel as well.\\n         * @since v0.7.2\\n         */\\n        disconnect(): void;\\n        /**\\n         * By default, the parent will wait for the detached child to exit. To prevent the\\n         * parent from waiting for a given `subprocess` to exit, use the`subprocess.unref()` method. Doing so will cause the parent's event loop to not\\n         * include the child in its reference count, allowing the parent to exit\\n         * independently of the child, unless there is an established IPC channel between\\n         * the child and the parent.\\n         *\\n         * ```js\\n         * const { spawn } = require('child_process');\\n         *\\n         * const subprocess = spawn(process.argv[0], ['child_program.js'], {\\n         *   detached: true,\\n         *   stdio: 'ignore'\\n         * });\\n         *\\n         * subprocess.unref();\\n         * ```\\n         * @since v0.7.10\\n         */\\n        unref(): void;\\n        /**\\n         * Calling `subprocess.ref()` after making a call to `subprocess.unref()` will\\n         * restore the removed reference count for the child process, forcing the parent\\n         * to wait for the child to exit before exiting itself.\\n         *\\n         * ```js\\n         * const { spawn } = require('child_process');\\n         *\\n         * const subprocess = spawn(process.argv[0], ['child_program.js'], {\\n         *   detached: true,\\n         *   stdio: 'ignore'\\n         * });\\n         *\\n         * subprocess.unref();\\n         * subprocess.ref();\\n         * ```\\n         * @since v0.7.10\\n         */\\n        ref(): void;\\n        /**\\n         * events.EventEmitter\\n         * 1. close\\n         * 2. disconnect\\n         * 3. error\\n         * 4. exit\\n         * 5. message\\n         * 6. spawn\\n         */\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        addListener(event: 'close', listener: (code: number | null, signal: NodeJS.Signals | null) => void): this;\\n        addListener(event: 'disconnect', listener: () => void): this;\\n        addListener(event: 'error', listener: (err: Error) => void): this;\\n        addListener(event: 'exit', listener: (code: number | null, signal: NodeJS.Signals | null) => void): this;\\n        addListener(event: 'message', listener: (message: Serializable, sendHandle: SendHandle) => void): this;\\n        addListener(event: 'spawn', listener: () => void): this;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        emit(event: 'close', code: number | null, signal: NodeJS.Signals | null): boolean;\\n        emit(event: 'disconnect'): boolean;\\n        emit(event: 'error', err: Error): boolean;\\n        emit(event: 'exit', code: number | null, signal: NodeJS.Signals | null): boolean;\\n        emit(event: 'message', message: Serializable, sendHandle: SendHandle): boolean;\\n        emit(event: 'spawn', listener: () => void): boolean;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        on(event: 'close', listener: (code: number | null, signal: NodeJS.Signals | null) => void): this;\\n        on(event: 'disconnect', listener: () => void): this;\\n        on(event: 'error', listener: (err: Error) => void): this;\\n        on(event: 'exit', listener: (code: number | null, signal: NodeJS.Signals | null) => void): this;\\n        on(event: 'message', listener: (message: Serializable, sendHandle: SendHandle) => void): this;\\n        on(event: 'spawn', listener: () => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        once(event: 'close', listener: (code: number | null, signal: NodeJS.Signals | null) => void): this;\\n        once(event: 'disconnect', listener: () => void): this;\\n        once(event: 'error', listener: (err: Error) => void): this;\\n        once(event: 'exit', listener: (code: number | null, signal: NodeJS.Signals | null) => void): this;\\n        once(event: 'message', listener: (message: Serializable, sendHandle: SendHandle) => void): this;\\n        once(event: 'spawn', listener: () => void): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'close', listener: (code: number | null, signal: NodeJS.Signals | null) => void): this;\\n        prependListener(event: 'disconnect', listener: () => void): this;\\n        prependListener(event: 'error', listener: (err: Error) => void): this;\\n        prependListener(event: 'exit', listener: (code: number | null, signal: NodeJS.Signals | null) => void): this;\\n        prependListener(event: 'message', listener: (message: Serializable, sendHandle: SendHandle) => void): this;\\n        prependListener(event: 'spawn', listener: () => void): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'close', listener: (code: number | null, signal: NodeJS.Signals | null) => void): this;\\n        prependOnceListener(event: 'disconnect', listener: () => void): this;\\n        prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n        prependOnceListener(event: 'exit', listener: (code: number | null, signal: NodeJS.Signals | null) => void): this;\\n        prependOnceListener(event: 'message', listener: (message: Serializable, sendHandle: SendHandle) => void): this;\\n        prependOnceListener(event: 'spawn', listener: () => void): this;\\n    }\\n    // return this object when stdio option is undefined or not specified\\n    interface ChildProcessWithoutNullStreams extends ChildProcess {\\n        stdin: Writable;\\n        stdout: Readable;\\n        stderr: Readable;\\n        readonly stdio: [\\n            Writable,\\n            Readable,\\n            Readable,\\n            // stderr\\n            Readable | Writable | null | undefined,\\n            // extra, no modification\\n            Readable | Writable | null | undefined // extra, no modification\\n        ];\\n    }\\n    // return this object when stdio option is a tuple of 3\\n    interface ChildProcessByStdio<I extends null | Writable, O extends null | Readable, E extends null | Readable> extends ChildProcess {\\n        stdin: I;\\n        stdout: O;\\n        stderr: E;\\n        readonly stdio: [\\n            I,\\n            O,\\n            E,\\n            Readable | Writable | null | undefined,\\n            // extra, no modification\\n            Readable | Writable | null | undefined // extra, no modification\\n        ];\\n    }\\n    interface MessageOptions {\\n        keepOpen?: boolean | undefined;\\n    }\\n    type IOType = 'overlapped' | 'pipe' | 'ignore' | 'inherit';\\n    type StdioOptions = IOType | Array<IOType | 'ipc' | Stream | number | null | undefined>;\\n    type SerializationType = 'json' | 'advanced';\\n    interface MessagingOptions extends Abortable {\\n        /**\\n         * Specify the kind of serialization used for sending messages between processes.\\n         * @default 'json'\\n         */\\n        serialization?: SerializationType | undefined;\\n        /**\\n         * The signal value to be used when the spawned process will be killed by the abort signal.\\n         * @default 'SIGTERM'\\n         */\\n        killSignal?: NodeJS.Signals | number | undefined;\\n        /**\\n         * In milliseconds the maximum amount of time the process is allowed to run.\\n         */\\n        timeout?: number | undefined;\\n    }\\n    interface ProcessEnvOptions {\\n        uid?: number | undefined;\\n        gid?: number | undefined;\\n        cwd?: string | URL | undefined;\\n        env?: NodeJS.ProcessEnv | undefined;\\n    }\\n    interface CommonOptions extends ProcessEnvOptions {\\n        /**\\n         * @default false\\n         */\\n        windowsHide?: boolean | undefined;\\n        /**\\n         * @default 0\\n         */\\n        timeout?: number | undefined;\\n    }\\n    interface CommonSpawnOptions extends CommonOptions, MessagingOptions, Abortable {\\n        argv0?: string | undefined;\\n        /**\\n         * Can be set to 'pipe', 'inherit', 'overlapped', or 'ignore', or an array of these strings.\\n         * If passed as an array, the first element is used for `stdin`, the second for\\n         * `stdout`, and the third for `stderr`. A fourth element can be used to\\n         * specify the `stdio` behavior beyond the standard streams. See\\n         * {@link ChildProcess.stdio} for more information.\\n         *\\n         * @default 'pipe'\\n         */\\n        stdio?: StdioOptions | undefined;\\n        shell?: boolean | string | undefined;\\n        windowsVerbatimArguments?: boolean | undefined;\\n    }\\n    interface SpawnOptions extends CommonSpawnOptions {\\n        detached?: boolean | undefined;\\n    }\\n    interface SpawnOptionsWithoutStdio extends SpawnOptions {\\n        stdio?: StdioPipeNamed | StdioPipe[] | undefined;\\n    }\\n    type StdioNull = 'inherit' | 'ignore' | Stream;\\n    type StdioPipeNamed = 'pipe' | 'overlapped';\\n    type StdioPipe = undefined | null | StdioPipeNamed;\\n    interface SpawnOptionsWithStdioTuple<Stdin extends StdioNull | StdioPipe, Stdout extends StdioNull | StdioPipe, Stderr extends StdioNull | StdioPipe> extends SpawnOptions {\\n        stdio: [Stdin, Stdout, Stderr];\\n    }\\n    /**\\n     * The `child_process.spawn()` method spawns a new process using the given`command`, with command-line arguments in `args`. If omitted, `args` defaults\\n     * to an empty array.\\n     *\\n     * **If the `shell` option is enabled, do not pass unsanitized user input to this**\\n     * **function. Any input containing shell metacharacters may be used to trigger**\\n     * **arbitrary command execution.**\\n     *\\n     * A third argument may be used to specify additional options, with these defaults:\\n     *\\n     * ```js\\n     * const defaults = {\\n     *   cwd: undefined,\\n     *   env: process.env\\n     * };\\n     * ```\\n     *\\n     * Use `cwd` to specify the working directory from which the process is spawned.\\n     * If not given, the default is to inherit the current working directory. If given,\\n     * but the path does not exist, the child process emits an `ENOENT` error\\n     * and exits immediately. `ENOENT` is also emitted when the command\\n     * does not exist.\\n     *\\n     * Use `env` to specify environment variables that will be visible to the new\\n     * process, the default is `process.env`.\\n     *\\n     * `undefined` values in `env` will be ignored.\\n     *\\n     * Example of running `ls -lh /usr`, capturing `stdout`, `stderr`, and the\\n     * exit code:\\n     *\\n     * ```js\\n     * const { spawn } = require('child_process');\\n     * const ls = spawn('ls', ['-lh', '/usr']);\\n     *\\n     * ls.stdout.on('data', (data) => {\\n     *   console.log(`stdout: ${data}`);\\n     * });\\n     *\\n     * ls.stderr.on('data', (data) => {\\n     *   console.error(`stderr: ${data}`);\\n     * });\\n     *\\n     * ls.on('close', (code) => {\\n     *   console.log(`child process exited with code ${code}`);\\n     * });\\n     * ```\\n     *\\n     * Example: A very elaborate way to run `ps ax | grep ssh`\\n     *\\n     * ```js\\n     * const { spawn } = require('child_process');\\n     * const ps = spawn('ps', ['ax']);\\n     * const grep = spawn('grep', ['ssh']);\\n     *\\n     * ps.stdout.on('data', (data) => {\\n     *   grep.stdin.write(data);\\n     * });\\n     *\\n     * ps.stderr.on('data', (data) => {\\n     *   console.error(`ps stderr: ${data}`);\\n     * });\\n     *\\n     * ps.on('close', (code) => {\\n     *   if (code !== 0) {\\n     *     console.log(`ps process exited with code ${code}`);\\n     *   }\\n     *   grep.stdin.end();\\n     * });\\n     *\\n     * grep.stdout.on('data', (data) => {\\n     *   console.log(data.toString());\\n     * });\\n     *\\n     * grep.stderr.on('data', (data) => {\\n     *   console.error(`grep stderr: ${data}`);\\n     * });\\n     *\\n     * grep.on('close', (code) => {\\n     *   if (code !== 0) {\\n     *     console.log(`grep process exited with code ${code}`);\\n     *   }\\n     * });\\n     * ```\\n     *\\n     * Example of checking for failed `spawn`:\\n     *\\n     * ```js\\n     * const { spawn } = require('child_process');\\n     * const subprocess = spawn('bad_command');\\n     *\\n     * subprocess.on('error', (err) => {\\n     *   console.error('Failed to start subprocess.');\\n     * });\\n     * ```\\n     *\\n     * Certain platforms (macOS, Linux) will use the value of `argv[0]` for the process\\n     * title while others (Windows, SunOS) will use `command`.\\n     *\\n     * Node.js currently overwrites `argv[0]` with `process.execPath` on startup, so`process.argv[0]` in a Node.js child process will not match the `argv0`parameter passed to `spawn` from the parent,\\n     * retrieve it with the`process.argv0` property instead.\\n     *\\n     * If the `signal` option is enabled, calling `.abort()` on the corresponding`AbortController` is similar to calling `.kill()` on the child process except\\n     * the error passed to the callback will be an `AbortError`:\\n     *\\n     * ```js\\n     * const { spawn } = require('child_process');\\n     * const controller = new AbortController();\\n     * const { signal } = controller;\\n     * const grep = spawn('grep', ['ssh'], { signal });\\n     * grep.on('error', (err) => {\\n     *   // This will be called with err being an AbortError if the controller aborts\\n     * });\\n     * controller.abort(); // Stops the child process\\n     * ```\\n     * @since v0.1.90\\n     * @param command The command to run.\\n     * @param args List of string arguments.\\n     */\\n    function spawn(command: string, options?: SpawnOptionsWithoutStdio): ChildProcessWithoutNullStreams;\\n    function spawn(command: string, options: SpawnOptionsWithStdioTuple<StdioPipe, StdioPipe, StdioPipe>): ChildProcessByStdio<Writable, Readable, Readable>;\\n    function spawn(command: string, options: SpawnOptionsWithStdioTuple<StdioPipe, StdioPipe, StdioNull>): ChildProcessByStdio<Writable, Readable, null>;\\n    function spawn(command: string, options: SpawnOptionsWithStdioTuple<StdioPipe, StdioNull, StdioPipe>): ChildProcessByStdio<Writable, null, Readable>;\\n    function spawn(command: string, options: SpawnOptionsWithStdioTuple<StdioNull, StdioPipe, StdioPipe>): ChildProcessByStdio<null, Readable, Readable>;\\n    function spawn(command: string, options: SpawnOptionsWithStdioTuple<StdioPipe, StdioNull, StdioNull>): ChildProcessByStdio<Writable, null, null>;\\n    function spawn(command: string, options: SpawnOptionsWithStdioTuple<StdioNull, StdioPipe, StdioNull>): ChildProcessByStdio<null, Readable, null>;\\n    function spawn(command: string, options: SpawnOptionsWithStdioTuple<StdioNull, StdioNull, StdioPipe>): ChildProcessByStdio<null, null, Readable>;\\n    function spawn(command: string, options: SpawnOptionsWithStdioTuple<StdioNull, StdioNull, StdioNull>): ChildProcessByStdio<null, null, null>;\\n    function spawn(command: string, options: SpawnOptions): ChildProcess;\\n    // overloads of spawn with 'args'\\n    function spawn(command: string, args?: ReadonlyArray<string>, options?: SpawnOptionsWithoutStdio): ChildProcessWithoutNullStreams;\\n    function spawn(command: string, args: ReadonlyArray<string>, options: SpawnOptionsWithStdioTuple<StdioPipe, StdioPipe, StdioPipe>): ChildProcessByStdio<Writable, Readable, Readable>;\\n    function spawn(command: string, args: ReadonlyArray<string>, options: SpawnOptionsWithStdioTuple<StdioPipe, StdioPipe, StdioNull>): ChildProcessByStdio<Writable, Readable, null>;\\n    function spawn(command: string, args: ReadonlyArray<string>, options: SpawnOptionsWithStdioTuple<StdioPipe, StdioNull, StdioPipe>): ChildProcessByStdio<Writable, null, Readable>;\\n    function spawn(command: string, args: ReadonlyArray<string>, options: SpawnOptionsWithStdioTuple<StdioNull, StdioPipe, StdioPipe>): ChildProcessByStdio<null, Readable, Readable>;\\n    function spawn(command: string, args: ReadonlyArray<string>, options: SpawnOptionsWithStdioTuple<StdioPipe, StdioNull, StdioNull>): ChildProcessByStdio<Writable, null, null>;\\n    function spawn(command: string, args: ReadonlyArray<string>, options: SpawnOptionsWithStdioTuple<StdioNull, StdioPipe, StdioNull>): ChildProcessByStdio<null, Readable, null>;\\n    function spawn(command: string, args: ReadonlyArray<string>, options: SpawnOptionsWithStdioTuple<StdioNull, StdioNull, StdioPipe>): ChildProcessByStdio<null, null, Readable>;\\n    function spawn(command: string, args: ReadonlyArray<string>, options: SpawnOptionsWithStdioTuple<StdioNull, StdioNull, StdioNull>): ChildProcessByStdio<null, null, null>;\\n    function spawn(command: string, args: ReadonlyArray<string>, options: SpawnOptions): ChildProcess;\\n    interface ExecOptions extends CommonOptions {\\n        shell?: string | undefined;\\n        signal?: AbortSignal | undefined;\\n        maxBuffer?: number | undefined;\\n        killSignal?: NodeJS.Signals | number | undefined;\\n    }\\n    interface ExecOptionsWithStringEncoding extends ExecOptions {\\n        encoding: BufferEncoding;\\n    }\\n    interface ExecOptionsWithBufferEncoding extends ExecOptions {\\n        encoding: BufferEncoding | null; // specify `null`.\\n    }\\n    interface ExecException extends Error {\\n        cmd?: string | undefined;\\n        killed?: boolean | undefined;\\n        code?: number | undefined;\\n        signal?: NodeJS.Signals | undefined;\\n    }\\n    /**\\n     * Spawns a shell then executes the `command` within that shell, buffering any\\n     * generated output. The `command` string passed to the exec function is processed\\n     * directly by the shell and special characters (vary based on [shell](https://en.wikipedia.org/wiki/List_of_command-line_interpreters))\\n     * need to be dealt with accordingly:\\n     *\\n     * ```js\\n     * const { exec } = require('child_process');\\n     *\\n     * exec('\\\"/path/to/test file/test.sh\\\" arg1 arg2');\\n     * // Double quotes are used so that the space in the path is not interpreted as\\n     * // a delimiter of multiple arguments.\\n     *\\n     * exec('echo \\\"The \\\\\\\\$HOME variable is $HOME\\\"');\\n     * // The $HOME variable is escaped in the first instance, but not in the second.\\n     * ```\\n     *\\n     * **Never pass unsanitized user input to this function. Any input containing shell**\\n     * **metacharacters may be used to trigger arbitrary command execution.**\\n     *\\n     * If a `callback` function is provided, it is called with the arguments`(error, stdout, stderr)`. On success, `error` will be `null`. On error,`error` will be an instance of `Error`. The\\n     * `error.code` property will be\\n     * the exit code of the process. By convention, any exit code other than `0`indicates an error. `error.signal` will be the signal that terminated the\\n     * process.\\n     *\\n     * The `stdout` and `stderr` arguments passed to the callback will contain the\\n     * stdout and stderr output of the child process. By default, Node.js will decode\\n     * the output as UTF-8 and pass strings to the callback. The `encoding` option\\n     * can be used to specify the character encoding used to decode the stdout and\\n     * stderr output. If `encoding` is `'buffer'`, or an unrecognized character\\n     * encoding, `Buffer` objects will be passed to the callback instead.\\n     *\\n     * ```js\\n     * const { exec } = require('child_process');\\n     * exec('cat *.js missing_file | wc -l', (error, stdout, stderr) => {\\n     *   if (error) {\\n     *     console.error(`exec error: ${error}`);\\n     *     return;\\n     *   }\\n     *   console.log(`stdout: ${stdout}`);\\n     *   console.error(`stderr: ${stderr}`);\\n     * });\\n     * ```\\n     *\\n     * If `timeout` is greater than `0`, the parent will send the signal\\n     * identified by the `killSignal` property (the default is `'SIGTERM'`) if the\\n     * child runs longer than `timeout` milliseconds.\\n     *\\n     * Unlike the [`exec(3)`](http://man7.org/linux/man-pages/man3/exec.3.html) POSIX system call, `child_process.exec()` does not replace\\n     * the existing process and uses a shell to execute the command.\\n     *\\n     * If this method is invoked as its `util.promisify()` ed version, it returns\\n     * a `Promise` for an `Object` with `stdout` and `stderr` properties. The returned`ChildProcess` instance is attached to the `Promise` as a `child` property. In\\n     * case of an error (including any error resulting in an exit code other than 0), a\\n     * rejected promise is returned, with the same `error` object given in the\\n     * callback, but with two additional properties `stdout` and `stderr`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     * const exec = util.promisify(require('child_process').exec);\\n     *\\n     * async function lsExample() {\\n     *   const { stdout, stderr } = await exec('ls');\\n     *   console.log('stdout:', stdout);\\n     *   console.error('stderr:', stderr);\\n     * }\\n     * lsExample();\\n     * ```\\n     *\\n     * If the `signal` option is enabled, calling `.abort()` on the corresponding`AbortController` is similar to calling `.kill()` on the child process except\\n     * the error passed to the callback will be an `AbortError`:\\n     *\\n     * ```js\\n     * const { exec } = require('child_process');\\n     * const controller = new AbortController();\\n     * const { signal } = controller;\\n     * const child = exec('grep ssh', { signal }, (error) => {\\n     *   console.log(error); // an AbortError\\n     * });\\n     * controller.abort();\\n     * ```\\n     * @since v0.1.90\\n     * @param command The command to run, with space-separated arguments.\\n     * @param callback called with the output when process terminates.\\n     */\\n    function exec(command: string, callback?: (error: ExecException | null, stdout: string, stderr: string) => void): ChildProcess;\\n    // `options` with `\\\"buffer\\\"` or `null` for `encoding` means stdout/stderr are definitely `Buffer`.\\n    function exec(\\n        command: string,\\n        options: {\\n            encoding: 'buffer' | null;\\n        } & ExecOptions,\\n        callback?: (error: ExecException | null, stdout: Buffer, stderr: Buffer) => void\\n    ): ChildProcess;\\n    // `options` with well known `encoding` means stdout/stderr are definitely `string`.\\n    function exec(\\n        command: string,\\n        options: {\\n            encoding: BufferEncoding;\\n        } & ExecOptions,\\n        callback?: (error: ExecException | null, stdout: string, stderr: string) => void\\n    ): ChildProcess;\\n    // `options` with an `encoding` whose type is `string` means stdout/stderr could either be `Buffer` or `string`.\\n    // There is no guarantee the `encoding` is unknown as `string` is a superset of `BufferEncoding`.\\n    function exec(\\n        command: string,\\n        options: {\\n            encoding: BufferEncoding;\\n        } & ExecOptions,\\n        callback?: (error: ExecException | null, stdout: string | Buffer, stderr: string | Buffer) => void\\n    ): ChildProcess;\\n    // `options` without an `encoding` means stdout/stderr are definitely `string`.\\n    function exec(command: string, options: ExecOptions, callback?: (error: ExecException | null, stdout: string, stderr: string) => void): ChildProcess;\\n    // fallback if nothing else matches. Worst case is always `string | Buffer`.\\n    function exec(\\n        command: string,\\n        options: (ObjectEncodingOptions & ExecOptions) | undefined | null,\\n        callback?: (error: ExecException | null, stdout: string | Buffer, stderr: string | Buffer) => void\\n    ): ChildProcess;\\n    interface PromiseWithChild<T> extends Promise<T> {\\n        child: ChildProcess;\\n    }\\n    namespace exec {\\n        function __promisify__(command: string): PromiseWithChild<{\\n            stdout: string;\\n            stderr: string;\\n        }>;\\n        function __promisify__(\\n            command: string,\\n            options: {\\n                encoding: 'buffer' | null;\\n            } & ExecOptions\\n        ): PromiseWithChild<{\\n            stdout: Buffer;\\n            stderr: Buffer;\\n        }>;\\n        function __promisify__(\\n            command: string,\\n            options: {\\n                encoding: BufferEncoding;\\n            } & ExecOptions\\n        ): PromiseWithChild<{\\n            stdout: string;\\n            stderr: string;\\n        }>;\\n        function __promisify__(\\n            command: string,\\n            options: ExecOptions\\n        ): PromiseWithChild<{\\n            stdout: string;\\n            stderr: string;\\n        }>;\\n        function __promisify__(\\n            command: string,\\n            options?: (ObjectEncodingOptions & ExecOptions) | null\\n        ): PromiseWithChild<{\\n            stdout: string | Buffer;\\n            stderr: string | Buffer;\\n        }>;\\n    }\\n    interface ExecFileOptions extends CommonOptions, Abortable {\\n        maxBuffer?: number | undefined;\\n        killSignal?: NodeJS.Signals | number | undefined;\\n        windowsVerbatimArguments?: boolean | undefined;\\n        shell?: boolean | string | undefined;\\n        signal?: AbortSignal | undefined;\\n    }\\n    interface ExecFileOptionsWithStringEncoding extends ExecFileOptions {\\n        encoding: BufferEncoding;\\n    }\\n    interface ExecFileOptionsWithBufferEncoding extends ExecFileOptions {\\n        encoding: 'buffer' | null;\\n    }\\n    interface ExecFileOptionsWithOtherEncoding extends ExecFileOptions {\\n        encoding: BufferEncoding;\\n    }\\n    type ExecFileException =\\n        & Omit<ExecException, 'code'>\\n        & Omit<NodeJS.ErrnoException, 'code'>\\n        & { code?: string | number | undefined | null };\\n    /**\\n     * The `child_process.execFile()` function is similar to {@link exec} except that it does not spawn a shell by default. Rather, the specified\\n     * executable `file` is spawned directly as a new process making it slightly more\\n     * efficient than {@link exec}.\\n     *\\n     * The same options as {@link exec} are supported. Since a shell is\\n     * not spawned, behaviors such as I/O redirection and file globbing are not\\n     * supported.\\n     *\\n     * ```js\\n     * const { execFile } = require('child_process');\\n     * const child = execFile('node', ['--version'], (error, stdout, stderr) => {\\n     *   if (error) {\\n     *     throw error;\\n     *   }\\n     *   console.log(stdout);\\n     * });\\n     * ```\\n     *\\n     * The `stdout` and `stderr` arguments passed to the callback will contain the\\n     * stdout and stderr output of the child process. By default, Node.js will decode\\n     * the output as UTF-8 and pass strings to the callback. The `encoding` option\\n     * can be used to specify the character encoding used to decode the stdout and\\n     * stderr output. If `encoding` is `'buffer'`, or an unrecognized character\\n     * encoding, `Buffer` objects will be passed to the callback instead.\\n     *\\n     * If this method is invoked as its `util.promisify()` ed version, it returns\\n     * a `Promise` for an `Object` with `stdout` and `stderr` properties. The returned`ChildProcess` instance is attached to the `Promise` as a `child` property. In\\n     * case of an error (including any error resulting in an exit code other than 0), a\\n     * rejected promise is returned, with the same `error` object given in the\\n     * callback, but with two additional properties `stdout` and `stderr`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     * const execFile = util.promisify(require('child_process').execFile);\\n     * async function getVersion() {\\n     *   const { stdout } = await execFile('node', ['--version']);\\n     *   console.log(stdout);\\n     * }\\n     * getVersion();\\n     * ```\\n     *\\n     * **If the `shell` option is enabled, do not pass unsanitized user input to this**\\n     * **function. Any input containing shell metacharacters may be used to trigger**\\n     * **arbitrary command execution.**\\n     *\\n     * If the `signal` option is enabled, calling `.abort()` on the corresponding`AbortController` is similar to calling `.kill()` on the child process except\\n     * the error passed to the callback will be an `AbortError`:\\n     *\\n     * ```js\\n     * const { execFile } = require('child_process');\\n     * const controller = new AbortController();\\n     * const { signal } = controller;\\n     * const child = execFile('node', ['--version'], { signal }, (error) => {\\n     *   console.log(error); // an AbortError\\n     * });\\n     * controller.abort();\\n     * ```\\n     * @since v0.1.91\\n     * @param file The name or path of the executable file to run.\\n     * @param args List of string arguments.\\n     * @param callback Called with the output when process terminates.\\n     */\\n    function execFile(file: string): ChildProcess;\\n    function execFile(file: string, options: (ObjectEncodingOptions & ExecFileOptions) | undefined | null): ChildProcess;\\n    function execFile(file: string, args?: ReadonlyArray<string> | null): ChildProcess;\\n    function execFile(file: string, args: ReadonlyArray<string> | undefined | null, options: (ObjectEncodingOptions & ExecFileOptions) | undefined | null): ChildProcess;\\n    // no `options` definitely means stdout/stderr are `string`.\\n    function execFile(file: string, callback: (error: ExecFileException | null, stdout: string, stderr: string) => void): ChildProcess;\\n    function execFile(file: string, args: ReadonlyArray<string> | undefined | null, callback: (error: ExecFileException | null, stdout: string, stderr: string) => void): ChildProcess;\\n    // `options` with `\\\"buffer\\\"` or `null` for `encoding` means stdout/stderr are definitely `Buffer`.\\n    function execFile(file: string, options: ExecFileOptionsWithBufferEncoding, callback: (error: ExecFileException | null, stdout: Buffer, stderr: Buffer) => void): ChildProcess;\\n    function execFile(\\n        file: string,\\n        args: ReadonlyArray<string> | undefined | null,\\n        options: ExecFileOptionsWithBufferEncoding,\\n        callback: (error: ExecFileException | null, stdout: Buffer, stderr: Buffer) => void\\n    ): ChildProcess;\\n    // `options` with well known `encoding` means stdout/stderr are definitely `string`.\\n    function execFile(file: string, options: ExecFileOptionsWithStringEncoding, callback: (error: ExecFileException | null, stdout: string, stderr: string) => void): ChildProcess;\\n    function execFile(\\n        file: string,\\n        args: ReadonlyArray<string> | undefined | null,\\n        options: ExecFileOptionsWithStringEncoding,\\n        callback: (error: ExecFileException | null, stdout: string, stderr: string) => void\\n    ): ChildProcess;\\n    // `options` with an `encoding` whose type is `string` means stdout/stderr could either be `Buffer` or `string`.\\n    // There is no guarantee the `encoding` is unknown as `string` is a superset of `BufferEncoding`.\\n    function execFile(file: string, options: ExecFileOptionsWithOtherEncoding, callback: (error: ExecFileException | null, stdout: string | Buffer, stderr: string | Buffer) => void): ChildProcess;\\n    function execFile(\\n        file: string,\\n        args: ReadonlyArray<string> | undefined | null,\\n        options: ExecFileOptionsWithOtherEncoding,\\n        callback: (error: ExecFileException | null, stdout: string | Buffer, stderr: string | Buffer) => void\\n    ): ChildProcess;\\n    // `options` without an `encoding` means stdout/stderr are definitely `string`.\\n    function execFile(file: string, options: ExecFileOptions, callback: (error: ExecFileException | null, stdout: string, stderr: string) => void): ChildProcess;\\n    function execFile(\\n        file: string,\\n        args: ReadonlyArray<string> | undefined | null,\\n        options: ExecFileOptions,\\n        callback: (error: ExecFileException | null, stdout: string, stderr: string) => void\\n    ): ChildProcess;\\n    // fallback if nothing else matches. Worst case is always `string | Buffer`.\\n    function execFile(\\n        file: string,\\n        options: (ObjectEncodingOptions & ExecFileOptions) | undefined | null,\\n        callback: ((error: ExecFileException | null, stdout: string | Buffer, stderr: string | Buffer) => void) | undefined | null\\n    ): ChildProcess;\\n    function execFile(\\n        file: string,\\n        args: ReadonlyArray<string> | undefined | null,\\n        options: (ObjectEncodingOptions & ExecFileOptions) | undefined | null,\\n        callback: ((error: ExecFileException | null, stdout: string | Buffer, stderr: string | Buffer) => void) | undefined | null\\n    ): ChildProcess;\\n    namespace execFile {\\n        function __promisify__(file: string): PromiseWithChild<{\\n            stdout: string;\\n            stderr: string;\\n        }>;\\n        function __promisify__(\\n            file: string,\\n            args: ReadonlyArray<string> | undefined | null\\n        ): PromiseWithChild<{\\n            stdout: string;\\n            stderr: string;\\n        }>;\\n        function __promisify__(\\n            file: string,\\n            options: ExecFileOptionsWithBufferEncoding\\n        ): PromiseWithChild<{\\n            stdout: Buffer;\\n            stderr: Buffer;\\n        }>;\\n        function __promisify__(\\n            file: string,\\n            args: ReadonlyArray<string> | undefined | null,\\n            options: ExecFileOptionsWithBufferEncoding\\n        ): PromiseWithChild<{\\n            stdout: Buffer;\\n            stderr: Buffer;\\n        }>;\\n        function __promisify__(\\n            file: string,\\n            options: ExecFileOptionsWithStringEncoding\\n        ): PromiseWithChild<{\\n            stdout: string;\\n            stderr: string;\\n        }>;\\n        function __promisify__(\\n            file: string,\\n            args: ReadonlyArray<string> | undefined | null,\\n            options: ExecFileOptionsWithStringEncoding\\n        ): PromiseWithChild<{\\n            stdout: string;\\n            stderr: string;\\n        }>;\\n        function __promisify__(\\n            file: string,\\n            options: ExecFileOptionsWithOtherEncoding\\n        ): PromiseWithChild<{\\n            stdout: string | Buffer;\\n            stderr: string | Buffer;\\n        }>;\\n        function __promisify__(\\n            file: string,\\n            args: ReadonlyArray<string> | undefined | null,\\n            options: ExecFileOptionsWithOtherEncoding\\n        ): PromiseWithChild<{\\n            stdout: string | Buffer;\\n            stderr: string | Buffer;\\n        }>;\\n        function __promisify__(\\n            file: string,\\n            options: ExecFileOptions\\n        ): PromiseWithChild<{\\n            stdout: string;\\n            stderr: string;\\n        }>;\\n        function __promisify__(\\n            file: string,\\n            args: ReadonlyArray<string> | undefined | null,\\n            options: ExecFileOptions\\n        ): PromiseWithChild<{\\n            stdout: string;\\n            stderr: string;\\n        }>;\\n        function __promisify__(\\n            file: string,\\n            options: (ObjectEncodingOptions & ExecFileOptions) | undefined | null\\n        ): PromiseWithChild<{\\n            stdout: string | Buffer;\\n            stderr: string | Buffer;\\n        }>;\\n        function __promisify__(\\n            file: string,\\n            args: ReadonlyArray<string> | undefined | null,\\n            options: (ObjectEncodingOptions & ExecFileOptions) | undefined | null\\n        ): PromiseWithChild<{\\n            stdout: string | Buffer;\\n            stderr: string | Buffer;\\n        }>;\\n    }\\n    interface ForkOptions extends ProcessEnvOptions, MessagingOptions, Abortable {\\n        execPath?: string | undefined;\\n        execArgv?: string[] | undefined;\\n        silent?: boolean | undefined;\\n        /**\\n         * Can be set to 'pipe', 'inherit', 'overlapped', or 'ignore', or an array of these strings.\\n         * If passed as an array, the first element is used for `stdin`, the second for\\n         * `stdout`, and the third for `stderr`. A fourth element can be used to\\n         * specify the `stdio` behavior beyond the standard streams. See\\n         * {@link ChildProcess.stdio} for more information.\\n         *\\n         * @default 'pipe'\\n         */\\n        stdio?: StdioOptions | undefined;\\n        detached?: boolean | undefined;\\n        windowsVerbatimArguments?: boolean | undefined;\\n    }\\n    /**\\n     * The `child_process.fork()` method is a special case of {@link spawn} used specifically to spawn new Node.js processes.\\n     * Like {@link spawn}, a `ChildProcess` object is returned. The\\n     * returned `ChildProcess` will have an additional communication channel\\n     * built-in that allows messages to be passed back and forth between the parent and\\n     * child. See `subprocess.send()` for details.\\n     *\\n     * Keep in mind that spawned Node.js child processes are\\n     * independent of the parent with exception of the IPC communication channel\\n     * that is established between the two. Each process has its own memory, with\\n     * their own V8 instances. Because of the additional resource allocations\\n     * required, spawning a large number of child Node.js processes is not\\n     * recommended.\\n     *\\n     * By default, `child_process.fork()` will spawn new Node.js instances using the `process.execPath` of the parent process. The `execPath` property in the`options` object allows for an alternative\\n     * execution path to be used.\\n     *\\n     * Node.js processes launched with a custom `execPath` will communicate with the\\n     * parent process using the file descriptor (fd) identified using the\\n     * environment variable `NODE_CHANNEL_FD` on the child process.\\n     *\\n     * Unlike the [`fork(2)`](http://man7.org/linux/man-pages/man2/fork.2.html) POSIX system call, `child_process.fork()` does not clone the\\n     * current process.\\n     *\\n     * The `shell` option available in {@link spawn} is not supported by`child_process.fork()` and will be ignored if set.\\n     *\\n     * If the `signal` option is enabled, calling `.abort()` on the corresponding`AbortController` is similar to calling `.kill()` on the child process except\\n     * the error passed to the callback will be an `AbortError`:\\n     *\\n     * ```js\\n     * if (process.argv[2] === 'child') {\\n     *   setTimeout(() => {\\n     *     console.log(`Hello from ${process.argv[2]}!`);\\n     *   }, 1_000);\\n     * } else {\\n     *   const { fork } = require('child_process');\\n     *   const controller = new AbortController();\\n     *   const { signal } = controller;\\n     *   const child = fork(__filename, ['child'], { signal });\\n     *   child.on('error', (err) => {\\n     *     // This will be called with err being an AbortError if the controller aborts\\n     *   });\\n     *   controller.abort(); // Stops the child process\\n     * }\\n     * ```\\n     * @since v0.5.0\\n     * @param modulePath The module to run in the child.\\n     * @param args List of string arguments.\\n     */\\n    function fork(modulePath: string, options?: ForkOptions): ChildProcess;\\n    function fork(modulePath: string, args?: ReadonlyArray<string>, options?: ForkOptions): ChildProcess;\\n    interface SpawnSyncOptions extends CommonSpawnOptions {\\n        input?: string | NodeJS.ArrayBufferView | undefined;\\n        maxBuffer?: number | undefined;\\n        encoding?: BufferEncoding | 'buffer' | null | undefined;\\n    }\\n    interface SpawnSyncOptionsWithStringEncoding extends SpawnSyncOptions {\\n        encoding: BufferEncoding;\\n    }\\n    interface SpawnSyncOptionsWithBufferEncoding extends SpawnSyncOptions {\\n        encoding?: 'buffer' | null | undefined;\\n    }\\n    interface SpawnSyncReturns<T> {\\n        pid: number;\\n        output: Array<T | null>;\\n        stdout: T;\\n        stderr: T;\\n        status: number | null;\\n        signal: NodeJS.Signals | null;\\n        error?: Error | undefined;\\n    }\\n    /**\\n     * The `child_process.spawnSync()` method is generally identical to {@link spawn} with the exception that the function will not return\\n     * until the child process has fully closed. When a timeout has been encountered\\n     * and `killSignal` is sent, the method won't return until the process has\\n     * completely exited. If the process intercepts and handles the `SIGTERM` signal\\n     * and doesn't exit, the parent process will wait until the child process has\\n     * exited.\\n     *\\n     * **If the `shell` option is enabled, do not pass unsanitized user input to this**\\n     * **function. Any input containing shell metacharacters may be used to trigger**\\n     * **arbitrary command execution.**\\n     * @since v0.11.12\\n     * @param command The command to run.\\n     * @param args List of string arguments.\\n     */\\n    function spawnSync(command: string): SpawnSyncReturns<Buffer>;\\n    function spawnSync(command: string, options: SpawnSyncOptionsWithStringEncoding): SpawnSyncReturns<string>;\\n    function spawnSync(command: string, options: SpawnSyncOptionsWithBufferEncoding): SpawnSyncReturns<Buffer>;\\n    function spawnSync(command: string, options?: SpawnSyncOptions): SpawnSyncReturns<string | Buffer>;\\n    function spawnSync(command: string, args: ReadonlyArray<string>): SpawnSyncReturns<Buffer>;\\n    function spawnSync(command: string, args: ReadonlyArray<string>, options: SpawnSyncOptionsWithStringEncoding): SpawnSyncReturns<string>;\\n    function spawnSync(command: string, args: ReadonlyArray<string>, options: SpawnSyncOptionsWithBufferEncoding): SpawnSyncReturns<Buffer>;\\n    function spawnSync(command: string, args?: ReadonlyArray<string>, options?: SpawnSyncOptions): SpawnSyncReturns<string | Buffer>;\\n    interface CommonExecOptions extends CommonOptions {\\n        input?: string | NodeJS.ArrayBufferView | undefined;\\n        /**\\n         * Can be set to 'pipe', 'inherit', 'overlapped', or 'ignore', or an array of these strings.\\n         * If passed as an array, the first element is used for `stdin`, the second for\\n         * `stdout`, and the third for `stderr`. A fourth element can be used to\\n         * specify the `stdio` behavior beyond the standard streams. See\\n         * {@link ChildProcess.stdio} for more information.\\n         *\\n         * @default 'pipe'\\n         */\\n        stdio?: StdioOptions | undefined;\\n        killSignal?: NodeJS.Signals | number | undefined;\\n        maxBuffer?: number | undefined;\\n        encoding?: BufferEncoding | 'buffer' | null | undefined;\\n    }\\n    interface ExecSyncOptions extends CommonExecOptions {\\n        shell?: string | undefined;\\n    }\\n    interface ExecSyncOptionsWithStringEncoding extends ExecSyncOptions {\\n        encoding: BufferEncoding;\\n    }\\n    interface ExecSyncOptionsWithBufferEncoding extends ExecSyncOptions {\\n        encoding?: 'buffer' | null | undefined;\\n    }\\n    /**\\n     * The `child_process.execSync()` method is generally identical to {@link exec} with the exception that the method will not return\\n     * until the child process has fully closed. When a timeout has been encountered\\n     * and `killSignal` is sent, the method won't return until the process has\\n     * completely exited. If the child process intercepts and handles the `SIGTERM`signal and doesn't exit, the parent process will wait until the child process\\n     * has exited.\\n     *\\n     * If the process times out or has a non-zero exit code, this method will throw.\\n     * The `Error` object will contain the entire result from {@link spawnSync}.\\n     *\\n     * **Never pass unsanitized user input to this function. Any input containing shell**\\n     * **metacharacters may be used to trigger arbitrary command execution.**\\n     * @since v0.11.12\\n     * @param command The command to run.\\n     * @return The stdout from the command.\\n     */\\n    function execSync(command: string): Buffer;\\n    function execSync(command: string, options: ExecSyncOptionsWithStringEncoding): string;\\n    function execSync(command: string, options: ExecSyncOptionsWithBufferEncoding): Buffer;\\n    function execSync(command: string, options?: ExecSyncOptions): string | Buffer;\\n    interface ExecFileSyncOptions extends CommonExecOptions {\\n        shell?: boolean | string | undefined;\\n    }\\n    interface ExecFileSyncOptionsWithStringEncoding extends ExecFileSyncOptions {\\n        encoding: BufferEncoding;\\n    }\\n    interface ExecFileSyncOptionsWithBufferEncoding extends ExecFileSyncOptions {\\n        encoding?: 'buffer' | null; // specify `null`.\\n    }\\n    /**\\n     * The `child_process.execFileSync()` method is generally identical to {@link execFile} with the exception that the method will not\\n     * return until the child process has fully closed. When a timeout has been\\n     * encountered and `killSignal` is sent, the method won't return until the process\\n     * has completely exited.\\n     *\\n     * If the child process intercepts and handles the `SIGTERM` signal and\\n     * does not exit, the parent process will still wait until the child process has\\n     * exited.\\n     *\\n     * If the process times out or has a non-zero exit code, this method will throw an `Error` that will include the full result of the underlying {@link spawnSync}.\\n     *\\n     * **If the `shell` option is enabled, do not pass unsanitized user input to this**\\n     * **function. Any input containing shell metacharacters may be used to trigger**\\n     * **arbitrary command execution.**\\n     * @since v0.11.12\\n     * @param file The name or path of the executable file to run.\\n     * @param args List of string arguments.\\n     * @return The stdout from the command.\\n     */\\n    function execFileSync(file: string): Buffer;\\n    function execFileSync(file: string, options: ExecFileSyncOptionsWithStringEncoding): string;\\n    function execFileSync(file: string, options: ExecFileSyncOptionsWithBufferEncoding): Buffer;\\n    function execFileSync(file: string, options?: ExecFileSyncOptions): string | Buffer;\\n    function execFileSync(file: string, args: ReadonlyArray<string>): Buffer;\\n    function execFileSync(file: string, args: ReadonlyArray<string>, options: ExecFileSyncOptionsWithStringEncoding): string;\\n    function execFileSync(file: string, args: ReadonlyArray<string>, options: ExecFileSyncOptionsWithBufferEncoding): Buffer;\\n    function execFileSync(file: string, args?: ReadonlyArray<string>, options?: ExecFileSyncOptions): string | Buffer;\\n}\\ndeclare module 'node:child_process' {\\n    export * from 'child_process';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/cluster.d.ts\":\"/**\\n * Clusters of Node.js processes can be used to run multiple instances of Node.js\\n * that can distribute workloads among their application threads. When process\\n * isolation is not needed, use the `worker_threads` module instead, which\\n * allows running multiple application threads within a single Node.js instance.\\n *\\n * The cluster module allows easy creation of child processes that all share\\n * server ports.\\n *\\n * ```js\\n * import cluster from 'cluster';\\n * import http from 'http';\\n * import { cpus } from 'os';\\n * import process from 'process';\\n *\\n * const numCPUs = cpus().length;\\n *\\n * if (cluster.isPrimary) {\\n *   console.log(`Primary ${process.pid} is running`);\\n *\\n *   // Fork workers.\\n *   for (let i = 0; i < numCPUs; i++) {\\n *     cluster.fork();\\n *   }\\n *\\n *   cluster.on('exit', (worker, code, signal) => {\\n *     console.log(`worker ${worker.process.pid} died`);\\n *   });\\n * } else {\\n *   // Workers can share any TCP connection\\n *   // In this case it is an HTTP server\\n *   http.createServer((req, res) => {\\n *     res.writeHead(200);\\n *     res.end('hello world\\\\n');\\n *   }).listen(8000);\\n *\\n *   console.log(`Worker ${process.pid} started`);\\n * }\\n * ```\\n *\\n * Running Node.js will now share port 8000 between the workers:\\n *\\n * ```console\\n * $ node server.js\\n * Primary 3596 is running\\n * Worker 4324 started\\n * Worker 4520 started\\n * Worker 6056 started\\n * Worker 5644 started\\n * ```\\n *\\n * On Windows, it is not yet possible to set up a named pipe server in a worker.\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/cluster.js)\\n */\\ndeclare module 'cluster' {\\n    import * as child from 'node:child_process';\\n    import EventEmitter = require('node:events');\\n    import * as net from 'node:net';\\n    export interface ClusterSettings {\\n        execArgv?: string[] | undefined; // default: process.execArgv\\n        exec?: string | undefined;\\n        args?: string[] | undefined;\\n        silent?: boolean | undefined;\\n        stdio?: any[] | undefined;\\n        uid?: number | undefined;\\n        gid?: number | undefined;\\n        inspectPort?: number | (() => number) | undefined;\\n    }\\n    export interface Address {\\n        address: string;\\n        port: number;\\n        addressType: number | 'udp4' | 'udp6'; // 4, 6, -1, \\\"udp4\\\", \\\"udp6\\\"\\n    }\\n    /**\\n     * A `Worker` object contains all public information and method about a worker.\\n     * In the primary it can be obtained using `cluster.workers`. In a worker\\n     * it can be obtained using `cluster.worker`.\\n     * @since v0.7.0\\n     */\\n    export class Worker extends EventEmitter {\\n        /**\\n         * Each new worker is given its own unique id, this id is stored in the`id`.\\n         *\\n         * While a worker is alive, this is the key that indexes it in`cluster.workers`.\\n         * @since v0.8.0\\n         */\\n        id: number;\\n        /**\\n         * All workers are created using `child_process.fork()`, the returned object\\n         * from this function is stored as `.process`. In a worker, the global `process`is stored.\\n         *\\n         * See: `Child Process module`.\\n         *\\n         * Workers will call `process.exit(0)` if the `'disconnect'` event occurs\\n         * on `process` and `.exitedAfterDisconnect` is not `true`. This protects against\\n         * accidental disconnection.\\n         * @since v0.7.0\\n         */\\n        process: child.ChildProcess;\\n        /**\\n         * Send a message to a worker or primary, optionally with a handle.\\n         *\\n         * In the primary, this sends a message to a specific worker. It is identical to `ChildProcess.send()`.\\n         *\\n         * In a worker, this sends a message to the primary. It is identical to`process.send()`.\\n         *\\n         * This example will echo back all messages from the primary:\\n         *\\n         * ```js\\n         * if (cluster.isPrimary) {\\n         *   const worker = cluster.fork();\\n         *   worker.send('hi there');\\n         *\\n         * } else if (cluster.isWorker) {\\n         *   process.on('message', (msg) => {\\n         *     process.send(msg);\\n         *   });\\n         * }\\n         * ```\\n         * @since v0.7.0\\n         * @param options The `options` argument, if present, is an object used to parameterize the sending of certain types of handles. `options` supports the following properties:\\n         */\\n        send(message: child.Serializable, callback?: (error: Error | null) => void): boolean;\\n        send(message: child.Serializable, sendHandle: child.SendHandle, callback?: (error: Error | null) => void): boolean;\\n        send(message: child.Serializable, sendHandle: child.SendHandle, options?: child.MessageOptions, callback?: (error: Error | null) => void): boolean;\\n        /**\\n         * This function will kill the worker. In the primary worker, it does this by\\n         * disconnecting the `worker.process`, and once disconnected, killing with`signal`. In the worker, it does it by killing the process with `signal`.\\n         *\\n         * The `kill()` function kills the worker process without waiting for a graceful\\n         * disconnect, it has the same behavior as `worker.process.kill()`.\\n         *\\n         * This method is aliased as `worker.destroy()` for backwards compatibility.\\n         *\\n         * In a worker, `process.kill()` exists, but it is not this function;\\n         * it is `kill()`.\\n         * @since v0.9.12\\n         * @param [signal='SIGTERM'] Name of the kill signal to send to the worker process.\\n         */\\n        kill(signal?: string): void;\\n        destroy(signal?: string): void;\\n        /**\\n         * In a worker, this function will close all servers, wait for the `'close'` event\\n         * on those servers, and then disconnect the IPC channel.\\n         *\\n         * In the primary, an internal message is sent to the worker causing it to call`.disconnect()` on itself.\\n         *\\n         * Causes `.exitedAfterDisconnect` to be set.\\n         *\\n         * After a server is closed, it will no longer accept new connections,\\n         * but connections may be accepted by any other listening worker. Existing\\n         * connections will be allowed to close as usual. When no more connections exist,\\n         * see `server.close()`, the IPC channel to the worker will close allowing it\\n         * to die gracefully.\\n         *\\n         * The above applies _only_ to server connections, client connections are not\\n         * automatically closed by workers, and disconnect does not wait for them to close\\n         * before exiting.\\n         *\\n         * In a worker, `process.disconnect` exists, but it is not this function;\\n         * it is `disconnect()`.\\n         *\\n         * Because long living server connections may block workers from disconnecting, it\\n         * may be useful to send a message, so application specific actions may be taken to\\n         * close them. It also may be useful to implement a timeout, killing a worker if\\n         * the `'disconnect'` event has not been emitted after some time.\\n         *\\n         * ```js\\n         * if (cluster.isPrimary) {\\n         *   const worker = cluster.fork();\\n         *   let timeout;\\n         *\\n         *   worker.on('listening', (address) => {\\n         *     worker.send('shutdown');\\n         *     worker.disconnect();\\n         *     timeout = setTimeout(() => {\\n         *       worker.kill();\\n         *     }, 2000);\\n         *   });\\n         *\\n         *   worker.on('disconnect', () => {\\n         *     clearTimeout(timeout);\\n         *   });\\n         *\\n         * } else if (cluster.isWorker) {\\n         *   const net = require('net');\\n         *   const server = net.createServer((socket) => {\\n         *     // Connections never end\\n         *   });\\n         *\\n         *   server.listen(8000);\\n         *\\n         *   process.on('message', (msg) => {\\n         *     if (msg === 'shutdown') {\\n         *       // Initiate graceful close of any connections to server\\n         *     }\\n         *   });\\n         * }\\n         * ```\\n         * @since v0.7.7\\n         * @return A reference to `worker`.\\n         */\\n        disconnect(): void;\\n        /**\\n         * This function returns `true` if the worker is connected to its primary via its\\n         * IPC channel, `false` otherwise. A worker is connected to its primary after it\\n         * has been created. It is disconnected after the `'disconnect'` event is emitted.\\n         * @since v0.11.14\\n         */\\n        isConnected(): boolean;\\n        /**\\n         * This function returns `true` if the worker's process has terminated (either\\n         * because of exiting or being signaled). Otherwise, it returns `false`.\\n         *\\n         * ```js\\n         * import cluster from 'cluster';\\n         * import http from 'http';\\n         * import { cpus } from 'os';\\n         * import process from 'process';\\n         *\\n         * const numCPUs = cpus().length;\\n         *\\n         * if (cluster.isPrimary) {\\n         *   console.log(`Primary ${process.pid} is running`);\\n         *\\n         *   // Fork workers.\\n         *   for (let i = 0; i < numCPUs; i++) {\\n         *     cluster.fork();\\n         *   }\\n         *\\n         *   cluster.on('fork', (worker) => {\\n         *     console.log('worker is dead:', worker.isDead());\\n         *   });\\n         *\\n         *   cluster.on('exit', (worker, code, signal) => {\\n         *     console.log('worker is dead:', worker.isDead());\\n         *   });\\n         * } else {\\n         *   // Workers can share any TCP connection. In this case, it is an HTTP server.\\n         *   http.createServer((req, res) => {\\n         *     res.writeHead(200);\\n         *     res.end(`Current process\\\\n ${process.pid}`);\\n         *     process.kill(process.pid);\\n         *   }).listen(8000);\\n         * }\\n         * ```\\n         * @since v0.11.14\\n         */\\n        isDead(): boolean;\\n        /**\\n         * This property is `true` if the worker exited due to `.disconnect()`.\\n         * If the worker exited any other way, it is `false`. If the\\n         * worker has not exited, it is `undefined`.\\n         *\\n         * The boolean `worker.exitedAfterDisconnect` allows distinguishing between\\n         * voluntary and accidental exit, the primary may choose not to respawn a worker\\n         * based on this value.\\n         *\\n         * ```js\\n         * cluster.on('exit', (worker, code, signal) => {\\n         *   if (worker.exitedAfterDisconnect === true) {\\n         *     console.log('Oh, it was just voluntary \u2013 no need to worry');\\n         *   }\\n         * });\\n         *\\n         * // kill worker\\n         * worker.kill();\\n         * ```\\n         * @since v6.0.0\\n         */\\n        exitedAfterDisconnect: boolean;\\n        /**\\n         * events.EventEmitter\\n         *   1. disconnect\\n         *   2. error\\n         *   3. exit\\n         *   4. listening\\n         *   5. message\\n         *   6. online\\n         */\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        addListener(event: 'disconnect', listener: () => void): this;\\n        addListener(event: 'error', listener: (error: Error) => void): this;\\n        addListener(event: 'exit', listener: (code: number, signal: string) => void): this;\\n        addListener(event: 'listening', listener: (address: Address) => void): this;\\n        addListener(event: 'message', listener: (message: any, handle: net.Socket | net.Server) => void): this; // the handle is a net.Socket or net.Server object, or undefined.\\n        addListener(event: 'online', listener: () => void): this;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        emit(event: 'disconnect'): boolean;\\n        emit(event: 'error', error: Error): boolean;\\n        emit(event: 'exit', code: number, signal: string): boolean;\\n        emit(event: 'listening', address: Address): boolean;\\n        emit(event: 'message', message: any, handle: net.Socket | net.Server): boolean;\\n        emit(event: 'online'): boolean;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        on(event: 'disconnect', listener: () => void): this;\\n        on(event: 'error', listener: (error: Error) => void): this;\\n        on(event: 'exit', listener: (code: number, signal: string) => void): this;\\n        on(event: 'listening', listener: (address: Address) => void): this;\\n        on(event: 'message', listener: (message: any, handle: net.Socket | net.Server) => void): this; // the handle is a net.Socket or net.Server object, or undefined.\\n        on(event: 'online', listener: () => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        once(event: 'disconnect', listener: () => void): this;\\n        once(event: 'error', listener: (error: Error) => void): this;\\n        once(event: 'exit', listener: (code: number, signal: string) => void): this;\\n        once(event: 'listening', listener: (address: Address) => void): this;\\n        once(event: 'message', listener: (message: any, handle: net.Socket | net.Server) => void): this; // the handle is a net.Socket or net.Server object, or undefined.\\n        once(event: 'online', listener: () => void): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'disconnect', listener: () => void): this;\\n        prependListener(event: 'error', listener: (error: Error) => void): this;\\n        prependListener(event: 'exit', listener: (code: number, signal: string) => void): this;\\n        prependListener(event: 'listening', listener: (address: Address) => void): this;\\n        prependListener(event: 'message', listener: (message: any, handle: net.Socket | net.Server) => void): this; // the handle is a net.Socket or net.Server object, or undefined.\\n        prependListener(event: 'online', listener: () => void): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'disconnect', listener: () => void): this;\\n        prependOnceListener(event: 'error', listener: (error: Error) => void): this;\\n        prependOnceListener(event: 'exit', listener: (code: number, signal: string) => void): this;\\n        prependOnceListener(event: 'listening', listener: (address: Address) => void): this;\\n        prependOnceListener(event: 'message', listener: (message: any, handle: net.Socket | net.Server) => void): this; // the handle is a net.Socket or net.Server object, or undefined.\\n        prependOnceListener(event: 'online', listener: () => void): this;\\n    }\\n    export interface Cluster extends EventEmitter {\\n        disconnect(callback?: () => void): void;\\n        fork(env?: any): Worker;\\n        /** @deprecated since v16.0.0 - use isPrimary. */\\n        readonly isMaster: boolean;\\n        readonly isPrimary: boolean;\\n        readonly isWorker: boolean;\\n        schedulingPolicy: number;\\n        readonly settings: ClusterSettings;\\n        /** @deprecated since v16.0.0 - use setupPrimary. */\\n        setupMaster(settings?: ClusterSettings): void;\\n        /**\\n         * `setupPrimary` is used to change the default 'fork' behavior. Once called, the settings will be present in cluster.settings.\\n         */\\n        setupPrimary(settings?: ClusterSettings): void;\\n        readonly worker?: Worker | undefined;\\n        readonly workers?: NodeJS.Dict<Worker> | undefined;\\n        readonly SCHED_NONE: number;\\n        readonly SCHED_RR: number;\\n        /**\\n         * events.EventEmitter\\n         *   1. disconnect\\n         *   2. exit\\n         *   3. fork\\n         *   4. listening\\n         *   5. message\\n         *   6. online\\n         *   7. setup\\n         */\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        addListener(event: 'disconnect', listener: (worker: Worker) => void): this;\\n        addListener(event: 'exit', listener: (worker: Worker, code: number, signal: string) => void): this;\\n        addListener(event: 'fork', listener: (worker: Worker) => void): this;\\n        addListener(event: 'listening', listener: (worker: Worker, address: Address) => void): this;\\n        addListener(event: 'message', listener: (worker: Worker, message: any, handle: net.Socket | net.Server) => void): this; // the handle is a net.Socket or net.Server object, or undefined.\\n        addListener(event: 'online', listener: (worker: Worker) => void): this;\\n        addListener(event: 'setup', listener: (settings: ClusterSettings) => void): this;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        emit(event: 'disconnect', worker: Worker): boolean;\\n        emit(event: 'exit', worker: Worker, code: number, signal: string): boolean;\\n        emit(event: 'fork', worker: Worker): boolean;\\n        emit(event: 'listening', worker: Worker, address: Address): boolean;\\n        emit(event: 'message', worker: Worker, message: any, handle: net.Socket | net.Server): boolean;\\n        emit(event: 'online', worker: Worker): boolean;\\n        emit(event: 'setup', settings: ClusterSettings): boolean;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        on(event: 'disconnect', listener: (worker: Worker) => void): this;\\n        on(event: 'exit', listener: (worker: Worker, code: number, signal: string) => void): this;\\n        on(event: 'fork', listener: (worker: Worker) => void): this;\\n        on(event: 'listening', listener: (worker: Worker, address: Address) => void): this;\\n        on(event: 'message', listener: (worker: Worker, message: any, handle: net.Socket | net.Server) => void): this; // the handle is a net.Socket or net.Server object, or undefined.\\n        on(event: 'online', listener: (worker: Worker) => void): this;\\n        on(event: 'setup', listener: (settings: ClusterSettings) => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        once(event: 'disconnect', listener: (worker: Worker) => void): this;\\n        once(event: 'exit', listener: (worker: Worker, code: number, signal: string) => void): this;\\n        once(event: 'fork', listener: (worker: Worker) => void): this;\\n        once(event: 'listening', listener: (worker: Worker, address: Address) => void): this;\\n        once(event: 'message', listener: (worker: Worker, message: any, handle: net.Socket | net.Server) => void): this; // the handle is a net.Socket or net.Server object, or undefined.\\n        once(event: 'online', listener: (worker: Worker) => void): this;\\n        once(event: 'setup', listener: (settings: ClusterSettings) => void): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'disconnect', listener: (worker: Worker) => void): this;\\n        prependListener(event: 'exit', listener: (worker: Worker, code: number, signal: string) => void): this;\\n        prependListener(event: 'fork', listener: (worker: Worker) => void): this;\\n        prependListener(event: 'listening', listener: (worker: Worker, address: Address) => void): this;\\n        // the handle is a net.Socket or net.Server object, or undefined.\\n        prependListener(event: 'message', listener: (worker: Worker, message: any, handle?: net.Socket | net.Server) => void): this;\\n        prependListener(event: 'online', listener: (worker: Worker) => void): this;\\n        prependListener(event: 'setup', listener: (settings: ClusterSettings) => void): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'disconnect', listener: (worker: Worker) => void): this;\\n        prependOnceListener(event: 'exit', listener: (worker: Worker, code: number, signal: string) => void): this;\\n        prependOnceListener(event: 'fork', listener: (worker: Worker) => void): this;\\n        prependOnceListener(event: 'listening', listener: (worker: Worker, address: Address) => void): this;\\n        // the handle is a net.Socket or net.Server object, or undefined.\\n        prependOnceListener(event: 'message', listener: (worker: Worker, message: any, handle: net.Socket | net.Server) => void): this;\\n        prependOnceListener(event: 'online', listener: (worker: Worker) => void): this;\\n        prependOnceListener(event: 'setup', listener: (settings: ClusterSettings) => void): this;\\n    }\\n    const cluster: Cluster;\\n    export default cluster;\\n}\\ndeclare module 'node:cluster' {\\n    export * from 'cluster';\\n    export { default as default } from 'cluster';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/console.d.ts\":\"/**\\n * The `console` module provides a simple debugging console that is similar to the\\n * JavaScript console mechanism provided by web browsers.\\n *\\n * The module exports two specific components:\\n *\\n * * A `Console` class with methods such as `console.log()`, `console.error()` and`console.warn()` that can be used to write to any Node.js stream.\\n * * A global `console` instance configured to write to `process.stdout` and `process.stderr`. The global `console` can be used without calling`require('console')`.\\n *\\n * _**Warning**_: The global console object's methods are neither consistently\\n * synchronous like the browser APIs they resemble, nor are they consistently\\n * asynchronous like all other Node.js streams. See the `note on process I/O` for\\n * more information.\\n *\\n * Example using the global `console`:\\n *\\n * ```js\\n * console.log('hello world');\\n * // Prints: hello world, to stdout\\n * console.log('hello %s', 'world');\\n * // Prints: hello world, to stdout\\n * console.error(new Error('Whoops, something bad happened'));\\n * // Prints error message and stack trace to stderr:\\n * //   Error: Whoops, something bad happened\\n * //     at [eval]:5:15\\n * //     at Script.runInThisContext (node:vm:132:18)\\n * //     at Object.runInThisContext (node:vm:309:38)\\n * //     at node:internal/process/execution:77:19\\n * //     at [eval]-wrapper:6:22\\n * //     at evalScript (node:internal/process/execution:76:60)\\n * //     at node:internal/main/eval_string:23:3\\n *\\n * const name = 'Will Robinson';\\n * console.warn(`Danger ${name}! Danger!`);\\n * // Prints: Danger Will Robinson! Danger!, to stderr\\n * ```\\n *\\n * Example using the `Console` class:\\n *\\n * ```js\\n * const out = getStreamSomehow();\\n * const err = getStreamSomehow();\\n * const myConsole = new console.Console(out, err);\\n *\\n * myConsole.log('hello world');\\n * // Prints: hello world, to out\\n * myConsole.log('hello %s', 'world');\\n * // Prints: hello world, to out\\n * myConsole.error(new Error('Whoops, something bad happened'));\\n * // Prints: [Error: Whoops, something bad happened], to err\\n *\\n * const name = 'Will Robinson';\\n * myConsole.warn(`Danger ${name}! Danger!`);\\n * // Prints: Danger Will Robinson! Danger!, to err\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/console.js)\\n */\\ndeclare module 'console' {\\n    import console = require('node:console');\\n    export = console;\\n}\\ndeclare module 'node:console' {\\n    import { InspectOptions } from 'node:util';\\n    global {\\n        // This needs to be global to avoid TS2403 in case lib.dom.d.ts is present in the same build\\n        interface Console {\\n            Console: console.ConsoleConstructor;\\n            /**\\n             * `console.assert()` writes a message if `value` is [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) or omitted. It only\\n             * writes a message and does not otherwise affect execution. The output always\\n             * starts with `\\\"Assertion failed\\\"`. If provided, `message` is formatted using `util.format()`.\\n             *\\n             * If `value` is [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy), nothing happens.\\n             *\\n             * ```js\\n             * console.assert(true, 'does nothing');\\n             *\\n             * console.assert(false, 'Whoops %s work', 'didn\\\\'t');\\n             * // Assertion failed: Whoops didn't work\\n             *\\n             * console.assert();\\n             * // Assertion failed\\n             * ```\\n             * @since v0.1.101\\n             * @param value The value tested for being truthy.\\n             * @param message All arguments besides `value` are used as error message.\\n             */\\n            assert(value: any, message?: string, ...optionalParams: any[]): void;\\n            /**\\n             * When `stdout` is a TTY, calling `console.clear()` will attempt to clear the\\n             * TTY. When `stdout` is not a TTY, this method does nothing.\\n             *\\n             * The specific operation of `console.clear()` can vary across operating systems\\n             * and terminal types. For most Linux operating systems, `console.clear()`operates similarly to the `clear` shell command. On Windows, `console.clear()`will clear only the output in the\\n             * current terminal viewport for the Node.js\\n             * binary.\\n             * @since v8.3.0\\n             */\\n            clear(): void;\\n            /**\\n             * Maintains an internal counter specific to `label` and outputs to `stdout` the\\n             * number of times `console.count()` has been called with the given `label`.\\n             *\\n             * ```js\\n             * > console.count()\\n             * default: 1\\n             * undefined\\n             * > console.count('default')\\n             * default: 2\\n             * undefined\\n             * > console.count('abc')\\n             * abc: 1\\n             * undefined\\n             * > console.count('xyz')\\n             * xyz: 1\\n             * undefined\\n             * > console.count('abc')\\n             * abc: 2\\n             * undefined\\n             * > console.count()\\n             * default: 3\\n             * undefined\\n             * >\\n             * ```\\n             * @since v8.3.0\\n             * @param label The display label for the counter.\\n             */\\n            count(label?: string): void;\\n            /**\\n             * Resets the internal counter specific to `label`.\\n             *\\n             * ```js\\n             * > console.count('abc');\\n             * abc: 1\\n             * undefined\\n             * > console.countReset('abc');\\n             * undefined\\n             * > console.count('abc');\\n             * abc: 1\\n             * undefined\\n             * >\\n             * ```\\n             * @since v8.3.0\\n             * @param label The display label for the counter.\\n             */\\n            countReset(label?: string): void;\\n            /**\\n             * The `console.debug()` function is an alias for {@link log}.\\n             * @since v8.0.0\\n             */\\n            debug(message?: any, ...optionalParams: any[]): void;\\n            /**\\n             * Uses `util.inspect()` on `obj` and prints the resulting string to `stdout`.\\n             * This function bypasses any custom `inspect()` function defined on `obj`.\\n             * @since v0.1.101\\n             */\\n            dir(obj: any, options?: InspectOptions): void;\\n            /**\\n             * This method calls `console.log()` passing it the arguments received.\\n             * This method does not produce any XML formatting.\\n             * @since v8.0.0\\n             */\\n            dirxml(...data: any[]): void;\\n            /**\\n             * Prints to `stderr` with newline. Multiple arguments can be passed, with the\\n             * first used as the primary message and all additional used as substitution\\n             * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n             *\\n             * ```js\\n             * const code = 5;\\n             * console.error('error #%d', code);\\n             * // Prints: error #5, to stderr\\n             * console.error('error', code);\\n             * // Prints: error 5, to stderr\\n             * ```\\n             *\\n             * If formatting elements (e.g. `%d`) are not found in the first string then `util.inspect()` is called on each argument and the resulting string\\n             * values are concatenated. See `util.format()` for more information.\\n             * @since v0.1.100\\n             */\\n            error(message?: any, ...optionalParams: any[]): void;\\n            /**\\n             * Increases indentation of subsequent lines by spaces for `groupIndentation`length.\\n             *\\n             * If one or more `label`s are provided, those are printed first without the\\n             * additional indentation.\\n             * @since v8.5.0\\n             */\\n            group(...label: any[]): void;\\n            /**\\n             * An alias for {@link group}.\\n             * @since v8.5.0\\n             */\\n            groupCollapsed(...label: any[]): void;\\n            /**\\n             * Decreases indentation of subsequent lines by spaces for `groupIndentation`length.\\n             * @since v8.5.0\\n             */\\n            groupEnd(): void;\\n            /**\\n             * The `console.info()` function is an alias for {@link log}.\\n             * @since v0.1.100\\n             */\\n            info(message?: any, ...optionalParams: any[]): void;\\n            /**\\n             * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n             * first used as the primary message and all additional used as substitution\\n             * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n             *\\n             * ```js\\n             * const count = 5;\\n             * console.log('count: %d', count);\\n             * // Prints: count: 5, to stdout\\n             * console.log('count:', count);\\n             * // Prints: count: 5, to stdout\\n             * ```\\n             *\\n             * See `util.format()` for more information.\\n             * @since v0.1.100\\n             */\\n            log(message?: any, ...optionalParams: any[]): void;\\n            /**\\n             * Try to construct a table with the columns of the properties of `tabularData`(or use `properties`) and rows of `tabularData` and log it. Falls back to just\\n             * logging the argument if it can\u2019t be parsed as tabular.\\n             *\\n             * ```js\\n             * // These can't be parsed as tabular data\\n             * console.table(Symbol());\\n             * // Symbol()\\n             *\\n             * console.table(undefined);\\n             * // undefined\\n             *\\n             * console.table([{ a: 1, b: 'Y' }, { a: 'Z', b: 2 }]);\\n             * // \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\\n             * // \u2502 (index) \u2502  a  \u2502  b  \u2502\\n             * // \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\\n             * // \u2502    0    \u2502  1  \u2502 'Y' \u2502\\n             * // \u2502    1    \u2502 'Z' \u2502  2  \u2502\\n             * // \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\\n             *\\n             * console.table([{ a: 1, b: 'Y' }, { a: 'Z', b: 2 }], ['a']);\\n             * // \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\\n             * // \u2502 (index) \u2502  a  \u2502\\n             * // \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\\n             * // \u2502    0    \u2502  1  \u2502\\n             * // \u2502    1    \u2502 'Z' \u2502\\n             * // \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\\n             * ```\\n             * @since v10.0.0\\n             * @param properties Alternate properties for constructing the table.\\n             */\\n            table(tabularData: any, properties?: ReadonlyArray<string>): void;\\n            /**\\n             * Starts a timer that can be used to compute the duration of an operation. Timers\\n             * are identified by a unique `label`. Use the same `label` when calling {@link timeEnd} to stop the timer and output the elapsed time in\\n             * suitable time units to `stdout`. For example, if the elapsed\\n             * time is 3869ms, `console.timeEnd()` displays \\\"3.869s\\\".\\n             * @since v0.1.104\\n             */\\n            time(label?: string): void;\\n            /**\\n             * Stops a timer that was previously started by calling {@link time} and\\n             * prints the result to `stdout`:\\n             *\\n             * ```js\\n             * console.time('100-elements');\\n             * for (let i = 0; i < 100; i++) {}\\n             * console.timeEnd('100-elements');\\n             * // prints 100-elements: 225.438ms\\n             * ```\\n             * @since v0.1.104\\n             */\\n            timeEnd(label?: string): void;\\n            /**\\n             * For a timer that was previously started by calling {@link time}, prints\\n             * the elapsed time and other `data` arguments to `stdout`:\\n             *\\n             * ```js\\n             * console.time('process');\\n             * const value = expensiveProcess1(); // Returns 42\\n             * console.timeLog('process', value);\\n             * // Prints \\\"process: 365.227ms 42\\\".\\n             * doExpensiveProcess2(value);\\n             * console.timeEnd('process');\\n             * ```\\n             * @since v10.7.0\\n             */\\n            timeLog(label?: string, ...data: any[]): void;\\n            /**\\n             * Prints to `stderr` the string `'Trace: '`, followed by the `util.format()` formatted message and stack trace to the current position in the code.\\n             *\\n             * ```js\\n             * console.trace('Show me');\\n             * // Prints: (stack trace will vary based on where trace is called)\\n             * //  Trace: Show me\\n             * //    at repl:2:9\\n             * //    at REPLServer.defaultEval (repl.js:248:27)\\n             * //    at bound (domain.js:287:14)\\n             * //    at REPLServer.runBound [as eval] (domain.js:300:12)\\n             * //    at REPLServer.<anonymous> (repl.js:412:12)\\n             * //    at emitOne (events.js:82:20)\\n             * //    at REPLServer.emit (events.js:169:7)\\n             * //    at REPLServer.Interface._onLine (readline.js:210:10)\\n             * //    at REPLServer.Interface._line (readline.js:549:8)\\n             * //    at REPLServer.Interface._ttyWrite (readline.js:826:14)\\n             * ```\\n             * @since v0.1.104\\n             */\\n            trace(message?: any, ...optionalParams: any[]): void;\\n            /**\\n             * The `console.warn()` function is an alias for {@link error}.\\n             * @since v0.1.100\\n             */\\n            warn(message?: any, ...optionalParams: any[]): void;\\n            // --- Inspector mode only ---\\n            /**\\n             * This method does not display anything unless used in the inspector.\\n             *  Starts a JavaScript CPU profile with an optional label.\\n             */\\n            profile(label?: string): void;\\n            /**\\n             * This method does not display anything unless used in the inspector.\\n             *  Stops the current JavaScript CPU profiling session if one has been started and prints the report to the Profiles panel of the inspector.\\n             */\\n            profileEnd(label?: string): void;\\n            /**\\n             * This method does not display anything unless used in the inspector.\\n             *  Adds an event with the label `label` to the Timeline panel of the inspector.\\n             */\\n            timeStamp(label?: string): void;\\n        }\\n        /**\\n         * The `console` module provides a simple debugging console that is similar to the\\n         * JavaScript console mechanism provided by web browsers.\\n         *\\n         * The module exports two specific components:\\n         *\\n         * * A `Console` class with methods such as `console.log()`, `console.error()` and`console.warn()` that can be used to write to any Node.js stream.\\n         * * A global `console` instance configured to write to `process.stdout` and `process.stderr`. The global `console` can be used without calling`require('console')`.\\n         *\\n         * _**Warning**_: The global console object's methods are neither consistently\\n         * synchronous like the browser APIs they resemble, nor are they consistently\\n         * asynchronous like all other Node.js streams. See the `note on process I/O` for\\n         * more information.\\n         *\\n         * Example using the global `console`:\\n         *\\n         * ```js\\n         * console.log('hello world');\\n         * // Prints: hello world, to stdout\\n         * console.log('hello %s', 'world');\\n         * // Prints: hello world, to stdout\\n         * console.error(new Error('Whoops, something bad happened'));\\n         * // Prints error message and stack trace to stderr:\\n         * //   Error: Whoops, something bad happened\\n         * //     at [eval]:5:15\\n         * //     at Script.runInThisContext (node:vm:132:18)\\n         * //     at Object.runInThisContext (node:vm:309:38)\\n         * //     at node:internal/process/execution:77:19\\n         * //     at [eval]-wrapper:6:22\\n         * //     at evalScript (node:internal/process/execution:76:60)\\n         * //     at node:internal/main/eval_string:23:3\\n         *\\n         * const name = 'Will Robinson';\\n         * console.warn(`Danger ${name}! Danger!`);\\n         * // Prints: Danger Will Robinson! Danger!, to stderr\\n         * ```\\n         *\\n         * Example using the `Console` class:\\n         *\\n         * ```js\\n         * const out = getStreamSomehow();\\n         * const err = getStreamSomehow();\\n         * const myConsole = new console.Console(out, err);\\n         *\\n         * myConsole.log('hello world');\\n         * // Prints: hello world, to out\\n         * myConsole.log('hello %s', 'world');\\n         * // Prints: hello world, to out\\n         * myConsole.error(new Error('Whoops, something bad happened'));\\n         * // Prints: [Error: Whoops, something bad happened], to err\\n         *\\n         * const name = 'Will Robinson';\\n         * myConsole.warn(`Danger ${name}! Danger!`);\\n         * // Prints: Danger Will Robinson! Danger!, to err\\n         * ```\\n         * @see [source](https://github.com/nodejs/node/blob/v16.4.2/lib/console.js)\\n         */\\n        namespace console {\\n            interface ConsoleConstructorOptions {\\n                stdout: NodeJS.WritableStream;\\n                stderr?: NodeJS.WritableStream | undefined;\\n                ignoreErrors?: boolean | undefined;\\n                colorMode?: boolean | 'auto' | undefined;\\n                inspectOptions?: InspectOptions | undefined;\\n                /**\\n                 * Set group indentation\\n                 * @default 2\\n                 */\\n                groupIndentation?: number | undefined;\\n            }\\n            interface ConsoleConstructor {\\n                prototype: Console;\\n                new (stdout: NodeJS.WritableStream, stderr?: NodeJS.WritableStream, ignoreErrors?: boolean): Console;\\n                new (options: ConsoleConstructorOptions): Console;\\n            }\\n        }\\n        var console: Console;\\n    }\\n    export = globalThis.console;\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/constants.d.ts\":\"/** @deprecated since v6.3.0 - use constants property exposed by the relevant module instead. */\\ndeclare module 'constants' {\\n    import { constants as osConstants, SignalConstants } from 'node:os';\\n    import { constants as cryptoConstants } from 'node:crypto';\\n    import { constants as fsConstants } from 'node:fs';\\n\\n    const exp: typeof osConstants.errno &\\n        typeof osConstants.priority &\\n        SignalConstants &\\n        typeof cryptoConstants &\\n        typeof fsConstants;\\n    export = exp;\\n}\\n\\ndeclare module 'node:constants' {\\n    import constants = require('constants');\\n    export = constants;\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/crypto.d.ts\":\"/**\\n * The `crypto` module provides cryptographic functionality that includes a set of\\n * wrappers for OpenSSL's hash, HMAC, cipher, decipher, sign, and verify functions.\\n *\\n * ```js\\n * const { createHmac } = await import('crypto');\\n *\\n * const secret = 'abcdefg';\\n * const hash = createHmac('sha256', secret)\\n *                .update('I love cupcakes')\\n *                .digest('hex');\\n * console.log(hash);\\n * // Prints:\\n * //   c0fa1bc00531bd78ef38c628449c5102aeabd49b5dc3a2a516ea6ea959d6658e\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/crypto.js)\\n */\\ndeclare module 'crypto' {\\n    import * as stream from 'node:stream';\\n    import { PeerCertificate } from 'node:tls';\\n    /**\\n     * SPKAC is a Certificate Signing Request mechanism originally implemented by\\n     * Netscape and was specified formally as part of [HTML5's `keygen` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/keygen).\\n     *\\n     * `<keygen>` is deprecated since [HTML 5.2](https://www.w3.org/TR/html52/changes.html#features-removed) and new projects\\n     * should not use this element anymore.\\n     *\\n     * The `crypto` module provides the `Certificate` class for working with SPKAC\\n     * data. The most common usage is handling output generated by the HTML5`<keygen>` element. Node.js uses [OpenSSL's SPKAC\\n     * implementation](https://www.openssl.org/docs/man1.1.0/apps/openssl-spkac.html) internally.\\n     * @since v0.11.8\\n     */\\n    class Certificate {\\n        /**\\n         * ```js\\n         * const { Certificate } = await import('crypto');\\n         * const spkac = getSpkacSomehow();\\n         * const challenge = Certificate.exportChallenge(spkac);\\n         * console.log(challenge.toString('utf8'));\\n         * // Prints: the challenge as a UTF8 string\\n         * ```\\n         * @since v9.0.0\\n         * @param encoding The `encoding` of the `spkac` string.\\n         * @return The challenge component of the `spkac` data structure, which includes a public key and a challenge.\\n         */\\n        static exportChallenge(spkac: BinaryLike): Buffer;\\n        /**\\n         * ```js\\n         * const { Certificate } = await import('crypto');\\n         * const spkac = getSpkacSomehow();\\n         * const publicKey = Certificate.exportPublicKey(spkac);\\n         * console.log(publicKey);\\n         * // Prints: the public key as <Buffer ...>\\n         * ```\\n         * @since v9.0.0\\n         * @param encoding The `encoding` of the `spkac` string.\\n         * @return The public key component of the `spkac` data structure, which includes a public key and a challenge.\\n         */\\n        static exportPublicKey(spkac: BinaryLike, encoding?: string): Buffer;\\n        /**\\n         * ```js\\n         * import { Buffer } from 'buffer';\\n         * const { Certificate } = await import('crypto');\\n         *\\n         * const spkac = getSpkacSomehow();\\n         * console.log(Certificate.verifySpkac(Buffer.from(spkac)));\\n         * // Prints: true or false\\n         * ```\\n         * @since v9.0.0\\n         * @param encoding The `encoding` of the `spkac` string.\\n         * @return `true` if the given `spkac` data structure is valid, `false` otherwise.\\n         */\\n        static verifySpkac(spkac: NodeJS.ArrayBufferView): boolean;\\n        /**\\n         * @deprecated\\n         * @param spkac\\n         * @returns The challenge component of the `spkac` data structure,\\n         * which includes a public key and a challenge.\\n         */\\n        exportChallenge(spkac: BinaryLike): Buffer;\\n        /**\\n         * @deprecated\\n         * @param spkac\\n         * @param encoding The encoding of the spkac string.\\n         * @returns The public key component of the `spkac` data structure,\\n         * which includes a public key and a challenge.\\n         */\\n        exportPublicKey(spkac: BinaryLike, encoding?: string): Buffer;\\n        /**\\n         * @deprecated\\n         * @param spkac\\n         * @returns `true` if the given `spkac` data structure is valid,\\n         * `false` otherwise.\\n         */\\n        verifySpkac(spkac: NodeJS.ArrayBufferView): boolean;\\n    }\\n    namespace constants {\\n        // https://nodejs.org/dist/latest-v10.x/docs/api/crypto.html#crypto_crypto_constants\\n        const OPENSSL_VERSION_NUMBER: number;\\n        /** Applies multiple bug workarounds within OpenSSL. See https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html for detail. */\\n        const SSL_OP_ALL: number;\\n        /** Allows legacy insecure renegotiation between OpenSSL and unpatched clients or servers. See https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html. */\\n        const SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION: number;\\n        /** Attempts to use the server's preferences instead of the client's when selecting a cipher. See https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html. */\\n        const SSL_OP_CIPHER_SERVER_PREFERENCE: number;\\n        /** Instructs OpenSSL to use Cisco's \\\"speshul\\\" version of DTLS_BAD_VER. */\\n        const SSL_OP_CISCO_ANYCONNECT: number;\\n        /** Instructs OpenSSL to turn on cookie exchange. */\\n        const SSL_OP_COOKIE_EXCHANGE: number;\\n        /** Instructs OpenSSL to add server-hello extension from an early version of the cryptopro draft. */\\n        const SSL_OP_CRYPTOPRO_TLSEXT_BUG: number;\\n        /** Instructs OpenSSL to disable a SSL 3.0/TLS 1.0 vulnerability workaround added in OpenSSL 0.9.6d. */\\n        const SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS: number;\\n        /** Instructs OpenSSL to always use the tmp_rsa key when performing RSA operations. */\\n        const SSL_OP_EPHEMERAL_RSA: number;\\n        /** Allows initial connection to servers that do not support RI. */\\n        const SSL_OP_LEGACY_SERVER_CONNECT: number;\\n        const SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER: number;\\n        const SSL_OP_MICROSOFT_SESS_ID_BUG: number;\\n        /** Instructs OpenSSL to disable the workaround for a man-in-the-middle protocol-version vulnerability in the SSL 2.0 server implementation. */\\n        const SSL_OP_MSIE_SSLV2_RSA_PADDING: number;\\n        const SSL_OP_NETSCAPE_CA_DN_BUG: number;\\n        const SSL_OP_NETSCAPE_CHALLENGE_BUG: number;\\n        const SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG: number;\\n        const SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG: number;\\n        /** Instructs OpenSSL to disable support for SSL/TLS compression. */\\n        const SSL_OP_NO_COMPRESSION: number;\\n        const SSL_OP_NO_QUERY_MTU: number;\\n        /** Instructs OpenSSL to always start a new session when performing renegotiation. */\\n        const SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION: number;\\n        const SSL_OP_NO_SSLv2: number;\\n        const SSL_OP_NO_SSLv3: number;\\n        const SSL_OP_NO_TICKET: number;\\n        const SSL_OP_NO_TLSv1: number;\\n        const SSL_OP_NO_TLSv1_1: number;\\n        const SSL_OP_NO_TLSv1_2: number;\\n        const SSL_OP_PKCS1_CHECK_1: number;\\n        const SSL_OP_PKCS1_CHECK_2: number;\\n        /** Instructs OpenSSL to always create a new key when using temporary/ephemeral DH parameters. */\\n        const SSL_OP_SINGLE_DH_USE: number;\\n        /** Instructs OpenSSL to always create a new key when using temporary/ephemeral ECDH parameters. */\\n        const SSL_OP_SINGLE_ECDH_USE: number;\\n        const SSL_OP_SSLEAY_080_CLIENT_DH_BUG: number;\\n        const SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG: number;\\n        const SSL_OP_TLS_BLOCK_PADDING_BUG: number;\\n        const SSL_OP_TLS_D5_BUG: number;\\n        /** Instructs OpenSSL to disable version rollback attack detection. */\\n        const SSL_OP_TLS_ROLLBACK_BUG: number;\\n        const ENGINE_METHOD_RSA: number;\\n        const ENGINE_METHOD_DSA: number;\\n        const ENGINE_METHOD_DH: number;\\n        const ENGINE_METHOD_RAND: number;\\n        const ENGINE_METHOD_EC: number;\\n        const ENGINE_METHOD_CIPHERS: number;\\n        const ENGINE_METHOD_DIGESTS: number;\\n        const ENGINE_METHOD_PKEY_METHS: number;\\n        const ENGINE_METHOD_PKEY_ASN1_METHS: number;\\n        const ENGINE_METHOD_ALL: number;\\n        const ENGINE_METHOD_NONE: number;\\n        const DH_CHECK_P_NOT_SAFE_PRIME: number;\\n        const DH_CHECK_P_NOT_PRIME: number;\\n        const DH_UNABLE_TO_CHECK_GENERATOR: number;\\n        const DH_NOT_SUITABLE_GENERATOR: number;\\n        const ALPN_ENABLED: number;\\n        const RSA_PKCS1_PADDING: number;\\n        const RSA_SSLV23_PADDING: number;\\n        const RSA_NO_PADDING: number;\\n        const RSA_PKCS1_OAEP_PADDING: number;\\n        const RSA_X931_PADDING: number;\\n        const RSA_PKCS1_PSS_PADDING: number;\\n        /** Sets the salt length for RSA_PKCS1_PSS_PADDING to the digest size when signing or verifying. */\\n        const RSA_PSS_SALTLEN_DIGEST: number;\\n        /** Sets the salt length for RSA_PKCS1_PSS_PADDING to the maximum permissible value when signing data. */\\n        const RSA_PSS_SALTLEN_MAX_SIGN: number;\\n        /** Causes the salt length for RSA_PKCS1_PSS_PADDING to be determined automatically when verifying a signature. */\\n        const RSA_PSS_SALTLEN_AUTO: number;\\n        const POINT_CONVERSION_COMPRESSED: number;\\n        const POINT_CONVERSION_UNCOMPRESSED: number;\\n        const POINT_CONVERSION_HYBRID: number;\\n        /** Specifies the built-in default cipher list used by Node.js (colon-separated values). */\\n        const defaultCoreCipherList: string;\\n        /** Specifies the active default cipher list used by the current Node.js process  (colon-separated values). */\\n        const defaultCipherList: string;\\n    }\\n    interface HashOptions extends stream.TransformOptions {\\n        /**\\n         * For XOF hash functions such as `shake256`, the\\n         * outputLength option can be used to specify the desired output length in bytes.\\n         */\\n        outputLength?: number | undefined;\\n    }\\n    /** @deprecated since v10.0.0 */\\n    const fips: boolean;\\n    /**\\n     * Creates and returns a `Hash` object that can be used to generate hash digests\\n     * using the given `algorithm`. Optional `options` argument controls stream\\n     * behavior. For XOF hash functions such as `'shake256'`, the `outputLength` option\\n     * can be used to specify the desired output length in bytes.\\n     *\\n     * The `algorithm` is dependent on the available algorithms supported by the\\n     * version of OpenSSL on the platform. Examples are `'sha256'`, `'sha512'`, etc.\\n     * On recent releases of OpenSSL, `openssl list -digest-algorithms` will\\n     * display the available digest algorithms.\\n     *\\n     * Example: generating the sha256 sum of a file\\n     *\\n     * ```js\\n     * import {\\n     *   createReadStream\\n     * } from 'fs';\\n     * import { argv } from 'process';\\n     * const {\\n     *   createHash\\n     * } = await import('crypto');\\n     *\\n     * const filename = argv[2];\\n     *\\n     * const hash = createHash('sha256');\\n     *\\n     * const input = createReadStream(filename);\\n     * input.on('readable', () => {\\n     *   // Only one element is going to be produced by the\\n     *   // hash stream.\\n     *   const data = input.read();\\n     *   if (data)\\n     *     hash.update(data);\\n     *   else {\\n     *     console.log(`${hash.digest('hex')} ${filename}`);\\n     *   }\\n     * });\\n     * ```\\n     * @since v0.1.92\\n     * @param options `stream.transform` options\\n     */\\n    function createHash(algorithm: string, options?: HashOptions): Hash;\\n    /**\\n     * Creates and returns an `Hmac` object that uses the given `algorithm` and `key`.\\n     * Optional `options` argument controls stream behavior.\\n     *\\n     * The `algorithm` is dependent on the available algorithms supported by the\\n     * version of OpenSSL on the platform. Examples are `'sha256'`, `'sha512'`, etc.\\n     * On recent releases of OpenSSL, `openssl list -digest-algorithms` will\\n     * display the available digest algorithms.\\n     *\\n     * The `key` is the HMAC key used to generate the cryptographic HMAC hash. If it is\\n     * a `KeyObject`, its type must be `secret`.\\n     *\\n     * Example: generating the sha256 HMAC of a file\\n     *\\n     * ```js\\n     * import {\\n     *   createReadStream\\n     * } from 'fs';\\n     * import { argv } from 'process';\\n     * const {\\n     *   createHmac\\n     * } = await import('crypto');\\n     *\\n     * const filename = argv[2];\\n     *\\n     * const hmac = createHmac('sha256', 'a secret');\\n     *\\n     * const input = createReadStream(filename);\\n     * input.on('readable', () => {\\n     *   // Only one element is going to be produced by the\\n     *   // hash stream.\\n     *   const data = input.read();\\n     *   if (data)\\n     *     hmac.update(data);\\n     *   else {\\n     *     console.log(`${hmac.digest('hex')} ${filename}`);\\n     *   }\\n     * });\\n     * ```\\n     * @since v0.1.94\\n     * @param options `stream.transform` options\\n     */\\n    function createHmac(algorithm: string, key: BinaryLike | KeyObject, options?: stream.TransformOptions): Hmac;\\n    // https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings\\n    type BinaryToTextEncoding = 'base64' | 'base64url' | 'hex' | 'binary';\\n    type CharacterEncoding = 'utf8' | 'utf-8' | 'utf16le' | 'latin1';\\n    type LegacyCharacterEncoding = 'ascii' | 'binary' | 'ucs2' | 'ucs-2';\\n    type Encoding = BinaryToTextEncoding | CharacterEncoding | LegacyCharacterEncoding;\\n    type ECDHKeyFormat = 'compressed' | 'uncompressed' | 'hybrid';\\n    /**\\n     * The `Hash` class is a utility for creating hash digests of data. It can be\\n     * used in one of two ways:\\n     *\\n     * * As a `stream` that is both readable and writable, where data is written\\n     * to produce a computed hash digest on the readable side, or\\n     * * Using the `hash.update()` and `hash.digest()` methods to produce the\\n     * computed hash.\\n     *\\n     * The {@link createHash} method is used to create `Hash` instances. `Hash`objects are not to be created directly using the `new` keyword.\\n     *\\n     * Example: Using `Hash` objects as streams:\\n     *\\n     * ```js\\n     * const {\\n     *   createHash\\n     * } = await import('crypto');\\n     *\\n     * const hash = createHash('sha256');\\n     *\\n     * hash.on('readable', () => {\\n     *   // Only one element is going to be produced by the\\n     *   // hash stream.\\n     *   const data = hash.read();\\n     *   if (data) {\\n     *     console.log(data.toString('hex'));\\n     *     // Prints:\\n     *     //   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50\\n     *   }\\n     * });\\n     *\\n     * hash.write('some data to hash');\\n     * hash.end();\\n     * ```\\n     *\\n     * Example: Using `Hash` and piped streams:\\n     *\\n     * ```js\\n     * import { createReadStream } from 'fs';\\n     * import { stdout } from 'process';\\n     * const { createHash } = await import('crypto');\\n     *\\n     * const hash = createHash('sha256');\\n     *\\n     * const input = createReadStream('test.js');\\n     * input.pipe(hash).setEncoding('hex').pipe(stdout);\\n     * ```\\n     *\\n     * Example: Using the `hash.update()` and `hash.digest()` methods:\\n     *\\n     * ```js\\n     * const {\\n     *   createHash\\n     * } = await import('crypto');\\n     *\\n     * const hash = createHash('sha256');\\n     *\\n     * hash.update('some data to hash');\\n     * console.log(hash.digest('hex'));\\n     * // Prints:\\n     * //   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50\\n     * ```\\n     * @since v0.1.92\\n     */\\n    class Hash extends stream.Transform {\\n        private constructor();\\n        /**\\n         * Creates a new `Hash` object that contains a deep copy of the internal state\\n         * of the current `Hash` object.\\n         *\\n         * The optional `options` argument controls stream behavior. For XOF hash\\n         * functions such as `'shake256'`, the `outputLength` option can be used to\\n         * specify the desired output length in bytes.\\n         *\\n         * An error is thrown when an attempt is made to copy the `Hash` object after\\n         * its `hash.digest()` method has been called.\\n         *\\n         * ```js\\n         * // Calculate a rolling hash.\\n         * const {\\n         *   createHash\\n         * } = await import('crypto');\\n         *\\n         * const hash = createHash('sha256');\\n         *\\n         * hash.update('one');\\n         * console.log(hash.copy().digest('hex'));\\n         *\\n         * hash.update('two');\\n         * console.log(hash.copy().digest('hex'));\\n         *\\n         * hash.update('three');\\n         * console.log(hash.copy().digest('hex'));\\n         *\\n         * // Etc.\\n         * ```\\n         * @since v13.1.0\\n         * @param options `stream.transform` options\\n         */\\n        copy(options?: stream.TransformOptions): Hash;\\n        /**\\n         * Updates the hash content with the given `data`, the encoding of which\\n         * is given in `inputEncoding`.\\n         * If `encoding` is not provided, and the `data` is a string, an\\n         * encoding of `'utf8'` is enforced. If `data` is a `Buffer`, `TypedArray`, or`DataView`, then `inputEncoding` is ignored.\\n         *\\n         * This can be called many times with new data as it is streamed.\\n         * @since v0.1.92\\n         * @param inputEncoding The `encoding` of the `data` string.\\n         */\\n        update(data: BinaryLike): Hash;\\n        update(data: string, inputEncoding: Encoding): Hash;\\n        /**\\n         * Calculates the digest of all of the data passed to be hashed (using the `hash.update()` method).\\n         * If `encoding` is provided a string will be returned; otherwise\\n         * a `Buffer` is returned.\\n         *\\n         * The `Hash` object can not be used again after `hash.digest()` method has been\\n         * called. Multiple calls will cause an error to be thrown.\\n         * @since v0.1.92\\n         * @param encoding The `encoding` of the return value.\\n         */\\n        digest(): Buffer;\\n        digest(encoding: BinaryToTextEncoding): string;\\n    }\\n    /**\\n     * The `Hmac` class is a utility for creating cryptographic HMAC digests. It can\\n     * be used in one of two ways:\\n     *\\n     * * As a `stream` that is both readable and writable, where data is written\\n     * to produce a computed HMAC digest on the readable side, or\\n     * * Using the `hmac.update()` and `hmac.digest()` methods to produce the\\n     * computed HMAC digest.\\n     *\\n     * The {@link createHmac} method is used to create `Hmac` instances. `Hmac`objects are not to be created directly using the `new` keyword.\\n     *\\n     * Example: Using `Hmac` objects as streams:\\n     *\\n     * ```js\\n     * const {\\n     *   createHmac\\n     * } = await import('crypto');\\n     *\\n     * const hmac = createHmac('sha256', 'a secret');\\n     *\\n     * hmac.on('readable', () => {\\n     *   // Only one element is going to be produced by the\\n     *   // hash stream.\\n     *   const data = hmac.read();\\n     *   if (data) {\\n     *     console.log(data.toString('hex'));\\n     *     // Prints:\\n     *     //   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e\\n     *   }\\n     * });\\n     *\\n     * hmac.write('some data to hash');\\n     * hmac.end();\\n     * ```\\n     *\\n     * Example: Using `Hmac` and piped streams:\\n     *\\n     * ```js\\n     * import { createReadStream } from 'fs';\\n     * import { stdout } from 'process';\\n     * const {\\n     *   createHmac\\n     * } = await import('crypto');\\n     *\\n     * const hmac = createHmac('sha256', 'a secret');\\n     *\\n     * const input = createReadStream('test.js');\\n     * input.pipe(hmac).pipe(stdout);\\n     * ```\\n     *\\n     * Example: Using the `hmac.update()` and `hmac.digest()` methods:\\n     *\\n     * ```js\\n     * const {\\n     *   createHmac\\n     * } = await import('crypto');\\n     *\\n     * const hmac = createHmac('sha256', 'a secret');\\n     *\\n     * hmac.update('some data to hash');\\n     * console.log(hmac.digest('hex'));\\n     * // Prints:\\n     * //   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e\\n     * ```\\n     * @since v0.1.94\\n     */\\n    class Hmac extends stream.Transform {\\n        private constructor();\\n        /**\\n         * Updates the `Hmac` content with the given `data`, the encoding of which\\n         * is given in `inputEncoding`.\\n         * If `encoding` is not provided, and the `data` is a string, an\\n         * encoding of `'utf8'` is enforced. If `data` is a `Buffer`, `TypedArray`, or`DataView`, then `inputEncoding` is ignored.\\n         *\\n         * This can be called many times with new data as it is streamed.\\n         * @since v0.1.94\\n         * @param inputEncoding The `encoding` of the `data` string.\\n         */\\n        update(data: BinaryLike): Hmac;\\n        update(data: string, inputEncoding: Encoding): Hmac;\\n        /**\\n         * Calculates the HMAC digest of all of the data passed using `hmac.update()`.\\n         * If `encoding` is\\n         * provided a string is returned; otherwise a `Buffer` is returned;\\n         *\\n         * The `Hmac` object can not be used again after `hmac.digest()` has been\\n         * called. Multiple calls to `hmac.digest()` will result in an error being thrown.\\n         * @since v0.1.94\\n         * @param encoding The `encoding` of the return value.\\n         */\\n        digest(): Buffer;\\n        digest(encoding: BinaryToTextEncoding): string;\\n    }\\n    type KeyObjectType = 'secret' | 'public' | 'private';\\n    interface KeyExportOptions<T extends KeyFormat> {\\n        type: 'pkcs1' | 'spki' | 'pkcs8' | 'sec1';\\n        format: T;\\n        cipher?: string | undefined;\\n        passphrase?: string | Buffer | undefined;\\n    }\\n    interface JwkKeyExportOptions {\\n        format: 'jwk';\\n    }\\n    interface JsonWebKey {\\n        crv?: string | undefined;\\n        d?: string | undefined;\\n        dp?: string | undefined;\\n        dq?: string | undefined;\\n        e?: string | undefined;\\n        k?: string | undefined;\\n        kty?: string | undefined;\\n        n?: string | undefined;\\n        p?: string | undefined;\\n        q?: string | undefined;\\n        qi?: string | undefined;\\n        x?: string | undefined;\\n        y?: string | undefined;\\n        [key: string]: unknown;\\n    }\\n    interface AsymmetricKeyDetails {\\n        /**\\n         * Key size in bits (RSA, DSA).\\n         */\\n        modulusLength?: number | undefined;\\n        /**\\n         * Public exponent (RSA).\\n         */\\n        publicExponent?: bigint | undefined;\\n        /**\\n         * Name of the message digest (RSA-PSS).\\n         */\\n        hashAlgorithm?: string | undefined;\\n        /**\\n         * Name of the message digest used by MGF1 (RSA-PSS).\\n         */\\n        mgf1HashAlgorithm?: string | undefined;\\n        /**\\n         * Minimal salt length in bytes (RSA-PSS).\\n         */\\n        saltLength?: number | undefined;\\n        /**\\n         * Size of q in bits (DSA).\\n         */\\n        divisorLength?: number | undefined;\\n        /**\\n         * Name of the curve (EC).\\n         */\\n        namedCurve?: string | undefined;\\n    }\\n    /**\\n     * Node.js uses a `KeyObject` class to represent a symmetric or asymmetric key,\\n     * and each kind of key exposes different functions. The {@link createSecretKey}, {@link createPublicKey} and {@link createPrivateKey} methods are used to create `KeyObject`instances. `KeyObject`\\n     * objects are not to be created directly using the `new`keyword.\\n     *\\n     * Most applications should consider using the new `KeyObject` API instead of\\n     * passing keys as strings or `Buffer`s due to improved security features.\\n     *\\n     * `KeyObject` instances can be passed to other threads via `postMessage()`.\\n     * The receiver obtains a cloned `KeyObject`, and the `KeyObject` does not need to\\n     * be listed in the `transferList` argument.\\n     * @since v11.6.0\\n     */\\n    class KeyObject {\\n        private constructor();\\n        /**\\n         * Example: Converting a `CryptoKey` instance to a `KeyObject`:\\n         *\\n         * ```js\\n         * const { webcrypto, KeyObject } = await import('crypto');\\n         * const { subtle } = webcrypto;\\n         *\\n         * const key = await subtle.generateKey({\\n         *   name: 'HMAC',\\n         *   hash: 'SHA-256',\\n         *   length: 256\\n         * }, true, ['sign', 'verify']);\\n         *\\n         * const keyObject = KeyObject.from(key);\\n         * console.log(keyObject.symmetricKeySize);\\n         * // Prints: 32 (symmetric key size in bytes)\\n         * ```\\n         * @since v15.0.0\\n         */\\n        static from(key: webcrypto.CryptoKey): KeyObject;\\n        /**\\n         * For asymmetric keys, this property represents the type of the key. Supported key\\n         * types are:\\n         *\\n         * * `'rsa'` (OID 1.2.840.113549.1.1.1)\\n         * * `'rsa-pss'` (OID 1.2.840.113549.1.1.10)\\n         * * `'dsa'` (OID 1.2.840.10040.4.1)\\n         * * `'ec'` (OID 1.2.840.10045.2.1)\\n         * * `'x25519'` (OID 1.3.101.110)\\n         * * `'x448'` (OID 1.3.101.111)\\n         * * `'ed25519'` (OID 1.3.101.112)\\n         * * `'ed448'` (OID 1.3.101.113)\\n         * * `'dh'` (OID 1.2.840.113549.1.3.1)\\n         *\\n         * This property is `undefined` for unrecognized `KeyObject` types and symmetric\\n         * keys.\\n         * @since v11.6.0\\n         */\\n        asymmetricKeyType?: KeyType | undefined;\\n        /**\\n         * For asymmetric keys, this property represents the size of the embedded key in\\n         * bytes. This property is `undefined` for symmetric keys.\\n         */\\n        asymmetricKeySize?: number | undefined;\\n        /**\\n         * This property exists only on asymmetric keys. Depending on the type of the key,\\n         * this object contains information about the key. None of the information obtained\\n         * through this property can be used to uniquely identify a key or to compromise\\n         * the security of the key.\\n         *\\n         * For RSA-PSS keys, if the key material contains a `RSASSA-PSS-params` sequence,\\n         * the `hashAlgorithm`, `mgf1HashAlgorithm`, and `saltLength` properties will be\\n         * set.\\n         *\\n         * Other key details might be exposed via this API using additional attributes.\\n         * @since v15.7.0\\n         */\\n        asymmetricKeyDetails?: AsymmetricKeyDetails | undefined;\\n        /**\\n         * For symmetric keys, the following encoding options can be used:\\n         *\\n         * For public keys, the following encoding options can be used:\\n         *\\n         * For private keys, the following encoding options can be used:\\n         *\\n         * The result type depends on the selected encoding format, when PEM the\\n         * result is a string, when DER it will be a buffer containing the data\\n         * encoded as DER, when [JWK](https://tools.ietf.org/html/rfc7517) it will be an object.\\n         *\\n         * When [JWK](https://tools.ietf.org/html/rfc7517) encoding format was selected, all other encoding options are\\n         * ignored.\\n         *\\n         * PKCS#1, SEC1, and PKCS#8 type keys can be encrypted by using a combination of\\n         * the `cipher` and `format` options. The PKCS#8 `type` can be used with any`format` to encrypt any key algorithm (RSA, EC, or DH) by specifying a`cipher`. PKCS#1 and SEC1 can only be\\n         * encrypted by specifying a `cipher`when the PEM `format` is used. For maximum compatibility, use PKCS#8 for\\n         * encrypted private keys. Since PKCS#8 defines its own\\n         * encryption mechanism, PEM-level encryption is not supported when encrypting\\n         * a PKCS#8 key. See [RFC 5208](https://www.rfc-editor.org/rfc/rfc5208.txt) for PKCS#8 encryption and [RFC 1421](https://www.rfc-editor.org/rfc/rfc1421.txt) for\\n         * PKCS#1 and SEC1 encryption.\\n         * @since v11.6.0\\n         */\\n        export(options: KeyExportOptions<'pem'>): string | Buffer;\\n        export(options?: KeyExportOptions<'der'>): Buffer;\\n        export(options?: JwkKeyExportOptions): JsonWebKey;\\n        /**\\n         * For secret keys, this property represents the size of the key in bytes. This\\n         * property is `undefined` for asymmetric keys.\\n         * @since v11.6.0\\n         */\\n        symmetricKeySize?: number | undefined;\\n        /**\\n         * Depending on the type of this `KeyObject`, this property is either`'secret'` for secret (symmetric) keys, `'public'` for public (asymmetric) keys\\n         * or `'private'` for private (asymmetric) keys.\\n         * @since v11.6.0\\n         */\\n        type: KeyObjectType;\\n    }\\n    type CipherCCMTypes = 'aes-128-ccm' | 'aes-192-ccm' | 'aes-256-ccm' | 'chacha20-poly1305';\\n    type CipherGCMTypes = 'aes-128-gcm' | 'aes-192-gcm' | 'aes-256-gcm';\\n    type CipherOCBTypes = 'aes-128-ocb' | 'aes-192-ocb' | 'aes-256-ocb';\\n    type BinaryLike = string | NodeJS.ArrayBufferView;\\n    type CipherKey = BinaryLike | KeyObject;\\n    interface CipherCCMOptions extends stream.TransformOptions {\\n        authTagLength: number;\\n    }\\n    interface CipherGCMOptions extends stream.TransformOptions {\\n        authTagLength?: number | undefined;\\n    }\\n    interface CipherOCBOptions extends stream.TransformOptions {\\n        authTagLength: number;\\n    }\\n    /**\\n     * Creates and returns a `Cipher` object that uses the given `algorithm` and`password`.\\n     *\\n     * The `options` argument controls stream behavior and is optional except when a\\n     * cipher in CCM or OCB mode (e.g. `'aes-128-ccm'`) is used. In that case, the`authTagLength` option is required and specifies the length of the\\n     * authentication tag in bytes, see `CCM mode`. In GCM mode, the `authTagLength`option is not required but can be used to set the length of the authentication\\n     * tag that will be returned by `getAuthTag()` and defaults to 16 bytes.\\n     * For `chacha20-poly1305`, the `authTagLength` option defaults to 16 bytes.\\n     *\\n     * The `algorithm` is dependent on OpenSSL, examples are `'aes192'`, etc. On\\n     * recent OpenSSL releases, `openssl list -cipher-algorithms` will\\n     * display the available cipher algorithms.\\n     *\\n     * The `password` is used to derive the cipher key and initialization vector (IV).\\n     * The value must be either a `'latin1'` encoded string, a `Buffer`, a`TypedArray`, or a `DataView`.\\n     *\\n     * The implementation of `crypto.createCipher()` derives keys using the OpenSSL\\n     * function [`EVP_BytesToKey`](https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html) with the digest algorithm set to MD5, one\\n     * iteration, and no salt. The lack of salt allows dictionary attacks as the same\\n     * password always creates the same key. The low iteration count and\\n     * non-cryptographically secure hash algorithm allow passwords to be tested very\\n     * rapidly.\\n     *\\n     * In line with OpenSSL's recommendation to use a more modern algorithm instead of [`EVP_BytesToKey`](https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html) it is recommended that\\n     * developers derive a key and IV on\\n     * their own using {@link scrypt} and to use {@link createCipheriv} to create the `Cipher` object. Users should not use ciphers with counter mode\\n     * (e.g. CTR, GCM, or CCM) in `crypto.createCipher()`. A warning is emitted when\\n     * they are used in order to avoid the risk of IV reuse that causes\\n     * vulnerabilities. For the case when IV is reused in GCM, see [Nonce-Disrespecting Adversaries](https://github.com/nonce-disrespect/nonce-disrespect) for details.\\n     * @since v0.1.94\\n     * @deprecated Since v10.0.0 - Use {@link createCipheriv} instead.\\n     * @param options `stream.transform` options\\n     */\\n    function createCipher(algorithm: CipherCCMTypes, password: BinaryLike, options: CipherCCMOptions): CipherCCM;\\n    /** @deprecated since v10.0.0 use `createCipheriv()` */\\n    function createCipher(algorithm: CipherGCMTypes, password: BinaryLike, options?: CipherGCMOptions): CipherGCM;\\n    /** @deprecated since v10.0.0 use `createCipheriv()` */\\n    function createCipher(algorithm: string, password: BinaryLike, options?: stream.TransformOptions): Cipher;\\n    /**\\n     * Creates and returns a `Cipher` object, with the given `algorithm`, `key` and\\n     * initialization vector (`iv`).\\n     *\\n     * The `options` argument controls stream behavior and is optional except when a\\n     * cipher in CCM or OCB mode (e.g. `'aes-128-ccm'`) is used. In that case, the`authTagLength` option is required and specifies the length of the\\n     * authentication tag in bytes, see `CCM mode`. In GCM mode, the `authTagLength`option is not required but can be used to set the length of the authentication\\n     * tag that will be returned by `getAuthTag()` and defaults to 16 bytes.\\n     * For `chacha20-poly1305`, the `authTagLength` option defaults to 16 bytes.\\n     *\\n     * The `algorithm` is dependent on OpenSSL, examples are `'aes192'`, etc. On\\n     * recent OpenSSL releases, `openssl list -cipher-algorithms` will\\n     * display the available cipher algorithms.\\n     *\\n     * The `key` is the raw key used by the `algorithm` and `iv` is an [initialization vector](https://en.wikipedia.org/wiki/Initialization_vector). Both arguments must be `'utf8'` encoded\\n     * strings,`Buffers`, `TypedArray`, or `DataView`s. The `key` may optionally be\\n     * a `KeyObject` of type `secret`. If the cipher does not need\\n     * an initialization vector, `iv` may be `null`.\\n     *\\n     * When passing strings for `key` or `iv`, please consider `caveats when using strings as inputs to cryptographic APIs`.\\n     *\\n     * Initialization vectors should be unpredictable and unique; ideally, they will be\\n     * cryptographically random. They do not have to be secret: IVs are typically just\\n     * added to ciphertext messages unencrypted. It may sound contradictory that\\n     * something has to be unpredictable and unique, but does not have to be secret;\\n     * remember that an attacker must not be able to predict ahead of time what a\\n     * given IV will be.\\n     * @since v0.1.94\\n     * @param options `stream.transform` options\\n     */\\n    function createCipheriv(algorithm: CipherCCMTypes, key: CipherKey, iv: BinaryLike, options: CipherCCMOptions): CipherCCM;\\n    function createCipheriv(algorithm: CipherOCBTypes, key: CipherKey, iv: BinaryLike, options: CipherOCBOptions): CipherOCB;\\n    function createCipheriv(algorithm: CipherGCMTypes, key: CipherKey, iv: BinaryLike, options?: CipherGCMOptions): CipherGCM;\\n    function createCipheriv(algorithm: string, key: CipherKey, iv: BinaryLike | null, options?: stream.TransformOptions): Cipher;\\n    /**\\n     * Instances of the `Cipher` class are used to encrypt data. The class can be\\n     * used in one of two ways:\\n     *\\n     * * As a `stream` that is both readable and writable, where plain unencrypted\\n     * data is written to produce encrypted data on the readable side, or\\n     * * Using the `cipher.update()` and `cipher.final()` methods to produce\\n     * the encrypted data.\\n     *\\n     * The {@link createCipher} or {@link createCipheriv} methods are\\n     * used to create `Cipher` instances. `Cipher` objects are not to be created\\n     * directly using the `new` keyword.\\n     *\\n     * Example: Using `Cipher` objects as streams:\\n     *\\n     * ```js\\n     * const {\\n     *   scrypt,\\n     *   randomFill,\\n     *   createCipheriv\\n     * } = await import('crypto');\\n     *\\n     * const algorithm = 'aes-192-cbc';\\n     * const password = 'Password used to generate key';\\n     *\\n     * // First, we'll generate the key. The key length is dependent on the algorithm.\\n     * // In this case for aes192, it is 24 bytes (192 bits).\\n     * scrypt(password, 'salt', 24, (err, key) => {\\n     *   if (err) throw err;\\n     *   // Then, we'll generate a random initialization vector\\n     *   randomFill(new Uint8Array(16), (err, iv) => {\\n     *     if (err) throw err;\\n     *\\n     *     // Once we have the key and iv, we can create and use the cipher...\\n     *     const cipher = createCipheriv(algorithm, key, iv);\\n     *\\n     *     let encrypted = '';\\n     *     cipher.setEncoding('hex');\\n     *\\n     *     cipher.on('data', (chunk) => encrypted += chunk);\\n     *     cipher.on('end', () => console.log(encrypted));\\n     *\\n     *     cipher.write('some clear text data');\\n     *     cipher.end();\\n     *   });\\n     * });\\n     * ```\\n     *\\n     * Example: Using `Cipher` and piped streams:\\n     *\\n     * ```js\\n     * import {\\n     *   createReadStream,\\n     *   createWriteStream,\\n     * } from 'fs';\\n     *\\n     * import {\\n     *   pipeline\\n     * } from 'stream';\\n     *\\n     * const {\\n     *   scrypt,\\n     *   randomFill,\\n     *   createCipheriv\\n     * } = await import('crypto');\\n     *\\n     * const algorithm = 'aes-192-cbc';\\n     * const password = 'Password used to generate key';\\n     *\\n     * // First, we'll generate the key. The key length is dependent on the algorithm.\\n     * // In this case for aes192, it is 24 bytes (192 bits).\\n     * scrypt(password, 'salt', 24, (err, key) => {\\n     *   if (err) throw err;\\n     *   // Then, we'll generate a random initialization vector\\n     *   randomFill(new Uint8Array(16), (err, iv) => {\\n     *     if (err) throw err;\\n     *\\n     *     const cipher = createCipheriv(algorithm, key, iv);\\n     *\\n     *     const input = createReadStream('test.js');\\n     *     const output = createWriteStream('test.enc');\\n     *\\n     *     pipeline(input, cipher, output, (err) => {\\n     *       if (err) throw err;\\n     *     });\\n     *   });\\n     * });\\n     * ```\\n     *\\n     * Example: Using the `cipher.update()` and `cipher.final()` methods:\\n     *\\n     * ```js\\n     * const {\\n     *   scrypt,\\n     *   randomFill,\\n     *   createCipheriv\\n     * } = await import('crypto');\\n     *\\n     * const algorithm = 'aes-192-cbc';\\n     * const password = 'Password used to generate key';\\n     *\\n     * // First, we'll generate the key. The key length is dependent on the algorithm.\\n     * // In this case for aes192, it is 24 bytes (192 bits).\\n     * scrypt(password, 'salt', 24, (err, key) => {\\n     *   if (err) throw err;\\n     *   // Then, we'll generate a random initialization vector\\n     *   randomFill(new Uint8Array(16), (err, iv) => {\\n     *     if (err) throw err;\\n     *\\n     *     const cipher = createCipheriv(algorithm, key, iv);\\n     *\\n     *     let encrypted = cipher.update('some clear text data', 'utf8', 'hex');\\n     *     encrypted += cipher.final('hex');\\n     *     console.log(encrypted);\\n     *   });\\n     * });\\n     * ```\\n     * @since v0.1.94\\n     */\\n    class Cipher extends stream.Transform {\\n        private constructor();\\n        /**\\n         * Updates the cipher with `data`. If the `inputEncoding` argument is given,\\n         * the `data`argument is a string using the specified encoding. If the `inputEncoding`argument is not given, `data` must be a `Buffer`, `TypedArray`, or`DataView`. If `data` is a `Buffer`,\\n         * `TypedArray`, or `DataView`, then`inputEncoding` is ignored.\\n         *\\n         * The `outputEncoding` specifies the output format of the enciphered\\n         * data. If the `outputEncoding`is specified, a string using the specified encoding is returned. If no`outputEncoding` is provided, a `Buffer` is returned.\\n         *\\n         * The `cipher.update()` method can be called multiple times with new data until `cipher.final()` is called. Calling `cipher.update()` after `cipher.final()` will result in an error being\\n         * thrown.\\n         * @since v0.1.94\\n         * @param inputEncoding The `encoding` of the data.\\n         * @param outputEncoding The `encoding` of the return value.\\n         */\\n        update(data: BinaryLike): Buffer;\\n        update(data: string, inputEncoding: Encoding): Buffer;\\n        update(data: NodeJS.ArrayBufferView, inputEncoding: undefined, outputEncoding: Encoding): string;\\n        update(data: string, inputEncoding: Encoding | undefined, outputEncoding: Encoding): string;\\n        /**\\n         * Once the `cipher.final()` method has been called, the `Cipher` object can no\\n         * longer be used to encrypt data. Attempts to call `cipher.final()` more than\\n         * once will result in an error being thrown.\\n         * @since v0.1.94\\n         * @param outputEncoding The `encoding` of the return value.\\n         * @return Any remaining enciphered contents. If `outputEncoding` is specified, a string is returned. If an `outputEncoding` is not provided, a {@link Buffer} is returned.\\n         */\\n        final(): Buffer;\\n        final(outputEncoding: BufferEncoding): string;\\n        /**\\n         * When using block encryption algorithms, the `Cipher` class will automatically\\n         * add padding to the input data to the appropriate block size. To disable the\\n         * default padding call `cipher.setAutoPadding(false)`.\\n         *\\n         * When `autoPadding` is `false`, the length of the entire input data must be a\\n         * multiple of the cipher's block size or `cipher.final()` will throw an error.\\n         * Disabling automatic padding is useful for non-standard padding, for instance\\n         * using `0x0` instead of PKCS padding.\\n         *\\n         * The `cipher.setAutoPadding()` method must be called before `cipher.final()`.\\n         * @since v0.7.1\\n         * @param [autoPadding=true]\\n         * @return for method chaining.\\n         */\\n        setAutoPadding(autoPadding?: boolean): this;\\n    }\\n    interface CipherCCM extends Cipher {\\n        setAAD(\\n            buffer: NodeJS.ArrayBufferView,\\n            options: {\\n                plaintextLength: number;\\n            }\\n        ): this;\\n        getAuthTag(): Buffer;\\n    }\\n    interface CipherGCM extends Cipher {\\n        setAAD(\\n            buffer: NodeJS.ArrayBufferView,\\n            options?: {\\n                plaintextLength: number;\\n            }\\n        ): this;\\n        getAuthTag(): Buffer;\\n    }\\n    interface CipherOCB extends Cipher {\\n        setAAD(\\n            buffer: NodeJS.ArrayBufferView,\\n            options?: {\\n                plaintextLength: number;\\n            }\\n        ): this;\\n        getAuthTag(): Buffer;\\n    }\\n    /**\\n     * Creates and returns a `Decipher` object that uses the given `algorithm` and`password` (key).\\n     *\\n     * The `options` argument controls stream behavior and is optional except when a\\n     * cipher in CCM or OCB mode (e.g. `'aes-128-ccm'`) is used. In that case, the`authTagLength` option is required and specifies the length of the\\n     * authentication tag in bytes, see `CCM mode`.\\n     * For `chacha20-poly1305`, the `authTagLength` option defaults to 16 bytes.\\n     *\\n     * The implementation of `crypto.createDecipher()` derives keys using the OpenSSL\\n     * function [`EVP_BytesToKey`](https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html) with the digest algorithm set to MD5, one\\n     * iteration, and no salt. The lack of salt allows dictionary attacks as the same\\n     * password always creates the same key. The low iteration count and\\n     * non-cryptographically secure hash algorithm allow passwords to be tested very\\n     * rapidly.\\n     *\\n     * In line with OpenSSL's recommendation to use a more modern algorithm instead of [`EVP_BytesToKey`](https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html) it is recommended that\\n     * developers derive a key and IV on\\n     * their own using {@link scrypt} and to use {@link createDecipheriv} to create the `Decipher` object.\\n     * @since v0.1.94\\n     * @deprecated Since v10.0.0 - Use {@link createDecipheriv} instead.\\n     * @param options `stream.transform` options\\n     */\\n    function createDecipher(algorithm: CipherCCMTypes, password: BinaryLike, options: CipherCCMOptions): DecipherCCM;\\n    /** @deprecated since v10.0.0 use `createDecipheriv()` */\\n    function createDecipher(algorithm: CipherGCMTypes, password: BinaryLike, options?: CipherGCMOptions): DecipherGCM;\\n    /** @deprecated since v10.0.0 use `createDecipheriv()` */\\n    function createDecipher(algorithm: string, password: BinaryLike, options?: stream.TransformOptions): Decipher;\\n    /**\\n     * Creates and returns a `Decipher` object that uses the given `algorithm`, `key`and initialization vector (`iv`).\\n     *\\n     * The `options` argument controls stream behavior and is optional except when a\\n     * cipher in CCM or OCB mode (e.g. `'aes-128-ccm'`) is used. In that case, the`authTagLength` option is required and specifies the length of the\\n     * authentication tag in bytes, see `CCM mode`. In GCM mode, the `authTagLength`option is not required but can be used to restrict accepted authentication tags\\n     * to those with the specified length.\\n     * For `chacha20-poly1305`, the `authTagLength` option defaults to 16 bytes.\\n     *\\n     * The `algorithm` is dependent on OpenSSL, examples are `'aes192'`, etc. On\\n     * recent OpenSSL releases, `openssl list -cipher-algorithms` will\\n     * display the available cipher algorithms.\\n     *\\n     * The `key` is the raw key used by the `algorithm` and `iv` is an [initialization vector](https://en.wikipedia.org/wiki/Initialization_vector). Both arguments must be `'utf8'` encoded\\n     * strings,`Buffers`, `TypedArray`, or `DataView`s. The `key` may optionally be\\n     * a `KeyObject` of type `secret`. If the cipher does not need\\n     * an initialization vector, `iv` may be `null`.\\n     *\\n     * When passing strings for `key` or `iv`, please consider `caveats when using strings as inputs to cryptographic APIs`.\\n     *\\n     * Initialization vectors should be unpredictable and unique; ideally, they will be\\n     * cryptographically random. They do not have to be secret: IVs are typically just\\n     * added to ciphertext messages unencrypted. It may sound contradictory that\\n     * something has to be unpredictable and unique, but does not have to be secret;\\n     * remember that an attacker must not be able to predict ahead of time what a given\\n     * IV will be.\\n     * @since v0.1.94\\n     * @param options `stream.transform` options\\n     */\\n    function createDecipheriv(algorithm: CipherCCMTypes, key: CipherKey, iv: BinaryLike, options: CipherCCMOptions): DecipherCCM;\\n    function createDecipheriv(algorithm: CipherOCBTypes, key: CipherKey, iv: BinaryLike, options: CipherOCBOptions): DecipherOCB;\\n    function createDecipheriv(algorithm: CipherGCMTypes, key: CipherKey, iv: BinaryLike, options?: CipherGCMOptions): DecipherGCM;\\n    function createDecipheriv(algorithm: string, key: CipherKey, iv: BinaryLike | null, options?: stream.TransformOptions): Decipher;\\n    /**\\n     * Instances of the `Decipher` class are used to decrypt data. The class can be\\n     * used in one of two ways:\\n     *\\n     * * As a `stream` that is both readable and writable, where plain encrypted\\n     * data is written to produce unencrypted data on the readable side, or\\n     * * Using the `decipher.update()` and `decipher.final()` methods to\\n     * produce the unencrypted data.\\n     *\\n     * The {@link createDecipher} or {@link createDecipheriv} methods are\\n     * used to create `Decipher` instances. `Decipher` objects are not to be created\\n     * directly using the `new` keyword.\\n     *\\n     * Example: Using `Decipher` objects as streams:\\n     *\\n     * ```js\\n     * import { Buffer } from 'buffer';\\n     * const {\\n     *   scryptSync,\\n     *   createDecipheriv\\n     * } = await import('crypto');\\n     *\\n     * const algorithm = 'aes-192-cbc';\\n     * const password = 'Password used to generate key';\\n     * // Key length is dependent on the algorithm. In this case for aes192, it is\\n     * // 24 bytes (192 bits).\\n     * // Use the async `crypto.scrypt()` instead.\\n     * const key = scryptSync(password, 'salt', 24);\\n     * // The IV is usually passed along with the ciphertext.\\n     * const iv = Buffer.alloc(16, 0); // Initialization vector.\\n     *\\n     * const decipher = createDecipheriv(algorithm, key, iv);\\n     *\\n     * let decrypted = '';\\n     * decipher.on('readable', () => {\\n     *   while (null !== (chunk = decipher.read())) {\\n     *     decrypted += chunk.toString('utf8');\\n     *   }\\n     * });\\n     * decipher.on('end', () => {\\n     *   console.log(decrypted);\\n     *   // Prints: some clear text data\\n     * });\\n     *\\n     * // Encrypted with same algorithm, key and iv.\\n     * const encrypted =\\n     *   'e5f79c5915c02171eec6b212d5520d44480993d7d622a7c4c2da32f6efda0ffa';\\n     * decipher.write(encrypted, 'hex');\\n     * decipher.end();\\n     * ```\\n     *\\n     * Example: Using `Decipher` and piped streams:\\n     *\\n     * ```js\\n     * import {\\n     *   createReadStream,\\n     *   createWriteStream,\\n     * } from 'fs';\\n     * import { Buffer } from 'buffer';\\n     * const {\\n     *   scryptSync,\\n     *   createDecipheriv\\n     * } = await import('crypto');\\n     *\\n     * const algorithm = 'aes-192-cbc';\\n     * const password = 'Password used to generate key';\\n     * // Use the async `crypto.scrypt()` instead.\\n     * const key = scryptSync(password, 'salt', 24);\\n     * // The IV is usually passed along with the ciphertext.\\n     * const iv = Buffer.alloc(16, 0); // Initialization vector.\\n     *\\n     * const decipher = createDecipheriv(algorithm, key, iv);\\n     *\\n     * const input = createReadStream('test.enc');\\n     * const output = createWriteStream('test.js');\\n     *\\n     * input.pipe(decipher).pipe(output);\\n     * ```\\n     *\\n     * Example: Using the `decipher.update()` and `decipher.final()` methods:\\n     *\\n     * ```js\\n     * import { Buffer } from 'buffer';\\n     * const {\\n     *   scryptSync,\\n     *   createDecipheriv\\n     * } = await import('crypto');\\n     *\\n     * const algorithm = 'aes-192-cbc';\\n     * const password = 'Password used to generate key';\\n     * // Use the async `crypto.scrypt()` instead.\\n     * const key = scryptSync(password, 'salt', 24);\\n     * // The IV is usually passed along with the ciphertext.\\n     * const iv = Buffer.alloc(16, 0); // Initialization vector.\\n     *\\n     * const decipher = createDecipheriv(algorithm, key, iv);\\n     *\\n     * // Encrypted using same algorithm, key and iv.\\n     * const encrypted =\\n     *   'e5f79c5915c02171eec6b212d5520d44480993d7d622a7c4c2da32f6efda0ffa';\\n     * let decrypted = decipher.update(encrypted, 'hex', 'utf8');\\n     * decrypted += decipher.final('utf8');\\n     * console.log(decrypted);\\n     * // Prints: some clear text data\\n     * ```\\n     * @since v0.1.94\\n     */\\n    class Decipher extends stream.Transform {\\n        private constructor();\\n        /**\\n         * Updates the decipher with `data`. If the `inputEncoding` argument is given,\\n         * the `data`argument is a string using the specified encoding. If the `inputEncoding`argument is not given, `data` must be a `Buffer`. If `data` is a `Buffer` then `inputEncoding` is\\n         * ignored.\\n         *\\n         * The `outputEncoding` specifies the output format of the enciphered\\n         * data. If the `outputEncoding`is specified, a string using the specified encoding is returned. If no`outputEncoding` is provided, a `Buffer` is returned.\\n         *\\n         * The `decipher.update()` method can be called multiple times with new data until `decipher.final()` is called. Calling `decipher.update()` after `decipher.final()` will result in an error\\n         * being thrown.\\n         * @since v0.1.94\\n         * @param inputEncoding The `encoding` of the `data` string.\\n         * @param outputEncoding The `encoding` of the return value.\\n         */\\n        update(data: NodeJS.ArrayBufferView): Buffer;\\n        update(data: string, inputEncoding: Encoding): Buffer;\\n        update(data: NodeJS.ArrayBufferView, inputEncoding: undefined, outputEncoding: Encoding): string;\\n        update(data: string, inputEncoding: Encoding | undefined, outputEncoding: Encoding): string;\\n        /**\\n         * Once the `decipher.final()` method has been called, the `Decipher` object can\\n         * no longer be used to decrypt data. Attempts to call `decipher.final()` more\\n         * than once will result in an error being thrown.\\n         * @since v0.1.94\\n         * @param outputEncoding The `encoding` of the return value.\\n         * @return Any remaining deciphered contents. If `outputEncoding` is specified, a string is returned. If an `outputEncoding` is not provided, a {@link Buffer} is returned.\\n         */\\n        final(): Buffer;\\n        final(outputEncoding: BufferEncoding): string;\\n        /**\\n         * When data has been encrypted without standard block padding, calling`decipher.setAutoPadding(false)` will disable automatic padding to prevent `decipher.final()` from checking for and\\n         * removing padding.\\n         *\\n         * Turning auto padding off will only work if the input data's length is a\\n         * multiple of the ciphers block size.\\n         *\\n         * The `decipher.setAutoPadding()` method must be called before `decipher.final()`.\\n         * @since v0.7.1\\n         * @param [autoPadding=true]\\n         * @return for method chaining.\\n         */\\n        setAutoPadding(auto_padding?: boolean): this;\\n    }\\n    interface DecipherCCM extends Decipher {\\n        setAuthTag(buffer: NodeJS.ArrayBufferView): this;\\n        setAAD(\\n            buffer: NodeJS.ArrayBufferView,\\n            options: {\\n                plaintextLength: number;\\n            }\\n        ): this;\\n    }\\n    interface DecipherGCM extends Decipher {\\n        setAuthTag(buffer: NodeJS.ArrayBufferView): this;\\n        setAAD(\\n            buffer: NodeJS.ArrayBufferView,\\n            options?: {\\n                plaintextLength: number;\\n            }\\n        ): this;\\n    }\\n    interface DecipherOCB extends Decipher {\\n        setAuthTag(buffer: NodeJS.ArrayBufferView): this;\\n        setAAD(\\n            buffer: NodeJS.ArrayBufferView,\\n            options?: {\\n                plaintextLength: number;\\n            }\\n        ): this;\\n    }\\n    interface PrivateKeyInput {\\n        key: string | Buffer;\\n        format?: KeyFormat | undefined;\\n        type?: 'pkcs1' | 'pkcs8' | 'sec1' | undefined;\\n        passphrase?: string | Buffer | undefined;\\n        encoding?: string | undefined;\\n    }\\n    interface PublicKeyInput {\\n        key: string | Buffer;\\n        format?: KeyFormat | undefined;\\n        type?: 'pkcs1' | 'spki' | undefined;\\n        encoding?: string | undefined;\\n    }\\n    /**\\n     * Asynchronously generates a new random secret key of the given `length`. The`type` will determine which validations will be performed on the `length`.\\n     *\\n     * ```js\\n     * const {\\n     *   generateKey\\n     * } = await import('crypto');\\n     *\\n     * generateKey('hmac', { length: 64 }, (err, key) => {\\n     *   if (err) throw err;\\n     *   console.log(key.export().toString('hex'));  // 46e..........620\\n     * });\\n     * ```\\n     * @since v15.0.0\\n     * @param type The intended use of the generated secret key. Currently accepted values are `'hmac'` and `'aes'`.\\n     */\\n    function generateKey(\\n        type: 'hmac' | 'aes',\\n        options: {\\n            length: number;\\n        },\\n        callback: (err: Error | null, key: KeyObject) => void\\n    ): void;\\n    /**\\n     * Synchronously generates a new random secret key of the given `length`. The`type` will determine which validations will be performed on the `length`.\\n     *\\n     * ```js\\n     * const {\\n     *   generateKeySync\\n     * } = await import('crypto');\\n     *\\n     * const key = generateKeySync('hmac', { length: 64 });\\n     * console.log(key.export().toString('hex'));  // e89..........41e\\n     * ```\\n     * @since v15.0.0\\n     * @param type The intended use of the generated secret key. Currently accepted values are `'hmac'` and `'aes'`.\\n     */\\n    function generateKeySync(\\n        type: 'hmac' | 'aes',\\n        options: {\\n            length: number;\\n        }\\n    ): KeyObject;\\n    interface JsonWebKeyInput {\\n        key: JsonWebKey;\\n        format: 'jwk';\\n    }\\n    /**\\n     * Creates and returns a new key object containing a private key. If `key` is a\\n     * string or `Buffer`, `format` is assumed to be `'pem'`; otherwise, `key`must be an object with the properties described above.\\n     *\\n     * If the private key is encrypted, a `passphrase` must be specified. The length\\n     * of the passphrase is limited to 1024 bytes.\\n     * @since v11.6.0\\n     */\\n    function createPrivateKey(key: PrivateKeyInput | string | Buffer | JsonWebKeyInput): KeyObject;\\n    /**\\n     * Creates and returns a new key object containing a public key. If `key` is a\\n     * string or `Buffer`, `format` is assumed to be `'pem'`; if `key` is a `KeyObject`with type `'private'`, the public key is derived from the given private key;\\n     * otherwise, `key` must be an object with the properties described above.\\n     *\\n     * If the format is `'pem'`, the `'key'` may also be an X.509 certificate.\\n     *\\n     * Because public keys can be derived from private keys, a private key may be\\n     * passed instead of a public key. In that case, this function behaves as if {@link createPrivateKey} had been called, except that the type of the\\n     * returned `KeyObject` will be `'public'` and that the private key cannot be\\n     * extracted from the returned `KeyObject`. Similarly, if a `KeyObject` with type`'private'` is given, a new `KeyObject` with type `'public'` will be returned\\n     * and it will be impossible to extract the private key from the returned object.\\n     * @since v11.6.0\\n     */\\n    function createPublicKey(key: PublicKeyInput | string | Buffer | KeyObject | JsonWebKeyInput): KeyObject;\\n    /**\\n     * Creates and returns a new key object containing a secret key for symmetric\\n     * encryption or `Hmac`.\\n     * @since v11.6.0\\n     * @param encoding The string encoding when `key` is a string.\\n     */\\n    function createSecretKey(key: NodeJS.ArrayBufferView): KeyObject;\\n    function createSecretKey(key: string, encoding: BufferEncoding): KeyObject;\\n    /**\\n     * Creates and returns a `Sign` object that uses the given `algorithm`. Use {@link getHashes} to obtain the names of the available digest algorithms.\\n     * Optional `options` argument controls the `stream.Writable` behavior.\\n     *\\n     * In some cases, a `Sign` instance can be created using the name of a signature\\n     * algorithm, such as `'RSA-SHA256'`, instead of a digest algorithm. This will use\\n     * the corresponding digest algorithm. This does not work for all signature\\n     * algorithms, such as `'ecdsa-with-SHA256'`, so it is best to always use digest\\n     * algorithm names.\\n     * @since v0.1.92\\n     * @param options `stream.Writable` options\\n     */\\n    function createSign(algorithm: string, options?: stream.WritableOptions): Sign;\\n    type DSAEncoding = 'der' | 'ieee-p1363';\\n    interface SigningOptions {\\n        /**\\n         * @See crypto.constants.RSA_PKCS1_PADDING\\n         */\\n        padding?: number | undefined;\\n        saltLength?: number | undefined;\\n        dsaEncoding?: DSAEncoding | undefined;\\n    }\\n    interface SignPrivateKeyInput extends PrivateKeyInput, SigningOptions {}\\n    interface SignKeyObjectInput extends SigningOptions {\\n        key: KeyObject;\\n    }\\n    interface VerifyPublicKeyInput extends PublicKeyInput, SigningOptions {}\\n    interface VerifyKeyObjectInput extends SigningOptions {\\n        key: KeyObject;\\n    }\\n    interface VerifyJsonWebKeyInput extends JsonWebKeyInput, SigningOptions {}\\n    type KeyLike = string | Buffer | KeyObject;\\n    /**\\n     * The `Sign` class is a utility for generating signatures. It can be used in one\\n     * of two ways:\\n     *\\n     * * As a writable `stream`, where data to be signed is written and the `sign.sign()` method is used to generate and return the signature, or\\n     * * Using the `sign.update()` and `sign.sign()` methods to produce the\\n     * signature.\\n     *\\n     * The {@link createSign} method is used to create `Sign` instances. The\\n     * argument is the string name of the hash function to use. `Sign` objects are not\\n     * to be created directly using the `new` keyword.\\n     *\\n     * Example: Using `Sign` and `Verify` objects as streams:\\n     *\\n     * ```js\\n     * const {\\n     *   generateKeyPairSync,\\n     *   createSign,\\n     *   createVerify\\n     * } = await import('crypto');\\n     *\\n     * const { privateKey, publicKey } = generateKeyPairSync('ec', {\\n     *   namedCurve: 'sect239k1'\\n     * });\\n     *\\n     * const sign = createSign('SHA256');\\n     * sign.write('some data to sign');\\n     * sign.end();\\n     * const signature = sign.sign(privateKey, 'hex');\\n     *\\n     * const verify = createVerify('SHA256');\\n     * verify.write('some data to sign');\\n     * verify.end();\\n     * console.log(verify.verify(publicKey, signature, 'hex'));\\n     * // Prints: true\\n     * ```\\n     *\\n     * Example: Using the `sign.update()` and `verify.update()` methods:\\n     *\\n     * ```js\\n     * const {\\n     *   generateKeyPairSync,\\n     *   createSign,\\n     *   createVerify\\n     * } = await import('crypto');\\n     *\\n     * const { privateKey, publicKey } = generateKeyPairSync('rsa', {\\n     *   modulusLength: 2048,\\n     * });\\n     *\\n     * const sign = createSign('SHA256');\\n     * sign.update('some data to sign');\\n     * sign.end();\\n     * const signature = sign.sign(privateKey);\\n     *\\n     * const verify = createVerify('SHA256');\\n     * verify.update('some data to sign');\\n     * verify.end();\\n     * console.log(verify.verify(publicKey, signature));\\n     * // Prints: true\\n     * ```\\n     * @since v0.1.92\\n     */\\n    class Sign extends stream.Writable {\\n        private constructor();\\n        /**\\n         * Updates the `Sign` content with the given `data`, the encoding of which\\n         * is given in `inputEncoding`.\\n         * If `encoding` is not provided, and the `data` is a string, an\\n         * encoding of `'utf8'` is enforced. If `data` is a `Buffer`, `TypedArray`, or`DataView`, then `inputEncoding` is ignored.\\n         *\\n         * This can be called many times with new data as it is streamed.\\n         * @since v0.1.92\\n         * @param inputEncoding The `encoding` of the `data` string.\\n         */\\n        update(data: BinaryLike): this;\\n        update(data: string, inputEncoding: Encoding): this;\\n        /**\\n         * Calculates the signature on all the data passed through using either `sign.update()` or `sign.write()`.\\n         *\\n         * If `privateKey` is not a `KeyObject`, this function behaves as if`privateKey` had been passed to {@link createPrivateKey}. If it is an\\n         * object, the following additional properties can be passed:\\n         *\\n         * If `outputEncoding` is provided a string is returned; otherwise a `Buffer` is returned.\\n         *\\n         * The `Sign` object can not be again used after `sign.sign()` method has been\\n         * called. Multiple calls to `sign.sign()` will result in an error being thrown.\\n         * @since v0.1.92\\n         */\\n        sign(privateKey: KeyLike | SignKeyObjectInput | SignPrivateKeyInput): Buffer;\\n        sign(privateKey: KeyLike | SignKeyObjectInput | SignPrivateKeyInput, outputFormat: BinaryToTextEncoding): string;\\n    }\\n    /**\\n     * Creates and returns a `Verify` object that uses the given algorithm.\\n     * Use {@link getHashes} to obtain an array of names of the available\\n     * signing algorithms. Optional `options` argument controls the`stream.Writable` behavior.\\n     *\\n     * In some cases, a `Verify` instance can be created using the name of a signature\\n     * algorithm, such as `'RSA-SHA256'`, instead of a digest algorithm. This will use\\n     * the corresponding digest algorithm. This does not work for all signature\\n     * algorithms, such as `'ecdsa-with-SHA256'`, so it is best to always use digest\\n     * algorithm names.\\n     * @since v0.1.92\\n     * @param options `stream.Writable` options\\n     */\\n    function createVerify(algorithm: string, options?: stream.WritableOptions): Verify;\\n    /**\\n     * The `Verify` class is a utility for verifying signatures. It can be used in one\\n     * of two ways:\\n     *\\n     * * As a writable `stream` where written data is used to validate against the\\n     * supplied signature, or\\n     * * Using the `verify.update()` and `verify.verify()` methods to verify\\n     * the signature.\\n     *\\n     * The {@link createVerify} method is used to create `Verify` instances.`Verify` objects are not to be created directly using the `new` keyword.\\n     *\\n     * See `Sign` for examples.\\n     * @since v0.1.92\\n     */\\n    class Verify extends stream.Writable {\\n        private constructor();\\n        /**\\n         * Updates the `Verify` content with the given `data`, the encoding of which\\n         * is given in `inputEncoding`.\\n         * If `inputEncoding` is not provided, and the `data` is a string, an\\n         * encoding of `'utf8'` is enforced. If `data` is a `Buffer`, `TypedArray`, or`DataView`, then `inputEncoding` is ignored.\\n         *\\n         * This can be called many times with new data as it is streamed.\\n         * @since v0.1.92\\n         * @param inputEncoding The `encoding` of the `data` string.\\n         */\\n        update(data: BinaryLike): Verify;\\n        update(data: string, inputEncoding: Encoding): Verify;\\n        /**\\n         * Verifies the provided data using the given `object` and `signature`.\\n         *\\n         * If `object` is not a `KeyObject`, this function behaves as if`object` had been passed to {@link createPublicKey}. If it is an\\n         * object, the following additional properties can be passed:\\n         *\\n         * The `signature` argument is the previously calculated signature for the data, in\\n         * the `signatureEncoding`.\\n         * If a `signatureEncoding` is specified, the `signature` is expected to be a\\n         * string; otherwise `signature` is expected to be a `Buffer`,`TypedArray`, or `DataView`.\\n         *\\n         * The `verify` object can not be used again after `verify.verify()` has been\\n         * called. Multiple calls to `verify.verify()` will result in an error being\\n         * thrown.\\n         *\\n         * Because public keys can be derived from private keys, a private key may\\n         * be passed instead of a public key.\\n         * @since v0.1.92\\n         */\\n        verify(object: KeyLike | VerifyKeyObjectInput | VerifyPublicKeyInput | VerifyJsonWebKeyInput, signature: NodeJS.ArrayBufferView): boolean;\\n        verify(object: KeyLike | VerifyKeyObjectInput | VerifyPublicKeyInput | VerifyJsonWebKeyInput, signature: string, signature_format?: BinaryToTextEncoding): boolean;\\n    }\\n    /**\\n     * Creates a `DiffieHellman` key exchange object using the supplied `prime` and an\\n     * optional specific `generator`.\\n     *\\n     * The `generator` argument can be a number, string, or `Buffer`. If`generator` is not specified, the value `2` is used.\\n     *\\n     * If `primeEncoding` is specified, `prime` is expected to be a string; otherwise\\n     * a `Buffer`, `TypedArray`, or `DataView` is expected.\\n     *\\n     * If `generatorEncoding` is specified, `generator` is expected to be a string;\\n     * otherwise a number, `Buffer`, `TypedArray`, or `DataView` is expected.\\n     * @since v0.11.12\\n     * @param primeEncoding The `encoding` of the `prime` string.\\n     * @param [generator=2]\\n     * @param generatorEncoding The `encoding` of the `generator` string.\\n     */\\n    function createDiffieHellman(primeLength: number, generator?: number): DiffieHellman;\\n    function createDiffieHellman(prime: ArrayBuffer | NodeJS.ArrayBufferView, generator?: number | ArrayBuffer | NodeJS.ArrayBufferView): DiffieHellman;\\n    function createDiffieHellman(prime: ArrayBuffer | NodeJS.ArrayBufferView, generator: string, generatorEncoding: BinaryToTextEncoding): DiffieHellman;\\n    function createDiffieHellman(prime: string, primeEncoding: BinaryToTextEncoding, generator?: number | ArrayBuffer | NodeJS.ArrayBufferView): DiffieHellman;\\n    function createDiffieHellman(prime: string, primeEncoding: BinaryToTextEncoding, generator: string, generatorEncoding: BinaryToTextEncoding): DiffieHellman;\\n    /**\\n     * The `DiffieHellman` class is a utility for creating Diffie-Hellman key\\n     * exchanges.\\n     *\\n     * Instances of the `DiffieHellman` class can be created using the {@link createDiffieHellman} function.\\n     *\\n     * ```js\\n     * import assert from 'assert';\\n     *\\n     * const {\\n     *   createDiffieHellman\\n     * } = await import('crypto');\\n     *\\n     * // Generate Alice's keys...\\n     * const alice = createDiffieHellman(2048);\\n     * const aliceKey = alice.generateKeys();\\n     *\\n     * // Generate Bob's keys...\\n     * const bob = createDiffieHellman(alice.getPrime(), alice.getGenerator());\\n     * const bobKey = bob.generateKeys();\\n     *\\n     * // Exchange and generate the secret...\\n     * const aliceSecret = alice.computeSecret(bobKey);\\n     * const bobSecret = bob.computeSecret(aliceKey);\\n     *\\n     * // OK\\n     * assert.strictEqual(aliceSecret.toString('hex'), bobSecret.toString('hex'));\\n     * ```\\n     * @since v0.5.0\\n     */\\n    class DiffieHellman {\\n        private constructor();\\n        /**\\n         * Generates private and public Diffie-Hellman key values, and returns\\n         * the public key in the specified `encoding`. This key should be\\n         * transferred to the other party.\\n         * If `encoding` is provided a string is returned; otherwise a `Buffer` is returned.\\n         * @since v0.5.0\\n         * @param encoding The `encoding` of the return value.\\n         */\\n        generateKeys(): Buffer;\\n        generateKeys(encoding: BinaryToTextEncoding): string;\\n        /**\\n         * Computes the shared secret using `otherPublicKey` as the other\\n         * party's public key and returns the computed shared secret. The supplied\\n         * key is interpreted using the specified `inputEncoding`, and secret is\\n         * encoded using specified `outputEncoding`.\\n         * If the `inputEncoding` is not\\n         * provided, `otherPublicKey` is expected to be a `Buffer`,`TypedArray`, or `DataView`.\\n         *\\n         * If `outputEncoding` is given a string is returned; otherwise, a `Buffer` is returned.\\n         * @since v0.5.0\\n         * @param inputEncoding The `encoding` of an `otherPublicKey` string.\\n         * @param outputEncoding The `encoding` of the return value.\\n         */\\n        computeSecret(otherPublicKey: NodeJS.ArrayBufferView, inputEncoding?: null, outputEncoding?: null): Buffer;\\n        computeSecret(otherPublicKey: string, inputEncoding: BinaryToTextEncoding, outputEncoding?: null): Buffer;\\n        computeSecret(otherPublicKey: NodeJS.ArrayBufferView, inputEncoding: null, outputEncoding: BinaryToTextEncoding): string;\\n        computeSecret(otherPublicKey: string, inputEncoding: BinaryToTextEncoding, outputEncoding: BinaryToTextEncoding): string;\\n        /**\\n         * Returns the Diffie-Hellman prime in the specified `encoding`.\\n         * If `encoding` is provided a string is\\n         * returned; otherwise a `Buffer` is returned.\\n         * @since v0.5.0\\n         * @param encoding The `encoding` of the return value.\\n         */\\n        getPrime(): Buffer;\\n        getPrime(encoding: BinaryToTextEncoding): string;\\n        /**\\n         * Returns the Diffie-Hellman generator in the specified `encoding`.\\n         * If `encoding` is provided a string is\\n         * returned; otherwise a `Buffer` is returned.\\n         * @since v0.5.0\\n         * @param encoding The `encoding` of the return value.\\n         */\\n        getGenerator(): Buffer;\\n        getGenerator(encoding: BinaryToTextEncoding): string;\\n        /**\\n         * Returns the Diffie-Hellman public key in the specified `encoding`.\\n         * If `encoding` is provided a\\n         * string is returned; otherwise a `Buffer` is returned.\\n         * @since v0.5.0\\n         * @param encoding The `encoding` of the return value.\\n         */\\n        getPublicKey(): Buffer;\\n        getPublicKey(encoding: BinaryToTextEncoding): string;\\n        /**\\n         * Returns the Diffie-Hellman private key in the specified `encoding`.\\n         * If `encoding` is provided a\\n         * string is returned; otherwise a `Buffer` is returned.\\n         * @since v0.5.0\\n         * @param encoding The `encoding` of the return value.\\n         */\\n        getPrivateKey(): Buffer;\\n        getPrivateKey(encoding: BinaryToTextEncoding): string;\\n        /**\\n         * Sets the Diffie-Hellman public key. If the `encoding` argument is provided,`publicKey` is expected\\n         * to be a string. If no `encoding` is provided, `publicKey` is expected\\n         * to be a `Buffer`, `TypedArray`, or `DataView`.\\n         * @since v0.5.0\\n         * @param encoding The `encoding` of the `publicKey` string.\\n         */\\n        setPublicKey(publicKey: NodeJS.ArrayBufferView): void;\\n        setPublicKey(publicKey: string, encoding: BufferEncoding): void;\\n        /**\\n         * Sets the Diffie-Hellman private key. If the `encoding` argument is provided,`privateKey` is expected\\n         * to be a string. If no `encoding` is provided, `privateKey` is expected\\n         * to be a `Buffer`, `TypedArray`, or `DataView`.\\n         * @since v0.5.0\\n         * @param encoding The `encoding` of the `privateKey` string.\\n         */\\n        setPrivateKey(privateKey: NodeJS.ArrayBufferView): void;\\n        setPrivateKey(privateKey: string, encoding: BufferEncoding): void;\\n        /**\\n         * A bit field containing any warnings and/or errors resulting from a check\\n         * performed during initialization of the `DiffieHellman` object.\\n         *\\n         * The following values are valid for this property (as defined in `constants`module):\\n         *\\n         * * `DH_CHECK_P_NOT_SAFE_PRIME`\\n         * * `DH_CHECK_P_NOT_PRIME`\\n         * * `DH_UNABLE_TO_CHECK_GENERATOR`\\n         * * `DH_NOT_SUITABLE_GENERATOR`\\n         * @since v0.11.12\\n         */\\n        verifyError: number;\\n    }\\n    /**\\n     * The `DiffieHellmanGroup` class takes a well-known modp group as its argument.\\n     * It works the same as `DiffieHellman`, except that it does not allow changing its keys after creation.\\n     * In other words, it does not implement `setPublicKey()` or `setPrivateKey()` methods.\\n     *\\n     * ```js\\n     * const { createDiffieHellmanGroup } = await import('node:crypto');\\n     * const dh = createDiffieHellmanGroup('modp1');\\n     * ```\\n     * The name (e.g. `'modp1'`) is taken from [RFC 2412](https://www.rfc-editor.org/rfc/rfc2412.txt) (modp1 and 2) and [RFC 3526](https://www.rfc-editor.org/rfc/rfc3526.txt):\\n     * ```bash\\n     * $ perl -ne 'print \\\"$1\\\\n\\\" if /\\\"(modp\\\\d+)\\\"/' src/node_crypto_groups.h\\n     * modp1  #  768 bits\\n     * modp2  # 1024 bits\\n     * modp5  # 1536 bits\\n     * modp14 # 2048 bits\\n     * modp15 # etc.\\n     * modp16\\n     * modp17\\n     * modp18\\n     * ```\\n     * @since v0.7.5\\n     */\\n    const DiffieHellmanGroup: DiffieHellmanGroupConstructor;\\n    interface DiffieHellmanGroupConstructor {\\n        new(name: string): DiffieHellmanGroup;\\n        (name: string): DiffieHellmanGroup;\\n        readonly prototype: DiffieHellmanGroup;\\n    }\\n    type DiffieHellmanGroup = Omit<DiffieHellman, 'setPublicKey' | 'setPrivateKey'>;\\n    /**\\n     * Creates a predefined `DiffieHellmanGroup` key exchange object. The\\n     * supported groups are: `'modp1'`, `'modp2'`, `'modp5'` (defined in [RFC 2412](https://www.rfc-editor.org/rfc/rfc2412.txt), but see `Caveats`) and `'modp14'`, `'modp15'`,`'modp16'`, `'modp17'`,\\n     * `'modp18'` (defined in [RFC 3526](https://www.rfc-editor.org/rfc/rfc3526.txt)). The\\n     * returned object mimics the interface of objects created by {@link createDiffieHellman}, but will not allow changing\\n     * the keys (with `diffieHellman.setPublicKey()`, for example). The\\n     * advantage of using this method is that the parties do not have to\\n     * generate nor exchange a group modulus beforehand, saving both processor\\n     * and communication time.\\n     *\\n     * Example (obtaining a shared secret):\\n     *\\n     * ```js\\n     * const {\\n     *   getDiffieHellman\\n     * } = await import('crypto');\\n     * const alice = getDiffieHellman('modp14');\\n     * const bob = getDiffieHellman('modp14');\\n     *\\n     * alice.generateKeys();\\n     * bob.generateKeys();\\n     *\\n     * const aliceSecret = alice.computeSecret(bob.getPublicKey(), null, 'hex');\\n     * const bobSecret = bob.computeSecret(alice.getPublicKey(), null, 'hex');\\n     *\\n     * // aliceSecret and bobSecret should be the same\\n     * console.log(aliceSecret === bobSecret);\\n     * ```\\n     * @since v0.7.5\\n     */\\n    function getDiffieHellman(groupName: string): DiffieHellmanGroup;\\n    /**\\n     * An alias for {@link getDiffieHellman}\\n     * @since v0.9.3\\n     */\\n    function createDiffieHellmanGroup(name: string): DiffieHellmanGroup;\\n    /**\\n     * Provides an asynchronous Password-Based Key Derivation Function 2 (PBKDF2)\\n     * implementation. A selected HMAC digest algorithm specified by `digest` is\\n     * applied to derive a key of the requested byte length (`keylen`) from the`password`, `salt` and `iterations`.\\n     *\\n     * The supplied `callback` function is called with two arguments: `err` and`derivedKey`. If an error occurs while deriving the key, `err` will be set;\\n     * otherwise `err` will be `null`. By default, the successfully generated`derivedKey` will be passed to the callback as a `Buffer`. An error will be\\n     * thrown if any of the input arguments specify invalid values or types.\\n     *\\n     * If `digest` is `null`, `'sha1'` will be used. This behavior is deprecated,\\n     * please specify a `digest` explicitly.\\n     *\\n     * The `iterations` argument must be a number set as high as possible. The\\n     * higher the number of iterations, the more secure the derived key will be,\\n     * but will take a longer amount of time to complete.\\n     *\\n     * The `salt` should be as unique as possible. It is recommended that a salt is\\n     * random and at least 16 bytes long. See [NIST SP 800-132](https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf) for details.\\n     *\\n     * When passing strings for `password` or `salt`, please consider `caveats when using strings as inputs to cryptographic APIs`.\\n     *\\n     * ```js\\n     * const {\\n     *   pbkdf2\\n     * } = await import('crypto');\\n     *\\n     * pbkdf2('secret', 'salt', 100000, 64, 'sha512', (err, derivedKey) => {\\n     *   if (err) throw err;\\n     *   console.log(derivedKey.toString('hex'));  // '3745e48...08d59ae'\\n     * });\\n     * ```\\n     *\\n     * The `crypto.DEFAULT_ENCODING` property can be used to change the way the`derivedKey` is passed to the callback. This property, however, has been\\n     * deprecated and use should be avoided.\\n     *\\n     * ```js\\n     * import crypto from 'crypto';\\n     * crypto.DEFAULT_ENCODING = 'hex';\\n     * crypto.pbkdf2('secret', 'salt', 100000, 512, 'sha512', (err, derivedKey) => {\\n     *   if (err) throw err;\\n     *   console.log(derivedKey);  // '3745e48...aa39b34'\\n     * });\\n     * ```\\n     *\\n     * An array of supported digest functions can be retrieved using {@link getHashes}.\\n     *\\n     * This API uses libuv's threadpool, which can have surprising and\\n     * negative performance implications for some applications; see the `UV_THREADPOOL_SIZE` documentation for more information.\\n     * @since v0.5.5\\n     */\\n    function pbkdf2(password: BinaryLike, salt: BinaryLike, iterations: number, keylen: number, digest: string, callback: (err: Error | null, derivedKey: Buffer) => void): void;\\n    /**\\n     * Provides a synchronous Password-Based Key Derivation Function 2 (PBKDF2)\\n     * implementation. A selected HMAC digest algorithm specified by `digest` is\\n     * applied to derive a key of the requested byte length (`keylen`) from the`password`, `salt` and `iterations`.\\n     *\\n     * If an error occurs an `Error` will be thrown, otherwise the derived key will be\\n     * returned as a `Buffer`.\\n     *\\n     * If `digest` is `null`, `'sha1'` will be used. This behavior is deprecated,\\n     * please specify a `digest` explicitly.\\n     *\\n     * The `iterations` argument must be a number set as high as possible. The\\n     * higher the number of iterations, the more secure the derived key will be,\\n     * but will take a longer amount of time to complete.\\n     *\\n     * The `salt` should be as unique as possible. It is recommended that a salt is\\n     * random and at least 16 bytes long. See [NIST SP 800-132](https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf) for details.\\n     *\\n     * When passing strings for `password` or `salt`, please consider `caveats when using strings as inputs to cryptographic APIs`.\\n     *\\n     * ```js\\n     * const {\\n     *   pbkdf2Sync\\n     * } = await import('crypto');\\n     *\\n     * const key = pbkdf2Sync('secret', 'salt', 100000, 64, 'sha512');\\n     * console.log(key.toString('hex'));  // '3745e48...08d59ae'\\n     * ```\\n     *\\n     * The `crypto.DEFAULT_ENCODING` property may be used to change the way the`derivedKey` is returned. This property, however, is deprecated and use\\n     * should be avoided.\\n     *\\n     * ```js\\n     * import crypto from 'crypto';\\n     * crypto.DEFAULT_ENCODING = 'hex';\\n     * const key = crypto.pbkdf2Sync('secret', 'salt', 100000, 512, 'sha512');\\n     * console.log(key);  // '3745e48...aa39b34'\\n     * ```\\n     *\\n     * An array of supported digest functions can be retrieved using {@link getHashes}.\\n     * @since v0.9.3\\n     */\\n    function pbkdf2Sync(password: BinaryLike, salt: BinaryLike, iterations: number, keylen: number, digest: string): Buffer;\\n    /**\\n     * Generates cryptographically strong pseudorandom data. The `size` argument\\n     * is a number indicating the number of bytes to generate.\\n     *\\n     * If a `callback` function is provided, the bytes are generated asynchronously\\n     * and the `callback` function is invoked with two arguments: `err` and `buf`.\\n     * If an error occurs, `err` will be an `Error` object; otherwise it is `null`. The`buf` argument is a `Buffer` containing the generated bytes.\\n     *\\n     * ```js\\n     * // Asynchronous\\n     * const {\\n     *   randomBytes\\n     * } = await import('crypto');\\n     *\\n     * randomBytes(256, (err, buf) => {\\n     *   if (err) throw err;\\n     *   console.log(`${buf.length} bytes of random data: ${buf.toString('hex')}`);\\n     * });\\n     * ```\\n     *\\n     * If the `callback` function is not provided, the random bytes are generated\\n     * synchronously and returned as a `Buffer`. An error will be thrown if\\n     * there is a problem generating the bytes.\\n     *\\n     * ```js\\n     * // Synchronous\\n     * const {\\n     *   randomBytes\\n     * } = await import('crypto');\\n     *\\n     * const buf = randomBytes(256);\\n     * console.log(\\n     *   `${buf.length} bytes of random data: ${buf.toString('hex')}`);\\n     * ```\\n     *\\n     * The `crypto.randomBytes()` method will not complete until there is\\n     * sufficient entropy available.\\n     * This should normally never take longer than a few milliseconds. The only time\\n     * when generating the random bytes may conceivably block for a longer period of\\n     * time is right after boot, when the whole system is still low on entropy.\\n     *\\n     * This API uses libuv's threadpool, which can have surprising and\\n     * negative performance implications for some applications; see the `UV_THREADPOOL_SIZE` documentation for more information.\\n     *\\n     * The asynchronous version of `crypto.randomBytes()` is carried out in a single\\n     * threadpool request. To minimize threadpool task length variation, partition\\n     * large `randomBytes` requests when doing so as part of fulfilling a client\\n     * request.\\n     * @since v0.5.8\\n     * @param size The number of bytes to generate. The `size` must not be larger than `2**31 - 1`.\\n     * @return if the `callback` function is not provided.\\n     */\\n    function randomBytes(size: number): Buffer;\\n    function randomBytes(size: number, callback: (err: Error | null, buf: Buffer) => void): void;\\n    function pseudoRandomBytes(size: number): Buffer;\\n    function pseudoRandomBytes(size: number, callback: (err: Error | null, buf: Buffer) => void): void;\\n    /**\\n     * Return a random integer `n` such that `min <= n < max`.  This\\n     * implementation avoids [modulo bias](https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#Modulo_bias).\\n     *\\n     * The range (`max - min`) must be less than 2^48. `min` and `max` must\\n     * be [safe integers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger).\\n     *\\n     * If the `callback` function is not provided, the random integer is\\n     * generated synchronously.\\n     *\\n     * ```js\\n     * // Asynchronous\\n     * const {\\n     *   randomInt\\n     * } = await import('crypto');\\n     *\\n     * randomInt(3, (err, n) => {\\n     *   if (err) throw err;\\n     *   console.log(`Random number chosen from (0, 1, 2): ${n}`);\\n     * });\\n     * ```\\n     *\\n     * ```js\\n     * // Synchronous\\n     * const {\\n     *   randomInt\\n     * } = await import('crypto');\\n     *\\n     * const n = randomInt(3);\\n     * console.log(`Random number chosen from (0, 1, 2): ${n}`);\\n     * ```\\n     *\\n     * ```js\\n     * // With `min` argument\\n     * const {\\n     *   randomInt\\n     * } = await import('crypto');\\n     *\\n     * const n = randomInt(1, 7);\\n     * console.log(`The dice rolled: ${n}`);\\n     * ```\\n     * @since v14.10.0, v12.19.0\\n     * @param [min=0] Start of random range (inclusive).\\n     * @param max End of random range (exclusive).\\n     * @param callback `function(err, n) {}`.\\n     */\\n    function randomInt(max: number): number;\\n    function randomInt(min: number, max: number): number;\\n    function randomInt(max: number, callback: (err: Error | null, value: number) => void): void;\\n    function randomInt(min: number, max: number, callback: (err: Error | null, value: number) => void): void;\\n    /**\\n     * Synchronous version of {@link randomFill}.\\n     *\\n     * ```js\\n     * import { Buffer } from 'buffer';\\n     * const { randomFillSync } = await import('crypto');\\n     *\\n     * const buf = Buffer.alloc(10);\\n     * console.log(randomFillSync(buf).toString('hex'));\\n     *\\n     * randomFillSync(buf, 5);\\n     * console.log(buf.toString('hex'));\\n     *\\n     * // The above is equivalent to the following:\\n     * randomFillSync(buf, 5, 5);\\n     * console.log(buf.toString('hex'));\\n     * ```\\n     *\\n     * Any `ArrayBuffer`, `TypedArray` or `DataView` instance may be passed as`buffer`.\\n     *\\n     * ```js\\n     * import { Buffer } from 'buffer';\\n     * const { randomFillSync } = await import('crypto');\\n     *\\n     * const a = new Uint32Array(10);\\n     * console.log(Buffer.from(randomFillSync(a).buffer,\\n     *                         a.byteOffset, a.byteLength).toString('hex'));\\n     *\\n     * const b = new DataView(new ArrayBuffer(10));\\n     * console.log(Buffer.from(randomFillSync(b).buffer,\\n     *                         b.byteOffset, b.byteLength).toString('hex'));\\n     *\\n     * const c = new ArrayBuffer(10);\\n     * console.log(Buffer.from(randomFillSync(c)).toString('hex'));\\n     * ```\\n     * @since v7.10.0, v6.13.0\\n     * @param buffer Must be supplied. The size of the provided `buffer` must not be larger than `2**31 - 1`.\\n     * @param [offset=0]\\n     * @param [size=buffer.length - offset]\\n     * @return The object passed as `buffer` argument.\\n     */\\n    function randomFillSync<T extends NodeJS.ArrayBufferView>(buffer: T, offset?: number, size?: number): T;\\n    /**\\n     * This function is similar to {@link randomBytes} but requires the first\\n     * argument to be a `Buffer` that will be filled. It also\\n     * requires that a callback is passed in.\\n     *\\n     * If the `callback` function is not provided, an error will be thrown.\\n     *\\n     * ```js\\n     * import { Buffer } from 'buffer';\\n     * const { randomFill } = await import('crypto');\\n     *\\n     * const buf = Buffer.alloc(10);\\n     * randomFill(buf, (err, buf) => {\\n     *   if (err) throw err;\\n     *   console.log(buf.toString('hex'));\\n     * });\\n     *\\n     * randomFill(buf, 5, (err, buf) => {\\n     *   if (err) throw err;\\n     *   console.log(buf.toString('hex'));\\n     * });\\n     *\\n     * // The above is equivalent to the following:\\n     * randomFill(buf, 5, 5, (err, buf) => {\\n     *   if (err) throw err;\\n     *   console.log(buf.toString('hex'));\\n     * });\\n     * ```\\n     *\\n     * Any `ArrayBuffer`, `TypedArray`, or `DataView` instance may be passed as`buffer`.\\n     *\\n     * While this includes instances of `Float32Array` and `Float64Array`, this\\n     * function should not be used to generate random floating-point numbers. The\\n     * result may contain `+Infinity`, `-Infinity`, and `NaN`, and even if the array\\n     * contains finite numbers only, they are not drawn from a uniform random\\n     * distribution and have no meaningful lower or upper bounds.\\n     *\\n     * ```js\\n     * import { Buffer } from 'buffer';\\n     * const { randomFill } = await import('crypto');\\n     *\\n     * const a = new Uint32Array(10);\\n     * randomFill(a, (err, buf) => {\\n     *   if (err) throw err;\\n     *   console.log(Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength)\\n     *     .toString('hex'));\\n     * });\\n     *\\n     * const b = new DataView(new ArrayBuffer(10));\\n     * randomFill(b, (err, buf) => {\\n     *   if (err) throw err;\\n     *   console.log(Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength)\\n     *     .toString('hex'));\\n     * });\\n     *\\n     * const c = new ArrayBuffer(10);\\n     * randomFill(c, (err, buf) => {\\n     *   if (err) throw err;\\n     *   console.log(Buffer.from(buf).toString('hex'));\\n     * });\\n     * ```\\n     *\\n     * This API uses libuv's threadpool, which can have surprising and\\n     * negative performance implications for some applications; see the `UV_THREADPOOL_SIZE` documentation for more information.\\n     *\\n     * The asynchronous version of `crypto.randomFill()` is carried out in a single\\n     * threadpool request. To minimize threadpool task length variation, partition\\n     * large `randomFill` requests when doing so as part of fulfilling a client\\n     * request.\\n     * @since v7.10.0, v6.13.0\\n     * @param buffer Must be supplied. The size of the provided `buffer` must not be larger than `2**31 - 1`.\\n     * @param [offset=0]\\n     * @param [size=buffer.length - offset]\\n     * @param callback `function(err, buf) {}`.\\n     */\\n    function randomFill<T extends NodeJS.ArrayBufferView>(buffer: T, callback: (err: Error | null, buf: T) => void): void;\\n    function randomFill<T extends NodeJS.ArrayBufferView>(buffer: T, offset: number, callback: (err: Error | null, buf: T) => void): void;\\n    function randomFill<T extends NodeJS.ArrayBufferView>(buffer: T, offset: number, size: number, callback: (err: Error | null, buf: T) => void): void;\\n    interface ScryptOptions {\\n        cost?: number | undefined;\\n        blockSize?: number | undefined;\\n        parallelization?: number | undefined;\\n        N?: number | undefined;\\n        r?: number | undefined;\\n        p?: number | undefined;\\n        maxmem?: number | undefined;\\n    }\\n    /**\\n     * Provides an asynchronous [scrypt](https://en.wikipedia.org/wiki/Scrypt) implementation. Scrypt is a password-based\\n     * key derivation function that is designed to be expensive computationally and\\n     * memory-wise in order to make brute-force attacks unrewarding.\\n     *\\n     * The `salt` should be as unique as possible. It is recommended that a salt is\\n     * random and at least 16 bytes long. See [NIST SP 800-132](https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf) for details.\\n     *\\n     * When passing strings for `password` or `salt`, please consider `caveats when using strings as inputs to cryptographic APIs`.\\n     *\\n     * The `callback` function is called with two arguments: `err` and `derivedKey`.`err` is an exception object when key derivation fails, otherwise `err` is`null`. `derivedKey` is passed to the\\n     * callback as a `Buffer`.\\n     *\\n     * An exception is thrown when any of the input arguments specify invalid values\\n     * or types.\\n     *\\n     * ```js\\n     * const {\\n     *   scrypt\\n     * } = await import('crypto');\\n     *\\n     * // Using the factory defaults.\\n     * scrypt('password', 'salt', 64, (err, derivedKey) => {\\n     *   if (err) throw err;\\n     *   console.log(derivedKey.toString('hex'));  // '3745e48...08d59ae'\\n     * });\\n     * // Using a custom N parameter. Must be a power of two.\\n     * scrypt('password', 'salt', 64, { N: 1024 }, (err, derivedKey) => {\\n     *   if (err) throw err;\\n     *   console.log(derivedKey.toString('hex'));  // '3745e48...aa39b34'\\n     * });\\n     * ```\\n     * @since v10.5.0\\n     */\\n    function scrypt(password: BinaryLike, salt: BinaryLike, keylen: number, callback: (err: Error | null, derivedKey: Buffer) => void): void;\\n    function scrypt(password: BinaryLike, salt: BinaryLike, keylen: number, options: ScryptOptions, callback: (err: Error | null, derivedKey: Buffer) => void): void;\\n    /**\\n     * Provides a synchronous [scrypt](https://en.wikipedia.org/wiki/Scrypt) implementation. Scrypt is a password-based\\n     * key derivation function that is designed to be expensive computationally and\\n     * memory-wise in order to make brute-force attacks unrewarding.\\n     *\\n     * The `salt` should be as unique as possible. It is recommended that a salt is\\n     * random and at least 16 bytes long. See [NIST SP 800-132](https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf) for details.\\n     *\\n     * When passing strings for `password` or `salt`, please consider `caveats when using strings as inputs to cryptographic APIs`.\\n     *\\n     * An exception is thrown when key derivation fails, otherwise the derived key is\\n     * returned as a `Buffer`.\\n     *\\n     * An exception is thrown when any of the input arguments specify invalid values\\n     * or types.\\n     *\\n     * ```js\\n     * const {\\n     *   scryptSync\\n     * } = await import('crypto');\\n     * // Using the factory defaults.\\n     *\\n     * const key1 = scryptSync('password', 'salt', 64);\\n     * console.log(key1.toString('hex'));  // '3745e48...08d59ae'\\n     * // Using a custom N parameter. Must be a power of two.\\n     * const key2 = scryptSync('password', 'salt', 64, { N: 1024 });\\n     * console.log(key2.toString('hex'));  // '3745e48...aa39b34'\\n     * ```\\n     * @since v10.5.0\\n     */\\n    function scryptSync(password: BinaryLike, salt: BinaryLike, keylen: number, options?: ScryptOptions): Buffer;\\n    interface RsaPublicKey {\\n        key: KeyLike;\\n        padding?: number | undefined;\\n    }\\n    interface RsaPrivateKey {\\n        key: KeyLike;\\n        passphrase?: string | undefined;\\n        /**\\n         * @default 'sha1'\\n         */\\n        oaepHash?: string | undefined;\\n        oaepLabel?: NodeJS.TypedArray | undefined;\\n        padding?: number | undefined;\\n    }\\n    /**\\n     * Encrypts the content of `buffer` with `key` and returns a new `Buffer` with encrypted content. The returned data can be decrypted using\\n     * the corresponding private key, for example using {@link privateDecrypt}.\\n     *\\n     * If `key` is not a `KeyObject`, this function behaves as if`key` had been passed to {@link createPublicKey}. If it is an\\n     * object, the `padding` property can be passed. Otherwise, this function uses`RSA_PKCS1_OAEP_PADDING`.\\n     *\\n     * Because RSA public keys can be derived from private keys, a private key may\\n     * be passed instead of a public key.\\n     * @since v0.11.14\\n     */\\n    function publicEncrypt(key: RsaPublicKey | RsaPrivateKey | KeyLike, buffer: NodeJS.ArrayBufferView): Buffer;\\n    /**\\n     * Decrypts `buffer` with `key`.`buffer` was previously encrypted using\\n     * the corresponding private key, for example using {@link privateEncrypt}.\\n     *\\n     * If `key` is not a `KeyObject`, this function behaves as if`key` had been passed to {@link createPublicKey}. If it is an\\n     * object, the `padding` property can be passed. Otherwise, this function uses`RSA_PKCS1_PADDING`.\\n     *\\n     * Because RSA public keys can be derived from private keys, a private key may\\n     * be passed instead of a public key.\\n     * @since v1.1.0\\n     */\\n    function publicDecrypt(key: RsaPublicKey | RsaPrivateKey | KeyLike, buffer: NodeJS.ArrayBufferView): Buffer;\\n    /**\\n     * Decrypts `buffer` with `privateKey`. `buffer` was previously encrypted using\\n     * the corresponding public key, for example using {@link publicEncrypt}.\\n     *\\n     * If `privateKey` is not a `KeyObject`, this function behaves as if`privateKey` had been passed to {@link createPrivateKey}. If it is an\\n     * object, the `padding` property can be passed. Otherwise, this function uses`RSA_PKCS1_OAEP_PADDING`.\\n     * @since v0.11.14\\n     */\\n    function privateDecrypt(privateKey: RsaPrivateKey | KeyLike, buffer: NodeJS.ArrayBufferView): Buffer;\\n    /**\\n     * Encrypts `buffer` with `privateKey`. The returned data can be decrypted using\\n     * the corresponding public key, for example using {@link publicDecrypt}.\\n     *\\n     * If `privateKey` is not a `KeyObject`, this function behaves as if`privateKey` had been passed to {@link createPrivateKey}. If it is an\\n     * object, the `padding` property can be passed. Otherwise, this function uses`RSA_PKCS1_PADDING`.\\n     * @since v1.1.0\\n     */\\n    function privateEncrypt(privateKey: RsaPrivateKey | KeyLike, buffer: NodeJS.ArrayBufferView): Buffer;\\n    /**\\n     * ```js\\n     * const {\\n     *   getCiphers\\n     * } = await import('crypto');\\n     *\\n     * console.log(getCiphers()); // ['aes-128-cbc', 'aes-128-ccm', ...]\\n     * ```\\n     * @since v0.9.3\\n     * @return An array with the names of the supported cipher algorithms.\\n     */\\n    function getCiphers(): string[];\\n    /**\\n     * ```js\\n     * const {\\n     *   getCurves\\n     * } = await import('crypto');\\n     *\\n     * console.log(getCurves()); // ['Oakley-EC2N-3', 'Oakley-EC2N-4', ...]\\n     * ```\\n     * @since v2.3.0\\n     * @return An array with the names of the supported elliptic curves.\\n     */\\n    function getCurves(): string[];\\n    /**\\n     * @since v10.0.0\\n     * @return `1` if and only if a FIPS compliant crypto provider is currently in use, `0` otherwise. A future semver-major release may change the return type of this API to a {boolean}.\\n     */\\n    function getFips(): 1 | 0;\\n    /**\\n     * Enables the FIPS compliant crypto provider in a FIPS-enabled Node.js build. Throws an error if FIPS mode is not available.\\n     * @since v10.0.0\\n     * @param bool `true` to enable FIPS mode.\\n     */\\n    function setFips(bool: boolean): void;\\n    /**\\n     * ```js\\n     * const {\\n     *   getHashes\\n     * } = await import('crypto');\\n     *\\n     * console.log(getHashes()); // ['DSA', 'DSA-SHA', 'DSA-SHA1', ...]\\n     * ```\\n     * @since v0.9.3\\n     * @return An array of the names of the supported hash algorithms, such as `'RSA-SHA256'`. Hash algorithms are also called \\\"digest\\\" algorithms.\\n     */\\n    function getHashes(): string[];\\n    /**\\n     * The `ECDH` class is a utility for creating Elliptic Curve Diffie-Hellman (ECDH)\\n     * key exchanges.\\n     *\\n     * Instances of the `ECDH` class can be created using the {@link createECDH} function.\\n     *\\n     * ```js\\n     * import assert from 'assert';\\n     *\\n     * const {\\n     *   createECDH\\n     * } = await import('crypto');\\n     *\\n     * // Generate Alice's keys...\\n     * const alice = createECDH('secp521r1');\\n     * const aliceKey = alice.generateKeys();\\n     *\\n     * // Generate Bob's keys...\\n     * const bob = createECDH('secp521r1');\\n     * const bobKey = bob.generateKeys();\\n     *\\n     * // Exchange and generate the secret...\\n     * const aliceSecret = alice.computeSecret(bobKey);\\n     * const bobSecret = bob.computeSecret(aliceKey);\\n     *\\n     * assert.strictEqual(aliceSecret.toString('hex'), bobSecret.toString('hex'));\\n     * // OK\\n     * ```\\n     * @since v0.11.14\\n     */\\n    class ECDH {\\n        private constructor();\\n        /**\\n         * Converts the EC Diffie-Hellman public key specified by `key` and `curve` to the\\n         * format specified by `format`. The `format` argument specifies point encoding\\n         * and can be `'compressed'`, `'uncompressed'` or `'hybrid'`. The supplied key is\\n         * interpreted using the specified `inputEncoding`, and the returned key is encoded\\n         * using the specified `outputEncoding`.\\n         *\\n         * Use {@link getCurves} to obtain a list of available curve names.\\n         * On recent OpenSSL releases, `openssl ecparam -list_curves` will also display\\n         * the name and description of each available elliptic curve.\\n         *\\n         * If `format` is not specified the point will be returned in `'uncompressed'`format.\\n         *\\n         * If the `inputEncoding` is not provided, `key` is expected to be a `Buffer`,`TypedArray`, or `DataView`.\\n         *\\n         * Example (uncompressing a key):\\n         *\\n         * ```js\\n         * const {\\n         *   createECDH,\\n         *   ECDH\\n         * } = await import('crypto');\\n         *\\n         * const ecdh = createECDH('secp256k1');\\n         * ecdh.generateKeys();\\n         *\\n         * const compressedKey = ecdh.getPublicKey('hex', 'compressed');\\n         *\\n         * const uncompressedKey = ECDH.convertKey(compressedKey,\\n         *                                         'secp256k1',\\n         *                                         'hex',\\n         *                                         'hex',\\n         *                                         'uncompressed');\\n         *\\n         * // The converted key and the uncompressed public key should be the same\\n         * console.log(uncompressedKey === ecdh.getPublicKey('hex'));\\n         * ```\\n         * @since v10.0.0\\n         * @param inputEncoding The `encoding` of the `key` string.\\n         * @param outputEncoding The `encoding` of the return value.\\n         * @param [format='uncompressed']\\n         */\\n        static convertKey(\\n            key: BinaryLike,\\n            curve: string,\\n            inputEncoding?: BinaryToTextEncoding,\\n            outputEncoding?: 'latin1' | 'hex' | 'base64' | 'base64url',\\n            format?: 'uncompressed' | 'compressed' | 'hybrid'\\n        ): Buffer | string;\\n        /**\\n         * Generates private and public EC Diffie-Hellman key values, and returns\\n         * the public key in the specified `format` and `encoding`. This key should be\\n         * transferred to the other party.\\n         *\\n         * The `format` argument specifies point encoding and can be `'compressed'` or`'uncompressed'`. If `format` is not specified, the point will be returned in`'uncompressed'` format.\\n         *\\n         * If `encoding` is provided a string is returned; otherwise a `Buffer` is returned.\\n         * @since v0.11.14\\n         * @param encoding The `encoding` of the return value.\\n         * @param [format='uncompressed']\\n         */\\n        generateKeys(): Buffer;\\n        generateKeys(encoding: BinaryToTextEncoding, format?: ECDHKeyFormat): string;\\n        /**\\n         * Computes the shared secret using `otherPublicKey` as the other\\n         * party's public key and returns the computed shared secret. The supplied\\n         * key is interpreted using specified `inputEncoding`, and the returned secret\\n         * is encoded using the specified `outputEncoding`.\\n         * If the `inputEncoding` is not\\n         * provided, `otherPublicKey` is expected to be a `Buffer`, `TypedArray`, or`DataView`.\\n         *\\n         * If `outputEncoding` is given a string will be returned; otherwise a `Buffer` is returned.\\n         *\\n         * `ecdh.computeSecret` will throw an`ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY` error when `otherPublicKey`lies outside of the elliptic curve. Since `otherPublicKey` is\\n         * usually supplied from a remote user over an insecure network,\\n         * be sure to handle this exception accordingly.\\n         * @since v0.11.14\\n         * @param inputEncoding The `encoding` of the `otherPublicKey` string.\\n         * @param outputEncoding The `encoding` of the return value.\\n         */\\n        computeSecret(otherPublicKey: NodeJS.ArrayBufferView): Buffer;\\n        computeSecret(otherPublicKey: string, inputEncoding: BinaryToTextEncoding): Buffer;\\n        computeSecret(otherPublicKey: NodeJS.ArrayBufferView, outputEncoding: BinaryToTextEncoding): string;\\n        computeSecret(otherPublicKey: string, inputEncoding: BinaryToTextEncoding, outputEncoding: BinaryToTextEncoding): string;\\n        /**\\n         * If `encoding` is specified, a string is returned; otherwise a `Buffer` is\\n         * returned.\\n         * @since v0.11.14\\n         * @param encoding The `encoding` of the return value.\\n         * @return The EC Diffie-Hellman in the specified `encoding`.\\n         */\\n        getPrivateKey(): Buffer;\\n        getPrivateKey(encoding: BinaryToTextEncoding): string;\\n        /**\\n         * The `format` argument specifies point encoding and can be `'compressed'` or`'uncompressed'`. If `format` is not specified the point will be returned in`'uncompressed'` format.\\n         *\\n         * If `encoding` is specified, a string is returned; otherwise a `Buffer` is\\n         * returned.\\n         * @since v0.11.14\\n         * @param [encoding] The `encoding` of the return value.\\n         * @param [format='uncompressed']\\n         * @return The EC Diffie-Hellman public key in the specified `encoding` and `format`.\\n         */\\n        getPublicKey(encoding?: null, format?: ECDHKeyFormat): Buffer;\\n        getPublicKey(encoding: BinaryToTextEncoding, format?: ECDHKeyFormat): string;\\n        /**\\n         * Sets the EC Diffie-Hellman private key.\\n         * If `encoding` is provided, `privateKey` is expected\\n         * to be a string; otherwise `privateKey` is expected to be a `Buffer`,`TypedArray`, or `DataView`.\\n         *\\n         * If `privateKey` is not valid for the curve specified when the `ECDH` object was\\n         * created, an error is thrown. Upon setting the private key, the associated\\n         * public point (key) is also generated and set in the `ECDH` object.\\n         * @since v0.11.14\\n         * @param encoding The `encoding` of the `privateKey` string.\\n         */\\n        setPrivateKey(privateKey: NodeJS.ArrayBufferView): void;\\n        setPrivateKey(privateKey: string, encoding: BinaryToTextEncoding): void;\\n    }\\n    /**\\n     * Creates an Elliptic Curve Diffie-Hellman (`ECDH`) key exchange object using a\\n     * predefined curve specified by the `curveName` string. Use {@link getCurves} to obtain a list of available curve names. On recent\\n     * OpenSSL releases, `openssl ecparam -list_curves` will also display the name\\n     * and description of each available elliptic curve.\\n     * @since v0.11.14\\n     */\\n    function createECDH(curveName: string): ECDH;\\n    /**\\n     * This function is based on a constant-time algorithm.\\n     * Returns true if `a` is equal to `b`, without leaking timing information that\\n     * would allow an attacker to guess one of the values. This is suitable for\\n     * comparing HMAC digests or secret values like authentication cookies or [capability urls](https://www.w3.org/TR/capability-urls/).\\n     *\\n     * `a` and `b` must both be `Buffer`s, `TypedArray`s, or `DataView`s, and they\\n     * must have the same byte length. An error is thrown if `a` and `b` have\\n     * different byte lengths.\\n     *\\n     * If at least one of `a` and `b` is a `TypedArray` with more than one byte per\\n     * entry, such as `Uint16Array`, the result will be computed using the platform\\n     * byte order.\\n     *\\n     * Use of `crypto.timingSafeEqual` does not guarantee that the _surrounding_ code\\n     * is timing-safe. Care should be taken to ensure that the surrounding code does\\n     * not introduce timing vulnerabilities.\\n     * @since v6.6.0\\n     */\\n    function timingSafeEqual(a: NodeJS.ArrayBufferView, b: NodeJS.ArrayBufferView): boolean;\\n    /** @deprecated since v10.0.0 */\\n    const DEFAULT_ENCODING: BufferEncoding;\\n    type KeyType = 'rsa' | 'rsa-pss' | 'dsa' | 'ec' | 'ed25519' | 'ed448' | 'x25519' | 'x448';\\n    type KeyFormat = 'pem' | 'der' | 'jwk';\\n    interface BasePrivateKeyEncodingOptions<T extends KeyFormat> {\\n        format: T;\\n        cipher?: string | undefined;\\n        passphrase?: string | undefined;\\n    }\\n    interface KeyPairKeyObjectResult {\\n        publicKey: KeyObject;\\n        privateKey: KeyObject;\\n    }\\n    interface ED25519KeyPairKeyObjectOptions {}\\n    interface ED448KeyPairKeyObjectOptions {}\\n    interface X25519KeyPairKeyObjectOptions {}\\n    interface X448KeyPairKeyObjectOptions {}\\n    interface ECKeyPairKeyObjectOptions {\\n        /**\\n         * Name of the curve to use\\n         */\\n        namedCurve: string;\\n    }\\n    interface RSAKeyPairKeyObjectOptions {\\n        /**\\n         * Key size in bits\\n         */\\n        modulusLength: number;\\n        /**\\n         * Public exponent\\n         * @default 0x10001\\n         */\\n        publicExponent?: number | undefined;\\n    }\\n    interface RSAPSSKeyPairKeyObjectOptions {\\n        /**\\n         * Key size in bits\\n         */\\n        modulusLength: number;\\n        /**\\n         * Public exponent\\n         * @default 0x10001\\n         */\\n        publicExponent?: number | undefined;\\n        /**\\n         * Name of the message digest\\n         */\\n        hashAlgorithm?: string;\\n        /**\\n         * Name of the message digest used by MGF1\\n         */\\n        mgf1HashAlgorithm?: string;\\n        /**\\n         * Minimal salt length in bytes\\n         */\\n        saltLength?: string;\\n    }\\n    interface DSAKeyPairKeyObjectOptions {\\n        /**\\n         * Key size in bits\\n         */\\n        modulusLength: number;\\n        /**\\n         * Size of q in bits\\n         */\\n        divisorLength: number;\\n    }\\n    interface RSAKeyPairOptions<PubF extends KeyFormat, PrivF extends KeyFormat> {\\n        /**\\n         * Key size in bits\\n         */\\n        modulusLength: number;\\n        /**\\n         * Public exponent\\n         * @default 0x10001\\n         */\\n        publicExponent?: number | undefined;\\n        publicKeyEncoding: {\\n            type: 'pkcs1' | 'spki';\\n            format: PubF;\\n        };\\n        privateKeyEncoding: BasePrivateKeyEncodingOptions<PrivF> & {\\n            type: 'pkcs1' | 'pkcs8';\\n        };\\n    }\\n    interface RSAPSSKeyPairOptions<PubF extends KeyFormat, PrivF extends KeyFormat> {\\n        /**\\n         * Key size in bits\\n         */\\n        modulusLength: number;\\n        /**\\n         * Public exponent\\n         * @default 0x10001\\n         */\\n        publicExponent?: number | undefined;\\n        /**\\n         * Name of the message digest\\n         */\\n        hashAlgorithm?: string;\\n        /**\\n         * Name of the message digest used by MGF1\\n         */\\n        mgf1HashAlgorithm?: string;\\n        /**\\n         * Minimal salt length in bytes\\n         */\\n        saltLength?: string;\\n        publicKeyEncoding: {\\n            type: 'spki';\\n            format: PubF;\\n        };\\n        privateKeyEncoding: BasePrivateKeyEncodingOptions<PrivF> & {\\n            type: 'pkcs8';\\n        };\\n    }\\n    interface DSAKeyPairOptions<PubF extends KeyFormat, PrivF extends KeyFormat> {\\n        /**\\n         * Key size in bits\\n         */\\n        modulusLength: number;\\n        /**\\n         * Size of q in bits\\n         */\\n        divisorLength: number;\\n        publicKeyEncoding: {\\n            type: 'spki';\\n            format: PubF;\\n        };\\n        privateKeyEncoding: BasePrivateKeyEncodingOptions<PrivF> & {\\n            type: 'pkcs8';\\n        };\\n    }\\n    interface ECKeyPairOptions<PubF extends KeyFormat, PrivF extends KeyFormat> {\\n        /**\\n         * Name of the curve to use.\\n         */\\n        namedCurve: string;\\n        publicKeyEncoding: {\\n            type: 'pkcs1' | 'spki';\\n            format: PubF;\\n        };\\n        privateKeyEncoding: BasePrivateKeyEncodingOptions<PrivF> & {\\n            type: 'sec1' | 'pkcs8';\\n        };\\n    }\\n    interface ED25519KeyPairOptions<PubF extends KeyFormat, PrivF extends KeyFormat> {\\n        publicKeyEncoding: {\\n            type: 'spki';\\n            format: PubF;\\n        };\\n        privateKeyEncoding: BasePrivateKeyEncodingOptions<PrivF> & {\\n            type: 'pkcs8';\\n        };\\n    }\\n    interface ED448KeyPairOptions<PubF extends KeyFormat, PrivF extends KeyFormat> {\\n        publicKeyEncoding: {\\n            type: 'spki';\\n            format: PubF;\\n        };\\n        privateKeyEncoding: BasePrivateKeyEncodingOptions<PrivF> & {\\n            type: 'pkcs8';\\n        };\\n    }\\n    interface X25519KeyPairOptions<PubF extends KeyFormat, PrivF extends KeyFormat> {\\n        publicKeyEncoding: {\\n            type: 'spki';\\n            format: PubF;\\n        };\\n        privateKeyEncoding: BasePrivateKeyEncodingOptions<PrivF> & {\\n            type: 'pkcs8';\\n        };\\n    }\\n    interface X448KeyPairOptions<PubF extends KeyFormat, PrivF extends KeyFormat> {\\n        publicKeyEncoding: {\\n            type: 'spki';\\n            format: PubF;\\n        };\\n        privateKeyEncoding: BasePrivateKeyEncodingOptions<PrivF> & {\\n            type: 'pkcs8';\\n        };\\n    }\\n    interface KeyPairSyncResult<T1 extends string | Buffer, T2 extends string | Buffer> {\\n        publicKey: T1;\\n        privateKey: T2;\\n    }\\n    /**\\n     * Generates a new asymmetric key pair of the given `type`. RSA, RSA-PSS, DSA, EC,\\n     * Ed25519, Ed448, X25519, X448, and DH are currently supported.\\n     *\\n     * If a `publicKeyEncoding` or `privateKeyEncoding` was specified, this function\\n     * behaves as if `keyObject.export()` had been called on its result. Otherwise,\\n     * the respective part of the key is returned as a `KeyObject`.\\n     *\\n     * When encoding public keys, it is recommended to use `'spki'`. When encoding\\n     * private keys, it is recommended to use `'pkcs8'` with a strong passphrase,\\n     * and to keep the passphrase confidential.\\n     *\\n     * ```js\\n     * const {\\n     *   generateKeyPairSync\\n     * } = await import('crypto');\\n     *\\n     * const {\\n     *   publicKey,\\n     *   privateKey,\\n     * } = generateKeyPairSync('rsa', {\\n     *   modulusLength: 4096,\\n     *   publicKeyEncoding: {\\n     *     type: 'spki',\\n     *     format: 'pem'\\n     *   },\\n     *   privateKeyEncoding: {\\n     *     type: 'pkcs8',\\n     *     format: 'pem',\\n     *     cipher: 'aes-256-cbc',\\n     *     passphrase: 'top secret'\\n     *   }\\n     * });\\n     * ```\\n     *\\n     * The return value `{ publicKey, privateKey }` represents the generated key pair.\\n     * When PEM encoding was selected, the respective key will be a string, otherwise\\n     * it will be a buffer containing the data encoded as DER.\\n     * @since v10.12.0\\n     * @param type Must be `'rsa'`, `'rsa-pss'`, `'dsa'`, `'ec'`, `'ed25519'`, `'ed448'`, `'x25519'`, `'x448'`, or `'dh'`.\\n     */\\n    function generateKeyPairSync(type: 'rsa', options: RSAKeyPairOptions<'pem', 'pem'>): KeyPairSyncResult<string, string>;\\n    function generateKeyPairSync(type: 'rsa', options: RSAKeyPairOptions<'pem', 'der'>): KeyPairSyncResult<string, Buffer>;\\n    function generateKeyPairSync(type: 'rsa', options: RSAKeyPairOptions<'der', 'pem'>): KeyPairSyncResult<Buffer, string>;\\n    function generateKeyPairSync(type: 'rsa', options: RSAKeyPairOptions<'der', 'der'>): KeyPairSyncResult<Buffer, Buffer>;\\n    function generateKeyPairSync(type: 'rsa', options: RSAKeyPairKeyObjectOptions): KeyPairKeyObjectResult;\\n    function generateKeyPairSync(type: 'rsa-pss', options: RSAPSSKeyPairOptions<'pem', 'pem'>): KeyPairSyncResult<string, string>;\\n    function generateKeyPairSync(type: 'rsa-pss', options: RSAPSSKeyPairOptions<'pem', 'der'>): KeyPairSyncResult<string, Buffer>;\\n    function generateKeyPairSync(type: 'rsa-pss', options: RSAPSSKeyPairOptions<'der', 'pem'>): KeyPairSyncResult<Buffer, string>;\\n    function generateKeyPairSync(type: 'rsa-pss', options: RSAPSSKeyPairOptions<'der', 'der'>): KeyPairSyncResult<Buffer, Buffer>;\\n    function generateKeyPairSync(type: 'rsa-pss', options: RSAPSSKeyPairKeyObjectOptions): KeyPairKeyObjectResult;\\n    function generateKeyPairSync(type: 'dsa', options: DSAKeyPairOptions<'pem', 'pem'>): KeyPairSyncResult<string, string>;\\n    function generateKeyPairSync(type: 'dsa', options: DSAKeyPairOptions<'pem', 'der'>): KeyPairSyncResult<string, Buffer>;\\n    function generateKeyPairSync(type: 'dsa', options: DSAKeyPairOptions<'der', 'pem'>): KeyPairSyncResult<Buffer, string>;\\n    function generateKeyPairSync(type: 'dsa', options: DSAKeyPairOptions<'der', 'der'>): KeyPairSyncResult<Buffer, Buffer>;\\n    function generateKeyPairSync(type: 'dsa', options: DSAKeyPairKeyObjectOptions): KeyPairKeyObjectResult;\\n    function generateKeyPairSync(type: 'ec', options: ECKeyPairOptions<'pem', 'pem'>): KeyPairSyncResult<string, string>;\\n    function generateKeyPairSync(type: 'ec', options: ECKeyPairOptions<'pem', 'der'>): KeyPairSyncResult<string, Buffer>;\\n    function generateKeyPairSync(type: 'ec', options: ECKeyPairOptions<'der', 'pem'>): KeyPairSyncResult<Buffer, string>;\\n    function generateKeyPairSync(type: 'ec', options: ECKeyPairOptions<'der', 'der'>): KeyPairSyncResult<Buffer, Buffer>;\\n    function generateKeyPairSync(type: 'ec', options: ECKeyPairKeyObjectOptions): KeyPairKeyObjectResult;\\n    function generateKeyPairSync(type: 'ed25519', options: ED25519KeyPairOptions<'pem', 'pem'>): KeyPairSyncResult<string, string>;\\n    function generateKeyPairSync(type: 'ed25519', options: ED25519KeyPairOptions<'pem', 'der'>): KeyPairSyncResult<string, Buffer>;\\n    function generateKeyPairSync(type: 'ed25519', options: ED25519KeyPairOptions<'der', 'pem'>): KeyPairSyncResult<Buffer, string>;\\n    function generateKeyPairSync(type: 'ed25519', options: ED25519KeyPairOptions<'der', 'der'>): KeyPairSyncResult<Buffer, Buffer>;\\n    function generateKeyPairSync(type: 'ed25519', options?: ED25519KeyPairKeyObjectOptions): KeyPairKeyObjectResult;\\n    function generateKeyPairSync(type: 'ed448', options: ED448KeyPairOptions<'pem', 'pem'>): KeyPairSyncResult<string, string>;\\n    function generateKeyPairSync(type: 'ed448', options: ED448KeyPairOptions<'pem', 'der'>): KeyPairSyncResult<string, Buffer>;\\n    function generateKeyPairSync(type: 'ed448', options: ED448KeyPairOptions<'der', 'pem'>): KeyPairSyncResult<Buffer, string>;\\n    function generateKeyPairSync(type: 'ed448', options: ED448KeyPairOptions<'der', 'der'>): KeyPairSyncResult<Buffer, Buffer>;\\n    function generateKeyPairSync(type: 'ed448', options?: ED448KeyPairKeyObjectOptions): KeyPairKeyObjectResult;\\n    function generateKeyPairSync(type: 'x25519', options: X25519KeyPairOptions<'pem', 'pem'>): KeyPairSyncResult<string, string>;\\n    function generateKeyPairSync(type: 'x25519', options: X25519KeyPairOptions<'pem', 'der'>): KeyPairSyncResult<string, Buffer>;\\n    function generateKeyPairSync(type: 'x25519', options: X25519KeyPairOptions<'der', 'pem'>): KeyPairSyncResult<Buffer, string>;\\n    function generateKeyPairSync(type: 'x25519', options: X25519KeyPairOptions<'der', 'der'>): KeyPairSyncResult<Buffer, Buffer>;\\n    function generateKeyPairSync(type: 'x25519', options?: X25519KeyPairKeyObjectOptions): KeyPairKeyObjectResult;\\n    function generateKeyPairSync(type: 'x448', options: X448KeyPairOptions<'pem', 'pem'>): KeyPairSyncResult<string, string>;\\n    function generateKeyPairSync(type: 'x448', options: X448KeyPairOptions<'pem', 'der'>): KeyPairSyncResult<string, Buffer>;\\n    function generateKeyPairSync(type: 'x448', options: X448KeyPairOptions<'der', 'pem'>): KeyPairSyncResult<Buffer, string>;\\n    function generateKeyPairSync(type: 'x448', options: X448KeyPairOptions<'der', 'der'>): KeyPairSyncResult<Buffer, Buffer>;\\n    function generateKeyPairSync(type: 'x448', options?: X448KeyPairKeyObjectOptions): KeyPairKeyObjectResult;\\n    /**\\n     * Generates a new asymmetric key pair of the given `type`. RSA, RSA-PSS, DSA, EC,\\n     * Ed25519, Ed448, X25519, X448, and DH are currently supported.\\n     *\\n     * If a `publicKeyEncoding` or `privateKeyEncoding` was specified, this function\\n     * behaves as if `keyObject.export()` had been called on its result. Otherwise,\\n     * the respective part of the key is returned as a `KeyObject`.\\n     *\\n     * It is recommended to encode public keys as `'spki'` and private keys as`'pkcs8'` with encryption for long-term storage:\\n     *\\n     * ```js\\n     * const {\\n     *   generateKeyPair\\n     * } = await import('crypto');\\n     *\\n     * generateKeyPair('rsa', {\\n     *   modulusLength: 4096,\\n     *   publicKeyEncoding: {\\n     *     type: 'spki',\\n     *     format: 'pem'\\n     *   },\\n     *   privateKeyEncoding: {\\n     *     type: 'pkcs8',\\n     *     format: 'pem',\\n     *     cipher: 'aes-256-cbc',\\n     *     passphrase: 'top secret'\\n     *   }\\n     * }, (err, publicKey, privateKey) => {\\n     *   // Handle errors and use the generated key pair.\\n     * });\\n     * ```\\n     *\\n     * On completion, `callback` will be called with `err` set to `undefined` and`publicKey` / `privateKey` representing the generated key pair.\\n     *\\n     * If this method is invoked as its `util.promisify()` ed version, it returns\\n     * a `Promise` for an `Object` with `publicKey` and `privateKey` properties.\\n     * @since v10.12.0\\n     * @param type Must be `'rsa'`, `'rsa-pss'`, `'dsa'`, `'ec'`, `'ed25519'`, `'ed448'`, `'x25519'`, `'x448'`, or `'dh'`.\\n     */\\n    function generateKeyPair(type: 'rsa', options: RSAKeyPairOptions<'pem', 'pem'>, callback: (err: Error | null, publicKey: string, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'rsa', options: RSAKeyPairOptions<'pem', 'der'>, callback: (err: Error | null, publicKey: string, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'rsa', options: RSAKeyPairOptions<'der', 'pem'>, callback: (err: Error | null, publicKey: Buffer, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'rsa', options: RSAKeyPairOptions<'der', 'der'>, callback: (err: Error | null, publicKey: Buffer, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'rsa', options: RSAKeyPairKeyObjectOptions, callback: (err: Error | null, publicKey: KeyObject, privateKey: KeyObject) => void): void;\\n    function generateKeyPair(type: 'rsa-pss', options: RSAPSSKeyPairOptions<'pem', 'pem'>, callback: (err: Error | null, publicKey: string, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'rsa-pss', options: RSAPSSKeyPairOptions<'pem', 'der'>, callback: (err: Error | null, publicKey: string, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'rsa-pss', options: RSAPSSKeyPairOptions<'der', 'pem'>, callback: (err: Error | null, publicKey: Buffer, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'rsa-pss', options: RSAPSSKeyPairOptions<'der', 'der'>, callback: (err: Error | null, publicKey: Buffer, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'rsa-pss', options: RSAPSSKeyPairKeyObjectOptions, callback: (err: Error | null, publicKey: KeyObject, privateKey: KeyObject) => void): void;\\n    function generateKeyPair(type: 'dsa', options: DSAKeyPairOptions<'pem', 'pem'>, callback: (err: Error | null, publicKey: string, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'dsa', options: DSAKeyPairOptions<'pem', 'der'>, callback: (err: Error | null, publicKey: string, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'dsa', options: DSAKeyPairOptions<'der', 'pem'>, callback: (err: Error | null, publicKey: Buffer, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'dsa', options: DSAKeyPairOptions<'der', 'der'>, callback: (err: Error | null, publicKey: Buffer, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'dsa', options: DSAKeyPairKeyObjectOptions, callback: (err: Error | null, publicKey: KeyObject, privateKey: KeyObject) => void): void;\\n    function generateKeyPair(type: 'ec', options: ECKeyPairOptions<'pem', 'pem'>, callback: (err: Error | null, publicKey: string, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'ec', options: ECKeyPairOptions<'pem', 'der'>, callback: (err: Error | null, publicKey: string, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'ec', options: ECKeyPairOptions<'der', 'pem'>, callback: (err: Error | null, publicKey: Buffer, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'ec', options: ECKeyPairOptions<'der', 'der'>, callback: (err: Error | null, publicKey: Buffer, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'ec', options: ECKeyPairKeyObjectOptions, callback: (err: Error | null, publicKey: KeyObject, privateKey: KeyObject) => void): void;\\n    function generateKeyPair(type: 'ed25519', options: ED25519KeyPairOptions<'pem', 'pem'>, callback: (err: Error | null, publicKey: string, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'ed25519', options: ED25519KeyPairOptions<'pem', 'der'>, callback: (err: Error | null, publicKey: string, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'ed25519', options: ED25519KeyPairOptions<'der', 'pem'>, callback: (err: Error | null, publicKey: Buffer, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'ed25519', options: ED25519KeyPairOptions<'der', 'der'>, callback: (err: Error | null, publicKey: Buffer, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'ed25519', options: ED25519KeyPairKeyObjectOptions | undefined, callback: (err: Error | null, publicKey: KeyObject, privateKey: KeyObject) => void): void;\\n    function generateKeyPair(type: 'ed448', options: ED448KeyPairOptions<'pem', 'pem'>, callback: (err: Error | null, publicKey: string, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'ed448', options: ED448KeyPairOptions<'pem', 'der'>, callback: (err: Error | null, publicKey: string, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'ed448', options: ED448KeyPairOptions<'der', 'pem'>, callback: (err: Error | null, publicKey: Buffer, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'ed448', options: ED448KeyPairOptions<'der', 'der'>, callback: (err: Error | null, publicKey: Buffer, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'ed448', options: ED448KeyPairKeyObjectOptions | undefined, callback: (err: Error | null, publicKey: KeyObject, privateKey: KeyObject) => void): void;\\n    function generateKeyPair(type: 'x25519', options: X25519KeyPairOptions<'pem', 'pem'>, callback: (err: Error | null, publicKey: string, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'x25519', options: X25519KeyPairOptions<'pem', 'der'>, callback: (err: Error | null, publicKey: string, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'x25519', options: X25519KeyPairOptions<'der', 'pem'>, callback: (err: Error | null, publicKey: Buffer, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'x25519', options: X25519KeyPairOptions<'der', 'der'>, callback: (err: Error | null, publicKey: Buffer, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'x25519', options: X25519KeyPairKeyObjectOptions | undefined, callback: (err: Error | null, publicKey: KeyObject, privateKey: KeyObject) => void): void;\\n    function generateKeyPair(type: 'x448', options: X448KeyPairOptions<'pem', 'pem'>, callback: (err: Error | null, publicKey: string, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'x448', options: X448KeyPairOptions<'pem', 'der'>, callback: (err: Error | null, publicKey: string, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'x448', options: X448KeyPairOptions<'der', 'pem'>, callback: (err: Error | null, publicKey: Buffer, privateKey: string) => void): void;\\n    function generateKeyPair(type: 'x448', options: X448KeyPairOptions<'der', 'der'>, callback: (err: Error | null, publicKey: Buffer, privateKey: Buffer) => void): void;\\n    function generateKeyPair(type: 'x448', options: X448KeyPairKeyObjectOptions | undefined, callback: (err: Error | null, publicKey: KeyObject, privateKey: KeyObject) => void): void;\\n    namespace generateKeyPair {\\n        function __promisify__(\\n            type: 'rsa',\\n            options: RSAKeyPairOptions<'pem', 'pem'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'rsa',\\n            options: RSAKeyPairOptions<'pem', 'der'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(\\n            type: 'rsa',\\n            options: RSAKeyPairOptions<'der', 'pem'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'rsa',\\n            options: RSAKeyPairOptions<'der', 'der'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(type: 'rsa', options: RSAKeyPairKeyObjectOptions): Promise<KeyPairKeyObjectResult>;\\n        function __promisify__(\\n            type: 'rsa-pss',\\n            options: RSAPSSKeyPairOptions<'pem', 'pem'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'rsa-pss',\\n            options: RSAPSSKeyPairOptions<'pem', 'der'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(\\n            type: 'rsa-pss',\\n            options: RSAPSSKeyPairOptions<'der', 'pem'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'rsa-pss',\\n            options: RSAPSSKeyPairOptions<'der', 'der'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(type: 'rsa-pss', options: RSAPSSKeyPairKeyObjectOptions): Promise<KeyPairKeyObjectResult>;\\n        function __promisify__(\\n            type: 'dsa',\\n            options: DSAKeyPairOptions<'pem', 'pem'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'dsa',\\n            options: DSAKeyPairOptions<'pem', 'der'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(\\n            type: 'dsa',\\n            options: DSAKeyPairOptions<'der', 'pem'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'dsa',\\n            options: DSAKeyPairOptions<'der', 'der'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(type: 'dsa', options: DSAKeyPairKeyObjectOptions): Promise<KeyPairKeyObjectResult>;\\n        function __promisify__(\\n            type: 'ec',\\n            options: ECKeyPairOptions<'pem', 'pem'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'ec',\\n            options: ECKeyPairOptions<'pem', 'der'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(\\n            type: 'ec',\\n            options: ECKeyPairOptions<'der', 'pem'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'ec',\\n            options: ECKeyPairOptions<'der', 'der'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(type: 'ec', options: ECKeyPairKeyObjectOptions): Promise<KeyPairKeyObjectResult>;\\n        function __promisify__(\\n            type: 'ed25519',\\n            options: ED25519KeyPairOptions<'pem', 'pem'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'ed25519',\\n            options: ED25519KeyPairOptions<'pem', 'der'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(\\n            type: 'ed25519',\\n            options: ED25519KeyPairOptions<'der', 'pem'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'ed25519',\\n            options: ED25519KeyPairOptions<'der', 'der'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(type: 'ed25519', options?: ED25519KeyPairKeyObjectOptions): Promise<KeyPairKeyObjectResult>;\\n        function __promisify__(\\n            type: 'ed448',\\n            options: ED448KeyPairOptions<'pem', 'pem'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'ed448',\\n            options: ED448KeyPairOptions<'pem', 'der'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(\\n            type: 'ed448',\\n            options: ED448KeyPairOptions<'der', 'pem'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'ed448',\\n            options: ED448KeyPairOptions<'der', 'der'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(type: 'ed448', options?: ED448KeyPairKeyObjectOptions): Promise<KeyPairKeyObjectResult>;\\n        function __promisify__(\\n            type: 'x25519',\\n            options: X25519KeyPairOptions<'pem', 'pem'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'x25519',\\n            options: X25519KeyPairOptions<'pem', 'der'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(\\n            type: 'x25519',\\n            options: X25519KeyPairOptions<'der', 'pem'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'x25519',\\n            options: X25519KeyPairOptions<'der', 'der'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(type: 'x25519', options?: X25519KeyPairKeyObjectOptions): Promise<KeyPairKeyObjectResult>;\\n        function __promisify__(\\n            type: 'x448',\\n            options: X448KeyPairOptions<'pem', 'pem'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'x448',\\n            options: X448KeyPairOptions<'pem', 'der'>\\n        ): Promise<{\\n            publicKey: string;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(\\n            type: 'x448',\\n            options: X448KeyPairOptions<'der', 'pem'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: string;\\n        }>;\\n        function __promisify__(\\n            type: 'x448',\\n            options: X448KeyPairOptions<'der', 'der'>\\n        ): Promise<{\\n            publicKey: Buffer;\\n            privateKey: Buffer;\\n        }>;\\n        function __promisify__(type: 'x448', options?: X448KeyPairKeyObjectOptions): Promise<KeyPairKeyObjectResult>;\\n    }\\n    /**\\n     * Calculates and returns the signature for `data` using the given private key and\\n     * algorithm. If `algorithm` is `null` or `undefined`, then the algorithm is\\n     * dependent upon the key type (especially Ed25519 and Ed448).\\n     *\\n     * If `key` is not a `KeyObject`, this function behaves as if `key` had been\\n     * passed to {@link createPrivateKey}. If it is an object, the following\\n     * additional properties can be passed:\\n     *\\n     * If the `callback` function is provided this function uses libuv's threadpool.\\n     * @since v12.0.0\\n     */\\n    function sign(algorithm: string | null | undefined, data: NodeJS.ArrayBufferView, key: KeyLike | SignKeyObjectInput | SignPrivateKeyInput): Buffer;\\n    function sign(\\n        algorithm: string | null | undefined,\\n        data: NodeJS.ArrayBufferView,\\n        key: KeyLike | SignKeyObjectInput | SignPrivateKeyInput,\\n        callback: (error: Error | null, data: Buffer) => void\\n    ): void;\\n    /**\\n     * Verifies the given signature for `data` using the given key and algorithm. If`algorithm` is `null` or `undefined`, then the algorithm is dependent upon the\\n     * key type (especially Ed25519 and Ed448).\\n     *\\n     * If `key` is not a `KeyObject`, this function behaves as if `key` had been\\n     * passed to {@link createPublicKey}. If it is an object, the following\\n     * additional properties can be passed:\\n     *\\n     * The `signature` argument is the previously calculated signature for the `data`.\\n     *\\n     * Because public keys can be derived from private keys, a private key or a public\\n     * key may be passed for `key`.\\n     *\\n     * If the `callback` function is provided this function uses libuv's threadpool.\\n     * @since v12.0.0\\n     */\\n    function verify(\\n        algorithm: string | null | undefined,\\n        data: NodeJS.ArrayBufferView,\\n        key: KeyLike | VerifyKeyObjectInput | VerifyPublicKeyInput | VerifyJsonWebKeyInput,\\n        signature: NodeJS.ArrayBufferView\\n    ): boolean;\\n    function verify(\\n        algorithm: string | null | undefined,\\n        data: NodeJS.ArrayBufferView,\\n        key: KeyLike | VerifyKeyObjectInput | VerifyPublicKeyInput | VerifyJsonWebKeyInput,\\n        signature: NodeJS.ArrayBufferView,\\n        callback: (error: Error | null, result: boolean) => void\\n    ): void;\\n    /**\\n     * Computes the Diffie-Hellman secret based on a `privateKey` and a `publicKey`.\\n     * Both keys must have the same `asymmetricKeyType`, which must be one of `'dh'`(for Diffie-Hellman), `'ec'` (for ECDH), `'x448'`, or `'x25519'` (for ECDH-ES).\\n     * @since v13.9.0, v12.17.0\\n     */\\n    function diffieHellman(options: { privateKey: KeyObject; publicKey: KeyObject }): Buffer;\\n    type CipherMode = 'cbc' | 'ccm' | 'cfb' | 'ctr' | 'ecb' | 'gcm' | 'ocb' | 'ofb' | 'stream' | 'wrap' | 'xts';\\n    interface CipherInfoOptions {\\n        /**\\n         * A test key length.\\n         */\\n        keyLength?: number | undefined;\\n        /**\\n         * A test IV length.\\n         */\\n        ivLength?: number | undefined;\\n    }\\n    interface CipherInfo {\\n        /**\\n         * The name of the cipher.\\n         */\\n        name: string;\\n        /**\\n         * The nid of the cipher.\\n         */\\n        nid: number;\\n        /**\\n         * The block size of the cipher in bytes.\\n         * This property is omitted when mode is 'stream'.\\n         */\\n        blockSize?: number | undefined;\\n        /**\\n         * The expected or default initialization vector length in bytes.\\n         * This property is omitted if the cipher does not use an initialization vector.\\n         */\\n        ivLength?: number | undefined;\\n        /**\\n         * The expected or default key length in bytes.\\n         */\\n        keyLength: number;\\n        /**\\n         * The cipher mode.\\n         */\\n        mode: CipherMode;\\n    }\\n    /**\\n     * Returns information about a given cipher.\\n     *\\n     * Some ciphers accept variable length keys and initialization vectors. By default,\\n     * the `crypto.getCipherInfo()` method will return the default values for these\\n     * ciphers. To test if a given key length or iv length is acceptable for given\\n     * cipher, use the `keyLength` and `ivLength` options. If the given values are\\n     * unacceptable, `undefined` will be returned.\\n     * @since v15.0.0\\n     * @param nameOrNid The name or nid of the cipher to query.\\n     */\\n    function getCipherInfo(nameOrNid: string | number, options?: CipherInfoOptions): CipherInfo | undefined;\\n    /**\\n     * HKDF is a simple key derivation function defined in RFC 5869\\\\. The given `ikm`,`salt` and `info` are used with the `digest` to derive a key of `keylen` bytes.\\n     *\\n     * The supplied `callback` function is called with two arguments: `err` and`derivedKey`. If an errors occurs while deriving the key, `err` will be set;\\n     * otherwise `err` will be `null`. The successfully generated `derivedKey` will\\n     * be passed to the callback as an [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer). An error will be thrown if any\\n     * of the input arguments specify invalid values or types.\\n     *\\n     * ```js\\n     * import { Buffer } from 'buffer';\\n     * const {\\n     *   hkdf\\n     * } = await import('crypto');\\n     *\\n     * hkdf('sha512', 'key', 'salt', 'info', 64, (err, derivedKey) => {\\n     *   if (err) throw err;\\n     *   console.log(Buffer.from(derivedKey).toString('hex'));  // '24156e2...5391653'\\n     * });\\n     * ```\\n     * @since v15.0.0\\n     * @param digest The digest algorithm to use.\\n     * @param ikm The input keying material. It must be at least one byte in length.\\n     * @param salt The salt value. Must be provided but can be zero-length.\\n     * @param info Additional info value. Must be provided but can be zero-length, and cannot be more than 1024 bytes.\\n     * @param keylen The length of the key to generate. Must be greater than 0. The maximum allowable value is `255` times the number of bytes produced by the selected digest function (e.g. `sha512`\\n     * generates 64-byte hashes, making the maximum HKDF output 16320 bytes).\\n     */\\n    function hkdf(digest: string, irm: BinaryLike | KeyObject, salt: BinaryLike, info: BinaryLike, keylen: number, callback: (err: Error | null, derivedKey: ArrayBuffer) => void): void;\\n    /**\\n     * Provides a synchronous HKDF key derivation function as defined in RFC 5869\\\\. The\\n     * given `ikm`, `salt` and `info` are used with the `digest` to derive a key of`keylen` bytes.\\n     *\\n     * The successfully generated `derivedKey` will be returned as an [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer).\\n     *\\n     * An error will be thrown if any of the input arguments specify invalid values or\\n     * types, or if the derived key cannot be generated.\\n     *\\n     * ```js\\n     * import { Buffer } from 'buffer';\\n     * const {\\n     *   hkdfSync\\n     * } = await import('crypto');\\n     *\\n     * const derivedKey = hkdfSync('sha512', 'key', 'salt', 'info', 64);\\n     * console.log(Buffer.from(derivedKey).toString('hex'));  // '24156e2...5391653'\\n     * ```\\n     * @since v15.0.0\\n     * @param digest The digest algorithm to use.\\n     * @param ikm The input keying material. It must be at least one byte in length.\\n     * @param salt The salt value. Must be provided but can be zero-length.\\n     * @param info Additional info value. Must be provided but can be zero-length, and cannot be more than 1024 bytes.\\n     * @param keylen The length of the key to generate. Must be greater than 0. The maximum allowable value is `255` times the number of bytes produced by the selected digest function (e.g. `sha512`\\n     * generates 64-byte hashes, making the maximum HKDF output 16320 bytes).\\n     */\\n    function hkdfSync(digest: string, ikm: BinaryLike | KeyObject, salt: BinaryLike, info: BinaryLike, keylen: number): ArrayBuffer;\\n    interface SecureHeapUsage {\\n        /**\\n         * The total allocated secure heap size as specified using the `--secure-heap=n` command-line flag.\\n         */\\n        total: number;\\n        /**\\n         * The minimum allocation from the secure heap as specified using the `--secure-heap-min` command-line flag.\\n         */\\n        min: number;\\n        /**\\n         * The total number of bytes currently allocated from the secure heap.\\n         */\\n        used: number;\\n        /**\\n         * The calculated ratio of `used` to `total` allocated bytes.\\n         */\\n        utilization: number;\\n    }\\n    /**\\n     * @since v15.6.0\\n     */\\n    function secureHeapUsed(): SecureHeapUsage;\\n    interface RandomUUIDOptions {\\n        /**\\n         * By default, to improve performance,\\n         * Node.js will pre-emptively generate and persistently cache enough\\n         * random data to generate up to 128 random UUIDs. To generate a UUID\\n         * without using the cache, set `disableEntropyCache` to `true`.\\n         *\\n         * @default `false`\\n         */\\n        disableEntropyCache?: boolean | undefined;\\n    }\\n    /**\\n     * Generates a random [RFC 4122](https://www.rfc-editor.org/rfc/rfc4122.txt) version 4 UUID. The UUID is generated using a\\n     * cryptographic pseudorandom number generator.\\n     * @since v15.6.0, v14.17.0\\n     */\\n    function randomUUID(options?: RandomUUIDOptions): string;\\n    interface X509CheckOptions {\\n        /**\\n         * @default 'always'\\n         */\\n        subject?: 'always' | 'default' | 'never';\\n        /**\\n         * @default true\\n         */\\n        wildcards?: boolean;\\n        /**\\n         * @default true\\n         */\\n        partialWildcards?: boolean;\\n        /**\\n         * @default false\\n         */\\n        multiLabelWildcards?: boolean;\\n        /**\\n         * @default false\\n         */\\n        singleLabelSubdomains?: boolean;\\n    }\\n    /**\\n     * Encapsulates an X509 certificate and provides read-only access to\\n     * its information.\\n     *\\n     * ```js\\n     * const { X509Certificate } = await import('crypto');\\n     *\\n     * const x509 = new X509Certificate('{... pem encoded cert ...}');\\n     *\\n     * console.log(x509.subject);\\n     * ```\\n     * @since v15.6.0\\n     */\\n    class X509Certificate {\\n        /**\\n         * Will be \\\\`true\\\\` if this is a Certificate Authority (CA) certificate.\\n         * @since v15.6.0\\n         */\\n        readonly ca: boolean;\\n        /**\\n         * The SHA-1 fingerprint of this certificate.\\n         *\\n         * Because SHA-1 is cryptographically broken and because the security of SHA-1 is\\n         * significantly worse than that of algorithms that are commonly used to sign\\n         * certificates, consider using `x509.fingerprint256` instead.\\n         * @since v15.6.0\\n         */\\n        readonly fingerprint: string;\\n        /**\\n         * The SHA-256 fingerprint of this certificate.\\n         * @since v15.6.0\\n         */\\n        readonly fingerprint256: string;\\n        /**\\n         * The SHA-512 fingerprint of this certificate.\\n         * @since v16.14.0\\n         */\\n         readonly fingerprint512: string;\\n        /**\\n         * The complete subject of this certificate.\\n         * @since v15.6.0\\n         */\\n        readonly subject: string;\\n        /**\\n         * The subject alternative name specified for this certificate or `undefined`\\n         * if not available.\\n         * @since v15.6.0\\n         */\\n        readonly subjectAltName: string | undefined;\\n        /**\\n         * The information access content of this certificate or `undefined` if not\\n         * available.\\n         * @since v15.6.0\\n         */\\n        readonly infoAccess: string | undefined;\\n        /**\\n         * An array detailing the key usages for this certificate.\\n         * @since v15.6.0\\n         */\\n        readonly keyUsage: string[];\\n        /**\\n         * The issuer identification included in this certificate.\\n         * @since v15.6.0\\n         */\\n        readonly issuer: string;\\n        /**\\n         * The issuer certificate or `undefined` if the issuer certificate is not\\n         * available.\\n         * @since v15.9.0\\n         */\\n        readonly issuerCertificate?: X509Certificate | undefined;\\n        /**\\n         * The public key `KeyObject` for this certificate.\\n         * @since v15.6.0\\n         */\\n        readonly publicKey: KeyObject;\\n        /**\\n         * A `Buffer` containing the DER encoding of this certificate.\\n         * @since v15.6.0\\n         */\\n        readonly raw: Buffer;\\n        /**\\n         * The serial number of this certificate.\\n         *\\n         * Serial numbers are assigned by certificate authorities and do not uniquely\\n         * identify certificates. Consider using `x509.fingerprint256` as a unique\\n         * identifier instead.\\n         * @since v15.6.0\\n         */\\n        readonly serialNumber: string;\\n        /**\\n         * The date/time from which this certificate is considered valid.\\n         * @since v15.6.0\\n         */\\n        readonly validFrom: string;\\n        /**\\n         * The date/time until which this certificate is considered valid.\\n         * @since v15.6.0\\n         */\\n        readonly validTo: string;\\n        constructor(buffer: BinaryLike);\\n        /**\\n         * Checks whether the certificate matches the given email address.\\n         *\\n         * If the `'subject'` option is undefined or set to `'default'`, the certificate\\n         * subject is only considered if the subject alternative name extension either does\\n         * not exist or does not contain any email addresses.\\n         *\\n         * If the `'subject'` option is set to `'always'` and if the subject alternative\\n         * name extension either does not exist or does not contain a matching email\\n         * address, the certificate subject is considered.\\n         *\\n         * If the `'subject'` option is set to `'never'`, the certificate subject is never\\n         * considered, even if the certificate contains no subject alternative names.\\n         * @since v15.6.0\\n         * @return Returns `email` if the certificate matches, `undefined` if it does not.\\n         */\\n        checkEmail(email: string, options?: Pick<X509CheckOptions, 'subject'>): string | undefined;\\n        /**\\n         * Checks whether the certificate matches the given host name.\\n         *\\n         * If the certificate matches the given host name, the matching subject name is\\n         * returned. The returned name might be an exact match (e.g., `foo.example.com`)\\n         * or it might contain wildcards (e.g., `*.example.com`). Because host name\\n         * comparisons are case-insensitive, the returned subject name might also differ\\n         * from the given `name` in capitalization.\\n         *\\n         * If the `'subject'` option is undefined or set to `'default'`, the certificate\\n         * subject is only considered if the subject alternative name extension either does\\n         * not exist or does not contain any DNS names. This behavior is consistent with [RFC 2818](https://www.rfc-editor.org/rfc/rfc2818.txt) (\\\"HTTP Over TLS\\\").\\n         *\\n         * If the `'subject'` option is set to `'always'` and if the subject alternative\\n         * name extension either does not exist or does not contain a matching DNS name,\\n         * the certificate subject is considered.\\n         *\\n         * If the `'subject'` option is set to `'never'`, the certificate subject is never\\n         * considered, even if the certificate contains no subject alternative names.\\n         * @since v15.6.0\\n         * @return Returns a subject name that matches `name`, or `undefined` if no subject name matches `name`.\\n         */\\n        checkHost(name: string, options?: X509CheckOptions): string | undefined;\\n        /**\\n         * Checks whether the certificate matches the given IP address (IPv4 or IPv6).\\n         *\\n         * Only [RFC 5280](https://www.rfc-editor.org/rfc/rfc5280.txt) `iPAddress` subject alternative names are considered, and they\\n         * must match the given `ip` address exactly. Other subject alternative names as\\n         * well as the subject field of the certificate are ignored.\\n         * @since v15.6.0\\n         * @return Returns `ip` if the certificate matches, `undefined` if it does not.\\n         */\\n        checkIP(ip: string): string | undefined;\\n        /**\\n         * Checks whether this certificate was issued by the given `otherCert`.\\n         * @since v15.6.0\\n         */\\n        checkIssued(otherCert: X509Certificate): boolean;\\n        /**\\n         * Checks whether the public key for this certificate is consistent with\\n         * the given private key.\\n         * @since v15.6.0\\n         * @param privateKey A private key.\\n         */\\n        checkPrivateKey(privateKey: KeyObject): boolean;\\n        /**\\n         * There is no standard JSON encoding for X509 certificates. The`toJSON()` method returns a string containing the PEM encoded\\n         * certificate.\\n         * @since v15.6.0\\n         */\\n        toJSON(): string;\\n        /**\\n         * Returns information about this certificate using the legacy `certificate object` encoding.\\n         * @since v15.6.0\\n         */\\n        toLegacyObject(): PeerCertificate;\\n        /**\\n         * Returns the PEM-encoded certificate.\\n         * @since v15.6.0\\n         */\\n        toString(): string;\\n        /**\\n         * Verifies that this certificate was signed by the given public key.\\n         * Does not perform any other validation checks on the certificate.\\n         * @since v15.6.0\\n         * @param publicKey A public key.\\n         */\\n        verify(publicKey: KeyObject): boolean;\\n    }\\n    type LargeNumberLike = NodeJS.ArrayBufferView | SharedArrayBuffer | ArrayBuffer | bigint;\\n    interface GeneratePrimeOptions {\\n        add?: LargeNumberLike | undefined;\\n        rem?: LargeNumberLike | undefined;\\n        /**\\n         * @default false\\n         */\\n        safe?: boolean | undefined;\\n        bigint?: boolean | undefined;\\n    }\\n    interface GeneratePrimeOptionsBigInt extends GeneratePrimeOptions {\\n        bigint: true;\\n    }\\n    interface GeneratePrimeOptionsArrayBuffer extends GeneratePrimeOptions {\\n        bigint?: false | undefined;\\n    }\\n    /**\\n     * Generates a pseudorandom prime of `size` bits.\\n     *\\n     * If `options.safe` is `true`, the prime will be a safe prime -- that is,`(prime - 1) / 2` will also be a prime.\\n     *\\n     * The `options.add` and `options.rem` parameters can be used to enforce additional\\n     * requirements, e.g., for Diffie-Hellman:\\n     *\\n     * * If `options.add` and `options.rem` are both set, the prime will satisfy the\\n     * condition that `prime % add = rem`.\\n     * * If only `options.add` is set and `options.safe` is not `true`, the prime will\\n     * satisfy the condition that `prime % add = 1`.\\n     * * If only `options.add` is set and `options.safe` is set to `true`, the prime\\n     * will instead satisfy the condition that `prime % add = 3`. This is necessary\\n     * because `prime % add = 1` for `options.add > 2` would contradict the condition\\n     * enforced by `options.safe`.\\n     * * `options.rem` is ignored if `options.add` is not given.\\n     *\\n     * Both `options.add` and `options.rem` must be encoded as big-endian sequences\\n     * if given as an `ArrayBuffer`, `SharedArrayBuffer`, `TypedArray`, `Buffer`, or`DataView`.\\n     *\\n     * By default, the prime is encoded as a big-endian sequence of octets\\n     * in an [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer). If the `bigint` option is `true`, then a\\n     * [bigint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) is provided.\\n     * @since v15.8.0\\n     * @param size The size (in bits) of the prime to generate.\\n     */\\n    function generatePrime(size: number, callback: (err: Error | null, prime: ArrayBuffer) => void): void;\\n    function generatePrime(size: number, options: GeneratePrimeOptionsBigInt, callback: (err: Error | null, prime: bigint) => void): void;\\n    function generatePrime(size: number, options: GeneratePrimeOptionsArrayBuffer, callback: (err: Error | null, prime: ArrayBuffer) => void): void;\\n    function generatePrime(size: number, options: GeneratePrimeOptions, callback: (err: Error | null, prime: ArrayBuffer | bigint) => void): void;\\n    /**\\n     * Generates a pseudorandom prime of `size` bits.\\n     *\\n     * If `options.safe` is `true`, the prime will be a safe prime -- that is,`(prime - 1) / 2` will also be a prime.\\n     *\\n     * The `options.add` and `options.rem` parameters can be used to enforce additional\\n     * requirements, e.g., for Diffie-Hellman:\\n     *\\n     * * If `options.add` and `options.rem` are both set, the prime will satisfy the\\n     * condition that `prime % add = rem`.\\n     * * If only `options.add` is set and `options.safe` is not `true`, the prime will\\n     * satisfy the condition that `prime % add = 1`.\\n     * * If only `options.add` is set and `options.safe` is set to `true`, the prime\\n     * will instead satisfy the condition that `prime % add = 3`. This is necessary\\n     * because `prime % add = 1` for `options.add > 2` would contradict the condition\\n     * enforced by `options.safe`.\\n     * * `options.rem` is ignored if `options.add` is not given.\\n     *\\n     * Both `options.add` and `options.rem` must be encoded as big-endian sequences\\n     * if given as an `ArrayBuffer`, `SharedArrayBuffer`, `TypedArray`, `Buffer`, or`DataView`.\\n     *\\n     * By default, the prime is encoded as a big-endian sequence of octets\\n     * in an [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer). If the `bigint` option is `true`, then a\\n     * [bigint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) is provided.\\n     * @since v15.8.0\\n     * @param size The size (in bits) of the prime to generate.\\n     */\\n    function generatePrimeSync(size: number): ArrayBuffer;\\n    function generatePrimeSync(size: number, options: GeneratePrimeOptionsBigInt): bigint;\\n    function generatePrimeSync(size: number, options: GeneratePrimeOptionsArrayBuffer): ArrayBuffer;\\n    function generatePrimeSync(size: number, options: GeneratePrimeOptions): ArrayBuffer | bigint;\\n    interface CheckPrimeOptions {\\n        /**\\n         * The number of Miller-Rabin probabilistic primality iterations to perform.\\n         * When the value is 0 (zero), a number of checks is used that yields a false positive rate of at most `2**-64` for random input.\\n         * Care must be used when selecting a number of checks.\\n         * Refer to the OpenSSL documentation for the BN_is_prime_ex function nchecks options for more details.\\n         *\\n         * @default 0\\n         */\\n        checks?: number | undefined;\\n    }\\n    /**\\n     * Checks the primality of the `candidate`.\\n     * @since v15.8.0\\n     * @param candidate A possible prime encoded as a sequence of big endian octets of arbitrary length.\\n     */\\n    function checkPrime(value: LargeNumberLike, callback: (err: Error | null, result: boolean) => void): void;\\n    function checkPrime(value: LargeNumberLike, options: CheckPrimeOptions, callback: (err: Error | null, result: boolean) => void): void;\\n    /**\\n     * Checks the primality of the `candidate`.\\n     * @since v15.8.0\\n     * @param candidate A possible prime encoded as a sequence of big endian octets of arbitrary length.\\n     * @return `true` if the candidate is a prime with an error probability less than `0.25 ** options.checks`.\\n     */\\n    function checkPrimeSync(candidate: LargeNumberLike, options?: CheckPrimeOptions): boolean;\\n    /**\\n     * Load and set the `engine` for some or all OpenSSL functions (selected by flags).\\n     *\\n     * `engine` could be either an id or a path to the engine's shared library.\\n     *\\n     * The optional `flags` argument uses `ENGINE_METHOD_ALL` by default.\\n     * The `flags` is a bit field taking one of or a mix of the following flags (defined in `crypto.constants`):\\n     *\\n     * - `crypto.constants.ENGINE_METHOD_RSA`\\n     * - `crypto.constants.ENGINE_METHOD_DSA`\\n     * - `crypto.constants.ENGINE_METHOD_DH`\\n     * - `crypto.constants.ENGINE_METHOD_RAND`\\n     * - `crypto.constants.ENGINE_METHOD_EC`\\n     * - `crypto.constants.ENGINE_METHOD_CIPHERS`\\n     * - `crypto.constants.ENGINE_METHOD_DIGESTS`\\n     * - `crypto.constants.ENGINE_METHOD_PKEY_METHS`\\n     * - `crypto.constants.ENGINE_METHOD_PKEY_ASN1_METHS`\\n     * - `crypto.constants.ENGINE_METHOD_ALL`\\n     * - `crypto.constants.ENGINE_METHOD_NONE`\\n     *\\n     * The flags below are deprecated in OpenSSL-1.1.0.\\n     *\\n     * - `crypto.constants.ENGINE_METHOD_ECDH`\\n     * - `crypto.constants.ENGINE_METHOD_ECDSA`\\n     * - `crypto.constants.ENGINE_METHOD_STORE`\\n     * @since v0.11.11\\n     * @param [flags=crypto.constants.ENGINE_METHOD_ALL]\\n     */\\n    function setEngine(engine: string, flags?: number): void;\\n    /**\\n     * A convenient alias for `crypto.webcrypto.getRandomValues()`.\\n     * This implementation is not compliant with the Web Crypto spec,\\n     * to write web-compatible code use `crypto.webcrypto.getRandomValues()` instead.\\n     * @since v17.4.0\\n     * @returns Returns `typedArray`.\\n     */\\n    function getRandomValues<T extends webcrypto.BufferSource>(typedArray: T): T;\\n    /**\\n     * A convenient alias for `crypto.webcrypto.subtle`.\\n     * @since v17.4.0\\n     */\\n    const subtle: webcrypto.SubtleCrypto;\\n    /**\\n     * An implementation of the Web Crypto API standard.\\n     *\\n     * See the {@link https://nodejs.org/docs/latest/api/webcrypto.html Web Crypto API documentation} for details.\\n     * @since v15.0.0\\n     */\\n    const webcrypto: webcrypto.Crypto;\\n    namespace webcrypto {\\n        type BufferSource = ArrayBufferView | ArrayBuffer;\\n        type KeyFormat = 'jwk' | 'pkcs8' | 'raw' | 'spki';\\n        type KeyType = 'private' | 'public' | 'secret';\\n        type KeyUsage = 'decrypt' | 'deriveBits' | 'deriveKey' | 'encrypt' | 'sign' | 'unwrapKey' | 'verify' | 'wrapKey';\\n        type AlgorithmIdentifier = Algorithm | string;\\n        type HashAlgorithmIdentifier = AlgorithmIdentifier;\\n        type NamedCurve = string;\\n        type BigInteger = Uint8Array;\\n        interface AesCbcParams extends Algorithm {\\n            iv: BufferSource;\\n        }\\n        interface AesCtrParams extends Algorithm {\\n            counter: BufferSource;\\n            length: number;\\n        }\\n        interface AesDerivedKeyParams extends Algorithm {\\n            length: number;\\n        }\\n        interface AesGcmParams extends Algorithm {\\n            additionalData?: BufferSource;\\n            iv: BufferSource;\\n            tagLength?: number;\\n        }\\n        interface AesKeyAlgorithm extends KeyAlgorithm {\\n            length: number;\\n        }\\n        interface AesKeyGenParams extends Algorithm {\\n            length: number;\\n        }\\n        interface Algorithm {\\n            name: string;\\n        }\\n        interface EcKeyAlgorithm extends KeyAlgorithm {\\n            namedCurve: NamedCurve;\\n        }\\n        interface EcKeyGenParams extends Algorithm {\\n            namedCurve: NamedCurve;\\n        }\\n        interface EcKeyImportParams extends Algorithm {\\n            namedCurve: NamedCurve;\\n        }\\n        interface EcdhKeyDeriveParams extends Algorithm {\\n            public: CryptoKey;\\n        }\\n        interface EcdsaParams extends Algorithm {\\n            hash: HashAlgorithmIdentifier;\\n        }\\n        interface Ed448Params extends Algorithm {\\n            context?: BufferSource;\\n        }\\n        interface HkdfParams extends Algorithm {\\n            hash: HashAlgorithmIdentifier;\\n            info: BufferSource;\\n            salt: BufferSource;\\n        }\\n        interface HmacImportParams extends Algorithm {\\n            hash: HashAlgorithmIdentifier;\\n            length?: number;\\n        }\\n        interface HmacKeyAlgorithm extends KeyAlgorithm {\\n            hash: KeyAlgorithm;\\n            length: number;\\n        }\\n        interface HmacKeyGenParams extends Algorithm {\\n            hash: HashAlgorithmIdentifier;\\n            length?: number;\\n        }\\n        interface JsonWebKey {\\n            alg?: string;\\n            crv?: string;\\n            d?: string;\\n            dp?: string;\\n            dq?: string;\\n            e?: string;\\n            ext?: boolean;\\n            k?: string;\\n            key_ops?: string[];\\n            kty?: string;\\n            n?: string;\\n            oth?: RsaOtherPrimesInfo[];\\n            p?: string;\\n            q?: string;\\n            qi?: string;\\n            use?: string;\\n            x?: string;\\n            y?: string;\\n        }\\n        interface KeyAlgorithm {\\n            name: string;\\n        }\\n        interface Pbkdf2Params extends Algorithm {\\n            hash: HashAlgorithmIdentifier;\\n            iterations: number;\\n            salt: BufferSource;\\n        }\\n        interface RsaHashedImportParams extends Algorithm {\\n            hash: HashAlgorithmIdentifier;\\n        }\\n        interface RsaHashedKeyAlgorithm extends RsaKeyAlgorithm {\\n            hash: KeyAlgorithm;\\n        }\\n        interface RsaHashedKeyGenParams extends RsaKeyGenParams {\\n            hash: HashAlgorithmIdentifier;\\n        }\\n        interface RsaKeyAlgorithm extends KeyAlgorithm {\\n            modulusLength: number;\\n            publicExponent: BigInteger;\\n        }\\n        interface RsaKeyGenParams extends Algorithm {\\n            modulusLength: number;\\n            publicExponent: BigInteger;\\n        }\\n        interface RsaOaepParams extends Algorithm {\\n            label?: BufferSource;\\n        }\\n        interface RsaOtherPrimesInfo {\\n            d?: string;\\n            r?: string;\\n            t?: string;\\n        }\\n        interface RsaPssParams extends Algorithm {\\n            saltLength: number;\\n        }\\n        /**\\n         * Calling `require('node:crypto').webcrypto` returns an instance of the `Crypto` class.\\n         * `Crypto` is a singleton that provides access to the remainder of the crypto API.\\n         * @since v15.0.0\\n         */\\n        interface Crypto {\\n            /**\\n             * Provides access to the `SubtleCrypto` API.\\n             * @since v15.0.0\\n             */\\n            readonly subtle: SubtleCrypto;\\n            /**\\n             * Generates cryptographically strong random values.\\n             * The given `typedArray` is filled with random values, and a reference to `typedArray` is returned.\\n             *\\n             * The given `typedArray` must be an integer-based instance of {@link NodeJS.TypedArray}, i.e. `Float32Array` and `Float64Array` are not accepted.\\n             *\\n             * An error will be thrown if the given `typedArray` is larger than 65,536 bytes.\\n             * @since v15.0.0\\n             */\\n            getRandomValues<T extends Exclude<NodeJS.TypedArray, Float32Array | Float64Array>>(typedArray: T): T;\\n            /**\\n             * Generates a random {@link https://www.rfc-editor.org/rfc/rfc4122.txt RFC 4122} version 4 UUID.\\n             * The UUID is generated using a cryptographic pseudorandom number generator.\\n             * @since v16.7.0\\n             */\\n            randomUUID(): string;\\n            CryptoKey: CryptoKeyConstructor;\\n        }\\n        // This constructor throws ILLEGAL_CONSTRUCTOR so it should not be newable.\\n        interface CryptoKeyConstructor {\\n            /** Illegal constructor */\\n            (_: { readonly _: unique symbol }): never; // Allows instanceof to work but not be callable by the user.\\n            readonly length: 0;\\n            readonly name: 'CryptoKey';\\n            readonly prototype: CryptoKey;\\n        }\\n        /**\\n         * @since v15.0.0\\n         */\\n        interface CryptoKey {\\n            /**\\n             * An object detailing the algorithm for which the key can be used along with additional algorithm-specific parameters.\\n             * @since v15.0.0\\n             */\\n            readonly algorithm: KeyAlgorithm;\\n            /**\\n             * When `true`, the {@link CryptoKey} can be extracted using either `subtleCrypto.exportKey()` or `subtleCrypto.wrapKey()`.\\n             * @since v15.0.0\\n             */\\n            readonly extractable: boolean;\\n            /**\\n             * A string identifying whether the key is a symmetric (`'secret'`) or asymmetric (`'private'` or `'public'`) key.\\n             * @since v15.0.0\\n             */\\n            readonly type: KeyType;\\n            /**\\n             * An array of strings identifying the operations for which the key may be used.\\n             *\\n             * The possible usages are:\\n             * - `'encrypt'` - The key may be used to encrypt data.\\n             * - `'decrypt'` - The key may be used to decrypt data.\\n             * - `'sign'` - The key may be used to generate digital signatures.\\n             * - `'verify'` - The key may be used to verify digital signatures.\\n             * - `'deriveKey'` - The key may be used to derive a new key.\\n             * - `'deriveBits'` - The key may be used to derive bits.\\n             * - `'wrapKey'` - The key may be used to wrap another key.\\n             * - `'unwrapKey'` - The key may be used to unwrap another key.\\n             *\\n             * Valid key usages depend on the key algorithm (identified by `cryptokey.algorithm.name`).\\n             * @since v15.0.0\\n             */\\n            readonly usages: KeyUsage[];\\n        }\\n        /**\\n         * The `CryptoKeyPair` is a simple dictionary object with `publicKey` and `privateKey` properties, representing an asymmetric key pair.\\n         * @since v15.0.0\\n         */\\n        interface CryptoKeyPair {\\n            /**\\n             * A {@link CryptoKey} whose type will be `'private'`.\\n             * @since v15.0.0\\n             */\\n            privateKey: CryptoKey;\\n            /**\\n             * A {@link CryptoKey} whose type will be `'public'`.\\n             * @since v15.0.0\\n             */\\n            publicKey: CryptoKey;\\n        }\\n        /**\\n         * @since v15.0.0\\n         */\\n        interface SubtleCrypto {\\n            /**\\n             * Using the method and parameters specified in `algorithm` and the keying material provided by `key`,\\n             * `subtle.decrypt()` attempts to decipher the provided `data`. If successful,\\n             * the returned promise will be resolved with an `<ArrayBuffer>` containing the plaintext result.\\n             *\\n             * The algorithms currently supported include:\\n             *\\n             * - `'RSA-OAEP'`\\n             * - `'AES-CTR'`\\n             * - `'AES-CBC'`\\n             * - `'AES-GCM'`\\n             * @since v15.0.0\\n             */\\n            decrypt(algorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams, key: CryptoKey, data: BufferSource): Promise<ArrayBuffer>;\\n            /**\\n             * Using the method and parameters specified in `algorithm` and the keying material provided by `baseKey`,\\n             * `subtle.deriveBits()` attempts to generate `length` bits.\\n             * The Node.js implementation requires that when `length` is a number it must be multiple of `8`.\\n             * When `length` is `null` the maximum number of bits for a given algorithm is generated. This is allowed\\n             * for the `'ECDH'`, `'X25519'`, and `'X448'` algorithms.\\n             * If successful, the returned promise will be resolved with an `<ArrayBuffer>` containing the generated data.\\n             *\\n             * The algorithms currently supported include:\\n             *\\n             * - `'ECDH'`\\n             * - `'X25519'`\\n             * - `'X448'`\\n             * - `'HKDF'`\\n             * - `'PBKDF2'`\\n             * @since v15.0.0\\n             */\\n            deriveBits(algorithm: EcdhKeyDeriveParams, baseKey: CryptoKey, length: number | null): Promise<ArrayBuffer>;\\n            deriveBits(algorithm: AlgorithmIdentifier | HkdfParams | Pbkdf2Params, baseKey: CryptoKey, length: number): Promise<ArrayBuffer>;\\n            /**\\n             * Using the method and parameters specified in `algorithm`, and the keying material provided by `baseKey`,\\n             * `subtle.deriveKey()` attempts to generate a new <CryptoKey>` based on the method and parameters in `derivedKeyAlgorithm`.\\n             *\\n             * Calling `subtle.deriveKey()` is equivalent to calling `subtle.deriveBits()` to generate raw keying material,\\n             * then passing the result into the `subtle.importKey()` method using the `deriveKeyAlgorithm`, `extractable`, and `keyUsages` parameters as input.\\n             *\\n             * The algorithms currently supported include:\\n             *\\n             * - `'ECDH'`\\n             * - `'X25519'`\\n             * - `'X448'`\\n             * - `'HKDF'`\\n             * - `'PBKDF2'`\\n             * @param keyUsages See {@link https://nodejs.org/docs/latest/api/webcrypto.html#cryptokeyusages Key usages}.\\n             * @since v15.0.0\\n             */\\n            deriveKey(\\n                algorithm: AlgorithmIdentifier | EcdhKeyDeriveParams | HkdfParams | Pbkdf2Params,\\n                baseKey: CryptoKey,\\n                derivedKeyAlgorithm: AlgorithmIdentifier | AesDerivedKeyParams | HmacImportParams | HkdfParams | Pbkdf2Params,\\n                extractable: boolean,\\n                keyUsages: ReadonlyArray<KeyUsage>\\n            ): Promise<CryptoKey>;\\n            /**\\n             * Using the method identified by `algorithm`, `subtle.digest()` attempts to generate a digest of `data`.\\n             * If successful, the returned promise is resolved with an `<ArrayBuffer>` containing the computed digest.\\n             *\\n             * If `algorithm` is provided as a `<string>`, it must be one of:\\n             *\\n             * - `'SHA-1'`\\n             * - `'SHA-256'`\\n             * - `'SHA-384'`\\n             * - `'SHA-512'`\\n             *\\n             * If `algorithm` is provided as an `<Object>`, it must have a `name` property whose value is one of the above.\\n             * @since v15.0.0\\n             */\\n            digest(algorithm: AlgorithmIdentifier, data: BufferSource): Promise<ArrayBuffer>;\\n            /**\\n             * Using the method and parameters specified by `algorithm` and the keying material provided by `key`,\\n             * `subtle.encrypt()` attempts to encipher `data`. If successful,\\n             * the returned promise is resolved with an `<ArrayBuffer>` containing the encrypted result.\\n             *\\n             * The algorithms currently supported include:\\n             *\\n             * - `'RSA-OAEP'`\\n             * - `'AES-CTR'`\\n             * - `'AES-CBC'`\\n             * - `'AES-GCM'`\\n             * @since v15.0.0\\n             */\\n            encrypt(algorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams, key: CryptoKey, data: BufferSource): Promise<ArrayBuffer>;\\n            /**\\n             * Exports the given key into the specified format, if supported.\\n             *\\n             * If the `<CryptoKey>` is not extractable, the returned promise will reject.\\n             *\\n             * When `format` is either `'pkcs8'` or `'spki'` and the export is successful,\\n             * the returned promise will be resolved with an `<ArrayBuffer>` containing the exported key data.\\n             *\\n             * When `format` is `'jwk'` and the export is successful, the returned promise will be resolved with a\\n             * JavaScript object conforming to the {@link https://tools.ietf.org/html/rfc7517 JSON Web Key} specification.\\n             * @param format Must be one of `'raw'`, `'pkcs8'`, `'spki'`, or `'jwk'`.\\n             * @returns `<Promise>` containing `<ArrayBuffer>`.\\n             * @since v15.0.0\\n             */\\n            exportKey(format: 'jwk', key: CryptoKey): Promise<JsonWebKey>;\\n            exportKey(format: Exclude<KeyFormat, 'jwk'>, key: CryptoKey): Promise<ArrayBuffer>;\\n            /**\\n             * Using the method and parameters provided in `algorithm`,\\n             * `subtle.generateKey()` attempts to generate new keying material.\\n             * Depending the method used, the method may generate either a single `<CryptoKey>` or a `<CryptoKeyPair>`.\\n             *\\n             * The `<CryptoKeyPair>` (public and private key) generating algorithms supported include:\\n             *\\n             * - `'RSASSA-PKCS1-v1_5'`\\n             * - `'RSA-PSS'`\\n             * - `'RSA-OAEP'`\\n             * - `'ECDSA'`\\n             * - `'Ed25519'`\\n             * - `'Ed448'`\\n             * - `'ECDH'`\\n             * - `'X25519'`\\n             * - `'X448'`\\n             * The `<CryptoKey>` (secret key) generating algorithms supported include:\\n             *\\n             * - `'HMAC'`\\n             * - `'AES-CTR'`\\n             * - `'AES-CBC'`\\n             * - `'AES-GCM'`\\n             * - `'AES-KW'`\\n             * @param keyUsages See {@link https://nodejs.org/docs/latest/api/webcrypto.html#cryptokeyusages Key usages}.\\n             * @since v15.0.0\\n             */\\n            generateKey(algorithm: RsaHashedKeyGenParams | EcKeyGenParams, extractable: boolean, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKeyPair>;\\n            generateKey(algorithm: AesKeyGenParams | HmacKeyGenParams | Pbkdf2Params, extractable: boolean, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKey>;\\n            generateKey(algorithm: AlgorithmIdentifier, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKeyPair | CryptoKey>;\\n            /**\\n             * The `subtle.importKey()` method attempts to interpret the provided `keyData` as the given `format`\\n             * to create a `<CryptoKey>` instance using the provided `algorithm`, `extractable`, and `keyUsages` arguments.\\n             * If the import is successful, the returned promise will be resolved with the created `<CryptoKey>`.\\n             *\\n             * If importing a `'PBKDF2'` key, `extractable` must be `false`.\\n             * @param format Must be one of `'raw'`, `'pkcs8'`, `'spki'`, or `'jwk'`.\\n             * @param keyUsages See {@link https://nodejs.org/docs/latest/api/webcrypto.html#cryptokeyusages Key usages}.\\n             * @since v15.0.0\\n             */\\n            importKey(\\n                format: 'jwk',\\n                keyData: JsonWebKey,\\n                algorithm: AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm,\\n                extractable: boolean,\\n                keyUsages: ReadonlyArray<KeyUsage>\\n            ): Promise<CryptoKey>;\\n            importKey(\\n                format: Exclude<KeyFormat, 'jwk'>,\\n                keyData: BufferSource,\\n                algorithm: AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm,\\n                extractable: boolean,\\n                keyUsages: KeyUsage[]\\n            ): Promise<CryptoKey>;\\n            /**\\n             * Using the method and parameters given by `algorithm` and the keying material provided by `key`,\\n             * `subtle.sign()` attempts to generate a cryptographic signature of `data`. If successful,\\n             * the returned promise is resolved with an `<ArrayBuffer>` containing the generated signature.\\n             *\\n             * The algorithms currently supported include:\\n             *\\n             * - `'RSASSA-PKCS1-v1_5'`\\n             * - `'RSA-PSS'`\\n             * - `'ECDSA'`\\n             * - `'Ed25519'`\\n             * - `'Ed448'`\\n             * - `'HMAC'`\\n             * @since v15.0.0\\n             */\\n            sign(algorithm: AlgorithmIdentifier | RsaPssParams | EcdsaParams | Ed448Params, key: CryptoKey, data: BufferSource): Promise<ArrayBuffer>;\\n            /**\\n             * In cryptography, \\\"wrapping a key\\\" refers to exporting and then encrypting the keying material.\\n             * The `subtle.unwrapKey()` method attempts to decrypt a wrapped key and create a `<CryptoKey>` instance.\\n             * It is equivalent to calling `subtle.decrypt()` first on the encrypted key data (using the `wrappedKey`, `unwrapAlgo`, and `unwrappingKey` arguments as input)\\n             * then passing the results in to the `subtle.importKey()` method using the `unwrappedKeyAlgo`, `extractable`, and `keyUsages` arguments as inputs.\\n             * If successful, the returned promise is resolved with a `<CryptoKey>` object.\\n             *\\n             * The wrapping algorithms currently supported include:\\n             *\\n             * - `'RSA-OAEP'`\\n             * - `'AES-CTR'`\\n             * - `'AES-CBC'`\\n             * - `'AES-GCM'`\\n             * - `'AES-KW'`\\n             *\\n             * The unwrapped key algorithms supported include:\\n             *\\n             * - `'RSASSA-PKCS1-v1_5'`\\n             * - `'RSA-PSS'`\\n             * - `'RSA-OAEP'`\\n             * - `'ECDSA'`\\n             * - `'Ed25519'`\\n             * - `'Ed448'`\\n             * - `'ECDH'`\\n             * - `'X25519'`\\n             * - `'X448'`\\n             * - `'HMAC'`\\n             * - `'AES-CTR'`\\n             * - `'AES-CBC'`\\n             * - `'AES-GCM'`\\n             * - `'AES-KW'`\\n             * @param format Must be one of `'raw'`, `'pkcs8'`, `'spki'`, or `'jwk'`.\\n             * @param keyUsages See {@link https://nodejs.org/docs/latest/api/webcrypto.html#cryptokeyusages Key usages}.\\n             * @since v15.0.0\\n             */\\n            unwrapKey(\\n                format: KeyFormat,\\n                wrappedKey: BufferSource,\\n                unwrappingKey: CryptoKey,\\n                unwrapAlgorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams,\\n                unwrappedKeyAlgorithm: AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm,\\n                extractable: boolean,\\n                keyUsages: KeyUsage[]\\n            ): Promise<CryptoKey>;\\n            /**\\n             * Using the method and parameters given in `algorithm` and the keying material provided by `key`,\\n             * `subtle.verify()` attempts to verify that `signature` is a valid cryptographic signature of `data`.\\n             * The returned promise is resolved with either `true` or `false`.\\n             *\\n             * The algorithms currently supported include:\\n             *\\n             * - `'RSASSA-PKCS1-v1_5'`\\n             * - `'RSA-PSS'`\\n             * - `'ECDSA'`\\n             * - `'Ed25519'`\\n             * - `'Ed448'`\\n             * - `'HMAC'`\\n             * @since v15.0.0\\n             */\\n            verify(algorithm: AlgorithmIdentifier | RsaPssParams | EcdsaParams | Ed448Params, key: CryptoKey, signature: BufferSource, data: BufferSource): Promise<boolean>;\\n            /**\\n             * In cryptography, \\\"wrapping a key\\\" refers to exporting and then encrypting the keying material.\\n             * The `subtle.wrapKey()` method exports the keying material into the format identified by `format`,\\n             * then encrypts it using the method and parameters specified by `wrapAlgo` and the keying material provided by `wrappingKey`.\\n             * It is the equivalent to calling `subtle.exportKey()` using `format` and `key` as the arguments,\\n             * then passing the result to the `subtle.encrypt()` method using `wrappingKey` and `wrapAlgo` as inputs.\\n             * If successful, the returned promise will be resolved with an `<ArrayBuffer>` containing the encrypted key data.\\n             *\\n             * The wrapping algorithms currently supported include:\\n             *\\n             * - `'RSA-OAEP'`\\n             * - `'AES-CTR'`\\n             * - `'AES-CBC'`\\n             * - `'AES-GCM'`\\n             * - `'AES-KW'`\\n             * @param format Must be one of `'raw'`, `'pkcs8'`, `'spki'`, or `'jwk'`.\\n             * @since v15.0.0\\n             */\\n            wrapKey(format: KeyFormat, key: CryptoKey, wrappingKey: CryptoKey, wrapAlgorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams): Promise<ArrayBuffer>;\\n        }\\n    }\\n}\\ndeclare module 'node:crypto' {\\n    export * from 'crypto';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/dgram.d.ts\":\"/**\\n * The `dgram` module provides an implementation of UDP datagram sockets.\\n *\\n * ```js\\n * import dgram from 'dgram';\\n *\\n * const server = dgram.createSocket('udp4');\\n *\\n * server.on('error', (err) => {\\n *   console.log(`server error:\\\\n${err.stack}`);\\n *   server.close();\\n * });\\n *\\n * server.on('message', (msg, rinfo) => {\\n *   console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\\n * });\\n *\\n * server.on('listening', () => {\\n *   const address = server.address();\\n *   console.log(`server listening ${address.address}:${address.port}`);\\n * });\\n *\\n * server.bind(41234);\\n * // Prints: server listening 0.0.0.0:41234\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/dgram.js)\\n */\\ndeclare module 'dgram' {\\n    import { AddressInfo } from 'node:net';\\n    import * as dns from 'node:dns';\\n    import { EventEmitter, Abortable } from 'node:events';\\n    interface RemoteInfo {\\n        address: string;\\n        family: 'IPv4' | 'IPv6';\\n        port: number;\\n        size: number;\\n    }\\n    interface BindOptions {\\n        port?: number | undefined;\\n        address?: string | undefined;\\n        exclusive?: boolean | undefined;\\n        fd?: number | undefined;\\n    }\\n    type SocketType = 'udp4' | 'udp6';\\n    interface SocketOptions extends Abortable {\\n        type: SocketType;\\n        reuseAddr?: boolean | undefined;\\n        /**\\n         * @default false\\n         */\\n        ipv6Only?: boolean | undefined;\\n        recvBufferSize?: number | undefined;\\n        sendBufferSize?: number | undefined;\\n        lookup?: ((hostname: string, options: dns.LookupOneOptions, callback: (err: NodeJS.ErrnoException | null, address: string, family: number) => void) => void) | undefined;\\n    }\\n    /**\\n     * Creates a `dgram.Socket` object. Once the socket is created, calling `socket.bind()` will instruct the socket to begin listening for datagram\\n     * messages. When `address` and `port` are not passed to `socket.bind()` the\\n     * method will bind the socket to the \\\"all interfaces\\\" address on a random port\\n     * (it does the right thing for both `udp4` and `udp6` sockets). The bound address\\n     * and port can be retrieved using `socket.address().address` and `socket.address().port`.\\n     *\\n     * If the `signal` option is enabled, calling `.abort()` on the corresponding`AbortController` is similar to calling `.close()` on the socket:\\n     *\\n     * ```js\\n     * const controller = new AbortController();\\n     * const { signal } = controller;\\n     * const server = dgram.createSocket({ type: 'udp4', signal });\\n     * server.on('message', (msg, rinfo) => {\\n     *   console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\\n     * });\\n     * // Later, when you want to close the server.\\n     * controller.abort();\\n     * ```\\n     * @since v0.11.13\\n     * @param options Available options are:\\n     * @param callback Attached as a listener for `'message'` events. Optional.\\n     */\\n    function createSocket(type: SocketType, callback?: (msg: Buffer, rinfo: RemoteInfo) => void): Socket;\\n    function createSocket(options: SocketOptions, callback?: (msg: Buffer, rinfo: RemoteInfo) => void): Socket;\\n    /**\\n     * Encapsulates the datagram functionality.\\n     *\\n     * New instances of `dgram.Socket` are created using {@link createSocket}.\\n     * The `new` keyword is not to be used to create `dgram.Socket` instances.\\n     * @since v0.1.99\\n     */\\n    class Socket extends EventEmitter {\\n        /**\\n         * Tells the kernel to join a multicast group at the given `multicastAddress` and`multicastInterface` using the `IP_ADD_MEMBERSHIP` socket option. If the`multicastInterface` argument is not\\n         * specified, the operating system will choose\\n         * one interface and will add membership to it. To add membership to every\\n         * available interface, call `addMembership` multiple times, once per interface.\\n         *\\n         * When called on an unbound socket, this method will implicitly bind to a random\\n         * port, listening on all interfaces.\\n         *\\n         * When sharing a UDP socket across multiple `cluster` workers, the`socket.addMembership()` function must be called only once or an`EADDRINUSE` error will occur:\\n         *\\n         * ```js\\n         * import cluster from 'cluster';\\n         * import dgram from 'dgram';\\n         *\\n         * if (cluster.isPrimary) {\\n         *   cluster.fork(); // Works ok.\\n         *   cluster.fork(); // Fails with EADDRINUSE.\\n         * } else {\\n         *   const s = dgram.createSocket('udp4');\\n         *   s.bind(1234, () => {\\n         *     s.addMembership('224.0.0.114');\\n         *   });\\n         * }\\n         * ```\\n         * @since v0.6.9\\n         */\\n        addMembership(multicastAddress: string, multicastInterface?: string): void;\\n        /**\\n         * Returns an object containing the address information for a socket.\\n         * For UDP sockets, this object will contain `address`, `family` and `port`properties.\\n         *\\n         * This method throws `EBADF` if called on an unbound socket.\\n         * @since v0.1.99\\n         */\\n        address(): AddressInfo;\\n        /**\\n         * For UDP sockets, causes the `dgram.Socket` to listen for datagram\\n         * messages on a named `port` and optional `address`. If `port` is not\\n         * specified or is `0`, the operating system will attempt to bind to a\\n         * random port. If `address` is not specified, the operating system will\\n         * attempt to listen on all addresses. Once binding is complete, a`'listening'` event is emitted and the optional `callback` function is\\n         * called.\\n         *\\n         * Specifying both a `'listening'` event listener and passing a`callback` to the `socket.bind()` method is not harmful but not very\\n         * useful.\\n         *\\n         * A bound datagram socket keeps the Node.js process running to receive\\n         * datagram messages.\\n         *\\n         * If binding fails, an `'error'` event is generated. In rare case (e.g.\\n         * attempting to bind with a closed socket), an `Error` may be thrown.\\n         *\\n         * Example of a UDP server listening on port 41234:\\n         *\\n         * ```js\\n         * import dgram from 'dgram';\\n         *\\n         * const server = dgram.createSocket('udp4');\\n         *\\n         * server.on('error', (err) => {\\n         *   console.log(`server error:\\\\n${err.stack}`);\\n         *   server.close();\\n         * });\\n         *\\n         * server.on('message', (msg, rinfo) => {\\n         *   console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\\n         * });\\n         *\\n         * server.on('listening', () => {\\n         *   const address = server.address();\\n         *   console.log(`server listening ${address.address}:${address.port}`);\\n         * });\\n         *\\n         * server.bind(41234);\\n         * // Prints: server listening 0.0.0.0:41234\\n         * ```\\n         * @since v0.1.99\\n         * @param callback with no parameters. Called when binding is complete.\\n         */\\n        bind(port?: number, address?: string, callback?: () => void): this;\\n        bind(port?: number, callback?: () => void): this;\\n        bind(callback?: () => void): this;\\n        bind(options: BindOptions, callback?: () => void): this;\\n        /**\\n         * Close the underlying socket and stop listening for data on it. If a callback is\\n         * provided, it is added as a listener for the `'close'` event.\\n         * @since v0.1.99\\n         * @param callback Called when the socket has been closed.\\n         */\\n        close(callback?: () => void): this;\\n        /**\\n         * Associates the `dgram.Socket` to a remote address and port. Every\\n         * message sent by this handle is automatically sent to that destination. Also,\\n         * the socket will only receive messages from that remote peer.\\n         * Trying to call `connect()` on an already connected socket will result\\n         * in an `ERR_SOCKET_DGRAM_IS_CONNECTED` exception. If `address` is not\\n         * provided, `'127.0.0.1'` (for `udp4` sockets) or `'::1'` (for `udp6` sockets)\\n         * will be used by default. Once the connection is complete, a `'connect'` event\\n         * is emitted and the optional `callback` function is called. In case of failure,\\n         * the `callback` is called or, failing this, an `'error'` event is emitted.\\n         * @since v12.0.0\\n         * @param callback Called when the connection is completed or on error.\\n         */\\n        connect(port: number, address?: string, callback?: () => void): void;\\n        connect(port: number, callback: () => void): void;\\n        /**\\n         * A synchronous function that disassociates a connected `dgram.Socket` from\\n         * its remote address. Trying to call `disconnect()` on an unbound or already\\n         * disconnected socket will result in an `ERR_SOCKET_DGRAM_NOT_CONNECTED` exception.\\n         * @since v12.0.0\\n         */\\n        disconnect(): void;\\n        /**\\n         * Instructs the kernel to leave a multicast group at `multicastAddress` using the`IP_DROP_MEMBERSHIP` socket option. This method is automatically called by the\\n         * kernel when the socket is closed or the process terminates, so most apps will\\n         * never have reason to call this.\\n         *\\n         * If `multicastInterface` is not specified, the operating system will attempt to\\n         * drop membership on all valid interfaces.\\n         * @since v0.6.9\\n         */\\n        dropMembership(multicastAddress: string, multicastInterface?: string): void;\\n        /**\\n         * This method throws `ERR_SOCKET_BUFFER_SIZE` if called on an unbound socket.\\n         * @since v8.7.0\\n         * @return the `SO_RCVBUF` socket receive buffer size in bytes.\\n         */\\n        getRecvBufferSize(): number;\\n        /**\\n         * This method throws `ERR_SOCKET_BUFFER_SIZE` if called on an unbound socket.\\n         * @since v8.7.0\\n         * @return the `SO_SNDBUF` socket send buffer size in bytes.\\n         */\\n        getSendBufferSize(): number;\\n        /**\\n         * By default, binding a socket will cause it to block the Node.js process from\\n         * exiting as long as the socket is open. The `socket.unref()` method can be used\\n         * to exclude the socket from the reference counting that keeps the Node.js\\n         * process active. The `socket.ref()` method adds the socket back to the reference\\n         * counting and restores the default behavior.\\n         *\\n         * Calling `socket.ref()` multiples times will have no additional effect.\\n         *\\n         * The `socket.ref()` method returns a reference to the socket so calls can be\\n         * chained.\\n         * @since v0.9.1\\n         */\\n        ref(): this;\\n        /**\\n         * Returns an object containing the `address`, `family`, and `port` of the remote\\n         * endpoint. This method throws an `ERR_SOCKET_DGRAM_NOT_CONNECTED` exception\\n         * if the socket is not connected.\\n         * @since v12.0.0\\n         */\\n        remoteAddress(): AddressInfo;\\n        /**\\n         * Broadcasts a datagram on the socket.\\n         * For connectionless sockets, the destination `port` and `address` must be\\n         * specified. Connected sockets, on the other hand, will use their associated\\n         * remote endpoint, so the `port` and `address` arguments must not be set.\\n         *\\n         * The `msg` argument contains the message to be sent.\\n         * Depending on its type, different behavior can apply. If `msg` is a `Buffer`,\\n         * any `TypedArray` or a `DataView`,\\n         * the `offset` and `length` specify the offset within the `Buffer` where the\\n         * message begins and the number of bytes in the message, respectively.\\n         * If `msg` is a `String`, then it is automatically converted to a `Buffer`with `'utf8'` encoding. With messages that\\n         * contain multi-byte characters, `offset` and `length` will be calculated with\\n         * respect to `byte length` and not the character position.\\n         * If `msg` is an array, `offset` and `length` must not be specified.\\n         *\\n         * The `address` argument is a string. If the value of `address` is a host name,\\n         * DNS will be used to resolve the address of the host. If `address` is not\\n         * provided or otherwise nullish, `'127.0.0.1'` (for `udp4` sockets) or `'::1'`(for `udp6` sockets) will be used by default.\\n         *\\n         * If the socket has not been previously bound with a call to `bind`, the socket\\n         * is assigned a random port number and is bound to the \\\"all interfaces\\\" address\\n         * (`'0.0.0.0'` for `udp4` sockets, `'::0'` for `udp6` sockets.)\\n         *\\n         * An optional `callback` function may be specified to as a way of reporting\\n         * DNS errors or for determining when it is safe to reuse the `buf` object.\\n         * DNS lookups delay the time to send for at least one tick of the\\n         * Node.js event loop.\\n         *\\n         * The only way to know for sure that the datagram has been sent is by using a`callback`. If an error occurs and a `callback` is given, the error will be\\n         * passed as the first argument to the `callback`. If a `callback` is not given,\\n         * the error is emitted as an `'error'` event on the `socket` object.\\n         *\\n         * Offset and length are optional but both _must_ be set if either are used.\\n         * They are supported only when the first argument is a `Buffer`, a `TypedArray`,\\n         * or a `DataView`.\\n         *\\n         * This method throws `ERR_SOCKET_BAD_PORT` if called on an unbound socket.\\n         *\\n         * Example of sending a UDP packet to a port on `localhost`;\\n         *\\n         * ```js\\n         * import dgram from 'dgram';\\n         * import { Buffer } from 'buffer';\\n         *\\n         * const message = Buffer.from('Some bytes');\\n         * const client = dgram.createSocket('udp4');\\n         * client.send(message, 41234, 'localhost', (err) => {\\n         *   client.close();\\n         * });\\n         * ```\\n         *\\n         * Example of sending a UDP packet composed of multiple buffers to a port on`127.0.0.1`;\\n         *\\n         * ```js\\n         * import dgram from 'dgram';\\n         * import { Buffer } from 'buffer';\\n         *\\n         * const buf1 = Buffer.from('Some ');\\n         * const buf2 = Buffer.from('bytes');\\n         * const client = dgram.createSocket('udp4');\\n         * client.send([buf1, buf2], 41234, (err) => {\\n         *   client.close();\\n         * });\\n         * ```\\n         *\\n         * Sending multiple buffers might be faster or slower depending on the\\n         * application and operating system. Run benchmarks to\\n         * determine the optimal strategy on a case-by-case basis. Generally speaking,\\n         * however, sending multiple buffers is faster.\\n         *\\n         * Example of sending a UDP packet using a socket connected to a port on`localhost`:\\n         *\\n         * ```js\\n         * import dgram from 'dgram';\\n         * import { Buffer } from 'buffer';\\n         *\\n         * const message = Buffer.from('Some bytes');\\n         * const client = dgram.createSocket('udp4');\\n         * client.connect(41234, 'localhost', (err) => {\\n         *   client.send(message, (err) => {\\n         *     client.close();\\n         *   });\\n         * });\\n         * ```\\n         * @since v0.1.99\\n         * @param msg Message to be sent.\\n         * @param offset Offset in the buffer where the message starts.\\n         * @param length Number of bytes in the message.\\n         * @param port Destination port.\\n         * @param address Destination host name or IP address.\\n         * @param callback Called when the message has been sent.\\n         */\\n        send(msg: string | Uint8Array | ReadonlyArray<any>, port?: number, address?: string, callback?: (error: Error | null, bytes: number) => void): void;\\n        send(msg: string | Uint8Array | ReadonlyArray<any>, port?: number, callback?: (error: Error | null, bytes: number) => void): void;\\n        send(msg: string | Uint8Array | ReadonlyArray<any>, callback?: (error: Error | null, bytes: number) => void): void;\\n        send(msg: string | Uint8Array, offset: number, length: number, port?: number, address?: string, callback?: (error: Error | null, bytes: number) => void): void;\\n        send(msg: string | Uint8Array, offset: number, length: number, port?: number, callback?: (error: Error | null, bytes: number) => void): void;\\n        send(msg: string | Uint8Array, offset: number, length: number, callback?: (error: Error | null, bytes: number) => void): void;\\n        /**\\n         * Sets or clears the `SO_BROADCAST` socket option. When set to `true`, UDP\\n         * packets may be sent to a local interface's broadcast address.\\n         *\\n         * This method throws `EBADF` if called on an unbound socket.\\n         * @since v0.6.9\\n         */\\n        setBroadcast(flag: boolean): void;\\n        /**\\n         * _All references to scope in this section are referring to [IPv6 Zone Indices](https://en.wikipedia.org/wiki/IPv6_address#Scoped_literal_IPv6_addresses), which are defined by [RFC\\n         * 4007](https://tools.ietf.org/html/rfc4007). In string form, an IP_\\n         * _with a scope index is written as `'IP%scope'` where scope is an interface name_\\n         * _or interface number._\\n         *\\n         * Sets the default outgoing multicast interface of the socket to a chosen\\n         * interface or back to system interface selection. The `multicastInterface` must\\n         * be a valid string representation of an IP from the socket's family.\\n         *\\n         * For IPv4 sockets, this should be the IP configured for the desired physical\\n         * interface. All packets sent to multicast on the socket will be sent on the\\n         * interface determined by the most recent successful use of this call.\\n         *\\n         * For IPv6 sockets, `multicastInterface` should include a scope to indicate the\\n         * interface as in the examples that follow. In IPv6, individual `send` calls can\\n         * also use explicit scope in addresses, so only packets sent to a multicast\\n         * address without specifying an explicit scope are affected by the most recent\\n         * successful use of this call.\\n         *\\n         * This method throws `EBADF` if called on an unbound socket.\\n         *\\n         * #### Example: IPv6 outgoing multicast interface\\n         *\\n         * On most systems, where scope format uses the interface name:\\n         *\\n         * ```js\\n         * const socket = dgram.createSocket('udp6');\\n         *\\n         * socket.bind(1234, () => {\\n         *   socket.setMulticastInterface('::%eth1');\\n         * });\\n         * ```\\n         *\\n         * On Windows, where scope format uses an interface number:\\n         *\\n         * ```js\\n         * const socket = dgram.createSocket('udp6');\\n         *\\n         * socket.bind(1234, () => {\\n         *   socket.setMulticastInterface('::%2');\\n         * });\\n         * ```\\n         *\\n         * #### Example: IPv4 outgoing multicast interface\\n         *\\n         * All systems use an IP of the host on the desired physical interface:\\n         *\\n         * ```js\\n         * const socket = dgram.createSocket('udp4');\\n         *\\n         * socket.bind(1234, () => {\\n         *   socket.setMulticastInterface('10.0.0.2');\\n         * });\\n         * ```\\n         * @since v8.6.0\\n         */\\n        setMulticastInterface(multicastInterface: string): void;\\n        /**\\n         * Sets or clears the `IP_MULTICAST_LOOP` socket option. When set to `true`,\\n         * multicast packets will also be received on the local interface.\\n         *\\n         * This method throws `EBADF` if called on an unbound socket.\\n         * @since v0.3.8\\n         */\\n        setMulticastLoopback(flag: boolean): boolean;\\n        /**\\n         * Sets the `IP_MULTICAST_TTL` socket option. While TTL generally stands for\\n         * \\\"Time to Live\\\", in this context it specifies the number of IP hops that a\\n         * packet is allowed to travel through, specifically for multicast traffic. Each\\n         * router or gateway that forwards a packet decrements the TTL. If the TTL is\\n         * decremented to 0 by a router, it will not be forwarded.\\n         *\\n         * The `ttl` argument may be between 0 and 255\\\\. The default on most systems is `1`.\\n         *\\n         * This method throws `EBADF` if called on an unbound socket.\\n         * @since v0.3.8\\n         */\\n        setMulticastTTL(ttl: number): number;\\n        /**\\n         * Sets the `SO_RCVBUF` socket option. Sets the maximum socket receive buffer\\n         * in bytes.\\n         *\\n         * This method throws `ERR_SOCKET_BUFFER_SIZE` if called on an unbound socket.\\n         * @since v8.7.0\\n         */\\n        setRecvBufferSize(size: number): void;\\n        /**\\n         * Sets the `SO_SNDBUF` socket option. Sets the maximum socket send buffer\\n         * in bytes.\\n         *\\n         * This method throws `ERR_SOCKET_BUFFER_SIZE` if called on an unbound socket.\\n         * @since v8.7.0\\n         */\\n        setSendBufferSize(size: number): void;\\n        /**\\n         * Sets the `IP_TTL` socket option. While TTL generally stands for \\\"Time to Live\\\",\\n         * in this context it specifies the number of IP hops that a packet is allowed to\\n         * travel through. Each router or gateway that forwards a packet decrements the\\n         * TTL. If the TTL is decremented to 0 by a router, it will not be forwarded.\\n         * Changing TTL values is typically done for network probes or when multicasting.\\n         *\\n         * The `ttl` argument may be between 1 and 255\\\\. The default on most systems\\n         * is 64.\\n         *\\n         * This method throws `EBADF` if called on an unbound socket.\\n         * @since v0.1.101\\n         */\\n        setTTL(ttl: number): number;\\n        /**\\n         * By default, binding a socket will cause it to block the Node.js process from\\n         * exiting as long as the socket is open. The `socket.unref()` method can be used\\n         * to exclude the socket from the reference counting that keeps the Node.js\\n         * process active, allowing the process to exit even if the socket is still\\n         * listening.\\n         *\\n         * Calling `socket.unref()` multiple times will have no addition effect.\\n         *\\n         * The `socket.unref()` method returns a reference to the socket so calls can be\\n         * chained.\\n         * @since v0.9.1\\n         */\\n        unref(): this;\\n        /**\\n         * Tells the kernel to join a source-specific multicast channel at the given`sourceAddress` and `groupAddress`, using the `multicastInterface` with the`IP_ADD_SOURCE_MEMBERSHIP` socket\\n         * option. If the `multicastInterface` argument\\n         * is not specified, the operating system will choose one interface and will add\\n         * membership to it. To add membership to every available interface, call`socket.addSourceSpecificMembership()` multiple times, once per interface.\\n         *\\n         * When called on an unbound socket, this method will implicitly bind to a random\\n         * port, listening on all interfaces.\\n         * @since v13.1.0, v12.16.0\\n         */\\n        addSourceSpecificMembership(sourceAddress: string, groupAddress: string, multicastInterface?: string): void;\\n        /**\\n         * Instructs the kernel to leave a source-specific multicast channel at the given`sourceAddress` and `groupAddress` using the `IP_DROP_SOURCE_MEMBERSHIP`socket option. This method is\\n         * automatically called by the kernel when the\\n         * socket is closed or the process terminates, so most apps will never have\\n         * reason to call this.\\n         *\\n         * If `multicastInterface` is not specified, the operating system will attempt to\\n         * drop membership on all valid interfaces.\\n         * @since v13.1.0, v12.16.0\\n         */\\n        dropSourceSpecificMembership(sourceAddress: string, groupAddress: string, multicastInterface?: string): void;\\n        /**\\n         * events.EventEmitter\\n         * 1. close\\n         * 2. connect\\n         * 3. error\\n         * 4. listening\\n         * 5. message\\n         */\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        addListener(event: 'close', listener: () => void): this;\\n        addListener(event: 'connect', listener: () => void): this;\\n        addListener(event: 'error', listener: (err: Error) => void): this;\\n        addListener(event: 'listening', listener: () => void): this;\\n        addListener(event: 'message', listener: (msg: Buffer, rinfo: RemoteInfo) => void): this;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        emit(event: 'close'): boolean;\\n        emit(event: 'connect'): boolean;\\n        emit(event: 'error', err: Error): boolean;\\n        emit(event: 'listening'): boolean;\\n        emit(event: 'message', msg: Buffer, rinfo: RemoteInfo): boolean;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        on(event: 'close', listener: () => void): this;\\n        on(event: 'connect', listener: () => void): this;\\n        on(event: 'error', listener: (err: Error) => void): this;\\n        on(event: 'listening', listener: () => void): this;\\n        on(event: 'message', listener: (msg: Buffer, rinfo: RemoteInfo) => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        once(event: 'close', listener: () => void): this;\\n        once(event: 'connect', listener: () => void): this;\\n        once(event: 'error', listener: (err: Error) => void): this;\\n        once(event: 'listening', listener: () => void): this;\\n        once(event: 'message', listener: (msg: Buffer, rinfo: RemoteInfo) => void): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'close', listener: () => void): this;\\n        prependListener(event: 'connect', listener: () => void): this;\\n        prependListener(event: 'error', listener: (err: Error) => void): this;\\n        prependListener(event: 'listening', listener: () => void): this;\\n        prependListener(event: 'message', listener: (msg: Buffer, rinfo: RemoteInfo) => void): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'close', listener: () => void): this;\\n        prependOnceListener(event: 'connect', listener: () => void): this;\\n        prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n        prependOnceListener(event: 'listening', listener: () => void): this;\\n        prependOnceListener(event: 'message', listener: (msg: Buffer, rinfo: RemoteInfo) => void): this;\\n    }\\n}\\ndeclare module 'node:dgram' {\\n    export * from 'dgram';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/diagnostics_channel.d.ts\":\"/**\\n * The `diagnostics_channel` module provides an API to create named channels\\n * to report arbitrary message data for diagnostics purposes.\\n *\\n * It can be accessed using:\\n *\\n * ```js\\n * import diagnostics_channel from 'diagnostics_channel';\\n * ```\\n *\\n * It is intended that a module writer wanting to report diagnostics messages\\n * will create one or many top-level channels to report messages through.\\n * Channels may also be acquired at runtime but it is not encouraged\\n * due to the additional overhead of doing so. Channels may be exported for\\n * convenience, but as long as the name is known it can be acquired anywhere.\\n *\\n * If you intend for your module to produce diagnostics data for others to\\n * consume it is recommended that you include documentation of what named\\n * channels are used along with the shape of the message data. Channel names\\n * should generally include the module name to avoid collisions with data from\\n * other modules.\\n * @experimental\\n * @see [source](https://github.com/nodejs/node/blob/v18.7.0/lib/diagnostics_channel.js)\\n */\\ndeclare module 'diagnostics_channel' {\\n    /**\\n     * Check if there are active subscribers to the named channel. This is helpful if\\n     * the message you want to send might be expensive to prepare.\\n     *\\n     * This API is optional but helpful when trying to publish messages from very\\n     * performance-sensitive code.\\n     *\\n     * ```js\\n     * import diagnostics_channel from 'diagnostics_channel';\\n     *\\n     * if (diagnostics_channel.hasSubscribers('my-channel')) {\\n     *   // There are subscribers, prepare and publish message\\n     * }\\n     * ```\\n     * @since v15.1.0, v14.17.0\\n     * @param name The channel name\\n     * @return If there are active subscribers\\n     */\\n    function hasSubscribers(name: string | symbol): boolean;\\n    /**\\n     * This is the primary entry-point for anyone wanting to interact with a named\\n     * channel. It produces a channel object which is optimized to reduce overhead at\\n     * publish time as much as possible.\\n     *\\n     * ```js\\n     * import diagnostics_channel from 'diagnostics_channel';\\n     *\\n     * const channel = diagnostics_channel.channel('my-channel');\\n     * ```\\n     * @since v15.1.0, v14.17.0\\n     * @param name The channel name\\n     * @return The named channel object\\n     */\\n    function channel(name: string | symbol): Channel;\\n    type ChannelListener = (message: unknown, name: string | symbol) => void;\\n    /**\\n     * Register a message handler to subscribe to this channel. This message handler will be run synchronously\\n     * whenever a message is published to the channel. Any errors thrown in the message handler will\\n     * trigger an 'uncaughtException'.\\n     *\\n     * ```js\\n     * import diagnostics_channel from 'diagnostics_channel';\\n     *\\n     * diagnostics_channel.subscribe('my-channel', (message, name) => {\\n     *   // Received data\\n     * });\\n     * ```\\n     *\\n     * @since v18.7.0, v16.17.0\\n     * @param name The channel name\\n     * @param onMessage The handler to receive channel messages\\n     */\\n    function subscribe(name: string | symbol, onMessage: ChannelListener): void;\\n    /**\\n     * Remove a message handler previously registered to this channel with diagnostics_channel.subscribe(name, onMessage).\\n     *\\n     * ```js\\n     * import diagnostics_channel from 'diagnostics_channel';\\n     *\\n     * function onMessage(message, name) {\\n     *  // Received data\\n     * }\\n     *\\n     * diagnostics_channel.subscribe('my-channel', onMessage);\\n     *\\n     * diagnostics_channel.unsubscribe('my-channel', onMessage);\\n     * ```\\n     *\\n     * @since v18.7.0, v16.17.0\\n     * @param name The channel name\\n     * @param onMessage The previous subscribed handler to remove\\n     * @returns `true` if the handler was found, `false` otherwise\\n     */\\n    function unsubscribe(name: string | symbol, onMessage: ChannelListener): boolean;\\n    /**\\n     * The class `Channel` represents an individual named channel within the data\\n     * pipeline. It is use to track subscribers and to publish messages when there\\n     * are subscribers present. It exists as a separate object to avoid channel\\n     * lookups at publish time, enabling very fast publish speeds and allowing\\n     * for heavy use while incurring very minimal cost. Channels are created with {@link channel}, constructing a channel directly\\n     * with `new Channel(name)` is not supported.\\n     * @since v15.1.0, v14.17.0\\n     */\\n    class Channel {\\n        readonly name: string | symbol;\\n        /**\\n         * Check if there are active subscribers to this channel. This is helpful if\\n         * the message you want to send might be expensive to prepare.\\n         *\\n         * This API is optional but helpful when trying to publish messages from very\\n         * performance-sensitive code.\\n         *\\n         * ```js\\n         * import diagnostics_channel from 'diagnostics_channel';\\n         *\\n         * const channel = diagnostics_channel.channel('my-channel');\\n         *\\n         * if (channel.hasSubscribers) {\\n         *   // There are subscribers, prepare and publish message\\n         * }\\n         * ```\\n         * @since v15.1.0, v14.17.0\\n         */\\n        readonly hasSubscribers: boolean;\\n        private constructor(name: string | symbol);\\n        /**\\n         * Publish a message to any subscribers to the channel. This will\\n         * trigger message handlers synchronously so they will execute within\\n         * the same context.\\n         *\\n         * ```js\\n         * import diagnostics_channel from 'diagnostics_channel';\\n         *\\n         * const channel = diagnostics_channel.channel('my-channel');\\n         *\\n         * channel.publish({\\n         *   some: 'message'\\n         * });\\n         * ```\\n         * @since v15.1.0, v14.17.0\\n         * @param message The message to send to the channel subscribers\\n         */\\n        publish(message: unknown): void;\\n        /**\\n         * Register a message handler to subscribe to this channel. This message handler\\n         * will be run synchronously whenever a message is published to the channel. Any\\n         * errors thrown in the message handler will trigger an `'uncaughtException'`.\\n         *\\n         * ```js\\n         * import diagnostics_channel from 'diagnostics_channel';\\n         *\\n         * const channel = diagnostics_channel.channel('my-channel');\\n         *\\n         * channel.subscribe((message, name) => {\\n         *   // Received data\\n         * });\\n         * ```\\n         * @since v15.1.0, v14.17.0\\n         * @param onMessage The handler to receive channel messages\\n         */\\n        subscribe(onMessage: ChannelListener): void;\\n        /**\\n         * Remove a message handler previously registered to this channel with `channel.subscribe(onMessage)`.\\n         *\\n         * ```js\\n         * import diagnostics_channel from 'diagnostics_channel';\\n         *\\n         * const channel = diagnostics_channel.channel('my-channel');\\n         *\\n         * function onMessage(message, name) {\\n         *   // Received data\\n         * }\\n         *\\n         * channel.subscribe(onMessage);\\n         *\\n         * channel.unsubscribe(onMessage);\\n         * ```\\n         * @since v15.1.0, v14.17.0\\n         * @param onMessage The previous subscribed handler to remove\\n         * @return `true` if the handler was found, `false` otherwise.\\n         */\\n        unsubscribe(onMessage: ChannelListener): void;\\n    }\\n}\\ndeclare module 'node:diagnostics_channel' {\\n    export * from 'diagnostics_channel';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/dns.d.ts\":\"/**\\n * The `dns` module enables name resolution. For example, use it to look up IP\\n * addresses of host names.\\n *\\n * Although named for the [Domain Name System (DNS)](https://en.wikipedia.org/wiki/Domain_Name_System), it does not always use the\\n * DNS protocol for lookups. {@link lookup} uses the operating system\\n * facilities to perform name resolution. It may not need to perform any network\\n * communication. To perform name resolution the way other applications on the same\\n * system do, use {@link lookup}.\\n *\\n * ```js\\n * const dns = require('dns');\\n *\\n * dns.lookup('example.org', (err, address, family) => {\\n *   console.log('address: %j family: IPv%s', address, family);\\n * });\\n * // address: \\\"93.184.216.34\\\" family: IPv4\\n * ```\\n *\\n * All other functions in the `dns` module connect to an actual DNS server to\\n * perform name resolution. They will always use the network to perform DNS\\n * queries. These functions do not use the same set of configuration files used by {@link lookup} (e.g. `/etc/hosts`). Use these functions to always perform\\n * DNS queries, bypassing other name-resolution facilities.\\n *\\n * ```js\\n * const dns = require('dns');\\n *\\n * dns.resolve4('archive.org', (err, addresses) => {\\n *   if (err) throw err;\\n *\\n *   console.log(`addresses: ${JSON.stringify(addresses)}`);\\n *\\n *   addresses.forEach((a) => {\\n *     dns.reverse(a, (err, hostnames) => {\\n *       if (err) {\\n *         throw err;\\n *       }\\n *       console.log(`reverse for ${a}: ${JSON.stringify(hostnames)}`);\\n *     });\\n *   });\\n * });\\n * ```\\n *\\n * See the `Implementation considerations section` for more information.\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/dns.js)\\n */\\ndeclare module 'dns' {\\n    import * as dnsPromises from 'node:dns/promises';\\n    // Supported getaddrinfo flags.\\n    export const ADDRCONFIG: number;\\n    export const V4MAPPED: number;\\n    /**\\n     * If `dns.V4MAPPED` is specified, return resolved IPv6 addresses as\\n     * well as IPv4 mapped IPv6 addresses.\\n     */\\n    export const ALL: number;\\n    export interface LookupOptions {\\n        family?: number | undefined;\\n        hints?: number | undefined;\\n        all?: boolean | undefined;\\n        /**\\n         * @default true\\n         */\\n        verbatim?: boolean | undefined;\\n    }\\n    export interface LookupOneOptions extends LookupOptions {\\n        all?: false | undefined;\\n    }\\n    export interface LookupAllOptions extends LookupOptions {\\n        all: true;\\n    }\\n    export interface LookupAddress {\\n        address: string;\\n        family: number;\\n    }\\n    /**\\n     * Resolves a host name (e.g. `'nodejs.org'`) into the first found A (IPv4) or\\n     * AAAA (IPv6) record. All `option` properties are optional. If `options` is an\\n     * integer, then it must be `4` or `6` \u2013 if `options` is not provided, then IPv4\\n     * and IPv6 addresses are both returned if found.\\n     *\\n     * With the `all` option set to `true`, the arguments for `callback` change to`(err, addresses)`, with `addresses` being an array of objects with the\\n     * properties `address` and `family`.\\n     *\\n     * On error, `err` is an `Error` object, where `err.code` is the error code.\\n     * Keep in mind that `err.code` will be set to `'ENOTFOUND'` not only when\\n     * the host name does not exist but also when the lookup fails in other ways\\n     * such as no available file descriptors.\\n     *\\n     * `dns.lookup()` does not necessarily have anything to do with the DNS protocol.\\n     * The implementation uses an operating system facility that can associate names\\n     * with addresses, and vice versa. This implementation can have subtle but\\n     * important consequences on the behavior of any Node.js program. Please take some\\n     * time to consult the `Implementation considerations section` before using`dns.lookup()`.\\n     *\\n     * Example usage:\\n     *\\n     * ```js\\n     * const dns = require('dns');\\n     * const options = {\\n     *   family: 6,\\n     *   hints: dns.ADDRCONFIG | dns.V4MAPPED,\\n     * };\\n     * dns.lookup('example.com', options, (err, address, family) =>\\n     *   console.log('address: %j family: IPv%s', address, family));\\n     * // address: \\\"2606:2800:220:1:248:1893:25c8:1946\\\" family: IPv6\\n     *\\n     * // When options.all is true, the result will be an Array.\\n     * options.all = true;\\n     * dns.lookup('example.com', options, (err, addresses) =>\\n     *   console.log('addresses: %j', addresses));\\n     * // addresses: [{\\\"address\\\":\\\"2606:2800:220:1:248:1893:25c8:1946\\\",\\\"family\\\":6}]\\n     * ```\\n     *\\n     * If this method is invoked as its `util.promisify()` ed version, and `all`is not set to `true`, it returns a `Promise` for an `Object` with `address` and`family` properties.\\n     * @since v0.1.90\\n     */\\n    export function lookup(hostname: string, family: number, callback: (err: NodeJS.ErrnoException | null, address: string, family: number) => void): void;\\n    export function lookup(hostname: string, options: LookupOneOptions, callback: (err: NodeJS.ErrnoException | null, address: string, family: number) => void): void;\\n    export function lookup(hostname: string, options: LookupAllOptions, callback: (err: NodeJS.ErrnoException | null, addresses: LookupAddress[]) => void): void;\\n    export function lookup(hostname: string, options: LookupOptions, callback: (err: NodeJS.ErrnoException | null, address: string | LookupAddress[], family: number) => void): void;\\n    export function lookup(hostname: string, callback: (err: NodeJS.ErrnoException | null, address: string, family: number) => void): void;\\n    export namespace lookup {\\n        function __promisify__(hostname: string, options: LookupAllOptions): Promise<LookupAddress[]>;\\n        function __promisify__(hostname: string, options?: LookupOneOptions | number): Promise<LookupAddress>;\\n        function __promisify__(hostname: string, options: LookupOptions): Promise<LookupAddress | LookupAddress[]>;\\n    }\\n    /**\\n     * Resolves the given `address` and `port` into a host name and service using\\n     * the operating system's underlying `getnameinfo` implementation.\\n     *\\n     * If `address` is not a valid IP address, a `TypeError` will be thrown.\\n     * The `port` will be coerced to a number. If it is not a legal port, a `TypeError`will be thrown.\\n     *\\n     * On an error, `err` is an `Error` object, where `err.code` is the error code.\\n     *\\n     * ```js\\n     * const dns = require('dns');\\n     * dns.lookupService('127.0.0.1', 22, (err, hostname, service) => {\\n     *   console.log(hostname, service);\\n     *   // Prints: localhost ssh\\n     * });\\n     * ```\\n     *\\n     * If this method is invoked as its `util.promisify()` ed version, it returns a`Promise` for an `Object` with `hostname` and `service` properties.\\n     * @since v0.11.14\\n     */\\n    export function lookupService(address: string, port: number, callback: (err: NodeJS.ErrnoException | null, hostname: string, service: string) => void): void;\\n    export namespace lookupService {\\n        function __promisify__(\\n            address: string,\\n            port: number\\n        ): Promise<{\\n            hostname: string;\\n            service: string;\\n        }>;\\n    }\\n    export interface ResolveOptions {\\n        ttl: boolean;\\n    }\\n    export interface ResolveWithTtlOptions extends ResolveOptions {\\n        ttl: true;\\n    }\\n    export interface RecordWithTtl {\\n        address: string;\\n        ttl: number;\\n    }\\n    /** @deprecated Use `AnyARecord` or `AnyAaaaRecord` instead. */\\n    export type AnyRecordWithTtl = AnyARecord | AnyAaaaRecord;\\n    export interface AnyARecord extends RecordWithTtl {\\n        type: 'A';\\n    }\\n    export interface AnyAaaaRecord extends RecordWithTtl {\\n        type: 'AAAA';\\n    }\\n    export interface CaaRecord {\\n        critical: number;\\n        issue?: string | undefined;\\n        issuewild?: string | undefined;\\n        iodef?: string | undefined;\\n        contactemail?: string | undefined;\\n        contactphone?: string | undefined;\\n    }\\n    export interface MxRecord {\\n        priority: number;\\n        exchange: string;\\n    }\\n    export interface AnyMxRecord extends MxRecord {\\n        type: 'MX';\\n    }\\n    export interface NaptrRecord {\\n        flags: string;\\n        service: string;\\n        regexp: string;\\n        replacement: string;\\n        order: number;\\n        preference: number;\\n    }\\n    export interface AnyNaptrRecord extends NaptrRecord {\\n        type: 'NAPTR';\\n    }\\n    export interface SoaRecord {\\n        nsname: string;\\n        hostmaster: string;\\n        serial: number;\\n        refresh: number;\\n        retry: number;\\n        expire: number;\\n        minttl: number;\\n    }\\n    export interface AnySoaRecord extends SoaRecord {\\n        type: 'SOA';\\n    }\\n    export interface SrvRecord {\\n        priority: number;\\n        weight: number;\\n        port: number;\\n        name: string;\\n    }\\n    export interface AnySrvRecord extends SrvRecord {\\n        type: 'SRV';\\n    }\\n    export interface AnyTxtRecord {\\n        type: 'TXT';\\n        entries: string[];\\n    }\\n    export interface AnyNsRecord {\\n        type: 'NS';\\n        value: string;\\n    }\\n    export interface AnyPtrRecord {\\n        type: 'PTR';\\n        value: string;\\n    }\\n    export interface AnyCnameRecord {\\n        type: 'CNAME';\\n        value: string;\\n    }\\n    export type AnyRecord = AnyARecord | AnyAaaaRecord | AnyCnameRecord | AnyMxRecord | AnyNaptrRecord | AnyNsRecord | AnyPtrRecord | AnySoaRecord | AnySrvRecord | AnyTxtRecord;\\n    /**\\n     * Uses the DNS protocol to resolve a host name (e.g. `'nodejs.org'`) into an array\\n     * of the resource records. The `callback` function has arguments`(err, records)`. When successful, `records` will be an array of resource\\n     * records. The type and structure of individual results varies based on `rrtype`:\\n     *\\n     * <omitted>\\n     *\\n     * On error, `err` is an `Error` object, where `err.code` is one of the `DNS error codes`.\\n     * @since v0.1.27\\n     * @param hostname Host name to resolve.\\n     * @param [rrtype='A'] Resource record type.\\n     */\\n    export function resolve(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\n    export function resolve(hostname: string, rrtype: 'A', callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\n    export function resolve(hostname: string, rrtype: 'AAAA', callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\n    export function resolve(hostname: string, rrtype: 'ANY', callback: (err: NodeJS.ErrnoException | null, addresses: AnyRecord[]) => void): void;\\n    export function resolve(hostname: string, rrtype: 'CNAME', callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\n    export function resolve(hostname: string, rrtype: 'MX', callback: (err: NodeJS.ErrnoException | null, addresses: MxRecord[]) => void): void;\\n    export function resolve(hostname: string, rrtype: 'NAPTR', callback: (err: NodeJS.ErrnoException | null, addresses: NaptrRecord[]) => void): void;\\n    export function resolve(hostname: string, rrtype: 'NS', callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\n    export function resolve(hostname: string, rrtype: 'PTR', callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\n    export function resolve(hostname: string, rrtype: 'SOA', callback: (err: NodeJS.ErrnoException | null, addresses: SoaRecord) => void): void;\\n    export function resolve(hostname: string, rrtype: 'SRV', callback: (err: NodeJS.ErrnoException | null, addresses: SrvRecord[]) => void): void;\\n    export function resolve(hostname: string, rrtype: 'TXT', callback: (err: NodeJS.ErrnoException | null, addresses: string[][]) => void): void;\\n    export function resolve(\\n        hostname: string,\\n        rrtype: string,\\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[] | MxRecord[] | NaptrRecord[] | SoaRecord | SrvRecord[] | string[][] | AnyRecord[]) => void\\n    ): void;\\n    export namespace resolve {\\n        function __promisify__(hostname: string, rrtype?: 'A' | 'AAAA' | 'CNAME' | 'NS' | 'PTR'): Promise<string[]>;\\n        function __promisify__(hostname: string, rrtype: 'ANY'): Promise<AnyRecord[]>;\\n        function __promisify__(hostname: string, rrtype: 'MX'): Promise<MxRecord[]>;\\n        function __promisify__(hostname: string, rrtype: 'NAPTR'): Promise<NaptrRecord[]>;\\n        function __promisify__(hostname: string, rrtype: 'SOA'): Promise<SoaRecord>;\\n        function __promisify__(hostname: string, rrtype: 'SRV'): Promise<SrvRecord[]>;\\n        function __promisify__(hostname: string, rrtype: 'TXT'): Promise<string[][]>;\\n        function __promisify__(hostname: string, rrtype: string): Promise<string[] | MxRecord[] | NaptrRecord[] | SoaRecord | SrvRecord[] | string[][] | AnyRecord[]>;\\n    }\\n    /**\\n     * Uses the DNS protocol to resolve a IPv4 addresses (`A` records) for the`hostname`. The `addresses` argument passed to the `callback` function\\n     * will contain an array of IPv4 addresses (e.g.`['74.125.79.104', '74.125.79.105', '74.125.79.106']`).\\n     * @since v0.1.16\\n     * @param hostname Host name to resolve.\\n     */\\n    export function resolve4(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\n    export function resolve4(hostname: string, options: ResolveWithTtlOptions, callback: (err: NodeJS.ErrnoException | null, addresses: RecordWithTtl[]) => void): void;\\n    export function resolve4(hostname: string, options: ResolveOptions, callback: (err: NodeJS.ErrnoException | null, addresses: string[] | RecordWithTtl[]) => void): void;\\n    export namespace resolve4 {\\n        function __promisify__(hostname: string): Promise<string[]>;\\n        function __promisify__(hostname: string, options: ResolveWithTtlOptions): Promise<RecordWithTtl[]>;\\n        function __promisify__(hostname: string, options?: ResolveOptions): Promise<string[] | RecordWithTtl[]>;\\n    }\\n    /**\\n     * Uses the DNS protocol to resolve a IPv6 addresses (`AAAA` records) for the`hostname`. The `addresses` argument passed to the `callback` function\\n     * will contain an array of IPv6 addresses.\\n     * @since v0.1.16\\n     * @param hostname Host name to resolve.\\n     */\\n    export function resolve6(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\n    export function resolve6(hostname: string, options: ResolveWithTtlOptions, callback: (err: NodeJS.ErrnoException | null, addresses: RecordWithTtl[]) => void): void;\\n    export function resolve6(hostname: string, options: ResolveOptions, callback: (err: NodeJS.ErrnoException | null, addresses: string[] | RecordWithTtl[]) => void): void;\\n    export namespace resolve6 {\\n        function __promisify__(hostname: string): Promise<string[]>;\\n        function __promisify__(hostname: string, options: ResolveWithTtlOptions): Promise<RecordWithTtl[]>;\\n        function __promisify__(hostname: string, options?: ResolveOptions): Promise<string[] | RecordWithTtl[]>;\\n    }\\n    /**\\n     * Uses the DNS protocol to resolve `CNAME` records for the `hostname`. The`addresses` argument passed to the `callback` function\\n     * will contain an array of canonical name records available for the `hostname`(e.g. `['bar.example.com']`).\\n     * @since v0.3.2\\n     */\\n    export function resolveCname(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\n    export namespace resolveCname {\\n        function __promisify__(hostname: string): Promise<string[]>;\\n    }\\n    /**\\n     * Uses the DNS protocol to resolve `CAA` records for the `hostname`. The`addresses` argument passed to the `callback` function\\n     * will contain an array of certification authority authorization records\\n     * available for the `hostname` (e.g. `[{critical: 0, iodef: 'mailto:pki@example.com'}, {critical: 128, issue: 'pki.example.com'}]`).\\n     * @since v15.0.0, v14.17.0\\n     */\\n    export function resolveCaa(hostname: string, callback: (err: NodeJS.ErrnoException | null, records: CaaRecord[]) => void): void;\\n    export namespace resolveCaa {\\n        function __promisify__(hostname: string): Promise<CaaRecord[]>;\\n    }\\n    /**\\n     * Uses the DNS protocol to resolve mail exchange records (`MX` records) for the`hostname`. The `addresses` argument passed to the `callback` function will\\n     * contain an array of objects containing both a `priority` and `exchange`property (e.g. `[{priority: 10, exchange: 'mx.example.com'}, ...]`).\\n     * @since v0.1.27\\n     */\\n    export function resolveMx(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: MxRecord[]) => void): void;\\n    export namespace resolveMx {\\n        function __promisify__(hostname: string): Promise<MxRecord[]>;\\n    }\\n    /**\\n     * Uses the DNS protocol to resolve regular expression based records (`NAPTR`records) for the `hostname`. The `addresses` argument passed to the `callback`function will contain an array of\\n     * objects with the following properties:\\n     *\\n     * * `flags`\\n     * * `service`\\n     * * `regexp`\\n     * * `replacement`\\n     * * `order`\\n     * * `preference`\\n     *\\n     * ```js\\n     * {\\n     *   flags: 's',\\n     *   service: 'SIP+D2U',\\n     *   regexp: '',\\n     *   replacement: '_sip._udp.example.com',\\n     *   order: 30,\\n     *   preference: 100\\n     * }\\n     * ```\\n     * @since v0.9.12\\n     */\\n    export function resolveNaptr(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: NaptrRecord[]) => void): void;\\n    export namespace resolveNaptr {\\n        function __promisify__(hostname: string): Promise<NaptrRecord[]>;\\n    }\\n    /**\\n     * Uses the DNS protocol to resolve name server records (`NS` records) for the`hostname`. The `addresses` argument passed to the `callback` function will\\n     * contain an array of name server records available for `hostname`(e.g. `['ns1.example.com', 'ns2.example.com']`).\\n     * @since v0.1.90\\n     */\\n    export function resolveNs(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\n    export namespace resolveNs {\\n        function __promisify__(hostname: string): Promise<string[]>;\\n    }\\n    /**\\n     * Uses the DNS protocol to resolve pointer records (`PTR` records) for the`hostname`. The `addresses` argument passed to the `callback` function will\\n     * be an array of strings containing the reply records.\\n     * @since v6.0.0\\n     */\\n    export function resolvePtr(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\n    export namespace resolvePtr {\\n        function __promisify__(hostname: string): Promise<string[]>;\\n    }\\n    /**\\n     * Uses the DNS protocol to resolve a start of authority record (`SOA` record) for\\n     * the `hostname`. The `address` argument passed to the `callback` function will\\n     * be an object with the following properties:\\n     *\\n     * * `nsname`\\n     * * `hostmaster`\\n     * * `serial`\\n     * * `refresh`\\n     * * `retry`\\n     * * `expire`\\n     * * `minttl`\\n     *\\n     * ```js\\n     * {\\n     *   nsname: 'ns.example.com',\\n     *   hostmaster: 'root.example.com',\\n     *   serial: 2013101809,\\n     *   refresh: 10000,\\n     *   retry: 2400,\\n     *   expire: 604800,\\n     *   minttl: 3600\\n     * }\\n     * ```\\n     * @since v0.11.10\\n     */\\n    export function resolveSoa(hostname: string, callback: (err: NodeJS.ErrnoException | null, address: SoaRecord) => void): void;\\n    export namespace resolveSoa {\\n        function __promisify__(hostname: string): Promise<SoaRecord>;\\n    }\\n    /**\\n     * Uses the DNS protocol to resolve service records (`SRV` records) for the`hostname`. The `addresses` argument passed to the `callback` function will\\n     * be an array of objects with the following properties:\\n     *\\n     * * `priority`\\n     * * `weight`\\n     * * `port`\\n     * * `name`\\n     *\\n     * ```js\\n     * {\\n     *   priority: 10,\\n     *   weight: 5,\\n     *   port: 21223,\\n     *   name: 'service.example.com'\\n     * }\\n     * ```\\n     * @since v0.1.27\\n     */\\n    export function resolveSrv(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: SrvRecord[]) => void): void;\\n    export namespace resolveSrv {\\n        function __promisify__(hostname: string): Promise<SrvRecord[]>;\\n    }\\n    /**\\n     * Uses the DNS protocol to resolve text queries (`TXT` records) for the`hostname`. The `records` argument passed to the `callback` function is a\\n     * two-dimensional array of the text records available for `hostname` (e.g.`[ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]`). Each sub-array contains TXT chunks of\\n     * one record. Depending on the use case, these could be either joined together or\\n     * treated separately.\\n     * @since v0.1.27\\n     */\\n    export function resolveTxt(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: string[][]) => void): void;\\n    export namespace resolveTxt {\\n        function __promisify__(hostname: string): Promise<string[][]>;\\n    }\\n    /**\\n     * Uses the DNS protocol to resolve all records (also known as `ANY` or `*` query).\\n     * The `ret` argument passed to the `callback` function will be an array containing\\n     * various types of records. Each object has a property `type` that indicates the\\n     * type of the current record. And depending on the `type`, additional properties\\n     * will be present on the object:\\n     *\\n     * <omitted>\\n     *\\n     * Here is an example of the `ret` object passed to the callback:\\n     *\\n     * ```js\\n     * [ { type: 'A', address: '127.0.0.1', ttl: 299 },\\n     *   { type: 'CNAME', value: 'example.com' },\\n     *   { type: 'MX', exchange: 'alt4.aspmx.l.example.com', priority: 50 },\\n     *   { type: 'NS', value: 'ns1.example.com' },\\n     *   { type: 'TXT', entries: [ 'v=spf1 include:_spf.example.com ~all' ] },\\n     *   { type: 'SOA',\\n     *     nsname: 'ns1.example.com',\\n     *     hostmaster: 'admin.example.com',\\n     *     serial: 156696742,\\n     *     refresh: 900,\\n     *     retry: 900,\\n     *     expire: 1800,\\n     *     minttl: 60 } ]\\n     * ```\\n     *\\n     * DNS server operators may choose not to respond to `ANY`queries. It may be better to call individual methods like {@link resolve4},{@link resolveMx}, and so on. For more details, see [RFC\\n     * 8482](https://tools.ietf.org/html/rfc8482).\\n     */\\n    export function resolveAny(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: AnyRecord[]) => void): void;\\n    export namespace resolveAny {\\n        function __promisify__(hostname: string): Promise<AnyRecord[]>;\\n    }\\n    /**\\n     * Performs a reverse DNS query that resolves an IPv4 or IPv6 address to an\\n     * array of host names.\\n     *\\n     * On error, `err` is an `Error` object, where `err.code` is\\n     * one of the `DNS error codes`.\\n     * @since v0.1.16\\n     */\\n    export function reverse(ip: string, callback: (err: NodeJS.ErrnoException | null, hostnames: string[]) => void): void;\\n    /**\\n     * Sets the IP address and port of servers to be used when performing DNS\\n     * resolution. The `servers` argument is an array of [RFC 5952](https://tools.ietf.org/html/rfc5952#section-6) formatted\\n     * addresses. If the port is the IANA default DNS port (53) it can be omitted.\\n     *\\n     * ```js\\n     * dns.setServers([\\n     *   '4.4.4.4',\\n     *   '[2001:4860:4860::8888]',\\n     *   '4.4.4.4:1053',\\n     *   '[2001:4860:4860::8888]:1053',\\n     * ]);\\n     * ```\\n     *\\n     * An error will be thrown if an invalid address is provided.\\n     *\\n     * The `dns.setServers()` method must not be called while a DNS query is in\\n     * progress.\\n     *\\n     * The {@link setServers} method affects only {@link resolve},`dns.resolve*()` and {@link reverse} (and specifically _not_ {@link lookup}).\\n     *\\n     * This method works much like [resolve.conf](https://man7.org/linux/man-pages/man5/resolv.conf.5.html).\\n     * That is, if attempting to resolve with the first server provided results in a`NOTFOUND` error, the `resolve()` method will _not_ attempt to resolve with\\n     * subsequent servers provided. Fallback DNS servers will only be used if the\\n     * earlier ones time out or result in some other error.\\n     * @since v0.11.3\\n     * @param servers array of `RFC 5952` formatted addresses\\n     */\\n    export function setServers(servers: ReadonlyArray<string>): void;\\n    /**\\n     * Returns an array of IP address strings, formatted according to [RFC 5952](https://tools.ietf.org/html/rfc5952#section-6),\\n     * that are currently configured for DNS resolution. A string will include a port\\n     * section if a custom port is used.\\n     *\\n     * ```js\\n     * [\\n     *   '4.4.4.4',\\n     *   '2001:4860:4860::8888',\\n     *   '4.4.4.4:1053',\\n     *   '[2001:4860:4860::8888]:1053',\\n     * ]\\n     * ```\\n     * @since v0.11.3\\n     */\\n    export function getServers(): string[];\\n    /**\\n     * Set the default value of `verbatim` in {@link lookup} and `dnsPromises.lookup()`. The value could be:\\n     *\\n     * * `ipv4first`: sets default `verbatim` `false`.\\n     * * `verbatim`: sets default `verbatim` `true`.\\n     *\\n     * The default is `ipv4first` and {@link setDefaultResultOrder} have higher\\n     * priority than `--dns-result-order`. When using `worker threads`,{@link setDefaultResultOrder} from the main thread won't affect the default\\n     * dns orders in workers.\\n     * @since v16.4.0, v14.18.0\\n     * @param order must be `'ipv4first'` or `'verbatim'`.\\n     */\\n    export function setDefaultResultOrder(order: 'ipv4first' | 'verbatim'): void;\\n    // Error codes\\n    export const NODATA: string;\\n    export const FORMERR: string;\\n    export const SERVFAIL: string;\\n    export const NOTFOUND: string;\\n    export const NOTIMP: string;\\n    export const REFUSED: string;\\n    export const BADQUERY: string;\\n    export const BADNAME: string;\\n    export const BADFAMILY: string;\\n    export const BADRESP: string;\\n    export const CONNREFUSED: string;\\n    export const TIMEOUT: string;\\n    export const EOF: string;\\n    export const FILE: string;\\n    export const NOMEM: string;\\n    export const DESTRUCTION: string;\\n    export const BADSTR: string;\\n    export const BADFLAGS: string;\\n    export const NONAME: string;\\n    export const BADHINTS: string;\\n    export const NOTINITIALIZED: string;\\n    export const LOADIPHLPAPI: string;\\n    export const ADDRGETNETWORKPARAMS: string;\\n    export const CANCELLED: string;\\n    export interface ResolverOptions {\\n        timeout?: number | undefined;\\n        /**\\n         * @default 4\\n         */\\n        tries?: number;\\n    }\\n    /**\\n     * An independent resolver for DNS requests.\\n     *\\n     * Creating a new resolver uses the default server settings. Setting\\n     * the servers used for a resolver using `resolver.setServers()` does not affect\\n     * other resolvers:\\n     *\\n     * ```js\\n     * const { Resolver } = require('dns');\\n     * const resolver = new Resolver();\\n     * resolver.setServers(['4.4.4.4']);\\n     *\\n     * // This request will use the server at 4.4.4.4, independent of global settings.\\n     * resolver.resolve4('example.org', (err, addresses) => {\\n     *   // ...\\n     * });\\n     * ```\\n     *\\n     * The following methods from the `dns` module are available:\\n     *\\n     * * `resolver.getServers()`\\n     * * `resolver.resolve()`\\n     * * `resolver.resolve4()`\\n     * * `resolver.resolve6()`\\n     * * `resolver.resolveAny()`\\n     * * `resolver.resolveCaa()`\\n     * * `resolver.resolveCname()`\\n     * * `resolver.resolveMx()`\\n     * * `resolver.resolveNaptr()`\\n     * * `resolver.resolveNs()`\\n     * * `resolver.resolvePtr()`\\n     * * `resolver.resolveSoa()`\\n     * * `resolver.resolveSrv()`\\n     * * `resolver.resolveTxt()`\\n     * * `resolver.reverse()`\\n     * * `resolver.setServers()`\\n     * @since v8.3.0\\n     */\\n    export class Resolver {\\n        constructor(options?: ResolverOptions);\\n        /**\\n         * Cancel all outstanding DNS queries made by this resolver. The corresponding\\n         * callbacks will be called with an error with code `ECANCELLED`.\\n         * @since v8.3.0\\n         */\\n        cancel(): void;\\n        getServers: typeof getServers;\\n        resolve: typeof resolve;\\n        resolve4: typeof resolve4;\\n        resolve6: typeof resolve6;\\n        resolveAny: typeof resolveAny;\\n        resolveCaa: typeof resolveCaa;\\n        resolveCname: typeof resolveCname;\\n        resolveMx: typeof resolveMx;\\n        resolveNaptr: typeof resolveNaptr;\\n        resolveNs: typeof resolveNs;\\n        resolvePtr: typeof resolvePtr;\\n        resolveSoa: typeof resolveSoa;\\n        resolveSrv: typeof resolveSrv;\\n        resolveTxt: typeof resolveTxt;\\n        reverse: typeof reverse;\\n        /**\\n         * The resolver instance will send its requests from the specified IP address.\\n         * This allows programs to specify outbound interfaces when used on multi-homed\\n         * systems.\\n         *\\n         * If a v4 or v6 address is not specified, it is set to the default, and the\\n         * operating system will choose a local address automatically.\\n         *\\n         * The resolver will use the v4 local address when making requests to IPv4 DNS\\n         * servers, and the v6 local address when making requests to IPv6 DNS servers.\\n         * The `rrtype` of resolution requests has no impact on the local address used.\\n         * @since v15.1.0, v14.17.0\\n         * @param [ipv4='0.0.0.0'] A string representation of an IPv4 address.\\n         * @param [ipv6='::0'] A string representation of an IPv6 address.\\n         */\\n        setLocalAddress(ipv4?: string, ipv6?: string): void;\\n        setServers: typeof setServers;\\n    }\\n    export { dnsPromises as promises };\\n}\\ndeclare module 'node:dns' {\\n    export * from 'dns';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/dom-events.d.ts\":\"export {}; // Don't export anything!\\n\\n//// DOM-like Events\\n// NB: The Event / EventTarget / EventListener implementations below were copied\\n// from lib.dom.d.ts, then edited to reflect Node's documentation at\\n// https://nodejs.org/api/events.html#class-eventtarget.\\n// Please read that link to understand important implementation differences.\\n\\n// This conditional type will be the existing global Event in a browser, or\\n// the copy below in a Node environment.\\ntype __Event = typeof globalThis extends { onmessage: any, Event: any }\\n? {}\\n: {\\n    /** This is not used in Node.js and is provided purely for completeness. */\\n    readonly bubbles: boolean;\\n    /** Alias for event.stopPropagation(). This is not used in Node.js and is provided purely for completeness. */\\n    cancelBubble: () => void;\\n    /** True if the event was created with the cancelable option */\\n    readonly cancelable: boolean;\\n    /** This is not used in Node.js and is provided purely for completeness. */\\n    readonly composed: boolean;\\n    /** Returns an array containing the current EventTarget as the only entry or empty if the event is not being dispatched. This is not used in Node.js and is provided purely for completeness. */\\n    composedPath(): [EventTarget?]\\n    /** Alias for event.target. */\\n    readonly currentTarget: EventTarget | null;\\n    /** Is true if cancelable is true and event.preventDefault() has been called. */\\n    readonly defaultPrevented: boolean;\\n    /** This is not used in Node.js and is provided purely for completeness. */\\n    readonly eventPhase: 0 | 2;\\n    /** The `AbortSignal` \\\"abort\\\" event is emitted with `isTrusted` set to `true`. The value is `false` in all other cases. */\\n    readonly isTrusted: boolean;\\n    /** Sets the `defaultPrevented` property to `true` if `cancelable` is `true`. */\\n    preventDefault(): void;\\n    /** This is not used in Node.js and is provided purely for completeness. */\\n    returnValue: boolean;\\n    /** Alias for event.target. */\\n    readonly srcElement: EventTarget | null;\\n    /** Stops the invocation of event listeners after the current one completes. */\\n    stopImmediatePropagation(): void;\\n    /** This is not used in Node.js and is provided purely for completeness. */\\n    stopPropagation(): void;\\n    /** The `EventTarget` dispatching the event */\\n    readonly target: EventTarget | null;\\n    /** The millisecond timestamp when the Event object was created. */\\n    readonly timeStamp: number;\\n    /** Returns the type of event, e.g. \\\"click\\\", \\\"hashchange\\\", or \\\"submit\\\". */\\n    readonly type: string;\\n};\\n\\n// See comment above explaining conditional type\\ntype __EventTarget = typeof globalThis extends { onmessage: any, EventTarget: any }\\n? {}\\n: {\\n    /**\\n     * Adds a new handler for the `type` event. Any given `listener` is added only once per `type` and per `capture` option value.\\n     *\\n     * If the `once` option is true, the `listener` is removed after the next time a `type` event is dispatched.\\n     *\\n     * The `capture` option is not used by Node.js in any functional way other than tracking registered event listeners per the `EventTarget` specification.\\n     * Specifically, the `capture` option is used as part of the key when registering a `listener`.\\n     * Any individual `listener` may be added once with `capture = false`, and once with `capture = true`.\\n     */\\n    addEventListener(\\n        type: string,\\n        listener: EventListener | EventListenerObject,\\n        options?: AddEventListenerOptions | boolean,\\n    ): void;\\n    /** Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise. */\\n    dispatchEvent(event: Event): boolean;\\n    /** Removes the event listener in target's event listener list with the same type, callback, and options. */\\n    removeEventListener(\\n        type: string,\\n        listener: EventListener | EventListenerObject,\\n        options?: EventListenerOptions | boolean,\\n    ): void;\\n};\\n\\ninterface EventInit {\\n    bubbles?: boolean;\\n    cancelable?: boolean;\\n    composed?: boolean;\\n}\\n\\ninterface EventListenerOptions {\\n    /** Not directly used by Node.js. Added for API completeness. Default: `false`. */\\n    capture?: boolean;\\n}\\n\\ninterface AddEventListenerOptions extends EventListenerOptions {\\n    /** When `true`, the listener is automatically removed when it is first invoked. Default: `false`. */\\n    once?: boolean;\\n    /** When `true`, serves as a hint that the listener will not call the `Event` object's `preventDefault()` method. Default: false. */\\n    passive?: boolean;\\n}\\n\\ninterface EventListener {\\n    (evt: Event): void;\\n}\\n\\ninterface EventListenerObject {\\n    handleEvent(object: Event): void;\\n}\\n\\nimport {} from 'events';    // Make this an ambient declaration\\ndeclare global {\\n    /** An event which takes place in the DOM. */\\n    interface Event extends __Event {}\\n    var Event: typeof globalThis extends { onmessage: any, Event: infer T }\\n        ? T\\n        : {\\n            prototype: __Event;\\n            new (type: string, eventInitDict?: EventInit): __Event;\\n        };\\n\\n    /**\\n     * EventTarget is a DOM interface implemented by objects that can\\n     * receive events and may have listeners for them.\\n     */\\n    interface EventTarget extends __EventTarget {}\\n    var EventTarget: typeof globalThis extends { onmessage: any, EventTarget: infer T }\\n        ? T\\n        : {\\n            prototype: __EventTarget;\\n            new (): __EventTarget;\\n        };\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/domain.d.ts\":\"/**\\n * **This module is pending deprecation.** Once a replacement API has been\\n * finalized, this module will be fully deprecated. Most developers should\\n * **not** have cause to use this module. Users who absolutely must have\\n * the functionality that domains provide may rely on it for the time being\\n * but should expect to have to migrate to a different solution\\n * in the future.\\n *\\n * Domains provide a way to handle multiple different IO operations as a\\n * single group. If any of the event emitters or callbacks registered to a\\n * domain emit an `'error'` event, or throw an error, then the domain object\\n * will be notified, rather than losing the context of the error in the`process.on('uncaughtException')` handler, or causing the program to\\n * exit immediately with an error code.\\n * @deprecated Since v1.4.2 - Deprecated\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/domain.js)\\n */\\ndeclare module 'domain' {\\n    import EventEmitter = require('node:events');\\n    /**\\n     * The `Domain` class encapsulates the functionality of routing errors and\\n     * uncaught exceptions to the active `Domain` object.\\n     *\\n     * To handle the errors that it catches, listen to its `'error'` event.\\n     */\\n    class Domain extends EventEmitter {\\n        /**\\n         * An array of timers and event emitters that have been explicitly added\\n         * to the domain.\\n         */\\n        members: Array<EventEmitter | NodeJS.Timer>;\\n        /**\\n         * The `enter()` method is plumbing used by the `run()`, `bind()`, and`intercept()` methods to set the active domain. It sets `domain.active` and`process.domain` to the domain, and implicitly\\n         * pushes the domain onto the domain\\n         * stack managed by the domain module (see {@link exit} for details on the\\n         * domain stack). The call to `enter()` delimits the beginning of a chain of\\n         * asynchronous calls and I/O operations bound to a domain.\\n         *\\n         * Calling `enter()` changes only the active domain, and does not alter the domain\\n         * itself. `enter()` and `exit()` can be called an arbitrary number of times on a\\n         * single domain.\\n         */\\n        enter(): void;\\n        /**\\n         * The `exit()` method exits the current domain, popping it off the domain stack.\\n         * Any time execution is going to switch to the context of a different chain of\\n         * asynchronous calls, it's important to ensure that the current domain is exited.\\n         * The call to `exit()` delimits either the end of or an interruption to the chain\\n         * of asynchronous calls and I/O operations bound to a domain.\\n         *\\n         * If there are multiple, nested domains bound to the current execution context,`exit()` will exit any domains nested within this domain.\\n         *\\n         * Calling `exit()` changes only the active domain, and does not alter the domain\\n         * itself. `enter()` and `exit()` can be called an arbitrary number of times on a\\n         * single domain.\\n         */\\n        exit(): void;\\n        /**\\n         * Run the supplied function in the context of the domain, implicitly\\n         * binding all event emitters, timers, and lowlevel requests that are\\n         * created in that context. Optionally, arguments can be passed to\\n         * the function.\\n         *\\n         * This is the most basic way to use a domain.\\n         *\\n         * ```js\\n         * const domain = require('domain');\\n         * const fs = require('fs');\\n         * const d = domain.create();\\n         * d.on('error', (er) => {\\n         *   console.error('Caught error!', er);\\n         * });\\n         * d.run(() => {\\n         *   process.nextTick(() => {\\n         *     setTimeout(() => { // Simulating some various async stuff\\n         *       fs.open('non-existent file', 'r', (er, fd) => {\\n         *         if (er) throw er;\\n         *         // proceed...\\n         *       });\\n         *     }, 100);\\n         *   });\\n         * });\\n         * ```\\n         *\\n         * In this example, the `d.on('error')` handler will be triggered, rather\\n         * than crashing the program.\\n         */\\n        run<T>(fn: (...args: any[]) => T, ...args: any[]): T;\\n        /**\\n         * Explicitly adds an emitter to the domain. If any event handlers called by\\n         * the emitter throw an error, or if the emitter emits an `'error'` event, it\\n         * will be routed to the domain's `'error'` event, just like with implicit\\n         * binding.\\n         *\\n         * This also works with timers that are returned from `setInterval()` and `setTimeout()`. If their callback function throws, it will be caught by\\n         * the domain `'error'` handler.\\n         *\\n         * If the Timer or `EventEmitter` was already bound to a domain, it is removed\\n         * from that one, and bound to this one instead.\\n         * @param emitter emitter or timer to be added to the domain\\n         */\\n        add(emitter: EventEmitter | NodeJS.Timer): void;\\n        /**\\n         * The opposite of {@link add}. Removes domain handling from the\\n         * specified emitter.\\n         * @param emitter emitter or timer to be removed from the domain\\n         */\\n        remove(emitter: EventEmitter | NodeJS.Timer): void;\\n        /**\\n         * The returned function will be a wrapper around the supplied callback\\n         * function. When the returned function is called, any errors that are\\n         * thrown will be routed to the domain's `'error'` event.\\n         *\\n         * ```js\\n         * const d = domain.create();\\n         *\\n         * function readSomeFile(filename, cb) {\\n         *   fs.readFile(filename, 'utf8', d.bind((er, data) => {\\n         *     // If this throws, it will also be passed to the domain.\\n         *     return cb(er, data ? JSON.parse(data) : null);\\n         *   }));\\n         * }\\n         *\\n         * d.on('error', (er) => {\\n         *   // An error occurred somewhere. If we throw it now, it will crash the program\\n         *   // with the normal line number and stack message.\\n         * });\\n         * ```\\n         * @param callback The callback function\\n         * @return The bound function\\n         */\\n        bind<T extends Function>(callback: T): T;\\n        /**\\n         * This method is almost identical to {@link bind}. However, in\\n         * addition to catching thrown errors, it will also intercept `Error` objects sent as the first argument to the function.\\n         *\\n         * In this way, the common `if (err) return callback(err);` pattern can be replaced\\n         * with a single error handler in a single place.\\n         *\\n         * ```js\\n         * const d = domain.create();\\n         *\\n         * function readSomeFile(filename, cb) {\\n         *   fs.readFile(filename, 'utf8', d.intercept((data) => {\\n         *     // Note, the first argument is never passed to the\\n         *     // callback since it is assumed to be the 'Error' argument\\n         *     // and thus intercepted by the domain.\\n         *\\n         *     // If this throws, it will also be passed to the domain\\n         *     // so the error-handling logic can be moved to the 'error'\\n         *     // event on the domain instead of being repeated throughout\\n         *     // the program.\\n         *     return cb(null, JSON.parse(data));\\n         *   }));\\n         * }\\n         *\\n         * d.on('error', (er) => {\\n         *   // An error occurred somewhere. If we throw it now, it will crash the program\\n         *   // with the normal line number and stack message.\\n         * });\\n         * ```\\n         * @param callback The callback function\\n         * @return The intercepted function\\n         */\\n        intercept<T extends Function>(callback: T): T;\\n    }\\n    function create(): Domain;\\n}\\ndeclare module 'node:domain' {\\n    export * from 'domain';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/events.d.ts\":\"/**\\n * Much of the Node.js core API is built around an idiomatic asynchronous\\n * event-driven architecture in which certain kinds of objects (called \\\"emitters\\\")\\n * emit named events that cause `Function` objects (\\\"listeners\\\") to be called.\\n *\\n * For instance: a `net.Server` object emits an event each time a peer\\n * connects to it; a `fs.ReadStream` emits an event when the file is opened;\\n * a `stream` emits an event whenever data is available to be read.\\n *\\n * All objects that emit events are instances of the `EventEmitter` class. These\\n * objects expose an `eventEmitter.on()` function that allows one or more\\n * functions to be attached to named events emitted by the object. Typically,\\n * event names are camel-cased strings but any valid JavaScript property key\\n * can be used.\\n *\\n * When the `EventEmitter` object emits an event, all of the functions attached\\n * to that specific event are called _synchronously_. Any values returned by the\\n * called listeners are _ignored_ and discarded.\\n *\\n * The following example shows a simple `EventEmitter` instance with a single\\n * listener. The `eventEmitter.on()` method is used to register listeners, while\\n * the `eventEmitter.emit()` method is used to trigger the event.\\n *\\n * ```js\\n * const EventEmitter = require('events');\\n *\\n * class MyEmitter extends EventEmitter {}\\n *\\n * const myEmitter = new MyEmitter();\\n * myEmitter.on('event', () => {\\n *   console.log('an event occurred!');\\n * });\\n * myEmitter.emit('event');\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/events.js)\\n */\\ndeclare module 'events' {\\n    // NOTE: This class is in the docs but is **not actually exported** by Node.\\n    // If https://github.com/nodejs/node/issues/39903 gets resolved and Node\\n    // actually starts exporting the class, uncomment below.\\n\\n    // import { EventListener, EventListenerObject } from '__dom-events';\\n    // /** The NodeEventTarget is a Node.js-specific extension to EventTarget that emulates a subset of the EventEmitter API. */\\n    // interface NodeEventTarget extends EventTarget {\\n    //     /**\\n    //      * Node.js-specific extension to the `EventTarget` class that emulates the equivalent `EventEmitter` API.\\n    //      * The only difference between `addListener()` and `addEventListener()` is that addListener() will return a reference to the EventTarget.\\n    //      */\\n    //     addListener(type: string, listener: EventListener | EventListenerObject, options?: { once: boolean }): this;\\n    //     /** Node.js-specific extension to the `EventTarget` class that returns an array of event `type` names for which event listeners are registered. */\\n    //     eventNames(): string[];\\n    //     /** Node.js-specific extension to the `EventTarget` class that returns the number of event listeners registered for the `type`. */\\n    //     listenerCount(type: string): number;\\n    //     /** Node.js-specific alias for `eventTarget.removeListener()`. */\\n    //     off(type: string, listener: EventListener | EventListenerObject): this;\\n    //     /** Node.js-specific alias for `eventTarget.addListener()`. */\\n    //     on(type: string, listener: EventListener | EventListenerObject, options?: { once: boolean }): this;\\n    //     /** Node.js-specific extension to the `EventTarget` class that adds a `once` listener for the given event `type`. This is equivalent to calling `on` with the `once` option set to `true`. */\\n    //     once(type: string, listener: EventListener | EventListenerObject): this;\\n    //     /**\\n    //      * Node.js-specific extension to the `EventTarget` class.\\n    //      * If `type` is specified, removes all registered listeners for `type`,\\n    //      * otherwise removes all registered listeners.\\n    //      */\\n    //     removeAllListeners(type: string): this;\\n    //     /**\\n    //      * Node.js-specific extension to the `EventTarget` class that removes the listener for the given `type`.\\n    //      * The only difference between `removeListener()` and `removeEventListener()` is that `removeListener()` will return a reference to the `EventTarget`.\\n    //      */\\n    //     removeListener(type: string, listener: EventListener | EventListenerObject): this;\\n    // }\\n\\n    interface EventEmitterOptions {\\n        /**\\n         * Enables automatic capturing of promise rejection.\\n         */\\n        captureRejections?: boolean | undefined;\\n    }\\n    // Any EventTarget with a Node-style `once` function\\n    interface _NodeEventTarget {\\n        once(eventName: string | symbol, listener: (...args: any[]) => void): this;\\n    }\\n    // Any EventTarget with a DOM-style `addEventListener`\\n    interface _DOMEventTarget {\\n        addEventListener(\\n            eventName: string,\\n            listener: (...args: any[]) => void,\\n            opts?: {\\n                once: boolean;\\n            }\\n        ): any;\\n    }\\n    interface StaticEventEmitterOptions {\\n        signal?: AbortSignal | undefined;\\n    }\\n    interface EventEmitter extends NodeJS.EventEmitter {}\\n    /**\\n     * The `EventEmitter` class is defined and exposed by the `events` module:\\n     *\\n     * ```js\\n     * const EventEmitter = require('events');\\n     * ```\\n     *\\n     * All `EventEmitter`s emit the event `'newListener'` when new listeners are\\n     * added and `'removeListener'` when existing listeners are removed.\\n     *\\n     * It supports the following option:\\n     * @since v0.1.26\\n     */\\n    class EventEmitter {\\n        constructor(options?: EventEmitterOptions);\\n        /**\\n         * Creates a `Promise` that is fulfilled when the `EventEmitter` emits the given\\n         * event or that is rejected if the `EventEmitter` emits `'error'` while waiting.\\n         * The `Promise` will resolve with an array of all the arguments emitted to the\\n         * given event.\\n         *\\n         * This method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special`'error'` event\\n         * semantics and does not listen to the `'error'` event.\\n         *\\n         * ```js\\n         * const { once, EventEmitter } = require('events');\\n         *\\n         * async function run() {\\n         *   const ee = new EventEmitter();\\n         *\\n         *   process.nextTick(() => {\\n         *     ee.emit('myevent', 42);\\n         *   });\\n         *\\n         *   const [value] = await once(ee, 'myevent');\\n         *   console.log(value);\\n         *\\n         *   const err = new Error('kaboom');\\n         *   process.nextTick(() => {\\n         *     ee.emit('error', err);\\n         *   });\\n         *\\n         *   try {\\n         *     await once(ee, 'myevent');\\n         *   } catch (err) {\\n         *     console.log('error happened', err);\\n         *   }\\n         * }\\n         *\\n         * run();\\n         * ```\\n         *\\n         * The special handling of the `'error'` event is only used when `events.once()`is used to wait for another event. If `events.once()` is used to wait for the\\n         * '`error'` event itself, then it is treated as any other kind of event without\\n         * special handling:\\n         *\\n         * ```js\\n         * const { EventEmitter, once } = require('events');\\n         *\\n         * const ee = new EventEmitter();\\n         *\\n         * once(ee, 'error')\\n         *   .then(([err]) => console.log('ok', err.message))\\n         *   .catch((err) => console.log('error', err.message));\\n         *\\n         * ee.emit('error', new Error('boom'));\\n         *\\n         * // Prints: ok boom\\n         * ```\\n         *\\n         * An `AbortSignal` can be used to cancel waiting for the event:\\n         *\\n         * ```js\\n         * const { EventEmitter, once } = require('events');\\n         *\\n         * const ee = new EventEmitter();\\n         * const ac = new AbortController();\\n         *\\n         * async function foo(emitter, event, signal) {\\n         *   try {\\n         *     await once(emitter, event, { signal });\\n         *     console.log('event emitted!');\\n         *   } catch (error) {\\n         *     if (error.name === 'AbortError') {\\n         *       console.error('Waiting for the event was canceled!');\\n         *     } else {\\n         *       console.error('There was an error', error.message);\\n         *     }\\n         *   }\\n         * }\\n         *\\n         * foo(ee, 'foo', ac.signal);\\n         * ac.abort(); // Abort waiting for the event\\n         * ee.emit('foo'); // Prints: Waiting for the event was canceled!\\n         * ```\\n         * @since v11.13.0, v10.16.0\\n         */\\n        static once(emitter: _NodeEventTarget, eventName: string | symbol, options?: StaticEventEmitterOptions): Promise<any[]>;\\n        static once(emitter: _DOMEventTarget, eventName: string, options?: StaticEventEmitterOptions): Promise<any[]>;\\n        /**\\n         * ```js\\n         * const { on, EventEmitter } = require('events');\\n         *\\n         * (async () => {\\n         *   const ee = new EventEmitter();\\n         *\\n         *   // Emit later on\\n         *   process.nextTick(() => {\\n         *     ee.emit('foo', 'bar');\\n         *     ee.emit('foo', 42);\\n         *   });\\n         *\\n         *   for await (const event of on(ee, 'foo')) {\\n         *     // The execution of this inner block is synchronous and it\\n         *     // processes one event at a time (even with await). Do not use\\n         *     // if concurrent execution is required.\\n         *     console.log(event); // prints ['bar'] [42]\\n         *   }\\n         *   // Unreachable here\\n         * })();\\n         * ```\\n         *\\n         * Returns an `AsyncIterator` that iterates `eventName` events. It will throw\\n         * if the `EventEmitter` emits `'error'`. It removes all listeners when\\n         * exiting the loop. The `value` returned by each iteration is an array\\n         * composed of the emitted event arguments.\\n         *\\n         * An `AbortSignal` can be used to cancel waiting on events:\\n         *\\n         * ```js\\n         * const { on, EventEmitter } = require('events');\\n         * const ac = new AbortController();\\n         *\\n         * (async () => {\\n         *   const ee = new EventEmitter();\\n         *\\n         *   // Emit later on\\n         *   process.nextTick(() => {\\n         *     ee.emit('foo', 'bar');\\n         *     ee.emit('foo', 42);\\n         *   });\\n         *\\n         *   for await (const event of on(ee, 'foo', { signal: ac.signal })) {\\n         *     // The execution of this inner block is synchronous and it\\n         *     // processes one event at a time (even with await). Do not use\\n         *     // if concurrent execution is required.\\n         *     console.log(event); // prints ['bar'] [42]\\n         *   }\\n         *   // Unreachable here\\n         * })();\\n         *\\n         * process.nextTick(() => ac.abort());\\n         * ```\\n         * @since v13.6.0, v12.16.0\\n         * @param eventName The name of the event being listened for\\n         * @return that iterates `eventName` events emitted by the `emitter`\\n         */\\n        static on(emitter: NodeJS.EventEmitter, eventName: string, options?: StaticEventEmitterOptions): AsyncIterableIterator<any>;\\n        /**\\n         * A class method that returns the number of listeners for the given `eventName`registered on the given `emitter`.\\n         *\\n         * ```js\\n         * const { EventEmitter, listenerCount } = require('events');\\n         * const myEmitter = new EventEmitter();\\n         * myEmitter.on('event', () => {});\\n         * myEmitter.on('event', () => {});\\n         * console.log(listenerCount(myEmitter, 'event'));\\n         * // Prints: 2\\n         * ```\\n         * @since v0.9.12\\n         * @deprecated Since v3.2.0 - Use `listenerCount` instead.\\n         * @param emitter The emitter to query\\n         * @param eventName The event name\\n         */\\n        static listenerCount(emitter: NodeJS.EventEmitter, eventName: string | symbol): number;\\n        /**\\n         * Returns a copy of the array of listeners for the event named `eventName`.\\n         *\\n         * For `EventEmitter`s this behaves exactly the same as calling `.listeners` on\\n         * the emitter.\\n         *\\n         * For `EventTarget`s this is the only way to get the event listeners for the\\n         * event target. This is useful for debugging and diagnostic purposes.\\n         *\\n         * ```js\\n         * const { getEventListeners, EventEmitter } = require('events');\\n         *\\n         * {\\n         *   const ee = new EventEmitter();\\n         *   const listener = () => console.log('Events are fun');\\n         *   ee.on('foo', listener);\\n         *   getEventListeners(ee, 'foo'); // [listener]\\n         * }\\n         * {\\n         *   const et = new EventTarget();\\n         *   const listener = () => console.log('Events are fun');\\n         *   et.addEventListener('foo', listener);\\n         *   getEventListeners(et, 'foo'); // [listener]\\n         * }\\n         * ```\\n         * @since v15.2.0, v14.17.0\\n         */\\n        static getEventListeners(emitter: _DOMEventTarget | NodeJS.EventEmitter, name: string | symbol): Function[];\\n        /**\\n         * ```js\\n         * const {\\n         *   setMaxListeners,\\n         *   EventEmitter\\n         * } = require('events');\\n         *\\n         * const target = new EventTarget();\\n         * const emitter = new EventEmitter();\\n         *\\n         * setMaxListeners(5, target, emitter);\\n         * ```\\n         * @since v15.4.0\\n         * @param n A non-negative number. The maximum number of listeners per `EventTarget` event.\\n         * @param eventsTargets Zero or more {EventTarget} or {EventEmitter} instances. If none are specified, `n` is set as the default max for all newly created {EventTarget} and {EventEmitter}\\n         * objects.\\n         */\\n        static setMaxListeners(n?: number, ...eventTargets: Array<_DOMEventTarget | NodeJS.EventEmitter>): void;\\n        /**\\n         * This symbol shall be used to install a listener for only monitoring `'error'`\\n         * events. Listeners installed using this symbol are called before the regular\\n         * `'error'` listeners are called.\\n         *\\n         * Installing a listener using this symbol does not change the behavior once an\\n         * `'error'` event is emitted, therefore the process will still crash if no\\n         * regular `'error'` listener is installed.\\n         */\\n        static readonly errorMonitor: unique symbol;\\n        static readonly captureRejectionSymbol: unique symbol;\\n        /**\\n         * Sets or gets the default captureRejection value for all emitters.\\n         */\\n        // TODO: These should be described using static getter/setter pairs:\\n        static captureRejections: boolean;\\n        static defaultMaxListeners: number;\\n    }\\n    import internal = require('node:events');\\n    namespace EventEmitter {\\n        // Should just be `export { EventEmitter }`, but that doesn't work in TypeScript 3.4\\n        export { internal as EventEmitter };\\n        export interface Abortable {\\n            /**\\n             * When provided the corresponding `AbortController` can be used to cancel an asynchronous action.\\n             */\\n            signal?: AbortSignal | undefined;\\n        }\\n    }\\n    global {\\n        namespace NodeJS {\\n            interface EventEmitter {\\n                /**\\n                 * Alias for `emitter.on(eventName, listener)`.\\n                 * @since v0.1.26\\n                 */\\n                addListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\\n                /**\\n                 * Adds the `listener` function to the end of the listeners array for the\\n                 * event named `eventName`. No checks are made to see if the `listener` has\\n                 * already been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\\n                 * times.\\n                 *\\n                 * ```js\\n                 * server.on('connection', (stream) => {\\n                 *   console.log('someone connected!');\\n                 * });\\n                 * ```\\n                 *\\n                 * Returns a reference to the `EventEmitter`, so that calls can be chained.\\n                 *\\n                 * By default, event listeners are invoked in the order they are added. The`emitter.prependListener()` method can be used as an alternative to add the\\n                 * event listener to the beginning of the listeners array.\\n                 *\\n                 * ```js\\n                 * const myEE = new EventEmitter();\\n                 * myEE.on('foo', () => console.log('a'));\\n                 * myEE.prependListener('foo', () => console.log('b'));\\n                 * myEE.emit('foo');\\n                 * // Prints:\\n                 * //   b\\n                 * //   a\\n                 * ```\\n                 * @since v0.1.101\\n                 * @param eventName The name of the event.\\n                 * @param listener The callback function\\n                 */\\n                on(eventName: string | symbol, listener: (...args: any[]) => void): this;\\n                /**\\n                 * Adds a **one-time**`listener` function for the event named `eventName`. The\\n                 * next time `eventName` is triggered, this listener is removed and then invoked.\\n                 *\\n                 * ```js\\n                 * server.once('connection', (stream) => {\\n                 *   console.log('Ah, we have our first user!');\\n                 * });\\n                 * ```\\n                 *\\n                 * Returns a reference to the `EventEmitter`, so that calls can be chained.\\n                 *\\n                 * By default, event listeners are invoked in the order they are added. The`emitter.prependOnceListener()` method can be used as an alternative to add the\\n                 * event listener to the beginning of the listeners array.\\n                 *\\n                 * ```js\\n                 * const myEE = new EventEmitter();\\n                 * myEE.once('foo', () => console.log('a'));\\n                 * myEE.prependOnceListener('foo', () => console.log('b'));\\n                 * myEE.emit('foo');\\n                 * // Prints:\\n                 * //   b\\n                 * //   a\\n                 * ```\\n                 * @since v0.3.0\\n                 * @param eventName The name of the event.\\n                 * @param listener The callback function\\n                 */\\n                once(eventName: string | symbol, listener: (...args: any[]) => void): this;\\n                /**\\n                 * Removes the specified `listener` from the listener array for the event named`eventName`.\\n                 *\\n                 * ```js\\n                 * const callback = (stream) => {\\n                 *   console.log('someone connected!');\\n                 * };\\n                 * server.on('connection', callback);\\n                 * // ...\\n                 * server.removeListener('connection', callback);\\n                 * ```\\n                 *\\n                 * `removeListener()` will remove, at most, one instance of a listener from the\\n                 * listener array. If any single listener has been added multiple times to the\\n                 * listener array for the specified `eventName`, then `removeListener()` must be\\n                 * called multiple times to remove each instance.\\n                 *\\n                 * Once an event is emitted, all listeners attached to it at the\\n                 * time of emitting are called in order. This implies that any`removeListener()` or `removeAllListeners()` calls _after_ emitting and _before_ the last listener finishes execution\\n                 * will not remove them from`emit()` in progress. Subsequent events behave as expected.\\n                 *\\n                 * ```js\\n                 * const myEmitter = new MyEmitter();\\n                 *\\n                 * const callbackA = () => {\\n                 *   console.log('A');\\n                 *   myEmitter.removeListener('event', callbackB);\\n                 * };\\n                 *\\n                 * const callbackB = () => {\\n                 *   console.log('B');\\n                 * };\\n                 *\\n                 * myEmitter.on('event', callbackA);\\n                 *\\n                 * myEmitter.on('event', callbackB);\\n                 *\\n                 * // callbackA removes listener callbackB but it will still be called.\\n                 * // Internal listener array at time of emit [callbackA, callbackB]\\n                 * myEmitter.emit('event');\\n                 * // Prints:\\n                 * //   A\\n                 * //   B\\n                 *\\n                 * // callbackB is now removed.\\n                 * // Internal listener array [callbackA]\\n                 * myEmitter.emit('event');\\n                 * // Prints:\\n                 * //   A\\n                 * ```\\n                 *\\n                 * Because listeners are managed using an internal array, calling this will\\n                 * change the position indices of any listener registered _after_ the listener\\n                 * being removed. This will not impact the order in which listeners are called,\\n                 * but it means that any copies of the listener array as returned by\\n                 * the `emitter.listeners()` method will need to be recreated.\\n                 *\\n                 * When a single function has been added as a handler multiple times for a single\\n                 * event (as in the example below), `removeListener()` will remove the most\\n                 * recently added instance. In the example the `once('ping')`listener is removed:\\n                 *\\n                 * ```js\\n                 * const ee = new EventEmitter();\\n                 *\\n                 * function pong() {\\n                 *   console.log('pong');\\n                 * }\\n                 *\\n                 * ee.on('ping', pong);\\n                 * ee.once('ping', pong);\\n                 * ee.removeListener('ping', pong);\\n                 *\\n                 * ee.emit('ping');\\n                 * ee.emit('ping');\\n                 * ```\\n                 *\\n                 * Returns a reference to the `EventEmitter`, so that calls can be chained.\\n                 * @since v0.1.26\\n                 */\\n                removeListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\\n                /**\\n                 * Alias for `emitter.removeListener()`.\\n                 * @since v10.0.0\\n                 */\\n                off(eventName: string | symbol, listener: (...args: any[]) => void): this;\\n                /**\\n                 * Removes all listeners, or those of the specified `eventName`.\\n                 *\\n                 * It is bad practice to remove listeners added elsewhere in the code,\\n                 * particularly when the `EventEmitter` instance was created by some other\\n                 * component or module (e.g. sockets or file streams).\\n                 *\\n                 * Returns a reference to the `EventEmitter`, so that calls can be chained.\\n                 * @since v0.1.26\\n                 */\\n                removeAllListeners(event?: string | symbol): this;\\n                /**\\n                 * By default `EventEmitter`s will print a warning if more than `10` listeners are\\n                 * added for a particular event. This is a useful default that helps finding\\n                 * memory leaks. The `emitter.setMaxListeners()` method allows the limit to be\\n                 * modified for this specific `EventEmitter` instance. The value can be set to`Infinity` (or `0`) to indicate an unlimited number of listeners.\\n                 *\\n                 * Returns a reference to the `EventEmitter`, so that calls can be chained.\\n                 * @since v0.3.5\\n                 */\\n                setMaxListeners(n: number): this;\\n                /**\\n                 * Returns the current max listener value for the `EventEmitter` which is either\\n                 * set by `emitter.setMaxListeners(n)` or defaults to {@link defaultMaxListeners}.\\n                 * @since v1.0.0\\n                 */\\n                getMaxListeners(): number;\\n                /**\\n                 * Returns a copy of the array of listeners for the event named `eventName`.\\n                 *\\n                 * ```js\\n                 * server.on('connection', (stream) => {\\n                 *   console.log('someone connected!');\\n                 * });\\n                 * console.log(util.inspect(server.listeners('connection')));\\n                 * // Prints: [ [Function] ]\\n                 * ```\\n                 * @since v0.1.26\\n                 */\\n                listeners(eventName: string | symbol): Function[];\\n                /**\\n                 * Returns a copy of the array of listeners for the event named `eventName`,\\n                 * including any wrappers (such as those created by `.once()`).\\n                 *\\n                 * ```js\\n                 * const emitter = new EventEmitter();\\n                 * emitter.once('log', () => console.log('log once'));\\n                 *\\n                 * // Returns a new Array with a function `onceWrapper` which has a property\\n                 * // `listener` which contains the original listener bound above\\n                 * const listeners = emitter.rawListeners('log');\\n                 * const logFnWrapper = listeners[0];\\n                 *\\n                 * // Logs \\\"log once\\\" to the console and does not unbind the `once` event\\n                 * logFnWrapper.listener();\\n                 *\\n                 * // Logs \\\"log once\\\" to the console and removes the listener\\n                 * logFnWrapper();\\n                 *\\n                 * emitter.on('log', () => console.log('log persistently'));\\n                 * // Will return a new Array with a single function bound by `.on()` above\\n                 * const newListeners = emitter.rawListeners('log');\\n                 *\\n                 * // Logs \\\"log persistently\\\" twice\\n                 * newListeners[0]();\\n                 * emitter.emit('log');\\n                 * ```\\n                 * @since v9.4.0\\n                 */\\n                rawListeners(eventName: string | symbol): Function[];\\n                /**\\n                 * Synchronously calls each of the listeners registered for the event named`eventName`, in the order they were registered, passing the supplied arguments\\n                 * to each.\\n                 *\\n                 * Returns `true` if the event had listeners, `false` otherwise.\\n                 *\\n                 * ```js\\n                 * const EventEmitter = require('events');\\n                 * const myEmitter = new EventEmitter();\\n                 *\\n                 * // First listener\\n                 * myEmitter.on('event', function firstListener() {\\n                 *   console.log('Helloooo! first listener');\\n                 * });\\n                 * // Second listener\\n                 * myEmitter.on('event', function secondListener(arg1, arg2) {\\n                 *   console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\\n                 * });\\n                 * // Third listener\\n                 * myEmitter.on('event', function thirdListener(...args) {\\n                 *   const parameters = args.join(', ');\\n                 *   console.log(`event with parameters ${parameters} in third listener`);\\n                 * });\\n                 *\\n                 * console.log(myEmitter.listeners('event'));\\n                 *\\n                 * myEmitter.emit('event', 1, 2, 3, 4, 5);\\n                 *\\n                 * // Prints:\\n                 * // [\\n                 * //   [Function: firstListener],\\n                 * //   [Function: secondListener],\\n                 * //   [Function: thirdListener]\\n                 * // ]\\n                 * // Helloooo! first listener\\n                 * // event with parameters 1, 2 in second listener\\n                 * // event with parameters 1, 2, 3, 4, 5 in third listener\\n                 * ```\\n                 * @since v0.1.26\\n                 */\\n                emit(eventName: string | symbol, ...args: any[]): boolean;\\n                /**\\n                 * Returns the number of listeners listening to the event named `eventName`.\\n                 *\\n                 * If `listener` is provided, it will return how many times the listener\\n                 * is found in the list of the listeners of the event.\\n                 * @since v3.2.0\\n                 * @param eventName The name of the event being listened for\\n                 * @param listener The event handler function\\n                 */\\n                listenerCount(eventName: string | symbol, listener?: Function): number;\\n                /**\\n                 * Adds the `listener` function to the _beginning_ of the listeners array for the\\n                 * event named `eventName`. No checks are made to see if the `listener` has\\n                 * already been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\\n                 * times.\\n                 *\\n                 * ```js\\n                 * server.prependListener('connection', (stream) => {\\n                 *   console.log('someone connected!');\\n                 * });\\n                 * ```\\n                 *\\n                 * Returns a reference to the `EventEmitter`, so that calls can be chained.\\n                 * @since v6.0.0\\n                 * @param eventName The name of the event.\\n                 * @param listener The callback function\\n                 */\\n                prependListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\\n                /**\\n                 * Adds a **one-time**`listener` function for the event named `eventName` to the _beginning_ of the listeners array. The next time `eventName` is triggered, this\\n                 * listener is removed, and then invoked.\\n                 *\\n                 * ```js\\n                 * server.prependOnceListener('connection', (stream) => {\\n                 *   console.log('Ah, we have our first user!');\\n                 * });\\n                 * ```\\n                 *\\n                 * Returns a reference to the `EventEmitter`, so that calls can be chained.\\n                 * @since v6.0.0\\n                 * @param eventName The name of the event.\\n                 * @param listener The callback function\\n                 */\\n                prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\\n                /**\\n                 * Returns an array listing the events for which the emitter has registered\\n                 * listeners. The values in the array are strings or `Symbol`s.\\n                 *\\n                 * ```js\\n                 * const EventEmitter = require('events');\\n                 * const myEE = new EventEmitter();\\n                 * myEE.on('foo', () => {});\\n                 * myEE.on('bar', () => {});\\n                 *\\n                 * const sym = Symbol('symbol');\\n                 * myEE.on(sym, () => {});\\n                 *\\n                 * console.log(myEE.eventNames());\\n                 * // Prints: [ 'foo', 'bar', Symbol(symbol) ]\\n                 * ```\\n                 * @since v6.0.0\\n                 */\\n                eventNames(): Array<string | symbol>;\\n            }\\n        }\\n    }\\n    export = EventEmitter;\\n}\\ndeclare module 'node:events' {\\n    import events = require('events');\\n    export = events;\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/fs.d.ts\":\"/**\\n * The `fs` module enables interacting with the file system in a\\n * way modeled on standard POSIX functions.\\n *\\n * To use the promise-based APIs:\\n *\\n * ```js\\n * import * as fs from 'fs/promises';\\n * ```\\n *\\n * To use the callback and sync APIs:\\n *\\n * ```js\\n * import * as fs from 'fs';\\n * ```\\n *\\n * All file system operations have synchronous, callback, and promise-based\\n * forms, and are accessible using both CommonJS syntax and ES6 Modules (ESM).\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/fs.js)\\n */\\ndeclare module 'fs' {\\n    import * as stream from 'node:stream';\\n    import { Abortable, EventEmitter } from 'node:events';\\n    import { URL } from 'node:url';\\n    import * as promises from 'node:fs/promises';\\n    export { promises };\\n    /**\\n     * Valid types for path values in \\\"fs\\\".\\n     */\\n    export type PathLike = string | Buffer | URL;\\n    export type PathOrFileDescriptor = PathLike | number;\\n    export type TimeLike = string | number | Date;\\n    export type NoParamCallback = (err: NodeJS.ErrnoException | null) => void;\\n    export type BufferEncodingOption =\\n        | 'buffer'\\n        | {\\n              encoding: 'buffer';\\n          };\\n    export interface ObjectEncodingOptions {\\n        encoding?: BufferEncoding | null | undefined;\\n    }\\n    export type EncodingOption = ObjectEncodingOptions | BufferEncoding | undefined | null;\\n    export type OpenMode = number | string;\\n    export type Mode = number | string;\\n    export interface StatsBase<T> {\\n        isFile(): boolean;\\n        isDirectory(): boolean;\\n        isBlockDevice(): boolean;\\n        isCharacterDevice(): boolean;\\n        isSymbolicLink(): boolean;\\n        isFIFO(): boolean;\\n        isSocket(): boolean;\\n        dev: T;\\n        ino: T;\\n        mode: T;\\n        nlink: T;\\n        uid: T;\\n        gid: T;\\n        rdev: T;\\n        size: T;\\n        blksize: T;\\n        blocks: T;\\n        atimeMs: T;\\n        mtimeMs: T;\\n        ctimeMs: T;\\n        birthtimeMs: T;\\n        atime: Date;\\n        mtime: Date;\\n        ctime: Date;\\n        birthtime: Date;\\n    }\\n    export interface Stats extends StatsBase<number> {}\\n    /**\\n     * A `fs.Stats` object provides information about a file.\\n     *\\n     * Objects returned from {@link stat}, {@link lstat} and {@link fstat} and\\n     * their synchronous counterparts are of this type.\\n     * If `bigint` in the `options` passed to those methods is true, the numeric values\\n     * will be `bigint` instead of `number`, and the object will contain additional\\n     * nanosecond-precision properties suffixed with `Ns`.\\n     *\\n     * ```console\\n     * Stats {\\n     *   dev: 2114,\\n     *   ino: 48064969,\\n     *   mode: 33188,\\n     *   nlink: 1,\\n     *   uid: 85,\\n     *   gid: 100,\\n     *   rdev: 0,\\n     *   size: 527,\\n     *   blksize: 4096,\\n     *   blocks: 8,\\n     *   atimeMs: 1318289051000.1,\\n     *   mtimeMs: 1318289051000.1,\\n     *   ctimeMs: 1318289051000.1,\\n     *   birthtimeMs: 1318289051000.1,\\n     *   atime: Mon, 10 Oct 2011 23:24:11 GMT,\\n     *   mtime: Mon, 10 Oct 2011 23:24:11 GMT,\\n     *   ctime: Mon, 10 Oct 2011 23:24:11 GMT,\\n     *   birthtime: Mon, 10 Oct 2011 23:24:11 GMT }\\n     * ```\\n     *\\n     * `bigint` version:\\n     *\\n     * ```console\\n     * BigIntStats {\\n     *   dev: 2114n,\\n     *   ino: 48064969n,\\n     *   mode: 33188n,\\n     *   nlink: 1n,\\n     *   uid: 85n,\\n     *   gid: 100n,\\n     *   rdev: 0n,\\n     *   size: 527n,\\n     *   blksize: 4096n,\\n     *   blocks: 8n,\\n     *   atimeMs: 1318289051000n,\\n     *   mtimeMs: 1318289051000n,\\n     *   ctimeMs: 1318289051000n,\\n     *   birthtimeMs: 1318289051000n,\\n     *   atimeNs: 1318289051000000000n,\\n     *   mtimeNs: 1318289051000000000n,\\n     *   ctimeNs: 1318289051000000000n,\\n     *   birthtimeNs: 1318289051000000000n,\\n     *   atime: Mon, 10 Oct 2011 23:24:11 GMT,\\n     *   mtime: Mon, 10 Oct 2011 23:24:11 GMT,\\n     *   ctime: Mon, 10 Oct 2011 23:24:11 GMT,\\n     *   birthtime: Mon, 10 Oct 2011 23:24:11 GMT }\\n     * ```\\n     * @since v0.1.21\\n     */\\n    export class Stats {}\\n    /**\\n     * A representation of a directory entry, which can be a file or a subdirectory\\n     * within the directory, as returned by reading from an `fs.Dir`. The\\n     * directory entry is a combination of the file name and file type pairs.\\n     *\\n     * Additionally, when {@link readdir} or {@link readdirSync} is called with\\n     * the `withFileTypes` option set to `true`, the resulting array is filled with `fs.Dirent` objects, rather than strings or `Buffer` s.\\n     * @since v10.10.0\\n     */\\n    export class Dirent {\\n        /**\\n         * Returns `true` if the `fs.Dirent` object describes a regular file.\\n         * @since v10.10.0\\n         */\\n        isFile(): boolean;\\n        /**\\n         * Returns `true` if the `fs.Dirent` object describes a file system\\n         * directory.\\n         * @since v10.10.0\\n         */\\n        isDirectory(): boolean;\\n        /**\\n         * Returns `true` if the `fs.Dirent` object describes a block device.\\n         * @since v10.10.0\\n         */\\n        isBlockDevice(): boolean;\\n        /**\\n         * Returns `true` if the `fs.Dirent` object describes a character device.\\n         * @since v10.10.0\\n         */\\n        isCharacterDevice(): boolean;\\n        /**\\n         * Returns `true` if the `fs.Dirent` object describes a symbolic link.\\n         * @since v10.10.0\\n         */\\n        isSymbolicLink(): boolean;\\n        /**\\n         * Returns `true` if the `fs.Dirent` object describes a first-in-first-out\\n         * (FIFO) pipe.\\n         * @since v10.10.0\\n         */\\n        isFIFO(): boolean;\\n        /**\\n         * Returns `true` if the `fs.Dirent` object describes a socket.\\n         * @since v10.10.0\\n         */\\n        isSocket(): boolean;\\n        /**\\n         * The file name that this `fs.Dirent` object refers to. The type of this\\n         * value is determined by the `options.encoding` passed to {@link readdir} or {@link readdirSync}.\\n         * @since v10.10.0\\n         */\\n        name: string;\\n    }\\n    /**\\n     * A class representing a directory stream.\\n     *\\n     * Created by {@link opendir}, {@link opendirSync}, or `fsPromises.opendir()`.\\n     *\\n     * ```js\\n     * import { opendir } from 'fs/promises';\\n     *\\n     * try {\\n     *   const dir = await opendir('./');\\n     *   for await (const dirent of dir)\\n     *     console.log(dirent.name);\\n     * } catch (err) {\\n     *   console.error(err);\\n     * }\\n     * ```\\n     *\\n     * When using the async iterator, the `fs.Dir` object will be automatically\\n     * closed after the iterator exits.\\n     * @since v12.12.0\\n     */\\n    export class Dir implements AsyncIterable<Dirent> {\\n        /**\\n         * The read-only path of this directory as was provided to {@link opendir},{@link opendirSync}, or `fsPromises.opendir()`.\\n         * @since v12.12.0\\n         */\\n        readonly path: string;\\n        /**\\n         * Asynchronously iterates over the directory via `readdir(3)` until all entries have been read.\\n         */\\n        [Symbol.asyncIterator](): AsyncIterableIterator<Dirent>;\\n        /**\\n         * Asynchronously close the directory's underlying resource handle.\\n         * Subsequent reads will result in errors.\\n         *\\n         * A promise is returned that will be resolved after the resource has been\\n         * closed.\\n         * @since v12.12.0\\n         */\\n        close(): Promise<void>;\\n        close(cb: NoParamCallback): void;\\n        /**\\n         * Synchronously close the directory's underlying resource handle.\\n         * Subsequent reads will result in errors.\\n         * @since v12.12.0\\n         */\\n        closeSync(): void;\\n        /**\\n         * Asynchronously read the next directory entry via [`readdir(3)`](http://man7.org/linux/man-pages/man3/readdir.3.html) as an `fs.Dirent`.\\n         *\\n         * A promise is returned that will be resolved with an `fs.Dirent`, or `null`if there are no more directory entries to read.\\n         *\\n         * Directory entries returned by this function are in no particular order as\\n         * provided by the operating system's underlying directory mechanisms.\\n         * Entries added or removed while iterating over the directory might not be\\n         * included in the iteration results.\\n         * @since v12.12.0\\n         * @return containing {fs.Dirent|null}\\n         */\\n        read(): Promise<Dirent | null>;\\n        read(cb: (err: NodeJS.ErrnoException | null, dirEnt: Dirent | null) => void): void;\\n        /**\\n         * Synchronously read the next directory entry as an `fs.Dirent`. See the\\n         * POSIX [`readdir(3)`](http://man7.org/linux/man-pages/man3/readdir.3.html) documentation for more detail.\\n         *\\n         * If there are no more directory entries to read, `null` will be returned.\\n         *\\n         * Directory entries returned by this function are in no particular order as\\n         * provided by the operating system's underlying directory mechanisms.\\n         * Entries added or removed while iterating over the directory might not be\\n         * included in the iteration results.\\n         * @since v12.12.0\\n         */\\n        readSync(): Dirent | null;\\n    }\\n    /**\\n     * Class: fs.StatWatcher\\n     * @since v14.3.0, v12.20.0\\n     * Extends `EventEmitter`\\n     * A successful call to {@link watchFile} method will return a new fs.StatWatcher object.\\n     */\\n    export interface StatWatcher extends EventEmitter {\\n        /**\\n         * When called, requests that the Node.js event loop _not_ exit so long as the `fs.StatWatcher` is active. Calling `watcher.ref()` multiple times will have\\n         * no effect.\\n         *\\n         * By default, all `fs.StatWatcher` objects are \\\"ref'ed\\\", making it normally\\n         * unnecessary to call `watcher.ref()` unless `watcher.unref()` had been\\n         * called previously.\\n         * @since v14.3.0, v12.20.0\\n         */\\n        ref(): this;\\n        /**\\n         * When called, the active `fs.StatWatcher` object will not require the Node.js\\n         * event loop to remain active. If there is no other activity keeping the\\n         * event loop running, the process may exit before the `fs.StatWatcher` object's\\n         * callback is invoked. Calling `watcher.unref()` multiple times will have\\n         * no effect.\\n         * @since v14.3.0, v12.20.0\\n         */\\n        unref(): this;\\n    }\\n    export interface FSWatcher extends EventEmitter {\\n        /**\\n         * Stop watching for changes on the given `fs.FSWatcher`. Once stopped, the `fs.FSWatcher` object is no longer usable.\\n         * @since v0.5.8\\n         */\\n        close(): void;\\n        /**\\n         * events.EventEmitter\\n         *   1. change\\n         *   2. error\\n         */\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        addListener(event: 'change', listener: (eventType: string, filename: string | Buffer) => void): this;\\n        addListener(event: 'error', listener: (error: Error) => void): this;\\n        addListener(event: 'close', listener: () => void): this;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        on(event: 'change', listener: (eventType: string, filename: string | Buffer) => void): this;\\n        on(event: 'error', listener: (error: Error) => void): this;\\n        on(event: 'close', listener: () => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        once(event: 'change', listener: (eventType: string, filename: string | Buffer) => void): this;\\n        once(event: 'error', listener: (error: Error) => void): this;\\n        once(event: 'close', listener: () => void): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'change', listener: (eventType: string, filename: string | Buffer) => void): this;\\n        prependListener(event: 'error', listener: (error: Error) => void): this;\\n        prependListener(event: 'close', listener: () => void): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'change', listener: (eventType: string, filename: string | Buffer) => void): this;\\n        prependOnceListener(event: 'error', listener: (error: Error) => void): this;\\n        prependOnceListener(event: 'close', listener: () => void): this;\\n    }\\n    /**\\n     * Instances of `fs.ReadStream` are created and returned using the {@link createReadStream} function.\\n     * @since v0.1.93\\n     */\\n    export class ReadStream extends stream.Readable {\\n        close(callback?: (err?: NodeJS.ErrnoException | null) => void): void;\\n        /**\\n         * The number of bytes that have been read so far.\\n         * @since v6.4.0\\n         */\\n        bytesRead: number;\\n        /**\\n         * The path to the file the stream is reading from as specified in the first\\n         * argument to `fs.createReadStream()`. If `path` is passed as a string, then`readStream.path` will be a string. If `path` is passed as a `Buffer`, then`readStream.path` will be a\\n         * `Buffer`. If `fd` is specified, then`readStream.path` will be `undefined`.\\n         * @since v0.1.93\\n         */\\n        path: string | Buffer;\\n        /**\\n         * This property is `true` if the underlying file has not been opened yet,\\n         * i.e. before the `'ready'` event is emitted.\\n         * @since v11.2.0, v10.16.0\\n         */\\n        pending: boolean;\\n        /**\\n         * events.EventEmitter\\n         *   1. open\\n         *   2. close\\n         *   3. ready\\n         */\\n        addListener(event: 'close', listener: () => void): this;\\n        addListener(event: 'data', listener: (chunk: Buffer | string) => void): this;\\n        addListener(event: 'end', listener: () => void): this;\\n        addListener(event: 'error', listener: (err: Error) => void): this;\\n        addListener(event: 'open', listener: (fd: number) => void): this;\\n        addListener(event: 'pause', listener: () => void): this;\\n        addListener(event: 'readable', listener: () => void): this;\\n        addListener(event: 'ready', listener: () => void): this;\\n        addListener(event: 'resume', listener: () => void): this;\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        on(event: 'close', listener: () => void): this;\\n        on(event: 'data', listener: (chunk: Buffer | string) => void): this;\\n        on(event: 'end', listener: () => void): this;\\n        on(event: 'error', listener: (err: Error) => void): this;\\n        on(event: 'open', listener: (fd: number) => void): this;\\n        on(event: 'pause', listener: () => void): this;\\n        on(event: 'readable', listener: () => void): this;\\n        on(event: 'ready', listener: () => void): this;\\n        on(event: 'resume', listener: () => void): this;\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\n        once(event: 'close', listener: () => void): this;\\n        once(event: 'data', listener: (chunk: Buffer | string) => void): this;\\n        once(event: 'end', listener: () => void): this;\\n        once(event: 'error', listener: (err: Error) => void): this;\\n        once(event: 'open', listener: (fd: number) => void): this;\\n        once(event: 'pause', listener: () => void): this;\\n        once(event: 'readable', listener: () => void): this;\\n        once(event: 'ready', listener: () => void): this;\\n        once(event: 'resume', listener: () => void): this;\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'close', listener: () => void): this;\\n        prependListener(event: 'data', listener: (chunk: Buffer | string) => void): this;\\n        prependListener(event: 'end', listener: () => void): this;\\n        prependListener(event: 'error', listener: (err: Error) => void): this;\\n        prependListener(event: 'open', listener: (fd: number) => void): this;\\n        prependListener(event: 'pause', listener: () => void): this;\\n        prependListener(event: 'readable', listener: () => void): this;\\n        prependListener(event: 'ready', listener: () => void): this;\\n        prependListener(event: 'resume', listener: () => void): this;\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'close', listener: () => void): this;\\n        prependOnceListener(event: 'data', listener: (chunk: Buffer | string) => void): this;\\n        prependOnceListener(event: 'end', listener: () => void): this;\\n        prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n        prependOnceListener(event: 'open', listener: (fd: number) => void): this;\\n        prependOnceListener(event: 'pause', listener: () => void): this;\\n        prependOnceListener(event: 'readable', listener: () => void): this;\\n        prependOnceListener(event: 'ready', listener: () => void): this;\\n        prependOnceListener(event: 'resume', listener: () => void): this;\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n    }\\n    /**\\n     * * Extends `stream.Writable`\\n     *\\n     * Instances of `fs.WriteStream` are created and returned using the {@link createWriteStream} function.\\n     * @since v0.1.93\\n     */\\n    export class WriteStream extends stream.Writable {\\n        /**\\n         * Closes `writeStream`. Optionally accepts a\\n         * callback that will be executed once the `writeStream`is closed.\\n         * @since v0.9.4\\n         */\\n        close(callback?: (err?: NodeJS.ErrnoException | null) => void): void;\\n        /**\\n         * The number of bytes written so far. Does not include data that is still queued\\n         * for writing.\\n         * @since v0.4.7\\n         */\\n        bytesWritten: number;\\n        /**\\n         * The path to the file the stream is writing to as specified in the first\\n         * argument to {@link createWriteStream}. If `path` is passed as a string, then`writeStream.path` will be a string. If `path` is passed as a `Buffer`, then`writeStream.path` will be a\\n         * `Buffer`.\\n         * @since v0.1.93\\n         */\\n        path: string | Buffer;\\n        /**\\n         * This property is `true` if the underlying file has not been opened yet,\\n         * i.e. before the `'ready'` event is emitted.\\n         * @since v11.2.0\\n         */\\n        pending: boolean;\\n        /**\\n         * events.EventEmitter\\n         *   1. open\\n         *   2. close\\n         *   3. ready\\n         */\\n        addListener(event: 'close', listener: () => void): this;\\n        addListener(event: 'drain', listener: () => void): this;\\n        addListener(event: 'error', listener: (err: Error) => void): this;\\n        addListener(event: 'finish', listener: () => void): this;\\n        addListener(event: 'open', listener: (fd: number) => void): this;\\n        addListener(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        addListener(event: 'ready', listener: () => void): this;\\n        addListener(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        on(event: 'close', listener: () => void): this;\\n        on(event: 'drain', listener: () => void): this;\\n        on(event: 'error', listener: (err: Error) => void): this;\\n        on(event: 'finish', listener: () => void): this;\\n        on(event: 'open', listener: (fd: number) => void): this;\\n        on(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        on(event: 'ready', listener: () => void): this;\\n        on(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\n        once(event: 'close', listener: () => void): this;\\n        once(event: 'drain', listener: () => void): this;\\n        once(event: 'error', listener: (err: Error) => void): this;\\n        once(event: 'finish', listener: () => void): this;\\n        once(event: 'open', listener: (fd: number) => void): this;\\n        once(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        once(event: 'ready', listener: () => void): this;\\n        once(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'close', listener: () => void): this;\\n        prependListener(event: 'drain', listener: () => void): this;\\n        prependListener(event: 'error', listener: (err: Error) => void): this;\\n        prependListener(event: 'finish', listener: () => void): this;\\n        prependListener(event: 'open', listener: (fd: number) => void): this;\\n        prependListener(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        prependListener(event: 'ready', listener: () => void): this;\\n        prependListener(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'close', listener: () => void): this;\\n        prependOnceListener(event: 'drain', listener: () => void): this;\\n        prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n        prependOnceListener(event: 'finish', listener: () => void): this;\\n        prependOnceListener(event: 'open', listener: (fd: number) => void): this;\\n        prependOnceListener(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        prependOnceListener(event: 'ready', listener: () => void): this;\\n        prependOnceListener(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n    }\\n    /**\\n     * Asynchronously rename file at `oldPath` to the pathname provided\\n     * as `newPath`. In the case that `newPath` already exists, it will\\n     * be overwritten. If there is a directory at `newPath`, an error will\\n     * be raised instead. No arguments other than a possible exception are\\n     * given to the completion callback.\\n     *\\n     * See also: [`rename(2)`](http://man7.org/linux/man-pages/man2/rename.2.html).\\n     *\\n     * ```js\\n     * import { rename } from 'fs';\\n     *\\n     * rename('oldFile.txt', 'newFile.txt', (err) => {\\n     *   if (err) throw err;\\n     *   console.log('Rename complete!');\\n     * });\\n     * ```\\n     * @since v0.0.2\\n     */\\n    export function rename(oldPath: PathLike, newPath: PathLike, callback: NoParamCallback): void;\\n    export namespace rename {\\n        /**\\n         * Asynchronous rename(2) - Change the name or location of a file or directory.\\n         * @param oldPath A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * URL support is _experimental_.\\n         * @param newPath A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * URL support is _experimental_.\\n         */\\n        function __promisify__(oldPath: PathLike, newPath: PathLike): Promise<void>;\\n    }\\n    /**\\n     * Renames the file from `oldPath` to `newPath`. Returns `undefined`.\\n     *\\n     * See the POSIX [`rename(2)`](http://man7.org/linux/man-pages/man2/rename.2.html) documentation for more details.\\n     * @since v0.1.21\\n     */\\n    export function renameSync(oldPath: PathLike, newPath: PathLike): void;\\n    /**\\n     * Truncates the file. No arguments other than a possible exception are\\n     * given to the completion callback. A file descriptor can also be passed as the\\n     * first argument. In this case, `fs.ftruncate()` is called.\\n     *\\n     * ```js\\n     * import { truncate } from 'fs';\\n     * // Assuming that 'path/file.txt' is a regular file.\\n     * truncate('path/file.txt', (err) => {\\n     *   if (err) throw err;\\n     *   console.log('path/file.txt was truncated');\\n     * });\\n     * ```\\n     *\\n     * Passing a file descriptor is deprecated and may result in an error being thrown\\n     * in the future.\\n     *\\n     * See the POSIX [`truncate(2)`](http://man7.org/linux/man-pages/man2/truncate.2.html) documentation for more details.\\n     * @since v0.8.6\\n     * @param [len=0]\\n     */\\n    export function truncate(path: PathLike, len: number | undefined | null, callback: NoParamCallback): void;\\n    /**\\n     * Asynchronous truncate(2) - Truncate a file to a specified length.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     */\\n    export function truncate(path: PathLike, callback: NoParamCallback): void;\\n    export namespace truncate {\\n        /**\\n         * Asynchronous truncate(2) - Truncate a file to a specified length.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param len If not specified, defaults to `0`.\\n         */\\n        function __promisify__(path: PathLike, len?: number | null): Promise<void>;\\n    }\\n    /**\\n     * Truncates the file. Returns `undefined`. A file descriptor can also be\\n     * passed as the first argument. In this case, `fs.ftruncateSync()` is called.\\n     *\\n     * Passing a file descriptor is deprecated and may result in an error being thrown\\n     * in the future.\\n     * @since v0.8.6\\n     * @param [len=0]\\n     */\\n    export function truncateSync(path: PathLike, len?: number | null): void;\\n    /**\\n     * Truncates the file descriptor. No arguments other than a possible exception are\\n     * given to the completion callback.\\n     *\\n     * See the POSIX [`ftruncate(2)`](http://man7.org/linux/man-pages/man2/ftruncate.2.html) documentation for more detail.\\n     *\\n     * If the file referred to by the file descriptor was larger than `len` bytes, only\\n     * the first `len` bytes will be retained in the file.\\n     *\\n     * For example, the following program retains only the first four bytes of the\\n     * file:\\n     *\\n     * ```js\\n     * import { open, close, ftruncate } from 'fs';\\n     *\\n     * function closeFd(fd) {\\n     *   close(fd, (err) => {\\n     *     if (err) throw err;\\n     *   });\\n     * }\\n     *\\n     * open('temp.txt', 'r+', (err, fd) => {\\n     *   if (err) throw err;\\n     *\\n     *   try {\\n     *     ftruncate(fd, 4, (err) => {\\n     *       closeFd(fd);\\n     *       if (err) throw err;\\n     *     });\\n     *   } catch (err) {\\n     *     closeFd(fd);\\n     *     if (err) throw err;\\n     *   }\\n     * });\\n     * ```\\n     *\\n     * If the file previously was shorter than `len` bytes, it is extended, and the\\n     * extended part is filled with null bytes (`'\\\\0'`):\\n     *\\n     * If `len` is negative then `0` will be used.\\n     * @since v0.8.6\\n     * @param [len=0]\\n     */\\n    export function ftruncate(fd: number, len: number | undefined | null, callback: NoParamCallback): void;\\n    /**\\n     * Asynchronous ftruncate(2) - Truncate a file to a specified length.\\n     * @param fd A file descriptor.\\n     */\\n    export function ftruncate(fd: number, callback: NoParamCallback): void;\\n    export namespace ftruncate {\\n        /**\\n         * Asynchronous ftruncate(2) - Truncate a file to a specified length.\\n         * @param fd A file descriptor.\\n         * @param len If not specified, defaults to `0`.\\n         */\\n        function __promisify__(fd: number, len?: number | null): Promise<void>;\\n    }\\n    /**\\n     * Truncates the file descriptor. Returns `undefined`.\\n     *\\n     * For detailed information, see the documentation of the asynchronous version of\\n     * this API: {@link ftruncate}.\\n     * @since v0.8.6\\n     * @param [len=0]\\n     */\\n    export function ftruncateSync(fd: number, len?: number | null): void;\\n    /**\\n     * Asynchronously changes owner and group of a file. No arguments other than a\\n     * possible exception are given to the completion callback.\\n     *\\n     * See the POSIX [`chown(2)`](http://man7.org/linux/man-pages/man2/chown.2.html) documentation for more detail.\\n     * @since v0.1.97\\n     */\\n    export function chown(path: PathLike, uid: number, gid: number, callback: NoParamCallback): void;\\n    export namespace chown {\\n        /**\\n         * Asynchronous chown(2) - Change ownership of a file.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         */\\n        function __promisify__(path: PathLike, uid: number, gid: number): Promise<void>;\\n    }\\n    /**\\n     * Synchronously changes owner and group of a file. Returns `undefined`.\\n     * This is the synchronous version of {@link chown}.\\n     *\\n     * See the POSIX [`chown(2)`](http://man7.org/linux/man-pages/man2/chown.2.html) documentation for more detail.\\n     * @since v0.1.97\\n     */\\n    export function chownSync(path: PathLike, uid: number, gid: number): void;\\n    /**\\n     * Sets the owner of the file. No arguments other than a possible exception are\\n     * given to the completion callback.\\n     *\\n     * See the POSIX [`fchown(2)`](http://man7.org/linux/man-pages/man2/fchown.2.html) documentation for more detail.\\n     * @since v0.4.7\\n     */\\n    export function fchown(fd: number, uid: number, gid: number, callback: NoParamCallback): void;\\n    export namespace fchown {\\n        /**\\n         * Asynchronous fchown(2) - Change ownership of a file.\\n         * @param fd A file descriptor.\\n         */\\n        function __promisify__(fd: number, uid: number, gid: number): Promise<void>;\\n    }\\n    /**\\n     * Sets the owner of the file. Returns `undefined`.\\n     *\\n     * See the POSIX [`fchown(2)`](http://man7.org/linux/man-pages/man2/fchown.2.html) documentation for more detail.\\n     * @since v0.4.7\\n     * @param uid The file's new owner's user id.\\n     * @param gid The file's new group's group id.\\n     */\\n    export function fchownSync(fd: number, uid: number, gid: number): void;\\n    /**\\n     * Set the owner of the symbolic link. No arguments other than a possible\\n     * exception are given to the completion callback.\\n     *\\n     * See the POSIX [`lchown(2)`](http://man7.org/linux/man-pages/man2/lchown.2.html) documentation for more detail.\\n     */\\n    export function lchown(path: PathLike, uid: number, gid: number, callback: NoParamCallback): void;\\n    export namespace lchown {\\n        /**\\n         * Asynchronous lchown(2) - Change ownership of a file. Does not dereference symbolic links.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         */\\n        function __promisify__(path: PathLike, uid: number, gid: number): Promise<void>;\\n    }\\n    /**\\n     * Set the owner for the path. Returns `undefined`.\\n     *\\n     * See the POSIX [`lchown(2)`](http://man7.org/linux/man-pages/man2/lchown.2.html) documentation for more details.\\n     * @param uid The file's new owner's user id.\\n     * @param gid The file's new group's group id.\\n     */\\n    export function lchownSync(path: PathLike, uid: number, gid: number): void;\\n    /**\\n     * Changes the access and modification times of a file in the same way as {@link utimes}, with the difference that if the path refers to a symbolic\\n     * link, then the link is not dereferenced: instead, the timestamps of the\\n     * symbolic link itself are changed.\\n     *\\n     * No arguments other than a possible exception are given to the completion\\n     * callback.\\n     * @since v14.5.0, v12.19.0\\n     */\\n    export function lutimes(path: PathLike, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback): void;\\n    export namespace lutimes {\\n        /**\\n         * Changes the access and modification times of a file in the same way as `fsPromises.utimes()`,\\n         * with the difference that if the path refers to a symbolic link, then the link is not\\n         * dereferenced: instead, the timestamps of the symbolic link itself are changed.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param atime The last access time. If a string is provided, it will be coerced to number.\\n         * @param mtime The last modified time. If a string is provided, it will be coerced to number.\\n         */\\n        function __promisify__(path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void>;\\n    }\\n    /**\\n     * Change the file system timestamps of the symbolic link referenced by `path`.\\n     * Returns `undefined`, or throws an exception when parameters are incorrect or\\n     * the operation fails. This is the synchronous version of {@link lutimes}.\\n     * @since v14.5.0, v12.19.0\\n     */\\n    export function lutimesSync(path: PathLike, atime: TimeLike, mtime: TimeLike): void;\\n    /**\\n     * Asynchronously changes the permissions of a file. No arguments other than a\\n     * possible exception are given to the completion callback.\\n     *\\n     * See the POSIX [`chmod(2)`](http://man7.org/linux/man-pages/man2/chmod.2.html) documentation for more detail.\\n     *\\n     * ```js\\n     * import { chmod } from 'fs';\\n     *\\n     * chmod('my_file.txt', 0o775, (err) => {\\n     *   if (err) throw err;\\n     *   console.log('The permissions for file \\\"my_file.txt\\\" have been changed!');\\n     * });\\n     * ```\\n     * @since v0.1.30\\n     */\\n    export function chmod(path: PathLike, mode: Mode, callback: NoParamCallback): void;\\n    export namespace chmod {\\n        /**\\n         * Asynchronous chmod(2) - Change permissions of a file.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param mode A file mode. If a string is passed, it is parsed as an octal integer.\\n         */\\n        function __promisify__(path: PathLike, mode: Mode): Promise<void>;\\n    }\\n    /**\\n     * For detailed information, see the documentation of the asynchronous version of\\n     * this API: {@link chmod}.\\n     *\\n     * See the POSIX [`chmod(2)`](http://man7.org/linux/man-pages/man2/chmod.2.html) documentation for more detail.\\n     * @since v0.6.7\\n     */\\n    export function chmodSync(path: PathLike, mode: Mode): void;\\n    /**\\n     * Sets the permissions on the file. No arguments other than a possible exception\\n     * are given to the completion callback.\\n     *\\n     * See the POSIX [`fchmod(2)`](http://man7.org/linux/man-pages/man2/fchmod.2.html) documentation for more detail.\\n     * @since v0.4.7\\n     */\\n    export function fchmod(fd: number, mode: Mode, callback: NoParamCallback): void;\\n    export namespace fchmod {\\n        /**\\n         * Asynchronous fchmod(2) - Change permissions of a file.\\n         * @param fd A file descriptor.\\n         * @param mode A file mode. If a string is passed, it is parsed as an octal integer.\\n         */\\n        function __promisify__(fd: number, mode: Mode): Promise<void>;\\n    }\\n    /**\\n     * Sets the permissions on the file. Returns `undefined`.\\n     *\\n     * See the POSIX [`fchmod(2)`](http://man7.org/linux/man-pages/man2/fchmod.2.html) documentation for more detail.\\n     * @since v0.4.7\\n     */\\n    export function fchmodSync(fd: number, mode: Mode): void;\\n    /**\\n     * Changes the permissions on a symbolic link. No arguments other than a possible\\n     * exception are given to the completion callback.\\n     *\\n     * This method is only implemented on macOS.\\n     *\\n     * See the POSIX [`lchmod(2)`](https://www.freebsd.org/cgi/man.cgi?query=lchmod&sektion=2) documentation for more detail.\\n     * @deprecated Since v0.4.7\\n     */\\n    export function lchmod(path: PathLike, mode: Mode, callback: NoParamCallback): void;\\n    /** @deprecated */\\n    export namespace lchmod {\\n        /**\\n         * Asynchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param mode A file mode. If a string is passed, it is parsed as an octal integer.\\n         */\\n        function __promisify__(path: PathLike, mode: Mode): Promise<void>;\\n    }\\n    /**\\n     * Changes the permissions on a symbolic link. Returns `undefined`.\\n     *\\n     * This method is only implemented on macOS.\\n     *\\n     * See the POSIX [`lchmod(2)`](https://www.freebsd.org/cgi/man.cgi?query=lchmod&sektion=2) documentation for more detail.\\n     * @deprecated Since v0.4.7\\n     */\\n    export function lchmodSync(path: PathLike, mode: Mode): void;\\n    /**\\n     * Asynchronous [`stat(2)`](http://man7.org/linux/man-pages/man2/stat.2.html). The callback gets two arguments `(err, stats)` where`stats` is an `fs.Stats` object.\\n     *\\n     * In case of an error, the `err.code` will be one of `Common System Errors`.\\n     *\\n     * Using `fs.stat()` to check for the existence of a file before calling`fs.open()`, `fs.readFile()` or `fs.writeFile()` is not recommended.\\n     * Instead, user code should open/read/write the file directly and handle the\\n     * error raised if the file is not available.\\n     *\\n     * To check if a file exists without manipulating it afterwards, {@link access} is recommended.\\n     *\\n     * For example, given the following directory structure:\\n     *\\n     * ```text\\n     * - txtDir\\n     * -- file.txt\\n     * - app.js\\n     * ```\\n     *\\n     * The next program will check for the stats of the given paths:\\n     *\\n     * ```js\\n     * import { stat } from 'fs';\\n     *\\n     * const pathsToCheck = ['./txtDir', './txtDir/file.txt'];\\n     *\\n     * for (let i = 0; i < pathsToCheck.length; i++) {\\n     *   stat(pathsToCheck[i], (err, stats) => {\\n     *     console.log(stats.isDirectory());\\n     *     console.log(stats);\\n     *   });\\n     * }\\n     * ```\\n     *\\n     * The resulting output will resemble:\\n     *\\n     * ```console\\n     * true\\n     * Stats {\\n     *   dev: 16777220,\\n     *   mode: 16877,\\n     *   nlink: 3,\\n     *   uid: 501,\\n     *   gid: 20,\\n     *   rdev: 0,\\n     *   blksize: 4096,\\n     *   ino: 14214262,\\n     *   size: 96,\\n     *   blocks: 0,\\n     *   atimeMs: 1561174653071.963,\\n     *   mtimeMs: 1561174614583.3518,\\n     *   ctimeMs: 1561174626623.5366,\\n     *   birthtimeMs: 1561174126937.2893,\\n     *   atime: 2019-06-22T03:37:33.072Z,\\n     *   mtime: 2019-06-22T03:36:54.583Z,\\n     *   ctime: 2019-06-22T03:37:06.624Z,\\n     *   birthtime: 2019-06-22T03:28:46.937Z\\n     * }\\n     * false\\n     * Stats {\\n     *   dev: 16777220,\\n     *   mode: 33188,\\n     *   nlink: 1,\\n     *   uid: 501,\\n     *   gid: 20,\\n     *   rdev: 0,\\n     *   blksize: 4096,\\n     *   ino: 14214074,\\n     *   size: 8,\\n     *   blocks: 8,\\n     *   atimeMs: 1561174616618.8555,\\n     *   mtimeMs: 1561174614584,\\n     *   ctimeMs: 1561174614583.8145,\\n     *   birthtimeMs: 1561174007710.7478,\\n     *   atime: 2019-06-22T03:36:56.619Z,\\n     *   mtime: 2019-06-22T03:36:54.584Z,\\n     *   ctime: 2019-06-22T03:36:54.584Z,\\n     *   birthtime: 2019-06-22T03:26:47.711Z\\n     * }\\n     * ```\\n     * @since v0.0.2\\n     */\\n    export function stat(path: PathLike, callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void): void;\\n    export function stat(\\n        path: PathLike,\\n        options:\\n            | (StatOptions & {\\n                  bigint?: false | undefined;\\n              })\\n            | undefined,\\n        callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void\\n    ): void;\\n    export function stat(\\n        path: PathLike,\\n        options: StatOptions & {\\n            bigint: true;\\n        },\\n        callback: (err: NodeJS.ErrnoException | null, stats: BigIntStats) => void\\n    ): void;\\n    export function stat(path: PathLike, options: StatOptions | undefined, callback: (err: NodeJS.ErrnoException | null, stats: Stats | BigIntStats) => void): void;\\n    export namespace stat {\\n        /**\\n         * Asynchronous stat(2) - Get file status.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         */\\n        function __promisify__(\\n            path: PathLike,\\n            options?: StatOptions & {\\n                bigint?: false | undefined;\\n            }\\n        ): Promise<Stats>;\\n        function __promisify__(\\n            path: PathLike,\\n            options: StatOptions & {\\n                bigint: true;\\n            }\\n        ): Promise<BigIntStats>;\\n        function __promisify__(path: PathLike, options?: StatOptions): Promise<Stats | BigIntStats>;\\n    }\\n    export interface StatSyncFn extends Function {\\n        (path: PathLike, options?: undefined): Stats;\\n        (\\n            path: PathLike,\\n            options?: StatSyncOptions & {\\n                bigint?: false | undefined;\\n                throwIfNoEntry: false;\\n            }\\n        ): Stats | undefined;\\n        (\\n            path: PathLike,\\n            options: StatSyncOptions & {\\n                bigint: true;\\n                throwIfNoEntry: false;\\n            }\\n        ): BigIntStats | undefined;\\n        (\\n            path: PathLike,\\n            options?: StatSyncOptions & {\\n                bigint?: false | undefined;\\n            }\\n        ): Stats;\\n        (\\n            path: PathLike,\\n            options: StatSyncOptions & {\\n                bigint: true;\\n            }\\n        ): BigIntStats;\\n        (\\n            path: PathLike,\\n            options: StatSyncOptions & {\\n                bigint: boolean;\\n                throwIfNoEntry?: false | undefined;\\n            }\\n        ): Stats | BigIntStats;\\n        (path: PathLike, options?: StatSyncOptions): Stats | BigIntStats | undefined;\\n    }\\n    /**\\n     * Synchronous stat(2) - Get file status.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     */\\n    export const statSync: StatSyncFn;\\n    /**\\n     * Invokes the callback with the `fs.Stats` for the file descriptor.\\n     *\\n     * See the POSIX [`fstat(2)`](http://man7.org/linux/man-pages/man2/fstat.2.html) documentation for more detail.\\n     * @since v0.1.95\\n     */\\n    export function fstat(fd: number, callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void): void;\\n    export function fstat(\\n        fd: number,\\n        options:\\n            | (StatOptions & {\\n                  bigint?: false | undefined;\\n              })\\n            | undefined,\\n        callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void\\n    ): void;\\n    export function fstat(\\n        fd: number,\\n        options: StatOptions & {\\n            bigint: true;\\n        },\\n        callback: (err: NodeJS.ErrnoException | null, stats: BigIntStats) => void\\n    ): void;\\n    export function fstat(fd: number, options: StatOptions | undefined, callback: (err: NodeJS.ErrnoException | null, stats: Stats | BigIntStats) => void): void;\\n    export namespace fstat {\\n        /**\\n         * Asynchronous fstat(2) - Get file status.\\n         * @param fd A file descriptor.\\n         */\\n        function __promisify__(\\n            fd: number,\\n            options?: StatOptions & {\\n                bigint?: false | undefined;\\n            }\\n        ): Promise<Stats>;\\n        function __promisify__(\\n            fd: number,\\n            options: StatOptions & {\\n                bigint: true;\\n            }\\n        ): Promise<BigIntStats>;\\n        function __promisify__(fd: number, options?: StatOptions): Promise<Stats | BigIntStats>;\\n    }\\n    /**\\n     * Retrieves the `fs.Stats` for the file descriptor.\\n     *\\n     * See the POSIX [`fstat(2)`](http://man7.org/linux/man-pages/man2/fstat.2.html) documentation for more detail.\\n     * @since v0.1.95\\n     */\\n    export function fstatSync(\\n        fd: number,\\n        options?: StatOptions & {\\n            bigint?: false | undefined;\\n        }\\n    ): Stats;\\n    export function fstatSync(\\n        fd: number,\\n        options: StatOptions & {\\n            bigint: true;\\n        }\\n    ): BigIntStats;\\n    export function fstatSync(fd: number, options?: StatOptions): Stats | BigIntStats;\\n    /**\\n     * Retrieves the `fs.Stats` for the symbolic link referred to by the path.\\n     * The callback gets two arguments `(err, stats)` where `stats` is a `fs.Stats` object. `lstat()` is identical to `stat()`, except that if `path` is a symbolic\\n     * link, then the link itself is stat-ed, not the file that it refers to.\\n     *\\n     * See the POSIX [`lstat(2)`](http://man7.org/linux/man-pages/man2/lstat.2.html) documentation for more details.\\n     * @since v0.1.30\\n     */\\n    export function lstat(path: PathLike, callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void): void;\\n    export function lstat(\\n        path: PathLike,\\n        options:\\n            | (StatOptions & {\\n                  bigint?: false | undefined;\\n              })\\n            | undefined,\\n        callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void\\n    ): void;\\n    export function lstat(\\n        path: PathLike,\\n        options: StatOptions & {\\n            bigint: true;\\n        },\\n        callback: (err: NodeJS.ErrnoException | null, stats: BigIntStats) => void\\n    ): void;\\n    export function lstat(path: PathLike, options: StatOptions | undefined, callback: (err: NodeJS.ErrnoException | null, stats: Stats | BigIntStats) => void): void;\\n    export namespace lstat {\\n        /**\\n         * Asynchronous lstat(2) - Get file status. Does not dereference symbolic links.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         */\\n        function __promisify__(\\n            path: PathLike,\\n            options?: StatOptions & {\\n                bigint?: false | undefined;\\n            }\\n        ): Promise<Stats>;\\n        function __promisify__(\\n            path: PathLike,\\n            options: StatOptions & {\\n                bigint: true;\\n            }\\n        ): Promise<BigIntStats>;\\n        function __promisify__(path: PathLike, options?: StatOptions): Promise<Stats | BigIntStats>;\\n    }\\n    /**\\n     * Synchronous lstat(2) - Get file status. Does not dereference symbolic links.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     */\\n    export const lstatSync: StatSyncFn;\\n    /**\\n     * Creates a new link from the `existingPath` to the `newPath`. See the POSIX [`link(2)`](http://man7.org/linux/man-pages/man2/link.2.html) documentation for more detail. No arguments other than\\n     * a possible\\n     * exception are given to the completion callback.\\n     * @since v0.1.31\\n     */\\n    export function link(existingPath: PathLike, newPath: PathLike, callback: NoParamCallback): void;\\n    export namespace link {\\n        /**\\n         * Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.\\n         * @param existingPath A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param newPath A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         */\\n        function __promisify__(existingPath: PathLike, newPath: PathLike): Promise<void>;\\n    }\\n    /**\\n     * Creates a new link from the `existingPath` to the `newPath`. See the POSIX [`link(2)`](http://man7.org/linux/man-pages/man2/link.2.html) documentation for more detail. Returns `undefined`.\\n     * @since v0.1.31\\n     */\\n    export function linkSync(existingPath: PathLike, newPath: PathLike): void;\\n    /**\\n     * Creates the link called `path` pointing to `target`. No arguments other than a\\n     * possible exception are given to the completion callback.\\n     *\\n     * See the POSIX [`symlink(2)`](http://man7.org/linux/man-pages/man2/symlink.2.html) documentation for more details.\\n     *\\n     * The `type` argument is only available on Windows and ignored on other platforms.\\n     * It can be set to `'dir'`, `'file'`, or `'junction'`. If the `type` argument is\\n     * not set, Node.js will autodetect `target` type and use `'file'` or `'dir'`. If\\n     * the `target` does not exist, `'file'` will be used. Windows junction points\\n     * require the destination path to be absolute. When using `'junction'`, the`target` argument will automatically be normalized to absolute path.\\n     *\\n     * Relative targets are relative to the link\u2019s parent directory.\\n     *\\n     * ```js\\n     * import { symlink } from 'fs';\\n     *\\n     * symlink('./mew', './mewtwo', callback);\\n     * ```\\n     *\\n     * The above example creates a symbolic link `mewtwo` which points to `mew` in the\\n     * same directory:\\n     *\\n     * ```bash\\n     * $ tree .\\n     * .\\n     * \u251c\u2500\u2500 mew\\n     * \u2514\u2500\u2500 mewtwo -> ./mew\\n     * ```\\n     * @since v0.1.31\\n     */\\n    export function symlink(target: PathLike, path: PathLike, type: symlink.Type | undefined | null, callback: NoParamCallback): void;\\n    /**\\n     * Asynchronous symlink(2) - Create a new symbolic link to an existing file.\\n     * @param target A path to an existing file. If a URL is provided, it must use the `file:` protocol.\\n     * @param path A path to the new symlink. If a URL is provided, it must use the `file:` protocol.\\n     */\\n    export function symlink(target: PathLike, path: PathLike, callback: NoParamCallback): void;\\n    export namespace symlink {\\n        /**\\n         * Asynchronous symlink(2) - Create a new symbolic link to an existing file.\\n         * @param target A path to an existing file. If a URL is provided, it must use the `file:` protocol.\\n         * @param path A path to the new symlink. If a URL is provided, it must use the `file:` protocol.\\n         * @param type May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).\\n         * When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.\\n         */\\n        function __promisify__(target: PathLike, path: PathLike, type?: string | null): Promise<void>;\\n        type Type = 'dir' | 'file' | 'junction';\\n    }\\n    /**\\n     * Returns `undefined`.\\n     *\\n     * For detailed information, see the documentation of the asynchronous version of\\n     * this API: {@link symlink}.\\n     * @since v0.1.31\\n     */\\n    export function symlinkSync(target: PathLike, path: PathLike, type?: symlink.Type | null): void;\\n    /**\\n     * Reads the contents of the symbolic link referred to by `path`. The callback gets\\n     * two arguments `(err, linkString)`.\\n     *\\n     * See the POSIX [`readlink(2)`](http://man7.org/linux/man-pages/man2/readlink.2.html) documentation for more details.\\n     *\\n     * The optional `options` argument can be a string specifying an encoding, or an\\n     * object with an `encoding` property specifying the character encoding to use for\\n     * the link path passed to the callback. If the `encoding` is set to `'buffer'`,\\n     * the link path returned will be passed as a `Buffer` object.\\n     * @since v0.1.31\\n     */\\n    export function readlink(path: PathLike, options: EncodingOption, callback: (err: NodeJS.ErrnoException | null, linkString: string) => void): void;\\n    /**\\n     * Asynchronous readlink(2) - read value of a symbolic link.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function readlink(path: PathLike, options: BufferEncodingOption, callback: (err: NodeJS.ErrnoException | null, linkString: Buffer) => void): void;\\n    /**\\n     * Asynchronous readlink(2) - read value of a symbolic link.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function readlink(path: PathLike, options: EncodingOption, callback: (err: NodeJS.ErrnoException | null, linkString: string | Buffer) => void): void;\\n    /**\\n     * Asynchronous readlink(2) - read value of a symbolic link.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     */\\n    export function readlink(path: PathLike, callback: (err: NodeJS.ErrnoException | null, linkString: string) => void): void;\\n    export namespace readlink {\\n        /**\\n         * Asynchronous readlink(2) - read value of a symbolic link.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n         */\\n        function __promisify__(path: PathLike, options?: EncodingOption): Promise<string>;\\n        /**\\n         * Asynchronous readlink(2) - read value of a symbolic link.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n         */\\n        function __promisify__(path: PathLike, options: BufferEncodingOption): Promise<Buffer>;\\n        /**\\n         * Asynchronous readlink(2) - read value of a symbolic link.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n         */\\n        function __promisify__(path: PathLike, options?: EncodingOption): Promise<string | Buffer>;\\n    }\\n    /**\\n     * Returns the symbolic link's string value.\\n     *\\n     * See the POSIX [`readlink(2)`](http://man7.org/linux/man-pages/man2/readlink.2.html) documentation for more details.\\n     *\\n     * The optional `options` argument can be a string specifying an encoding, or an\\n     * object with an `encoding` property specifying the character encoding to use for\\n     * the link path returned. If the `encoding` is set to `'buffer'`,\\n     * the link path returned will be passed as a `Buffer` object.\\n     * @since v0.1.31\\n     */\\n    export function readlinkSync(path: PathLike, options?: EncodingOption): string;\\n    /**\\n     * Synchronous readlink(2) - read value of a symbolic link.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function readlinkSync(path: PathLike, options: BufferEncodingOption): Buffer;\\n    /**\\n     * Synchronous readlink(2) - read value of a symbolic link.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function readlinkSync(path: PathLike, options?: EncodingOption): string | Buffer;\\n    /**\\n     * Asynchronously computes the canonical pathname by resolving `.`, `..` and\\n     * symbolic links.\\n     *\\n     * A canonical pathname is not necessarily unique. Hard links and bind mounts can\\n     * expose a file system entity through many pathnames.\\n     *\\n     * This function behaves like [`realpath(3)`](http://man7.org/linux/man-pages/man3/realpath.3.html), with some exceptions:\\n     *\\n     * 1. No case conversion is performed on case-insensitive file systems.\\n     * 2. The maximum number of symbolic links is platform-independent and generally\\n     * (much) higher than what the native [`realpath(3)`](http://man7.org/linux/man-pages/man3/realpath.3.html) implementation supports.\\n     *\\n     * The `callback` gets two arguments `(err, resolvedPath)`. May use `process.cwd`to resolve relative paths.\\n     *\\n     * Only paths that can be converted to UTF8 strings are supported.\\n     *\\n     * The optional `options` argument can be a string specifying an encoding, or an\\n     * object with an `encoding` property specifying the character encoding to use for\\n     * the path passed to the callback. If the `encoding` is set to `'buffer'`,\\n     * the path returned will be passed as a `Buffer` object.\\n     *\\n     * If `path` resolves to a socket or a pipe, the function will return a system\\n     * dependent name for that object.\\n     * @since v0.1.31\\n     */\\n    export function realpath(path: PathLike, options: EncodingOption, callback: (err: NodeJS.ErrnoException | null, resolvedPath: string) => void): void;\\n    /**\\n     * Asynchronous realpath(3) - return the canonicalized absolute pathname.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function realpath(path: PathLike, options: BufferEncodingOption, callback: (err: NodeJS.ErrnoException | null, resolvedPath: Buffer) => void): void;\\n    /**\\n     * Asynchronous realpath(3) - return the canonicalized absolute pathname.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function realpath(path: PathLike, options: EncodingOption, callback: (err: NodeJS.ErrnoException | null, resolvedPath: string | Buffer) => void): void;\\n    /**\\n     * Asynchronous realpath(3) - return the canonicalized absolute pathname.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     */\\n    export function realpath(path: PathLike, callback: (err: NodeJS.ErrnoException | null, resolvedPath: string) => void): void;\\n    export namespace realpath {\\n        /**\\n         * Asynchronous realpath(3) - return the canonicalized absolute pathname.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n         */\\n        function __promisify__(path: PathLike, options?: EncodingOption): Promise<string>;\\n        /**\\n         * Asynchronous realpath(3) - return the canonicalized absolute pathname.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n         */\\n        function __promisify__(path: PathLike, options: BufferEncodingOption): Promise<Buffer>;\\n        /**\\n         * Asynchronous realpath(3) - return the canonicalized absolute pathname.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n         */\\n        function __promisify__(path: PathLike, options?: EncodingOption): Promise<string | Buffer>;\\n        /**\\n         * Asynchronous [`realpath(3)`](http://man7.org/linux/man-pages/man3/realpath.3.html).\\n         *\\n         * The `callback` gets two arguments `(err, resolvedPath)`.\\n         *\\n         * Only paths that can be converted to UTF8 strings are supported.\\n         *\\n         * The optional `options` argument can be a string specifying an encoding, or an\\n         * object with an `encoding` property specifying the character encoding to use for\\n         * the path passed to the callback. If the `encoding` is set to `'buffer'`,\\n         * the path returned will be passed as a `Buffer` object.\\n         *\\n         * On Linux, when Node.js is linked against musl libc, the procfs file system must\\n         * be mounted on `/proc` in order for this function to work. Glibc does not have\\n         * this restriction.\\n         * @since v9.2.0\\n         */\\n        function native(path: PathLike, options: EncodingOption, callback: (err: NodeJS.ErrnoException | null, resolvedPath: string) => void): void;\\n        function native(path: PathLike, options: BufferEncodingOption, callback: (err: NodeJS.ErrnoException | null, resolvedPath: Buffer) => void): void;\\n        function native(path: PathLike, options: EncodingOption, callback: (err: NodeJS.ErrnoException | null, resolvedPath: string | Buffer) => void): void;\\n        function native(path: PathLike, callback: (err: NodeJS.ErrnoException | null, resolvedPath: string) => void): void;\\n    }\\n    /**\\n     * Returns the resolved pathname.\\n     *\\n     * For detailed information, see the documentation of the asynchronous version of\\n     * this API: {@link realpath}.\\n     * @since v0.1.31\\n     */\\n    export function realpathSync(path: PathLike, options?: EncodingOption): string;\\n    /**\\n     * Synchronous realpath(3) - return the canonicalized absolute pathname.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function realpathSync(path: PathLike, options: BufferEncodingOption): Buffer;\\n    /**\\n     * Synchronous realpath(3) - return the canonicalized absolute pathname.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function realpathSync(path: PathLike, options?: EncodingOption): string | Buffer;\\n    export namespace realpathSync {\\n        function native(path: PathLike, options?: EncodingOption): string;\\n        function native(path: PathLike, options: BufferEncodingOption): Buffer;\\n        function native(path: PathLike, options?: EncodingOption): string | Buffer;\\n    }\\n    /**\\n     * Asynchronously removes a file or symbolic link. No arguments other than a\\n     * possible exception are given to the completion callback.\\n     *\\n     * ```js\\n     * import { unlink } from 'fs';\\n     * // Assuming that 'path/file.txt' is a regular file.\\n     * unlink('path/file.txt', (err) => {\\n     *   if (err) throw err;\\n     *   console.log('path/file.txt was deleted');\\n     * });\\n     * ```\\n     *\\n     * `fs.unlink()` will not work on a directory, empty or otherwise. To remove a\\n     * directory, use {@link rmdir}.\\n     *\\n     * See the POSIX [`unlink(2)`](http://man7.org/linux/man-pages/man2/unlink.2.html) documentation for more details.\\n     * @since v0.0.2\\n     */\\n    export function unlink(path: PathLike, callback: NoParamCallback): void;\\n    export namespace unlink {\\n        /**\\n         * Asynchronous unlink(2) - delete a name and possibly the file it refers to.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         */\\n        function __promisify__(path: PathLike): Promise<void>;\\n    }\\n    /**\\n     * Synchronous [`unlink(2)`](http://man7.org/linux/man-pages/man2/unlink.2.html). Returns `undefined`.\\n     * @since v0.1.21\\n     */\\n    export function unlinkSync(path: PathLike): void;\\n    export interface RmDirOptions {\\n        /**\\n         * If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or\\n         * `EPERM` error is encountered, Node.js will retry the operation with a linear\\n         * backoff wait of `retryDelay` ms longer on each try. This option represents the\\n         * number of retries. This option is ignored if the `recursive` option is not\\n         * `true`.\\n         * @default 0\\n         */\\n        maxRetries?: number | undefined;\\n        /**\\n         * @deprecated since v14.14.0 In future versions of Node.js and will trigger a warning\\n         * `fs.rmdir(path, { recursive: true })` will throw if `path` does not exist or is a file.\\n         * Use `fs.rm(path, { recursive: true, force: true })` instead.\\n         *\\n         * If `true`, perform a recursive directory removal. In\\n         * recursive mode, operations are retried on failure.\\n         * @default false\\n         */\\n        recursive?: boolean | undefined;\\n        /**\\n         * The amount of time in milliseconds to wait between retries.\\n         * This option is ignored if the `recursive` option is not `true`.\\n         * @default 100\\n         */\\n        retryDelay?: number | undefined;\\n    }\\n    /**\\n     * Asynchronous [`rmdir(2)`](http://man7.org/linux/man-pages/man2/rmdir.2.html). No arguments other than a possible exception are given\\n     * to the completion callback.\\n     *\\n     * Using `fs.rmdir()` on a file (not a directory) results in an `ENOENT` error on\\n     * Windows and an `ENOTDIR` error on POSIX.\\n     *\\n     * To get a behavior similar to the `rm -rf` Unix command, use {@link rm} with options `{ recursive: true, force: true }`.\\n     * @since v0.0.2\\n     */\\n    export function rmdir(path: PathLike, callback: NoParamCallback): void;\\n    export function rmdir(path: PathLike, options: RmDirOptions, callback: NoParamCallback): void;\\n    export namespace rmdir {\\n        /**\\n         * Asynchronous rmdir(2) - delete a directory.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         */\\n        function __promisify__(path: PathLike, options?: RmDirOptions): Promise<void>;\\n    }\\n    /**\\n     * Synchronous [`rmdir(2)`](http://man7.org/linux/man-pages/man2/rmdir.2.html). Returns `undefined`.\\n     *\\n     * Using `fs.rmdirSync()` on a file (not a directory) results in an `ENOENT` error\\n     * on Windows and an `ENOTDIR` error on POSIX.\\n     *\\n     * To get a behavior similar to the `rm -rf` Unix command, use {@link rmSync} with options `{ recursive: true, force: true }`.\\n     * @since v0.1.21\\n     */\\n    export function rmdirSync(path: PathLike, options?: RmDirOptions): void;\\n    export interface RmOptions {\\n        /**\\n         * When `true`, exceptions will be ignored if `path` does not exist.\\n         * @default false\\n         */\\n        force?: boolean | undefined;\\n        /**\\n         * If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or\\n         * `EPERM` error is encountered, Node.js will retry the operation with a linear\\n         * backoff wait of `retryDelay` ms longer on each try. This option represents the\\n         * number of retries. This option is ignored if the `recursive` option is not\\n         * `true`.\\n         * @default 0\\n         */\\n        maxRetries?: number | undefined;\\n        /**\\n         * If `true`, perform a recursive directory removal. In\\n         * recursive mode, operations are retried on failure.\\n         * @default false\\n         */\\n        recursive?: boolean | undefined;\\n        /**\\n         * The amount of time in milliseconds to wait between retries.\\n         * This option is ignored if the `recursive` option is not `true`.\\n         * @default 100\\n         */\\n        retryDelay?: number | undefined;\\n    }\\n    /**\\n     * Asynchronously removes files and directories (modeled on the standard POSIX `rm`utility). No arguments other than a possible exception are given to the\\n     * completion callback.\\n     * @since v14.14.0\\n     */\\n    export function rm(path: PathLike, callback: NoParamCallback): void;\\n    export function rm(path: PathLike, options: RmOptions, callback: NoParamCallback): void;\\n    export namespace rm {\\n        /**\\n         * Asynchronously removes files and directories (modeled on the standard POSIX `rm` utility).\\n         */\\n        function __promisify__(path: PathLike, options?: RmOptions): Promise<void>;\\n    }\\n    /**\\n     * Synchronously removes files and directories (modeled on the standard POSIX `rm`utility). Returns `undefined`.\\n     * @since v14.14.0\\n     */\\n    export function rmSync(path: PathLike, options?: RmOptions): void;\\n    export interface MakeDirectoryOptions {\\n        /**\\n         * Indicates whether parent folders should be created.\\n         * If a folder was created, the path to the first created folder will be returned.\\n         * @default false\\n         */\\n        recursive?: boolean | undefined;\\n        /**\\n         * A file mode. If a string is passed, it is parsed as an octal integer. If not specified\\n         * @default 0o777\\n         */\\n        mode?: Mode | undefined;\\n    }\\n    /**\\n     * Asynchronously creates a directory.\\n     *\\n     * The callback is given a possible exception and, if `recursive` is `true`, the\\n     * first directory path created, `(err[, path])`.`path` can still be `undefined` when `recursive` is `true`, if no directory was\\n     * created.\\n     *\\n     * The optional `options` argument can be an integer specifying `mode` (permission\\n     * and sticky bits), or an object with a `mode` property and a `recursive`property indicating whether parent directories should be created. Calling`fs.mkdir()` when `path` is a directory that\\n     * exists results in an error only\\n     * when `recursive` is false.\\n     *\\n     * ```js\\n     * import { mkdir } from 'fs';\\n     *\\n     * // Creates /tmp/a/apple, regardless of whether `/tmp` and /tmp/a exist.\\n     * mkdir('/tmp/a/apple', { recursive: true }, (err) => {\\n     *   if (err) throw err;\\n     * });\\n     * ```\\n     *\\n     * On Windows, using `fs.mkdir()` on the root directory even with recursion will\\n     * result in an error:\\n     *\\n     * ```js\\n     * import { mkdir } from 'fs';\\n     *\\n     * mkdir('/', { recursive: true }, (err) => {\\n     *   // => [Error: EPERM: operation not permitted, mkdir 'C:\\\\']\\n     * });\\n     * ```\\n     *\\n     * See the POSIX [`mkdir(2)`](http://man7.org/linux/man-pages/man2/mkdir.2.html) documentation for more details.\\n     * @since v0.1.8\\n     */\\n    export function mkdir(\\n        path: PathLike,\\n        options: MakeDirectoryOptions & {\\n            recursive: true;\\n        },\\n        callback: (err: NodeJS.ErrnoException | null, path?: string) => void\\n    ): void;\\n    /**\\n     * Asynchronous mkdir(2) - create a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\\n     * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\\n     */\\n    export function mkdir(\\n        path: PathLike,\\n        options:\\n            | Mode\\n            | (MakeDirectoryOptions & {\\n                  recursive?: false | undefined;\\n              })\\n            | null\\n            | undefined,\\n        callback: NoParamCallback\\n    ): void;\\n    /**\\n     * Asynchronous mkdir(2) - create a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\\n     * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\\n     */\\n    export function mkdir(path: PathLike, options: Mode | MakeDirectoryOptions | null | undefined, callback: (err: NodeJS.ErrnoException | null, path?: string) => void): void;\\n    /**\\n     * Asynchronous mkdir(2) - create a directory with a mode of `0o777`.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     */\\n    export function mkdir(path: PathLike, callback: NoParamCallback): void;\\n    export namespace mkdir {\\n        /**\\n         * Asynchronous mkdir(2) - create a directory.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\\n         * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\\n         */\\n        function __promisify__(\\n            path: PathLike,\\n            options: MakeDirectoryOptions & {\\n                recursive: true;\\n            }\\n        ): Promise<string | undefined>;\\n        /**\\n         * Asynchronous mkdir(2) - create a directory.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\\n         * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\\n         */\\n        function __promisify__(\\n            path: PathLike,\\n            options?:\\n                | Mode\\n                | (MakeDirectoryOptions & {\\n                      recursive?: false | undefined;\\n                  })\\n                | null\\n        ): Promise<void>;\\n        /**\\n         * Asynchronous mkdir(2) - create a directory.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\\n         * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\\n         */\\n        function __promisify__(path: PathLike, options?: Mode | MakeDirectoryOptions | null): Promise<string | undefined>;\\n    }\\n    /**\\n     * Synchronously creates a directory. Returns `undefined`, or if `recursive` is`true`, the first directory path created.\\n     * This is the synchronous version of {@link mkdir}.\\n     *\\n     * See the POSIX [`mkdir(2)`](http://man7.org/linux/man-pages/man2/mkdir.2.html) documentation for more details.\\n     * @since v0.1.21\\n     */\\n    export function mkdirSync(\\n        path: PathLike,\\n        options: MakeDirectoryOptions & {\\n            recursive: true;\\n        }\\n    ): string | undefined;\\n    /**\\n     * Synchronous mkdir(2) - create a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\\n     * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\\n     */\\n    export function mkdirSync(\\n        path: PathLike,\\n        options?:\\n            | Mode\\n            | (MakeDirectoryOptions & {\\n                  recursive?: false | undefined;\\n              })\\n            | null\\n    ): void;\\n    /**\\n     * Synchronous mkdir(2) - create a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\\n     * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\\n     */\\n    export function mkdirSync(path: PathLike, options?: Mode | MakeDirectoryOptions | null): string | undefined;\\n    /**\\n     * Creates a unique temporary directory.\\n     *\\n     * Generates six random characters to be appended behind a required`prefix` to create a unique temporary directory. Due to platform\\n     * inconsistencies, avoid trailing `X` characters in `prefix`. Some platforms,\\n     * notably the BSDs, can return more than six random characters, and replace\\n     * trailing `X` characters in `prefix` with random characters.\\n     *\\n     * The created directory path is passed as a string to the callback's second\\n     * parameter.\\n     *\\n     * The optional `options` argument can be a string specifying an encoding, or an\\n     * object with an `encoding` property specifying the character encoding to use.\\n     *\\n     * ```js\\n     * import { mkdtemp } from 'fs';\\n     *\\n     * mkdtemp(path.join(os.tmpdir(), 'foo-'), (err, directory) => {\\n     *   if (err) throw err;\\n     *   console.log(directory);\\n     *   // Prints: /tmp/foo-itXde2 or C:\\\\Users\\\\...\\\\AppData\\\\Local\\\\Temp\\\\foo-itXde2\\n     * });\\n     * ```\\n     *\\n     * The `fs.mkdtemp()` method will append the six randomly selected characters\\n     * directly to the `prefix` string. For instance, given a directory `/tmp`, if the\\n     * intention is to create a temporary directory _within_`/tmp`, the `prefix`must end with a trailing platform-specific path separator\\n     * (`require('path').sep`).\\n     *\\n     * ```js\\n     * import { tmpdir } from 'os';\\n     * import { mkdtemp } from 'fs';\\n     *\\n     * // The parent directory for the new temporary directory\\n     * const tmpDir = tmpdir();\\n     *\\n     * // This method is *INCORRECT*:\\n     * mkdtemp(tmpDir, (err, directory) => {\\n     *   if (err) throw err;\\n     *   console.log(directory);\\n     *   // Will print something similar to `/tmpabc123`.\\n     *   // A new temporary directory is created at the file system root\\n     *   // rather than *within* the /tmp directory.\\n     * });\\n     *\\n     * // This method is *CORRECT*:\\n     * import { sep } from 'path';\\n     * mkdtemp(`${tmpDir}${sep}`, (err, directory) => {\\n     *   if (err) throw err;\\n     *   console.log(directory);\\n     *   // Will print something similar to `/tmp/abc123`.\\n     *   // A new temporary directory is created within\\n     *   // the /tmp directory.\\n     * });\\n     * ```\\n     * @since v5.10.0\\n     */\\n    export function mkdtemp(prefix: string, options: EncodingOption, callback: (err: NodeJS.ErrnoException | null, folder: string) => void): void;\\n    /**\\n     * Asynchronously creates a unique temporary directory.\\n     * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function mkdtemp(\\n        prefix: string,\\n        options:\\n            | 'buffer'\\n            | {\\n                  encoding: 'buffer';\\n              },\\n        callback: (err: NodeJS.ErrnoException | null, folder: Buffer) => void\\n    ): void;\\n    /**\\n     * Asynchronously creates a unique temporary directory.\\n     * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function mkdtemp(prefix: string, options: EncodingOption, callback: (err: NodeJS.ErrnoException | null, folder: string | Buffer) => void): void;\\n    /**\\n     * Asynchronously creates a unique temporary directory.\\n     * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\\n     */\\n    export function mkdtemp(prefix: string, callback: (err: NodeJS.ErrnoException | null, folder: string) => void): void;\\n    export namespace mkdtemp {\\n        /**\\n         * Asynchronously creates a unique temporary directory.\\n         * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n         */\\n        function __promisify__(prefix: string, options?: EncodingOption): Promise<string>;\\n        /**\\n         * Asynchronously creates a unique temporary directory.\\n         * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n         */\\n        function __promisify__(prefix: string, options: BufferEncodingOption): Promise<Buffer>;\\n        /**\\n         * Asynchronously creates a unique temporary directory.\\n         * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n         */\\n        function __promisify__(prefix: string, options?: EncodingOption): Promise<string | Buffer>;\\n    }\\n    /**\\n     * Returns the created directory path.\\n     *\\n     * For detailed information, see the documentation of the asynchronous version of\\n     * this API: {@link mkdtemp}.\\n     *\\n     * The optional `options` argument can be a string specifying an encoding, or an\\n     * object with an `encoding` property specifying the character encoding to use.\\n     * @since v5.10.0\\n     */\\n    export function mkdtempSync(prefix: string, options?: EncodingOption): string;\\n    /**\\n     * Synchronously creates a unique temporary directory.\\n     * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function mkdtempSync(prefix: string, options: BufferEncodingOption): Buffer;\\n    /**\\n     * Synchronously creates a unique temporary directory.\\n     * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function mkdtempSync(prefix: string, options?: EncodingOption): string | Buffer;\\n    /**\\n     * Reads the contents of a directory. The callback gets two arguments `(err, files)`where `files` is an array of the names of the files in the directory excluding`'.'` and `'..'`.\\n     *\\n     * See the POSIX [`readdir(3)`](http://man7.org/linux/man-pages/man3/readdir.3.html) documentation for more details.\\n     *\\n     * The optional `options` argument can be a string specifying an encoding, or an\\n     * object with an `encoding` property specifying the character encoding to use for\\n     * the filenames passed to the callback. If the `encoding` is set to `'buffer'`,\\n     * the filenames returned will be passed as `Buffer` objects.\\n     *\\n     * If `options.withFileTypes` is set to `true`, the `files` array will contain `fs.Dirent` objects.\\n     * @since v0.1.8\\n     */\\n    export function readdir(\\n        path: PathLike,\\n        options:\\n            | {\\n                  encoding: BufferEncoding | null;\\n                  withFileTypes?: false | undefined;\\n              }\\n            | BufferEncoding\\n            | undefined\\n            | null,\\n        callback: (err: NodeJS.ErrnoException | null, files: string[]) => void\\n    ): void;\\n    /**\\n     * Asynchronous readdir(3) - read a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function readdir(\\n        path: PathLike,\\n        options:\\n            | {\\n                  encoding: 'buffer';\\n                  withFileTypes?: false | undefined;\\n              }\\n            | 'buffer',\\n        callback: (err: NodeJS.ErrnoException | null, files: Buffer[]) => void\\n    ): void;\\n    /**\\n     * Asynchronous readdir(3) - read a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function readdir(\\n        path: PathLike,\\n        options:\\n            | (ObjectEncodingOptions & {\\n                  withFileTypes?: false | undefined;\\n              })\\n            | BufferEncoding\\n            | undefined\\n            | null,\\n        callback: (err: NodeJS.ErrnoException | null, files: string[] | Buffer[]) => void\\n    ): void;\\n    /**\\n     * Asynchronous readdir(3) - read a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     */\\n    export function readdir(path: PathLike, callback: (err: NodeJS.ErrnoException | null, files: string[]) => void): void;\\n    /**\\n     * Asynchronous readdir(3) - read a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options If called with `withFileTypes: true` the result data will be an array of Dirent.\\n     */\\n    export function readdir(\\n        path: PathLike,\\n        options: ObjectEncodingOptions & {\\n            withFileTypes: true;\\n        },\\n        callback: (err: NodeJS.ErrnoException | null, files: Dirent[]) => void\\n    ): void;\\n    export namespace readdir {\\n        /**\\n         * Asynchronous readdir(3) - read a directory.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n         */\\n        function __promisify__(\\n            path: PathLike,\\n            options?:\\n                | {\\n                      encoding: BufferEncoding | null;\\n                      withFileTypes?: false | undefined;\\n                  }\\n                | BufferEncoding\\n                | null\\n        ): Promise<string[]>;\\n        /**\\n         * Asynchronous readdir(3) - read a directory.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n         */\\n        function __promisify__(\\n            path: PathLike,\\n            options:\\n                | 'buffer'\\n                | {\\n                      encoding: 'buffer';\\n                      withFileTypes?: false | undefined;\\n                  }\\n        ): Promise<Buffer[]>;\\n        /**\\n         * Asynchronous readdir(3) - read a directory.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n         */\\n        function __promisify__(\\n            path: PathLike,\\n            options?:\\n                | (ObjectEncodingOptions & {\\n                      withFileTypes?: false | undefined;\\n                  })\\n                | BufferEncoding\\n                | null\\n        ): Promise<string[] | Buffer[]>;\\n        /**\\n         * Asynchronous readdir(3) - read a directory.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param options If called with `withFileTypes: true` the result data will be an array of Dirent\\n         */\\n        function __promisify__(\\n            path: PathLike,\\n            options: ObjectEncodingOptions & {\\n                withFileTypes: true;\\n            }\\n        ): Promise<Dirent[]>;\\n    }\\n    /**\\n     * Reads the contents of the directory.\\n     *\\n     * See the POSIX [`readdir(3)`](http://man7.org/linux/man-pages/man3/readdir.3.html) documentation for more details.\\n     *\\n     * The optional `options` argument can be a string specifying an encoding, or an\\n     * object with an `encoding` property specifying the character encoding to use for\\n     * the filenames returned. If the `encoding` is set to `'buffer'`,\\n     * the filenames returned will be passed as `Buffer` objects.\\n     *\\n     * If `options.withFileTypes` is set to `true`, the result will contain `fs.Dirent` objects.\\n     * @since v0.1.21\\n     */\\n    export function readdirSync(\\n        path: PathLike,\\n        options?:\\n            | {\\n                  encoding: BufferEncoding | null;\\n                  withFileTypes?: false | undefined;\\n              }\\n            | BufferEncoding\\n            | null\\n    ): string[];\\n    /**\\n     * Synchronous readdir(3) - read a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function readdirSync(\\n        path: PathLike,\\n        options:\\n            | {\\n                  encoding: 'buffer';\\n                  withFileTypes?: false | undefined;\\n              }\\n            | 'buffer'\\n    ): Buffer[];\\n    /**\\n     * Synchronous readdir(3) - read a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    export function readdirSync(\\n        path: PathLike,\\n        options?:\\n            | (ObjectEncodingOptions & {\\n                  withFileTypes?: false | undefined;\\n              })\\n            | BufferEncoding\\n            | null\\n    ): string[] | Buffer[];\\n    /**\\n     * Synchronous readdir(3) - read a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options If called with `withFileTypes: true` the result data will be an array of Dirent.\\n     */\\n    export function readdirSync(\\n        path: PathLike,\\n        options: ObjectEncodingOptions & {\\n            withFileTypes: true;\\n        }\\n    ): Dirent[];\\n    /**\\n     * Closes the file descriptor. No arguments other than a possible exception are\\n     * given to the completion callback.\\n     *\\n     * Calling `fs.close()` on any file descriptor (`fd`) that is currently in use\\n     * through any other `fs` operation may lead to undefined behavior.\\n     *\\n     * See the POSIX [`close(2)`](http://man7.org/linux/man-pages/man2/close.2.html) documentation for more detail.\\n     * @since v0.0.2\\n     */\\n    export function close(fd: number, callback?: NoParamCallback): void;\\n    export namespace close {\\n        /**\\n         * Asynchronous close(2) - close a file descriptor.\\n         * @param fd A file descriptor.\\n         */\\n        function __promisify__(fd: number): Promise<void>;\\n    }\\n    /**\\n     * Closes the file descriptor. Returns `undefined`.\\n     *\\n     * Calling `fs.closeSync()` on any file descriptor (`fd`) that is currently in use\\n     * through any other `fs` operation may lead to undefined behavior.\\n     *\\n     * See the POSIX [`close(2)`](http://man7.org/linux/man-pages/man2/close.2.html) documentation for more detail.\\n     * @since v0.1.21\\n     */\\n    export function closeSync(fd: number): void;\\n    /**\\n     * Asynchronous file open. See the POSIX [`open(2)`](http://man7.org/linux/man-pages/man2/open.2.html) documentation for more details.\\n     *\\n     * `mode` sets the file mode (permission and sticky bits), but only if the file was\\n     * created. On Windows, only the write permission can be manipulated; see {@link chmod}.\\n     *\\n     * The callback gets two arguments `(err, fd)`.\\n     *\\n     * Some characters (`< > : \\\" / \\\\ | ? *`) are reserved under Windows as documented\\n     * by [Naming Files, Paths, and Namespaces](https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file). Under NTFS, if the filename contains\\n     * a colon, Node.js will open a file system stream, as described by [this MSDN page](https://docs.microsoft.com/en-us/windows/desktop/FileIO/using-streams).\\n     *\\n     * Functions based on `fs.open()` exhibit this behavior as well:`fs.writeFile()`, `fs.readFile()`, etc.\\n     * @since v0.0.2\\n     * @param [flags='r'] See `support of file system `flags``.\\n     * @param [mode=0o666]\\n     */\\n    export function open(path: PathLike, flags: OpenMode | undefined, mode: Mode | undefined | null, callback: (err: NodeJS.ErrnoException | null, fd: number) => void): void;\\n    /**\\n     * Asynchronous open(2) - open and possibly create a file. If the file is created, its mode will be `0o666`.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param [flags='r'] See `support of file system `flags``.\\n     */\\n    export function open(path: PathLike, flags: OpenMode | undefined, callback: (err: NodeJS.ErrnoException | null, fd: number) => void): void;\\n    /**\\n     * Asynchronous open(2) - open and possibly create a file. If the file is created, its mode will be `0o666`.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     */\\n    export function open(path: PathLike, callback: (err: NodeJS.ErrnoException | null, fd: number) => void): void;\\n\\n    export namespace open {\\n        /**\\n         * Asynchronous open(2) - open and possibly create a file.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param mode A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.\\n         */\\n        function __promisify__(path: PathLike, flags: OpenMode, mode?: Mode | null): Promise<number>;\\n    }\\n    /**\\n     * Returns an integer representing the file descriptor.\\n     *\\n     * For detailed information, see the documentation of the asynchronous version of\\n     * this API: {@link open}.\\n     * @since v0.1.21\\n     * @param [flags='r']\\n     * @param [mode=0o666]\\n     */\\n    export function openSync(path: PathLike, flags: OpenMode, mode?: Mode | null): number;\\n    /**\\n     * Change the file system timestamps of the object referenced by `path`.\\n     *\\n     * The `atime` and `mtime` arguments follow these rules:\\n     *\\n     * * Values can be either numbers representing Unix epoch time in seconds,`Date`s, or a numeric string like `'123456789.0'`.\\n     * * If the value can not be converted to a number, or is `NaN`, `Infinity` or`-Infinity`, an `Error` will be thrown.\\n     * @since v0.4.2\\n     */\\n    export function utimes(path: PathLike, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback): void;\\n    export namespace utimes {\\n        /**\\n         * Asynchronously change file timestamps of the file referenced by the supplied path.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * @param atime The last access time. If a string is provided, it will be coerced to number.\\n         * @param mtime The last modified time. If a string is provided, it will be coerced to number.\\n         */\\n        function __promisify__(path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void>;\\n    }\\n    /**\\n     * Returns `undefined`.\\n     *\\n     * For detailed information, see the documentation of the asynchronous version of\\n     * this API: {@link utimes}.\\n     * @since v0.4.2\\n     */\\n    export function utimesSync(path: PathLike, atime: TimeLike, mtime: TimeLike): void;\\n    /**\\n     * Change the file system timestamps of the object referenced by the supplied file\\n     * descriptor. See {@link utimes}.\\n     * @since v0.4.2\\n     */\\n    export function futimes(fd: number, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback): void;\\n    export namespace futimes {\\n        /**\\n         * Asynchronously change file timestamps of the file referenced by the supplied file descriptor.\\n         * @param fd A file descriptor.\\n         * @param atime The last access time. If a string is provided, it will be coerced to number.\\n         * @param mtime The last modified time. If a string is provided, it will be coerced to number.\\n         */\\n        function __promisify__(fd: number, atime: TimeLike, mtime: TimeLike): Promise<void>;\\n    }\\n    /**\\n     * Synchronous version of {@link futimes}. Returns `undefined`.\\n     * @since v0.4.2\\n     */\\n    export function futimesSync(fd: number, atime: TimeLike, mtime: TimeLike): void;\\n    /**\\n     * Request that all data for the open file descriptor is flushed to the storage\\n     * device. The specific implementation is operating system and device specific.\\n     * Refer to the POSIX [`fsync(2)`](http://man7.org/linux/man-pages/man2/fsync.2.html) documentation for more detail. No arguments other\\n     * than a possible exception are given to the completion callback.\\n     * @since v0.1.96\\n     */\\n    export function fsync(fd: number, callback: NoParamCallback): void;\\n    export namespace fsync {\\n        /**\\n         * Asynchronous fsync(2) - synchronize a file's in-core state with the underlying storage device.\\n         * @param fd A file descriptor.\\n         */\\n        function __promisify__(fd: number): Promise<void>;\\n    }\\n    /**\\n     * Request that all data for the open file descriptor is flushed to the storage\\n     * device. The specific implementation is operating system and device specific.\\n     * Refer to the POSIX [`fsync(2)`](http://man7.org/linux/man-pages/man2/fsync.2.html) documentation for more detail. Returns `undefined`.\\n     * @since v0.1.96\\n     */\\n    export function fsyncSync(fd: number): void;\\n    /**\\n     * Write `buffer` to the file specified by `fd`.\\n     *\\n     * `offset` determines the part of the buffer to be written, and `length` is\\n     * an integer specifying the number of bytes to write.\\n     *\\n     * `position` refers to the offset from the beginning of the file where this data\\n     * should be written. If `typeof position !== 'number'`, the data will be written\\n     * at the current position. See [`pwrite(2)`](http://man7.org/linux/man-pages/man2/pwrite.2.html).\\n     *\\n     * The callback will be given three arguments `(err, bytesWritten, buffer)` where`bytesWritten` specifies how many _bytes_ were written from `buffer`.\\n     *\\n     * If this method is invoked as its `util.promisify()` ed version, it returns\\n     * a promise for an `Object` with `bytesWritten` and `buffer` properties.\\n     *\\n     * It is unsafe to use `fs.write()` multiple times on the same file without waiting\\n     * for the callback. For this scenario, {@link createWriteStream} is\\n     * recommended.\\n     *\\n     * On Linux, positional writes don't work when the file is opened in append mode.\\n     * The kernel ignores the position argument and always appends the data to\\n     * the end of the file.\\n     * @since v0.0.2\\n     */\\n    export function write<TBuffer extends NodeJS.ArrayBufferView>(\\n        fd: number,\\n        buffer: TBuffer,\\n        offset: number | undefined | null,\\n        length: number | undefined | null,\\n        position: number | undefined | null,\\n        callback: (err: NodeJS.ErrnoException | null, written: number, buffer: TBuffer) => void\\n    ): void;\\n    /**\\n     * Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.\\n     * @param fd A file descriptor.\\n     * @param offset The part of the buffer to be written. If not supplied, defaults to `0`.\\n     * @param length The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.\\n     */\\n    export function write<TBuffer extends NodeJS.ArrayBufferView>(\\n        fd: number,\\n        buffer: TBuffer,\\n        offset: number | undefined | null,\\n        length: number | undefined | null,\\n        callback: (err: NodeJS.ErrnoException | null, written: number, buffer: TBuffer) => void\\n    ): void;\\n    /**\\n     * Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.\\n     * @param fd A file descriptor.\\n     * @param offset The part of the buffer to be written. If not supplied, defaults to `0`.\\n     */\\n    export function write<TBuffer extends NodeJS.ArrayBufferView>(\\n        fd: number,\\n        buffer: TBuffer,\\n        offset: number | undefined | null,\\n        callback: (err: NodeJS.ErrnoException | null, written: number, buffer: TBuffer) => void\\n    ): void;\\n    /**\\n     * Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.\\n     * @param fd A file descriptor.\\n     */\\n    export function write<TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, callback: (err: NodeJS.ErrnoException | null, written: number, buffer: TBuffer) => void): void;\\n    /**\\n     * Asynchronously writes `string` to the file referenced by the supplied file descriptor.\\n     * @param fd A file descriptor.\\n     * @param string A string to write.\\n     * @param position The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.\\n     * @param encoding The expected string encoding.\\n     */\\n    export function write(\\n        fd: number,\\n        string: string,\\n        position: number | undefined | null,\\n        encoding: BufferEncoding | undefined | null,\\n        callback: (err: NodeJS.ErrnoException | null, written: number, str: string) => void\\n    ): void;\\n    /**\\n     * Asynchronously writes `string` to the file referenced by the supplied file descriptor.\\n     * @param fd A file descriptor.\\n     * @param string A string to write.\\n     * @param position The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.\\n     */\\n    export function write(fd: number, string: string, position: number | undefined | null, callback: (err: NodeJS.ErrnoException | null, written: number, str: string) => void): void;\\n    /**\\n     * Asynchronously writes `string` to the file referenced by the supplied file descriptor.\\n     * @param fd A file descriptor.\\n     * @param string A string to write.\\n     */\\n    export function write(fd: number, string: string, callback: (err: NodeJS.ErrnoException | null, written: number, str: string) => void): void;\\n    export namespace write {\\n        /**\\n         * Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.\\n         * @param fd A file descriptor.\\n         * @param offset The part of the buffer to be written. If not supplied, defaults to `0`.\\n         * @param length The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.\\n         * @param position The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.\\n         */\\n        function __promisify__<TBuffer extends NodeJS.ArrayBufferView>(\\n            fd: number,\\n            buffer?: TBuffer,\\n            offset?: number,\\n            length?: number,\\n            position?: number | null\\n        ): Promise<{\\n            bytesWritten: number;\\n            buffer: TBuffer;\\n        }>;\\n        /**\\n         * Asynchronously writes `string` to the file referenced by the supplied file descriptor.\\n         * @param fd A file descriptor.\\n         * @param string A string to write.\\n         * @param position The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.\\n         * @param encoding The expected string encoding.\\n         */\\n        function __promisify__(\\n            fd: number,\\n            string: string,\\n            position?: number | null,\\n            encoding?: BufferEncoding | null\\n        ): Promise<{\\n            bytesWritten: number;\\n            buffer: string;\\n        }>;\\n    }\\n    /**\\n     * For detailed information, see the documentation of the asynchronous version of\\n     * this API: {@link write}.\\n     * @since v0.1.21\\n     * @return The number of bytes written.\\n     */\\n    export function writeSync(fd: number, buffer: NodeJS.ArrayBufferView, offset?: number | null, length?: number | null, position?: number | null): number;\\n    /**\\n     * Synchronously writes `string` to the file referenced by the supplied file descriptor, returning the number of bytes written.\\n     * @param fd A file descriptor.\\n     * @param string A string to write.\\n     * @param position The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.\\n     * @param encoding The expected string encoding.\\n     */\\n    export function writeSync(fd: number, string: string, position?: number | null, encoding?: BufferEncoding | null): number;\\n    export type ReadPosition = number | bigint;\\n    export interface ReadSyncOptions {\\n        /**\\n         * @default 0\\n         */\\n        offset?: number | undefined;\\n        /**\\n         * @default `length of buffer`\\n         */\\n        length?: number | undefined;\\n        /**\\n         * @default null\\n         */\\n        position?: ReadPosition | null | undefined;\\n    }\\n    export interface ReadAsyncOptions<TBuffer extends NodeJS.ArrayBufferView> extends ReadSyncOptions {\\n        buffer?: TBuffer;\\n    }\\n    /**\\n     * Read data from the file specified by `fd`.\\n     *\\n     * The callback is given the three arguments, `(err, bytesRead, buffer)`.\\n     *\\n     * If the file is not modified concurrently, the end-of-file is reached when the\\n     * number of bytes read is zero.\\n     *\\n     * If this method is invoked as its `util.promisify()` ed version, it returns\\n     * a promise for an `Object` with `bytesRead` and `buffer` properties.\\n     * @since v0.0.2\\n     * @param buffer The buffer that the data will be written to.\\n     * @param offset The position in `buffer` to write the data to.\\n     * @param length The number of bytes to read.\\n     * @param position Specifies where to begin reading from in the file. If `position` is `null` or `-1 `, data will be read from the current file position, and the file position will be updated. If\\n     * `position` is an integer, the file position will be unchanged.\\n     */\\n    export function read<TBuffer extends NodeJS.ArrayBufferView>(\\n        fd: number,\\n        buffer: TBuffer,\\n        offset: number,\\n        length: number,\\n        position: ReadPosition | null,\\n        callback: (err: NodeJS.ErrnoException | null, bytesRead: number, buffer: TBuffer) => void\\n    ): void;\\n    /**\\n     * Similar to the above `fs.read` function, this version takes an optional `options` object.\\n     * If not otherwise specified in an `options` object,\\n     * `buffer` defaults to `Buffer.alloc(16384)`,\\n     * `offset` defaults to `0`,\\n     * `length` defaults to `buffer.byteLength`, `- offset` as of Node 17.6.0\\n     * `position` defaults to `null`\\n     * @since v12.17.0, 13.11.0\\n     */\\n    export function read<TBuffer extends NodeJS.ArrayBufferView>(\\n        fd: number,\\n        options: ReadAsyncOptions<TBuffer>,\\n        callback: (err: NodeJS.ErrnoException | null, bytesRead: number, buffer: TBuffer) => void\\n    ): void;\\n    export function read(fd: number, callback: (err: NodeJS.ErrnoException | null, bytesRead: number, buffer: NodeJS.ArrayBufferView) => void): void;\\n    export namespace read {\\n        /**\\n         * @param fd A file descriptor.\\n         * @param buffer The buffer that the data will be written to.\\n         * @param offset The offset in the buffer at which to start writing.\\n         * @param length The number of bytes to read.\\n         * @param position The offset from the beginning of the file from which data should be read. If `null`, data will be read from the current position.\\n         */\\n        function __promisify__<TBuffer extends NodeJS.ArrayBufferView>(\\n            fd: number,\\n            buffer: TBuffer,\\n            offset: number,\\n            length: number,\\n            position: number | null\\n        ): Promise<{\\n            bytesRead: number;\\n            buffer: TBuffer;\\n        }>;\\n        function __promisify__<TBuffer extends NodeJS.ArrayBufferView>(\\n            fd: number,\\n            options: ReadAsyncOptions<TBuffer>\\n        ): Promise<{\\n            bytesRead: number;\\n            buffer: TBuffer;\\n        }>;\\n        function __promisify__(fd: number): Promise<{\\n            bytesRead: number;\\n            buffer: NodeJS.ArrayBufferView;\\n        }>;\\n    }\\n    /**\\n     * Returns the number of `bytesRead`.\\n     *\\n     * For detailed information, see the documentation of the asynchronous version of\\n     * this API: {@link read}.\\n     * @since v0.1.21\\n     */\\n    export function readSync(fd: number, buffer: NodeJS.ArrayBufferView, offset: number, length: number, position: ReadPosition | null): number;\\n    /**\\n     * Similar to the above `fs.readSync` function, this version takes an optional `options` object.\\n     * If no `options` object is specified, it will default with the above values.\\n     */\\n    export function readSync(fd: number, buffer: NodeJS.ArrayBufferView, opts?: ReadSyncOptions): number;\\n    /**\\n     * Asynchronously reads the entire contents of a file.\\n     *\\n     * ```js\\n     * import { readFile } from 'fs';\\n     *\\n     * readFile('/etc/passwd', (err, data) => {\\n     *   if (err) throw err;\\n     *   console.log(data);\\n     * });\\n     * ```\\n     *\\n     * The callback is passed two arguments `(err, data)`, where `data` is the\\n     * contents of the file.\\n     *\\n     * If no encoding is specified, then the raw buffer is returned.\\n     *\\n     * If `options` is a string, then it specifies the encoding:\\n     *\\n     * ```js\\n     * import { readFile } from 'fs';\\n     *\\n     * readFile('/etc/passwd', 'utf8', callback);\\n     * ```\\n     *\\n     * When the path is a directory, the behavior of `fs.readFile()` and {@link readFileSync} is platform-specific. On macOS, Linux, and Windows, an\\n     * error will be returned. On FreeBSD, a representation of the directory's contents\\n     * will be returned.\\n     *\\n     * ```js\\n     * import { readFile } from 'fs';\\n     *\\n     * // macOS, Linux, and Windows\\n     * readFile('<directory>', (err, data) => {\\n     *   // => [Error: EISDIR: illegal operation on a directory, read <directory>]\\n     * });\\n     *\\n     * //  FreeBSD\\n     * readFile('<directory>', (err, data) => {\\n     *   // => null, <data>\\n     * });\\n     * ```\\n     *\\n     * It is possible to abort an ongoing request using an `AbortSignal`. If a\\n     * request is aborted the callback is called with an `AbortError`:\\n     *\\n     * ```js\\n     * import { readFile } from 'fs';\\n     *\\n     * const controller = new AbortController();\\n     * const signal = controller.signal;\\n     * readFile(fileInfo[0].name, { signal }, (err, buf) => {\\n     *   // ...\\n     * });\\n     * // When you want to abort the request\\n     * controller.abort();\\n     * ```\\n     *\\n     * The `fs.readFile()` function buffers the entire file. To minimize memory costs,\\n     * when possible prefer streaming via `fs.createReadStream()`.\\n     *\\n     * Aborting an ongoing request does not abort individual operating\\n     * system requests but rather the internal buffering `fs.readFile` performs.\\n     * @since v0.1.29\\n     * @param path filename or file descriptor\\n     */\\n    export function readFile(\\n        path: PathOrFileDescriptor,\\n        options:\\n            | ({\\n                  encoding?: null | undefined;\\n                  flag?: string | undefined;\\n              } & Abortable)\\n            | undefined\\n            | null,\\n        callback: (err: NodeJS.ErrnoException | null, data: Buffer) => void\\n    ): void;\\n    /**\\n     * Asynchronously reads the entire contents of a file.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\n     * @param options Either the encoding for the result, or an object that contains the encoding and an optional flag.\\n     * If a flag is not provided, it defaults to `'r'`.\\n     */\\n    export function readFile(\\n        path: PathOrFileDescriptor,\\n        options:\\n            | ({\\n                  encoding: BufferEncoding;\\n                  flag?: string | undefined;\\n              } & Abortable)\\n            | BufferEncoding,\\n        callback: (err: NodeJS.ErrnoException | null, data: string) => void\\n    ): void;\\n    /**\\n     * Asynchronously reads the entire contents of a file.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\n     * @param options Either the encoding for the result, or an object that contains the encoding and an optional flag.\\n     * If a flag is not provided, it defaults to `'r'`.\\n     */\\n    export function readFile(\\n        path: PathOrFileDescriptor,\\n        options:\\n            | (ObjectEncodingOptions & {\\n                  flag?: string | undefined;\\n              } & Abortable)\\n            | BufferEncoding\\n            | undefined\\n            | null,\\n        callback: (err: NodeJS.ErrnoException | null, data: string | Buffer) => void\\n    ): void;\\n    /**\\n     * Asynchronously reads the entire contents of a file.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\n     */\\n    export function readFile(path: PathOrFileDescriptor, callback: (err: NodeJS.ErrnoException | null, data: Buffer) => void): void;\\n    export namespace readFile {\\n        /**\\n         * Asynchronously reads the entire contents of a file.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\n         * @param options An object that may contain an optional flag.\\n         * If a flag is not provided, it defaults to `'r'`.\\n         */\\n        function __promisify__(\\n            path: PathOrFileDescriptor,\\n            options?: {\\n                encoding?: null | undefined;\\n                flag?: string | undefined;\\n            } | null\\n        ): Promise<Buffer>;\\n        /**\\n         * Asynchronously reads the entire contents of a file.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * URL support is _experimental_.\\n         * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\n         * @param options Either the encoding for the result, or an object that contains the encoding and an optional flag.\\n         * If a flag is not provided, it defaults to `'r'`.\\n         */\\n        function __promisify__(\\n            path: PathOrFileDescriptor,\\n            options:\\n                | {\\n                      encoding: BufferEncoding;\\n                      flag?: string | undefined;\\n                  }\\n                | BufferEncoding\\n        ): Promise<string>;\\n        /**\\n         * Asynchronously reads the entire contents of a file.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * URL support is _experimental_.\\n         * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\n         * @param options Either the encoding for the result, or an object that contains the encoding and an optional flag.\\n         * If a flag is not provided, it defaults to `'r'`.\\n         */\\n        function __promisify__(\\n            path: PathOrFileDescriptor,\\n            options?:\\n                | (ObjectEncodingOptions & {\\n                      flag?: string | undefined;\\n                  })\\n                | BufferEncoding\\n                | null\\n        ): Promise<string | Buffer>;\\n    }\\n    /**\\n     * Returns the contents of the `path`.\\n     *\\n     * For detailed information, see the documentation of the asynchronous version of\\n     * this API: {@link readFile}.\\n     *\\n     * If the `encoding` option is specified then this function returns a\\n     * string. Otherwise it returns a buffer.\\n     *\\n     * Similar to {@link readFile}, when the path is a directory, the behavior of`fs.readFileSync()` is platform-specific.\\n     *\\n     * ```js\\n     * import { readFileSync } from 'fs';\\n     *\\n     * // macOS, Linux, and Windows\\n     * readFileSync('<directory>');\\n     * // => [Error: EISDIR: illegal operation on a directory, read <directory>]\\n     *\\n     * //  FreeBSD\\n     * readFileSync('<directory>'); // => <data>\\n     * ```\\n     * @since v0.1.8\\n     * @param path filename or file descriptor\\n     */\\n    export function readFileSync(\\n        path: PathOrFileDescriptor,\\n        options?: {\\n            encoding?: null | undefined;\\n            flag?: string | undefined;\\n        } | null\\n    ): Buffer;\\n    /**\\n     * Synchronously reads the entire contents of a file.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\n     * @param options Either the encoding for the result, or an object that contains the encoding and an optional flag.\\n     * If a flag is not provided, it defaults to `'r'`.\\n     */\\n    export function readFileSync(\\n        path: PathOrFileDescriptor,\\n        options:\\n            | {\\n                  encoding: BufferEncoding;\\n                  flag?: string | undefined;\\n              }\\n            | BufferEncoding\\n    ): string;\\n    /**\\n     * Synchronously reads the entire contents of a file.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\n     * @param options Either the encoding for the result, or an object that contains the encoding and an optional flag.\\n     * If a flag is not provided, it defaults to `'r'`.\\n     */\\n    export function readFileSync(\\n        path: PathOrFileDescriptor,\\n        options?:\\n            | (ObjectEncodingOptions & {\\n                  flag?: string | undefined;\\n              })\\n            | BufferEncoding\\n            | null\\n    ): string | Buffer;\\n    export type WriteFileOptions =\\n        | (ObjectEncodingOptions &\\n              Abortable & {\\n                  mode?: Mode | undefined;\\n                  flag?: string | undefined;\\n              })\\n        | BufferEncoding\\n        | null;\\n    /**\\n     * When `file` is a filename, asynchronously writes data to the file, replacing the\\n     * file if it already exists. `data` can be a string or a buffer.\\n     *\\n     * When `file` is a file descriptor, the behavior is similar to calling`fs.write()` directly (which is recommended). See the notes below on using\\n     * a file descriptor.\\n     *\\n     * The `encoding` option is ignored if `data` is a buffer.\\n     *\\n     * The `mode` option only affects the newly created file. See {@link open} for more details.\\n     *\\n     * ```js\\n     * import { writeFile } from 'fs';\\n     * import { Buffer } from 'buffer';\\n     *\\n     * const data = new Uint8Array(Buffer.from('Hello Node.js'));\\n     * writeFile('message.txt', data, (err) => {\\n     *   if (err) throw err;\\n     *   console.log('The file has been saved!');\\n     * });\\n     * ```\\n     *\\n     * If `options` is a string, then it specifies the encoding:\\n     *\\n     * ```js\\n     * import { writeFile } from 'fs';\\n     *\\n     * writeFile('message.txt', 'Hello Node.js', 'utf8', callback);\\n     * ```\\n     *\\n     * It is unsafe to use `fs.writeFile()` multiple times on the same file without\\n     * waiting for the callback. For this scenario, {@link createWriteStream} is\\n     * recommended.\\n     *\\n     * Similarly to `fs.readFile` \\\\- `fs.writeFile` is a convenience method that\\n     * performs multiple `write` calls internally to write the buffer passed to it.\\n     * For performance sensitive code consider using {@link createWriteStream}.\\n     *\\n     * It is possible to use an `AbortSignal` to cancel an `fs.writeFile()`.\\n     * Cancelation is \\\"best effort\\\", and some amount of data is likely still\\n     * to be written.\\n     *\\n     * ```js\\n     * import { writeFile } from 'fs';\\n     * import { Buffer } from 'buffer';\\n     *\\n     * const controller = new AbortController();\\n     * const { signal } = controller;\\n     * const data = new Uint8Array(Buffer.from('Hello Node.js'));\\n     * writeFile('message.txt', data, { signal }, (err) => {\\n     *   // When a request is aborted - the callback is called with an AbortError\\n     * });\\n     * // When the request should be aborted\\n     * controller.abort();\\n     * ```\\n     *\\n     * Aborting an ongoing request does not abort individual operating\\n     * system requests but rather the internal buffering `fs.writeFile` performs.\\n     * @since v0.1.29\\n     * @param file filename or file descriptor\\n     */\\n    export function writeFile(file: PathOrFileDescriptor, data: string | NodeJS.ArrayBufferView, options: WriteFileOptions, callback: NoParamCallback): void;\\n    /**\\n     * Asynchronously writes data to a file, replacing the file if it already exists.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\n     * @param data The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.\\n     */\\n    export function writeFile(path: PathOrFileDescriptor, data: string | NodeJS.ArrayBufferView, callback: NoParamCallback): void;\\n    export namespace writeFile {\\n        /**\\n         * Asynchronously writes data to a file, replacing the file if it already exists.\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * URL support is _experimental_.\\n         * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\n         * @param data The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.\\n         * @param options Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.\\n         * If `encoding` is not supplied, the default of `'utf8'` is used.\\n         * If `mode` is not supplied, the default of `0o666` is used.\\n         * If `mode` is a string, it is parsed as an octal integer.\\n         * If `flag` is not supplied, the default of `'w'` is used.\\n         */\\n        function __promisify__(path: PathOrFileDescriptor, data: string | NodeJS.ArrayBufferView, options?: WriteFileOptions): Promise<void>;\\n    }\\n    /**\\n     * Returns `undefined`.\\n     *\\n     * The `mode` option only affects the newly created file. See {@link open} for more details.\\n     *\\n     * For detailed information, see the documentation of the asynchronous version of\\n     * this API: {@link writeFile}.\\n     * @since v0.1.29\\n     * @param file filename or file descriptor\\n     */\\n    export function writeFileSync(file: PathOrFileDescriptor, data: string | NodeJS.ArrayBufferView, options?: WriteFileOptions): void;\\n    /**\\n     * Asynchronously append data to a file, creating the file if it does not yet\\n     * exist. `data` can be a string or a `Buffer`.\\n     *\\n     * The `mode` option only affects the newly created file. See {@link open} for more details.\\n     *\\n     * ```js\\n     * import { appendFile } from 'fs';\\n     *\\n     * appendFile('message.txt', 'data to append', (err) => {\\n     *   if (err) throw err;\\n     *   console.log('The \\\"data to append\\\" was appended to file!');\\n     * });\\n     * ```\\n     *\\n     * If `options` is a string, then it specifies the encoding:\\n     *\\n     * ```js\\n     * import { appendFile } from 'fs';\\n     *\\n     * appendFile('message.txt', 'data to append', 'utf8', callback);\\n     * ```\\n     *\\n     * The `path` may be specified as a numeric file descriptor that has been opened\\n     * for appending (using `fs.open()` or `fs.openSync()`). The file descriptor will\\n     * not be closed automatically.\\n     *\\n     * ```js\\n     * import { open, close, appendFile } from 'fs';\\n     *\\n     * function closeFd(fd) {\\n     *   close(fd, (err) => {\\n     *     if (err) throw err;\\n     *   });\\n     * }\\n     *\\n     * open('message.txt', 'a', (err, fd) => {\\n     *   if (err) throw err;\\n     *\\n     *   try {\\n     *     appendFile(fd, 'data to append', 'utf8', (err) => {\\n     *       closeFd(fd);\\n     *       if (err) throw err;\\n     *     });\\n     *   } catch (err) {\\n     *     closeFd(fd);\\n     *     throw err;\\n     *   }\\n     * });\\n     * ```\\n     * @since v0.6.7\\n     * @param path filename or file descriptor\\n     */\\n    export function appendFile(path: PathOrFileDescriptor, data: string | Uint8Array, options: WriteFileOptions, callback: NoParamCallback): void;\\n    /**\\n     * Asynchronously append data to a file, creating the file if it does not exist.\\n     * @param file A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\n     * @param data The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.\\n     */\\n    export function appendFile(file: PathOrFileDescriptor, data: string | Uint8Array, callback: NoParamCallback): void;\\n    export namespace appendFile {\\n        /**\\n         * Asynchronously append data to a file, creating the file if it does not exist.\\n         * @param file A path to a file. If a URL is provided, it must use the `file:` protocol.\\n         * URL support is _experimental_.\\n         * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\n         * @param data The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.\\n         * @param options Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.\\n         * If `encoding` is not supplied, the default of `'utf8'` is used.\\n         * If `mode` is not supplied, the default of `0o666` is used.\\n         * If `mode` is a string, it is parsed as an octal integer.\\n         * If `flag` is not supplied, the default of `'a'` is used.\\n         */\\n        function __promisify__(file: PathOrFileDescriptor, data: string | Uint8Array, options?: WriteFileOptions): Promise<void>;\\n    }\\n    /**\\n     * Synchronously append data to a file, creating the file if it does not yet\\n     * exist. `data` can be a string or a `Buffer`.\\n     *\\n     * The `mode` option only affects the newly created file. See {@link open} for more details.\\n     *\\n     * ```js\\n     * import { appendFileSync } from 'fs';\\n     *\\n     * try {\\n     *   appendFileSync('message.txt', 'data to append');\\n     *   console.log('The \\\"data to append\\\" was appended to file!');\\n     * } catch (err) {\\n     *   // Handle the error\\n     * }\\n     * ```\\n     *\\n     * If `options` is a string, then it specifies the encoding:\\n     *\\n     * ```js\\n     * import { appendFileSync } from 'fs';\\n     *\\n     * appendFileSync('message.txt', 'data to append', 'utf8');\\n     * ```\\n     *\\n     * The `path` may be specified as a numeric file descriptor that has been opened\\n     * for appending (using `fs.open()` or `fs.openSync()`). The file descriptor will\\n     * not be closed automatically.\\n     *\\n     * ```js\\n     * import { openSync, closeSync, appendFileSync } from 'fs';\\n     *\\n     * let fd;\\n     *\\n     * try {\\n     *   fd = openSync('message.txt', 'a');\\n     *   appendFileSync(fd, 'data to append', 'utf8');\\n     * } catch (err) {\\n     *   // Handle the error\\n     * } finally {\\n     *   if (fd !== undefined)\\n     *     closeSync(fd);\\n     * }\\n     * ```\\n     * @since v0.6.7\\n     * @param path filename or file descriptor\\n     */\\n    export function appendFileSync(path: PathOrFileDescriptor, data: string | Uint8Array, options?: WriteFileOptions): void;\\n    /**\\n     * Watch for changes on `filename`. The callback `listener` will be called each\\n     * time the file is accessed.\\n     *\\n     * The `options` argument may be omitted. If provided, it should be an object. The`options` object may contain a boolean named `persistent` that indicates\\n     * whether the process should continue to run as long as files are being watched.\\n     * The `options` object may specify an `interval` property indicating how often the\\n     * target should be polled in milliseconds.\\n     *\\n     * The `listener` gets two arguments the current stat object and the previous\\n     * stat object:\\n     *\\n     * ```js\\n     * import { watchFile } from 'fs';\\n     *\\n     * watchFile('message.text', (curr, prev) => {\\n     *   console.log(`the current mtime is: ${curr.mtime}`);\\n     *   console.log(`the previous mtime was: ${prev.mtime}`);\\n     * });\\n     * ```\\n     *\\n     * These stat objects are instances of `fs.Stat`. If the `bigint` option is `true`,\\n     * the numeric values in these objects are specified as `BigInt`s.\\n     *\\n     * To be notified when the file was modified, not just accessed, it is necessary\\n     * to compare `curr.mtimeMs` and `prev.mtimeMs`.\\n     *\\n     * When an `fs.watchFile` operation results in an `ENOENT` error, it\\n     * will invoke the listener once, with all the fields zeroed (or, for dates, the\\n     * Unix Epoch). If the file is created later on, the listener will be called\\n     * again, with the latest stat objects. This is a change in functionality since\\n     * v0.10.\\n     *\\n     * Using {@link watch} is more efficient than `fs.watchFile` and`fs.unwatchFile`. `fs.watch` should be used instead of `fs.watchFile` and`fs.unwatchFile` when possible.\\n     *\\n     * When a file being watched by `fs.watchFile()` disappears and reappears,\\n     * then the contents of `previous` in the second callback event (the file's\\n     * reappearance) will be the same as the contents of `previous` in the first\\n     * callback event (its disappearance).\\n     *\\n     * This happens when:\\n     *\\n     * * the file is deleted, followed by a restore\\n     * * the file is renamed and then renamed a second time back to its original name\\n     * @since v0.1.31\\n     */\\n    export interface WatchFileOptions {\\n        bigint?: boolean | undefined;\\n        persistent?: boolean | undefined;\\n        interval?: number | undefined;\\n    }\\n    /**\\n     * Watch for changes on `filename`. The callback `listener` will be called each\\n     * time the file is accessed.\\n     *\\n     * The `options` argument may be omitted. If provided, it should be an object. The`options` object may contain a boolean named `persistent` that indicates\\n     * whether the process should continue to run as long as files are being watched.\\n     * The `options` object may specify an `interval` property indicating how often the\\n     * target should be polled in milliseconds.\\n     *\\n     * The `listener` gets two arguments the current stat object and the previous\\n     * stat object:\\n     *\\n     * ```js\\n     * import { watchFile } from 'fs';\\n     *\\n     * watchFile('message.text', (curr, prev) => {\\n     *   console.log(`the current mtime is: ${curr.mtime}`);\\n     *   console.log(`the previous mtime was: ${prev.mtime}`);\\n     * });\\n     * ```\\n     *\\n     * These stat objects are instances of `fs.Stat`. If the `bigint` option is `true`,\\n     * the numeric values in these objects are specified as `BigInt`s.\\n     *\\n     * To be notified when the file was modified, not just accessed, it is necessary\\n     * to compare `curr.mtimeMs` and `prev.mtimeMs`.\\n     *\\n     * When an `fs.watchFile` operation results in an `ENOENT` error, it\\n     * will invoke the listener once, with all the fields zeroed (or, for dates, the\\n     * Unix Epoch). If the file is created later on, the listener will be called\\n     * again, with the latest stat objects. This is a change in functionality since\\n     * v0.10.\\n     *\\n     * Using {@link watch} is more efficient than `fs.watchFile` and`fs.unwatchFile`. `fs.watch` should be used instead of `fs.watchFile` and`fs.unwatchFile` when possible.\\n     *\\n     * When a file being watched by `fs.watchFile()` disappears and reappears,\\n     * then the contents of `previous` in the second callback event (the file's\\n     * reappearance) will be the same as the contents of `previous` in the first\\n     * callback event (its disappearance).\\n     *\\n     * This happens when:\\n     *\\n     * * the file is deleted, followed by a restore\\n     * * the file is renamed and then renamed a second time back to its original name\\n     * @since v0.1.31\\n     */\\n    export function watchFile(\\n        filename: PathLike,\\n        options:\\n            | (WatchFileOptions & {\\n                  bigint?: false | undefined;\\n              })\\n            | undefined,\\n        listener: StatsListener\\n    ): StatWatcher;\\n    export function watchFile(\\n        filename: PathLike,\\n        options:\\n            | (WatchFileOptions & {\\n                  bigint: true;\\n              })\\n            | undefined,\\n        listener: BigIntStatsListener\\n    ): StatWatcher;\\n    /**\\n     * Watch for changes on `filename`. The callback `listener` will be called each time the file is accessed.\\n     * @param filename A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\n     */\\n    export function watchFile(filename: PathLike, listener: (curr: Stats, prev: Stats) => void): StatWatcher;\\n    /**\\n     * Stop watching for changes on `filename`. If `listener` is specified, only that\\n     * particular listener is removed. Otherwise, _all_ listeners are removed,\\n     * effectively stopping watching of `filename`.\\n     *\\n     * Calling `fs.unwatchFile()` with a filename that is not being watched is a\\n     * no-op, not an error.\\n     *\\n     * Using {@link watch} is more efficient than `fs.watchFile()` and`fs.unwatchFile()`. `fs.watch()` should be used instead of `fs.watchFile()`and `fs.unwatchFile()` when possible.\\n     * @since v0.1.31\\n     * @param listener Optional, a listener previously attached using `fs.watchFile()`\\n     */\\n    export function unwatchFile(filename: PathLike, listener?: StatsListener): void;\\n    export function unwatchFile(filename: PathLike, listener?: BigIntStatsListener): void;\\n    export interface WatchOptions extends Abortable {\\n        encoding?: BufferEncoding | 'buffer' | undefined;\\n        persistent?: boolean | undefined;\\n        recursive?: boolean | undefined;\\n    }\\n    export type WatchEventType = 'rename' | 'change';\\n    export type WatchListener<T> = (event: WatchEventType, filename: T) => void;\\n    export type StatsListener = (curr: Stats, prev: Stats) => void;\\n    export type BigIntStatsListener = (curr: BigIntStats, prev: BigIntStats) => void;\\n    /**\\n     * Watch for changes on `filename`, where `filename` is either a file or a\\n     * directory.\\n     *\\n     * The second argument is optional. If `options` is provided as a string, it\\n     * specifies the `encoding`. Otherwise `options` should be passed as an object.\\n     *\\n     * The listener callback gets two arguments `(eventType, filename)`. `eventType`is either `'rename'` or `'change'`, and `filename` is the name of the file\\n     * which triggered the event.\\n     *\\n     * On most platforms, `'rename'` is emitted whenever a filename appears or\\n     * disappears in the directory.\\n     *\\n     * The listener callback is attached to the `'change'` event fired by `fs.FSWatcher`, but it is not the same thing as the `'change'` value of`eventType`.\\n     *\\n     * If a `signal` is passed, aborting the corresponding AbortController will close\\n     * the returned `fs.FSWatcher`.\\n     * @since v0.5.10\\n     * @param listener\\n     */\\n    export function watch(\\n        filename: PathLike,\\n        options:\\n            | (WatchOptions & {\\n                  encoding: 'buffer';\\n              })\\n            | 'buffer',\\n        listener?: WatchListener<Buffer>\\n    ): FSWatcher;\\n    /**\\n     * Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.\\n     * @param filename A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\n     * @param options Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.\\n     * If `encoding` is not supplied, the default of `'utf8'` is used.\\n     * If `persistent` is not supplied, the default of `true` is used.\\n     * If `recursive` is not supplied, the default of `false` is used.\\n     */\\n    export function watch(filename: PathLike, options?: WatchOptions | BufferEncoding | null, listener?: WatchListener<string>): FSWatcher;\\n    /**\\n     * Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.\\n     * @param filename A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\n     * @param options Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.\\n     * If `encoding` is not supplied, the default of `'utf8'` is used.\\n     * If `persistent` is not supplied, the default of `true` is used.\\n     * If `recursive` is not supplied, the default of `false` is used.\\n     */\\n    export function watch(filename: PathLike, options: WatchOptions | string, listener?: WatchListener<string | Buffer>): FSWatcher;\\n    /**\\n     * Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.\\n     * @param filename A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\n     */\\n    export function watch(filename: PathLike, listener?: WatchListener<string>): FSWatcher;\\n    /**\\n     * Test whether or not the given path exists by checking with the file system.\\n     * Then call the `callback` argument with either true or false:\\n     *\\n     * ```js\\n     * import { exists } from 'fs';\\n     *\\n     * exists('/etc/passwd', (e) => {\\n     *   console.log(e ? 'it exists' : 'no passwd!');\\n     * });\\n     * ```\\n     *\\n     * **The parameters for this callback are not consistent with other Node.js**\\n     * **callbacks.** Normally, the first parameter to a Node.js callback is an `err`parameter, optionally followed by other parameters. The `fs.exists()` callback\\n     * has only one boolean parameter. This is one reason `fs.access()` is recommended\\n     * instead of `fs.exists()`.\\n     *\\n     * Using `fs.exists()` to check for the existence of a file before calling`fs.open()`, `fs.readFile()` or `fs.writeFile()` is not recommended. Doing\\n     * so introduces a race condition, since other processes may change the file's\\n     * state between the two calls. Instead, user code should open/read/write the\\n     * file directly and handle the error raised if the file does not exist.\\n     *\\n     * **write (NOT RECOMMENDED)**\\n     *\\n     * ```js\\n     * import { exists, open, close } from 'fs';\\n     *\\n     * exists('myfile', (e) => {\\n     *   if (e) {\\n     *     console.error('myfile already exists');\\n     *   } else {\\n     *     open('myfile', 'wx', (err, fd) => {\\n     *       if (err) throw err;\\n     *\\n     *       try {\\n     *         writeMyData(fd);\\n     *       } finally {\\n     *         close(fd, (err) => {\\n     *           if (err) throw err;\\n     *         });\\n     *       }\\n     *     });\\n     *   }\\n     * });\\n     * ```\\n     *\\n     * **write (RECOMMENDED)**\\n     *\\n     * ```js\\n     * import { open, close } from 'fs';\\n     * open('myfile', 'wx', (err, fd) => {\\n     *   if (err) {\\n     *     if (err.code === 'EEXIST') {\\n     *       console.error('myfile already exists');\\n     *       return;\\n     *     }\\n     *\\n     *     throw err;\\n     *   }\\n     *\\n     *   try {\\n     *     writeMyData(fd);\\n     *   } finally {\\n     *     close(fd, (err) => {\\n     *       if (err) throw err;\\n     *     });\\n     *   }\\n     * });\\n     * ```\\n     *\\n     * **read (NOT RECOMMENDED)**\\n     *\\n     * ```js\\n     * import { open, close, exists } from 'fs';\\n     *\\n     * exists('myfile', (e) => {\\n     *   if (e) {\\n     *     open('myfile', 'r', (err, fd) => {\\n     *       if (err) throw err;\\n     *\\n     *       try {\\n     *         readMyData(fd);\\n     *       } finally {\\n     *         close(fd, (err) => {\\n     *           if (err) throw err;\\n     *         });\\n     *       }\\n     *     });\\n     *   } else {\\n     *     console.error('myfile does not exist');\\n     *   }\\n     * });\\n     * ```\\n     *\\n     * **read (RECOMMENDED)**\\n     *\\n     * ```js\\n     * import { open, close } from 'fs';\\n     *\\n     * open('myfile', 'r', (err, fd) => {\\n     *   if (err) {\\n     *     if (err.code === 'ENOENT') {\\n     *       console.error('myfile does not exist');\\n     *       return;\\n     *     }\\n     *\\n     *     throw err;\\n     *   }\\n     *\\n     *   try {\\n     *     readMyData(fd);\\n     *   } finally {\\n     *     close(fd, (err) => {\\n     *       if (err) throw err;\\n     *     });\\n     *   }\\n     * });\\n     * ```\\n     *\\n     * The \\\"not recommended\\\" examples above check for existence and then use the\\n     * file; the \\\"recommended\\\" examples are better because they use the file directly\\n     * and handle the error, if any.\\n     *\\n     * In general, check for the existence of a file only if the file won\u2019t be\\n     * used directly, for example when its existence is a signal from another\\n     * process.\\n     * @since v0.0.2\\n     * @deprecated Since v1.0.0 - Use {@link stat} or {@link access} instead.\\n     */\\n    export function exists(path: PathLike, callback: (exists: boolean) => void): void;\\n    /** @deprecated */\\n    export namespace exists {\\n        /**\\n         * @param path A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\n         * URL support is _experimental_.\\n         */\\n        function __promisify__(path: PathLike): Promise<boolean>;\\n    }\\n    /**\\n     * Returns `true` if the path exists, `false` otherwise.\\n     *\\n     * For detailed information, see the documentation of the asynchronous version of\\n     * this API: {@link exists}.\\n     *\\n     * `fs.exists()` is deprecated, but `fs.existsSync()` is not. The `callback`parameter to `fs.exists()` accepts parameters that are inconsistent with other\\n     * Node.js callbacks. `fs.existsSync()` does not use a callback.\\n     *\\n     * ```js\\n     * import { existsSync } from 'fs';\\n     *\\n     * if (existsSync('/etc/passwd'))\\n     *   console.log('The path exists.');\\n     * ```\\n     * @since v0.1.21\\n     */\\n    export function existsSync(path: PathLike): boolean;\\n    export namespace constants {\\n        // File Access Constants\\n        /** Constant for fs.access(). File is visible to the calling process. */\\n        const F_OK: number;\\n        /** Constant for fs.access(). File can be read by the calling process. */\\n        const R_OK: number;\\n        /** Constant for fs.access(). File can be written by the calling process. */\\n        const W_OK: number;\\n        /** Constant for fs.access(). File can be executed by the calling process. */\\n        const X_OK: number;\\n        // File Copy Constants\\n        /** Constant for fs.copyFile. Flag indicating the destination file should not be overwritten if it already exists. */\\n        const COPYFILE_EXCL: number;\\n        /**\\n         * Constant for fs.copyFile. copy operation will attempt to create a copy-on-write reflink.\\n         * If the underlying platform does not support copy-on-write, then a fallback copy mechanism is used.\\n         */\\n        const COPYFILE_FICLONE: number;\\n        /**\\n         * Constant for fs.copyFile. Copy operation will attempt to create a copy-on-write reflink.\\n         * If the underlying platform does not support copy-on-write, then the operation will fail with an error.\\n         */\\n        const COPYFILE_FICLONE_FORCE: number;\\n        // File Open Constants\\n        /** Constant for fs.open(). Flag indicating to open a file for read-only access. */\\n        const O_RDONLY: number;\\n        /** Constant for fs.open(). Flag indicating to open a file for write-only access. */\\n        const O_WRONLY: number;\\n        /** Constant for fs.open(). Flag indicating to open a file for read-write access. */\\n        const O_RDWR: number;\\n        /** Constant for fs.open(). Flag indicating to create the file if it does not already exist. */\\n        const O_CREAT: number;\\n        /** Constant for fs.open(). Flag indicating that opening a file should fail if the O_CREAT flag is set and the file already exists. */\\n        const O_EXCL: number;\\n        /**\\n         * Constant for fs.open(). Flag indicating that if path identifies a terminal device,\\n         * opening the path shall not cause that terminal to become the controlling terminal for the process\\n         * (if the process does not already have one).\\n         */\\n        const O_NOCTTY: number;\\n        /** Constant for fs.open(). Flag indicating that if the file exists and is a regular file, and the file is opened successfully for write access, its length shall be truncated to zero. */\\n        const O_TRUNC: number;\\n        /** Constant for fs.open(). Flag indicating that data will be appended to the end of the file. */\\n        const O_APPEND: number;\\n        /** Constant for fs.open(). Flag indicating that the open should fail if the path is not a directory. */\\n        const O_DIRECTORY: number;\\n        /**\\n         * constant for fs.open().\\n         * Flag indicating reading accesses to the file system will no longer result in\\n         * an update to the atime information associated with the file.\\n         * This flag is available on Linux operating systems only.\\n         */\\n        const O_NOATIME: number;\\n        /** Constant for fs.open(). Flag indicating that the open should fail if the path is a symbolic link. */\\n        const O_NOFOLLOW: number;\\n        /** Constant for fs.open(). Flag indicating that the file is opened for synchronous I/O. */\\n        const O_SYNC: number;\\n        /** Constant for fs.open(). Flag indicating that the file is opened for synchronous I/O with write operations waiting for data integrity. */\\n        const O_DSYNC: number;\\n        /** Constant for fs.open(). Flag indicating to open the symbolic link itself rather than the resource it is pointing to. */\\n        const O_SYMLINK: number;\\n        /** Constant for fs.open(). When set, an attempt will be made to minimize caching effects of file I/O. */\\n        const O_DIRECT: number;\\n        /** Constant for fs.open(). Flag indicating to open the file in nonblocking mode when possible. */\\n        const O_NONBLOCK: number;\\n        // File Type Constants\\n        /** Constant for fs.Stats mode property for determining a file's type. Bit mask used to extract the file type code. */\\n        const S_IFMT: number;\\n        /** Constant for fs.Stats mode property for determining a file's type. File type constant for a regular file. */\\n        const S_IFREG: number;\\n        /** Constant for fs.Stats mode property for determining a file's type. File type constant for a directory. */\\n        const S_IFDIR: number;\\n        /** Constant for fs.Stats mode property for determining a file's type. File type constant for a character-oriented device file. */\\n        const S_IFCHR: number;\\n        /** Constant for fs.Stats mode property for determining a file's type. File type constant for a block-oriented device file. */\\n        const S_IFBLK: number;\\n        /** Constant for fs.Stats mode property for determining a file's type. File type constant for a FIFO/pipe. */\\n        const S_IFIFO: number;\\n        /** Constant for fs.Stats mode property for determining a file's type. File type constant for a symbolic link. */\\n        const S_IFLNK: number;\\n        /** Constant for fs.Stats mode property for determining a file's type. File type constant for a socket. */\\n        const S_IFSOCK: number;\\n        // File Mode Constants\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating readable, writable and executable by owner. */\\n        const S_IRWXU: number;\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating readable by owner. */\\n        const S_IRUSR: number;\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating writable by owner. */\\n        const S_IWUSR: number;\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating executable by owner. */\\n        const S_IXUSR: number;\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating readable, writable and executable by group. */\\n        const S_IRWXG: number;\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating readable by group. */\\n        const S_IRGRP: number;\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating writable by group. */\\n        const S_IWGRP: number;\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating executable by group. */\\n        const S_IXGRP: number;\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating readable, writable and executable by others. */\\n        const S_IRWXO: number;\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating readable by others. */\\n        const S_IROTH: number;\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating writable by others. */\\n        const S_IWOTH: number;\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating executable by others. */\\n        const S_IXOTH: number;\\n        /**\\n         * When set, a memory file mapping is used to access the file. This flag\\n         * is available on Windows operating systems only. On other operating systems,\\n         * this flag is ignored.\\n         */\\n        const UV_FS_O_FILEMAP: number;\\n    }\\n    /**\\n     * Tests a user's permissions for the file or directory specified by `path`.\\n     * The `mode` argument is an optional integer that specifies the accessibility\\n     * checks to be performed. `mode` should be either the value `fs.constants.F_OK`or a mask consisting of the bitwise OR of any of `fs.constants.R_OK`,`fs.constants.W_OK`, and `fs.constants.X_OK`\\n     * (e.g.`fs.constants.W_OK | fs.constants.R_OK`). Check `File access constants` for\\n     * possible values of `mode`.\\n     *\\n     * The final argument, `callback`, is a callback function that is invoked with\\n     * a possible error argument. If any of the accessibility checks fail, the error\\n     * argument will be an `Error` object. The following examples check if`package.json` exists, and if it is readable or writable.\\n     *\\n     * ```js\\n     * import { access, constants } from 'fs';\\n     *\\n     * const file = 'package.json';\\n     *\\n     * // Check if the file exists in the current directory.\\n     * access(file, constants.F_OK, (err) => {\\n     *   console.log(`${file} ${err ? 'does not exist' : 'exists'}`);\\n     * });\\n     *\\n     * // Check if the file is readable.\\n     * access(file, constants.R_OK, (err) => {\\n     *   console.log(`${file} ${err ? 'is not readable' : 'is readable'}`);\\n     * });\\n     *\\n     * // Check if the file is writable.\\n     * access(file, constants.W_OK, (err) => {\\n     *   console.log(`${file} ${err ? 'is not writable' : 'is writable'}`);\\n     * });\\n     *\\n     * // Check if the file is readable and writable.\\n     * access(file, constants.R_OK | constants.W_OK, (err) => {\\n     *   console.log(`${file} ${err ? 'is not' : 'is'} readable and writable`);\\n     * });\\n     * ```\\n     *\\n     * Do not use `fs.access()` to check for the accessibility of a file before calling`fs.open()`, `fs.readFile()` or `fs.writeFile()`. Doing\\n     * so introduces a race condition, since other processes may change the file's\\n     * state between the two calls. Instead, user code should open/read/write the\\n     * file directly and handle the error raised if the file is not accessible.\\n     *\\n     * **write (NOT RECOMMENDED)**\\n     *\\n     * ```js\\n     * import { access, open, close } from 'fs';\\n     *\\n     * access('myfile', (err) => {\\n     *   if (!err) {\\n     *     console.error('myfile already exists');\\n     *     return;\\n     *   }\\n     *\\n     *   open('myfile', 'wx', (err, fd) => {\\n     *     if (err) throw err;\\n     *\\n     *     try {\\n     *       writeMyData(fd);\\n     *     } finally {\\n     *       close(fd, (err) => {\\n     *         if (err) throw err;\\n     *       });\\n     *     }\\n     *   });\\n     * });\\n     * ```\\n     *\\n     * **write (RECOMMENDED)**\\n     *\\n     * ```js\\n     * import { open, close } from 'fs';\\n     *\\n     * open('myfile', 'wx', (err, fd) => {\\n     *   if (err) {\\n     *     if (err.code === 'EEXIST') {\\n     *       console.error('myfile already exists');\\n     *       return;\\n     *     }\\n     *\\n     *     throw err;\\n     *   }\\n     *\\n     *   try {\\n     *     writeMyData(fd);\\n     *   } finally {\\n     *     close(fd, (err) => {\\n     *       if (err) throw err;\\n     *     });\\n     *   }\\n     * });\\n     * ```\\n     *\\n     * **read (NOT RECOMMENDED)**\\n     *\\n     * ```js\\n     * import { access, open, close } from 'fs';\\n     * access('myfile', (err) => {\\n     *   if (err) {\\n     *     if (err.code === 'ENOENT') {\\n     *       console.error('myfile does not exist');\\n     *       return;\\n     *     }\\n     *\\n     *     throw err;\\n     *   }\\n     *\\n     *   open('myfile', 'r', (err, fd) => {\\n     *     if (err) throw err;\\n     *\\n     *     try {\\n     *       readMyData(fd);\\n     *     } finally {\\n     *       close(fd, (err) => {\\n     *         if (err) throw err;\\n     *       });\\n     *     }\\n     *   });\\n     * });\\n     * ```\\n     *\\n     * **read (RECOMMENDED)**\\n     *\\n     * ```js\\n     * import { open, close } from 'fs';\\n     *\\n     * open('myfile', 'r', (err, fd) => {\\n     *   if (err) {\\n     *     if (err.code === 'ENOENT') {\\n     *       console.error('myfile does not exist');\\n     *       return;\\n     *     }\\n     *\\n     *     throw err;\\n     *   }\\n     *\\n     *   try {\\n     *     readMyData(fd);\\n     *   } finally {\\n     *     close(fd, (err) => {\\n     *       if (err) throw err;\\n     *     });\\n     *   }\\n     * });\\n     * ```\\n     *\\n     * The \\\"not recommended\\\" examples above check for accessibility and then use the\\n     * file; the \\\"recommended\\\" examples are better because they use the file directly\\n     * and handle the error, if any.\\n     *\\n     * In general, check for the accessibility of a file only if the file will not be\\n     * used directly, for example when its accessibility is a signal from another\\n     * process.\\n     *\\n     * On Windows, access-control policies (ACLs) on a directory may limit access to\\n     * a file or directory. The `fs.access()` function, however, does not check the\\n     * ACL and therefore may report that a path is accessible even if the ACL restricts\\n     * the user from reading or writing to it.\\n     * @since v0.11.15\\n     * @param [mode=fs.constants.F_OK]\\n     */\\n    export function access(path: PathLike, mode: number | undefined, callback: NoParamCallback): void;\\n    /**\\n     * Asynchronously tests a user's permissions for the file specified by path.\\n     * @param path A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\n     */\\n    export function access(path: PathLike, callback: NoParamCallback): void;\\n    export namespace access {\\n        /**\\n         * Asynchronously tests a user's permissions for the file specified by path.\\n         * @param path A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\n         * URL support is _experimental_.\\n         */\\n        function __promisify__(path: PathLike, mode?: number): Promise<void>;\\n    }\\n    /**\\n     * Synchronously tests a user's permissions for the file or directory specified\\n     * by `path`. The `mode` argument is an optional integer that specifies the\\n     * accessibility checks to be performed. `mode` should be either the value`fs.constants.F_OK` or a mask consisting of the bitwise OR of any of`fs.constants.R_OK`, `fs.constants.W_OK`, and\\n     * `fs.constants.X_OK` (e.g.`fs.constants.W_OK | fs.constants.R_OK`). Check `File access constants` for\\n     * possible values of `mode`.\\n     *\\n     * If any of the accessibility checks fail, an `Error` will be thrown. Otherwise,\\n     * the method will return `undefined`.\\n     *\\n     * ```js\\n     * import { accessSync, constants } from 'fs';\\n     *\\n     * try {\\n     *   accessSync('etc/passwd', constants.R_OK | constants.W_OK);\\n     *   console.log('can read/write');\\n     * } catch (err) {\\n     *   console.error('no access!');\\n     * }\\n     * ```\\n     * @since v0.11.15\\n     * @param [mode=fs.constants.F_OK]\\n     */\\n    export function accessSync(path: PathLike, mode?: number): void;\\n    interface StreamOptions {\\n        flags?: string | undefined;\\n        encoding?: BufferEncoding | undefined;\\n        fd?: number | promises.FileHandle | undefined;\\n        mode?: number | undefined;\\n        autoClose?: boolean | undefined;\\n        /**\\n         * @default false\\n         */\\n        emitClose?: boolean | undefined;\\n        start?: number | undefined;\\n        highWaterMark?: number | undefined;\\n    }\\n    interface ReadStreamOptions extends StreamOptions {\\n        end?: number | undefined;\\n    }\\n    /**\\n     * Unlike the 16 kb default `highWaterMark` for a `stream.Readable`, the stream\\n     * returned by this method has a default `highWaterMark` of 64 kb.\\n     *\\n     * `options` can include `start` and `end` values to read a range of bytes from\\n     * the file instead of the entire file. Both `start` and `end` are inclusive and\\n     * start counting at 0, allowed values are in the\\n     * \\\\[0, [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER)\\\\] range. If `fd` is specified and `start` is\\n     * omitted or `undefined`, `fs.createReadStream()` reads sequentially from the\\n     * current file position. The `encoding` can be any one of those accepted by `Buffer`.\\n     *\\n     * If `fd` is specified, `ReadStream` will ignore the `path` argument and will use\\n     * the specified file descriptor. This means that no `'open'` event will be\\n     * emitted. `fd` should be blocking; non-blocking `fd`s should be passed to `net.Socket`.\\n     *\\n     * If `fd` points to a character device that only supports blocking reads\\n     * (such as keyboard or sound card), read operations do not finish until data is\\n     * available. This can prevent the process from exiting and the stream from\\n     * closing naturally.\\n     *\\n     * By default, the stream will emit a `'close'` event after it has been\\n     * destroyed.  Set the `emitClose` option to `false` to change this behavior.\\n     *\\n     * By providing the `fs` option, it is possible to override the corresponding `fs`implementations for `open`, `read`, and `close`. When providing the `fs` option,\\n     * an override for `read` is required. If no `fd` is provided, an override for`open` is also required. If `autoClose` is `true`, an override for `close` is\\n     * also required.\\n     *\\n     * ```js\\n     * import { createReadStream } from 'fs';\\n     *\\n     * // Create a stream from some character device.\\n     * const stream = createReadStream('/dev/input/event0');\\n     * setTimeout(() => {\\n     *   stream.close(); // This may not close the stream.\\n     *   // Artificially marking end-of-stream, as if the underlying resource had\\n     *   // indicated end-of-file by itself, allows the stream to close.\\n     *   // This does not cancel pending read operations, and if there is such an\\n     *   // operation, the process may still not be able to exit successfully\\n     *   // until it finishes.\\n     *   stream.push(null);\\n     *   stream.read(0);\\n     * }, 100);\\n     * ```\\n     *\\n     * If `autoClose` is false, then the file descriptor won't be closed, even if\\n     * there's an error. It is the application's responsibility to close it and make\\n     * sure there's no file descriptor leak. If `autoClose` is set to true (default\\n     * behavior), on `'error'` or `'end'` the file descriptor will be closed\\n     * automatically.\\n     *\\n     * `mode` sets the file mode (permission and sticky bits), but only if the\\n     * file was created.\\n     *\\n     * An example to read the last 10 bytes of a file which is 100 bytes long:\\n     *\\n     * ```js\\n     * import { createReadStream } from 'fs';\\n     *\\n     * createReadStream('sample.txt', { start: 90, end: 99 });\\n     * ```\\n     *\\n     * If `options` is a string, then it specifies the encoding.\\n     * @since v0.1.31\\n     */\\n    export function createReadStream(path: PathLike, options?: BufferEncoding | ReadStreamOptions): ReadStream;\\n    /**\\n     * `options` may also include a `start` option to allow writing data at some\\n     * position past the beginning of the file, allowed values are in the\\n     * \\\\[0, [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER)\\\\] range. Modifying a file rather than\\n     * replacing it may require the `flags` option to be set to `r+` rather than the\\n     * default `w`. The `encoding` can be any one of those accepted by `Buffer`.\\n     *\\n     * If `autoClose` is set to true (default behavior) on `'error'` or `'finish'`the file descriptor will be closed automatically. If `autoClose` is false,\\n     * then the file descriptor won't be closed, even if there's an error.\\n     * It is the application's responsibility to close it and make sure there's no\\n     * file descriptor leak.\\n     *\\n     * By default, the stream will emit a `'close'` event after it has been\\n     * destroyed.  Set the `emitClose` option to `false` to change this behavior.\\n     *\\n     * By providing the `fs` option it is possible to override the corresponding `fs`implementations for `open`, `write`, `writev` and `close`. Overriding `write()`without `writev()` can reduce\\n     * performance as some optimizations (`_writev()`)\\n     * will be disabled. When providing the `fs` option, overrides for at least one of`write` and `writev` are required. If no `fd` option is supplied, an override\\n     * for `open` is also required. If `autoClose` is `true`, an override for `close`is also required.\\n     *\\n     * Like `fs.ReadStream`, if `fd` is specified, `fs.WriteStream` will ignore the`path` argument and will use the specified file descriptor. This means that no`'open'` event will be\\n     * emitted. `fd` should be blocking; non-blocking `fd`s\\n     * should be passed to `net.Socket`.\\n     *\\n     * If `options` is a string, then it specifies the encoding.\\n     * @since v0.1.31\\n     */\\n    export function createWriteStream(path: PathLike, options?: BufferEncoding | StreamOptions): WriteStream;\\n    /**\\n     * Forces all currently queued I/O operations associated with the file to the\\n     * operating system's synchronized I/O completion state. Refer to the POSIX [`fdatasync(2)`](http://man7.org/linux/man-pages/man2/fdatasync.2.html) documentation for details. No arguments other\\n     * than a possible\\n     * exception are given to the completion callback.\\n     * @since v0.1.96\\n     */\\n    export function fdatasync(fd: number, callback: NoParamCallback): void;\\n    export namespace fdatasync {\\n        /**\\n         * Asynchronous fdatasync(2) - synchronize a file's in-core state with storage device.\\n         * @param fd A file descriptor.\\n         */\\n        function __promisify__(fd: number): Promise<void>;\\n    }\\n    /**\\n     * Forces all currently queued I/O operations associated with the file to the\\n     * operating system's synchronized I/O completion state. Refer to the POSIX [`fdatasync(2)`](http://man7.org/linux/man-pages/man2/fdatasync.2.html) documentation for details. Returns `undefined`.\\n     * @since v0.1.96\\n     */\\n    export function fdatasyncSync(fd: number): void;\\n    /**\\n     * Asynchronously copies `src` to `dest`. By default, `dest` is overwritten if it\\n     * already exists. No arguments other than a possible exception are given to the\\n     * callback function. Node.js makes no guarantees about the atomicity of the copy\\n     * operation. If an error occurs after the destination file has been opened for\\n     * writing, Node.js will attempt to remove the destination.\\n     *\\n     * `mode` is an optional integer that specifies the behavior\\n     * of the copy operation. It is possible to create a mask consisting of the bitwise\\n     * OR of two or more values (e.g.`fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE`).\\n     *\\n     * * `fs.constants.COPYFILE_EXCL`: The copy operation will fail if `dest` already\\n     * exists.\\n     * * `fs.constants.COPYFILE_FICLONE`: The copy operation will attempt to create a\\n     * copy-on-write reflink. If the platform does not support copy-on-write, then a\\n     * fallback copy mechanism is used.\\n     * * `fs.constants.COPYFILE_FICLONE_FORCE`: The copy operation will attempt to\\n     * create a copy-on-write reflink. If the platform does not support\\n     * copy-on-write, then the operation will fail.\\n     *\\n     * ```js\\n     * import { copyFile, constants } from 'fs';\\n     *\\n     * function callback(err) {\\n     *   if (err) throw err;\\n     *   console.log('source.txt was copied to destination.txt');\\n     * }\\n     *\\n     * // destination.txt will be created or overwritten by default.\\n     * copyFile('source.txt', 'destination.txt', callback);\\n     *\\n     * // By using COPYFILE_EXCL, the operation will fail if destination.txt exists.\\n     * copyFile('source.txt', 'destination.txt', constants.COPYFILE_EXCL, callback);\\n     * ```\\n     * @since v8.5.0\\n     * @param src source filename to copy\\n     * @param dest destination filename of the copy operation\\n     * @param [mode=0] modifiers for copy operation.\\n     */\\n    export function copyFile(src: PathLike, dest: PathLike, callback: NoParamCallback): void;\\n    export function copyFile(src: PathLike, dest: PathLike, mode: number, callback: NoParamCallback): void;\\n    export namespace copyFile {\\n        function __promisify__(src: PathLike, dst: PathLike, mode?: number): Promise<void>;\\n    }\\n    /**\\n     * Synchronously copies `src` to `dest`. By default, `dest` is overwritten if it\\n     * already exists. Returns `undefined`. Node.js makes no guarantees about the\\n     * atomicity of the copy operation. If an error occurs after the destination file\\n     * has been opened for writing, Node.js will attempt to remove the destination.\\n     *\\n     * `mode` is an optional integer that specifies the behavior\\n     * of the copy operation. It is possible to create a mask consisting of the bitwise\\n     * OR of two or more values (e.g.`fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE`).\\n     *\\n     * * `fs.constants.COPYFILE_EXCL`: The copy operation will fail if `dest` already\\n     * exists.\\n     * * `fs.constants.COPYFILE_FICLONE`: The copy operation will attempt to create a\\n     * copy-on-write reflink. If the platform does not support copy-on-write, then a\\n     * fallback copy mechanism is used.\\n     * * `fs.constants.COPYFILE_FICLONE_FORCE`: The copy operation will attempt to\\n     * create a copy-on-write reflink. If the platform does not support\\n     * copy-on-write, then the operation will fail.\\n     *\\n     * ```js\\n     * import { copyFileSync, constants } from 'fs';\\n     *\\n     * // destination.txt will be created or overwritten by default.\\n     * copyFileSync('source.txt', 'destination.txt');\\n     * console.log('source.txt was copied to destination.txt');\\n     *\\n     * // By using COPYFILE_EXCL, the operation will fail if destination.txt exists.\\n     * copyFileSync('source.txt', 'destination.txt', constants.COPYFILE_EXCL);\\n     * ```\\n     * @since v8.5.0\\n     * @param src source filename to copy\\n     * @param dest destination filename of the copy operation\\n     * @param [mode=0] modifiers for copy operation.\\n     */\\n    export function copyFileSync(src: PathLike, dest: PathLike, mode?: number): void;\\n    /**\\n     * Write an array of `ArrayBufferView`s to the file specified by `fd` using`writev()`.\\n     *\\n     * `position` is the offset from the beginning of the file where this data\\n     * should be written. If `typeof position !== 'number'`, the data will be written\\n     * at the current position.\\n     *\\n     * The callback will be given three arguments: `err`, `bytesWritten`, and`buffers`. `bytesWritten` is how many bytes were written from `buffers`.\\n     *\\n     * If this method is `util.promisify()` ed, it returns a promise for an`Object` with `bytesWritten` and `buffers` properties.\\n     *\\n     * It is unsafe to use `fs.writev()` multiple times on the same file without\\n     * waiting for the callback. For this scenario, use {@link createWriteStream}.\\n     *\\n     * On Linux, positional writes don't work when the file is opened in append mode.\\n     * The kernel ignores the position argument and always appends the data to\\n     * the end of the file.\\n     * @since v12.9.0\\n     */\\n    export function writev(fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, cb: (err: NodeJS.ErrnoException | null, bytesWritten: number, buffers: NodeJS.ArrayBufferView[]) => void): void;\\n    export function writev(\\n        fd: number,\\n        buffers: ReadonlyArray<NodeJS.ArrayBufferView>,\\n        position: number,\\n        cb: (err: NodeJS.ErrnoException | null, bytesWritten: number, buffers: NodeJS.ArrayBufferView[]) => void\\n    ): void;\\n    export interface WriteVResult {\\n        bytesWritten: number;\\n        buffers: NodeJS.ArrayBufferView[];\\n    }\\n    export namespace writev {\\n        function __promisify__(fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number): Promise<WriteVResult>;\\n    }\\n    /**\\n     * For detailed information, see the documentation of the asynchronous version of\\n     * this API: {@link writev}.\\n     * @since v12.9.0\\n     * @return The number of bytes written.\\n     */\\n    export function writevSync(fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number): number;\\n    /**\\n     * Read from a file specified by `fd` and write to an array of `ArrayBufferView`s\\n     * using `readv()`.\\n     *\\n     * `position` is the offset from the beginning of the file from where data\\n     * should be read. If `typeof position !== 'number'`, the data will be read\\n     * from the current position.\\n     *\\n     * The callback will be given three arguments: `err`, `bytesRead`, and`buffers`. `bytesRead` is how many bytes were read from the file.\\n     *\\n     * If this method is invoked as its `util.promisify()` ed version, it returns\\n     * a promise for an `Object` with `bytesRead` and `buffers` properties.\\n     * @since v13.13.0, v12.17.0\\n     */\\n    export function readv(fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, cb: (err: NodeJS.ErrnoException | null, bytesRead: number, buffers: NodeJS.ArrayBufferView[]) => void): void;\\n    export function readv(\\n        fd: number,\\n        buffers: ReadonlyArray<NodeJS.ArrayBufferView>,\\n        position: number,\\n        cb: (err: NodeJS.ErrnoException | null, bytesRead: number, buffers: NodeJS.ArrayBufferView[]) => void\\n    ): void;\\n    export interface ReadVResult {\\n        bytesRead: number;\\n        buffers: NodeJS.ArrayBufferView[];\\n    }\\n    export namespace readv {\\n        function __promisify__(fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number): Promise<ReadVResult>;\\n    }\\n    /**\\n     * For detailed information, see the documentation of the asynchronous version of\\n     * this API: {@link readv}.\\n     * @since v13.13.0, v12.17.0\\n     * @return The number of bytes read.\\n     */\\n    export function readvSync(fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number): number;\\n    export interface OpenDirOptions {\\n        encoding?: BufferEncoding | undefined;\\n        /**\\n         * Number of directory entries that are buffered\\n         * internally when reading from the directory. Higher values lead to better\\n         * performance but higher memory usage.\\n         * @default 32\\n         */\\n        bufferSize?: number | undefined;\\n    }\\n    /**\\n     * Synchronously open a directory. See [`opendir(3)`](http://man7.org/linux/man-pages/man3/opendir.3.html).\\n     *\\n     * Creates an `fs.Dir`, which contains all further functions for reading from\\n     * and cleaning up the directory.\\n     *\\n     * The `encoding` option sets the encoding for the `path` while opening the\\n     * directory and subsequent read operations.\\n     * @since v12.12.0\\n     */\\n    export function opendirSync(path: PathLike, options?: OpenDirOptions): Dir;\\n    /**\\n     * Asynchronously open a directory. See the POSIX [`opendir(3)`](http://man7.org/linux/man-pages/man3/opendir.3.html) documentation for\\n     * more details.\\n     *\\n     * Creates an `fs.Dir`, which contains all further functions for reading from\\n     * and cleaning up the directory.\\n     *\\n     * The `encoding` option sets the encoding for the `path` while opening the\\n     * directory and subsequent read operations.\\n     * @since v12.12.0\\n     */\\n    export function opendir(path: PathLike, cb: (err: NodeJS.ErrnoException | null, dir: Dir) => void): void;\\n    export function opendir(path: PathLike, options: OpenDirOptions, cb: (err: NodeJS.ErrnoException | null, dir: Dir) => void): void;\\n    export namespace opendir {\\n        function __promisify__(path: PathLike, options?: OpenDirOptions): Promise<Dir>;\\n    }\\n    export interface BigIntStats extends StatsBase<bigint> {\\n        atimeNs: bigint;\\n        mtimeNs: bigint;\\n        ctimeNs: bigint;\\n        birthtimeNs: bigint;\\n    }\\n    export interface BigIntOptions {\\n        bigint: true;\\n    }\\n    export interface StatOptions {\\n        bigint?: boolean | undefined;\\n    }\\n    export interface StatSyncOptions extends StatOptions {\\n        throwIfNoEntry?: boolean | undefined;\\n    }\\n    interface CopyOptionsBase {\\n        /**\\n         * Dereference symlinks\\n         * @default false\\n         */\\n        dereference?: boolean;\\n        /**\\n         * When `force` is `false`, and the destination\\n         * exists, throw an error.\\n         * @default false\\n         */\\n        errorOnExist?: boolean;\\n        /**\\n         * Overwrite existing file or directory. _The copy\\n         * operation will ignore errors if you set this to false and the destination\\n         * exists. Use the `errorOnExist` option to change this behavior.\\n         * @default true\\n         */\\n        force?: boolean;\\n        /**\\n         * When `true` timestamps from `src` will\\n         * be preserved.\\n         * @default false\\n         */\\n        preserveTimestamps?: boolean;\\n        /**\\n         * Copy directories recursively.\\n         * @default false\\n         */\\n        recursive?: boolean;\\n        /**\\n         * When true, path resolution for symlinks will be skipped\\n         * @default false\\n         */\\n        verbatimSymlinks?: boolean;\\n    }\\n    export interface CopyOptions extends CopyOptionsBase {\\n        /**\\n         * Function to filter copied files/directories. Return\\n         * `true` to copy the item, `false` to ignore it.\\n         */\\n        filter?(source: string, destination: string): boolean | Promise<boolean>;\\n    }\\n    export interface CopySyncOptions extends CopyOptionsBase {\\n        /**\\n         * Function to filter copied files/directories. Return\\n         * `true` to copy the item, `false` to ignore it.\\n         */\\n        filter?(source: string, destination: string): boolean;\\n    }\\n    /**\\n     * Asynchronously copies the entire directory structure from `src` to `dest`,\\n     * including subdirectories and files.\\n     *\\n     * When copying a directory to another directory, globs are not supported and\\n     * behavior is similar to `cp dir1/ dir2/`.\\n     * @since v16.7.0\\n     * @experimental\\n     * @param src source path to copy.\\n     * @param dest destination path to copy to.\\n     */\\n    export function cp(source: string | URL, destination: string | URL, callback: (err: NodeJS.ErrnoException | null) => void): void;\\n    export function cp(source: string | URL, destination: string | URL, opts: CopyOptions, callback: (err: NodeJS.ErrnoException | null) => void): void;\\n    /**\\n     * Synchronously copies the entire directory structure from `src` to `dest`,\\n     * including subdirectories and files.\\n     *\\n     * When copying a directory to another directory, globs are not supported and\\n     * behavior is similar to `cp dir1/ dir2/`.\\n     * @since v16.7.0\\n     * @experimental\\n     * @param src source path to copy.\\n     * @param dest destination path to copy to.\\n     */\\n    export function cpSync(source: string | URL, destination: string | URL, opts?: CopySyncOptions): void;\\n}\\ndeclare module 'node:fs' {\\n    export * from 'fs';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/globals.d.ts\":\"// Declare \\\"static\\\" methods in Error\\ninterface ErrorConstructor {\\n    /** Create .stack property on a target object */\\n    captureStackTrace(targetObject: object, constructorOpt?: Function): void;\\n\\n    /**\\n     * Optional override for formatting stack traces\\n     *\\n     * @see https://v8.dev/docs/stack-trace-api#customizing-stack-traces\\n     */\\n    prepareStackTrace?: ((err: Error, stackTraces: NodeJS.CallSite[]) => any) | undefined;\\n\\n    stackTraceLimit: number;\\n}\\n\\n/*-----------------------------------------------*\\n *                                               *\\n *                   GLOBAL                      *\\n *                                               *\\n ------------------------------------------------*/\\n\\n// For backwards compability\\ninterface NodeRequire extends NodeJS.Require { }\\ninterface RequireResolve extends NodeJS.RequireResolve { }\\ninterface NodeModule extends NodeJS.Module { }\\n\\ndeclare var process: NodeJS.Process;\\ndeclare var console: Console;\\n\\ndeclare var __filename: string;\\ndeclare var __dirname: string;\\n\\ndeclare var require: NodeRequire;\\ndeclare var module: NodeModule;\\n\\n// Same as module.exports\\ndeclare var exports: any;\\n\\n/**\\n * Only available if `--expose-gc` is passed to the process.\\n */\\ndeclare var gc: undefined | (() => void);\\n\\n//#region borrowed\\n// from https://github.com/microsoft/TypeScript/blob/38da7c600c83e7b31193a62495239a0fe478cb67/lib/lib.webworker.d.ts#L633 until moved to separate lib\\n/** A controller object that allows you to abort one or more DOM requests as and when desired. */\\ninterface AbortController {\\n  /**\\n   * Returns the AbortSignal object associated with this object.\\n   */\\n\\n  readonly signal: AbortSignal;\\n  /**\\n   * Invoking this method will set this object's AbortSignal's aborted flag and signal to any observers that the associated activity is to be aborted.\\n   */\\n  abort(reason?: any): void;\\n}\\n\\n/** A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object. */\\ninterface AbortSignal extends EventTarget {\\n  /**\\n   * Returns true if this AbortSignal's AbortController has signaled to abort, and false otherwise.\\n   */\\n  readonly aborted: boolean;\\n  readonly reason: any;\\n  onabort: null | ((this: AbortSignal, event: Event) => any);\\n}\\n\\ndeclare var AbortController: typeof globalThis extends {onmessage: any; AbortController: infer T}\\n  ? T\\n  : {\\n      prototype: AbortController;\\n      new(): AbortController;\\n  };\\n\\ndeclare var AbortSignal: typeof globalThis extends {onmessage: any; AbortSignal: infer T}\\n  ? T\\n  : {\\n      prototype: AbortSignal;\\n      new(): AbortSignal;\\n      abort(reason?: any): AbortSignal;\\n      timeout(milliseconds: number): AbortSignal;\\n  };\\n//#endregion borrowed\\n\\n//#region ArrayLike.at()\\ninterface RelativeIndexable<T> {\\n    /**\\n     * Takes an integer value and returns the item at that index,\\n     * allowing for positive and negative integers.\\n     * Negative integers count back from the last item in the array.\\n     */\\n    at(index: number): T | undefined;\\n}\\ninterface String extends RelativeIndexable<string> {}\\ninterface Array<T> extends RelativeIndexable<T> {}\\ninterface Int8Array extends RelativeIndexable<number> {}\\ninterface Uint8Array extends RelativeIndexable<number> {}\\ninterface Uint8ClampedArray extends RelativeIndexable<number> {}\\ninterface Int16Array extends RelativeIndexable<number> {}\\ninterface Uint16Array extends RelativeIndexable<number> {}\\ninterface Int32Array extends RelativeIndexable<number> {}\\ninterface Uint32Array extends RelativeIndexable<number> {}\\ninterface Float32Array extends RelativeIndexable<number> {}\\ninterface Float64Array extends RelativeIndexable<number> {}\\ninterface BigInt64Array extends RelativeIndexable<bigint> {}\\ninterface BigUint64Array extends RelativeIndexable<bigint> {}\\n//#endregion ArrayLike.at() end\\n\\n/**\\n * @since v17.0.0\\n *\\n * Creates a deep clone of an object.\\n */\\ndeclare function structuredClone<T>(\\n    value: T,\\n    transfer?: { transfer: ReadonlyArray<import('worker_threads').TransferListItem> },\\n): T;\\n\\n/*----------------------------------------------*\\n*                                               *\\n*               GLOBAL INTERFACES               *\\n*                                               *\\n*-----------------------------------------------*/\\ndeclare namespace NodeJS {\\n    interface CallSite {\\n        /**\\n         * Value of \\\"this\\\"\\n         */\\n        getThis(): unknown;\\n\\n        /**\\n         * Type of \\\"this\\\" as a string.\\n         * This is the name of the function stored in the constructor field of\\n         * \\\"this\\\", if available.  Otherwise the object's [[Class]] internal\\n         * property.\\n         */\\n        getTypeName(): string | null;\\n\\n        /**\\n         * Current function\\n         */\\n        getFunction(): Function | undefined;\\n\\n        /**\\n         * Name of the current function, typically its name property.\\n         * If a name property is not available an attempt will be made to try\\n         * to infer a name from the function's context.\\n         */\\n        getFunctionName(): string | null;\\n\\n        /**\\n         * Name of the property [of \\\"this\\\" or one of its prototypes] that holds\\n         * the current function\\n         */\\n        getMethodName(): string | null;\\n\\n        /**\\n         * Name of the script [if this function was defined in a script]\\n         */\\n        getFileName(): string | null;\\n\\n        /**\\n         * Current line number [if this function was defined in a script]\\n         */\\n        getLineNumber(): number | null;\\n\\n        /**\\n         * Current column number [if this function was defined in a script]\\n         */\\n        getColumnNumber(): number | null;\\n\\n        /**\\n         * A call site object representing the location where eval was called\\n         * [if this function was created using a call to eval]\\n         */\\n        getEvalOrigin(): string | undefined;\\n\\n        /**\\n         * Is this a toplevel invocation, that is, is \\\"this\\\" the global object?\\n         */\\n        isToplevel(): boolean;\\n\\n        /**\\n         * Does this call take place in code defined by a call to eval?\\n         */\\n        isEval(): boolean;\\n\\n        /**\\n         * Is this call in native V8 code?\\n         */\\n        isNative(): boolean;\\n\\n        /**\\n         * Is this a constructor call?\\n         */\\n        isConstructor(): boolean;\\n    }\\n\\n    interface ErrnoException extends Error {\\n        errno?: number | undefined;\\n        code?: string | undefined;\\n        path?: string | undefined;\\n        syscall?: string | undefined;\\n    }\\n\\n    interface ReadableStream extends EventEmitter {\\n        readable: boolean;\\n        read(size?: number): string | Buffer;\\n        setEncoding(encoding: BufferEncoding): this;\\n        pause(): this;\\n        resume(): this;\\n        isPaused(): boolean;\\n        pipe<T extends WritableStream>(destination: T, options?: { end?: boolean | undefined; }): T;\\n        unpipe(destination?: WritableStream): this;\\n        unshift(chunk: string | Uint8Array, encoding?: BufferEncoding): void;\\n        wrap(oldStream: ReadableStream): this;\\n        [Symbol.asyncIterator](): AsyncIterableIterator<string | Buffer>;\\n    }\\n\\n    interface WritableStream extends EventEmitter {\\n        writable: boolean;\\n        write(buffer: Uint8Array | string, cb?: (err?: Error | null) => void): boolean;\\n        write(str: string, encoding?: BufferEncoding, cb?: (err?: Error | null) => void): boolean;\\n        end(cb?: () => void): this;\\n        end(data: string | Uint8Array, cb?: () => void): this;\\n        end(str: string, encoding?: BufferEncoding, cb?: () => void): this;\\n    }\\n\\n    interface ReadWriteStream extends ReadableStream, WritableStream { }\\n\\n    interface RefCounted {\\n        ref(): this;\\n        unref(): this;\\n    }\\n\\n    type TypedArray =\\n        | Uint8Array\\n        | Uint8ClampedArray\\n        | Uint16Array\\n        | Uint32Array\\n        | Int8Array\\n        | Int16Array\\n        | Int32Array\\n        | BigUint64Array\\n        | BigInt64Array\\n        | Float32Array\\n        | Float64Array;\\n    type ArrayBufferView = TypedArray | DataView;\\n\\n    interface Require {\\n        (id: string): any;\\n        resolve: RequireResolve;\\n        cache: Dict<NodeModule>;\\n        /**\\n         * @deprecated\\n         */\\n        extensions: RequireExtensions;\\n        main: Module | undefined;\\n    }\\n\\n    interface RequireResolve {\\n        (id: string, options?: { paths?: string[] | undefined; }): string;\\n        paths(request: string): string[] | null;\\n    }\\n\\n    interface RequireExtensions extends Dict<(m: Module, filename: string) => any> {\\n        '.js': (m: Module, filename: string) => any;\\n        '.json': (m: Module, filename: string) => any;\\n        '.node': (m: Module, filename: string) => any;\\n    }\\n    interface Module {\\n        /**\\n         * `true` if the module is running during the Node.js preload\\n         */\\n        isPreloading: boolean;\\n        exports: any;\\n        require: Require;\\n        id: string;\\n        filename: string;\\n        loaded: boolean;\\n        /** @deprecated since v14.6.0 Please use `require.main` and `module.children` instead. */\\n        parent: Module | null | undefined;\\n        children: Module[];\\n        /**\\n         * @since v11.14.0\\n         *\\n         * The directory name of the module. This is usually the same as the path.dirname() of the module.id.\\n         */\\n        path: string;\\n        paths: string[];\\n    }\\n\\n    interface Dict<T> {\\n        [key: string]: T | undefined;\\n    }\\n\\n    interface ReadOnlyDict<T> {\\n        readonly [key: string]: T | undefined;\\n    }\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/globals.global.d.ts\":\"declare var global: typeof globalThis;\\n\",\"file:///node_modules/@types/node/ts4.8/http.d.ts\":\"/**\\n * To use the HTTP server and client one must `require('http')`.\\n *\\n * The HTTP interfaces in Node.js are designed to support many features\\n * of the protocol which have been traditionally difficult to use.\\n * In particular, large, possibly chunk-encoded, messages. The interface is\\n * careful to never buffer entire requests or responses, so the\\n * user is able to stream data.\\n *\\n * HTTP message headers are represented by an object like this:\\n *\\n * ```js\\n * { 'content-length': '123',\\n *   'content-type': 'text/plain',\\n *   'connection': 'keep-alive',\\n *   'host': 'example.com',\\n *   'accept': '*' }\\n * ```\\n *\\n * Keys are lowercased. Values are not modified.\\n *\\n * In order to support the full spectrum of possible HTTP applications, the Node.js\\n * HTTP API is very low-level. It deals with stream handling and message\\n * parsing only. It parses a message into headers and body but it does not\\n * parse the actual headers or the body.\\n *\\n * See `message.headers` for details on how duplicate headers are handled.\\n *\\n * The raw headers as they were received are retained in the `rawHeaders`property, which is an array of `[key, value, key2, value2, ...]`. For\\n * example, the previous message header object might have a `rawHeaders`list like the following:\\n *\\n * ```js\\n * [ 'ConTent-Length', '123456',\\n *   'content-LENGTH', '123',\\n *   'content-type', 'text/plain',\\n *   'CONNECTION', 'keep-alive',\\n *   'Host', 'example.com',\\n *   'accepT', '*' ]\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/http.js)\\n */\\ndeclare module 'http' {\\n    import * as stream from 'node:stream';\\n    import { URL } from 'node:url';\\n    import { TcpSocketConnectOpts, Socket, Server as NetServer, LookupFunction } from 'node:net';\\n    import { LookupOptions } from 'node:dns';\\n    // incoming headers will never contain number\\n    interface IncomingHttpHeaders extends NodeJS.Dict<string | string[]> {\\n        accept?: string | undefined;\\n        'accept-language'?: string | undefined;\\n        'accept-patch'?: string | undefined;\\n        'accept-ranges'?: string | undefined;\\n        'access-control-allow-credentials'?: string | undefined;\\n        'access-control-allow-headers'?: string | undefined;\\n        'access-control-allow-methods'?: string | undefined;\\n        'access-control-allow-origin'?: string | undefined;\\n        'access-control-expose-headers'?: string | undefined;\\n        'access-control-max-age'?: string | undefined;\\n        'access-control-request-headers'?: string | undefined;\\n        'access-control-request-method'?: string | undefined;\\n        age?: string | undefined;\\n        allow?: string | undefined;\\n        'alt-svc'?: string | undefined;\\n        authorization?: string | undefined;\\n        'cache-control'?: string | undefined;\\n        connection?: string | undefined;\\n        'content-disposition'?: string | undefined;\\n        'content-encoding'?: string | undefined;\\n        'content-language'?: string | undefined;\\n        'content-length'?: string | undefined;\\n        'content-location'?: string | undefined;\\n        'content-range'?: string | undefined;\\n        'content-type'?: string | undefined;\\n        cookie?: string | undefined;\\n        date?: string | undefined;\\n        etag?: string | undefined;\\n        expect?: string | undefined;\\n        expires?: string | undefined;\\n        forwarded?: string | undefined;\\n        from?: string | undefined;\\n        host?: string | undefined;\\n        'if-match'?: string | undefined;\\n        'if-modified-since'?: string | undefined;\\n        'if-none-match'?: string | undefined;\\n        'if-unmodified-since'?: string | undefined;\\n        'last-modified'?: string | undefined;\\n        location?: string | undefined;\\n        origin?: string | undefined;\\n        pragma?: string | undefined;\\n        'proxy-authenticate'?: string | undefined;\\n        'proxy-authorization'?: string | undefined;\\n        'public-key-pins'?: string | undefined;\\n        range?: string | undefined;\\n        referer?: string | undefined;\\n        'retry-after'?: string | undefined;\\n        'sec-websocket-accept'?: string | undefined;\\n        'sec-websocket-extensions'?: string | undefined;\\n        'sec-websocket-key'?: string | undefined;\\n        'sec-websocket-protocol'?: string | undefined;\\n        'sec-websocket-version'?: string | undefined;\\n        'set-cookie'?: string[] | undefined;\\n        'strict-transport-security'?: string | undefined;\\n        tk?: string | undefined;\\n        trailer?: string | undefined;\\n        'transfer-encoding'?: string | undefined;\\n        upgrade?: string | undefined;\\n        'user-agent'?: string | undefined;\\n        vary?: string | undefined;\\n        via?: string | undefined;\\n        warning?: string | undefined;\\n        'www-authenticate'?: string | undefined;\\n    }\\n    // outgoing headers allows numbers (as they are converted internally to strings)\\n    type OutgoingHttpHeader = number | string | string[];\\n    interface OutgoingHttpHeaders extends NodeJS.Dict<OutgoingHttpHeader> {}\\n    interface ClientRequestArgs {\\n        _defaultAgent?: Agent | undefined;\\n        agent?: Agent | boolean | undefined;\\n        auth?: string | null | undefined;\\n        // https://github.com/nodejs/node/blob/master/lib/_http_client.js#L278\\n        createConnection?:\\n            | ((options: ClientRequestArgs, oncreate: (err: Error, socket: Socket) => void) => Socket)\\n            | undefined;\\n        defaultPort?: number | string | undefined;\\n        family?: number | undefined;\\n        headers?: OutgoingHttpHeaders | undefined;\\n        hints?: LookupOptions['hints'];\\n        host?: string | null | undefined;\\n        hostname?: string | null | undefined;\\n        insecureHTTPParser?: boolean | undefined;\\n        localAddress?: string | undefined;\\n        localPort?: number | undefined;\\n        lookup?: LookupFunction | undefined;\\n        /**\\n         * @default 16384\\n         */\\n        maxHeaderSize?: number | undefined;\\n        method?: string | undefined;\\n        path?: string | null | undefined;\\n        port?: number | string | null | undefined;\\n        protocol?: string | null | undefined;\\n        setHost?: boolean | undefined;\\n        signal?: AbortSignal | undefined;\\n        socketPath?: string | undefined;\\n        timeout?: number | undefined;\\n        uniqueHeaders?: Array<string | string[]> | undefined;\\n    }\\n    interface ServerOptions<\\n        Request extends typeof IncomingMessage = typeof IncomingMessage,\\n        Response extends typeof ServerResponse = typeof ServerResponse,\\n    > {\\n        /**\\n         * Specifies the `IncomingMessage` class to be used. Useful for extending the original `IncomingMessage`.\\n         */\\n        IncomingMessage?: Request | undefined;\\n        /**\\n         * Specifies the `ServerResponse` class to be used. Useful for extending the original `ServerResponse`.\\n         */\\n        ServerResponse?: Response | undefined;\\n        /**\\n         * Sets the timeout value in milliseconds for receiving the entire request from the client.\\n         * @see Server.requestTimeout for more information.\\n         * @default 300000\\n         * @since v18.0.0\\n         */\\n        requestTimeout?: number | undefined;\\n        /**\\n         * The number of milliseconds of inactivity a server needs to wait for additional incoming data,\\n         * after it has finished writing the last response, before a socket will be destroyed.\\n         * @see Server.keepAliveTimeout for more information.\\n         * @default 5000\\n         * @since v18.0.0\\n         */\\n        keepAliveTimeout?: number | undefined;\\n        /**\\n         * Sets the interval value in milliseconds to check for request and headers timeout in incomplete requests.\\n         * @default 30000\\n         */\\n        connectionsCheckingInterval?: number | undefined;\\n        /**\\n         * Use an insecure HTTP parser that accepts invalid HTTP headers when `true`.\\n         * Using the insecure parser should be avoided.\\n         * See --insecure-http-parser for more information.\\n         * @default false\\n         */\\n        insecureHTTPParser?: boolean | undefined;\\n        /**\\n         * Optionally overrides the value of\\n         * `--max-http-header-size` for requests received by this server, i.e.\\n         * the maximum length of request headers in bytes.\\n         * @default 16384\\n         * @since v13.3.0\\n         */\\n        maxHeaderSize?: number | undefined;\\n        /**\\n         * If set to `true`, it disables the use of Nagle's algorithm immediately after a new incoming connection is received.\\n         * @default true\\n         * @since v16.5.0\\n         */\\n        noDelay?: boolean | undefined;\\n        /**\\n         * If set to `true`, it enables keep-alive functionality on the socket immediately after a new incoming connection is received,\\n         * similarly on what is done in `socket.setKeepAlive([enable][, initialDelay])`.\\n         * @default false\\n         * @since v16.5.0\\n         */\\n        keepAlive?: boolean | undefined;\\n        /**\\n         * If set to a positive number, it sets the initial delay before the first keepalive probe is sent on an idle socket.\\n         * @default 0\\n         * @since v16.5.0\\n         */\\n        keepAliveInitialDelay?: number | undefined;\\n        /**\\n         * A list of response headers that should be sent only once.\\n         * If the header's value is an array, the items will be joined using `; `.\\n         */\\n        uniqueHeaders?: Array<string | string[]> | undefined;\\n    }\\n    type RequestListener<\\n        Request extends typeof IncomingMessage = typeof IncomingMessage,\\n        Response extends typeof ServerResponse = typeof ServerResponse,\\n    > = (req: InstanceType<Request>, res: InstanceType<Response> & { req: InstanceType<Request> }) => void;\\n    /**\\n     * @since v0.1.17\\n     */\\n    class Server<\\n        Request extends typeof IncomingMessage = typeof IncomingMessage,\\n        Response extends typeof ServerResponse = typeof ServerResponse,\\n    > extends NetServer {\\n        constructor(requestListener?: RequestListener<Request, Response>);\\n        constructor(options: ServerOptions<Request, Response>, requestListener?: RequestListener<Request, Response>);\\n        /**\\n         * Sets the timeout value for sockets, and emits a `'timeout'` event on\\n         * the Server object, passing the socket as an argument, if a timeout\\n         * occurs.\\n         *\\n         * If there is a `'timeout'` event listener on the Server object, then it\\n         * will be called with the timed-out socket as an argument.\\n         *\\n         * By default, the Server does not timeout sockets. However, if a callback\\n         * is assigned to the Server's `'timeout'` event, timeouts must be handled\\n         * explicitly.\\n         * @since v0.9.12\\n         * @param [msecs=0 (no timeout)]\\n         */\\n        setTimeout(msecs?: number, callback?: () => void): this;\\n        setTimeout(callback: () => void): this;\\n        /**\\n         * Limits maximum incoming headers count. If set to 0, no limit will be applied.\\n         * @since v0.7.0\\n         */\\n        maxHeadersCount: number | null;\\n        /**\\n         * The maximum number of requests socket can handle\\n         * before closing keep alive connection.\\n         *\\n         * A value of `0` will disable the limit.\\n         *\\n         * When the limit is reached it will set the `Connection` header value to `close`,\\n         * but will not actually close the connection, subsequent requests sent\\n         * after the limit is reached will get `503 Service Unavailable` as a response.\\n         * @since v16.10.0\\n         */\\n        maxRequestsPerSocket: number | null;\\n        /**\\n         * The number of milliseconds of inactivity before a socket is presumed\\n         * to have timed out.\\n         *\\n         * A value of `0` will disable the timeout behavior on incoming connections.\\n         *\\n         * The socket timeout logic is set up on connection, so changing this\\n         * value only affects new connections to the server, not any existing connections.\\n         * @since v0.9.12\\n         */\\n        timeout: number;\\n        /**\\n         * Limit the amount of time the parser will wait to receive the complete HTTP\\n         * headers.\\n         *\\n         * If the timeout expires, the server responds with status 408 without\\n         * forwarding the request to the request listener and then closes the connection.\\n         *\\n         * It must be set to a non-zero value (e.g. 120 seconds) to protect against\\n         * potential Denial-of-Service attacks in case the server is deployed without a\\n         * reverse proxy in front.\\n         * @since v11.3.0, v10.14.0\\n         */\\n        headersTimeout: number;\\n        /**\\n         * The number of milliseconds of inactivity a server needs to wait for additional\\n         * incoming data, after it has finished writing the last response, before a socket\\n         * will be destroyed. If the server receives new data before the keep-alive\\n         * timeout has fired, it will reset the regular inactivity timeout, i.e.,`server.timeout`.\\n         *\\n         * A value of `0` will disable the keep-alive timeout behavior on incoming\\n         * connections.\\n         * A value of `0` makes the http server behave similarly to Node.js versions prior\\n         * to 8.0.0, which did not have a keep-alive timeout.\\n         *\\n         * The socket timeout logic is set up on connection, so changing this value only\\n         * affects new connections to the server, not any existing connections.\\n         * @since v8.0.0\\n         */\\n        keepAliveTimeout: number;\\n        /**\\n         * Sets the timeout value in milliseconds for receiving the entire request from\\n         * the client.\\n         *\\n         * If the timeout expires, the server responds with status 408 without\\n         * forwarding the request to the request listener and then closes the connection.\\n         *\\n         * It must be set to a non-zero value (e.g. 120 seconds) to protect against\\n         * potential Denial-of-Service attacks in case the server is deployed without a\\n         * reverse proxy in front.\\n         * @since v14.11.0\\n         */\\n        requestTimeout: number;\\n        /**\\n         * Closes all connections connected to this server.\\n         * @since v18.2.0\\n         */\\n        closeAllConnections(): void;\\n        /**\\n         * Closes all connections connected to this server which are not sending a request or waiting for a response.\\n         * @since v18.2.0\\n         */\\n        closeIdleConnections(): void;\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        addListener(event: 'close', listener: () => void): this;\\n        addListener(event: 'connection', listener: (socket: Socket) => void): this;\\n        addListener(event: 'error', listener: (err: Error) => void): this;\\n        addListener(event: 'listening', listener: () => void): this;\\n        addListener(event: 'checkContinue', listener: RequestListener<Request, Response>): this;\\n        addListener(event: 'checkExpectation', listener: RequestListener<Request, Response>): this;\\n        addListener(event: 'clientError', listener: (err: Error, socket: stream.Duplex) => void): this;\\n        addListener(\\n            event: 'connect',\\n            listener: (req: InstanceType<Request>, socket: stream.Duplex, head: Buffer) => void,\\n        ): this;\\n        addListener(event: 'request', listener: RequestListener<Request, Response>): this;\\n        addListener(\\n            event: 'upgrade',\\n            listener: (req: InstanceType<Request>, socket: stream.Duplex, head: Buffer) => void,\\n        ): this;\\n        emit(event: string, ...args: any[]): boolean;\\n        emit(event: 'close'): boolean;\\n        emit(event: 'connection', socket: Socket): boolean;\\n        emit(event: 'error', err: Error): boolean;\\n        emit(event: 'listening'): boolean;\\n        emit(\\n            event: 'checkContinue',\\n            req: InstanceType<Request>,\\n            res: InstanceType<Response> & { req: InstanceType<Request> },\\n        ): boolean;\\n        emit(\\n            event: 'checkExpectation',\\n            req: InstanceType<Request>,\\n            res: InstanceType<Response> & { req: InstanceType<Request> },\\n        ): boolean;\\n        emit(event: 'clientError', err: Error, socket: stream.Duplex): boolean;\\n        emit(event: 'connect', req: InstanceType<Request>, socket: stream.Duplex, head: Buffer): boolean;\\n        emit(\\n            event: 'request',\\n            req: InstanceType<Request>,\\n            res: InstanceType<Response> & { req: InstanceType<Request> },\\n        ): boolean;\\n        emit(event: 'upgrade', req: InstanceType<Request>, socket: stream.Duplex, head: Buffer): boolean;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        on(event: 'close', listener: () => void): this;\\n        on(event: 'connection', listener: (socket: Socket) => void): this;\\n        on(event: 'error', listener: (err: Error) => void): this;\\n        on(event: 'listening', listener: () => void): this;\\n        on(event: 'checkContinue', listener: RequestListener<Request, Response>): this;\\n        on(event: 'checkExpectation', listener: RequestListener<Request, Response>): this;\\n        on(event: 'clientError', listener: (err: Error, socket: stream.Duplex) => void): this;\\n        on(event: 'connect', listener: (req: InstanceType<Request>, socket: stream.Duplex, head: Buffer) => void): this;\\n        on(event: 'request', listener: RequestListener<Request, Response>): this;\\n        on(event: 'upgrade', listener: (req: InstanceType<Request>, socket: stream.Duplex, head: Buffer) => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        once(event: 'close', listener: () => void): this;\\n        once(event: 'connection', listener: (socket: Socket) => void): this;\\n        once(event: 'error', listener: (err: Error) => void): this;\\n        once(event: 'listening', listener: () => void): this;\\n        once(event: 'checkContinue', listener: RequestListener<Request, Response>): this;\\n        once(event: 'checkExpectation', listener: RequestListener<Request, Response>): this;\\n        once(event: 'clientError', listener: (err: Error, socket: stream.Duplex) => void): this;\\n        once(\\n            event: 'connect',\\n            listener: (req: InstanceType<Request>, socket: stream.Duplex, head: Buffer) => void,\\n        ): this;\\n        once(event: 'request', listener: RequestListener<Request, Response>): this;\\n        once(\\n            event: 'upgrade',\\n            listener: (req: InstanceType<Request>, socket: stream.Duplex, head: Buffer) => void,\\n        ): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'close', listener: () => void): this;\\n        prependListener(event: 'connection', listener: (socket: Socket) => void): this;\\n        prependListener(event: 'error', listener: (err: Error) => void): this;\\n        prependListener(event: 'listening', listener: () => void): this;\\n        prependListener(event: 'checkContinue', listener: RequestListener<Request, Response>): this;\\n        prependListener(event: 'checkExpectation', listener: RequestListener<Request, Response>): this;\\n        prependListener(event: 'clientError', listener: (err: Error, socket: stream.Duplex) => void): this;\\n        prependListener(\\n            event: 'connect',\\n            listener: (req: InstanceType<Request>, socket: stream.Duplex, head: Buffer) => void,\\n        ): this;\\n        prependListener(event: 'request', listener: RequestListener<Request, Response>): this;\\n        prependListener(\\n            event: 'upgrade',\\n            listener: (req: InstanceType<Request>, socket: stream.Duplex, head: Buffer) => void,\\n        ): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'close', listener: () => void): this;\\n        prependOnceListener(event: 'connection', listener: (socket: Socket) => void): this;\\n        prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n        prependOnceListener(event: 'listening', listener: () => void): this;\\n        prependOnceListener(event: 'checkContinue', listener: RequestListener<Request, Response>): this;\\n        prependOnceListener(event: 'checkExpectation', listener: RequestListener<Request, Response>): this;\\n        prependOnceListener(event: 'clientError', listener: (err: Error, socket: stream.Duplex) => void): this;\\n        prependOnceListener(\\n            event: 'connect',\\n            listener: (req: InstanceType<Request>, socket: stream.Duplex, head: Buffer) => void,\\n        ): this;\\n        prependOnceListener(event: 'request', listener: RequestListener<Request, Response>): this;\\n        prependOnceListener(\\n            event: 'upgrade',\\n            listener: (req: InstanceType<Request>, socket: stream.Duplex, head: Buffer) => void,\\n        ): this;\\n    }\\n    /**\\n     * This class serves as the parent class of {@link ClientRequest} and {@link ServerResponse}. It is an abstract of outgoing message from\\n     * the perspective of the participants of HTTP transaction.\\n     * @since v0.1.17\\n     */\\n    class OutgoingMessage<Request extends IncomingMessage = IncomingMessage> extends stream.Writable {\\n        readonly req: Request;\\n        chunkedEncoding: boolean;\\n        shouldKeepAlive: boolean;\\n        useChunkedEncodingByDefault: boolean;\\n        sendDate: boolean;\\n        /**\\n         * @deprecated Use `writableEnded` instead.\\n         */\\n        finished: boolean;\\n        /**\\n         * Read-only. `true` if the headers were sent, otherwise `false`.\\n         * @since v0.9.3\\n         */\\n        readonly headersSent: boolean;\\n        /**\\n         * Aliases of `outgoingMessage.socket`\\n         * @since v0.3.0\\n         * @deprecated Since v15.12.0,v14.17.1 - Use `socket` instead.\\n         */\\n        readonly connection: Socket | null;\\n        /**\\n         * Reference to the underlying socket. Usually, users will not want to access\\n         * this property.\\n         *\\n         * After calling `outgoingMessage.end()`, this property will be nulled.\\n         * @since v0.3.0\\n         */\\n        readonly socket: Socket | null;\\n        constructor();\\n        /**\\n         * Once a socket is associated with the message and is connected,`socket.setTimeout()` will be called with `msecs` as the first parameter.\\n         * @since v0.9.12\\n         * @param callback Optional function to be called when a timeout occurs. Same as binding to the `timeout` event.\\n         */\\n        setTimeout(msecs: number, callback?: () => void): this;\\n        /**\\n         * Sets a single header value for the header object.\\n         * @since v0.4.0\\n         * @param name Header name\\n         * @param value Header value\\n         */\\n        setHeader(name: string, value: number | string | ReadonlyArray<string>): this;\\n        /**\\n         * Gets the value of HTTP header with the given name. If such a name doesn't\\n         * exist in message, it will be `undefined`.\\n         * @since v0.4.0\\n         * @param name Name of header\\n         */\\n        getHeader(name: string): number | string | string[] | undefined;\\n        /**\\n         * Returns a shallow copy of the current outgoing headers. Since a shallow\\n         * copy is used, array values may be mutated without additional calls to\\n         * various header-related HTTP module methods. The keys of the returned\\n         * object are the header names and the values are the respective header\\n         * values. All header names are lowercase.\\n         *\\n         * The object returned by the `outgoingMessage.getHeaders()` method does\\n         * not prototypically inherit from the JavaScript Object. This means that\\n         * typical Object methods such as `obj.toString()`, `obj.hasOwnProperty()`,\\n         * and others are not defined and will not work.\\n         *\\n         * ```js\\n         * outgoingMessage.setHeader('Foo', 'bar');\\n         * outgoingMessage.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);\\n         *\\n         * const headers = outgoingMessage.getHeaders();\\n         * // headers === { foo: 'bar', 'set-cookie': ['foo=bar', 'bar=baz'] }\\n         * ```\\n         * @since v7.7.0\\n         */\\n        getHeaders(): OutgoingHttpHeaders;\\n        /**\\n         * Returns an array of names of headers of the outgoing outgoingMessage. All\\n         * names are lowercase.\\n         * @since v7.7.0\\n         */\\n        getHeaderNames(): string[];\\n        /**\\n         * Returns `true` if the header identified by `name` is currently set in the\\n         * outgoing headers. The header name is case-insensitive.\\n         *\\n         * ```js\\n         * const hasContentType = outgoingMessage.hasHeader('content-type');\\n         * ```\\n         * @since v7.7.0\\n         */\\n        hasHeader(name: string): boolean;\\n        /**\\n         * Removes a header that is queued for implicit sending.\\n         *\\n         * ```js\\n         * outgoingMessage.removeHeader('Content-Encoding');\\n         * ```\\n         * @since v0.4.0\\n         * @param name Header name\\n         */\\n        removeHeader(name: string): void;\\n        /**\\n         * Adds HTTP trailers (headers but at the end of the message) to the message.\\n         *\\n         * Trailers are **only** be emitted if the message is chunked encoded. If not,\\n         * the trailer will be silently discarded.\\n         *\\n         * HTTP requires the `Trailer` header to be sent to emit trailers,\\n         * with a list of header fields in its value, e.g.\\n         *\\n         * ```js\\n         * message.writeHead(200, { 'Content-Type': 'text/plain',\\n         *                          'Trailer': 'Content-MD5' });\\n         * message.write(fileData);\\n         * message.addTrailers({ 'Content-MD5': '7895bf4b8828b55ceaf47747b4bca667' });\\n         * message.end();\\n         * ```\\n         *\\n         * Attempting to set a header field name or value that contains invalid characters\\n         * will result in a `TypeError` being thrown.\\n         * @since v0.3.0\\n         */\\n        addTrailers(headers: OutgoingHttpHeaders | ReadonlyArray<[string, string]>): void;\\n        /**\\n         * Compulsorily flushes the message headers\\n         *\\n         * For efficiency reason, Node.js normally buffers the message headers\\n         * until `outgoingMessage.end()` is called or the first chunk of message data\\n         * is written. It then tries to pack the headers and data into a single TCP\\n         * packet.\\n         *\\n         * It is usually desired (it saves a TCP round-trip), but not when the first\\n         * data is not sent until possibly much later. `outgoingMessage.flushHeaders()`bypasses the optimization and kickstarts the request.\\n         * @since v1.6.0\\n         */\\n        flushHeaders(): void;\\n    }\\n    /**\\n     * This object is created internally by an HTTP server, not by the user. It is\\n     * passed as the second parameter to the `'request'` event.\\n     * @since v0.1.17\\n     */\\n    class ServerResponse<Request extends IncomingMessage = IncomingMessage> extends OutgoingMessage<Request> {\\n        /**\\n         * When using implicit headers (not calling `response.writeHead()` explicitly),\\n         * this property controls the status code that will be sent to the client when\\n         * the headers get flushed.\\n         *\\n         * ```js\\n         * response.statusCode = 404;\\n         * ```\\n         *\\n         * After response header was sent to the client, this property indicates the\\n         * status code which was sent out.\\n         * @since v0.4.0\\n         */\\n        statusCode: number;\\n        /**\\n         * When using implicit headers (not calling `response.writeHead()` explicitly),\\n         * this property controls the status message that will be sent to the client when\\n         * the headers get flushed. If this is left as `undefined` then the standard\\n         * message for the status code will be used.\\n         *\\n         * ```js\\n         * response.statusMessage = 'Not found';\\n         * ```\\n         *\\n         * After response header was sent to the client, this property indicates the\\n         * status message which was sent out.\\n         * @since v0.11.8\\n         */\\n        statusMessage: string;\\n        constructor(req: Request);\\n        assignSocket(socket: Socket): void;\\n        detachSocket(socket: Socket): void;\\n        /**\\n         * Sends an HTTP/1.1 100 Continue message to the client, indicating that\\n         * the request body should be sent. See the `'checkContinue'` event on`Server`.\\n         * @since v0.3.0\\n         */\\n        writeContinue(callback?: () => void): void;\\n        /**\\n         * Sends an HTTP/1.1 103 Early Hints message to the client with a Link header,\\n         * indicating that the user agent can preload/preconnect the linked resources.\\n         * The `hints` is an object containing the values of headers to be sent with\\n         * early hints message. The optional `callback` argument will be called when\\n         * the response message has been written.\\n         *\\n         * Example:\\n         *\\n         * ```js\\n         * const earlyHintsLink = '</styles.css>; rel=preload; as=style';\\n         * response.writeEarlyHints({\\n         *   'link': earlyHintsLink,\\n         * });\\n         *\\n         * const earlyHintsLinks = [\\n         *   '</styles.css>; rel=preload; as=style',\\n         *   '</scripts.js>; rel=preload; as=script',\\n         * ];\\n         * response.writeEarlyHints({\\n         *   'link': earlyHintsLinks,\\n         *   'x-trace-id': 'id for diagnostics'\\n         * });\\n         *\\n         * const earlyHintsCallback = () => console.log('early hints message sent');\\n         * response.writeEarlyHints({\\n         *   'link': earlyHintsLinks\\n         * }, earlyHintsCallback);\\n         * ```\\n         *\\n         * @since v18.11.0\\n         * @param hints An object containing the values of headers\\n         * @param callback Will be called when the response message has been written\\n         */\\n        writeEarlyHints(hints: Record<string, string | string[]>, callback?: () => void): void;\\n        /**\\n         * Sends a response header to the request. The status code is a 3-digit HTTP\\n         * status code, like `404`. The last argument, `headers`, are the response headers.\\n         * Optionally one can give a human-readable `statusMessage` as the second\\n         * argument.\\n         *\\n         * `headers` may be an `Array` where the keys and values are in the same list.\\n         * It is _not_ a list of tuples. So, the even-numbered offsets are key values,\\n         * and the odd-numbered offsets are the associated values. The array is in the same\\n         * format as `request.rawHeaders`.\\n         *\\n         * Returns a reference to the `ServerResponse`, so that calls can be chained.\\n         *\\n         * ```js\\n         * const body = 'hello world';\\n         * response\\n         *   .writeHead(200, {\\n         *     'Content-Length': Buffer.byteLength(body),\\n         *     'Content-Type': 'text/plain'\\n         *   })\\n         *   .end(body);\\n         * ```\\n         *\\n         * This method must only be called once on a message and it must\\n         * be called before `response.end()` is called.\\n         *\\n         * If `response.write()` or `response.end()` are called before calling\\n         * this, the implicit/mutable headers will be calculated and call this function.\\n         *\\n         * When headers have been set with `response.setHeader()`, they will be merged\\n         * with any headers passed to `response.writeHead()`, with the headers passed\\n         * to `response.writeHead()` given precedence.\\n         *\\n         * If this method is called and `response.setHeader()` has not been called,\\n         * it will directly write the supplied header values onto the network channel\\n         * without caching internally, and the `response.getHeader()` on the header\\n         * will not yield the expected result. If progressive population of headers is\\n         * desired with potential future retrieval and modification, use `response.setHeader()` instead.\\n         *\\n         * ```js\\n         * // Returns content-type = text/plain\\n         * const server = http.createServer((req, res) => {\\n         *   res.setHeader('Content-Type', 'text/html');\\n         *   res.setHeader('X-Foo', 'bar');\\n         *   res.writeHead(200, { 'Content-Type': 'text/plain' });\\n         *   res.end('ok');\\n         * });\\n         * ```\\n         *\\n         * `Content-Length` is given in bytes, not characters. Use `Buffer.byteLength()` to determine the length of the body in bytes. Node.js\\n         * does not check whether `Content-Length` and the length of the body which has\\n         * been transmitted are equal or not.\\n         *\\n         * Attempting to set a header field name or value that contains invalid characters\\n         * will result in a `TypeError` being thrown.\\n         * @since v0.1.30\\n         */\\n        writeHead(\\n            statusCode: number,\\n            statusMessage?: string,\\n            headers?: OutgoingHttpHeaders | OutgoingHttpHeader[],\\n        ): this;\\n        writeHead(statusCode: number, headers?: OutgoingHttpHeaders | OutgoingHttpHeader[]): this;\\n        /**\\n         * Sends an HTTP/1.1 102 Processing message to the client, indicating that\\n         * the request body should be sent.\\n         * @since v10.0.0\\n         */\\n        writeProcessing(): void;\\n    }\\n    interface InformationEvent {\\n        statusCode: number;\\n        statusMessage: string;\\n        httpVersion: string;\\n        httpVersionMajor: number;\\n        httpVersionMinor: number;\\n        headers: IncomingHttpHeaders;\\n        rawHeaders: string[];\\n    }\\n    /**\\n     * This object is created internally and returned from {@link request}. It\\n     * represents an _in-progress_ request whose header has already been queued. The\\n     * header is still mutable using the `setHeader(name, value)`,`getHeader(name)`, `removeHeader(name)` API. The actual header will\\n     * be sent along with the first data chunk or when calling `request.end()`.\\n     *\\n     * To get the response, add a listener for `'response'` to the request object.`'response'` will be emitted from the request object when the response\\n     * headers have been received. The `'response'` event is executed with one\\n     * argument which is an instance of {@link IncomingMessage}.\\n     *\\n     * During the `'response'` event, one can add listeners to the\\n     * response object; particularly to listen for the `'data'` event.\\n     *\\n     * If no `'response'` handler is added, then the response will be\\n     * entirely discarded. However, if a `'response'` event handler is added,\\n     * then the data from the response object **must** be consumed, either by\\n     * calling `response.read()` whenever there is a `'readable'` event, or\\n     * by adding a `'data'` handler, or by calling the `.resume()` method.\\n     * Until the data is consumed, the `'end'` event will not fire. Also, until\\n     * the data is read it will consume memory that can eventually lead to a\\n     * 'process out of memory' error.\\n     *\\n     * For backward compatibility, `res` will only emit `'error'` if there is an`'error'` listener registered.\\n     *\\n     * Node.js does not check whether Content-Length and the length of the\\n     * body which has been transmitted are equal or not.\\n     * @since v0.1.17\\n     */\\n    class ClientRequest extends OutgoingMessage {\\n        /**\\n         * The `request.aborted` property will be `true` if the request has\\n         * been aborted.\\n         * @since v0.11.14\\n         * @deprecated Since v17.0.0,v16.12.0 - Check `destroyed` instead.\\n         */\\n        aborted: boolean;\\n        /**\\n         * The request host.\\n         * @since v14.5.0, v12.19.0\\n         */\\n        host: string;\\n        /**\\n         * The request protocol.\\n         * @since v14.5.0, v12.19.0\\n         */\\n        protocol: string;\\n        /**\\n         * When sending request through a keep-alive enabled agent, the underlying socket\\n         * might be reused. But if server closes connection at unfortunate time, client\\n         * may run into a 'ECONNRESET' error.\\n         *\\n         * ```js\\n         * const http = require('http');\\n         *\\n         * // Server has a 5 seconds keep-alive timeout by default\\n         * http\\n         *   .createServer((req, res) => {\\n         *     res.write('hello\\\\n');\\n         *     res.end();\\n         *   })\\n         *   .listen(3000);\\n         *\\n         * setInterval(() => {\\n         *   // Adapting a keep-alive agent\\n         *   http.get('http://localhost:3000', { agent }, (res) => {\\n         *     res.on('data', (data) => {\\n         *       // Do nothing\\n         *     });\\n         *   });\\n         * }, 5000); // Sending request on 5s interval so it's easy to hit idle timeout\\n         * ```\\n         *\\n         * By marking a request whether it reused socket or not, we can do\\n         * automatic error retry base on it.\\n         *\\n         * ```js\\n         * const http = require('http');\\n         * const agent = new http.Agent({ keepAlive: true });\\n         *\\n         * function retriableRequest() {\\n         *   const req = http\\n         *     .get('http://localhost:3000', { agent }, (res) => {\\n         *       // ...\\n         *     })\\n         *     .on('error', (err) => {\\n         *       // Check if retry is needed\\n         *       if (req.reusedSocket &#x26;&#x26; err.code === 'ECONNRESET') {\\n         *         retriableRequest();\\n         *       }\\n         *     });\\n         * }\\n         *\\n         * retriableRequest();\\n         * ```\\n         * @since v13.0.0, v12.16.0\\n         */\\n        reusedSocket: boolean;\\n        /**\\n         * Limits maximum response headers count. If set to 0, no limit will be applied.\\n         */\\n        maxHeadersCount: number;\\n        constructor(url: string | URL | ClientRequestArgs, cb?: (res: IncomingMessage) => void);\\n        /**\\n         * The request method.\\n         * @since v0.1.97\\n         */\\n        method: string;\\n        /**\\n         * The request path.\\n         * @since v0.4.0\\n         */\\n        path: string;\\n        /**\\n         * Marks the request as aborting. Calling this will cause remaining data\\n         * in the response to be dropped and the socket to be destroyed.\\n         * @since v0.3.8\\n         * @deprecated Since v14.1.0,v13.14.0 - Use `destroy` instead.\\n         */\\n        abort(): void;\\n        onSocket(socket: Socket): void;\\n        /**\\n         * Once a socket is assigned to this request and is connected `socket.setTimeout()` will be called.\\n         * @since v0.5.9\\n         * @param timeout Milliseconds before a request times out.\\n         * @param callback Optional function to be called when a timeout occurs. Same as binding to the `'timeout'` event.\\n         */\\n        setTimeout(timeout: number, callback?: () => void): this;\\n        /**\\n         * Once a socket is assigned to this request and is connected `socket.setNoDelay()` will be called.\\n         * @since v0.5.9\\n         */\\n        setNoDelay(noDelay?: boolean): void;\\n        /**\\n         * Once a socket is assigned to this request and is connected `socket.setKeepAlive()` will be called.\\n         * @since v0.5.9\\n         */\\n        setSocketKeepAlive(enable?: boolean, initialDelay?: number): void;\\n        /**\\n         * Returns an array containing the unique names of the current outgoing raw\\n         * headers. Header names are returned with their exact casing being set.\\n         *\\n         * ```js\\n         * request.setHeader('Foo', 'bar');\\n         * request.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);\\n         *\\n         * const headerNames = request.getRawHeaderNames();\\n         * // headerNames === ['Foo', 'Set-Cookie']\\n         * ```\\n         * @since v15.13.0, v14.17.0\\n         */\\n        getRawHeaderNames(): string[];\\n        /**\\n         * @deprecated\\n         */\\n        addListener(event: 'abort', listener: () => void): this;\\n        addListener(\\n            event: 'connect',\\n            listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void,\\n        ): this;\\n        addListener(event: 'continue', listener: () => void): this;\\n        addListener(event: 'information', listener: (info: InformationEvent) => void): this;\\n        addListener(event: 'response', listener: (response: IncomingMessage) => void): this;\\n        addListener(event: 'socket', listener: (socket: Socket) => void): this;\\n        addListener(event: 'timeout', listener: () => void): this;\\n        addListener(\\n            event: 'upgrade',\\n            listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void,\\n        ): this;\\n        addListener(event: 'close', listener: () => void): this;\\n        addListener(event: 'drain', listener: () => void): this;\\n        addListener(event: 'error', listener: (err: Error) => void): this;\\n        addListener(event: 'finish', listener: () => void): this;\\n        addListener(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        addListener(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        /**\\n         * @deprecated\\n         */\\n        on(event: 'abort', listener: () => void): this;\\n        on(event: 'connect', listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void): this;\\n        on(event: 'continue', listener: () => void): this;\\n        on(event: 'information', listener: (info: InformationEvent) => void): this;\\n        on(event: 'response', listener: (response: IncomingMessage) => void): this;\\n        on(event: 'socket', listener: (socket: Socket) => void): this;\\n        on(event: 'timeout', listener: () => void): this;\\n        on(event: 'upgrade', listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void): this;\\n        on(event: 'close', listener: () => void): this;\\n        on(event: 'drain', listener: () => void): this;\\n        on(event: 'error', listener: (err: Error) => void): this;\\n        on(event: 'finish', listener: () => void): this;\\n        on(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        on(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\n        /**\\n         * @deprecated\\n         */\\n        once(event: 'abort', listener: () => void): this;\\n        once(event: 'connect', listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void): this;\\n        once(event: 'continue', listener: () => void): this;\\n        once(event: 'information', listener: (info: InformationEvent) => void): this;\\n        once(event: 'response', listener: (response: IncomingMessage) => void): this;\\n        once(event: 'socket', listener: (socket: Socket) => void): this;\\n        once(event: 'timeout', listener: () => void): this;\\n        once(event: 'upgrade', listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void): this;\\n        once(event: 'close', listener: () => void): this;\\n        once(event: 'drain', listener: () => void): this;\\n        once(event: 'error', listener: (err: Error) => void): this;\\n        once(event: 'finish', listener: () => void): this;\\n        once(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        once(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\n        /**\\n         * @deprecated\\n         */\\n        prependListener(event: 'abort', listener: () => void): this;\\n        prependListener(\\n            event: 'connect',\\n            listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void,\\n        ): this;\\n        prependListener(event: 'continue', listener: () => void): this;\\n        prependListener(event: 'information', listener: (info: InformationEvent) => void): this;\\n        prependListener(event: 'response', listener: (response: IncomingMessage) => void): this;\\n        prependListener(event: 'socket', listener: (socket: Socket) => void): this;\\n        prependListener(event: 'timeout', listener: () => void): this;\\n        prependListener(\\n            event: 'upgrade',\\n            listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void,\\n        ): this;\\n        prependListener(event: 'close', listener: () => void): this;\\n        prependListener(event: 'drain', listener: () => void): this;\\n        prependListener(event: 'error', listener: (err: Error) => void): this;\\n        prependListener(event: 'finish', listener: () => void): this;\\n        prependListener(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        prependListener(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        /**\\n         * @deprecated\\n         */\\n        prependOnceListener(event: 'abort', listener: () => void): this;\\n        prependOnceListener(\\n            event: 'connect',\\n            listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void,\\n        ): this;\\n        prependOnceListener(event: 'continue', listener: () => void): this;\\n        prependOnceListener(event: 'information', listener: (info: InformationEvent) => void): this;\\n        prependOnceListener(event: 'response', listener: (response: IncomingMessage) => void): this;\\n        prependOnceListener(event: 'socket', listener: (socket: Socket) => void): this;\\n        prependOnceListener(event: 'timeout', listener: () => void): this;\\n        prependOnceListener(\\n            event: 'upgrade',\\n            listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void,\\n        ): this;\\n        prependOnceListener(event: 'close', listener: () => void): this;\\n        prependOnceListener(event: 'drain', listener: () => void): this;\\n        prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n        prependOnceListener(event: 'finish', listener: () => void): this;\\n        prependOnceListener(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        prependOnceListener(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n    }\\n    /**\\n     * An `IncomingMessage` object is created by {@link Server} or {@link ClientRequest} and passed as the first argument to the `'request'` and `'response'` event respectively. It may be used to\\n     * access response\\n     * status, headers and data.\\n     *\\n     * Different from its `socket` value which is a subclass of `stream.Duplex`, the`IncomingMessage` itself extends `stream.Readable` and is created separately to\\n     * parse and emit the incoming HTTP headers and payload, as the underlying socket\\n     * may be reused multiple times in case of keep-alive.\\n     * @since v0.1.17\\n     */\\n    class IncomingMessage extends stream.Readable {\\n        constructor(socket: Socket);\\n        /**\\n         * The `message.aborted` property will be `true` if the request has\\n         * been aborted.\\n         * @since v10.1.0\\n         * @deprecated Since v17.0.0,v16.12.0 - Check `message.destroyed` from <a href=\\\"stream.html#class-streamreadable\\\" class=\\\"type\\\">stream.Readable</a>.\\n         */\\n        aborted: boolean;\\n        /**\\n         * In case of server request, the HTTP version sent by the client. In the case of\\n         * client response, the HTTP version of the connected-to server.\\n         * Probably either `'1.1'` or `'1.0'`.\\n         *\\n         * Also `message.httpVersionMajor` is the first integer and`message.httpVersionMinor` is the second.\\n         * @since v0.1.1\\n         */\\n        httpVersion: string;\\n        httpVersionMajor: number;\\n        httpVersionMinor: number;\\n        /**\\n         * The `message.complete` property will be `true` if a complete HTTP message has\\n         * been received and successfully parsed.\\n         *\\n         * This property is particularly useful as a means of determining if a client or\\n         * server fully transmitted a message before a connection was terminated:\\n         *\\n         * ```js\\n         * const req = http.request({\\n         *   host: '127.0.0.1',\\n         *   port: 8080,\\n         *   method: 'POST'\\n         * }, (res) => {\\n         *   res.resume();\\n         *   res.on('end', () => {\\n         *     if (!res.complete)\\n         *       console.error(\\n         *         'The connection was terminated while the message was still being sent');\\n         *   });\\n         * });\\n         * ```\\n         * @since v0.3.0\\n         */\\n        complete: boolean;\\n        /**\\n         * Alias for `message.socket`.\\n         * @since v0.1.90\\n         * @deprecated Since v16.0.0 - Use `socket`.\\n         */\\n        connection: Socket;\\n        /**\\n         * The `net.Socket` object associated with the connection.\\n         *\\n         * With HTTPS support, use `request.socket.getPeerCertificate()` to obtain the\\n         * client's authentication details.\\n         *\\n         * This property is guaranteed to be an instance of the `net.Socket` class,\\n         * a subclass of `stream.Duplex`, unless the user specified a socket\\n         * type other than `net.Socket` or internally nulled.\\n         * @since v0.3.0\\n         */\\n        socket: Socket;\\n        /**\\n         * The request/response headers object.\\n         *\\n         * Key-value pairs of header names and values. Header names are lower-cased.\\n         *\\n         * ```js\\n         * // Prints something like:\\n         * //\\n         * // { 'user-agent': 'curl/7.22.0',\\n         * //   host: '127.0.0.1:8000',\\n         * //   accept: '*' }\\n         * console.log(request.getHeaders());\\n         * ```\\n         *\\n         * Duplicates in raw headers are handled in the following ways, depending on the\\n         * header name:\\n         *\\n         * * Duplicates of `age`, `authorization`, `content-length`, `content-type`,`etag`, `expires`, `from`, `host`, `if-modified-since`, `if-unmodified-since`,`last-modified`, `location`,\\n         * `max-forwards`, `proxy-authorization`, `referer`,`retry-after`, `server`, or `user-agent` are discarded.\\n         * * `set-cookie` is always an array. Duplicates are added to the array.\\n         * * For duplicate `cookie` headers, the values are joined together with '; '.\\n         * * For all other headers, the values are joined together with ', '.\\n         * @since v0.1.5\\n         */\\n        headers: IncomingHttpHeaders;\\n        /**\\n         * The raw request/response headers list exactly as they were received.\\n         *\\n         * The keys and values are in the same list. It is _not_ a\\n         * list of tuples. So, the even-numbered offsets are key values, and the\\n         * odd-numbered offsets are the associated values.\\n         *\\n         * Header names are not lowercased, and duplicates are not merged.\\n         *\\n         * ```js\\n         * // Prints something like:\\n         * //\\n         * // [ 'user-agent',\\n         * //   'this is invalid because there can be only one',\\n         * //   'User-Agent',\\n         * //   'curl/7.22.0',\\n         * //   'Host',\\n         * //   '127.0.0.1:8000',\\n         * //   'ACCEPT',\\n         * //   '*' ]\\n         * console.log(request.rawHeaders);\\n         * ```\\n         * @since v0.11.6\\n         */\\n        rawHeaders: string[];\\n        /**\\n         * The request/response trailers object. Only populated at the `'end'` event.\\n         * @since v0.3.0\\n         */\\n        trailers: NodeJS.Dict<string>;\\n        /**\\n         * The raw request/response trailer keys and values exactly as they were\\n         * received. Only populated at the `'end'` event.\\n         * @since v0.11.6\\n         */\\n        rawTrailers: string[];\\n        /**\\n         * Calls `message.socket.setTimeout(msecs, callback)`.\\n         * @since v0.5.9\\n         */\\n        setTimeout(msecs: number, callback?: () => void): this;\\n        /**\\n         * **Only valid for request obtained from {@link Server}.**\\n         *\\n         * The request method as a string. Read only. Examples: `'GET'`, `'DELETE'`.\\n         * @since v0.1.1\\n         */\\n        method?: string | undefined;\\n        /**\\n         * **Only valid for request obtained from {@link Server}.**\\n         *\\n         * Request URL string. This contains only the URL that is present in the actual\\n         * HTTP request. Take the following request:\\n         *\\n         * ```http\\n         * GET /status?name=ryan HTTP/1.1\\n         * Accept: text/plain\\n         * ```\\n         *\\n         * To parse the URL into its parts:\\n         *\\n         * ```js\\n         * new URL(request.url, `http://${request.getHeaders().host}`);\\n         * ```\\n         *\\n         * When `request.url` is `'/status?name=ryan'` and`request.getHeaders().host` is `'localhost:3000'`:\\n         *\\n         * ```console\\n         * $ node\\n         * > new URL(request.url, `http://${request.getHeaders().host}`)\\n         * URL {\\n         *   href: 'http://localhost:3000/status?name=ryan',\\n         *   origin: 'http://localhost:3000',\\n         *   protocol: 'http:',\\n         *   username: '',\\n         *   password: '',\\n         *   host: 'localhost:3000',\\n         *   hostname: 'localhost',\\n         *   port: '3000',\\n         *   pathname: '/status',\\n         *   search: '?name=ryan',\\n         *   searchParams: URLSearchParams { 'name' => 'ryan' },\\n         *   hash: ''\\n         * }\\n         * ```\\n         * @since v0.1.90\\n         */\\n        url?: string | undefined;\\n        /**\\n         * **Only valid for response obtained from {@link ClientRequest}.**\\n         *\\n         * The 3-digit HTTP response status code. E.G. `404`.\\n         * @since v0.1.1\\n         */\\n        statusCode?: number | undefined;\\n        /**\\n         * **Only valid for response obtained from {@link ClientRequest}.**\\n         *\\n         * The HTTP response status message (reason phrase). E.G. `OK` or `Internal Server Error`.\\n         * @since v0.11.10\\n         */\\n        statusMessage?: string | undefined;\\n        /**\\n         * Calls `destroy()` on the socket that received the `IncomingMessage`. If `error`is provided, an `'error'` event is emitted on the socket and `error` is passed\\n         * as an argument to any listeners on the event.\\n         * @since v0.3.0\\n         */\\n        destroy(error?: Error): this;\\n    }\\n    interface AgentOptions extends Partial<TcpSocketConnectOpts> {\\n        /**\\n         * Keep sockets around in a pool to be used by other requests in the future. Default = false\\n         */\\n        keepAlive?: boolean | undefined;\\n        /**\\n         * When using HTTP KeepAlive, how often to send TCP KeepAlive packets over sockets being kept alive. Default = 1000.\\n         * Only relevant if keepAlive is set to true.\\n         */\\n        keepAliveMsecs?: number | undefined;\\n        /**\\n         * Maximum number of sockets to allow per host. Default for Node 0.10 is 5, default for Node 0.12 is Infinity\\n         */\\n        maxSockets?: number | undefined;\\n        /**\\n         * Maximum number of sockets allowed for all hosts in total. Each request will use a new socket until the maximum is reached. Default: Infinity.\\n         */\\n        maxTotalSockets?: number | undefined;\\n        /**\\n         * Maximum number of sockets to leave open in a free state. Only relevant if keepAlive is set to true. Default = 256.\\n         */\\n        maxFreeSockets?: number | undefined;\\n        /**\\n         * Socket timeout in milliseconds. This will set the timeout after the socket is connected.\\n         */\\n        timeout?: number | undefined;\\n        /**\\n         * Scheduling strategy to apply when picking the next free socket to use.\\n         * @default `lifo`\\n         */\\n        scheduling?: 'fifo' | 'lifo' | undefined;\\n    }\\n    /**\\n     * An `Agent` is responsible for managing connection persistence\\n     * and reuse for HTTP clients. It maintains a queue of pending requests\\n     * for a given host and port, reusing a single socket connection for each\\n     * until the queue is empty, at which time the socket is either destroyed\\n     * or put into a pool where it is kept to be used again for requests to the\\n     * same host and port. Whether it is destroyed or pooled depends on the`keepAlive` `option`.\\n     *\\n     * Pooled connections have TCP Keep-Alive enabled for them, but servers may\\n     * still close idle connections, in which case they will be removed from the\\n     * pool and a new connection will be made when a new HTTP request is made for\\n     * that host and port. Servers may also refuse to allow multiple requests\\n     * over the same connection, in which case the connection will have to be\\n     * remade for every request and cannot be pooled. The `Agent` will still make\\n     * the requests to that server, but each one will occur over a new connection.\\n     *\\n     * When a connection is closed by the client or the server, it is removed\\n     * from the pool. Any unused sockets in the pool will be unrefed so as not\\n     * to keep the Node.js process running when there are no outstanding requests.\\n     * (see `socket.unref()`).\\n     *\\n     * It is good practice, to `destroy()` an `Agent` instance when it is no\\n     * longer in use, because unused sockets consume OS resources.\\n     *\\n     * Sockets are removed from an agent when the socket emits either\\n     * a `'close'` event or an `'agentRemove'` event. When intending to keep one\\n     * HTTP request open for a long time without keeping it in the agent, something\\n     * like the following may be done:\\n     *\\n     * ```js\\n     * http.get(options, (res) => {\\n     *   // Do stuff\\n     * }).on('socket', (socket) => {\\n     *   socket.emit('agentRemove');\\n     * });\\n     * ```\\n     *\\n     * An agent may also be used for an individual request. By providing`{agent: false}` as an option to the `http.get()` or `http.request()`functions, a one-time use `Agent` with default options\\n     * will be used\\n     * for the client connection.\\n     *\\n     * `agent:false`:\\n     *\\n     * ```js\\n     * http.get({\\n     *   hostname: 'localhost',\\n     *   port: 80,\\n     *   path: '/',\\n     *   agent: false  // Create a new agent just for this one request\\n     * }, (res) => {\\n     *   // Do stuff with response\\n     * });\\n     * ```\\n     * @since v0.3.4\\n     */\\n    class Agent {\\n        /**\\n         * By default set to 256\\\\. For agents with `keepAlive` enabled, this\\n         * sets the maximum number of sockets that will be left open in the free\\n         * state.\\n         * @since v0.11.7\\n         */\\n        maxFreeSockets: number;\\n        /**\\n         * By default set to `Infinity`. Determines how many concurrent sockets the agent\\n         * can have open per origin. Origin is the returned value of `agent.getName()`.\\n         * @since v0.3.6\\n         */\\n        maxSockets: number;\\n        /**\\n         * By default set to `Infinity`. Determines how many concurrent sockets the agent\\n         * can have open. Unlike `maxSockets`, this parameter applies across all origins.\\n         * @since v14.5.0, v12.19.0\\n         */\\n        maxTotalSockets: number;\\n        /**\\n         * An object which contains arrays of sockets currently awaiting use by\\n         * the agent when `keepAlive` is enabled. Do not modify.\\n         *\\n         * Sockets in the `freeSockets` list will be automatically destroyed and\\n         * removed from the array on `'timeout'`.\\n         * @since v0.11.4\\n         */\\n        readonly freeSockets: NodeJS.ReadOnlyDict<Socket[]>;\\n        /**\\n         * An object which contains arrays of sockets currently in use by the\\n         * agent. Do not modify.\\n         * @since v0.3.6\\n         */\\n        readonly sockets: NodeJS.ReadOnlyDict<Socket[]>;\\n        /**\\n         * An object which contains queues of requests that have not yet been assigned to\\n         * sockets. Do not modify.\\n         * @since v0.5.9\\n         */\\n        readonly requests: NodeJS.ReadOnlyDict<IncomingMessage[]>;\\n        constructor(opts?: AgentOptions);\\n        /**\\n         * Destroy any sockets that are currently in use by the agent.\\n         *\\n         * It is usually not necessary to do this. However, if using an\\n         * agent with `keepAlive` enabled, then it is best to explicitly shut down\\n         * the agent when it is no longer needed. Otherwise,\\n         * sockets might stay open for quite a long time before the server\\n         * terminates them.\\n         * @since v0.11.4\\n         */\\n        destroy(): void;\\n    }\\n    const METHODS: string[];\\n    const STATUS_CODES: {\\n        [errorCode: number]: string | undefined;\\n        [errorCode: string]: string | undefined;\\n    };\\n    /**\\n     * Returns a new instance of {@link Server}.\\n     *\\n     * The `requestListener` is a function which is automatically\\n     * added to the `'request'` event.\\n     * @since v0.1.13\\n     */\\n    function createServer<\\n        Request extends typeof IncomingMessage = typeof IncomingMessage,\\n        Response extends typeof ServerResponse = typeof ServerResponse,\\n    >(requestListener?: RequestListener<Request, Response>): Server<Request, Response>;\\n    function createServer<\\n        Request extends typeof IncomingMessage = typeof IncomingMessage,\\n        Response extends typeof ServerResponse = typeof ServerResponse,\\n    >(\\n        options: ServerOptions<Request, Response>,\\n        requestListener?: RequestListener<Request, Response>,\\n    ): Server<Request, Response>;\\n    // although RequestOptions are passed as ClientRequestArgs to ClientRequest directly,\\n    // create interface RequestOptions would make the naming more clear to developers\\n    interface RequestOptions extends ClientRequestArgs {}\\n    /**\\n     * `options` in `socket.connect()` are also supported.\\n     *\\n     * Node.js maintains several connections per server to make HTTP requests.\\n     * This function allows one to transparently issue requests.\\n     *\\n     * `url` can be a string or a `URL` object. If `url` is a\\n     * string, it is automatically parsed with `new URL()`. If it is a `URL` object, it will be automatically converted to an ordinary `options` object.\\n     *\\n     * If both `url` and `options` are specified, the objects are merged, with the`options` properties taking precedence.\\n     *\\n     * The optional `callback` parameter will be added as a one-time listener for\\n     * the `'response'` event.\\n     *\\n     * `http.request()` returns an instance of the {@link ClientRequest} class. The `ClientRequest` instance is a writable stream. If one needs to\\n     * upload a file with a POST request, then write to the `ClientRequest` object.\\n     *\\n     * ```js\\n     * const http = require('http');\\n     *\\n     * const postData = JSON.stringify({\\n     *   'msg': 'Hello World!'\\n     * });\\n     *\\n     * const options = {\\n     *   hostname: 'www.google.com',\\n     *   port: 80,\\n     *   path: '/upload',\\n     *   method: 'POST',\\n     *   headers: {\\n     *     'Content-Type': 'application/json',\\n     *     'Content-Length': Buffer.byteLength(postData)\\n     *   }\\n     * };\\n     *\\n     * const req = http.request(options, (res) => {\\n     *   console.log(`STATUS: ${res.statusCode}`);\\n     *   console.log(`HEADERS: ${JSON.stringify(res.headers)}`);\\n     *   res.setEncoding('utf8');\\n     *   res.on('data', (chunk) => {\\n     *     console.log(`BODY: ${chunk}`);\\n     *   });\\n     *   res.on('end', () => {\\n     *     console.log('No more data in response.');\\n     *   });\\n     * });\\n     *\\n     * req.on('error', (e) => {\\n     *   console.error(`problem with request: ${e.message}`);\\n     * });\\n     *\\n     * // Write data to request body\\n     * req.write(postData);\\n     * req.end();\\n     * ```\\n     *\\n     * In the example `req.end()` was called. With `http.request()` one\\n     * must always call `req.end()` to signify the end of the request -\\n     * even if there is no data being written to the request body.\\n     *\\n     * If any error is encountered during the request (be that with DNS resolution,\\n     * TCP level errors, or actual HTTP parse errors) an `'error'` event is emitted\\n     * on the returned request object. As with all `'error'` events, if no listeners\\n     * are registered the error will be thrown.\\n     *\\n     * There are a few special headers that should be noted.\\n     *\\n     * * Sending a 'Connection: keep-alive' will notify Node.js that the connection to\\n     * the server should be persisted until the next request.\\n     * * Sending a 'Content-Length' header will disable the default chunked encoding.\\n     * * Sending an 'Expect' header will immediately send the request headers.\\n     * Usually, when sending 'Expect: 100-continue', both a timeout and a listener\\n     * for the `'continue'` event should be set. See RFC 2616 Section 8.2.3 for more\\n     * information.\\n     * * Sending an Authorization header will override using the `auth` option\\n     * to compute basic authentication.\\n     *\\n     * Example using a `URL` as `options`:\\n     *\\n     * ```js\\n     * const options = new URL('http://abc:xyz@example.com');\\n     *\\n     * const req = http.request(options, (res) => {\\n     *   // ...\\n     * });\\n     * ```\\n     *\\n     * In a successful request, the following events will be emitted in the following\\n     * order:\\n     *\\n     * * `'socket'`\\n     * * `'response'`\\n     *    * `'data'` any number of times, on the `res` object\\n     *    (`'data'` will not be emitted at all if the response body is empty, for\\n     *    instance, in most redirects)\\n     *    * `'end'` on the `res` object\\n     * * `'close'`\\n     *\\n     * In the case of a connection error, the following events will be emitted:\\n     *\\n     * * `'socket'`\\n     * * `'error'`\\n     * * `'close'`\\n     *\\n     * In the case of a premature connection close before the response is received,\\n     * the following events will be emitted in the following order:\\n     *\\n     * * `'socket'`\\n     * * `'error'` with an error with message `'Error: socket hang up'` and code`'ECONNRESET'`\\n     * * `'close'`\\n     *\\n     * In the case of a premature connection close after the response is received,\\n     * the following events will be emitted in the following order:\\n     *\\n     * * `'socket'`\\n     * * `'response'`\\n     *    * `'data'` any number of times, on the `res` object\\n     * * (connection closed here)\\n     * * `'aborted'` on the `res` object\\n     * * `'error'` on the `res` object with an error with message`'Error: aborted'` and code `'ECONNRESET'`.\\n     * * `'close'`\\n     * * `'close'` on the `res` object\\n     *\\n     * If `req.destroy()` is called before a socket is assigned, the following\\n     * events will be emitted in the following order:\\n     *\\n     * * (`req.destroy()` called here)\\n     * * `'error'` with an error with message `'Error: socket hang up'` and code`'ECONNRESET'`\\n     * * `'close'`\\n     *\\n     * If `req.destroy()` is called before the connection succeeds, the following\\n     * events will be emitted in the following order:\\n     *\\n     * * `'socket'`\\n     * * (`req.destroy()` called here)\\n     * * `'error'` with an error with message `'Error: socket hang up'` and code`'ECONNRESET'`\\n     * * `'close'`\\n     *\\n     * If `req.destroy()` is called after the response is received, the following\\n     * events will be emitted in the following order:\\n     *\\n     * * `'socket'`\\n     * * `'response'`\\n     *    * `'data'` any number of times, on the `res` object\\n     * * (`req.destroy()` called here)\\n     * * `'aborted'` on the `res` object\\n     * * `'error'` on the `res` object with an error with message`'Error: aborted'` and code `'ECONNRESET'`.\\n     * * `'close'`\\n     * * `'close'` on the `res` object\\n     *\\n     * If `req.abort()` is called before a socket is assigned, the following\\n     * events will be emitted in the following order:\\n     *\\n     * * (`req.abort()` called here)\\n     * * `'abort'`\\n     * * `'close'`\\n     *\\n     * If `req.abort()` is called before the connection succeeds, the following\\n     * events will be emitted in the following order:\\n     *\\n     * * `'socket'`\\n     * * (`req.abort()` called here)\\n     * * `'abort'`\\n     * * `'error'` with an error with message `'Error: socket hang up'` and code`'ECONNRESET'`\\n     * * `'close'`\\n     *\\n     * If `req.abort()` is called after the response is received, the following\\n     * events will be emitted in the following order:\\n     *\\n     * * `'socket'`\\n     * * `'response'`\\n     *    * `'data'` any number of times, on the `res` object\\n     * * (`req.abort()` called here)\\n     * * `'abort'`\\n     * * `'aborted'` on the `res` object\\n     * * `'error'` on the `res` object with an error with message`'Error: aborted'` and code `'ECONNRESET'`.\\n     * * `'close'`\\n     * * `'close'` on the `res` object\\n     *\\n     * Setting the `timeout` option or using the `setTimeout()` function will\\n     * not abort the request or do anything besides add a `'timeout'` event.\\n     *\\n     * Passing an `AbortSignal` and then calling `abort` on the corresponding`AbortController` will behave the same way as calling `.destroy()` on the\\n     * request itself.\\n     * @since v0.3.6\\n     */\\n    function request(options: RequestOptions | string | URL, callback?: (res: IncomingMessage) => void): ClientRequest;\\n    function request(\\n        url: string | URL,\\n        options: RequestOptions,\\n        callback?: (res: IncomingMessage) => void,\\n    ): ClientRequest;\\n    /**\\n     * Since most requests are GET requests without bodies, Node.js provides this\\n     * convenience method. The only difference between this method and {@link request} is that it sets the method to GET and calls `req.end()`automatically. The callback must take care to consume the\\n     * response\\n     * data for reasons stated in {@link ClientRequest} section.\\n     *\\n     * The `callback` is invoked with a single argument that is an instance of {@link IncomingMessage}.\\n     *\\n     * JSON fetching example:\\n     *\\n     * ```js\\n     * http.get('http://localhost:8000/', (res) => {\\n     *   const { statusCode } = res;\\n     *   const contentType = res.headers['content-type'];\\n     *\\n     *   let error;\\n     *   // Any 2xx status code signals a successful response but\\n     *   // here we're only checking for 200.\\n     *   if (statusCode !== 200) {\\n     *     error = new Error('Request Failed.\\\\n' +\\n     *                       `Status Code: ${statusCode}`);\\n     *   } else if (!/^application\\\\/json/.test(contentType)) {\\n     *     error = new Error('Invalid content-type.\\\\n' +\\n     *                       `Expected application/json but received ${contentType}`);\\n     *   }\\n     *   if (error) {\\n     *     console.error(error.message);\\n     *     // Consume response data to free up memory\\n     *     res.resume();\\n     *     return;\\n     *   }\\n     *\\n     *   res.setEncoding('utf8');\\n     *   let rawData = '';\\n     *   res.on('data', (chunk) => { rawData += chunk; });\\n     *   res.on('end', () => {\\n     *     try {\\n     *       const parsedData = JSON.parse(rawData);\\n     *       console.log(parsedData);\\n     *     } catch (e) {\\n     *       console.error(e.message);\\n     *     }\\n     *   });\\n     * }).on('error', (e) => {\\n     *   console.error(`Got error: ${e.message}`);\\n     * });\\n     *\\n     * // Create a local server to receive data from\\n     * const server = http.createServer((req, res) => {\\n     *   res.writeHead(200, { 'Content-Type': 'application/json' });\\n     *   res.end(JSON.stringify({\\n     *     data: 'Hello World!'\\n     *   }));\\n     * });\\n     *\\n     * server.listen(8000);\\n     * ```\\n     * @since v0.3.6\\n     * @param options Accepts the same `options` as {@link request}, with the `method` always set to `GET`. Properties that are inherited from the prototype are ignored.\\n     */\\n    function get(options: RequestOptions | string | URL, callback?: (res: IncomingMessage) => void): ClientRequest;\\n    function get(url: string | URL, options: RequestOptions, callback?: (res: IncomingMessage) => void): ClientRequest;\\n\\n    /**\\n     * Performs the low-level validations on the provided name that are done when `res.setHeader(name, value)` is called.\\n     * Passing illegal value as name will result in a TypeError being thrown, identified by `code: 'ERR_INVALID_HTTP_TOKEN'`.\\n     * @param name Header name\\n     * @since v14.3.0\\n     */\\n    function validateHeaderName(name: string): void;\\n    /**\\n     * Performs the low-level validations on the provided value that are done when `res.setHeader(name, value)` is called.\\n     * Passing illegal value as value will result in a TypeError being thrown.\\n     * - Undefined value error is identified by `code: 'ERR_HTTP_INVALID_HEADER_VALUE'`.\\n     * - Invalid value character error is identified by `code: 'ERR_INVALID_CHAR'`.\\n     * @param name Header name\\n     * @param value Header value\\n     * @since v14.3.0\\n     */\\n    function validateHeaderValue(name: string, value: string): void;\\n\\n    /**\\n     * Set the maximum number of idle HTTP parsers. Default: 1000.\\n     * @param count\\n     * @since v18.8.0, v16.18.0\\n     */\\n    function setMaxIdleHTTPParsers(count: number): void;\\n\\n    let globalAgent: Agent;\\n    /**\\n     * Read-only property specifying the maximum allowed size of HTTP headers in bytes.\\n     * Defaults to 16KB. Configurable using the `--max-http-header-size` CLI option.\\n     */\\n    const maxHeaderSize: number;\\n}\\ndeclare module 'node:http' {\\n    export * from 'http';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/http2.d.ts\":\"/**\\n * The `http2` module provides an implementation of the [HTTP/2](https://tools.ietf.org/html/rfc7540) protocol. It\\n * can be accessed using:\\n *\\n * ```js\\n * const http2 = require('http2');\\n * ```\\n * @since v8.4.0\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/http2.js)\\n */\\ndeclare module 'http2' {\\n    import EventEmitter = require('node:events');\\n    import * as fs from 'node:fs';\\n    import * as net from 'node:net';\\n    import * as stream from 'node:stream';\\n    import * as tls from 'node:tls';\\n    import * as url from 'node:url';\\n    import { IncomingHttpHeaders as Http1IncomingHttpHeaders, OutgoingHttpHeaders, IncomingMessage, ServerResponse } from 'node:http';\\n    export { OutgoingHttpHeaders } from 'node:http';\\n    export interface IncomingHttpStatusHeader {\\n        ':status'?: number | undefined;\\n    }\\n    export interface IncomingHttpHeaders extends Http1IncomingHttpHeaders {\\n        ':path'?: string | undefined;\\n        ':method'?: string | undefined;\\n        ':authority'?: string | undefined;\\n        ':scheme'?: string | undefined;\\n    }\\n    // Http2Stream\\n    export interface StreamPriorityOptions {\\n        exclusive?: boolean | undefined;\\n        parent?: number | undefined;\\n        weight?: number | undefined;\\n        silent?: boolean | undefined;\\n    }\\n    export interface StreamState {\\n        localWindowSize?: number | undefined;\\n        state?: number | undefined;\\n        localClose?: number | undefined;\\n        remoteClose?: number | undefined;\\n        sumDependencyWeight?: number | undefined;\\n        weight?: number | undefined;\\n    }\\n    export interface ServerStreamResponseOptions {\\n        endStream?: boolean | undefined;\\n        waitForTrailers?: boolean | undefined;\\n    }\\n    export interface StatOptions {\\n        offset: number;\\n        length: number;\\n    }\\n    export interface ServerStreamFileResponseOptions {\\n        statCheck?(stats: fs.Stats, headers: OutgoingHttpHeaders, statOptions: StatOptions): void | boolean;\\n        waitForTrailers?: boolean | undefined;\\n        offset?: number | undefined;\\n        length?: number | undefined;\\n    }\\n    export interface ServerStreamFileResponseOptionsWithError extends ServerStreamFileResponseOptions {\\n        onError?(err: NodeJS.ErrnoException): void;\\n    }\\n    export interface Http2Stream extends stream.Duplex {\\n        /**\\n         * Set to `true` if the `Http2Stream` instance was aborted abnormally. When set,\\n         * the `'aborted'` event will have been emitted.\\n         * @since v8.4.0\\n         */\\n        readonly aborted: boolean;\\n        /**\\n         * This property shows the number of characters currently buffered to be written.\\n         * See `net.Socket.bufferSize` for details.\\n         * @since v11.2.0, v10.16.0\\n         */\\n        readonly bufferSize: number;\\n        /**\\n         * Set to `true` if the `Http2Stream` instance has been closed.\\n         * @since v9.4.0\\n         */\\n        readonly closed: boolean;\\n        /**\\n         * Set to `true` if the `Http2Stream` instance has been destroyed and is no longer\\n         * usable.\\n         * @since v8.4.0\\n         */\\n        readonly destroyed: boolean;\\n        /**\\n         * Set to `true` if the `END_STREAM` flag was set in the request or response\\n         * HEADERS frame received, indicating that no additional data should be received\\n         * and the readable side of the `Http2Stream` will be closed.\\n         * @since v10.11.0\\n         */\\n        readonly endAfterHeaders: boolean;\\n        /**\\n         * The numeric stream identifier of this `Http2Stream` instance. Set to `undefined`if the stream identifier has not yet been assigned.\\n         * @since v8.4.0\\n         */\\n        readonly id?: number | undefined;\\n        /**\\n         * Set to `true` if the `Http2Stream` instance has not yet been assigned a\\n         * numeric stream identifier.\\n         * @since v9.4.0\\n         */\\n        readonly pending: boolean;\\n        /**\\n         * Set to the `RST_STREAM` `error code` reported when the `Http2Stream` is\\n         * destroyed after either receiving an `RST_STREAM` frame from the connected peer,\\n         * calling `http2stream.close()`, or `http2stream.destroy()`. Will be`undefined` if the `Http2Stream` has not been closed.\\n         * @since v8.4.0\\n         */\\n        readonly rstCode: number;\\n        /**\\n         * An object containing the outbound headers sent for this `Http2Stream`.\\n         * @since v9.5.0\\n         */\\n        readonly sentHeaders: OutgoingHttpHeaders;\\n        /**\\n         * An array of objects containing the outbound informational (additional) headers\\n         * sent for this `Http2Stream`.\\n         * @since v9.5.0\\n         */\\n        readonly sentInfoHeaders?: OutgoingHttpHeaders[] | undefined;\\n        /**\\n         * An object containing the outbound trailers sent for this `HttpStream`.\\n         * @since v9.5.0\\n         */\\n        readonly sentTrailers?: OutgoingHttpHeaders | undefined;\\n        /**\\n         * A reference to the `Http2Session` instance that owns this `Http2Stream`. The\\n         * value will be `undefined` after the `Http2Stream` instance is destroyed.\\n         * @since v8.4.0\\n         */\\n        readonly session: Http2Session;\\n        /**\\n         * Provides miscellaneous information about the current state of the`Http2Stream`.\\n         *\\n         * A current state of this `Http2Stream`.\\n         * @since v8.4.0\\n         */\\n        readonly state: StreamState;\\n        /**\\n         * Closes the `Http2Stream` instance by sending an `RST_STREAM` frame to the\\n         * connected HTTP/2 peer.\\n         * @since v8.4.0\\n         * @param [code=http2.constants.NGHTTP2_NO_ERROR] Unsigned 32-bit integer identifying the error code.\\n         * @param callback An optional function registered to listen for the `'close'` event.\\n         */\\n        close(code?: number, callback?: () => void): void;\\n        /**\\n         * Updates the priority for this `Http2Stream` instance.\\n         * @since v8.4.0\\n         */\\n        priority(options: StreamPriorityOptions): void;\\n        /**\\n         * ```js\\n         * const http2 = require('http2');\\n         * const client = http2.connect('http://example.org:8000');\\n         * const { NGHTTP2_CANCEL } = http2.constants;\\n         * const req = client.request({ ':path': '/' });\\n         *\\n         * // Cancel the stream if there's no activity after 5 seconds\\n         * req.setTimeout(5000, () => req.close(NGHTTP2_CANCEL));\\n         * ```\\n         * @since v8.4.0\\n         */\\n        setTimeout(msecs: number, callback?: () => void): void;\\n        /**\\n         * Sends a trailing `HEADERS` frame to the connected HTTP/2 peer. This method\\n         * will cause the `Http2Stream` to be immediately closed and must only be\\n         * called after the `'wantTrailers'` event has been emitted. When sending a\\n         * request or sending a response, the `options.waitForTrailers` option must be set\\n         * in order to keep the `Http2Stream` open after the final `DATA` frame so that\\n         * trailers can be sent.\\n         *\\n         * ```js\\n         * const http2 = require('http2');\\n         * const server = http2.createServer();\\n         * server.on('stream', (stream) => {\\n         *   stream.respond(undefined, { waitForTrailers: true });\\n         *   stream.on('wantTrailers', () => {\\n         *     stream.sendTrailers({ xyz: 'abc' });\\n         *   });\\n         *   stream.end('Hello World');\\n         * });\\n         * ```\\n         *\\n         * The HTTP/1 specification forbids trailers from containing HTTP/2 pseudo-header\\n         * fields (e.g. `':method'`, `':path'`, etc).\\n         * @since v10.0.0\\n         */\\n        sendTrailers(headers: OutgoingHttpHeaders): void;\\n        addListener(event: 'aborted', listener: () => void): this;\\n        addListener(event: 'close', listener: () => void): this;\\n        addListener(event: 'data', listener: (chunk: Buffer | string) => void): this;\\n        addListener(event: 'drain', listener: () => void): this;\\n        addListener(event: 'end', listener: () => void): this;\\n        addListener(event: 'error', listener: (err: Error) => void): this;\\n        addListener(event: 'finish', listener: () => void): this;\\n        addListener(event: 'frameError', listener: (frameType: number, errorCode: number) => void): this;\\n        addListener(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        addListener(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        addListener(event: 'streamClosed', listener: (code: number) => void): this;\\n        addListener(event: 'timeout', listener: () => void): this;\\n        addListener(event: 'trailers', listener: (trailers: IncomingHttpHeaders, flags: number) => void): this;\\n        addListener(event: 'wantTrailers', listener: () => void): this;\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        emit(event: 'aborted'): boolean;\\n        emit(event: 'close'): boolean;\\n        emit(event: 'data', chunk: Buffer | string): boolean;\\n        emit(event: 'drain'): boolean;\\n        emit(event: 'end'): boolean;\\n        emit(event: 'error', err: Error): boolean;\\n        emit(event: 'finish'): boolean;\\n        emit(event: 'frameError', frameType: number, errorCode: number): boolean;\\n        emit(event: 'pipe', src: stream.Readable): boolean;\\n        emit(event: 'unpipe', src: stream.Readable): boolean;\\n        emit(event: 'streamClosed', code: number): boolean;\\n        emit(event: 'timeout'): boolean;\\n        emit(event: 'trailers', trailers: IncomingHttpHeaders, flags: number): boolean;\\n        emit(event: 'wantTrailers'): boolean;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        on(event: 'aborted', listener: () => void): this;\\n        on(event: 'close', listener: () => void): this;\\n        on(event: 'data', listener: (chunk: Buffer | string) => void): this;\\n        on(event: 'drain', listener: () => void): this;\\n        on(event: 'end', listener: () => void): this;\\n        on(event: 'error', listener: (err: Error) => void): this;\\n        on(event: 'finish', listener: () => void): this;\\n        on(event: 'frameError', listener: (frameType: number, errorCode: number) => void): this;\\n        on(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        on(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        on(event: 'streamClosed', listener: (code: number) => void): this;\\n        on(event: 'timeout', listener: () => void): this;\\n        on(event: 'trailers', listener: (trailers: IncomingHttpHeaders, flags: number) => void): this;\\n        on(event: 'wantTrailers', listener: () => void): this;\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\n        once(event: 'aborted', listener: () => void): this;\\n        once(event: 'close', listener: () => void): this;\\n        once(event: 'data', listener: (chunk: Buffer | string) => void): this;\\n        once(event: 'drain', listener: () => void): this;\\n        once(event: 'end', listener: () => void): this;\\n        once(event: 'error', listener: (err: Error) => void): this;\\n        once(event: 'finish', listener: () => void): this;\\n        once(event: 'frameError', listener: (frameType: number, errorCode: number) => void): this;\\n        once(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        once(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        once(event: 'streamClosed', listener: (code: number) => void): this;\\n        once(event: 'timeout', listener: () => void): this;\\n        once(event: 'trailers', listener: (trailers: IncomingHttpHeaders, flags: number) => void): this;\\n        once(event: 'wantTrailers', listener: () => void): this;\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'aborted', listener: () => void): this;\\n        prependListener(event: 'close', listener: () => void): this;\\n        prependListener(event: 'data', listener: (chunk: Buffer | string) => void): this;\\n        prependListener(event: 'drain', listener: () => void): this;\\n        prependListener(event: 'end', listener: () => void): this;\\n        prependListener(event: 'error', listener: (err: Error) => void): this;\\n        prependListener(event: 'finish', listener: () => void): this;\\n        prependListener(event: 'frameError', listener: (frameType: number, errorCode: number) => void): this;\\n        prependListener(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        prependListener(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        prependListener(event: 'streamClosed', listener: (code: number) => void): this;\\n        prependListener(event: 'timeout', listener: () => void): this;\\n        prependListener(event: 'trailers', listener: (trailers: IncomingHttpHeaders, flags: number) => void): this;\\n        prependListener(event: 'wantTrailers', listener: () => void): this;\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'aborted', listener: () => void): this;\\n        prependOnceListener(event: 'close', listener: () => void): this;\\n        prependOnceListener(event: 'data', listener: (chunk: Buffer | string) => void): this;\\n        prependOnceListener(event: 'drain', listener: () => void): this;\\n        prependOnceListener(event: 'end', listener: () => void): this;\\n        prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n        prependOnceListener(event: 'finish', listener: () => void): this;\\n        prependOnceListener(event: 'frameError', listener: (frameType: number, errorCode: number) => void): this;\\n        prependOnceListener(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        prependOnceListener(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        prependOnceListener(event: 'streamClosed', listener: (code: number) => void): this;\\n        prependOnceListener(event: 'timeout', listener: () => void): this;\\n        prependOnceListener(event: 'trailers', listener: (trailers: IncomingHttpHeaders, flags: number) => void): this;\\n        prependOnceListener(event: 'wantTrailers', listener: () => void): this;\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n    }\\n    export interface ClientHttp2Stream extends Http2Stream {\\n        addListener(event: 'continue', listener: () => {}): this;\\n        addListener(event: 'headers', listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\n        addListener(event: 'push', listener: (headers: IncomingHttpHeaders, flags: number) => void): this;\\n        addListener(event: 'response', listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        emit(event: 'continue'): boolean;\\n        emit(event: 'headers', headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number): boolean;\\n        emit(event: 'push', headers: IncomingHttpHeaders, flags: number): boolean;\\n        emit(event: 'response', headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number): boolean;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        on(event: 'continue', listener: () => {}): this;\\n        on(event: 'headers', listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\n        on(event: 'push', listener: (headers: IncomingHttpHeaders, flags: number) => void): this;\\n        on(event: 'response', listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\n        once(event: 'continue', listener: () => {}): this;\\n        once(event: 'headers', listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\n        once(event: 'push', listener: (headers: IncomingHttpHeaders, flags: number) => void): this;\\n        once(event: 'response', listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'continue', listener: () => {}): this;\\n        prependListener(event: 'headers', listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\n        prependListener(event: 'push', listener: (headers: IncomingHttpHeaders, flags: number) => void): this;\\n        prependListener(event: 'response', listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'continue', listener: () => {}): this;\\n        prependOnceListener(event: 'headers', listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\n        prependOnceListener(event: 'push', listener: (headers: IncomingHttpHeaders, flags: number) => void): this;\\n        prependOnceListener(event: 'response', listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n    }\\n    export interface ServerHttp2Stream extends Http2Stream {\\n        /**\\n         * True if headers were sent, false otherwise (read-only).\\n         * @since v8.4.0\\n         */\\n        readonly headersSent: boolean;\\n        /**\\n         * Read-only property mapped to the `SETTINGS_ENABLE_PUSH` flag of the remote\\n         * client's most recent `SETTINGS` frame. Will be `true` if the remote peer\\n         * accepts push streams, `false` otherwise. Settings are the same for every`Http2Stream` in the same `Http2Session`.\\n         * @since v8.4.0\\n         */\\n        readonly pushAllowed: boolean;\\n        /**\\n         * Sends an additional informational `HEADERS` frame to the connected HTTP/2 peer.\\n         * @since v8.4.0\\n         */\\n        additionalHeaders(headers: OutgoingHttpHeaders): void;\\n        /**\\n         * Initiates a push stream. The callback is invoked with the new `Http2Stream`instance created for the push stream passed as the second argument, or an`Error` passed as the first argument.\\n         *\\n         * ```js\\n         * const http2 = require('http2');\\n         * const server = http2.createServer();\\n         * server.on('stream', (stream) => {\\n         *   stream.respond({ ':status': 200 });\\n         *   stream.pushStream({ ':path': '/' }, (err, pushStream, headers) => {\\n         *     if (err) throw err;\\n         *     pushStream.respond({ ':status': 200 });\\n         *     pushStream.end('some pushed data');\\n         *   });\\n         *   stream.end('some data');\\n         * });\\n         * ```\\n         *\\n         * Setting the weight of a push stream is not allowed in the `HEADERS` frame. Pass\\n         * a `weight` value to `http2stream.priority` with the `silent` option set to`true` to enable server-side bandwidth balancing between concurrent streams.\\n         *\\n         * Calling `http2stream.pushStream()` from within a pushed stream is not permitted\\n         * and will throw an error.\\n         * @since v8.4.0\\n         * @param callback Callback that is called once the push stream has been initiated.\\n         */\\n        pushStream(headers: OutgoingHttpHeaders, callback?: (err: Error | null, pushStream: ServerHttp2Stream, headers: OutgoingHttpHeaders) => void): void;\\n        pushStream(headers: OutgoingHttpHeaders, options?: StreamPriorityOptions, callback?: (err: Error | null, pushStream: ServerHttp2Stream, headers: OutgoingHttpHeaders) => void): void;\\n        /**\\n         * ```js\\n         * const http2 = require('http2');\\n         * const server = http2.createServer();\\n         * server.on('stream', (stream) => {\\n         *   stream.respond({ ':status': 200 });\\n         *   stream.end('some data');\\n         * });\\n         * ```\\n         *\\n         * When the `options.waitForTrailers` option is set, the `'wantTrailers'` event\\n         * will be emitted immediately after queuing the last chunk of payload data to be\\n         * sent. The `http2stream.sendTrailers()` method can then be used to sent trailing\\n         * header fields to the peer.\\n         *\\n         * When `options.waitForTrailers` is set, the `Http2Stream` will not automatically\\n         * close when the final `DATA` frame is transmitted. User code must call either`http2stream.sendTrailers()` or `http2stream.close()` to close the`Http2Stream`.\\n         *\\n         * ```js\\n         * const http2 = require('http2');\\n         * const server = http2.createServer();\\n         * server.on('stream', (stream) => {\\n         *   stream.respond({ ':status': 200 }, { waitForTrailers: true });\\n         *   stream.on('wantTrailers', () => {\\n         *     stream.sendTrailers({ ABC: 'some value to send' });\\n         *   });\\n         *   stream.end('some data');\\n         * });\\n         * ```\\n         * @since v8.4.0\\n         */\\n        respond(headers?: OutgoingHttpHeaders, options?: ServerStreamResponseOptions): void;\\n        /**\\n         * Initiates a response whose data is read from the given file descriptor. No\\n         * validation is performed on the given file descriptor. If an error occurs while\\n         * attempting to read data using the file descriptor, the `Http2Stream` will be\\n         * closed using an `RST_STREAM` frame using the standard `INTERNAL_ERROR` code.\\n         *\\n         * When used, the `Http2Stream` object's `Duplex` interface will be closed\\n         * automatically.\\n         *\\n         * ```js\\n         * const http2 = require('http2');\\n         * const fs = require('fs');\\n         *\\n         * const server = http2.createServer();\\n         * server.on('stream', (stream) => {\\n         *   const fd = fs.openSync('/some/file', 'r');\\n         *\\n         *   const stat = fs.fstatSync(fd);\\n         *   const headers = {\\n         *     'content-length': stat.size,\\n         *     'last-modified': stat.mtime.toUTCString(),\\n         *     'content-type': 'text/plain; charset=utf-8'\\n         *   };\\n         *   stream.respondWithFD(fd, headers);\\n         *   stream.on('close', () => fs.closeSync(fd));\\n         * });\\n         * ```\\n         *\\n         * The optional `options.statCheck` function may be specified to give user code\\n         * an opportunity to set additional content headers based on the `fs.Stat` details\\n         * of the given fd. If the `statCheck` function is provided, the`http2stream.respondWithFD()` method will perform an `fs.fstat()` call to\\n         * collect details on the provided file descriptor.\\n         *\\n         * The `offset` and `length` options may be used to limit the response to a\\n         * specific range subset. This can be used, for instance, to support HTTP Range\\n         * requests.\\n         *\\n         * The file descriptor or `FileHandle` is not closed when the stream is closed,\\n         * so it will need to be closed manually once it is no longer needed.\\n         * Using the same file descriptor concurrently for multiple streams\\n         * is not supported and may result in data loss. Re-using a file descriptor\\n         * after a stream has finished is supported.\\n         *\\n         * When the `options.waitForTrailers` option is set, the `'wantTrailers'` event\\n         * will be emitted immediately after queuing the last chunk of payload data to be\\n         * sent. The `http2stream.sendTrailers()` method can then be used to sent trailing\\n         * header fields to the peer.\\n         *\\n         * When `options.waitForTrailers` is set, the `Http2Stream` will not automatically\\n         * close when the final `DATA` frame is transmitted. User code _must_ call either`http2stream.sendTrailers()` or `http2stream.close()` to close the`Http2Stream`.\\n         *\\n         * ```js\\n         * const http2 = require('http2');\\n         * const fs = require('fs');\\n         *\\n         * const server = http2.createServer();\\n         * server.on('stream', (stream) => {\\n         *   const fd = fs.openSync('/some/file', 'r');\\n         *\\n         *   const stat = fs.fstatSync(fd);\\n         *   const headers = {\\n         *     'content-length': stat.size,\\n         *     'last-modified': stat.mtime.toUTCString(),\\n         *     'content-type': 'text/plain; charset=utf-8'\\n         *   };\\n         *   stream.respondWithFD(fd, headers, { waitForTrailers: true });\\n         *   stream.on('wantTrailers', () => {\\n         *     stream.sendTrailers({ ABC: 'some value to send' });\\n         *   });\\n         *\\n         *   stream.on('close', () => fs.closeSync(fd));\\n         * });\\n         * ```\\n         * @since v8.4.0\\n         * @param fd A readable file descriptor.\\n         */\\n        respondWithFD(fd: number | fs.promises.FileHandle, headers?: OutgoingHttpHeaders, options?: ServerStreamFileResponseOptions): void;\\n        /**\\n         * Sends a regular file as the response. The `path` must specify a regular file\\n         * or an `'error'` event will be emitted on the `Http2Stream` object.\\n         *\\n         * When used, the `Http2Stream` object's `Duplex` interface will be closed\\n         * automatically.\\n         *\\n         * The optional `options.statCheck` function may be specified to give user code\\n         * an opportunity to set additional content headers based on the `fs.Stat` details\\n         * of the given file:\\n         *\\n         * If an error occurs while attempting to read the file data, the `Http2Stream`will be closed using an `RST_STREAM` frame using the standard `INTERNAL_ERROR`code. If the `onError` callback is\\n         * defined, then it will be called. Otherwise\\n         * the stream will be destroyed.\\n         *\\n         * Example using a file path:\\n         *\\n         * ```js\\n         * const http2 = require('http2');\\n         * const server = http2.createServer();\\n         * server.on('stream', (stream) => {\\n         *   function statCheck(stat, headers) {\\n         *     headers['last-modified'] = stat.mtime.toUTCString();\\n         *   }\\n         *\\n         *   function onError(err) {\\n         *     // stream.respond() can throw if the stream has been destroyed by\\n         *     // the other side.\\n         *     try {\\n         *       if (err.code === 'ENOENT') {\\n         *         stream.respond({ ':status': 404 });\\n         *       } else {\\n         *         stream.respond({ ':status': 500 });\\n         *       }\\n         *     } catch (err) {\\n         *       // Perform actual error handling.\\n         *       console.log(err);\\n         *     }\\n         *     stream.end();\\n         *   }\\n         *\\n         *   stream.respondWithFile('/some/file',\\n         *                          { 'content-type': 'text/plain; charset=utf-8' },\\n         *                          { statCheck, onError });\\n         * });\\n         * ```\\n         *\\n         * The `options.statCheck` function may also be used to cancel the send operation\\n         * by returning `false`. For instance, a conditional request may check the stat\\n         * results to determine if the file has been modified to return an appropriate`304` response:\\n         *\\n         * ```js\\n         * const http2 = require('http2');\\n         * const server = http2.createServer();\\n         * server.on('stream', (stream) => {\\n         *   function statCheck(stat, headers) {\\n         *     // Check the stat here...\\n         *     stream.respond({ ':status': 304 });\\n         *     return false; // Cancel the send operation\\n         *   }\\n         *   stream.respondWithFile('/some/file',\\n         *                          { 'content-type': 'text/plain; charset=utf-8' },\\n         *                          { statCheck });\\n         * });\\n         * ```\\n         *\\n         * The `content-length` header field will be automatically set.\\n         *\\n         * The `offset` and `length` options may be used to limit the response to a\\n         * specific range subset. This can be used, for instance, to support HTTP Range\\n         * requests.\\n         *\\n         * The `options.onError` function may also be used to handle all the errors\\n         * that could happen before the delivery of the file is initiated. The\\n         * default behavior is to destroy the stream.\\n         *\\n         * When the `options.waitForTrailers` option is set, the `'wantTrailers'` event\\n         * will be emitted immediately after queuing the last chunk of payload data to be\\n         * sent. The `http2stream.sendTrailers()` method can then be used to sent trailing\\n         * header fields to the peer.\\n         *\\n         * When `options.waitForTrailers` is set, the `Http2Stream` will not automatically\\n         * close when the final `DATA` frame is transmitted. User code must call either`http2stream.sendTrailers()` or `http2stream.close()` to close the`Http2Stream`.\\n         *\\n         * ```js\\n         * const http2 = require('http2');\\n         * const server = http2.createServer();\\n         * server.on('stream', (stream) => {\\n         *   stream.respondWithFile('/some/file',\\n         *                          { 'content-type': 'text/plain; charset=utf-8' },\\n         *                          { waitForTrailers: true });\\n         *   stream.on('wantTrailers', () => {\\n         *     stream.sendTrailers({ ABC: 'some value to send' });\\n         *   });\\n         * });\\n         * ```\\n         * @since v8.4.0\\n         */\\n        respondWithFile(path: string, headers?: OutgoingHttpHeaders, options?: ServerStreamFileResponseOptionsWithError): void;\\n    }\\n    // Http2Session\\n    export interface Settings {\\n        headerTableSize?: number | undefined;\\n        enablePush?: boolean | undefined;\\n        initialWindowSize?: number | undefined;\\n        maxFrameSize?: number | undefined;\\n        maxConcurrentStreams?: number | undefined;\\n        maxHeaderListSize?: number | undefined;\\n        enableConnectProtocol?: boolean | undefined;\\n    }\\n    export interface ClientSessionRequestOptions {\\n        endStream?: boolean | undefined;\\n        exclusive?: boolean | undefined;\\n        parent?: number | undefined;\\n        weight?: number | undefined;\\n        waitForTrailers?: boolean | undefined;\\n        signal?: AbortSignal | undefined;\\n    }\\n    export interface SessionState {\\n        effectiveLocalWindowSize?: number | undefined;\\n        effectiveRecvDataLength?: number | undefined;\\n        nextStreamID?: number | undefined;\\n        localWindowSize?: number | undefined;\\n        lastProcStreamID?: number | undefined;\\n        remoteWindowSize?: number | undefined;\\n        outboundQueueSize?: number | undefined;\\n        deflateDynamicTableSize?: number | undefined;\\n        inflateDynamicTableSize?: number | undefined;\\n    }\\n    export interface Http2Session extends EventEmitter {\\n        /**\\n         * Value will be `undefined` if the `Http2Session` is not yet connected to a\\n         * socket, `h2c` if the `Http2Session` is not connected to a `TLSSocket`, or\\n         * will return the value of the connected `TLSSocket`'s own `alpnProtocol`property.\\n         * @since v9.4.0\\n         */\\n        readonly alpnProtocol?: string | undefined;\\n        /**\\n         * Will be `true` if this `Http2Session` instance has been closed, otherwise`false`.\\n         * @since v9.4.0\\n         */\\n        readonly closed: boolean;\\n        /**\\n         * Will be `true` if this `Http2Session` instance is still connecting, will be set\\n         * to `false` before emitting `connect` event and/or calling the `http2.connect`callback.\\n         * @since v10.0.0\\n         */\\n        readonly connecting: boolean;\\n        /**\\n         * Will be `true` if this `Http2Session` instance has been destroyed and must no\\n         * longer be used, otherwise `false`.\\n         * @since v8.4.0\\n         */\\n        readonly destroyed: boolean;\\n        /**\\n         * Value is `undefined` if the `Http2Session` session socket has not yet been\\n         * connected, `true` if the `Http2Session` is connected with a `TLSSocket`,\\n         * and `false` if the `Http2Session` is connected to any other kind of socket\\n         * or stream.\\n         * @since v9.4.0\\n         */\\n        readonly encrypted?: boolean | undefined;\\n        /**\\n         * A prototype-less object describing the current local settings of this`Http2Session`. The local settings are local to _this_`Http2Session` instance.\\n         * @since v8.4.0\\n         */\\n        readonly localSettings: Settings;\\n        /**\\n         * If the `Http2Session` is connected to a `TLSSocket`, the `originSet` property\\n         * will return an `Array` of origins for which the `Http2Session` may be\\n         * considered authoritative.\\n         *\\n         * The `originSet` property is only available when using a secure TLS connection.\\n         * @since v9.4.0\\n         */\\n        readonly originSet?: string[] | undefined;\\n        /**\\n         * Indicates whether the `Http2Session` is currently waiting for acknowledgment of\\n         * a sent `SETTINGS` frame. Will be `true` after calling the`http2session.settings()` method. Will be `false` once all sent `SETTINGS`frames have been acknowledged.\\n         * @since v8.4.0\\n         */\\n        readonly pendingSettingsAck: boolean;\\n        /**\\n         * A prototype-less object describing the current remote settings of this`Http2Session`. The remote settings are set by the _connected_ HTTP/2 peer.\\n         * @since v8.4.0\\n         */\\n        readonly remoteSettings: Settings;\\n        /**\\n         * Returns a `Proxy` object that acts as a `net.Socket` (or `tls.TLSSocket`) but\\n         * limits available methods to ones safe to use with HTTP/2.\\n         *\\n         * `destroy`, `emit`, `end`, `pause`, `read`, `resume`, and `write` will throw\\n         * an error with code `ERR_HTTP2_NO_SOCKET_MANIPULATION`. See `Http2Session and Sockets` for more information.\\n         *\\n         * `setTimeout` method will be called on this `Http2Session`.\\n         *\\n         * All other interactions will be routed directly to the socket.\\n         * @since v8.4.0\\n         */\\n        readonly socket: net.Socket | tls.TLSSocket;\\n        /**\\n         * Provides miscellaneous information about the current state of the`Http2Session`.\\n         *\\n         * An object describing the current status of this `Http2Session`.\\n         * @since v8.4.0\\n         */\\n        readonly state: SessionState;\\n        /**\\n         * The `http2session.type` will be equal to`http2.constants.NGHTTP2_SESSION_SERVER` if this `Http2Session` instance is a\\n         * server, and `http2.constants.NGHTTP2_SESSION_CLIENT` if the instance is a\\n         * client.\\n         * @since v8.4.0\\n         */\\n        readonly type: number;\\n        /**\\n         * Gracefully closes the `Http2Session`, allowing any existing streams to\\n         * complete on their own and preventing new `Http2Stream` instances from being\\n         * created. Once closed, `http2session.destroy()`_might_ be called if there\\n         * are no open `Http2Stream` instances.\\n         *\\n         * If specified, the `callback` function is registered as a handler for the`'close'` event.\\n         * @since v9.4.0\\n         */\\n        close(callback?: () => void): void;\\n        /**\\n         * Immediately terminates the `Http2Session` and the associated `net.Socket` or`tls.TLSSocket`.\\n         *\\n         * Once destroyed, the `Http2Session` will emit the `'close'` event. If `error`is not undefined, an `'error'` event will be emitted immediately before the`'close'` event.\\n         *\\n         * If there are any remaining open `Http2Streams` associated with the`Http2Session`, those will also be destroyed.\\n         * @since v8.4.0\\n         * @param error An `Error` object if the `Http2Session` is being destroyed due to an error.\\n         * @param code The HTTP/2 error code to send in the final `GOAWAY` frame. If unspecified, and `error` is not undefined, the default is `INTERNAL_ERROR`, otherwise defaults to `NO_ERROR`.\\n         */\\n        destroy(error?: Error, code?: number): void;\\n        /**\\n         * Transmits a `GOAWAY` frame to the connected peer _without_ shutting down the`Http2Session`.\\n         * @since v9.4.0\\n         * @param code An HTTP/2 error code\\n         * @param lastStreamID The numeric ID of the last processed `Http2Stream`\\n         * @param opaqueData A `TypedArray` or `DataView` instance containing additional data to be carried within the `GOAWAY` frame.\\n         */\\n        goaway(code?: number, lastStreamID?: number, opaqueData?: NodeJS.ArrayBufferView): void;\\n        /**\\n         * Sends a `PING` frame to the connected HTTP/2 peer. A `callback` function must\\n         * be provided. The method will return `true` if the `PING` was sent, `false`otherwise.\\n         *\\n         * The maximum number of outstanding (unacknowledged) pings is determined by the`maxOutstandingPings` configuration option. The default maximum is 10.\\n         *\\n         * If provided, the `payload` must be a `Buffer`, `TypedArray`, or `DataView`containing 8 bytes of data that will be transmitted with the `PING` and\\n         * returned with the ping acknowledgment.\\n         *\\n         * The callback will be invoked with three arguments: an error argument that will\\n         * be `null` if the `PING` was successfully acknowledged, a `duration` argument\\n         * that reports the number of milliseconds elapsed since the ping was sent and the\\n         * acknowledgment was received, and a `Buffer` containing the 8-byte `PING`payload.\\n         *\\n         * ```js\\n         * session.ping(Buffer.from('abcdefgh'), (err, duration, payload) => {\\n         *   if (!err) {\\n         *     console.log(`Ping acknowledged in ${duration} milliseconds`);\\n         *     console.log(`With payload '${payload.toString()}'`);\\n         *   }\\n         * });\\n         * ```\\n         *\\n         * If the `payload` argument is not specified, the default payload will be the\\n         * 64-bit timestamp (little endian) marking the start of the `PING` duration.\\n         * @since v8.9.3\\n         * @param payload Optional ping payload.\\n         */\\n        ping(callback: (err: Error | null, duration: number, payload: Buffer) => void): boolean;\\n        ping(payload: NodeJS.ArrayBufferView, callback: (err: Error | null, duration: number, payload: Buffer) => void): boolean;\\n        /**\\n         * Calls `ref()` on this `Http2Session`instance's underlying `net.Socket`.\\n         * @since v9.4.0\\n         */\\n        ref(): void;\\n        /**\\n         * Sets the local endpoint's window size.\\n         * The `windowSize` is the total window size to set, not\\n         * the delta.\\n         *\\n         * ```js\\n         * const http2 = require('http2');\\n         *\\n         * const server = http2.createServer();\\n         * const expectedWindowSize = 2 ** 20;\\n         * server.on('connect', (session) => {\\n         *\\n         *   // Set local window size to be 2 ** 20\\n         *   session.setLocalWindowSize(expectedWindowSize);\\n         * });\\n         * ```\\n         * @since v15.3.0, v14.18.0\\n         */\\n        setLocalWindowSize(windowSize: number): void;\\n        /**\\n         * Used to set a callback function that is called when there is no activity on\\n         * the `Http2Session` after `msecs` milliseconds. The given `callback` is\\n         * registered as a listener on the `'timeout'` event.\\n         * @since v8.4.0\\n         */\\n        setTimeout(msecs: number, callback?: () => void): void;\\n        /**\\n         * Updates the current local settings for this `Http2Session` and sends a new`SETTINGS` frame to the connected HTTP/2 peer.\\n         *\\n         * Once called, the `http2session.pendingSettingsAck` property will be `true`while the session is waiting for the remote peer to acknowledge the new\\n         * settings.\\n         *\\n         * The new settings will not become effective until the `SETTINGS` acknowledgment\\n         * is received and the `'localSettings'` event is emitted. It is possible to send\\n         * multiple `SETTINGS` frames while acknowledgment is still pending.\\n         * @since v8.4.0\\n         * @param callback Callback that is called once the session is connected or right away if the session is already connected.\\n         */\\n        settings(settings: Settings, callback?: (err: Error | null, settings: Settings, duration: number) => void): void;\\n        /**\\n         * Calls `unref()` on this `Http2Session`instance's underlying `net.Socket`.\\n         * @since v9.4.0\\n         */\\n        unref(): void;\\n        addListener(event: 'close', listener: () => void): this;\\n        addListener(event: 'error', listener: (err: Error) => void): this;\\n        addListener(event: 'frameError', listener: (frameType: number, errorCode: number, streamID: number) => void): this;\\n        addListener(event: 'goaway', listener: (errorCode: number, lastStreamID: number, opaqueData: Buffer) => void): this;\\n        addListener(event: 'localSettings', listener: (settings: Settings) => void): this;\\n        addListener(event: 'ping', listener: () => void): this;\\n        addListener(event: 'remoteSettings', listener: (settings: Settings) => void): this;\\n        addListener(event: 'timeout', listener: () => void): this;\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        emit(event: 'close'): boolean;\\n        emit(event: 'error', err: Error): boolean;\\n        emit(event: 'frameError', frameType: number, errorCode: number, streamID: number): boolean;\\n        emit(event: 'goaway', errorCode: number, lastStreamID: number, opaqueData: Buffer): boolean;\\n        emit(event: 'localSettings', settings: Settings): boolean;\\n        emit(event: 'ping'): boolean;\\n        emit(event: 'remoteSettings', settings: Settings): boolean;\\n        emit(event: 'timeout'): boolean;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        on(event: 'close', listener: () => void): this;\\n        on(event: 'error', listener: (err: Error) => void): this;\\n        on(event: 'frameError', listener: (frameType: number, errorCode: number, streamID: number) => void): this;\\n        on(event: 'goaway', listener: (errorCode: number, lastStreamID: number, opaqueData: Buffer) => void): this;\\n        on(event: 'localSettings', listener: (settings: Settings) => void): this;\\n        on(event: 'ping', listener: () => void): this;\\n        on(event: 'remoteSettings', listener: (settings: Settings) => void): this;\\n        on(event: 'timeout', listener: () => void): this;\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\n        once(event: 'close', listener: () => void): this;\\n        once(event: 'error', listener: (err: Error) => void): this;\\n        once(event: 'frameError', listener: (frameType: number, errorCode: number, streamID: number) => void): this;\\n        once(event: 'goaway', listener: (errorCode: number, lastStreamID: number, opaqueData: Buffer) => void): this;\\n        once(event: 'localSettings', listener: (settings: Settings) => void): this;\\n        once(event: 'ping', listener: () => void): this;\\n        once(event: 'remoteSettings', listener: (settings: Settings) => void): this;\\n        once(event: 'timeout', listener: () => void): this;\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'close', listener: () => void): this;\\n        prependListener(event: 'error', listener: (err: Error) => void): this;\\n        prependListener(event: 'frameError', listener: (frameType: number, errorCode: number, streamID: number) => void): this;\\n        prependListener(event: 'goaway', listener: (errorCode: number, lastStreamID: number, opaqueData: Buffer) => void): this;\\n        prependListener(event: 'localSettings', listener: (settings: Settings) => void): this;\\n        prependListener(event: 'ping', listener: () => void): this;\\n        prependListener(event: 'remoteSettings', listener: (settings: Settings) => void): this;\\n        prependListener(event: 'timeout', listener: () => void): this;\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'close', listener: () => void): this;\\n        prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n        prependOnceListener(event: 'frameError', listener: (frameType: number, errorCode: number, streamID: number) => void): this;\\n        prependOnceListener(event: 'goaway', listener: (errorCode: number, lastStreamID: number, opaqueData: Buffer) => void): this;\\n        prependOnceListener(event: 'localSettings', listener: (settings: Settings) => void): this;\\n        prependOnceListener(event: 'ping', listener: () => void): this;\\n        prependOnceListener(event: 'remoteSettings', listener: (settings: Settings) => void): this;\\n        prependOnceListener(event: 'timeout', listener: () => void): this;\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n    }\\n    export interface ClientHttp2Session extends Http2Session {\\n        /**\\n         * For HTTP/2 Client `Http2Session` instances only, the `http2session.request()`creates and returns an `Http2Stream` instance that can be used to send an\\n         * HTTP/2 request to the connected server.\\n         *\\n         * When a `ClientHttp2Session` is first created, the socket may not yet be\\n         * connected. if `clienthttp2session.request()` is called during this time, the\\n         * actual request will be deferred until the socket is ready to go.\\n         * If the `session` is closed before the actual request be executed, an`ERR_HTTP2_GOAWAY_SESSION` is thrown.\\n         *\\n         * This method is only available if `http2session.type` is equal to`http2.constants.NGHTTP2_SESSION_CLIENT`.\\n         *\\n         * ```js\\n         * const http2 = require('http2');\\n         * const clientSession = http2.connect('https://localhost:1234');\\n         * const {\\n         *   HTTP2_HEADER_PATH,\\n         *   HTTP2_HEADER_STATUS\\n         * } = http2.constants;\\n         *\\n         * const req = clientSession.request({ [HTTP2_HEADER_PATH]: '/' });\\n         * req.on('response', (headers) => {\\n         *   console.log(headers[HTTP2_HEADER_STATUS]);\\n         *   req.on('data', (chunk) => { // ..  });\\n         *   req.on('end', () => { // ..  });\\n         * });\\n         * ```\\n         *\\n         * When the `options.waitForTrailers` option is set, the `'wantTrailers'` event\\n         * is emitted immediately after queuing the last chunk of payload data to be sent.\\n         * The `http2stream.sendTrailers()` method can then be called to send trailing\\n         * headers to the peer.\\n         *\\n         * When `options.waitForTrailers` is set, the `Http2Stream` will not automatically\\n         * close when the final `DATA` frame is transmitted. User code must call either`http2stream.sendTrailers()` or `http2stream.close()` to close the`Http2Stream`.\\n         *\\n         * When `options.signal` is set with an `AbortSignal` and then `abort` on the\\n         * corresponding `AbortController` is called, the request will emit an `'error'`event with an `AbortError` error.\\n         *\\n         * The `:method` and `:path` pseudo-headers are not specified within `headers`,\\n         * they respectively default to:\\n         *\\n         * * `:method` \\\\= `'GET'`\\n         * * `:path` \\\\= `/`\\n         * @since v8.4.0\\n         */\\n        request(headers?: OutgoingHttpHeaders, options?: ClientSessionRequestOptions): ClientHttp2Stream;\\n        addListener(event: 'altsvc', listener: (alt: string, origin: string, stream: number) => void): this;\\n        addListener(event: 'origin', listener: (origins: string[]) => void): this;\\n        addListener(event: 'connect', listener: (session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\\n        addListener(event: 'stream', listener: (stream: ClientHttp2Stream, headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        emit(event: 'altsvc', alt: string, origin: string, stream: number): boolean;\\n        emit(event: 'origin', origins: ReadonlyArray<string>): boolean;\\n        emit(event: 'connect', session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket): boolean;\\n        emit(event: 'stream', stream: ClientHttp2Stream, headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number): boolean;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        on(event: 'altsvc', listener: (alt: string, origin: string, stream: number) => void): this;\\n        on(event: 'origin', listener: (origins: string[]) => void): this;\\n        on(event: 'connect', listener: (session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\\n        on(event: 'stream', listener: (stream: ClientHttp2Stream, headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\n        once(event: 'altsvc', listener: (alt: string, origin: string, stream: number) => void): this;\\n        once(event: 'origin', listener: (origins: string[]) => void): this;\\n        once(event: 'connect', listener: (session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\\n        once(event: 'stream', listener: (stream: ClientHttp2Stream, headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'altsvc', listener: (alt: string, origin: string, stream: number) => void): this;\\n        prependListener(event: 'origin', listener: (origins: string[]) => void): this;\\n        prependListener(event: 'connect', listener: (session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\\n        prependListener(event: 'stream', listener: (stream: ClientHttp2Stream, headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'altsvc', listener: (alt: string, origin: string, stream: number) => void): this;\\n        prependOnceListener(event: 'origin', listener: (origins: string[]) => void): this;\\n        prependOnceListener(event: 'connect', listener: (session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\\n        prependOnceListener(event: 'stream', listener: (stream: ClientHttp2Stream, headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n    }\\n    export interface AlternativeServiceOptions {\\n        origin: number | string | url.URL;\\n    }\\n    export interface ServerHttp2Session extends Http2Session {\\n        readonly server: Http2Server | Http2SecureServer;\\n        /**\\n         * Submits an `ALTSVC` frame (as defined by [RFC 7838](https://tools.ietf.org/html/rfc7838)) to the connected client.\\n         *\\n         * ```js\\n         * const http2 = require('http2');\\n         *\\n         * const server = http2.createServer();\\n         * server.on('session', (session) => {\\n         *   // Set altsvc for origin https://example.org:80\\n         *   session.altsvc('h2=\\\":8000\\\"', 'https://example.org:80');\\n         * });\\n         *\\n         * server.on('stream', (stream) => {\\n         *   // Set altsvc for a specific stream\\n         *   stream.session.altsvc('h2=\\\":8000\\\"', stream.id);\\n         * });\\n         * ```\\n         *\\n         * Sending an `ALTSVC` frame with a specific stream ID indicates that the alternate\\n         * service is associated with the origin of the given `Http2Stream`.\\n         *\\n         * The `alt` and origin string _must_ contain only ASCII bytes and are\\n         * strictly interpreted as a sequence of ASCII bytes. The special value `'clear'`may be passed to clear any previously set alternative service for a given\\n         * domain.\\n         *\\n         * When a string is passed for the `originOrStream` argument, it will be parsed as\\n         * a URL and the origin will be derived. For instance, the origin for the\\n         * HTTP URL `'https://example.org/foo/bar'` is the ASCII string`'https://example.org'`. An error will be thrown if either the given string\\n         * cannot be parsed as a URL or if a valid origin cannot be derived.\\n         *\\n         * A `URL` object, or any object with an `origin` property, may be passed as`originOrStream`, in which case the value of the `origin` property will be\\n         * used. The value of the `origin` property _must_ be a properly serialized\\n         * ASCII origin.\\n         * @since v9.4.0\\n         * @param alt A description of the alternative service configuration as defined by `RFC 7838`.\\n         * @param originOrStream Either a URL string specifying the origin (or an `Object` with an `origin` property) or the numeric identifier of an active `Http2Stream` as given by the\\n         * `http2stream.id` property.\\n         */\\n        altsvc(alt: string, originOrStream: number | string | url.URL | AlternativeServiceOptions): void;\\n        /**\\n         * Submits an `ORIGIN` frame (as defined by [RFC 8336](https://tools.ietf.org/html/rfc8336)) to the connected client\\n         * to advertise the set of origins for which the server is capable of providing\\n         * authoritative responses.\\n         *\\n         * ```js\\n         * const http2 = require('http2');\\n         * const options = getSecureOptionsSomehow();\\n         * const server = http2.createSecureServer(options);\\n         * server.on('stream', (stream) => {\\n         *   stream.respond();\\n         *   stream.end('ok');\\n         * });\\n         * server.on('session', (session) => {\\n         *   session.origin('https://example.com', 'https://example.org');\\n         * });\\n         * ```\\n         *\\n         * When a string is passed as an `origin`, it will be parsed as a URL and the\\n         * origin will be derived. For instance, the origin for the HTTP URL`'https://example.org/foo/bar'` is the ASCII string`'https://example.org'`. An error will be thrown if either the given\\n         * string\\n         * cannot be parsed as a URL or if a valid origin cannot be derived.\\n         *\\n         * A `URL` object, or any object with an `origin` property, may be passed as\\n         * an `origin`, in which case the value of the `origin` property will be\\n         * used. The value of the `origin` property _must_ be a properly serialized\\n         * ASCII origin.\\n         *\\n         * Alternatively, the `origins` option may be used when creating a new HTTP/2\\n         * server using the `http2.createSecureServer()` method:\\n         *\\n         * ```js\\n         * const http2 = require('http2');\\n         * const options = getSecureOptionsSomehow();\\n         * options.origins = ['https://example.com', 'https://example.org'];\\n         * const server = http2.createSecureServer(options);\\n         * server.on('stream', (stream) => {\\n         *   stream.respond();\\n         *   stream.end('ok');\\n         * });\\n         * ```\\n         * @since v10.12.0\\n         * @param origins One or more URL Strings passed as separate arguments.\\n         */\\n        origin(\\n            ...origins: Array<\\n                | string\\n                | url.URL\\n                | {\\n                      origin: string;\\n                  }\\n            >\\n        ): void;\\n        addListener(event: 'connect', listener: (session: ServerHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\\n        addListener(event: 'stream', listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        emit(event: 'connect', session: ServerHttp2Session, socket: net.Socket | tls.TLSSocket): boolean;\\n        emit(event: 'stream', stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number): boolean;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        on(event: 'connect', listener: (session: ServerHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\\n        on(event: 'stream', listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\n        once(event: 'connect', listener: (session: ServerHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\\n        once(event: 'stream', listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'connect', listener: (session: ServerHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\\n        prependListener(event: 'stream', listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'connect', listener: (session: ServerHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\\n        prependOnceListener(event: 'stream', listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n    }\\n    // Http2Server\\n    export interface SessionOptions {\\n        maxDeflateDynamicTableSize?: number | undefined;\\n        maxSessionMemory?: number | undefined;\\n        maxHeaderListPairs?: number | undefined;\\n        maxOutstandingPings?: number | undefined;\\n        maxSendHeaderBlockLength?: number | undefined;\\n        paddingStrategy?: number | undefined;\\n        peerMaxConcurrentStreams?: number | undefined;\\n        settings?: Settings | undefined;\\n        /**\\n         * Specifies a timeout in milliseconds that\\n         * a server should wait when an [`'unknownProtocol'`][] is emitted. If the\\n         * socket has not been destroyed by that time the server will destroy it.\\n         * @default 100000\\n         */\\n        unknownProtocolTimeout?: number | undefined;\\n        selectPadding?(frameLen: number, maxFrameLen: number): number;\\n    }\\n    export interface ClientSessionOptions extends SessionOptions {\\n        maxReservedRemoteStreams?: number | undefined;\\n        createConnection?: ((authority: url.URL, option: SessionOptions) => stream.Duplex) | undefined;\\n        protocol?: 'http:' | 'https:' | undefined;\\n    }\\n    export interface ServerSessionOptions extends SessionOptions {\\n        Http1IncomingMessage?: typeof IncomingMessage | undefined;\\n        Http1ServerResponse?: typeof ServerResponse | undefined;\\n        Http2ServerRequest?: typeof Http2ServerRequest | undefined;\\n        Http2ServerResponse?: typeof Http2ServerResponse | undefined;\\n    }\\n    export interface SecureClientSessionOptions extends ClientSessionOptions, tls.ConnectionOptions {}\\n    export interface SecureServerSessionOptions extends ServerSessionOptions, tls.TlsOptions {}\\n    export interface ServerOptions extends ServerSessionOptions {}\\n    export interface SecureServerOptions extends SecureServerSessionOptions {\\n        allowHTTP1?: boolean | undefined;\\n        origins?: string[] | undefined;\\n    }\\n    interface HTTP2ServerCommon {\\n        setTimeout(msec?: number, callback?: () => void): this;\\n        /**\\n         * Throws ERR_HTTP2_INVALID_SETTING_VALUE for invalid settings values.\\n         * Throws ERR_INVALID_ARG_TYPE for invalid settings argument.\\n         */\\n        updateSettings(settings: Settings): void;\\n    }\\n    export interface Http2Server extends net.Server, HTTP2ServerCommon {\\n        addListener(event: 'checkContinue', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        addListener(event: 'request', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        addListener(event: 'session', listener: (session: ServerHttp2Session) => void): this;\\n        addListener(event: 'sessionError', listener: (err: Error) => void): this;\\n        addListener(event: 'stream', listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\n        addListener(event: 'timeout', listener: () => void): this;\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        emit(event: 'checkContinue', request: Http2ServerRequest, response: Http2ServerResponse): boolean;\\n        emit(event: 'request', request: Http2ServerRequest, response: Http2ServerResponse): boolean;\\n        emit(event: 'session', session: ServerHttp2Session): boolean;\\n        emit(event: 'sessionError', err: Error): boolean;\\n        emit(event: 'stream', stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number): boolean;\\n        emit(event: 'timeout'): boolean;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        on(event: 'checkContinue', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        on(event: 'request', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        on(event: 'session', listener: (session: ServerHttp2Session) => void): this;\\n        on(event: 'sessionError', listener: (err: Error) => void): this;\\n        on(event: 'stream', listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\n        on(event: 'timeout', listener: () => void): this;\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\n        once(event: 'checkContinue', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        once(event: 'request', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        once(event: 'session', listener: (session: ServerHttp2Session) => void): this;\\n        once(event: 'sessionError', listener: (err: Error) => void): this;\\n        once(event: 'stream', listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\n        once(event: 'timeout', listener: () => void): this;\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'checkContinue', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        prependListener(event: 'request', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        prependListener(event: 'session', listener: (session: ServerHttp2Session) => void): this;\\n        prependListener(event: 'sessionError', listener: (err: Error) => void): this;\\n        prependListener(event: 'stream', listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\n        prependListener(event: 'timeout', listener: () => void): this;\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'checkContinue', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        prependOnceListener(event: 'request', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        prependOnceListener(event: 'session', listener: (session: ServerHttp2Session) => void): this;\\n        prependOnceListener(event: 'sessionError', listener: (err: Error) => void): this;\\n        prependOnceListener(event: 'stream', listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\n        prependOnceListener(event: 'timeout', listener: () => void): this;\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n    }\\n    export interface Http2SecureServer extends tls.Server, HTTP2ServerCommon {\\n        addListener(event: 'checkContinue', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        addListener(event: 'request', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        addListener(event: 'session', listener: (session: ServerHttp2Session) => void): this;\\n        addListener(event: 'sessionError', listener: (err: Error) => void): this;\\n        addListener(event: 'stream', listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\n        addListener(event: 'timeout', listener: () => void): this;\\n        addListener(event: 'unknownProtocol', listener: (socket: tls.TLSSocket) => void): this;\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        emit(event: 'checkContinue', request: Http2ServerRequest, response: Http2ServerResponse): boolean;\\n        emit(event: 'request', request: Http2ServerRequest, response: Http2ServerResponse): boolean;\\n        emit(event: 'session', session: ServerHttp2Session): boolean;\\n        emit(event: 'sessionError', err: Error): boolean;\\n        emit(event: 'stream', stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number): boolean;\\n        emit(event: 'timeout'): boolean;\\n        emit(event: 'unknownProtocol', socket: tls.TLSSocket): boolean;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        on(event: 'checkContinue', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        on(event: 'request', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        on(event: 'session', listener: (session: ServerHttp2Session) => void): this;\\n        on(event: 'sessionError', listener: (err: Error) => void): this;\\n        on(event: 'stream', listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\n        on(event: 'timeout', listener: () => void): this;\\n        on(event: 'unknownProtocol', listener: (socket: tls.TLSSocket) => void): this;\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\n        once(event: 'checkContinue', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        once(event: 'request', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        once(event: 'session', listener: (session: ServerHttp2Session) => void): this;\\n        once(event: 'sessionError', listener: (err: Error) => void): this;\\n        once(event: 'stream', listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\n        once(event: 'timeout', listener: () => void): this;\\n        once(event: 'unknownProtocol', listener: (socket: tls.TLSSocket) => void): this;\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'checkContinue', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        prependListener(event: 'request', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        prependListener(event: 'session', listener: (session: ServerHttp2Session) => void): this;\\n        prependListener(event: 'sessionError', listener: (err: Error) => void): this;\\n        prependListener(event: 'stream', listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\n        prependListener(event: 'timeout', listener: () => void): this;\\n        prependListener(event: 'unknownProtocol', listener: (socket: tls.TLSSocket) => void): this;\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'checkContinue', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        prependOnceListener(event: 'request', listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\n        prependOnceListener(event: 'session', listener: (session: ServerHttp2Session) => void): this;\\n        prependOnceListener(event: 'sessionError', listener: (err: Error) => void): this;\\n        prependOnceListener(event: 'stream', listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\n        prependOnceListener(event: 'timeout', listener: () => void): this;\\n        prependOnceListener(event: 'unknownProtocol', listener: (socket: tls.TLSSocket) => void): this;\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n    }\\n    /**\\n     * A `Http2ServerRequest` object is created by {@link Server} or {@link SecureServer} and passed as the first argument to the `'request'` event. It may be used to access a request status,\\n     * headers, and\\n     * data.\\n     * @since v8.4.0\\n     */\\n    export class Http2ServerRequest extends stream.Readable {\\n        constructor(stream: ServerHttp2Stream, headers: IncomingHttpHeaders, options: stream.ReadableOptions, rawHeaders: ReadonlyArray<string>);\\n        /**\\n         * The `request.aborted` property will be `true` if the request has\\n         * been aborted.\\n         * @since v10.1.0\\n         */\\n        readonly aborted: boolean;\\n        /**\\n         * The request authority pseudo header field. Because HTTP/2 allows requests\\n         * to set either `:authority` or `host`, this value is derived from`req.headers[':authority']` if present. Otherwise, it is derived from`req.headers['host']`.\\n         * @since v8.4.0\\n         */\\n        readonly authority: string;\\n        /**\\n         * See `request.socket`.\\n         * @since v8.4.0\\n         * @deprecated Since v13.0.0 - Use `socket`.\\n         */\\n        readonly connection: net.Socket | tls.TLSSocket;\\n        /**\\n         * The `request.complete` property will be `true` if the request has\\n         * been completed, aborted, or destroyed.\\n         * @since v12.10.0\\n         */\\n        readonly complete: boolean;\\n        /**\\n         * The request/response headers object.\\n         *\\n         * Key-value pairs of header names and values. Header names are lower-cased.\\n         *\\n         * ```js\\n         * // Prints something like:\\n         * //\\n         * // { 'user-agent': 'curl/7.22.0',\\n         * //   host: '127.0.0.1:8000',\\n         * //   accept: '*' }\\n         * console.log(request.headers);\\n         * ```\\n         *\\n         * See `HTTP/2 Headers Object`.\\n         *\\n         * In HTTP/2, the request path, host name, protocol, and method are represented as\\n         * special headers prefixed with the `:` character (e.g. `':path'`). These special\\n         * headers will be included in the `request.headers` object. Care must be taken not\\n         * to inadvertently modify these special headers or errors may occur. For instance,\\n         * removing all headers from the request will cause errors to occur:\\n         *\\n         * ```js\\n         * removeAllHeaders(request.headers);\\n         * assert(request.url);   // Fails because the :path header has been removed\\n         * ```\\n         * @since v8.4.0\\n         */\\n        readonly headers: IncomingHttpHeaders;\\n        /**\\n         * In case of server request, the HTTP version sent by the client. In the case of\\n         * client response, the HTTP version of the connected-to server. Returns`'2.0'`.\\n         *\\n         * Also `message.httpVersionMajor` is the first integer and`message.httpVersionMinor` is the second.\\n         * @since v8.4.0\\n         */\\n        readonly httpVersion: string;\\n        readonly httpVersionMinor: number;\\n        readonly httpVersionMajor: number;\\n        /**\\n         * The request method as a string. Read-only. Examples: `'GET'`, `'DELETE'`.\\n         * @since v8.4.0\\n         */\\n        readonly method: string;\\n        /**\\n         * The raw request/response headers list exactly as they were received.\\n         *\\n         * The keys and values are in the same list. It is _not_ a\\n         * list of tuples. So, the even-numbered offsets are key values, and the\\n         * odd-numbered offsets are the associated values.\\n         *\\n         * Header names are not lowercased, and duplicates are not merged.\\n         *\\n         * ```js\\n         * // Prints something like:\\n         * //\\n         * // [ 'user-agent',\\n         * //   'this is invalid because there can be only one',\\n         * //   'User-Agent',\\n         * //   'curl/7.22.0',\\n         * //   'Host',\\n         * //   '127.0.0.1:8000',\\n         * //   'ACCEPT',\\n         * //   '*' ]\\n         * console.log(request.rawHeaders);\\n         * ```\\n         * @since v8.4.0\\n         */\\n        readonly rawHeaders: string[];\\n        /**\\n         * The raw request/response trailer keys and values exactly as they were\\n         * received. Only populated at the `'end'` event.\\n         * @since v8.4.0\\n         */\\n        readonly rawTrailers: string[];\\n        /**\\n         * The request scheme pseudo header field indicating the scheme\\n         * portion of the target URL.\\n         * @since v8.4.0\\n         */\\n        readonly scheme: string;\\n        /**\\n         * Returns a `Proxy` object that acts as a `net.Socket` (or `tls.TLSSocket`) but\\n         * applies getters, setters, and methods based on HTTP/2 logic.\\n         *\\n         * `destroyed`, `readable`, and `writable` properties will be retrieved from and\\n         * set on `request.stream`.\\n         *\\n         * `destroy`, `emit`, `end`, `on` and `once` methods will be called on`request.stream`.\\n         *\\n         * `setTimeout` method will be called on `request.stream.session`.\\n         *\\n         * `pause`, `read`, `resume`, and `write` will throw an error with code`ERR_HTTP2_NO_SOCKET_MANIPULATION`. See `Http2Session and Sockets` for\\n         * more information.\\n         *\\n         * All other interactions will be routed directly to the socket. With TLS support,\\n         * use `request.socket.getPeerCertificate()` to obtain the client's\\n         * authentication details.\\n         * @since v8.4.0\\n         */\\n        readonly socket: net.Socket | tls.TLSSocket;\\n        /**\\n         * The `Http2Stream` object backing the request.\\n         * @since v8.4.0\\n         */\\n        readonly stream: ServerHttp2Stream;\\n        /**\\n         * The request/response trailers object. Only populated at the `'end'` event.\\n         * @since v8.4.0\\n         */\\n        readonly trailers: IncomingHttpHeaders;\\n        /**\\n         * Request URL string. This contains only the URL that is present in the actual\\n         * HTTP request. If the request is:\\n         *\\n         * ```http\\n         * GET /status?name=ryan HTTP/1.1\\n         * Accept: text/plain\\n         * ```\\n         *\\n         * Then `request.url` will be:\\n         *\\n         * ```js\\n         * '/status?name=ryan'\\n         * ```\\n         *\\n         * To parse the url into its parts, `new URL()` can be used:\\n         *\\n         * ```console\\n         * $ node\\n         * > new URL('/status?name=ryan', 'http://example.com')\\n         * URL {\\n         *   href: 'http://example.com/status?name=ryan',\\n         *   origin: 'http://example.com',\\n         *   protocol: 'http:',\\n         *   username: '',\\n         *   password: '',\\n         *   host: 'example.com',\\n         *   hostname: 'example.com',\\n         *   port: '',\\n         *   pathname: '/status',\\n         *   search: '?name=ryan',\\n         *   searchParams: URLSearchParams { 'name' => 'ryan' },\\n         *   hash: ''\\n         * }\\n         * ```\\n         * @since v8.4.0\\n         */\\n        url: string;\\n        /**\\n         * Sets the `Http2Stream`'s timeout value to `msecs`. If a callback is\\n         * provided, then it is added as a listener on the `'timeout'` event on\\n         * the response object.\\n         *\\n         * If no `'timeout'` listener is added to the request, the response, or\\n         * the server, then `Http2Stream` s are destroyed when they time out. If a\\n         * handler is assigned to the request, the response, or the server's `'timeout'`events, timed out sockets must be handled explicitly.\\n         * @since v8.4.0\\n         */\\n        setTimeout(msecs: number, callback?: () => void): void;\\n        read(size?: number): Buffer | string | null;\\n        addListener(event: 'aborted', listener: (hadError: boolean, code: number) => void): this;\\n        addListener(event: 'close', listener: () => void): this;\\n        addListener(event: 'data', listener: (chunk: Buffer | string) => void): this;\\n        addListener(event: 'end', listener: () => void): this;\\n        addListener(event: 'readable', listener: () => void): this;\\n        addListener(event: 'error', listener: (err: Error) => void): this;\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        emit(event: 'aborted', hadError: boolean, code: number): boolean;\\n        emit(event: 'close'): boolean;\\n        emit(event: 'data', chunk: Buffer | string): boolean;\\n        emit(event: 'end'): boolean;\\n        emit(event: 'readable'): boolean;\\n        emit(event: 'error', err: Error): boolean;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        on(event: 'aborted', listener: (hadError: boolean, code: number) => void): this;\\n        on(event: 'close', listener: () => void): this;\\n        on(event: 'data', listener: (chunk: Buffer | string) => void): this;\\n        on(event: 'end', listener: () => void): this;\\n        on(event: 'readable', listener: () => void): this;\\n        on(event: 'error', listener: (err: Error) => void): this;\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\n        once(event: 'aborted', listener: (hadError: boolean, code: number) => void): this;\\n        once(event: 'close', listener: () => void): this;\\n        once(event: 'data', listener: (chunk: Buffer | string) => void): this;\\n        once(event: 'end', listener: () => void): this;\\n        once(event: 'readable', listener: () => void): this;\\n        once(event: 'error', listener: (err: Error) => void): this;\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'aborted', listener: (hadError: boolean, code: number) => void): this;\\n        prependListener(event: 'close', listener: () => void): this;\\n        prependListener(event: 'data', listener: (chunk: Buffer | string) => void): this;\\n        prependListener(event: 'end', listener: () => void): this;\\n        prependListener(event: 'readable', listener: () => void): this;\\n        prependListener(event: 'error', listener: (err: Error) => void): this;\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'aborted', listener: (hadError: boolean, code: number) => void): this;\\n        prependOnceListener(event: 'close', listener: () => void): this;\\n        prependOnceListener(event: 'data', listener: (chunk: Buffer | string) => void): this;\\n        prependOnceListener(event: 'end', listener: () => void): this;\\n        prependOnceListener(event: 'readable', listener: () => void): this;\\n        prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n    }\\n    /**\\n     * This object is created internally by an HTTP server, not by the user. It is\\n     * passed as the second parameter to the `'request'` event.\\n     * @since v8.4.0\\n     */\\n    export class Http2ServerResponse extends stream.Writable {\\n        constructor(stream: ServerHttp2Stream);\\n        /**\\n         * See `response.socket`.\\n         * @since v8.4.0\\n         * @deprecated Since v13.0.0 - Use `socket`.\\n         */\\n        readonly connection: net.Socket | tls.TLSSocket;\\n        /**\\n         * Boolean value that indicates whether the response has completed. Starts\\n         * as `false`. After `response.end()` executes, the value will be `true`.\\n         * @since v8.4.0\\n         * @deprecated Since v13.4.0,v12.16.0 - Use `writableEnded`.\\n         */\\n        readonly finished: boolean;\\n        /**\\n         * True if headers were sent, false otherwise (read-only).\\n         * @since v8.4.0\\n         */\\n        readonly headersSent: boolean;\\n        /**\\n         * A reference to the original HTTP2 request object.\\n         * @since v15.7.0\\n         */\\n        readonly req: Http2ServerRequest;\\n        /**\\n         * Returns a `Proxy` object that acts as a `net.Socket` (or `tls.TLSSocket`) but\\n         * applies getters, setters, and methods based on HTTP/2 logic.\\n         *\\n         * `destroyed`, `readable`, and `writable` properties will be retrieved from and\\n         * set on `response.stream`.\\n         *\\n         * `destroy`, `emit`, `end`, `on` and `once` methods will be called on`response.stream`.\\n         *\\n         * `setTimeout` method will be called on `response.stream.session`.\\n         *\\n         * `pause`, `read`, `resume`, and `write` will throw an error with code`ERR_HTTP2_NO_SOCKET_MANIPULATION`. See `Http2Session and Sockets` for\\n         * more information.\\n         *\\n         * All other interactions will be routed directly to the socket.\\n         *\\n         * ```js\\n         * const http2 = require('http2');\\n         * const server = http2.createServer((req, res) => {\\n         *   const ip = req.socket.remoteAddress;\\n         *   const port = req.socket.remotePort;\\n         *   res.end(`Your IP address is ${ip} and your source port is ${port}.`);\\n         * }).listen(3000);\\n         * ```\\n         * @since v8.4.0\\n         */\\n        readonly socket: net.Socket | tls.TLSSocket;\\n        /**\\n         * The `Http2Stream` object backing the response.\\n         * @since v8.4.0\\n         */\\n        readonly stream: ServerHttp2Stream;\\n        /**\\n         * When true, the Date header will be automatically generated and sent in\\n         * the response if it is not already present in the headers. Defaults to true.\\n         *\\n         * This should only be disabled for testing; HTTP requires the Date header\\n         * in responses.\\n         * @since v8.4.0\\n         */\\n        sendDate: boolean;\\n        /**\\n         * When using implicit headers (not calling `response.writeHead()` explicitly),\\n         * this property controls the status code that will be sent to the client when\\n         * the headers get flushed.\\n         *\\n         * ```js\\n         * response.statusCode = 404;\\n         * ```\\n         *\\n         * After response header was sent to the client, this property indicates the\\n         * status code which was sent out.\\n         * @since v8.4.0\\n         */\\n        statusCode: number;\\n        /**\\n         * Status message is not supported by HTTP/2 (RFC 7540 8.1.2.4). It returns\\n         * an empty string.\\n         * @since v8.4.0\\n         */\\n        statusMessage: '';\\n        /**\\n         * This method adds HTTP trailing headers (a header but at the end of the\\n         * message) to the response.\\n         *\\n         * Attempting to set a header field name or value that contains invalid characters\\n         * will result in a `TypeError` being thrown.\\n         * @since v8.4.0\\n         */\\n        addTrailers(trailers: OutgoingHttpHeaders): void;\\n        /**\\n         * This method signals to the server that all of the response headers and body\\n         * have been sent; that server should consider this message complete.\\n         * The method, `response.end()`, MUST be called on each response.\\n         *\\n         * If `data` is specified, it is equivalent to calling `response.write(data, encoding)` followed by `response.end(callback)`.\\n         *\\n         * If `callback` is specified, it will be called when the response stream\\n         * is finished.\\n         * @since v8.4.0\\n         */\\n        end(callback?: () => void): this;\\n        end(data: string | Uint8Array, callback?: () => void): this;\\n        end(data: string | Uint8Array, encoding: BufferEncoding, callback?: () => void): this;\\n        /**\\n         * Reads out a header that has already been queued but not sent to the client.\\n         * The name is case-insensitive.\\n         *\\n         * ```js\\n         * const contentType = response.getHeader('content-type');\\n         * ```\\n         * @since v8.4.0\\n         */\\n        getHeader(name: string): string;\\n        /**\\n         * Returns an array containing the unique names of the current outgoing headers.\\n         * All header names are lowercase.\\n         *\\n         * ```js\\n         * response.setHeader('Foo', 'bar');\\n         * response.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);\\n         *\\n         * const headerNames = response.getHeaderNames();\\n         * // headerNames === ['foo', 'set-cookie']\\n         * ```\\n         * @since v8.4.0\\n         */\\n        getHeaderNames(): string[];\\n        /**\\n         * Returns a shallow copy of the current outgoing headers. Since a shallow copy\\n         * is used, array values may be mutated without additional calls to various\\n         * header-related http module methods. The keys of the returned object are the\\n         * header names and the values are the respective header values. All header names\\n         * are lowercase.\\n         *\\n         * The object returned by the `response.getHeaders()` method _does not_prototypically inherit from the JavaScript `Object`. This means that typical`Object` methods such as `obj.toString()`,\\n         * `obj.hasOwnProperty()`, and others\\n         * are not defined and _will not work_.\\n         *\\n         * ```js\\n         * response.setHeader('Foo', 'bar');\\n         * response.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);\\n         *\\n         * const headers = response.getHeaders();\\n         * // headers === { foo: 'bar', 'set-cookie': ['foo=bar', 'bar=baz'] }\\n         * ```\\n         * @since v8.4.0\\n         */\\n        getHeaders(): OutgoingHttpHeaders;\\n        /**\\n         * Returns `true` if the header identified by `name` is currently set in the\\n         * outgoing headers. The header name matching is case-insensitive.\\n         *\\n         * ```js\\n         * const hasContentType = response.hasHeader('content-type');\\n         * ```\\n         * @since v8.4.0\\n         */\\n        hasHeader(name: string): boolean;\\n        /**\\n         * Removes a header that has been queued for implicit sending.\\n         *\\n         * ```js\\n         * response.removeHeader('Content-Encoding');\\n         * ```\\n         * @since v8.4.0\\n         */\\n        removeHeader(name: string): void;\\n        /**\\n         * Sets a single header value for implicit headers. If this header already exists\\n         * in the to-be-sent headers, its value will be replaced. Use an array of strings\\n         * here to send multiple headers with the same name.\\n         *\\n         * ```js\\n         * response.setHeader('Content-Type', 'text/html; charset=utf-8');\\n         * ```\\n         *\\n         * or\\n         *\\n         * ```js\\n         * response.setHeader('Set-Cookie', ['type=ninja', 'language=javascript']);\\n         * ```\\n         *\\n         * Attempting to set a header field name or value that contains invalid characters\\n         * will result in a `TypeError` being thrown.\\n         *\\n         * When headers have been set with `response.setHeader()`, they will be merged\\n         * with any headers passed to `response.writeHead()`, with the headers passed\\n         * to `response.writeHead()` given precedence.\\n         *\\n         * ```js\\n         * // Returns content-type = text/plain\\n         * const server = http2.createServer((req, res) => {\\n         *   res.setHeader('Content-Type', 'text/html; charset=utf-8');\\n         *   res.setHeader('X-Foo', 'bar');\\n         *   res.writeHead(200, { 'Content-Type': 'text/plain; charset=utf-8' });\\n         *   res.end('ok');\\n         * });\\n         * ```\\n         * @since v8.4.0\\n         */\\n        setHeader(name: string, value: number | string | ReadonlyArray<string>): void;\\n        /**\\n         * Sets the `Http2Stream`'s timeout value to `msecs`. If a callback is\\n         * provided, then it is added as a listener on the `'timeout'` event on\\n         * the response object.\\n         *\\n         * If no `'timeout'` listener is added to the request, the response, or\\n         * the server, then `Http2Stream` s are destroyed when they time out. If a\\n         * handler is assigned to the request, the response, or the server's `'timeout'`events, timed out sockets must be handled explicitly.\\n         * @since v8.4.0\\n         */\\n        setTimeout(msecs: number, callback?: () => void): void;\\n        /**\\n         * If this method is called and `response.writeHead()` has not been called,\\n         * it will switch to implicit header mode and flush the implicit headers.\\n         *\\n         * This sends a chunk of the response body. This method may\\n         * be called multiple times to provide successive parts of the body.\\n         *\\n         * In the `http` module, the response body is omitted when the\\n         * request is a HEAD request. Similarly, the `204` and `304` responses _must not_ include a message body.\\n         *\\n         * `chunk` can be a string or a buffer. If `chunk` is a string,\\n         * the second parameter specifies how to encode it into a byte stream.\\n         * By default the `encoding` is `'utf8'`. `callback` will be called when this chunk\\n         * of data is flushed.\\n         *\\n         * This is the raw HTTP body and has nothing to do with higher-level multi-part\\n         * body encodings that may be used.\\n         *\\n         * The first time `response.write()` is called, it will send the buffered\\n         * header information and the first chunk of the body to the client. The second\\n         * time `response.write()` is called, Node.js assumes data will be streamed,\\n         * and sends the new data separately. That is, the response is buffered up to the\\n         * first chunk of the body.\\n         *\\n         * Returns `true` if the entire data was flushed successfully to the kernel\\n         * buffer. Returns `false` if all or part of the data was queued in user memory.`'drain'` will be emitted when the buffer is free again.\\n         * @since v8.4.0\\n         */\\n        write(chunk: string | Uint8Array, callback?: (err: Error) => void): boolean;\\n        write(chunk: string | Uint8Array, encoding: BufferEncoding, callback?: (err: Error) => void): boolean;\\n        /**\\n         * Sends a status `100 Continue` to the client, indicating that the request body\\n         * should be sent. See the `'checkContinue'` event on `Http2Server` and`Http2SecureServer`.\\n         * @since v8.4.0\\n         */\\n        writeContinue(): void;\\n        /**\\n         * Sends a status `103 Early Hints` to the client with a Link header,\\n         * indicating that the user agent can preload/preconnect the linked resources.\\n         * The `hints` is an object containing the values of headers to be sent with\\n         * early hints message.\\n         *\\n         * Example:\\n         *\\n         * ```js\\n         * const earlyHintsLink = '</styles.css>; rel=preload; as=style';\\n         * response.writeEarlyHints({\\n         *   'link': earlyHintsLink,\\n         * });\\n         *\\n         * const earlyHintsLinks = [\\n         *   '</styles.css>; rel=preload; as=style',\\n         *   '</scripts.js>; rel=preload; as=script',\\n         * ];\\n         * response.writeEarlyHints({\\n         *   'link': earlyHintsLinks,\\n         *   'x-trace-id': 'id for diagnostics'\\n         * });\\n         * ```\\n         *\\n         * @since v18.11.0\\n         * @param hints An object containing the values of headers\\n         */\\n        writeEarlyHints(hints: Record<string, string | string[]>): void;\\n        /**\\n         * Sends a response header to the request. The status code is a 3-digit HTTP\\n         * status code, like `404`. The last argument, `headers`, are the response headers.\\n         *\\n         * Returns a reference to the `Http2ServerResponse`, so that calls can be chained.\\n         *\\n         * For compatibility with `HTTP/1`, a human-readable `statusMessage` may be\\n         * passed as the second argument. However, because the `statusMessage` has no\\n         * meaning within HTTP/2, the argument will have no effect and a process warning\\n         * will be emitted.\\n         *\\n         * ```js\\n         * const body = 'hello world';\\n         * response.writeHead(200, {\\n         *   'Content-Length': Buffer.byteLength(body),\\n         *   'Content-Type': 'text/plain; charset=utf-8',\\n         * });\\n         * ```\\n         *\\n         * `Content-Length` is given in bytes not characters. The`Buffer.byteLength()` API may be used to determine the number of bytes in a\\n         * given encoding. On outbound messages, Node.js does not check if Content-Length\\n         * and the length of the body being transmitted are equal or not. However, when\\n         * receiving messages, Node.js will automatically reject messages when the`Content-Length` does not match the actual payload size.\\n         *\\n         * This method may be called at most one time on a message before `response.end()` is called.\\n         *\\n         * If `response.write()` or `response.end()` are called before calling\\n         * this, the implicit/mutable headers will be calculated and call this function.\\n         *\\n         * When headers have been set with `response.setHeader()`, they will be merged\\n         * with any headers passed to `response.writeHead()`, with the headers passed\\n         * to `response.writeHead()` given precedence.\\n         *\\n         * ```js\\n         * // Returns content-type = text/plain\\n         * const server = http2.createServer((req, res) => {\\n         *   res.setHeader('Content-Type', 'text/html; charset=utf-8');\\n         *   res.setHeader('X-Foo', 'bar');\\n         *   res.writeHead(200, { 'Content-Type': 'text/plain; charset=utf-8' });\\n         *   res.end('ok');\\n         * });\\n         * ```\\n         *\\n         * Attempting to set a header field name or value that contains invalid characters\\n         * will result in a `TypeError` being thrown.\\n         * @since v8.4.0\\n         */\\n        writeHead(statusCode: number, headers?: OutgoingHttpHeaders): this;\\n        writeHead(statusCode: number, statusMessage: string, headers?: OutgoingHttpHeaders): this;\\n        /**\\n         * Call `http2stream.pushStream()` with the given headers, and wrap the\\n         * given `Http2Stream` on a newly created `Http2ServerResponse` as the callback\\n         * parameter if successful. When `Http2ServerRequest` is closed, the callback is\\n         * called with an error `ERR_HTTP2_INVALID_STREAM`.\\n         * @since v8.4.0\\n         * @param headers An object describing the headers\\n         * @param callback Called once `http2stream.pushStream()` is finished, or either when the attempt to create the pushed `Http2Stream` has failed or has been rejected, or the state of\\n         * `Http2ServerRequest` is closed prior to calling the `http2stream.pushStream()` method\\n         */\\n        createPushResponse(headers: OutgoingHttpHeaders, callback: (err: Error | null, res: Http2ServerResponse) => void): void;\\n        addListener(event: 'close', listener: () => void): this;\\n        addListener(event: 'drain', listener: () => void): this;\\n        addListener(event: 'error', listener: (error: Error) => void): this;\\n        addListener(event: 'finish', listener: () => void): this;\\n        addListener(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        addListener(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        emit(event: 'close'): boolean;\\n        emit(event: 'drain'): boolean;\\n        emit(event: 'error', error: Error): boolean;\\n        emit(event: 'finish'): boolean;\\n        emit(event: 'pipe', src: stream.Readable): boolean;\\n        emit(event: 'unpipe', src: stream.Readable): boolean;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        on(event: 'close', listener: () => void): this;\\n        on(event: 'drain', listener: () => void): this;\\n        on(event: 'error', listener: (error: Error) => void): this;\\n        on(event: 'finish', listener: () => void): this;\\n        on(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        on(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\n        once(event: 'close', listener: () => void): this;\\n        once(event: 'drain', listener: () => void): this;\\n        once(event: 'error', listener: (error: Error) => void): this;\\n        once(event: 'finish', listener: () => void): this;\\n        once(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        once(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'close', listener: () => void): this;\\n        prependListener(event: 'drain', listener: () => void): this;\\n        prependListener(event: 'error', listener: (error: Error) => void): this;\\n        prependListener(event: 'finish', listener: () => void): this;\\n        prependListener(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        prependListener(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'close', listener: () => void): this;\\n        prependOnceListener(event: 'drain', listener: () => void): this;\\n        prependOnceListener(event: 'error', listener: (error: Error) => void): this;\\n        prependOnceListener(event: 'finish', listener: () => void): this;\\n        prependOnceListener(event: 'pipe', listener: (src: stream.Readable) => void): this;\\n        prependOnceListener(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n    }\\n    export namespace constants {\\n        const NGHTTP2_SESSION_SERVER: number;\\n        const NGHTTP2_SESSION_CLIENT: number;\\n        const NGHTTP2_STREAM_STATE_IDLE: number;\\n        const NGHTTP2_STREAM_STATE_OPEN: number;\\n        const NGHTTP2_STREAM_STATE_RESERVED_LOCAL: number;\\n        const NGHTTP2_STREAM_STATE_RESERVED_REMOTE: number;\\n        const NGHTTP2_STREAM_STATE_HALF_CLOSED_LOCAL: number;\\n        const NGHTTP2_STREAM_STATE_HALF_CLOSED_REMOTE: number;\\n        const NGHTTP2_STREAM_STATE_CLOSED: number;\\n        const NGHTTP2_NO_ERROR: number;\\n        const NGHTTP2_PROTOCOL_ERROR: number;\\n        const NGHTTP2_INTERNAL_ERROR: number;\\n        const NGHTTP2_FLOW_CONTROL_ERROR: number;\\n        const NGHTTP2_SETTINGS_TIMEOUT: number;\\n        const NGHTTP2_STREAM_CLOSED: number;\\n        const NGHTTP2_FRAME_SIZE_ERROR: number;\\n        const NGHTTP2_REFUSED_STREAM: number;\\n        const NGHTTP2_CANCEL: number;\\n        const NGHTTP2_COMPRESSION_ERROR: number;\\n        const NGHTTP2_CONNECT_ERROR: number;\\n        const NGHTTP2_ENHANCE_YOUR_CALM: number;\\n        const NGHTTP2_INADEQUATE_SECURITY: number;\\n        const NGHTTP2_HTTP_1_1_REQUIRED: number;\\n        const NGHTTP2_ERR_FRAME_SIZE_ERROR: number;\\n        const NGHTTP2_FLAG_NONE: number;\\n        const NGHTTP2_FLAG_END_STREAM: number;\\n        const NGHTTP2_FLAG_END_HEADERS: number;\\n        const NGHTTP2_FLAG_ACK: number;\\n        const NGHTTP2_FLAG_PADDED: number;\\n        const NGHTTP2_FLAG_PRIORITY: number;\\n        const DEFAULT_SETTINGS_HEADER_TABLE_SIZE: number;\\n        const DEFAULT_SETTINGS_ENABLE_PUSH: number;\\n        const DEFAULT_SETTINGS_INITIAL_WINDOW_SIZE: number;\\n        const DEFAULT_SETTINGS_MAX_FRAME_SIZE: number;\\n        const MAX_MAX_FRAME_SIZE: number;\\n        const MIN_MAX_FRAME_SIZE: number;\\n        const MAX_INITIAL_WINDOW_SIZE: number;\\n        const NGHTTP2_DEFAULT_WEIGHT: number;\\n        const NGHTTP2_SETTINGS_HEADER_TABLE_SIZE: number;\\n        const NGHTTP2_SETTINGS_ENABLE_PUSH: number;\\n        const NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS: number;\\n        const NGHTTP2_SETTINGS_INITIAL_WINDOW_SIZE: number;\\n        const NGHTTP2_SETTINGS_MAX_FRAME_SIZE: number;\\n        const NGHTTP2_SETTINGS_MAX_HEADER_LIST_SIZE: number;\\n        const PADDING_STRATEGY_NONE: number;\\n        const PADDING_STRATEGY_MAX: number;\\n        const PADDING_STRATEGY_CALLBACK: number;\\n        const HTTP2_HEADER_STATUS: string;\\n        const HTTP2_HEADER_METHOD: string;\\n        const HTTP2_HEADER_AUTHORITY: string;\\n        const HTTP2_HEADER_SCHEME: string;\\n        const HTTP2_HEADER_PATH: string;\\n        const HTTP2_HEADER_ACCEPT_CHARSET: string;\\n        const HTTP2_HEADER_ACCEPT_ENCODING: string;\\n        const HTTP2_HEADER_ACCEPT_LANGUAGE: string;\\n        const HTTP2_HEADER_ACCEPT_RANGES: string;\\n        const HTTP2_HEADER_ACCEPT: string;\\n        const HTTP2_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN: string;\\n        const HTTP2_HEADER_AGE: string;\\n        const HTTP2_HEADER_ALLOW: string;\\n        const HTTP2_HEADER_AUTHORIZATION: string;\\n        const HTTP2_HEADER_CACHE_CONTROL: string;\\n        const HTTP2_HEADER_CONNECTION: string;\\n        const HTTP2_HEADER_CONTENT_DISPOSITION: string;\\n        const HTTP2_HEADER_CONTENT_ENCODING: string;\\n        const HTTP2_HEADER_CONTENT_LANGUAGE: string;\\n        const HTTP2_HEADER_CONTENT_LENGTH: string;\\n        const HTTP2_HEADER_CONTENT_LOCATION: string;\\n        const HTTP2_HEADER_CONTENT_MD5: string;\\n        const HTTP2_HEADER_CONTENT_RANGE: string;\\n        const HTTP2_HEADER_CONTENT_TYPE: string;\\n        const HTTP2_HEADER_COOKIE: string;\\n        const HTTP2_HEADER_DATE: string;\\n        const HTTP2_HEADER_ETAG: string;\\n        const HTTP2_HEADER_EXPECT: string;\\n        const HTTP2_HEADER_EXPIRES: string;\\n        const HTTP2_HEADER_FROM: string;\\n        const HTTP2_HEADER_HOST: string;\\n        const HTTP2_HEADER_IF_MATCH: string;\\n        const HTTP2_HEADER_IF_MODIFIED_SINCE: string;\\n        const HTTP2_HEADER_IF_NONE_MATCH: string;\\n        const HTTP2_HEADER_IF_RANGE: string;\\n        const HTTP2_HEADER_IF_UNMODIFIED_SINCE: string;\\n        const HTTP2_HEADER_LAST_MODIFIED: string;\\n        const HTTP2_HEADER_LINK: string;\\n        const HTTP2_HEADER_LOCATION: string;\\n        const HTTP2_HEADER_MAX_FORWARDS: string;\\n        const HTTP2_HEADER_PREFER: string;\\n        const HTTP2_HEADER_PROXY_AUTHENTICATE: string;\\n        const HTTP2_HEADER_PROXY_AUTHORIZATION: string;\\n        const HTTP2_HEADER_RANGE: string;\\n        const HTTP2_HEADER_REFERER: string;\\n        const HTTP2_HEADER_REFRESH: string;\\n        const HTTP2_HEADER_RETRY_AFTER: string;\\n        const HTTP2_HEADER_SERVER: string;\\n        const HTTP2_HEADER_SET_COOKIE: string;\\n        const HTTP2_HEADER_STRICT_TRANSPORT_SECURITY: string;\\n        const HTTP2_HEADER_TRANSFER_ENCODING: string;\\n        const HTTP2_HEADER_TE: string;\\n        const HTTP2_HEADER_UPGRADE: string;\\n        const HTTP2_HEADER_USER_AGENT: string;\\n        const HTTP2_HEADER_VARY: string;\\n        const HTTP2_HEADER_VIA: string;\\n        const HTTP2_HEADER_WWW_AUTHENTICATE: string;\\n        const HTTP2_HEADER_HTTP2_SETTINGS: string;\\n        const HTTP2_HEADER_KEEP_ALIVE: string;\\n        const HTTP2_HEADER_PROXY_CONNECTION: string;\\n        const HTTP2_METHOD_ACL: string;\\n        const HTTP2_METHOD_BASELINE_CONTROL: string;\\n        const HTTP2_METHOD_BIND: string;\\n        const HTTP2_METHOD_CHECKIN: string;\\n        const HTTP2_METHOD_CHECKOUT: string;\\n        const HTTP2_METHOD_CONNECT: string;\\n        const HTTP2_METHOD_COPY: string;\\n        const HTTP2_METHOD_DELETE: string;\\n        const HTTP2_METHOD_GET: string;\\n        const HTTP2_METHOD_HEAD: string;\\n        const HTTP2_METHOD_LABEL: string;\\n        const HTTP2_METHOD_LINK: string;\\n        const HTTP2_METHOD_LOCK: string;\\n        const HTTP2_METHOD_MERGE: string;\\n        const HTTP2_METHOD_MKACTIVITY: string;\\n        const HTTP2_METHOD_MKCALENDAR: string;\\n        const HTTP2_METHOD_MKCOL: string;\\n        const HTTP2_METHOD_MKREDIRECTREF: string;\\n        const HTTP2_METHOD_MKWORKSPACE: string;\\n        const HTTP2_METHOD_MOVE: string;\\n        const HTTP2_METHOD_OPTIONS: string;\\n        const HTTP2_METHOD_ORDERPATCH: string;\\n        const HTTP2_METHOD_PATCH: string;\\n        const HTTP2_METHOD_POST: string;\\n        const HTTP2_METHOD_PRI: string;\\n        const HTTP2_METHOD_PROPFIND: string;\\n        const HTTP2_METHOD_PROPPATCH: string;\\n        const HTTP2_METHOD_PUT: string;\\n        const HTTP2_METHOD_REBIND: string;\\n        const HTTP2_METHOD_REPORT: string;\\n        const HTTP2_METHOD_SEARCH: string;\\n        const HTTP2_METHOD_TRACE: string;\\n        const HTTP2_METHOD_UNBIND: string;\\n        const HTTP2_METHOD_UNCHECKOUT: string;\\n        const HTTP2_METHOD_UNLINK: string;\\n        const HTTP2_METHOD_UNLOCK: string;\\n        const HTTP2_METHOD_UPDATE: string;\\n        const HTTP2_METHOD_UPDATEREDIRECTREF: string;\\n        const HTTP2_METHOD_VERSION_CONTROL: string;\\n        const HTTP_STATUS_CONTINUE: number;\\n        const HTTP_STATUS_SWITCHING_PROTOCOLS: number;\\n        const HTTP_STATUS_PROCESSING: number;\\n        const HTTP_STATUS_OK: number;\\n        const HTTP_STATUS_CREATED: number;\\n        const HTTP_STATUS_ACCEPTED: number;\\n        const HTTP_STATUS_NON_AUTHORITATIVE_INFORMATION: number;\\n        const HTTP_STATUS_NO_CONTENT: number;\\n        const HTTP_STATUS_RESET_CONTENT: number;\\n        const HTTP_STATUS_PARTIAL_CONTENT: number;\\n        const HTTP_STATUS_MULTI_STATUS: number;\\n        const HTTP_STATUS_ALREADY_REPORTED: number;\\n        const HTTP_STATUS_IM_USED: number;\\n        const HTTP_STATUS_MULTIPLE_CHOICES: number;\\n        const HTTP_STATUS_MOVED_PERMANENTLY: number;\\n        const HTTP_STATUS_FOUND: number;\\n        const HTTP_STATUS_SEE_OTHER: number;\\n        const HTTP_STATUS_NOT_MODIFIED: number;\\n        const HTTP_STATUS_USE_PROXY: number;\\n        const HTTP_STATUS_TEMPORARY_REDIRECT: number;\\n        const HTTP_STATUS_PERMANENT_REDIRECT: number;\\n        const HTTP_STATUS_BAD_REQUEST: number;\\n        const HTTP_STATUS_UNAUTHORIZED: number;\\n        const HTTP_STATUS_PAYMENT_REQUIRED: number;\\n        const HTTP_STATUS_FORBIDDEN: number;\\n        const HTTP_STATUS_NOT_FOUND: number;\\n        const HTTP_STATUS_METHOD_NOT_ALLOWED: number;\\n        const HTTP_STATUS_NOT_ACCEPTABLE: number;\\n        const HTTP_STATUS_PROXY_AUTHENTICATION_REQUIRED: number;\\n        const HTTP_STATUS_REQUEST_TIMEOUT: number;\\n        const HTTP_STATUS_CONFLICT: number;\\n        const HTTP_STATUS_GONE: number;\\n        const HTTP_STATUS_LENGTH_REQUIRED: number;\\n        const HTTP_STATUS_PRECONDITION_FAILED: number;\\n        const HTTP_STATUS_PAYLOAD_TOO_LARGE: number;\\n        const HTTP_STATUS_URI_TOO_LONG: number;\\n        const HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE: number;\\n        const HTTP_STATUS_RANGE_NOT_SATISFIABLE: number;\\n        const HTTP_STATUS_EXPECTATION_FAILED: number;\\n        const HTTP_STATUS_TEAPOT: number;\\n        const HTTP_STATUS_MISDIRECTED_REQUEST: number;\\n        const HTTP_STATUS_UNPROCESSABLE_ENTITY: number;\\n        const HTTP_STATUS_LOCKED: number;\\n        const HTTP_STATUS_FAILED_DEPENDENCY: number;\\n        const HTTP_STATUS_UNORDERED_COLLECTION: number;\\n        const HTTP_STATUS_UPGRADE_REQUIRED: number;\\n        const HTTP_STATUS_PRECONDITION_REQUIRED: number;\\n        const HTTP_STATUS_TOO_MANY_REQUESTS: number;\\n        const HTTP_STATUS_REQUEST_HEADER_FIELDS_TOO_LARGE: number;\\n        const HTTP_STATUS_UNAVAILABLE_FOR_LEGAL_REASONS: number;\\n        const HTTP_STATUS_INTERNAL_SERVER_ERROR: number;\\n        const HTTP_STATUS_NOT_IMPLEMENTED: number;\\n        const HTTP_STATUS_BAD_GATEWAY: number;\\n        const HTTP_STATUS_SERVICE_UNAVAILABLE: number;\\n        const HTTP_STATUS_GATEWAY_TIMEOUT: number;\\n        const HTTP_STATUS_HTTP_VERSION_NOT_SUPPORTED: number;\\n        const HTTP_STATUS_VARIANT_ALSO_NEGOTIATES: number;\\n        const HTTP_STATUS_INSUFFICIENT_STORAGE: number;\\n        const HTTP_STATUS_LOOP_DETECTED: number;\\n        const HTTP_STATUS_BANDWIDTH_LIMIT_EXCEEDED: number;\\n        const HTTP_STATUS_NOT_EXTENDED: number;\\n        const HTTP_STATUS_NETWORK_AUTHENTICATION_REQUIRED: number;\\n    }\\n    /**\\n     * This symbol can be set as a property on the HTTP/2 headers object with\\n     * an array value in order to provide a list of headers considered sensitive.\\n     */\\n    export const sensitiveHeaders: symbol;\\n    /**\\n     * Returns an object containing the default settings for an `Http2Session`instance. This method returns a new object instance every time it is called\\n     * so instances returned may be safely modified for use.\\n     * @since v8.4.0\\n     */\\n    export function getDefaultSettings(): Settings;\\n    /**\\n     * Returns a `Buffer` instance containing serialized representation of the given\\n     * HTTP/2 settings as specified in the [HTTP/2](https://tools.ietf.org/html/rfc7540) specification. This is intended\\n     * for use with the `HTTP2-Settings` header field.\\n     *\\n     * ```js\\n     * const http2 = require('http2');\\n     *\\n     * const packed = http2.getPackedSettings({ enablePush: false });\\n     *\\n     * console.log(packed.toString('base64'));\\n     * // Prints: AAIAAAAA\\n     * ```\\n     * @since v8.4.0\\n     */\\n    export function getPackedSettings(settings: Settings): Buffer;\\n    /**\\n     * Returns a `HTTP/2 Settings Object` containing the deserialized settings from\\n     * the given `Buffer` as generated by `http2.getPackedSettings()`.\\n     * @since v8.4.0\\n     * @param buf The packed settings.\\n     */\\n    export function getUnpackedSettings(buf: Uint8Array): Settings;\\n    /**\\n     * Returns a `net.Server` instance that creates and manages `Http2Session`instances.\\n     *\\n     * Since there are no browsers known that support [unencrypted HTTP/2](https://http2.github.io/faq/#does-http2-require-encryption), the use of {@link createSecureServer} is necessary when\\n     * communicating\\n     * with browser clients.\\n     *\\n     * ```js\\n     * const http2 = require('http2');\\n     *\\n     * // Create an unencrypted HTTP/2 server.\\n     * // Since there are no browsers known that support\\n     * // unencrypted HTTP/2, the use of `http2.createSecureServer()`\\n     * // is necessary when communicating with browser clients.\\n     * const server = http2.createServer();\\n     *\\n     * server.on('stream', (stream, headers) => {\\n     *   stream.respond({\\n     *     'content-type': 'text/html; charset=utf-8',\\n     *     ':status': 200\\n     *   });\\n     *   stream.end('<h1>Hello World</h1>');\\n     * });\\n     *\\n     * server.listen(80);\\n     * ```\\n     * @since v8.4.0\\n     * @param onRequestHandler See `Compatibility API`\\n     */\\n    export function createServer(onRequestHandler?: (request: Http2ServerRequest, response: Http2ServerResponse) => void): Http2Server;\\n    export function createServer(options: ServerOptions, onRequestHandler?: (request: Http2ServerRequest, response: Http2ServerResponse) => void): Http2Server;\\n    /**\\n     * Returns a `tls.Server` instance that creates and manages `Http2Session`instances.\\n     *\\n     * ```js\\n     * const http2 = require('http2');\\n     * const fs = require('fs');\\n     *\\n     * const options = {\\n     *   key: fs.readFileSync('server-key.pem'),\\n     *   cert: fs.readFileSync('server-cert.pem')\\n     * };\\n     *\\n     * // Create a secure HTTP/2 server\\n     * const server = http2.createSecureServer(options);\\n     *\\n     * server.on('stream', (stream, headers) => {\\n     *   stream.respond({\\n     *     'content-type': 'text/html; charset=utf-8',\\n     *     ':status': 200\\n     *   });\\n     *   stream.end('<h1>Hello World</h1>');\\n     * });\\n     *\\n     * server.listen(80);\\n     * ```\\n     * @since v8.4.0\\n     * @param onRequestHandler See `Compatibility API`\\n     */\\n    export function createSecureServer(onRequestHandler?: (request: Http2ServerRequest, response: Http2ServerResponse) => void): Http2SecureServer;\\n    export function createSecureServer(options: SecureServerOptions, onRequestHandler?: (request: Http2ServerRequest, response: Http2ServerResponse) => void): Http2SecureServer;\\n    /**\\n     * Returns a `ClientHttp2Session` instance.\\n     *\\n     * ```js\\n     * const http2 = require('http2');\\n     * const client = http2.connect('https://localhost:1234');\\n     *\\n     * // Use the client\\n     *\\n     * client.close();\\n     * ```\\n     * @since v8.4.0\\n     * @param authority The remote HTTP/2 server to connect to. This must be in the form of a minimal, valid URL with the `http://` or `https://` prefix, host name, and IP port (if a non-default port\\n     * is used). Userinfo (user ID and password), path, querystring, and fragment details in the URL will be ignored.\\n     * @param listener Will be registered as a one-time listener of the {@link 'connect'} event.\\n     */\\n    export function connect(authority: string | url.URL, listener: (session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket) => void): ClientHttp2Session;\\n    export function connect(\\n        authority: string | url.URL,\\n        options?: ClientSessionOptions | SecureClientSessionOptions,\\n        listener?: (session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket) => void\\n    ): ClientHttp2Session;\\n}\\ndeclare module 'node:http2' {\\n    export * from 'http2';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/https.d.ts\":\"/**\\n * HTTPS is the HTTP protocol over TLS/SSL. In Node.js this is implemented as a\\n * separate module.\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/https.js)\\n */\\ndeclare module 'https' {\\n    import { Duplex } from 'node:stream';\\n    import * as tls from 'node:tls';\\n    import * as http from 'node:http';\\n    import { URL } from 'node:url';\\n    type ServerOptions<\\n        Request extends typeof http.IncomingMessage = typeof http.IncomingMessage,\\n        Response extends typeof http.ServerResponse = typeof http.ServerResponse,\\n    > = tls.SecureContextOptions & tls.TlsOptions & http.ServerOptions<Request, Response>;\\n    type RequestOptions = http.RequestOptions &\\n        tls.SecureContextOptions & {\\n            checkServerIdentity?: typeof tls.checkServerIdentity | undefined;\\n            rejectUnauthorized?: boolean | undefined; // Defaults to true\\n            servername?: string | undefined; // SNI TLS Extension\\n        };\\n    interface AgentOptions extends http.AgentOptions, tls.ConnectionOptions {\\n        rejectUnauthorized?: boolean | undefined;\\n        maxCachedSessions?: number | undefined;\\n    }\\n    /**\\n     * An `Agent` object for HTTPS similar to `http.Agent`. See {@link request} for more information.\\n     * @since v0.4.5\\n     */\\n    class Agent extends http.Agent {\\n        constructor(options?: AgentOptions);\\n        options: AgentOptions;\\n    }\\n    interface Server<\\n        Request extends typeof http.IncomingMessage = typeof http.IncomingMessage,\\n        Response extends typeof http.ServerResponse = typeof http.ServerResponse,\\n    > extends http.Server<Request, Response> {}\\n    /**\\n     * See `http.Server` for more information.\\n     * @since v0.3.4\\n     */\\n    class Server<\\n        Request extends typeof http.IncomingMessage = typeof http.IncomingMessage,\\n        Response extends typeof http.ServerResponse = typeof http.ServerResponse,\\n    > extends tls.Server {\\n        constructor(requestListener?: http.RequestListener<Request, Response>);\\n        constructor(\\n            options: ServerOptions<Request, Response>,\\n            requestListener?: http.RequestListener<Request, Response>,\\n        );\\n        /**\\n         * Closes all connections connected to this server.\\n         * @since v18.2.0\\n         */\\n        closeAllConnections(): void;\\n        /**\\n         * Closes all connections connected to this server which are not sending a request or waiting for a response.\\n         * @since v18.2.0\\n         */\\n        closeIdleConnections(): void;\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        addListener(event: 'keylog', listener: (line: Buffer, tlsSocket: tls.TLSSocket) => void): this;\\n        addListener(\\n            event: 'newSession',\\n            listener: (sessionId: Buffer, sessionData: Buffer, callback: (err: Error, resp: Buffer) => void) => void,\\n        ): this;\\n        addListener(\\n            event: 'OCSPRequest',\\n            listener: (\\n                certificate: Buffer,\\n                issuer: Buffer,\\n                callback: (err: Error | null, resp: Buffer) => void,\\n            ) => void,\\n        ): this;\\n        addListener(\\n            event: 'resumeSession',\\n            listener: (sessionId: Buffer, callback: (err: Error, sessionData: Buffer) => void) => void,\\n        ): this;\\n        addListener(event: 'secureConnection', listener: (tlsSocket: tls.TLSSocket) => void): this;\\n        addListener(event: 'tlsClientError', listener: (err: Error, tlsSocket: tls.TLSSocket) => void): this;\\n        addListener(event: 'close', listener: () => void): this;\\n        addListener(event: 'connection', listener: (socket: Duplex) => void): this;\\n        addListener(event: 'error', listener: (err: Error) => void): this;\\n        addListener(event: 'listening', listener: () => void): this;\\n        addListener(event: 'checkContinue', listener: http.RequestListener<Request, Response>): this;\\n        addListener(event: 'checkExpectation', listener: http.RequestListener<Request, Response>): this;\\n        addListener(event: 'clientError', listener: (err: Error, socket: Duplex) => void): this;\\n        addListener(\\n            event: 'connect',\\n            listener: (req: InstanceType<Request>, socket: Duplex, head: Buffer) => void,\\n        ): this;\\n        addListener(event: 'request', listener: http.RequestListener<Request, Response>): this;\\n        addListener(\\n            event: 'upgrade',\\n            listener: (req: InstanceType<Request>, socket: Duplex, head: Buffer) => void,\\n        ): this;\\n        emit(event: string, ...args: any[]): boolean;\\n        emit(event: 'keylog', line: Buffer, tlsSocket: tls.TLSSocket): boolean;\\n        emit(\\n            event: 'newSession',\\n            sessionId: Buffer,\\n            sessionData: Buffer,\\n            callback: (err: Error, resp: Buffer) => void,\\n        ): boolean;\\n        emit(\\n            event: 'OCSPRequest',\\n            certificate: Buffer,\\n            issuer: Buffer,\\n            callback: (err: Error | null, resp: Buffer) => void,\\n        ): boolean;\\n        emit(event: 'resumeSession', sessionId: Buffer, callback: (err: Error, sessionData: Buffer) => void): boolean;\\n        emit(event: 'secureConnection', tlsSocket: tls.TLSSocket): boolean;\\n        emit(event: 'tlsClientError', err: Error, tlsSocket: tls.TLSSocket): boolean;\\n        emit(event: 'close'): boolean;\\n        emit(event: 'connection', socket: Duplex): boolean;\\n        emit(event: 'error', err: Error): boolean;\\n        emit(event: 'listening'): boolean;\\n        emit(\\n            event: 'checkContinue',\\n            req: InstanceType<Request>,\\n            res: InstanceType<Response> & { req: InstanceType<Request> },\\n        ): boolean;\\n        emit(\\n            event: 'checkExpectation',\\n            req: InstanceType<Request>,\\n            res: InstanceType<Response> & { req: InstanceType<Request> },\\n        ): boolean;\\n        emit(event: 'clientError', err: Error, socket: Duplex): boolean;\\n        emit(event: 'connect', req: InstanceType<Request>, socket: Duplex, head: Buffer): boolean;\\n        emit(\\n            event: 'request',\\n            req: InstanceType<Request>,\\n            res: InstanceType<Response> & { req: InstanceType<Request> },\\n        ): boolean;\\n        emit(event: 'upgrade', req: InstanceType<Request>, socket: Duplex, head: Buffer): boolean;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        on(event: 'keylog', listener: (line: Buffer, tlsSocket: tls.TLSSocket) => void): this;\\n        on(\\n            event: 'newSession',\\n            listener: (sessionId: Buffer, sessionData: Buffer, callback: (err: Error, resp: Buffer) => void) => void,\\n        ): this;\\n        on(\\n            event: 'OCSPRequest',\\n            listener: (\\n                certificate: Buffer,\\n                issuer: Buffer,\\n                callback: (err: Error | null, resp: Buffer) => void,\\n            ) => void,\\n        ): this;\\n        on(\\n            event: 'resumeSession',\\n            listener: (sessionId: Buffer, callback: (err: Error, sessionData: Buffer) => void) => void,\\n        ): this;\\n        on(event: 'secureConnection', listener: (tlsSocket: tls.TLSSocket) => void): this;\\n        on(event: 'tlsClientError', listener: (err: Error, tlsSocket: tls.TLSSocket) => void): this;\\n        on(event: 'close', listener: () => void): this;\\n        on(event: 'connection', listener: (socket: Duplex) => void): this;\\n        on(event: 'error', listener: (err: Error) => void): this;\\n        on(event: 'listening', listener: () => void): this;\\n        on(event: 'checkContinue', listener: http.RequestListener<Request, Response>): this;\\n        on(event: 'checkExpectation', listener: http.RequestListener<Request, Response>): this;\\n        on(event: 'clientError', listener: (err: Error, socket: Duplex) => void): this;\\n        on(event: 'connect', listener: (req: InstanceType<Request>, socket: Duplex, head: Buffer) => void): this;\\n        on(event: 'request', listener: http.RequestListener<Request, Response>): this;\\n        on(event: 'upgrade', listener: (req: InstanceType<Request>, socket: Duplex, head: Buffer) => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        once(event: 'keylog', listener: (line: Buffer, tlsSocket: tls.TLSSocket) => void): this;\\n        once(\\n            event: 'newSession',\\n            listener: (sessionId: Buffer, sessionData: Buffer, callback: (err: Error, resp: Buffer) => void) => void,\\n        ): this;\\n        once(\\n            event: 'OCSPRequest',\\n            listener: (\\n                certificate: Buffer,\\n                issuer: Buffer,\\n                callback: (err: Error | null, resp: Buffer) => void,\\n            ) => void,\\n        ): this;\\n        once(\\n            event: 'resumeSession',\\n            listener: (sessionId: Buffer, callback: (err: Error, sessionData: Buffer) => void) => void,\\n        ): this;\\n        once(event: 'secureConnection', listener: (tlsSocket: tls.TLSSocket) => void): this;\\n        once(event: 'tlsClientError', listener: (err: Error, tlsSocket: tls.TLSSocket) => void): this;\\n        once(event: 'close', listener: () => void): this;\\n        once(event: 'connection', listener: (socket: Duplex) => void): this;\\n        once(event: 'error', listener: (err: Error) => void): this;\\n        once(event: 'listening', listener: () => void): this;\\n        once(event: 'checkContinue', listener: http.RequestListener<Request, Response>): this;\\n        once(event: 'checkExpectation', listener: http.RequestListener<Request, Response>): this;\\n        once(event: 'clientError', listener: (err: Error, socket: Duplex) => void): this;\\n        once(event: 'connect', listener: (req: InstanceType<Request>, socket: Duplex, head: Buffer) => void): this;\\n        once(event: 'request', listener: http.RequestListener<Request, Response>): this;\\n        once(event: 'upgrade', listener: (req: InstanceType<Request>, socket: Duplex, head: Buffer) => void): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'keylog', listener: (line: Buffer, tlsSocket: tls.TLSSocket) => void): this;\\n        prependListener(\\n            event: 'newSession',\\n            listener: (sessionId: Buffer, sessionData: Buffer, callback: (err: Error, resp: Buffer) => void) => void,\\n        ): this;\\n        prependListener(\\n            event: 'OCSPRequest',\\n            listener: (\\n                certificate: Buffer,\\n                issuer: Buffer,\\n                callback: (err: Error | null, resp: Buffer) => void,\\n            ) => void,\\n        ): this;\\n        prependListener(\\n            event: 'resumeSession',\\n            listener: (sessionId: Buffer, callback: (err: Error, sessionData: Buffer) => void) => void,\\n        ): this;\\n        prependListener(event: 'secureConnection', listener: (tlsSocket: tls.TLSSocket) => void): this;\\n        prependListener(event: 'tlsClientError', listener: (err: Error, tlsSocket: tls.TLSSocket) => void): this;\\n        prependListener(event: 'close', listener: () => void): this;\\n        prependListener(event: 'connection', listener: (socket: Duplex) => void): this;\\n        prependListener(event: 'error', listener: (err: Error) => void): this;\\n        prependListener(event: 'listening', listener: () => void): this;\\n        prependListener(event: 'checkContinue', listener: http.RequestListener<Request, Response>): this;\\n        prependListener(event: 'checkExpectation', listener: http.RequestListener<Request, Response>): this;\\n        prependListener(event: 'clientError', listener: (err: Error, socket: Duplex) => void): this;\\n        prependListener(\\n            event: 'connect',\\n            listener: (req: InstanceType<Request>, socket: Duplex, head: Buffer) => void,\\n        ): this;\\n        prependListener(event: 'request', listener: http.RequestListener<Request, Response>): this;\\n        prependListener(\\n            event: 'upgrade',\\n            listener: (req: InstanceType<Request>, socket: Duplex, head: Buffer) => void,\\n        ): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'keylog', listener: (line: Buffer, tlsSocket: tls.TLSSocket) => void): this;\\n        prependOnceListener(\\n            event: 'newSession',\\n            listener: (sessionId: Buffer, sessionData: Buffer, callback: (err: Error, resp: Buffer) => void) => void,\\n        ): this;\\n        prependOnceListener(\\n            event: 'OCSPRequest',\\n            listener: (\\n                certificate: Buffer,\\n                issuer: Buffer,\\n                callback: (err: Error | null, resp: Buffer) => void,\\n            ) => void,\\n        ): this;\\n        prependOnceListener(\\n            event: 'resumeSession',\\n            listener: (sessionId: Buffer, callback: (err: Error, sessionData: Buffer) => void) => void,\\n        ): this;\\n        prependOnceListener(event: 'secureConnection', listener: (tlsSocket: tls.TLSSocket) => void): this;\\n        prependOnceListener(event: 'tlsClientError', listener: (err: Error, tlsSocket: tls.TLSSocket) => void): this;\\n        prependOnceListener(event: 'close', listener: () => void): this;\\n        prependOnceListener(event: 'connection', listener: (socket: Duplex) => void): this;\\n        prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n        prependOnceListener(event: 'listening', listener: () => void): this;\\n        prependOnceListener(event: 'checkContinue', listener: http.RequestListener<Request, Response>): this;\\n        prependOnceListener(event: 'checkExpectation', listener: http.RequestListener<Request, Response>): this;\\n        prependOnceListener(event: 'clientError', listener: (err: Error, socket: Duplex) => void): this;\\n        prependOnceListener(\\n            event: 'connect',\\n            listener: (req: InstanceType<Request>, socket: Duplex, head: Buffer) => void,\\n        ): this;\\n        prependOnceListener(event: 'request', listener: http.RequestListener<Request, Response>): this;\\n        prependOnceListener(\\n            event: 'upgrade',\\n            listener: (req: InstanceType<Request>, socket: Duplex, head: Buffer) => void,\\n        ): this;\\n    }\\n    /**\\n     * ```js\\n     * // curl -k https://localhost:8000/\\n     * const https = require('https');\\n     * const fs = require('fs');\\n     *\\n     * const options = {\\n     *   key: fs.readFileSync('test/fixtures/keys/agent2-key.pem'),\\n     *   cert: fs.readFileSync('test/fixtures/keys/agent2-cert.pem')\\n     * };\\n     *\\n     * https.createServer(options, (req, res) => {\\n     *   res.writeHead(200);\\n     *   res.end('hello world\\\\n');\\n     * }).listen(8000);\\n     * ```\\n     *\\n     * Or\\n     *\\n     * ```js\\n     * const https = require('https');\\n     * const fs = require('fs');\\n     *\\n     * const options = {\\n     *   pfx: fs.readFileSync('test/fixtures/test_cert.pfx'),\\n     *   passphrase: 'sample'\\n     * };\\n     *\\n     * https.createServer(options, (req, res) => {\\n     *   res.writeHead(200);\\n     *   res.end('hello world\\\\n');\\n     * }).listen(8000);\\n     * ```\\n     * @since v0.3.4\\n     * @param options Accepts `options` from `createServer`, `createSecureContext` and `createServer`.\\n     * @param requestListener A listener to be added to the `'request'` event.\\n     */\\n    function createServer<\\n        Request extends typeof http.IncomingMessage = typeof http.IncomingMessage,\\n        Response extends typeof http.ServerResponse = typeof http.ServerResponse,\\n    >(requestListener?: http.RequestListener<Request, Response>): Server<Request, Response>;\\n    function createServer<\\n        Request extends typeof http.IncomingMessage = typeof http.IncomingMessage,\\n        Response extends typeof http.ServerResponse = typeof http.ServerResponse,\\n    >(\\n        options: ServerOptions<Request, Response>,\\n        requestListener?: http.RequestListener<Request, Response>,\\n    ): Server<Request, Response>;\\n    /**\\n     * Makes a request to a secure web server.\\n     *\\n     * The following additional `options` from `tls.connect()` are also accepted:`ca`, `cert`, `ciphers`, `clientCertEngine`, `crl`, `dhparam`, `ecdhCurve`,`honorCipherOrder`, `key`, `passphrase`,\\n     * `pfx`, `rejectUnauthorized`,`secureOptions`, `secureProtocol`, `servername`, `sessionIdContext`,`highWaterMark`.\\n     *\\n     * `options` can be an object, a string, or a `URL` object. If `options` is a\\n     * string, it is automatically parsed with `new URL()`. If it is a `URL` object, it will be automatically converted to an ordinary `options` object.\\n     *\\n     * `https.request()` returns an instance of the `http.ClientRequest` class. The `ClientRequest` instance is a writable stream. If one needs to\\n     * upload a file with a POST request, then write to the `ClientRequest` object.\\n     *\\n     * ```js\\n     * const https = require('https');\\n     *\\n     * const options = {\\n     *   hostname: 'encrypted.google.com',\\n     *   port: 443,\\n     *   path: '/',\\n     *   method: 'GET'\\n     * };\\n     *\\n     * const req = https.request(options, (res) => {\\n     *   console.log('statusCode:', res.statusCode);\\n     *   console.log('headers:', res.headers);\\n     *\\n     *   res.on('data', (d) => {\\n     *     process.stdout.write(d);\\n     *   });\\n     * });\\n     *\\n     * req.on('error', (e) => {\\n     *   console.error(e);\\n     * });\\n     * req.end();\\n     * ```\\n     *\\n     * Example using options from `tls.connect()`:\\n     *\\n     * ```js\\n     * const options = {\\n     *   hostname: 'encrypted.google.com',\\n     *   port: 443,\\n     *   path: '/',\\n     *   method: 'GET',\\n     *   key: fs.readFileSync('test/fixtures/keys/agent2-key.pem'),\\n     *   cert: fs.readFileSync('test/fixtures/keys/agent2-cert.pem')\\n     * };\\n     * options.agent = new https.Agent(options);\\n     *\\n     * const req = https.request(options, (res) => {\\n     *   // ...\\n     * });\\n     * ```\\n     *\\n     * Alternatively, opt out of connection pooling by not using an `Agent`.\\n     *\\n     * ```js\\n     * const options = {\\n     *   hostname: 'encrypted.google.com',\\n     *   port: 443,\\n     *   path: '/',\\n     *   method: 'GET',\\n     *   key: fs.readFileSync('test/fixtures/keys/agent2-key.pem'),\\n     *   cert: fs.readFileSync('test/fixtures/keys/agent2-cert.pem'),\\n     *   agent: false\\n     * };\\n     *\\n     * const req = https.request(options, (res) => {\\n     *   // ...\\n     * });\\n     * ```\\n     *\\n     * Example using a `URL` as `options`:\\n     *\\n     * ```js\\n     * const options = new URL('https://abc:xyz@example.com');\\n     *\\n     * const req = https.request(options, (res) => {\\n     *   // ...\\n     * });\\n     * ```\\n     *\\n     * Example pinning on certificate fingerprint, or the public key (similar to`pin-sha256`):\\n     *\\n     * ```js\\n     * const tls = require('tls');\\n     * const https = require('https');\\n     * const crypto = require('crypto');\\n     *\\n     * function sha256(s) {\\n     *   return crypto.createHash('sha256').update(s).digest('base64');\\n     * }\\n     * const options = {\\n     *   hostname: 'github.com',\\n     *   port: 443,\\n     *   path: '/',\\n     *   method: 'GET',\\n     *   checkServerIdentity: function(host, cert) {\\n     *     // Make sure the certificate is issued to the host we are connected to\\n     *     const err = tls.checkServerIdentity(host, cert);\\n     *     if (err) {\\n     *       return err;\\n     *     }\\n     *\\n     *     // Pin the public key, similar to HPKP pin-sha25 pinning\\n     *     const pubkey256 = 'pL1+qb9HTMRZJmuC/bB/ZI9d302BYrrqiVuRyW+DGrU=';\\n     *     if (sha256(cert.pubkey) !== pubkey256) {\\n     *       const msg = 'Certificate verification error: ' +\\n     *         `The public key of '${cert.subject.CN}' ` +\\n     *         'does not match our pinned fingerprint';\\n     *       return new Error(msg);\\n     *     }\\n     *\\n     *     // Pin the exact certificate, rather than the pub key\\n     *     const cert256 = '25:FE:39:32:D9:63:8C:8A:FC:A1:9A:29:87:' +\\n     *       'D8:3E:4C:1D:98:DB:71:E4:1A:48:03:98:EA:22:6A:BD:8B:93:16';\\n     *     if (cert.fingerprint256 !== cert256) {\\n     *       const msg = 'Certificate verification error: ' +\\n     *         `The certificate of '${cert.subject.CN}' ` +\\n     *         'does not match our pinned fingerprint';\\n     *       return new Error(msg);\\n     *     }\\n     *\\n     *     // This loop is informational only.\\n     *     // Print the certificate and public key fingerprints of all certs in the\\n     *     // chain. Its common to pin the public key of the issuer on the public\\n     *     // internet, while pinning the public key of the service in sensitive\\n     *     // environments.\\n     *     do {\\n     *       console.log('Subject Common Name:', cert.subject.CN);\\n     *       console.log('  Certificate SHA256 fingerprint:', cert.fingerprint256);\\n     *\\n     *       hash = crypto.createHash('sha256');\\n     *       console.log('  Public key ping-sha256:', sha256(cert.pubkey));\\n     *\\n     *       lastprint256 = cert.fingerprint256;\\n     *       cert = cert.issuerCertificate;\\n     *     } while (cert.fingerprint256 !== lastprint256);\\n     *\\n     *   },\\n     * };\\n     *\\n     * options.agent = new https.Agent(options);\\n     * const req = https.request(options, (res) => {\\n     *   console.log('All OK. Server matched our pinned cert or public key');\\n     *   console.log('statusCode:', res.statusCode);\\n     *   // Print the HPKP values\\n     *   console.log('headers:', res.headers['public-key-pins']);\\n     *\\n     *   res.on('data', (d) => {});\\n     * });\\n     *\\n     * req.on('error', (e) => {\\n     *   console.error(e.message);\\n     * });\\n     * req.end();\\n     * ```\\n     *\\n     * Outputs for example:\\n     *\\n     * ```text\\n     * Subject Common Name: github.com\\n     *   Certificate SHA256 fingerprint: 25:FE:39:32:D9:63:8C:8A:FC:A1:9A:29:87:D8:3E:4C:1D:98:DB:71:E4:1A:48:03:98:EA:22:6A:BD:8B:93:16\\n     *   Public key ping-sha256: pL1+qb9HTMRZJmuC/bB/ZI9d302BYrrqiVuRyW+DGrU=\\n     * Subject Common Name: DigiCert SHA2 Extended Validation Server CA\\n     *   Certificate SHA256 fingerprint: 40:3E:06:2A:26:53:05:91:13:28:5B:AF:80:A0:D4:AE:42:2C:84:8C:9F:78:FA:D0:1F:C9:4B:C5:B8:7F:EF:1A\\n     *   Public key ping-sha256: RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\\n     * Subject Common Name: DigiCert High Assurance EV Root CA\\n     *   Certificate SHA256 fingerprint: 74:31:E5:F4:C3:C1:CE:46:90:77:4F:0B:61:E0:54:40:88:3B:A9:A0:1E:D0:0B:A6:AB:D7:80:6E:D3:B1:18:CF\\n     *   Public key ping-sha256: WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\\n     * All OK. Server matched our pinned cert or public key\\n     * statusCode: 200\\n     * headers: max-age=0; pin-sha256=\\\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\\\"; pin-sha256=\\\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\\\";\\n     * pin-sha256=\\\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\\\"; pin-sha256=\\\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\\\"; pin-sha256=\\\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\\\";\\n     * pin-sha256=\\\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\\\"; pin-sha256=\\\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\\\"; includeSubDomains\\n     * ```\\n     * @since v0.3.6\\n     * @param options Accepts all `options` from `request`, with some differences in default values:\\n     */\\n    function request(\\n        options: RequestOptions | string | URL,\\n        callback?: (res: http.IncomingMessage) => void,\\n    ): http.ClientRequest;\\n    function request(\\n        url: string | URL,\\n        options: RequestOptions,\\n        callback?: (res: http.IncomingMessage) => void,\\n    ): http.ClientRequest;\\n    /**\\n     * Like `http.get()` but for HTTPS.\\n     *\\n     * `options` can be an object, a string, or a `URL` object. If `options` is a\\n     * string, it is automatically parsed with `new URL()`. If it is a `URL` object, it will be automatically converted to an ordinary `options` object.\\n     *\\n     * ```js\\n     * const https = require('https');\\n     *\\n     * https.get('https://encrypted.google.com/', (res) => {\\n     *   console.log('statusCode:', res.statusCode);\\n     *   console.log('headers:', res.headers);\\n     *\\n     *   res.on('data', (d) => {\\n     *     process.stdout.write(d);\\n     *   });\\n     *\\n     * }).on('error', (e) => {\\n     *   console.error(e);\\n     * });\\n     * ```\\n     * @since v0.3.6\\n     * @param options Accepts the same `options` as {@link request}, with the `method` always set to `GET`.\\n     */\\n    function get(\\n        options: RequestOptions | string | URL,\\n        callback?: (res: http.IncomingMessage) => void,\\n    ): http.ClientRequest;\\n    function get(\\n        url: string | URL,\\n        options: RequestOptions,\\n        callback?: (res: http.IncomingMessage) => void,\\n    ): http.ClientRequest;\\n    let globalAgent: Agent;\\n}\\ndeclare module 'node:https' {\\n    export * from 'https';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/index.d.ts\":\"/**\\n * License for programmatically and manually incorporated\\n * documentation aka. `JSDoc` from https://github.com/nodejs/node/tree/master/doc\\n *\\n * Copyright Node.js contributors. All rights reserved.\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to\\n * deal in the Software without restriction, including without limitation the\\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\\n * sell copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * all copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\\n * IN THE SOFTWARE.\\n */\\n\\n// NOTE: These definitions support NodeJS and TypeScript 4.8 and earlier.\\n\\n// Reference required types from the default lib:\\n/// <reference lib=\\\"es2020\\\" />\\n/// <reference lib=\\\"esnext.asynciterable\\\" />\\n/// <reference lib=\\\"esnext.intl\\\" />\\n/// <reference lib=\\\"esnext.bigint\\\" />\\n\\n// Base definitions for all NodeJS modules that are not specific to any version of TypeScript:\\n/// <reference path=\\\"assert.d.ts\\\" />\\n/// <reference path=\\\"assert/strict.d.ts\\\" />\\n/// <reference path=\\\"globals.d.ts\\\" />\\n/// <reference path=\\\"async_hooks.d.ts\\\" />\\n/// <reference path=\\\"buffer.d.ts\\\" />\\n/// <reference path=\\\"child_process.d.ts\\\" />\\n/// <reference path=\\\"cluster.d.ts\\\" />\\n/// <reference path=\\\"console.d.ts\\\" />\\n/// <reference path=\\\"constants.d.ts\\\" />\\n/// <reference path=\\\"crypto.d.ts\\\" />\\n/// <reference path=\\\"dgram.d.ts\\\" />\\n/// <reference path=\\\"diagnostics_channel.d.ts\\\" />\\n/// <reference path=\\\"dns.d.ts\\\" />\\n/// <reference path=\\\"dns/promises.d.ts\\\" />\\n/// <reference path=\\\"dns/promises.d.ts\\\" />\\n/// <reference path=\\\"domain.d.ts\\\" />\\n/// <reference path=\\\"dom-events.d.ts\\\" />\\n/// <reference path=\\\"events.d.ts\\\" />\\n/// <reference path=\\\"fs.d.ts\\\" />\\n/// <reference path=\\\"fs/promises.d.ts\\\" />\\n/// <reference path=\\\"http.d.ts\\\" />\\n/// <reference path=\\\"http2.d.ts\\\" />\\n/// <reference path=\\\"https.d.ts\\\" />\\n/// <reference path=\\\"inspector.d.ts\\\" />\\n/// <reference path=\\\"module.d.ts\\\" />\\n/// <reference path=\\\"net.d.ts\\\" />\\n/// <reference path=\\\"os.d.ts\\\" />\\n/// <reference path=\\\"path.d.ts\\\" />\\n/// <reference path=\\\"perf_hooks.d.ts\\\" />\\n/// <reference path=\\\"process.d.ts\\\" />\\n/// <reference path=\\\"punycode.d.ts\\\" />\\n/// <reference path=\\\"querystring.d.ts\\\" />\\n/// <reference path=\\\"readline.d.ts\\\" />\\n/// <reference path=\\\"readline/promises.d.ts\\\" />\\n/// <reference path=\\\"repl.d.ts\\\" />\\n/// <reference path=\\\"stream.d.ts\\\" />\\n/// <reference path=\\\"stream/promises.d.ts\\\" />\\n/// <reference path=\\\"stream/consumers.d.ts\\\" />\\n/// <reference path=\\\"stream/web.d.ts\\\" />\\n/// <reference path=\\\"string_decoder.d.ts\\\" />\\n/// <reference path=\\\"test.d.ts\\\" />\\n/// <reference path=\\\"timers.d.ts\\\" />\\n/// <reference path=\\\"timers/promises.d.ts\\\" />\\n/// <reference path=\\\"tls.d.ts\\\" />\\n/// <reference path=\\\"trace_events.d.ts\\\" />\\n/// <reference path=\\\"tty.d.ts\\\" />\\n/// <reference path=\\\"url.d.ts\\\" />\\n/// <reference path=\\\"util.d.ts\\\" />\\n/// <reference path=\\\"v8.d.ts\\\" />\\n/// <reference path=\\\"vm.d.ts\\\" />\\n/// <reference path=\\\"wasi.d.ts\\\" />\\n/// <reference path=\\\"worker_threads.d.ts\\\" />\\n/// <reference path=\\\"zlib.d.ts\\\" />\\n\\n/// <reference path=\\\"globals.global.d.ts\\\" />\\n\",\"file:///node_modules/@types/node/ts4.8/inspector.d.ts\":\"// eslint-disable-next-line dt-header\\n// Type definitions for inspector\\n\\n// These definitions are auto-generated.\\n// Please see https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19330\\n// for more information.\\n\\n// tslint:disable:max-line-length\\n\\n/**\\n * The `inspector` module provides an API for interacting with the V8 inspector.\\n *\\n * It can be accessed using:\\n *\\n * ```js\\n * const inspector = require('inspector');\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/inspector.js)\\n */\\ndeclare module 'inspector' {\\n    import EventEmitter = require('node:events');\\n    interface InspectorNotification<T> {\\n        method: string;\\n        params: T;\\n    }\\n    namespace Schema {\\n        /**\\n         * Description of the protocol domain.\\n         */\\n        interface Domain {\\n            /**\\n             * Domain name.\\n             */\\n            name: string;\\n            /**\\n             * Domain version.\\n             */\\n            version: string;\\n        }\\n        interface GetDomainsReturnType {\\n            /**\\n             * List of supported domains.\\n             */\\n            domains: Domain[];\\n        }\\n    }\\n    namespace Runtime {\\n        /**\\n         * Unique script identifier.\\n         */\\n        type ScriptId = string;\\n        /**\\n         * Unique object identifier.\\n         */\\n        type RemoteObjectId = string;\\n        /**\\n         * Primitive value which cannot be JSON-stringified.\\n         */\\n        type UnserializableValue = string;\\n        /**\\n         * Mirror object referencing original JavaScript object.\\n         */\\n        interface RemoteObject {\\n            /**\\n             * Object type.\\n             */\\n            type: string;\\n            /**\\n             * Object subtype hint. Specified for <code>object</code> type values only.\\n             */\\n            subtype?: string | undefined;\\n            /**\\n             * Object class (constructor) name. Specified for <code>object</code> type values only.\\n             */\\n            className?: string | undefined;\\n            /**\\n             * Remote object value in case of primitive values or JSON values (if it was requested).\\n             */\\n            value?: any;\\n            /**\\n             * Primitive value which can not be JSON-stringified does not have <code>value</code>, but gets this property.\\n             */\\n            unserializableValue?: UnserializableValue | undefined;\\n            /**\\n             * String representation of the object.\\n             */\\n            description?: string | undefined;\\n            /**\\n             * Unique object identifier (for non-primitive values).\\n             */\\n            objectId?: RemoteObjectId | undefined;\\n            /**\\n             * Preview containing abbreviated property values. Specified for <code>object</code> type values only.\\n             * @experimental\\n             */\\n            preview?: ObjectPreview | undefined;\\n            /**\\n             * @experimental\\n             */\\n            customPreview?: CustomPreview | undefined;\\n        }\\n        /**\\n         * @experimental\\n         */\\n        interface CustomPreview {\\n            header: string;\\n            hasBody: boolean;\\n            formatterObjectId: RemoteObjectId;\\n            bindRemoteObjectFunctionId: RemoteObjectId;\\n            configObjectId?: RemoteObjectId | undefined;\\n        }\\n        /**\\n         * Object containing abbreviated remote object value.\\n         * @experimental\\n         */\\n        interface ObjectPreview {\\n            /**\\n             * Object type.\\n             */\\n            type: string;\\n            /**\\n             * Object subtype hint. Specified for <code>object</code> type values only.\\n             */\\n            subtype?: string | undefined;\\n            /**\\n             * String representation of the object.\\n             */\\n            description?: string | undefined;\\n            /**\\n             * True iff some of the properties or entries of the original object did not fit.\\n             */\\n            overflow: boolean;\\n            /**\\n             * List of the properties.\\n             */\\n            properties: PropertyPreview[];\\n            /**\\n             * List of the entries. Specified for <code>map</code> and <code>set</code> subtype values only.\\n             */\\n            entries?: EntryPreview[] | undefined;\\n        }\\n        /**\\n         * @experimental\\n         */\\n        interface PropertyPreview {\\n            /**\\n             * Property name.\\n             */\\n            name: string;\\n            /**\\n             * Object type. Accessor means that the property itself is an accessor property.\\n             */\\n            type: string;\\n            /**\\n             * User-friendly property value string.\\n             */\\n            value?: string | undefined;\\n            /**\\n             * Nested value preview.\\n             */\\n            valuePreview?: ObjectPreview | undefined;\\n            /**\\n             * Object subtype hint. Specified for <code>object</code> type values only.\\n             */\\n            subtype?: string | undefined;\\n        }\\n        /**\\n         * @experimental\\n         */\\n        interface EntryPreview {\\n            /**\\n             * Preview of the key. Specified for map-like collection entries.\\n             */\\n            key?: ObjectPreview | undefined;\\n            /**\\n             * Preview of the value.\\n             */\\n            value: ObjectPreview;\\n        }\\n        /**\\n         * Object property descriptor.\\n         */\\n        interface PropertyDescriptor {\\n            /**\\n             * Property name or symbol description.\\n             */\\n            name: string;\\n            /**\\n             * The value associated with the property.\\n             */\\n            value?: RemoteObject | undefined;\\n            /**\\n             * True if the value associated with the property may be changed (data descriptors only).\\n             */\\n            writable?: boolean | undefined;\\n            /**\\n             * A function which serves as a getter for the property, or <code>undefined</code> if there is no getter (accessor descriptors only).\\n             */\\n            get?: RemoteObject | undefined;\\n            /**\\n             * A function which serves as a setter for the property, or <code>undefined</code> if there is no setter (accessor descriptors only).\\n             */\\n            set?: RemoteObject | undefined;\\n            /**\\n             * True if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.\\n             */\\n            configurable: boolean;\\n            /**\\n             * True if this property shows up during enumeration of the properties on the corresponding object.\\n             */\\n            enumerable: boolean;\\n            /**\\n             * True if the result was thrown during the evaluation.\\n             */\\n            wasThrown?: boolean | undefined;\\n            /**\\n             * True if the property is owned for the object.\\n             */\\n            isOwn?: boolean | undefined;\\n            /**\\n             * Property symbol object, if the property is of the <code>symbol</code> type.\\n             */\\n            symbol?: RemoteObject | undefined;\\n        }\\n        /**\\n         * Object internal property descriptor. This property isn't normally visible in JavaScript code.\\n         */\\n        interface InternalPropertyDescriptor {\\n            /**\\n             * Conventional property name.\\n             */\\n            name: string;\\n            /**\\n             * The value associated with the property.\\n             */\\n            value?: RemoteObject | undefined;\\n        }\\n        /**\\n         * Represents function call argument. Either remote object id <code>objectId</code>, primitive <code>value</code>, unserializable primitive value or neither of (for undefined) them should be specified.\\n         */\\n        interface CallArgument {\\n            /**\\n             * Primitive value or serializable javascript object.\\n             */\\n            value?: any;\\n            /**\\n             * Primitive value which can not be JSON-stringified.\\n             */\\n            unserializableValue?: UnserializableValue | undefined;\\n            /**\\n             * Remote object handle.\\n             */\\n            objectId?: RemoteObjectId | undefined;\\n        }\\n        /**\\n         * Id of an execution context.\\n         */\\n        type ExecutionContextId = number;\\n        /**\\n         * Description of an isolated world.\\n         */\\n        interface ExecutionContextDescription {\\n            /**\\n             * Unique id of the execution context. It can be used to specify in which execution context script evaluation should be performed.\\n             */\\n            id: ExecutionContextId;\\n            /**\\n             * Execution context origin.\\n             */\\n            origin: string;\\n            /**\\n             * Human readable name describing given context.\\n             */\\n            name: string;\\n            /**\\n             * Embedder-specific auxiliary data.\\n             */\\n            auxData?: {} | undefined;\\n        }\\n        /**\\n         * Detailed information about exception (or error) that was thrown during script compilation or execution.\\n         */\\n        interface ExceptionDetails {\\n            /**\\n             * Exception id.\\n             */\\n            exceptionId: number;\\n            /**\\n             * Exception text, which should be used together with exception object when available.\\n             */\\n            text: string;\\n            /**\\n             * Line number of the exception location (0-based).\\n             */\\n            lineNumber: number;\\n            /**\\n             * Column number of the exception location (0-based).\\n             */\\n            columnNumber: number;\\n            /**\\n             * Script ID of the exception location.\\n             */\\n            scriptId?: ScriptId | undefined;\\n            /**\\n             * URL of the exception location, to be used when the script was not reported.\\n             */\\n            url?: string | undefined;\\n            /**\\n             * JavaScript stack trace if available.\\n             */\\n            stackTrace?: StackTrace | undefined;\\n            /**\\n             * Exception object if available.\\n             */\\n            exception?: RemoteObject | undefined;\\n            /**\\n             * Identifier of the context where exception happened.\\n             */\\n            executionContextId?: ExecutionContextId | undefined;\\n        }\\n        /**\\n         * Number of milliseconds since epoch.\\n         */\\n        type Timestamp = number;\\n        /**\\n         * Stack entry for runtime errors and assertions.\\n         */\\n        interface CallFrame {\\n            /**\\n             * JavaScript function name.\\n             */\\n            functionName: string;\\n            /**\\n             * JavaScript script id.\\n             */\\n            scriptId: ScriptId;\\n            /**\\n             * JavaScript script name or url.\\n             */\\n            url: string;\\n            /**\\n             * JavaScript script line number (0-based).\\n             */\\n            lineNumber: number;\\n            /**\\n             * JavaScript script column number (0-based).\\n             */\\n            columnNumber: number;\\n        }\\n        /**\\n         * Call frames for assertions or error messages.\\n         */\\n        interface StackTrace {\\n            /**\\n             * String label of this stack trace. For async traces this may be a name of the function that initiated the async call.\\n             */\\n            description?: string | undefined;\\n            /**\\n             * JavaScript function name.\\n             */\\n            callFrames: CallFrame[];\\n            /**\\n             * Asynchronous JavaScript stack trace that preceded this stack, if available.\\n             */\\n            parent?: StackTrace | undefined;\\n            /**\\n             * Asynchronous JavaScript stack trace that preceded this stack, if available.\\n             * @experimental\\n             */\\n            parentId?: StackTraceId | undefined;\\n        }\\n        /**\\n         * Unique identifier of current debugger.\\n         * @experimental\\n         */\\n        type UniqueDebuggerId = string;\\n        /**\\n         * If <code>debuggerId</code> is set stack trace comes from another debugger and can be resolved there. This allows to track cross-debugger calls. See <code>Runtime.StackTrace</code> and <code>Debugger.paused</code> for usages.\\n         * @experimental\\n         */\\n        interface StackTraceId {\\n            id: string;\\n            debuggerId?: UniqueDebuggerId | undefined;\\n        }\\n        interface EvaluateParameterType {\\n            /**\\n             * Expression to evaluate.\\n             */\\n            expression: string;\\n            /**\\n             * Symbolic group name that can be used to release multiple objects.\\n             */\\n            objectGroup?: string | undefined;\\n            /**\\n             * Determines whether Command Line API should be available during the evaluation.\\n             */\\n            includeCommandLineAPI?: boolean | undefined;\\n            /**\\n             * In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state.\\n             */\\n            silent?: boolean | undefined;\\n            /**\\n             * Specifies in which execution context to perform evaluation. If the parameter is omitted the evaluation will be performed in the context of the inspected page.\\n             */\\n            contextId?: ExecutionContextId | undefined;\\n            /**\\n             * Whether the result is expected to be a JSON object that should be sent by value.\\n             */\\n            returnByValue?: boolean | undefined;\\n            /**\\n             * Whether preview should be generated for the result.\\n             * @experimental\\n             */\\n            generatePreview?: boolean | undefined;\\n            /**\\n             * Whether execution should be treated as initiated by user in the UI.\\n             */\\n            userGesture?: boolean | undefined;\\n            /**\\n             * Whether execution should <code>await</code> for resulting value and return once awaited promise is resolved.\\n             */\\n            awaitPromise?: boolean | undefined;\\n        }\\n        interface AwaitPromiseParameterType {\\n            /**\\n             * Identifier of the promise.\\n             */\\n            promiseObjectId: RemoteObjectId;\\n            /**\\n             * Whether the result is expected to be a JSON object that should be sent by value.\\n             */\\n            returnByValue?: boolean | undefined;\\n            /**\\n             * Whether preview should be generated for the result.\\n             */\\n            generatePreview?: boolean | undefined;\\n        }\\n        interface CallFunctionOnParameterType {\\n            /**\\n             * Declaration of the function to call.\\n             */\\n            functionDeclaration: string;\\n            /**\\n             * Identifier of the object to call function on. Either objectId or executionContextId should be specified.\\n             */\\n            objectId?: RemoteObjectId | undefined;\\n            /**\\n             * Call arguments. All call arguments must belong to the same JavaScript world as the target object.\\n             */\\n            arguments?: CallArgument[] | undefined;\\n            /**\\n             * In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state.\\n             */\\n            silent?: boolean | undefined;\\n            /**\\n             * Whether the result is expected to be a JSON object which should be sent by value.\\n             */\\n            returnByValue?: boolean | undefined;\\n            /**\\n             * Whether preview should be generated for the result.\\n             * @experimental\\n             */\\n            generatePreview?: boolean | undefined;\\n            /**\\n             * Whether execution should be treated as initiated by user in the UI.\\n             */\\n            userGesture?: boolean | undefined;\\n            /**\\n             * Whether execution should <code>await</code> for resulting value and return once awaited promise is resolved.\\n             */\\n            awaitPromise?: boolean | undefined;\\n            /**\\n             * Specifies execution context which global object will be used to call function on. Either executionContextId or objectId should be specified.\\n             */\\n            executionContextId?: ExecutionContextId | undefined;\\n            /**\\n             * Symbolic group name that can be used to release multiple objects. If objectGroup is not specified and objectId is, objectGroup will be inherited from object.\\n             */\\n            objectGroup?: string | undefined;\\n        }\\n        interface GetPropertiesParameterType {\\n            /**\\n             * Identifier of the object to return properties for.\\n             */\\n            objectId: RemoteObjectId;\\n            /**\\n             * If true, returns properties belonging only to the element itself, not to its prototype chain.\\n             */\\n            ownProperties?: boolean | undefined;\\n            /**\\n             * If true, returns accessor properties (with getter/setter) only; internal properties are not returned either.\\n             * @experimental\\n             */\\n            accessorPropertiesOnly?: boolean | undefined;\\n            /**\\n             * Whether preview should be generated for the results.\\n             * @experimental\\n             */\\n            generatePreview?: boolean | undefined;\\n        }\\n        interface ReleaseObjectParameterType {\\n            /**\\n             * Identifier of the object to release.\\n             */\\n            objectId: RemoteObjectId;\\n        }\\n        interface ReleaseObjectGroupParameterType {\\n            /**\\n             * Symbolic object group name.\\n             */\\n            objectGroup: string;\\n        }\\n        interface SetCustomObjectFormatterEnabledParameterType {\\n            enabled: boolean;\\n        }\\n        interface CompileScriptParameterType {\\n            /**\\n             * Expression to compile.\\n             */\\n            expression: string;\\n            /**\\n             * Source url to be set for the script.\\n             */\\n            sourceURL: string;\\n            /**\\n             * Specifies whether the compiled script should be persisted.\\n             */\\n            persistScript: boolean;\\n            /**\\n             * Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.\\n             */\\n            executionContextId?: ExecutionContextId | undefined;\\n        }\\n        interface RunScriptParameterType {\\n            /**\\n             * Id of the script to run.\\n             */\\n            scriptId: ScriptId;\\n            /**\\n             * Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.\\n             */\\n            executionContextId?: ExecutionContextId | undefined;\\n            /**\\n             * Symbolic group name that can be used to release multiple objects.\\n             */\\n            objectGroup?: string | undefined;\\n            /**\\n             * In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state.\\n             */\\n            silent?: boolean | undefined;\\n            /**\\n             * Determines whether Command Line API should be available during the evaluation.\\n             */\\n            includeCommandLineAPI?: boolean | undefined;\\n            /**\\n             * Whether the result is expected to be a JSON object which should be sent by value.\\n             */\\n            returnByValue?: boolean | undefined;\\n            /**\\n             * Whether preview should be generated for the result.\\n             */\\n            generatePreview?: boolean | undefined;\\n            /**\\n             * Whether execution should <code>await</code> for resulting value and return once awaited promise is resolved.\\n             */\\n            awaitPromise?: boolean | undefined;\\n        }\\n        interface QueryObjectsParameterType {\\n            /**\\n             * Identifier of the prototype to return objects for.\\n             */\\n            prototypeObjectId: RemoteObjectId;\\n        }\\n        interface GlobalLexicalScopeNamesParameterType {\\n            /**\\n             * Specifies in which execution context to lookup global scope variables.\\n             */\\n            executionContextId?: ExecutionContextId | undefined;\\n        }\\n        interface EvaluateReturnType {\\n            /**\\n             * Evaluation result.\\n             */\\n            result: RemoteObject;\\n            /**\\n             * Exception details.\\n             */\\n            exceptionDetails?: ExceptionDetails | undefined;\\n        }\\n        interface AwaitPromiseReturnType {\\n            /**\\n             * Promise result. Will contain rejected value if promise was rejected.\\n             */\\n            result: RemoteObject;\\n            /**\\n             * Exception details if stack strace is available.\\n             */\\n            exceptionDetails?: ExceptionDetails | undefined;\\n        }\\n        interface CallFunctionOnReturnType {\\n            /**\\n             * Call result.\\n             */\\n            result: RemoteObject;\\n            /**\\n             * Exception details.\\n             */\\n            exceptionDetails?: ExceptionDetails | undefined;\\n        }\\n        interface GetPropertiesReturnType {\\n            /**\\n             * Object properties.\\n             */\\n            result: PropertyDescriptor[];\\n            /**\\n             * Internal object properties (only of the element itself).\\n             */\\n            internalProperties?: InternalPropertyDescriptor[] | undefined;\\n            /**\\n             * Exception details.\\n             */\\n            exceptionDetails?: ExceptionDetails | undefined;\\n        }\\n        interface CompileScriptReturnType {\\n            /**\\n             * Id of the script.\\n             */\\n            scriptId?: ScriptId | undefined;\\n            /**\\n             * Exception details.\\n             */\\n            exceptionDetails?: ExceptionDetails | undefined;\\n        }\\n        interface RunScriptReturnType {\\n            /**\\n             * Run result.\\n             */\\n            result: RemoteObject;\\n            /**\\n             * Exception details.\\n             */\\n            exceptionDetails?: ExceptionDetails | undefined;\\n        }\\n        interface QueryObjectsReturnType {\\n            /**\\n             * Array with objects.\\n             */\\n            objects: RemoteObject;\\n        }\\n        interface GlobalLexicalScopeNamesReturnType {\\n            names: string[];\\n        }\\n        interface ExecutionContextCreatedEventDataType {\\n            /**\\n             * A newly created execution context.\\n             */\\n            context: ExecutionContextDescription;\\n        }\\n        interface ExecutionContextDestroyedEventDataType {\\n            /**\\n             * Id of the destroyed context\\n             */\\n            executionContextId: ExecutionContextId;\\n        }\\n        interface ExceptionThrownEventDataType {\\n            /**\\n             * Timestamp of the exception.\\n             */\\n            timestamp: Timestamp;\\n            exceptionDetails: ExceptionDetails;\\n        }\\n        interface ExceptionRevokedEventDataType {\\n            /**\\n             * Reason describing why exception was revoked.\\n             */\\n            reason: string;\\n            /**\\n             * The id of revoked exception, as reported in <code>exceptionThrown</code>.\\n             */\\n            exceptionId: number;\\n        }\\n        interface ConsoleAPICalledEventDataType {\\n            /**\\n             * Type of the call.\\n             */\\n            type: string;\\n            /**\\n             * Call arguments.\\n             */\\n            args: RemoteObject[];\\n            /**\\n             * Identifier of the context where the call was made.\\n             */\\n            executionContextId: ExecutionContextId;\\n            /**\\n             * Call timestamp.\\n             */\\n            timestamp: Timestamp;\\n            /**\\n             * Stack trace captured when the call was made.\\n             */\\n            stackTrace?: StackTrace | undefined;\\n            /**\\n             * Console context descriptor for calls on non-default console context (not console.*): 'anonymous#unique-logger-id' for call on unnamed context, 'name#unique-logger-id' for call on named context.\\n             * @experimental\\n             */\\n            context?: string | undefined;\\n        }\\n        interface InspectRequestedEventDataType {\\n            object: RemoteObject;\\n            hints: {};\\n        }\\n    }\\n    namespace Debugger {\\n        /**\\n         * Breakpoint identifier.\\n         */\\n        type BreakpointId = string;\\n        /**\\n         * Call frame identifier.\\n         */\\n        type CallFrameId = string;\\n        /**\\n         * Location in the source code.\\n         */\\n        interface Location {\\n            /**\\n             * Script identifier as reported in the <code>Debugger.scriptParsed</code>.\\n             */\\n            scriptId: Runtime.ScriptId;\\n            /**\\n             * Line number in the script (0-based).\\n             */\\n            lineNumber: number;\\n            /**\\n             * Column number in the script (0-based).\\n             */\\n            columnNumber?: number | undefined;\\n        }\\n        /**\\n         * Location in the source code.\\n         * @experimental\\n         */\\n        interface ScriptPosition {\\n            lineNumber: number;\\n            columnNumber: number;\\n        }\\n        /**\\n         * JavaScript call frame. Array of call frames form the call stack.\\n         */\\n        interface CallFrame {\\n            /**\\n             * Call frame identifier. This identifier is only valid while the virtual machine is paused.\\n             */\\n            callFrameId: CallFrameId;\\n            /**\\n             * Name of the JavaScript function called on this call frame.\\n             */\\n            functionName: string;\\n            /**\\n             * Location in the source code.\\n             */\\n            functionLocation?: Location | undefined;\\n            /**\\n             * Location in the source code.\\n             */\\n            location: Location;\\n            /**\\n             * JavaScript script name or url.\\n             */\\n            url: string;\\n            /**\\n             * Scope chain for this call frame.\\n             */\\n            scopeChain: Scope[];\\n            /**\\n             * <code>this</code> object for this call frame.\\n             */\\n            this: Runtime.RemoteObject;\\n            /**\\n             * The value being returned, if the function is at return point.\\n             */\\n            returnValue?: Runtime.RemoteObject | undefined;\\n        }\\n        /**\\n         * Scope description.\\n         */\\n        interface Scope {\\n            /**\\n             * Scope type.\\n             */\\n            type: string;\\n            /**\\n             * Object representing the scope. For <code>global</code> and <code>with</code> scopes it represents the actual object; for the rest of the scopes, it is artificial transient object enumerating scope variables as its properties.\\n             */\\n            object: Runtime.RemoteObject;\\n            name?: string | undefined;\\n            /**\\n             * Location in the source code where scope starts\\n             */\\n            startLocation?: Location | undefined;\\n            /**\\n             * Location in the source code where scope ends\\n             */\\n            endLocation?: Location | undefined;\\n        }\\n        /**\\n         * Search match for resource.\\n         */\\n        interface SearchMatch {\\n            /**\\n             * Line number in resource content.\\n             */\\n            lineNumber: number;\\n            /**\\n             * Line with match content.\\n             */\\n            lineContent: string;\\n        }\\n        interface BreakLocation {\\n            /**\\n             * Script identifier as reported in the <code>Debugger.scriptParsed</code>.\\n             */\\n            scriptId: Runtime.ScriptId;\\n            /**\\n             * Line number in the script (0-based).\\n             */\\n            lineNumber: number;\\n            /**\\n             * Column number in the script (0-based).\\n             */\\n            columnNumber?: number | undefined;\\n            type?: string | undefined;\\n        }\\n        interface SetBreakpointsActiveParameterType {\\n            /**\\n             * New value for breakpoints active state.\\n             */\\n            active: boolean;\\n        }\\n        interface SetSkipAllPausesParameterType {\\n            /**\\n             * New value for skip pauses state.\\n             */\\n            skip: boolean;\\n        }\\n        interface SetBreakpointByUrlParameterType {\\n            /**\\n             * Line number to set breakpoint at.\\n             */\\n            lineNumber: number;\\n            /**\\n             * URL of the resources to set breakpoint on.\\n             */\\n            url?: string | undefined;\\n            /**\\n             * Regex pattern for the URLs of the resources to set breakpoints on. Either <code>url</code> or <code>urlRegex</code> must be specified.\\n             */\\n            urlRegex?: string | undefined;\\n            /**\\n             * Script hash of the resources to set breakpoint on.\\n             */\\n            scriptHash?: string | undefined;\\n            /**\\n             * Offset in the line to set breakpoint at.\\n             */\\n            columnNumber?: number | undefined;\\n            /**\\n             * Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.\\n             */\\n            condition?: string | undefined;\\n        }\\n        interface SetBreakpointParameterType {\\n            /**\\n             * Location to set breakpoint in.\\n             */\\n            location: Location;\\n            /**\\n             * Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.\\n             */\\n            condition?: string | undefined;\\n        }\\n        interface RemoveBreakpointParameterType {\\n            breakpointId: BreakpointId;\\n        }\\n        interface GetPossibleBreakpointsParameterType {\\n            /**\\n             * Start of range to search possible breakpoint locations in.\\n             */\\n            start: Location;\\n            /**\\n             * End of range to search possible breakpoint locations in (excluding). When not specified, end of scripts is used as end of range.\\n             */\\n            end?: Location | undefined;\\n            /**\\n             * Only consider locations which are in the same (non-nested) function as start.\\n             */\\n            restrictToFunction?: boolean | undefined;\\n        }\\n        interface ContinueToLocationParameterType {\\n            /**\\n             * Location to continue to.\\n             */\\n            location: Location;\\n            targetCallFrames?: string | undefined;\\n        }\\n        interface PauseOnAsyncCallParameterType {\\n            /**\\n             * Debugger will pause when async call with given stack trace is started.\\n             */\\n            parentStackTraceId: Runtime.StackTraceId;\\n        }\\n        interface StepIntoParameterType {\\n            /**\\n             * Debugger will issue additional Debugger.paused notification if any async task is scheduled before next pause.\\n             * @experimental\\n             */\\n            breakOnAsyncCall?: boolean | undefined;\\n        }\\n        interface GetStackTraceParameterType {\\n            stackTraceId: Runtime.StackTraceId;\\n        }\\n        interface SearchInContentParameterType {\\n            /**\\n             * Id of the script to search in.\\n             */\\n            scriptId: Runtime.ScriptId;\\n            /**\\n             * String to search for.\\n             */\\n            query: string;\\n            /**\\n             * If true, search is case sensitive.\\n             */\\n            caseSensitive?: boolean | undefined;\\n            /**\\n             * If true, treats string parameter as regex.\\n             */\\n            isRegex?: boolean | undefined;\\n        }\\n        interface SetScriptSourceParameterType {\\n            /**\\n             * Id of the script to edit.\\n             */\\n            scriptId: Runtime.ScriptId;\\n            /**\\n             * New content of the script.\\n             */\\n            scriptSource: string;\\n            /**\\n             *  If true the change will not actually be applied. Dry run may be used to get result description without actually modifying the code.\\n             */\\n            dryRun?: boolean | undefined;\\n        }\\n        interface RestartFrameParameterType {\\n            /**\\n             * Call frame identifier to evaluate on.\\n             */\\n            callFrameId: CallFrameId;\\n        }\\n        interface GetScriptSourceParameterType {\\n            /**\\n             * Id of the script to get source for.\\n             */\\n            scriptId: Runtime.ScriptId;\\n        }\\n        interface SetPauseOnExceptionsParameterType {\\n            /**\\n             * Pause on exceptions mode.\\n             */\\n            state: string;\\n        }\\n        interface EvaluateOnCallFrameParameterType {\\n            /**\\n             * Call frame identifier to evaluate on.\\n             */\\n            callFrameId: CallFrameId;\\n            /**\\n             * Expression to evaluate.\\n             */\\n            expression: string;\\n            /**\\n             * String object group name to put result into (allows rapid releasing resulting object handles using <code>releaseObjectGroup</code>).\\n             */\\n            objectGroup?: string | undefined;\\n            /**\\n             * Specifies whether command line API should be available to the evaluated expression, defaults to false.\\n             */\\n            includeCommandLineAPI?: boolean | undefined;\\n            /**\\n             * In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state.\\n             */\\n            silent?: boolean | undefined;\\n            /**\\n             * Whether the result is expected to be a JSON object that should be sent by value.\\n             */\\n            returnByValue?: boolean | undefined;\\n            /**\\n             * Whether preview should be generated for the result.\\n             * @experimental\\n             */\\n            generatePreview?: boolean | undefined;\\n            /**\\n             * Whether to throw an exception if side effect cannot be ruled out during evaluation.\\n             */\\n            throwOnSideEffect?: boolean | undefined;\\n        }\\n        interface SetVariableValueParameterType {\\n            /**\\n             * 0-based number of scope as was listed in scope chain. Only 'local', 'closure' and 'catch' scope types are allowed. Other scopes could be manipulated manually.\\n             */\\n            scopeNumber: number;\\n            /**\\n             * Variable name.\\n             */\\n            variableName: string;\\n            /**\\n             * New variable value.\\n             */\\n            newValue: Runtime.CallArgument;\\n            /**\\n             * Id of callframe that holds variable.\\n             */\\n            callFrameId: CallFrameId;\\n        }\\n        interface SetReturnValueParameterType {\\n            /**\\n             * New return value.\\n             */\\n            newValue: Runtime.CallArgument;\\n        }\\n        interface SetAsyncCallStackDepthParameterType {\\n            /**\\n             * Maximum depth of async call stacks. Setting to <code>0</code> will effectively disable collecting async call stacks (default).\\n             */\\n            maxDepth: number;\\n        }\\n        interface SetBlackboxPatternsParameterType {\\n            /**\\n             * Array of regexps that will be used to check script url for blackbox state.\\n             */\\n            patterns: string[];\\n        }\\n        interface SetBlackboxedRangesParameterType {\\n            /**\\n             * Id of the script.\\n             */\\n            scriptId: Runtime.ScriptId;\\n            positions: ScriptPosition[];\\n        }\\n        interface EnableReturnType {\\n            /**\\n             * Unique identifier of the debugger.\\n             * @experimental\\n             */\\n            debuggerId: Runtime.UniqueDebuggerId;\\n        }\\n        interface SetBreakpointByUrlReturnType {\\n            /**\\n             * Id of the created breakpoint for further reference.\\n             */\\n            breakpointId: BreakpointId;\\n            /**\\n             * List of the locations this breakpoint resolved into upon addition.\\n             */\\n            locations: Location[];\\n        }\\n        interface SetBreakpointReturnType {\\n            /**\\n             * Id of the created breakpoint for further reference.\\n             */\\n            breakpointId: BreakpointId;\\n            /**\\n             * Location this breakpoint resolved into.\\n             */\\n            actualLocation: Location;\\n        }\\n        interface GetPossibleBreakpointsReturnType {\\n            /**\\n             * List of the possible breakpoint locations.\\n             */\\n            locations: BreakLocation[];\\n        }\\n        interface GetStackTraceReturnType {\\n            stackTrace: Runtime.StackTrace;\\n        }\\n        interface SearchInContentReturnType {\\n            /**\\n             * List of search matches.\\n             */\\n            result: SearchMatch[];\\n        }\\n        interface SetScriptSourceReturnType {\\n            /**\\n             * New stack trace in case editing has happened while VM was stopped.\\n             */\\n            callFrames?: CallFrame[] | undefined;\\n            /**\\n             * Whether current call stack  was modified after applying the changes.\\n             */\\n            stackChanged?: boolean | undefined;\\n            /**\\n             * Async stack trace, if any.\\n             */\\n            asyncStackTrace?: Runtime.StackTrace | undefined;\\n            /**\\n             * Async stack trace, if any.\\n             * @experimental\\n             */\\n            asyncStackTraceId?: Runtime.StackTraceId | undefined;\\n            /**\\n             * Exception details if any.\\n             */\\n            exceptionDetails?: Runtime.ExceptionDetails | undefined;\\n        }\\n        interface RestartFrameReturnType {\\n            /**\\n             * New stack trace.\\n             */\\n            callFrames: CallFrame[];\\n            /**\\n             * Async stack trace, if any.\\n             */\\n            asyncStackTrace?: Runtime.StackTrace | undefined;\\n            /**\\n             * Async stack trace, if any.\\n             * @experimental\\n             */\\n            asyncStackTraceId?: Runtime.StackTraceId | undefined;\\n        }\\n        interface GetScriptSourceReturnType {\\n            /**\\n             * Script source.\\n             */\\n            scriptSource: string;\\n        }\\n        interface EvaluateOnCallFrameReturnType {\\n            /**\\n             * Object wrapper for the evaluation result.\\n             */\\n            result: Runtime.RemoteObject;\\n            /**\\n             * Exception details.\\n             */\\n            exceptionDetails?: Runtime.ExceptionDetails | undefined;\\n        }\\n        interface ScriptParsedEventDataType {\\n            /**\\n             * Identifier of the script parsed.\\n             */\\n            scriptId: Runtime.ScriptId;\\n            /**\\n             * URL or name of the script parsed (if any).\\n             */\\n            url: string;\\n            /**\\n             * Line offset of the script within the resource with given URL (for script tags).\\n             */\\n            startLine: number;\\n            /**\\n             * Column offset of the script within the resource with given URL.\\n             */\\n            startColumn: number;\\n            /**\\n             * Last line of the script.\\n             */\\n            endLine: number;\\n            /**\\n             * Length of the last line of the script.\\n             */\\n            endColumn: number;\\n            /**\\n             * Specifies script creation context.\\n             */\\n            executionContextId: Runtime.ExecutionContextId;\\n            /**\\n             * Content hash of the script.\\n             */\\n            hash: string;\\n            /**\\n             * Embedder-specific auxiliary data.\\n             */\\n            executionContextAuxData?: {} | undefined;\\n            /**\\n             * True, if this script is generated as a result of the live edit operation.\\n             * @experimental\\n             */\\n            isLiveEdit?: boolean | undefined;\\n            /**\\n             * URL of source map associated with script (if any).\\n             */\\n            sourceMapURL?: string | undefined;\\n            /**\\n             * True, if this script has sourceURL.\\n             */\\n            hasSourceURL?: boolean | undefined;\\n            /**\\n             * True, if this script is ES6 module.\\n             */\\n            isModule?: boolean | undefined;\\n            /**\\n             * This script length.\\n             */\\n            length?: number | undefined;\\n            /**\\n             * JavaScript top stack frame of where the script parsed event was triggered if available.\\n             * @experimental\\n             */\\n            stackTrace?: Runtime.StackTrace | undefined;\\n        }\\n        interface ScriptFailedToParseEventDataType {\\n            /**\\n             * Identifier of the script parsed.\\n             */\\n            scriptId: Runtime.ScriptId;\\n            /**\\n             * URL or name of the script parsed (if any).\\n             */\\n            url: string;\\n            /**\\n             * Line offset of the script within the resource with given URL (for script tags).\\n             */\\n            startLine: number;\\n            /**\\n             * Column offset of the script within the resource with given URL.\\n             */\\n            startColumn: number;\\n            /**\\n             * Last line of the script.\\n             */\\n            endLine: number;\\n            /**\\n             * Length of the last line of the script.\\n             */\\n            endColumn: number;\\n            /**\\n             * Specifies script creation context.\\n             */\\n            executionContextId: Runtime.ExecutionContextId;\\n            /**\\n             * Content hash of the script.\\n             */\\n            hash: string;\\n            /**\\n             * Embedder-specific auxiliary data.\\n             */\\n            executionContextAuxData?: {} | undefined;\\n            /**\\n             * URL of source map associated with script (if any).\\n             */\\n            sourceMapURL?: string | undefined;\\n            /**\\n             * True, if this script has sourceURL.\\n             */\\n            hasSourceURL?: boolean | undefined;\\n            /**\\n             * True, if this script is ES6 module.\\n             */\\n            isModule?: boolean | undefined;\\n            /**\\n             * This script length.\\n             */\\n            length?: number | undefined;\\n            /**\\n             * JavaScript top stack frame of where the script parsed event was triggered if available.\\n             * @experimental\\n             */\\n            stackTrace?: Runtime.StackTrace | undefined;\\n        }\\n        interface BreakpointResolvedEventDataType {\\n            /**\\n             * Breakpoint unique identifier.\\n             */\\n            breakpointId: BreakpointId;\\n            /**\\n             * Actual breakpoint location.\\n             */\\n            location: Location;\\n        }\\n        interface PausedEventDataType {\\n            /**\\n             * Call stack the virtual machine stopped on.\\n             */\\n            callFrames: CallFrame[];\\n            /**\\n             * Pause reason.\\n             */\\n            reason: string;\\n            /**\\n             * Object containing break-specific auxiliary properties.\\n             */\\n            data?: {} | undefined;\\n            /**\\n             * Hit breakpoints IDs\\n             */\\n            hitBreakpoints?: string[] | undefined;\\n            /**\\n             * Async stack trace, if any.\\n             */\\n            asyncStackTrace?: Runtime.StackTrace | undefined;\\n            /**\\n             * Async stack trace, if any.\\n             * @experimental\\n             */\\n            asyncStackTraceId?: Runtime.StackTraceId | undefined;\\n            /**\\n             * Just scheduled async call will have this stack trace as parent stack during async execution. This field is available only after <code>Debugger.stepInto</code> call with <code>breakOnAsynCall</code> flag.\\n             * @experimental\\n             */\\n            asyncCallStackTraceId?: Runtime.StackTraceId | undefined;\\n        }\\n    }\\n    namespace Console {\\n        /**\\n         * Console message.\\n         */\\n        interface ConsoleMessage {\\n            /**\\n             * Message source.\\n             */\\n            source: string;\\n            /**\\n             * Message severity.\\n             */\\n            level: string;\\n            /**\\n             * Message text.\\n             */\\n            text: string;\\n            /**\\n             * URL of the message origin.\\n             */\\n            url?: string | undefined;\\n            /**\\n             * Line number in the resource that generated this message (1-based).\\n             */\\n            line?: number | undefined;\\n            /**\\n             * Column number in the resource that generated this message (1-based).\\n             */\\n            column?: number | undefined;\\n        }\\n        interface MessageAddedEventDataType {\\n            /**\\n             * Console message that has been added.\\n             */\\n            message: ConsoleMessage;\\n        }\\n    }\\n    namespace Profiler {\\n        /**\\n         * Profile node. Holds callsite information, execution statistics and child nodes.\\n         */\\n        interface ProfileNode {\\n            /**\\n             * Unique id of the node.\\n             */\\n            id: number;\\n            /**\\n             * Function location.\\n             */\\n            callFrame: Runtime.CallFrame;\\n            /**\\n             * Number of samples where this node was on top of the call stack.\\n             */\\n            hitCount?: number | undefined;\\n            /**\\n             * Child node ids.\\n             */\\n            children?: number[] | undefined;\\n            /**\\n             * The reason of being not optimized. The function may be deoptimized or marked as don't optimize.\\n             */\\n            deoptReason?: string | undefined;\\n            /**\\n             * An array of source position ticks.\\n             */\\n            positionTicks?: PositionTickInfo[] | undefined;\\n        }\\n        /**\\n         * Profile.\\n         */\\n        interface Profile {\\n            /**\\n             * The list of profile nodes. First item is the root node.\\n             */\\n            nodes: ProfileNode[];\\n            /**\\n             * Profiling start timestamp in microseconds.\\n             */\\n            startTime: number;\\n            /**\\n             * Profiling end timestamp in microseconds.\\n             */\\n            endTime: number;\\n            /**\\n             * Ids of samples top nodes.\\n             */\\n            samples?: number[] | undefined;\\n            /**\\n             * Time intervals between adjacent samples in microseconds. The first delta is relative to the profile startTime.\\n             */\\n            timeDeltas?: number[] | undefined;\\n        }\\n        /**\\n         * Specifies a number of samples attributed to a certain source position.\\n         */\\n        interface PositionTickInfo {\\n            /**\\n             * Source line number (1-based).\\n             */\\n            line: number;\\n            /**\\n             * Number of samples attributed to the source line.\\n             */\\n            ticks: number;\\n        }\\n        /**\\n         * Coverage data for a source range.\\n         */\\n        interface CoverageRange {\\n            /**\\n             * JavaScript script source offset for the range start.\\n             */\\n            startOffset: number;\\n            /**\\n             * JavaScript script source offset for the range end.\\n             */\\n            endOffset: number;\\n            /**\\n             * Collected execution count of the source range.\\n             */\\n            count: number;\\n        }\\n        /**\\n         * Coverage data for a JavaScript function.\\n         */\\n        interface FunctionCoverage {\\n            /**\\n             * JavaScript function name.\\n             */\\n            functionName: string;\\n            /**\\n             * Source ranges inside the function with coverage data.\\n             */\\n            ranges: CoverageRange[];\\n            /**\\n             * Whether coverage data for this function has block granularity.\\n             */\\n            isBlockCoverage: boolean;\\n        }\\n        /**\\n         * Coverage data for a JavaScript script.\\n         */\\n        interface ScriptCoverage {\\n            /**\\n             * JavaScript script id.\\n             */\\n            scriptId: Runtime.ScriptId;\\n            /**\\n             * JavaScript script name or url.\\n             */\\n            url: string;\\n            /**\\n             * Functions contained in the script that has coverage data.\\n             */\\n            functions: FunctionCoverage[];\\n        }\\n        /**\\n         * Describes a type collected during runtime.\\n         * @experimental\\n         */\\n        interface TypeObject {\\n            /**\\n             * Name of a type collected with type profiling.\\n             */\\n            name: string;\\n        }\\n        /**\\n         * Source offset and types for a parameter or return value.\\n         * @experimental\\n         */\\n        interface TypeProfileEntry {\\n            /**\\n             * Source offset of the parameter or end of function for return values.\\n             */\\n            offset: number;\\n            /**\\n             * The types for this parameter or return value.\\n             */\\n            types: TypeObject[];\\n        }\\n        /**\\n         * Type profile data collected during runtime for a JavaScript script.\\n         * @experimental\\n         */\\n        interface ScriptTypeProfile {\\n            /**\\n             * JavaScript script id.\\n             */\\n            scriptId: Runtime.ScriptId;\\n            /**\\n             * JavaScript script name or url.\\n             */\\n            url: string;\\n            /**\\n             * Type profile entries for parameters and return values of the functions in the script.\\n             */\\n            entries: TypeProfileEntry[];\\n        }\\n        interface SetSamplingIntervalParameterType {\\n            /**\\n             * New sampling interval in microseconds.\\n             */\\n            interval: number;\\n        }\\n        interface StartPreciseCoverageParameterType {\\n            /**\\n             * Collect accurate call counts beyond simple 'covered' or 'not covered'.\\n             */\\n            callCount?: boolean | undefined;\\n            /**\\n             * Collect block-based coverage.\\n             */\\n            detailed?: boolean | undefined;\\n        }\\n        interface StopReturnType {\\n            /**\\n             * Recorded profile.\\n             */\\n            profile: Profile;\\n        }\\n        interface TakePreciseCoverageReturnType {\\n            /**\\n             * Coverage data for the current isolate.\\n             */\\n            result: ScriptCoverage[];\\n        }\\n        interface GetBestEffortCoverageReturnType {\\n            /**\\n             * Coverage data for the current isolate.\\n             */\\n            result: ScriptCoverage[];\\n        }\\n        interface TakeTypeProfileReturnType {\\n            /**\\n             * Type profile for all scripts since startTypeProfile() was turned on.\\n             */\\n            result: ScriptTypeProfile[];\\n        }\\n        interface ConsoleProfileStartedEventDataType {\\n            id: string;\\n            /**\\n             * Location of console.profile().\\n             */\\n            location: Debugger.Location;\\n            /**\\n             * Profile title passed as an argument to console.profile().\\n             */\\n            title?: string | undefined;\\n        }\\n        interface ConsoleProfileFinishedEventDataType {\\n            id: string;\\n            /**\\n             * Location of console.profileEnd().\\n             */\\n            location: Debugger.Location;\\n            profile: Profile;\\n            /**\\n             * Profile title passed as an argument to console.profile().\\n             */\\n            title?: string | undefined;\\n        }\\n    }\\n    namespace HeapProfiler {\\n        /**\\n         * Heap snapshot object id.\\n         */\\n        type HeapSnapshotObjectId = string;\\n        /**\\n         * Sampling Heap Profile node. Holds callsite information, allocation statistics and child nodes.\\n         */\\n        interface SamplingHeapProfileNode {\\n            /**\\n             * Function location.\\n             */\\n            callFrame: Runtime.CallFrame;\\n            /**\\n             * Allocations size in bytes for the node excluding children.\\n             */\\n            selfSize: number;\\n            /**\\n             * Child nodes.\\n             */\\n            children: SamplingHeapProfileNode[];\\n        }\\n        /**\\n         * Profile.\\n         */\\n        interface SamplingHeapProfile {\\n            head: SamplingHeapProfileNode;\\n        }\\n        interface StartTrackingHeapObjectsParameterType {\\n            trackAllocations?: boolean | undefined;\\n        }\\n        interface StopTrackingHeapObjectsParameterType {\\n            /**\\n             * If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken when the tracking is stopped.\\n             */\\n            reportProgress?: boolean | undefined;\\n        }\\n        interface TakeHeapSnapshotParameterType {\\n            /**\\n             * If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken.\\n             */\\n            reportProgress?: boolean | undefined;\\n        }\\n        interface GetObjectByHeapObjectIdParameterType {\\n            objectId: HeapSnapshotObjectId;\\n            /**\\n             * Symbolic group name that can be used to release multiple objects.\\n             */\\n            objectGroup?: string | undefined;\\n        }\\n        interface AddInspectedHeapObjectParameterType {\\n            /**\\n             * Heap snapshot object id to be accessible by means of $x command line API.\\n             */\\n            heapObjectId: HeapSnapshotObjectId;\\n        }\\n        interface GetHeapObjectIdParameterType {\\n            /**\\n             * Identifier of the object to get heap object id for.\\n             */\\n            objectId: Runtime.RemoteObjectId;\\n        }\\n        interface StartSamplingParameterType {\\n            /**\\n             * Average sample interval in bytes. Poisson distribution is used for the intervals. The default value is 32768 bytes.\\n             */\\n            samplingInterval?: number | undefined;\\n        }\\n        interface GetObjectByHeapObjectIdReturnType {\\n            /**\\n             * Evaluation result.\\n             */\\n            result: Runtime.RemoteObject;\\n        }\\n        interface GetHeapObjectIdReturnType {\\n            /**\\n             * Id of the heap snapshot object corresponding to the passed remote object id.\\n             */\\n            heapSnapshotObjectId: HeapSnapshotObjectId;\\n        }\\n        interface StopSamplingReturnType {\\n            /**\\n             * Recorded sampling heap profile.\\n             */\\n            profile: SamplingHeapProfile;\\n        }\\n        interface GetSamplingProfileReturnType {\\n            /**\\n             * Return the sampling profile being collected.\\n             */\\n            profile: SamplingHeapProfile;\\n        }\\n        interface AddHeapSnapshotChunkEventDataType {\\n            chunk: string;\\n        }\\n        interface ReportHeapSnapshotProgressEventDataType {\\n            done: number;\\n            total: number;\\n            finished?: boolean | undefined;\\n        }\\n        interface LastSeenObjectIdEventDataType {\\n            lastSeenObjectId: number;\\n            timestamp: number;\\n        }\\n        interface HeapStatsUpdateEventDataType {\\n            /**\\n             * An array of triplets. Each triplet describes a fragment. The first integer is the fragment index, the second integer is a total count of objects for the fragment, the third integer is a total size of the objects for the fragment.\\n             */\\n            statsUpdate: number[];\\n        }\\n    }\\n    namespace NodeTracing {\\n        interface TraceConfig {\\n            /**\\n             * Controls how the trace buffer stores data.\\n             */\\n            recordMode?: string | undefined;\\n            /**\\n             * Included category filters.\\n             */\\n            includedCategories: string[];\\n        }\\n        interface StartParameterType {\\n            traceConfig: TraceConfig;\\n        }\\n        interface GetCategoriesReturnType {\\n            /**\\n             * A list of supported tracing categories.\\n             */\\n            categories: string[];\\n        }\\n        interface DataCollectedEventDataType {\\n            value: Array<{}>;\\n        }\\n    }\\n    namespace NodeWorker {\\n        type WorkerID = string;\\n        /**\\n         * Unique identifier of attached debugging session.\\n         */\\n        type SessionID = string;\\n        interface WorkerInfo {\\n            workerId: WorkerID;\\n            type: string;\\n            title: string;\\n            url: string;\\n        }\\n        interface SendMessageToWorkerParameterType {\\n            message: string;\\n            /**\\n             * Identifier of the session.\\n             */\\n            sessionId: SessionID;\\n        }\\n        interface EnableParameterType {\\n            /**\\n             * Whether to new workers should be paused until the frontend sends `Runtime.runIfWaitingForDebugger`\\n             * message to run them.\\n             */\\n            waitForDebuggerOnStart: boolean;\\n        }\\n        interface DetachParameterType {\\n            sessionId: SessionID;\\n        }\\n        interface AttachedToWorkerEventDataType {\\n            /**\\n             * Identifier assigned to the session used to send/receive messages.\\n             */\\n            sessionId: SessionID;\\n            workerInfo: WorkerInfo;\\n            waitingForDebugger: boolean;\\n        }\\n        interface DetachedFromWorkerEventDataType {\\n            /**\\n             * Detached session identifier.\\n             */\\n            sessionId: SessionID;\\n        }\\n        interface ReceivedMessageFromWorkerEventDataType {\\n            /**\\n             * Identifier of a session which sends a message.\\n             */\\n            sessionId: SessionID;\\n            message: string;\\n        }\\n    }\\n    namespace NodeRuntime {\\n        interface NotifyWhenWaitingForDisconnectParameterType {\\n            enabled: boolean;\\n        }\\n    }\\n    /**\\n     * The `inspector.Session` is used for dispatching messages to the V8 inspector\\n     * back-end and receiving message responses and notifications.\\n     */\\n    class Session extends EventEmitter {\\n        /**\\n         * Create a new instance of the inspector.Session class.\\n         * The inspector session needs to be connected through session.connect() before the messages can be dispatched to the inspector backend.\\n         */\\n        constructor();\\n        /**\\n         * Connects a session to the inspector back-end.\\n         * @since v8.0.0\\n         */\\n        connect(): void;\\n        /**\\n         * Immediately close the session. All pending message callbacks will be called\\n         * with an error. `session.connect()` will need to be called to be able to send\\n         * messages again. Reconnected session will lose all inspector state, such as\\n         * enabled agents or configured breakpoints.\\n         * @since v8.0.0\\n         */\\n        disconnect(): void;\\n        /**\\n         * Posts a message to the inspector back-end. `callback` will be notified when\\n         * a response is received. `callback` is a function that accepts two optional\\n         * arguments: error and message-specific result.\\n         *\\n         * ```js\\n         * session.post('Runtime.evaluate', { expression: '2 + 2' },\\n         *              (error, { result }) => console.log(result));\\n         * // Output: { type: 'number', value: 4, description: '4' }\\n         * ```\\n         *\\n         * The latest version of the V8 inspector protocol is published on the [Chrome DevTools Protocol Viewer](https://chromedevtools.github.io/devtools-protocol/v8/).\\n         *\\n         * Node.js inspector supports all the Chrome DevTools Protocol domains declared\\n         * by V8\\\\. Chrome DevTools Protocol domain provides an interface for interacting\\n         * with one of the runtime agents used to inspect the application state and listen\\n         * to the run-time events.\\n         *\\n         * ## Example usage\\n         *\\n         * Apart from the debugger, various V8 Profilers are available through the DevTools\\n         * protocol.\\n         * @since v8.0.0\\n         */\\n        post(method: string, params?: {}, callback?: (err: Error | null, params?: {}) => void): void;\\n        post(method: string, callback?: (err: Error | null, params?: {}) => void): void;\\n        /**\\n         * Returns supported domains.\\n         */\\n        post(method: 'Schema.getDomains', callback?: (err: Error | null, params: Schema.GetDomainsReturnType) => void): void;\\n        /**\\n         * Evaluates expression on global object.\\n         */\\n        post(method: 'Runtime.evaluate', params?: Runtime.EvaluateParameterType, callback?: (err: Error | null, params: Runtime.EvaluateReturnType) => void): void;\\n        post(method: 'Runtime.evaluate', callback?: (err: Error | null, params: Runtime.EvaluateReturnType) => void): void;\\n        /**\\n         * Add handler to promise with given promise object id.\\n         */\\n        post(method: 'Runtime.awaitPromise', params?: Runtime.AwaitPromiseParameterType, callback?: (err: Error | null, params: Runtime.AwaitPromiseReturnType) => void): void;\\n        post(method: 'Runtime.awaitPromise', callback?: (err: Error | null, params: Runtime.AwaitPromiseReturnType) => void): void;\\n        /**\\n         * Calls function with given declaration on the given object. Object group of the result is inherited from the target object.\\n         */\\n        post(method: 'Runtime.callFunctionOn', params?: Runtime.CallFunctionOnParameterType, callback?: (err: Error | null, params: Runtime.CallFunctionOnReturnType) => void): void;\\n        post(method: 'Runtime.callFunctionOn', callback?: (err: Error | null, params: Runtime.CallFunctionOnReturnType) => void): void;\\n        /**\\n         * Returns properties of a given object. Object group of the result is inherited from the target object.\\n         */\\n        post(method: 'Runtime.getProperties', params?: Runtime.GetPropertiesParameterType, callback?: (err: Error | null, params: Runtime.GetPropertiesReturnType) => void): void;\\n        post(method: 'Runtime.getProperties', callback?: (err: Error | null, params: Runtime.GetPropertiesReturnType) => void): void;\\n        /**\\n         * Releases remote object with given id.\\n         */\\n        post(method: 'Runtime.releaseObject', params?: Runtime.ReleaseObjectParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Runtime.releaseObject', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Releases all remote objects that belong to a given group.\\n         */\\n        post(method: 'Runtime.releaseObjectGroup', params?: Runtime.ReleaseObjectGroupParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Runtime.releaseObjectGroup', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Tells inspected instance to run if it was waiting for debugger to attach.\\n         */\\n        post(method: 'Runtime.runIfWaitingForDebugger', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context.\\n         */\\n        post(method: 'Runtime.enable', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Disables reporting of execution contexts creation.\\n         */\\n        post(method: 'Runtime.disable', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Discards collected exceptions and console API calls.\\n         */\\n        post(method: 'Runtime.discardConsoleEntries', callback?: (err: Error | null) => void): void;\\n        /**\\n         * @experimental\\n         */\\n        post(method: 'Runtime.setCustomObjectFormatterEnabled', params?: Runtime.SetCustomObjectFormatterEnabledParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Runtime.setCustomObjectFormatterEnabled', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Compiles expression.\\n         */\\n        post(method: 'Runtime.compileScript', params?: Runtime.CompileScriptParameterType, callback?: (err: Error | null, params: Runtime.CompileScriptReturnType) => void): void;\\n        post(method: 'Runtime.compileScript', callback?: (err: Error | null, params: Runtime.CompileScriptReturnType) => void): void;\\n        /**\\n         * Runs script with given id in a given context.\\n         */\\n        post(method: 'Runtime.runScript', params?: Runtime.RunScriptParameterType, callback?: (err: Error | null, params: Runtime.RunScriptReturnType) => void): void;\\n        post(method: 'Runtime.runScript', callback?: (err: Error | null, params: Runtime.RunScriptReturnType) => void): void;\\n        post(method: 'Runtime.queryObjects', params?: Runtime.QueryObjectsParameterType, callback?: (err: Error | null, params: Runtime.QueryObjectsReturnType) => void): void;\\n        post(method: 'Runtime.queryObjects', callback?: (err: Error | null, params: Runtime.QueryObjectsReturnType) => void): void;\\n        /**\\n         * Returns all let, const and class variables from global scope.\\n         */\\n        post(\\n            method: 'Runtime.globalLexicalScopeNames',\\n            params?: Runtime.GlobalLexicalScopeNamesParameterType,\\n            callback?: (err: Error | null, params: Runtime.GlobalLexicalScopeNamesReturnType) => void\\n        ): void;\\n        post(method: 'Runtime.globalLexicalScopeNames', callback?: (err: Error | null, params: Runtime.GlobalLexicalScopeNamesReturnType) => void): void;\\n        /**\\n         * Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received.\\n         */\\n        post(method: 'Debugger.enable', callback?: (err: Error | null, params: Debugger.EnableReturnType) => void): void;\\n        /**\\n         * Disables debugger for given page.\\n         */\\n        post(method: 'Debugger.disable', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Activates / deactivates all breakpoints on the page.\\n         */\\n        post(method: 'Debugger.setBreakpointsActive', params?: Debugger.SetBreakpointsActiveParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Debugger.setBreakpointsActive', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc).\\n         */\\n        post(method: 'Debugger.setSkipAllPauses', params?: Debugger.SetSkipAllPausesParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Debugger.setSkipAllPauses', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads.\\n         */\\n        post(method: 'Debugger.setBreakpointByUrl', params?: Debugger.SetBreakpointByUrlParameterType, callback?: (err: Error | null, params: Debugger.SetBreakpointByUrlReturnType) => void): void;\\n        post(method: 'Debugger.setBreakpointByUrl', callback?: (err: Error | null, params: Debugger.SetBreakpointByUrlReturnType) => void): void;\\n        /**\\n         * Sets JavaScript breakpoint at a given location.\\n         */\\n        post(method: 'Debugger.setBreakpoint', params?: Debugger.SetBreakpointParameterType, callback?: (err: Error | null, params: Debugger.SetBreakpointReturnType) => void): void;\\n        post(method: 'Debugger.setBreakpoint', callback?: (err: Error | null, params: Debugger.SetBreakpointReturnType) => void): void;\\n        /**\\n         * Removes JavaScript breakpoint.\\n         */\\n        post(method: 'Debugger.removeBreakpoint', params?: Debugger.RemoveBreakpointParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Debugger.removeBreakpoint', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Returns possible locations for breakpoint. scriptId in start and end range locations should be the same.\\n         */\\n        post(\\n            method: 'Debugger.getPossibleBreakpoints',\\n            params?: Debugger.GetPossibleBreakpointsParameterType,\\n            callback?: (err: Error | null, params: Debugger.GetPossibleBreakpointsReturnType) => void\\n        ): void;\\n        post(method: 'Debugger.getPossibleBreakpoints', callback?: (err: Error | null, params: Debugger.GetPossibleBreakpointsReturnType) => void): void;\\n        /**\\n         * Continues execution until specific location is reached.\\n         */\\n        post(method: 'Debugger.continueToLocation', params?: Debugger.ContinueToLocationParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Debugger.continueToLocation', callback?: (err: Error | null) => void): void;\\n        /**\\n         * @experimental\\n         */\\n        post(method: 'Debugger.pauseOnAsyncCall', params?: Debugger.PauseOnAsyncCallParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Debugger.pauseOnAsyncCall', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Steps over the statement.\\n         */\\n        post(method: 'Debugger.stepOver', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Steps into the function call.\\n         */\\n        post(method: 'Debugger.stepInto', params?: Debugger.StepIntoParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Debugger.stepInto', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Steps out of the function call.\\n         */\\n        post(method: 'Debugger.stepOut', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Stops on the next JavaScript statement.\\n         */\\n        post(method: 'Debugger.pause', callback?: (err: Error | null) => void): void;\\n        /**\\n         * This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called.\\n         * @experimental\\n         */\\n        post(method: 'Debugger.scheduleStepIntoAsync', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Resumes JavaScript execution.\\n         */\\n        post(method: 'Debugger.resume', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Returns stack trace with given <code>stackTraceId</code>.\\n         * @experimental\\n         */\\n        post(method: 'Debugger.getStackTrace', params?: Debugger.GetStackTraceParameterType, callback?: (err: Error | null, params: Debugger.GetStackTraceReturnType) => void): void;\\n        post(method: 'Debugger.getStackTrace', callback?: (err: Error | null, params: Debugger.GetStackTraceReturnType) => void): void;\\n        /**\\n         * Searches for given string in script content.\\n         */\\n        post(method: 'Debugger.searchInContent', params?: Debugger.SearchInContentParameterType, callback?: (err: Error | null, params: Debugger.SearchInContentReturnType) => void): void;\\n        post(method: 'Debugger.searchInContent', callback?: (err: Error | null, params: Debugger.SearchInContentReturnType) => void): void;\\n        /**\\n         * Edits JavaScript source live.\\n         */\\n        post(method: 'Debugger.setScriptSource', params?: Debugger.SetScriptSourceParameterType, callback?: (err: Error | null, params: Debugger.SetScriptSourceReturnType) => void): void;\\n        post(method: 'Debugger.setScriptSource', callback?: (err: Error | null, params: Debugger.SetScriptSourceReturnType) => void): void;\\n        /**\\n         * Restarts particular call frame from the beginning.\\n         */\\n        post(method: 'Debugger.restartFrame', params?: Debugger.RestartFrameParameterType, callback?: (err: Error | null, params: Debugger.RestartFrameReturnType) => void): void;\\n        post(method: 'Debugger.restartFrame', callback?: (err: Error | null, params: Debugger.RestartFrameReturnType) => void): void;\\n        /**\\n         * Returns source for the script with given id.\\n         */\\n        post(method: 'Debugger.getScriptSource', params?: Debugger.GetScriptSourceParameterType, callback?: (err: Error | null, params: Debugger.GetScriptSourceReturnType) => void): void;\\n        post(method: 'Debugger.getScriptSource', callback?: (err: Error | null, params: Debugger.GetScriptSourceReturnType) => void): void;\\n        /**\\n         * Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>.\\n         */\\n        post(method: 'Debugger.setPauseOnExceptions', params?: Debugger.SetPauseOnExceptionsParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Debugger.setPauseOnExceptions', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Evaluates expression on a given call frame.\\n         */\\n        post(method: 'Debugger.evaluateOnCallFrame', params?: Debugger.EvaluateOnCallFrameParameterType, callback?: (err: Error | null, params: Debugger.EvaluateOnCallFrameReturnType) => void): void;\\n        post(method: 'Debugger.evaluateOnCallFrame', callback?: (err: Error | null, params: Debugger.EvaluateOnCallFrameReturnType) => void): void;\\n        /**\\n         * Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually.\\n         */\\n        post(method: 'Debugger.setVariableValue', params?: Debugger.SetVariableValueParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Debugger.setVariableValue', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Changes return value in top frame. Available only at return break position.\\n         * @experimental\\n         */\\n        post(method: 'Debugger.setReturnValue', params?: Debugger.SetReturnValueParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Debugger.setReturnValue', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Enables or disables async call stacks tracking.\\n         */\\n        post(method: 'Debugger.setAsyncCallStackDepth', params?: Debugger.SetAsyncCallStackDepthParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Debugger.setAsyncCallStackDepth', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful.\\n         * @experimental\\n         */\\n        post(method: 'Debugger.setBlackboxPatterns', params?: Debugger.SetBlackboxPatternsParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Debugger.setBlackboxPatterns', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted.\\n         * @experimental\\n         */\\n        post(method: 'Debugger.setBlackboxedRanges', params?: Debugger.SetBlackboxedRangesParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Debugger.setBlackboxedRanges', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification.\\n         */\\n        post(method: 'Console.enable', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Disables console domain, prevents further console messages from being reported to the client.\\n         */\\n        post(method: 'Console.disable', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Does nothing.\\n         */\\n        post(method: 'Console.clearMessages', callback?: (err: Error | null) => void): void;\\n        post(method: 'Profiler.enable', callback?: (err: Error | null) => void): void;\\n        post(method: 'Profiler.disable', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Changes CPU profiler sampling interval. Must be called before CPU profiles recording started.\\n         */\\n        post(method: 'Profiler.setSamplingInterval', params?: Profiler.SetSamplingIntervalParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Profiler.setSamplingInterval', callback?: (err: Error | null) => void): void;\\n        post(method: 'Profiler.start', callback?: (err: Error | null) => void): void;\\n        post(method: 'Profiler.stop', callback?: (err: Error | null, params: Profiler.StopReturnType) => void): void;\\n        /**\\n         * Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters.\\n         */\\n        post(method: 'Profiler.startPreciseCoverage', params?: Profiler.StartPreciseCoverageParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'Profiler.startPreciseCoverage', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code.\\n         */\\n        post(method: 'Profiler.stopPreciseCoverage', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started.\\n         */\\n        post(method: 'Profiler.takePreciseCoverage', callback?: (err: Error | null, params: Profiler.TakePreciseCoverageReturnType) => void): void;\\n        /**\\n         * Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.\\n         */\\n        post(method: 'Profiler.getBestEffortCoverage', callback?: (err: Error | null, params: Profiler.GetBestEffortCoverageReturnType) => void): void;\\n        /**\\n         * Enable type profile.\\n         * @experimental\\n         */\\n        post(method: 'Profiler.startTypeProfile', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Disable type profile. Disabling releases type profile data collected so far.\\n         * @experimental\\n         */\\n        post(method: 'Profiler.stopTypeProfile', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Collect type profile.\\n         * @experimental\\n         */\\n        post(method: 'Profiler.takeTypeProfile', callback?: (err: Error | null, params: Profiler.TakeTypeProfileReturnType) => void): void;\\n        post(method: 'HeapProfiler.enable', callback?: (err: Error | null) => void): void;\\n        post(method: 'HeapProfiler.disable', callback?: (err: Error | null) => void): void;\\n        post(method: 'HeapProfiler.startTrackingHeapObjects', params?: HeapProfiler.StartTrackingHeapObjectsParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'HeapProfiler.startTrackingHeapObjects', callback?: (err: Error | null) => void): void;\\n        post(method: 'HeapProfiler.stopTrackingHeapObjects', params?: HeapProfiler.StopTrackingHeapObjectsParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'HeapProfiler.stopTrackingHeapObjects', callback?: (err: Error | null) => void): void;\\n        post(method: 'HeapProfiler.takeHeapSnapshot', params?: HeapProfiler.TakeHeapSnapshotParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'HeapProfiler.takeHeapSnapshot', callback?: (err: Error | null) => void): void;\\n        post(method: 'HeapProfiler.collectGarbage', callback?: (err: Error | null) => void): void;\\n        post(\\n            method: 'HeapProfiler.getObjectByHeapObjectId',\\n            params?: HeapProfiler.GetObjectByHeapObjectIdParameterType,\\n            callback?: (err: Error | null, params: HeapProfiler.GetObjectByHeapObjectIdReturnType) => void\\n        ): void;\\n        post(method: 'HeapProfiler.getObjectByHeapObjectId', callback?: (err: Error | null, params: HeapProfiler.GetObjectByHeapObjectIdReturnType) => void): void;\\n        /**\\n         * Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).\\n         */\\n        post(method: 'HeapProfiler.addInspectedHeapObject', params?: HeapProfiler.AddInspectedHeapObjectParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'HeapProfiler.addInspectedHeapObject', callback?: (err: Error | null) => void): void;\\n        post(method: 'HeapProfiler.getHeapObjectId', params?: HeapProfiler.GetHeapObjectIdParameterType, callback?: (err: Error | null, params: HeapProfiler.GetHeapObjectIdReturnType) => void): void;\\n        post(method: 'HeapProfiler.getHeapObjectId', callback?: (err: Error | null, params: HeapProfiler.GetHeapObjectIdReturnType) => void): void;\\n        post(method: 'HeapProfiler.startSampling', params?: HeapProfiler.StartSamplingParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'HeapProfiler.startSampling', callback?: (err: Error | null) => void): void;\\n        post(method: 'HeapProfiler.stopSampling', callback?: (err: Error | null, params: HeapProfiler.StopSamplingReturnType) => void): void;\\n        post(method: 'HeapProfiler.getSamplingProfile', callback?: (err: Error | null, params: HeapProfiler.GetSamplingProfileReturnType) => void): void;\\n        /**\\n         * Gets supported tracing categories.\\n         */\\n        post(method: 'NodeTracing.getCategories', callback?: (err: Error | null, params: NodeTracing.GetCategoriesReturnType) => void): void;\\n        /**\\n         * Start trace events collection.\\n         */\\n        post(method: 'NodeTracing.start', params?: NodeTracing.StartParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'NodeTracing.start', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Stop trace events collection. Remaining collected events will be sent as a sequence of\\n         * dataCollected events followed by tracingComplete event.\\n         */\\n        post(method: 'NodeTracing.stop', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Sends protocol message over session with given id.\\n         */\\n        post(method: 'NodeWorker.sendMessageToWorker', params?: NodeWorker.SendMessageToWorkerParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'NodeWorker.sendMessageToWorker', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Instructs the inspector to attach to running workers. Will also attach to new workers\\n         * as they start\\n         */\\n        post(method: 'NodeWorker.enable', params?: NodeWorker.EnableParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'NodeWorker.enable', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Detaches from all running workers and disables attaching to new workers as they are started.\\n         */\\n        post(method: 'NodeWorker.disable', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Detached from the worker with given sessionId.\\n         */\\n        post(method: 'NodeWorker.detach', params?: NodeWorker.DetachParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'NodeWorker.detach', callback?: (err: Error | null) => void): void;\\n        /**\\n         * Enable the `NodeRuntime.waitingForDisconnect`.\\n         */\\n        post(method: 'NodeRuntime.notifyWhenWaitingForDisconnect', params?: NodeRuntime.NotifyWhenWaitingForDisconnectParameterType, callback?: (err: Error | null) => void): void;\\n        post(method: 'NodeRuntime.notifyWhenWaitingForDisconnect', callback?: (err: Error | null) => void): void;\\n        // Events\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        /**\\n         * Emitted when any notification from the V8 Inspector is received.\\n         */\\n        addListener(event: 'inspectorNotification', listener: (message: InspectorNotification<{}>) => void): this;\\n        /**\\n         * Issued when new execution context is created.\\n         */\\n        addListener(event: 'Runtime.executionContextCreated', listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\\n        /**\\n         * Issued when execution context is destroyed.\\n         */\\n        addListener(event: 'Runtime.executionContextDestroyed', listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\\n        /**\\n         * Issued when all executionContexts were cleared in browser\\n         */\\n        addListener(event: 'Runtime.executionContextsCleared', listener: () => void): this;\\n        /**\\n         * Issued when exception was thrown and unhandled.\\n         */\\n        addListener(event: 'Runtime.exceptionThrown', listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\\n        /**\\n         * Issued when unhandled exception was revoked.\\n         */\\n        addListener(event: 'Runtime.exceptionRevoked', listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\\n        /**\\n         * Issued when console API was called.\\n         */\\n        addListener(event: 'Runtime.consoleAPICalled', listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\\n        /**\\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\\n         */\\n        addListener(event: 'Runtime.inspectRequested', listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\\n        /**\\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\\n         */\\n        addListener(event: 'Debugger.scriptParsed', listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\\n        /**\\n         * Fired when virtual machine fails to parse the script.\\n         */\\n        addListener(event: 'Debugger.scriptFailedToParse', listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\\n        /**\\n         * Fired when breakpoint is resolved to an actual script and location.\\n         */\\n        addListener(event: 'Debugger.breakpointResolved', listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\\n        /**\\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\\n         */\\n        addListener(event: 'Debugger.paused', listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\\n        /**\\n         * Fired when the virtual machine resumed execution.\\n         */\\n        addListener(event: 'Debugger.resumed', listener: () => void): this;\\n        /**\\n         * Issued when new console message is added.\\n         */\\n        addListener(event: 'Console.messageAdded', listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\\n        /**\\n         * Sent when new profile recording is started using console.profile() call.\\n         */\\n        addListener(event: 'Profiler.consoleProfileStarted', listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\\n        addListener(event: 'Profiler.consoleProfileFinished', listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\\n        addListener(event: 'HeapProfiler.addHeapSnapshotChunk', listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\\n        addListener(event: 'HeapProfiler.resetProfiles', listener: () => void): this;\\n        addListener(event: 'HeapProfiler.reportHeapSnapshotProgress', listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\\n        /**\\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\\n         */\\n        addListener(event: 'HeapProfiler.lastSeenObjectId', listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\\n        /**\\n         * If heap objects tracking has been started then backend may send update for one or more fragments\\n         */\\n        addListener(event: 'HeapProfiler.heapStatsUpdate', listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\\n        /**\\n         * Contains an bucket of collected trace events.\\n         */\\n        addListener(event: 'NodeTracing.dataCollected', listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\\n        /**\\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\\n         * delivered via dataCollected events.\\n         */\\n        addListener(event: 'NodeTracing.tracingComplete', listener: () => void): this;\\n        /**\\n         * Issued when attached to a worker.\\n         */\\n        addListener(event: 'NodeWorker.attachedToWorker', listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\\n        /**\\n         * Issued when detached from the worker.\\n         */\\n        addListener(event: 'NodeWorker.detachedFromWorker', listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\\n        /**\\n         * Notifies about a new protocol message received from the session\\n         * (session ID is provided in attachedToWorker notification).\\n         */\\n        addListener(event: 'NodeWorker.receivedMessageFromWorker', listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\\n        /**\\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\\n         * enabled.\\n         * It is fired when the Node process finished all code execution and is\\n         * waiting for all frontends to disconnect.\\n         */\\n        addListener(event: 'NodeRuntime.waitingForDisconnect', listener: () => void): this;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        emit(event: 'inspectorNotification', message: InspectorNotification<{}>): boolean;\\n        emit(event: 'Runtime.executionContextCreated', message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>): boolean;\\n        emit(event: 'Runtime.executionContextDestroyed', message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>): boolean;\\n        emit(event: 'Runtime.executionContextsCleared'): boolean;\\n        emit(event: 'Runtime.exceptionThrown', message: InspectorNotification<Runtime.ExceptionThrownEventDataType>): boolean;\\n        emit(event: 'Runtime.exceptionRevoked', message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>): boolean;\\n        emit(event: 'Runtime.consoleAPICalled', message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>): boolean;\\n        emit(event: 'Runtime.inspectRequested', message: InspectorNotification<Runtime.InspectRequestedEventDataType>): boolean;\\n        emit(event: 'Debugger.scriptParsed', message: InspectorNotification<Debugger.ScriptParsedEventDataType>): boolean;\\n        emit(event: 'Debugger.scriptFailedToParse', message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>): boolean;\\n        emit(event: 'Debugger.breakpointResolved', message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>): boolean;\\n        emit(event: 'Debugger.paused', message: InspectorNotification<Debugger.PausedEventDataType>): boolean;\\n        emit(event: 'Debugger.resumed'): boolean;\\n        emit(event: 'Console.messageAdded', message: InspectorNotification<Console.MessageAddedEventDataType>): boolean;\\n        emit(event: 'Profiler.consoleProfileStarted', message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>): boolean;\\n        emit(event: 'Profiler.consoleProfileFinished', message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>): boolean;\\n        emit(event: 'HeapProfiler.addHeapSnapshotChunk', message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>): boolean;\\n        emit(event: 'HeapProfiler.resetProfiles'): boolean;\\n        emit(event: 'HeapProfiler.reportHeapSnapshotProgress', message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>): boolean;\\n        emit(event: 'HeapProfiler.lastSeenObjectId', message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>): boolean;\\n        emit(event: 'HeapProfiler.heapStatsUpdate', message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>): boolean;\\n        emit(event: 'NodeTracing.dataCollected', message: InspectorNotification<NodeTracing.DataCollectedEventDataType>): boolean;\\n        emit(event: 'NodeTracing.tracingComplete'): boolean;\\n        emit(event: 'NodeWorker.attachedToWorker', message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>): boolean;\\n        emit(event: 'NodeWorker.detachedFromWorker', message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>): boolean;\\n        emit(event: 'NodeWorker.receivedMessageFromWorker', message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>): boolean;\\n        emit(event: 'NodeRuntime.waitingForDisconnect'): boolean;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        /**\\n         * Emitted when any notification from the V8 Inspector is received.\\n         */\\n        on(event: 'inspectorNotification', listener: (message: InspectorNotification<{}>) => void): this;\\n        /**\\n         * Issued when new execution context is created.\\n         */\\n        on(event: 'Runtime.executionContextCreated', listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\\n        /**\\n         * Issued when execution context is destroyed.\\n         */\\n        on(event: 'Runtime.executionContextDestroyed', listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\\n        /**\\n         * Issued when all executionContexts were cleared in browser\\n         */\\n        on(event: 'Runtime.executionContextsCleared', listener: () => void): this;\\n        /**\\n         * Issued when exception was thrown and unhandled.\\n         */\\n        on(event: 'Runtime.exceptionThrown', listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\\n        /**\\n         * Issued when unhandled exception was revoked.\\n         */\\n        on(event: 'Runtime.exceptionRevoked', listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\\n        /**\\n         * Issued when console API was called.\\n         */\\n        on(event: 'Runtime.consoleAPICalled', listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\\n        /**\\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\\n         */\\n        on(event: 'Runtime.inspectRequested', listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\\n        /**\\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\\n         */\\n        on(event: 'Debugger.scriptParsed', listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\\n        /**\\n         * Fired when virtual machine fails to parse the script.\\n         */\\n        on(event: 'Debugger.scriptFailedToParse', listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\\n        /**\\n         * Fired when breakpoint is resolved to an actual script and location.\\n         */\\n        on(event: 'Debugger.breakpointResolved', listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\\n        /**\\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\\n         */\\n        on(event: 'Debugger.paused', listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\\n        /**\\n         * Fired when the virtual machine resumed execution.\\n         */\\n        on(event: 'Debugger.resumed', listener: () => void): this;\\n        /**\\n         * Issued when new console message is added.\\n         */\\n        on(event: 'Console.messageAdded', listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\\n        /**\\n         * Sent when new profile recording is started using console.profile() call.\\n         */\\n        on(event: 'Profiler.consoleProfileStarted', listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\\n        on(event: 'Profiler.consoleProfileFinished', listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\\n        on(event: 'HeapProfiler.addHeapSnapshotChunk', listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\\n        on(event: 'HeapProfiler.resetProfiles', listener: () => void): this;\\n        on(event: 'HeapProfiler.reportHeapSnapshotProgress', listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\\n        /**\\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\\n         */\\n        on(event: 'HeapProfiler.lastSeenObjectId', listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\\n        /**\\n         * If heap objects tracking has been started then backend may send update for one or more fragments\\n         */\\n        on(event: 'HeapProfiler.heapStatsUpdate', listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\\n        /**\\n         * Contains an bucket of collected trace events.\\n         */\\n        on(event: 'NodeTracing.dataCollected', listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\\n        /**\\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\\n         * delivered via dataCollected events.\\n         */\\n        on(event: 'NodeTracing.tracingComplete', listener: () => void): this;\\n        /**\\n         * Issued when attached to a worker.\\n         */\\n        on(event: 'NodeWorker.attachedToWorker', listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\\n        /**\\n         * Issued when detached from the worker.\\n         */\\n        on(event: 'NodeWorker.detachedFromWorker', listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\\n        /**\\n         * Notifies about a new protocol message received from the session\\n         * (session ID is provided in attachedToWorker notification).\\n         */\\n        on(event: 'NodeWorker.receivedMessageFromWorker', listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\\n        /**\\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\\n         * enabled.\\n         * It is fired when the Node process finished all code execution and is\\n         * waiting for all frontends to disconnect.\\n         */\\n        on(event: 'NodeRuntime.waitingForDisconnect', listener: () => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        /**\\n         * Emitted when any notification from the V8 Inspector is received.\\n         */\\n        once(event: 'inspectorNotification', listener: (message: InspectorNotification<{}>) => void): this;\\n        /**\\n         * Issued when new execution context is created.\\n         */\\n        once(event: 'Runtime.executionContextCreated', listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\\n        /**\\n         * Issued when execution context is destroyed.\\n         */\\n        once(event: 'Runtime.executionContextDestroyed', listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\\n        /**\\n         * Issued when all executionContexts were cleared in browser\\n         */\\n        once(event: 'Runtime.executionContextsCleared', listener: () => void): this;\\n        /**\\n         * Issued when exception was thrown and unhandled.\\n         */\\n        once(event: 'Runtime.exceptionThrown', listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\\n        /**\\n         * Issued when unhandled exception was revoked.\\n         */\\n        once(event: 'Runtime.exceptionRevoked', listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\\n        /**\\n         * Issued when console API was called.\\n         */\\n        once(event: 'Runtime.consoleAPICalled', listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\\n        /**\\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\\n         */\\n        once(event: 'Runtime.inspectRequested', listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\\n        /**\\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\\n         */\\n        once(event: 'Debugger.scriptParsed', listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\\n        /**\\n         * Fired when virtual machine fails to parse the script.\\n         */\\n        once(event: 'Debugger.scriptFailedToParse', listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\\n        /**\\n         * Fired when breakpoint is resolved to an actual script and location.\\n         */\\n        once(event: 'Debugger.breakpointResolved', listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\\n        /**\\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\\n         */\\n        once(event: 'Debugger.paused', listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\\n        /**\\n         * Fired when the virtual machine resumed execution.\\n         */\\n        once(event: 'Debugger.resumed', listener: () => void): this;\\n        /**\\n         * Issued when new console message is added.\\n         */\\n        once(event: 'Console.messageAdded', listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\\n        /**\\n         * Sent when new profile recording is started using console.profile() call.\\n         */\\n        once(event: 'Profiler.consoleProfileStarted', listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\\n        once(event: 'Profiler.consoleProfileFinished', listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\\n        once(event: 'HeapProfiler.addHeapSnapshotChunk', listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\\n        once(event: 'HeapProfiler.resetProfiles', listener: () => void): this;\\n        once(event: 'HeapProfiler.reportHeapSnapshotProgress', listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\\n        /**\\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\\n         */\\n        once(event: 'HeapProfiler.lastSeenObjectId', listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\\n        /**\\n         * If heap objects tracking has been started then backend may send update for one or more fragments\\n         */\\n        once(event: 'HeapProfiler.heapStatsUpdate', listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\\n        /**\\n         * Contains an bucket of collected trace events.\\n         */\\n        once(event: 'NodeTracing.dataCollected', listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\\n        /**\\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\\n         * delivered via dataCollected events.\\n         */\\n        once(event: 'NodeTracing.tracingComplete', listener: () => void): this;\\n        /**\\n         * Issued when attached to a worker.\\n         */\\n        once(event: 'NodeWorker.attachedToWorker', listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\\n        /**\\n         * Issued when detached from the worker.\\n         */\\n        once(event: 'NodeWorker.detachedFromWorker', listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\\n        /**\\n         * Notifies about a new protocol message received from the session\\n         * (session ID is provided in attachedToWorker notification).\\n         */\\n        once(event: 'NodeWorker.receivedMessageFromWorker', listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\\n        /**\\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\\n         * enabled.\\n         * It is fired when the Node process finished all code execution and is\\n         * waiting for all frontends to disconnect.\\n         */\\n        once(event: 'NodeRuntime.waitingForDisconnect', listener: () => void): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        /**\\n         * Emitted when any notification from the V8 Inspector is received.\\n         */\\n        prependListener(event: 'inspectorNotification', listener: (message: InspectorNotification<{}>) => void): this;\\n        /**\\n         * Issued when new execution context is created.\\n         */\\n        prependListener(event: 'Runtime.executionContextCreated', listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\\n        /**\\n         * Issued when execution context is destroyed.\\n         */\\n        prependListener(event: 'Runtime.executionContextDestroyed', listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\\n        /**\\n         * Issued when all executionContexts were cleared in browser\\n         */\\n        prependListener(event: 'Runtime.executionContextsCleared', listener: () => void): this;\\n        /**\\n         * Issued when exception was thrown and unhandled.\\n         */\\n        prependListener(event: 'Runtime.exceptionThrown', listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\\n        /**\\n         * Issued when unhandled exception was revoked.\\n         */\\n        prependListener(event: 'Runtime.exceptionRevoked', listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\\n        /**\\n         * Issued when console API was called.\\n         */\\n        prependListener(event: 'Runtime.consoleAPICalled', listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\\n        /**\\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\\n         */\\n        prependListener(event: 'Runtime.inspectRequested', listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\\n        /**\\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\\n         */\\n        prependListener(event: 'Debugger.scriptParsed', listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\\n        /**\\n         * Fired when virtual machine fails to parse the script.\\n         */\\n        prependListener(event: 'Debugger.scriptFailedToParse', listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\\n        /**\\n         * Fired when breakpoint is resolved to an actual script and location.\\n         */\\n        prependListener(event: 'Debugger.breakpointResolved', listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\\n        /**\\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\\n         */\\n        prependListener(event: 'Debugger.paused', listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\\n        /**\\n         * Fired when the virtual machine resumed execution.\\n         */\\n        prependListener(event: 'Debugger.resumed', listener: () => void): this;\\n        /**\\n         * Issued when new console message is added.\\n         */\\n        prependListener(event: 'Console.messageAdded', listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\\n        /**\\n         * Sent when new profile recording is started using console.profile() call.\\n         */\\n        prependListener(event: 'Profiler.consoleProfileStarted', listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\\n        prependListener(event: 'Profiler.consoleProfileFinished', listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\\n        prependListener(event: 'HeapProfiler.addHeapSnapshotChunk', listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\\n        prependListener(event: 'HeapProfiler.resetProfiles', listener: () => void): this;\\n        prependListener(event: 'HeapProfiler.reportHeapSnapshotProgress', listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\\n        /**\\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\\n         */\\n        prependListener(event: 'HeapProfiler.lastSeenObjectId', listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\\n        /**\\n         * If heap objects tracking has been started then backend may send update for one or more fragments\\n         */\\n        prependListener(event: 'HeapProfiler.heapStatsUpdate', listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\\n        /**\\n         * Contains an bucket of collected trace events.\\n         */\\n        prependListener(event: 'NodeTracing.dataCollected', listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\\n        /**\\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\\n         * delivered via dataCollected events.\\n         */\\n        prependListener(event: 'NodeTracing.tracingComplete', listener: () => void): this;\\n        /**\\n         * Issued when attached to a worker.\\n         */\\n        prependListener(event: 'NodeWorker.attachedToWorker', listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\\n        /**\\n         * Issued when detached from the worker.\\n         */\\n        prependListener(event: 'NodeWorker.detachedFromWorker', listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\\n        /**\\n         * Notifies about a new protocol message received from the session\\n         * (session ID is provided in attachedToWorker notification).\\n         */\\n        prependListener(event: 'NodeWorker.receivedMessageFromWorker', listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\\n        /**\\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\\n         * enabled.\\n         * It is fired when the Node process finished all code execution and is\\n         * waiting for all frontends to disconnect.\\n         */\\n        prependListener(event: 'NodeRuntime.waitingForDisconnect', listener: () => void): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n        /**\\n         * Emitted when any notification from the V8 Inspector is received.\\n         */\\n        prependOnceListener(event: 'inspectorNotification', listener: (message: InspectorNotification<{}>) => void): this;\\n        /**\\n         * Issued when new execution context is created.\\n         */\\n        prependOnceListener(event: 'Runtime.executionContextCreated', listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\\n        /**\\n         * Issued when execution context is destroyed.\\n         */\\n        prependOnceListener(event: 'Runtime.executionContextDestroyed', listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\\n        /**\\n         * Issued when all executionContexts were cleared in browser\\n         */\\n        prependOnceListener(event: 'Runtime.executionContextsCleared', listener: () => void): this;\\n        /**\\n         * Issued when exception was thrown and unhandled.\\n         */\\n        prependOnceListener(event: 'Runtime.exceptionThrown', listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\\n        /**\\n         * Issued when unhandled exception was revoked.\\n         */\\n        prependOnceListener(event: 'Runtime.exceptionRevoked', listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\\n        /**\\n         * Issued when console API was called.\\n         */\\n        prependOnceListener(event: 'Runtime.consoleAPICalled', listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\\n        /**\\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\\n         */\\n        prependOnceListener(event: 'Runtime.inspectRequested', listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\\n        /**\\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\\n         */\\n        prependOnceListener(event: 'Debugger.scriptParsed', listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\\n        /**\\n         * Fired when virtual machine fails to parse the script.\\n         */\\n        prependOnceListener(event: 'Debugger.scriptFailedToParse', listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\\n        /**\\n         * Fired when breakpoint is resolved to an actual script and location.\\n         */\\n        prependOnceListener(event: 'Debugger.breakpointResolved', listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\\n        /**\\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\\n         */\\n        prependOnceListener(event: 'Debugger.paused', listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\\n        /**\\n         * Fired when the virtual machine resumed execution.\\n         */\\n        prependOnceListener(event: 'Debugger.resumed', listener: () => void): this;\\n        /**\\n         * Issued when new console message is added.\\n         */\\n        prependOnceListener(event: 'Console.messageAdded', listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\\n        /**\\n         * Sent when new profile recording is started using console.profile() call.\\n         */\\n        prependOnceListener(event: 'Profiler.consoleProfileStarted', listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\\n        prependOnceListener(event: 'Profiler.consoleProfileFinished', listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\\n        prependOnceListener(event: 'HeapProfiler.addHeapSnapshotChunk', listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\\n        prependOnceListener(event: 'HeapProfiler.resetProfiles', listener: () => void): this;\\n        prependOnceListener(event: 'HeapProfiler.reportHeapSnapshotProgress', listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\\n        /**\\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\\n         */\\n        prependOnceListener(event: 'HeapProfiler.lastSeenObjectId', listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\\n        /**\\n         * If heap objects tracking has been started then backend may send update for one or more fragments\\n         */\\n        prependOnceListener(event: 'HeapProfiler.heapStatsUpdate', listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\\n        /**\\n         * Contains an bucket of collected trace events.\\n         */\\n        prependOnceListener(event: 'NodeTracing.dataCollected', listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\\n        /**\\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\\n         * delivered via dataCollected events.\\n         */\\n        prependOnceListener(event: 'NodeTracing.tracingComplete', listener: () => void): this;\\n        /**\\n         * Issued when attached to a worker.\\n         */\\n        prependOnceListener(event: 'NodeWorker.attachedToWorker', listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\\n        /**\\n         * Issued when detached from the worker.\\n         */\\n        prependOnceListener(event: 'NodeWorker.detachedFromWorker', listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\\n        /**\\n         * Notifies about a new protocol message received from the session\\n         * (session ID is provided in attachedToWorker notification).\\n         */\\n        prependOnceListener(event: 'NodeWorker.receivedMessageFromWorker', listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\\n        /**\\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\\n         * enabled.\\n         * It is fired when the Node process finished all code execution and is\\n         * waiting for all frontends to disconnect.\\n         */\\n        prependOnceListener(event: 'NodeRuntime.waitingForDisconnect', listener: () => void): this;\\n    }\\n    /**\\n     * Activate inspector on host and port. Equivalent to`node --inspect=[[host:]port]`, but can be done programmatically after node has\\n     * started.\\n     *\\n     * If wait is `true`, will block until a client has connected to the inspect port\\n     * and flow control has been passed to the debugger client.\\n     *\\n     * See the `security warning` regarding the `host`parameter usage.\\n     * @param [port='what was specified on the CLI'] Port to listen on for inspector connections. Optional.\\n     * @param [host='what was specified on the CLI'] Host to listen on for inspector connections. Optional.\\n     * @param [wait=false] Block until a client has connected. Optional.\\n     */\\n    function open(port?: number, host?: string, wait?: boolean): void;\\n    /**\\n     * Deactivate the inspector. Blocks until there are no active connections.\\n     */\\n    function close(): void;\\n    /**\\n     * Return the URL of the active inspector, or `undefined` if there is none.\\n     *\\n     * ```console\\n     * $ node --inspect -p 'inspector.url()'\\n     * Debugger listening on ws://127.0.0.1:9229/166e272e-7a30-4d09-97ce-f1c012b43c34\\n     * For help, see: https://nodejs.org/en/docs/inspector\\n     * ws://127.0.0.1:9229/166e272e-7a30-4d09-97ce-f1c012b43c34\\n     *\\n     * $ node --inspect=localhost:3000 -p 'inspector.url()'\\n     * Debugger listening on ws://localhost:3000/51cf8d0e-3c36-4c59-8efd-54519839e56a\\n     * For help, see: https://nodejs.org/en/docs/inspector\\n     * ws://localhost:3000/51cf8d0e-3c36-4c59-8efd-54519839e56a\\n     *\\n     * $ node -p 'inspector.url()'\\n     * undefined\\n     * ```\\n     */\\n    function url(): string | undefined;\\n    /**\\n     * Blocks until a client (existing or connected later) has sent`Runtime.runIfWaitingForDebugger` command.\\n     *\\n     * An exception will be thrown if there is no active inspector.\\n     * @since v12.7.0\\n     */\\n    function waitForDebugger(): void;\\n}\\n/**\\n * The inspector module provides an API for interacting with the V8 inspector.\\n */\\ndeclare module 'node:inspector' {\\n    import inspector = require('inspector');\\n    export = inspector;\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/module.d.ts\":\"/**\\n * @since v0.3.7\\n */\\ndeclare module 'module' {\\n    import { URL } from 'node:url';\\n    namespace Module {\\n        /**\\n         * The `module.syncBuiltinESMExports()` method updates all the live bindings for\\n         * builtin `ES Modules` to match the properties of the `CommonJS` exports. It\\n         * does not add or remove exported names from the `ES Modules`.\\n         *\\n         * ```js\\n         * const fs = require('fs');\\n         * const assert = require('assert');\\n         * const { syncBuiltinESMExports } = require('module');\\n         *\\n         * fs.readFile = newAPI;\\n         *\\n         * delete fs.readFileSync;\\n         *\\n         * function newAPI() {\\n         *   // ...\\n         * }\\n         *\\n         * fs.newAPI = newAPI;\\n         *\\n         * syncBuiltinESMExports();\\n         *\\n         * import('fs').then((esmFS) => {\\n         *   // It syncs the existing readFile property with the new value\\n         *   assert.strictEqual(esmFS.readFile, newAPI);\\n         *   // readFileSync has been deleted from the required fs\\n         *   assert.strictEqual('readFileSync' in fs, false);\\n         *   // syncBuiltinESMExports() does not remove readFileSync from esmFS\\n         *   assert.strictEqual('readFileSync' in esmFS, true);\\n         *   // syncBuiltinESMExports() does not add names\\n         *   assert.strictEqual(esmFS.newAPI, undefined);\\n         * });\\n         * ```\\n         * @since v12.12.0\\n         */\\n        function syncBuiltinESMExports(): void;\\n        /**\\n         * `path` is the resolved path for the file for which a corresponding source map\\n         * should be fetched.\\n         * @since v13.7.0, v12.17.0\\n         */\\n        function findSourceMap(path: string, error?: Error): SourceMap;\\n        interface SourceMapPayload {\\n            file: string;\\n            version: number;\\n            sources: string[];\\n            sourcesContent: string[];\\n            names: string[];\\n            mappings: string;\\n            sourceRoot: string;\\n        }\\n        interface SourceMapping {\\n            generatedLine: number;\\n            generatedColumn: number;\\n            originalSource: string;\\n            originalLine: number;\\n            originalColumn: number;\\n        }\\n        /**\\n         * @since v13.7.0, v12.17.0\\n         */\\n        class SourceMap {\\n            /**\\n             * Getter for the payload used to construct the `SourceMap` instance.\\n             */\\n            readonly payload: SourceMapPayload;\\n            constructor(payload: SourceMapPayload);\\n            /**\\n             * Given a line number and column number in the generated source file, returns\\n             * an object representing the position in the original file. The object returned\\n             * consists of the following keys:\\n             */\\n            findEntry(line: number, column: number): SourceMapping;\\n        }\\n    }\\n    interface Module extends NodeModule {}\\n    class Module {\\n        static runMain(): void;\\n        static wrap(code: string): string;\\n        static createRequire(path: string | URL): NodeRequire;\\n        static builtinModules: string[];\\n        static isBuiltin(moduleName: string): boolean;\\n        static Module: typeof Module;\\n        constructor(id: string, parent?: Module);\\n    }\\n    global {\\n        interface ImportMeta {\\n            url: string;\\n            /**\\n             * @experimental\\n             * This feature is only available with the `--experimental-import-meta-resolve`\\n             * command flag enabled.\\n             *\\n             * Provides a module-relative resolution function scoped to each module, returning\\n             * the URL string.\\n             *\\n             * @param specified The module specifier to resolve relative to `parent`.\\n             * @param parent The absolute parent module URL to resolve from. If none\\n             * is specified, the value of `import.meta.url` is used as the default.\\n             */\\n            resolve?(specified: string, parent?: string | URL): Promise<string>;\\n        }\\n    }\\n    export = Module;\\n}\\ndeclare module 'node:module' {\\n    import module = require('module');\\n    export = module;\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/net.d.ts\":\"/**\\n * > Stability: 2 - Stable\\n *\\n * The `net` module provides an asynchronous network API for creating stream-based\\n * TCP or `IPC` servers ({@link createServer}) and clients\\n * ({@link createConnection}).\\n *\\n * It can be accessed using:\\n *\\n * ```js\\n * const net = require('net');\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/net.js)\\n */\\ndeclare module 'net' {\\n    import * as stream from 'node:stream';\\n    import { Abortable, EventEmitter } from 'node:events';\\n    import * as dns from 'node:dns';\\n    type LookupFunction = (hostname: string, options: dns.LookupOneOptions, callback: (err: NodeJS.ErrnoException | null, address: string, family: number) => void) => void;\\n    interface AddressInfo {\\n        address: string;\\n        family: string;\\n        port: number;\\n    }\\n    interface SocketConstructorOpts {\\n        fd?: number | undefined;\\n        allowHalfOpen?: boolean | undefined;\\n        readable?: boolean | undefined;\\n        writable?: boolean | undefined;\\n        signal?: AbortSignal;\\n    }\\n    interface OnReadOpts {\\n        buffer: Uint8Array | (() => Uint8Array);\\n        /**\\n         * This function is called for every chunk of incoming data.\\n         * Two arguments are passed to it: the number of bytes written to buffer and a reference to buffer.\\n         * Return false from this function to implicitly pause() the socket.\\n         */\\n        callback(bytesWritten: number, buf: Uint8Array): boolean;\\n    }\\n    interface ConnectOpts {\\n        /**\\n         * If specified, incoming data is stored in a single buffer and passed to the supplied callback when data arrives on the socket.\\n         * Note: this will cause the streaming functionality to not provide any data, however events like 'error', 'end', and 'close' will\\n         * still be emitted as normal and methods like pause() and resume() will also behave as expected.\\n         */\\n        onread?: OnReadOpts | undefined;\\n    }\\n    interface TcpSocketConnectOpts extends ConnectOpts {\\n        port: number;\\n        host?: string | undefined;\\n        localAddress?: string | undefined;\\n        localPort?: number | undefined;\\n        hints?: number | undefined;\\n        family?: number | undefined;\\n        lookup?: LookupFunction | undefined;\\n        noDelay?: boolean | undefined;\\n        keepAlive?: boolean | undefined;\\n        keepAliveInitialDelay?: number | undefined;\\n        /**\\n         * @since v18.13.0\\n         */\\n        autoSelectFamily?: boolean | undefined;\\n        /**\\n         * @since v18.13.0\\n         */\\n        autoSelectFamilyAttemptTimeout?: number | undefined;\\n    }\\n    interface IpcSocketConnectOpts extends ConnectOpts {\\n        path: string;\\n    }\\n    type SocketConnectOpts = TcpSocketConnectOpts | IpcSocketConnectOpts;\\n    type SocketReadyState = 'opening' | 'open' | 'readOnly' | 'writeOnly' | 'closed';\\n    /**\\n     * This class is an abstraction of a TCP socket or a streaming `IPC` endpoint\\n     * (uses named pipes on Windows, and Unix domain sockets otherwise). It is also\\n     * an `EventEmitter`.\\n     *\\n     * A `net.Socket` can be created by the user and used directly to interact with\\n     * a server. For example, it is returned by {@link createConnection},\\n     * so the user can use it to talk to the server.\\n     *\\n     * It can also be created by Node.js and passed to the user when a connection\\n     * is received. For example, it is passed to the listeners of a `'connection'` event emitted on a {@link Server}, so the user can use\\n     * it to interact with the client.\\n     * @since v0.3.4\\n     */\\n    class Socket extends stream.Duplex {\\n        constructor(options?: SocketConstructorOpts);\\n        /**\\n         * Sends data on the socket. The second parameter specifies the encoding in the\\n         * case of a string. It defaults to UTF8 encoding.\\n         *\\n         * Returns `true` if the entire data was flushed successfully to the kernel\\n         * buffer. Returns `false` if all or part of the data was queued in user memory.`'drain'` will be emitted when the buffer is again free.\\n         *\\n         * The optional `callback` parameter will be executed when the data is finally\\n         * written out, which may not be immediately.\\n         *\\n         * See `Writable` stream `write()` method for more\\n         * information.\\n         * @since v0.1.90\\n         * @param [encoding='utf8'] Only used when data is `string`.\\n         */\\n        write(buffer: Uint8Array | string, cb?: (err?: Error) => void): boolean;\\n        write(str: Uint8Array | string, encoding?: BufferEncoding, cb?: (err?: Error) => void): boolean;\\n        /**\\n         * Initiate a connection on a given socket.\\n         *\\n         * Possible signatures:\\n         *\\n         * * `socket.connect(options[, connectListener])`\\n         * * `socket.connect(path[, connectListener])` for `IPC` connections.\\n         * * `socket.connect(port[, host][, connectListener])` for TCP connections.\\n         * * Returns: `net.Socket` The socket itself.\\n         *\\n         * This function is asynchronous. When the connection is established, the `'connect'` event will be emitted. If there is a problem connecting,\\n         * instead of a `'connect'` event, an `'error'` event will be emitted with\\n         * the error passed to the `'error'` listener.\\n         * The last parameter `connectListener`, if supplied, will be added as a listener\\n         * for the `'connect'` event **once**.\\n         *\\n         * This function should only be used for reconnecting a socket after`'close'` has been emitted or otherwise it may lead to undefined\\n         * behavior.\\n         */\\n        connect(options: SocketConnectOpts, connectionListener?: () => void): this;\\n        connect(port: number, host: string, connectionListener?: () => void): this;\\n        connect(port: number, connectionListener?: () => void): this;\\n        connect(path: string, connectionListener?: () => void): this;\\n        /**\\n         * Set the encoding for the socket as a `Readable Stream`. See `readable.setEncoding()` for more information.\\n         * @since v0.1.90\\n         * @return The socket itself.\\n         */\\n        setEncoding(encoding?: BufferEncoding): this;\\n        /**\\n         * Pauses the reading of data. That is, `'data'` events will not be emitted.\\n         * Useful to throttle back an upload.\\n         * @return The socket itself.\\n         */\\n        pause(): this;\\n        /**\\n         * Close the TCP connection by sending an RST packet and destroy the stream.\\n         * If this TCP socket is in connecting status, it will send an RST packet\\n         * and destroy this TCP socket once it is connected. Otherwise, it will call\\n         * `socket.destroy` with an `ERR_SOCKET_CLOSED` Error. If this is not a TCP socket\\n         * (for example, a pipe), calling this method will immediately throw\\n         * an `ERR_INVALID_HANDLE_TYPE` Error.\\n         * @since v18.3.0\\n         * @return The socket itself.\\n         */\\n        resetAndDestroy(): this;\\n        /**\\n         * Resumes reading after a call to `socket.pause()`.\\n         * @return The socket itself.\\n         */\\n        resume(): this;\\n        /**\\n         * Sets the socket to timeout after `timeout` milliseconds of inactivity on\\n         * the socket. By default `net.Socket` do not have a timeout.\\n         *\\n         * When an idle timeout is triggered the socket will receive a `'timeout'` event but the connection will not be severed. The user must manually call `socket.end()` or `socket.destroy()` to\\n         * end the connection.\\n         *\\n         * ```js\\n         * socket.setTimeout(3000);\\n         * socket.on('timeout', () => {\\n         *   console.log('socket timeout');\\n         *   socket.end();\\n         * });\\n         * ```\\n         *\\n         * If `timeout` is 0, then the existing idle timeout is disabled.\\n         *\\n         * The optional `callback` parameter will be added as a one-time listener for the `'timeout'` event.\\n         * @since v0.1.90\\n         * @return The socket itself.\\n         */\\n        setTimeout(timeout: number, callback?: () => void): this;\\n        /**\\n         * Enable/disable the use of Nagle's algorithm.\\n         *\\n         * When a TCP connection is created, it will have Nagle's algorithm enabled.\\n         *\\n         * Nagle's algorithm delays data before it is sent via the network. It attempts\\n         * to optimize throughput at the expense of latency.\\n         *\\n         * Passing `true` for `noDelay` or not passing an argument will disable Nagle's\\n         * algorithm for the socket. Passing `false` for `noDelay` will enable Nagle's\\n         * algorithm.\\n         * @since v0.1.90\\n         * @param [noDelay=true]\\n         * @return The socket itself.\\n         */\\n        setNoDelay(noDelay?: boolean): this;\\n        /**\\n         * Enable/disable keep-alive functionality, and optionally set the initial\\n         * delay before the first keepalive probe is sent on an idle socket.\\n         *\\n         * Set `initialDelay` (in milliseconds) to set the delay between the last\\n         * data packet received and the first keepalive probe. Setting `0` for`initialDelay` will leave the value unchanged from the default\\n         * (or previous) setting.\\n         *\\n         * Enabling the keep-alive functionality will set the following socket options:\\n         *\\n         * * `SO_KEEPALIVE=1`\\n         * * `TCP_KEEPIDLE=initialDelay`\\n         * * `TCP_KEEPCNT=10`\\n         * * `TCP_KEEPINTVL=1`\\n         * @since v0.1.92\\n         * @param [enable=false]\\n         * @param [initialDelay=0]\\n         * @return The socket itself.\\n         */\\n        setKeepAlive(enable?: boolean, initialDelay?: number): this;\\n        /**\\n         * Returns the bound `address`, the address `family` name and `port` of the\\n         * socket as reported by the operating system:`{ port: 12346, family: 'IPv4', address: '127.0.0.1' }`\\n         * @since v0.1.90\\n         */\\n        address(): AddressInfo | {};\\n        /**\\n         * Calling `unref()` on a socket will allow the program to exit if this is the only\\n         * active socket in the event system. If the socket is already `unref`ed calling`unref()` again will have no effect.\\n         * @since v0.9.1\\n         * @return The socket itself.\\n         */\\n        unref(): this;\\n        /**\\n         * Opposite of `unref()`, calling `ref()` on a previously `unref`ed socket will _not_ let the program exit if it's the only socket left (the default behavior).\\n         * If the socket is `ref`ed calling `ref` again will have no effect.\\n         * @since v0.9.1\\n         * @return The socket itself.\\n         */\\n        ref(): this;\\n        /**\\n         * This property shows the number of characters buffered for writing. The buffer\\n         * may contain strings whose length after encoding is not yet known. So this number\\n         * is only an approximation of the number of bytes in the buffer.\\n         *\\n         * `net.Socket` has the property that `socket.write()` always works. This is to\\n         * help users get up and running quickly. The computer cannot always keep up\\n         * with the amount of data that is written to a socket. The network connection\\n         * simply might be too slow. Node.js will internally queue up the data written to a\\n         * socket and send it out over the wire when it is possible.\\n         *\\n         * The consequence of this internal buffering is that memory may grow.\\n         * Users who experience large or growing `bufferSize` should attempt to\\n         * \\\"throttle\\\" the data flows in their program with `socket.pause()` and `socket.resume()`.\\n         * @since v0.3.8\\n         * @deprecated Since v14.6.0 - Use `writableLength` instead.\\n         */\\n        readonly bufferSize: number;\\n        /**\\n         * The amount of received bytes.\\n         * @since v0.5.3\\n         */\\n        readonly bytesRead: number;\\n        /**\\n         * The amount of bytes sent.\\n         * @since v0.5.3\\n         */\\n        readonly bytesWritten: number;\\n        /**\\n         * If `true`,`socket.connect(options[, connectListener])` was\\n         * called and has not yet finished. It will stay `true` until the socket becomes\\n         * connected, then it is set to `false` and the `'connect'` event is emitted. Note\\n         * that the `socket.connect(options[, connectListener])` callback is a listener for the `'connect'` event.\\n         * @since v6.1.0\\n         */\\n        readonly connecting: boolean;\\n        /**\\n         * See `writable.destroyed` for further details.\\n         */\\n        readonly destroyed: boolean;\\n        /**\\n         * The string representation of the local IP address the remote client is\\n         * connecting on. For example, in a server listening on `'0.0.0.0'`, if a client\\n         * connects on `'192.168.1.1'`, the value of `socket.localAddress` would be`'192.168.1.1'`.\\n         * @since v0.9.6\\n         */\\n        readonly localAddress?: string;\\n        /**\\n         * The numeric representation of the local port. For example, `80` or `21`.\\n         * @since v0.9.6\\n         */\\n        readonly localPort?: number;\\n        /**\\n         * The string representation of the local IP family. `'IPv4'` or `'IPv6'`.\\n         * @since v18.8.0\\n         */\\n        readonly localFamily?: string;\\n        /**\\n         * This is `true` if the socket is not connected yet, either because `.connect()`\\n         * has not yet been called or because it is still in the process of connecting (see `socket.connecting`).\\n         * @since v10.16.0\\n         */\\n        readonly pending: boolean;\\n        /**\\n         * This property represents the state of the connection as a string.\\n         * @see {https://nodejs.org/api/net.html#socketreadystate}\\n         * @since v0.5.0\\n         */\\n        readonly readyState: SocketReadyState;\\n        /**\\n         * The string representation of the remote IP address. For example,`'74.125.127.100'` or `'2001:4860:a005::68'`. Value may be `undefined` if\\n         * the socket is destroyed (for example, if the client disconnected).\\n         * @since v0.5.10\\n         */\\n        readonly remoteAddress?: string | undefined;\\n        /**\\n         * The string representation of the remote IP family. `'IPv4'` or `'IPv6'`.\\n         * @since v0.11.14\\n         */\\n        readonly remoteFamily?: string | undefined;\\n        /**\\n         * The numeric representation of the remote port. For example, `80` or `21`.\\n         * @since v0.5.10\\n         */\\n        readonly remotePort?: number | undefined;\\n        /**\\n         * The socket timeout in milliseconds as set by socket.setTimeout(). It is undefined if a timeout has not been set.\\n         * @since v10.7.0\\n         */\\n        readonly timeout?: number | undefined;\\n        /**\\n         * Half-closes the socket. i.e., it sends a FIN packet. It is possible the\\n         * server will still send some data.\\n         *\\n         * See `writable.end()` for further details.\\n         * @since v0.1.90\\n         * @param [encoding='utf8'] Only used when data is `string`.\\n         * @param callback Optional callback for when the socket is finished.\\n         * @return The socket itself.\\n         */\\n        end(callback?: () => void): this;\\n        end(buffer: Uint8Array | string, callback?: () => void): this;\\n        end(str: Uint8Array | string, encoding?: BufferEncoding, callback?: () => void): this;\\n        /**\\n         * events.EventEmitter\\n         *   1. close\\n         *   2. connect\\n         *   3. data\\n         *   4. drain\\n         *   5. end\\n         *   6. error\\n         *   7. lookup\\n         *   8. ready\\n         *   9. timeout\\n         */\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        addListener(event: 'close', listener: (hadError: boolean) => void): this;\\n        addListener(event: 'connect', listener: () => void): this;\\n        addListener(event: 'data', listener: (data: Buffer) => void): this;\\n        addListener(event: 'drain', listener: () => void): this;\\n        addListener(event: 'end', listener: () => void): this;\\n        addListener(event: 'error', listener: (err: Error) => void): this;\\n        addListener(event: 'lookup', listener: (err: Error, address: string, family: string | number, host: string) => void): this;\\n        addListener(event: 'ready', listener: () => void): this;\\n        addListener(event: 'timeout', listener: () => void): this;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        emit(event: 'close', hadError: boolean): boolean;\\n        emit(event: 'connect'): boolean;\\n        emit(event: 'data', data: Buffer): boolean;\\n        emit(event: 'drain'): boolean;\\n        emit(event: 'end'): boolean;\\n        emit(event: 'error', err: Error): boolean;\\n        emit(event: 'lookup', err: Error, address: string, family: string | number, host: string): boolean;\\n        emit(event: 'ready'): boolean;\\n        emit(event: 'timeout'): boolean;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        on(event: 'close', listener: (hadError: boolean) => void): this;\\n        on(event: 'connect', listener: () => void): this;\\n        on(event: 'data', listener: (data: Buffer) => void): this;\\n        on(event: 'drain', listener: () => void): this;\\n        on(event: 'end', listener: () => void): this;\\n        on(event: 'error', listener: (err: Error) => void): this;\\n        on(event: 'lookup', listener: (err: Error, address: string, family: string | number, host: string) => void): this;\\n        on(event: 'ready', listener: () => void): this;\\n        on(event: 'timeout', listener: () => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        once(event: 'close', listener: (hadError: boolean) => void): this;\\n        once(event: 'connect', listener: () => void): this;\\n        once(event: 'data', listener: (data: Buffer) => void): this;\\n        once(event: 'drain', listener: () => void): this;\\n        once(event: 'end', listener: () => void): this;\\n        once(event: 'error', listener: (err: Error) => void): this;\\n        once(event: 'lookup', listener: (err: Error, address: string, family: string | number, host: string) => void): this;\\n        once(event: 'ready', listener: () => void): this;\\n        once(event: 'timeout', listener: () => void): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'close', listener: (hadError: boolean) => void): this;\\n        prependListener(event: 'connect', listener: () => void): this;\\n        prependListener(event: 'data', listener: (data: Buffer) => void): this;\\n        prependListener(event: 'drain', listener: () => void): this;\\n        prependListener(event: 'end', listener: () => void): this;\\n        prependListener(event: 'error', listener: (err: Error) => void): this;\\n        prependListener(event: 'lookup', listener: (err: Error, address: string, family: string | number, host: string) => void): this;\\n        prependListener(event: 'ready', listener: () => void): this;\\n        prependListener(event: 'timeout', listener: () => void): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'close', listener: (hadError: boolean) => void): this;\\n        prependOnceListener(event: 'connect', listener: () => void): this;\\n        prependOnceListener(event: 'data', listener: (data: Buffer) => void): this;\\n        prependOnceListener(event: 'drain', listener: () => void): this;\\n        prependOnceListener(event: 'end', listener: () => void): this;\\n        prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n        prependOnceListener(event: 'lookup', listener: (err: Error, address: string, family: string | number, host: string) => void): this;\\n        prependOnceListener(event: 'ready', listener: () => void): this;\\n        prependOnceListener(event: 'timeout', listener: () => void): this;\\n    }\\n    interface ListenOptions extends Abortable {\\n        port?: number | undefined;\\n        host?: string | undefined;\\n        backlog?: number | undefined;\\n        path?: string | undefined;\\n        exclusive?: boolean | undefined;\\n        readableAll?: boolean | undefined;\\n        writableAll?: boolean | undefined;\\n        /**\\n         * @default false\\n         */\\n        ipv6Only?: boolean | undefined;\\n    }\\n    interface ServerOpts {\\n        /**\\n         * Indicates whether half-opened TCP connections are allowed.\\n         * @default false\\n         */\\n        allowHalfOpen?: boolean | undefined;\\n        /**\\n         * Indicates whether the socket should be paused on incoming connections.\\n         * @default false\\n         */\\n        pauseOnConnect?: boolean | undefined;\\n        /**\\n         * If set to `true`, it disables the use of Nagle's algorithm immediately after a new incoming connection is received.\\n         * @default false\\n         * @since v16.5.0\\n         */\\n        noDelay?: boolean | undefined;\\n        /**\\n         * If set to `true`, it enables keep-alive functionality on the socket immediately after a new incoming connection is received,\\n         * similarly on what is done in `socket.setKeepAlive([enable][, initialDelay])`.\\n         * @default false\\n         * @since v16.5.0\\n         */\\n        keepAlive?: boolean | undefined;\\n        /**\\n         * If set to a positive number, it sets the initial delay before the first keepalive probe is sent on an idle socket.\\n         * @default 0\\n         * @since v16.5.0\\n         */\\n        keepAliveInitialDelay?: number | undefined;\\n    }\\n    interface DropArgument {\\n        localAddress?: string;\\n        localPort?: number;\\n        localFamily?: string;\\n        remoteAddress?: string;\\n        remotePort?: number;\\n        remoteFamily?: string;\\n    }\\n    /**\\n     * This class is used to create a TCP or `IPC` server.\\n     * @since v0.1.90\\n     */\\n    class Server extends EventEmitter {\\n        constructor(connectionListener?: (socket: Socket) => void);\\n        constructor(options?: ServerOpts, connectionListener?: (socket: Socket) => void);\\n        /**\\n         * Start a server listening for connections. A `net.Server` can be a TCP or\\n         * an `IPC` server depending on what it listens to.\\n         *\\n         * Possible signatures:\\n         *\\n         * * `server.listen(handle[, backlog][, callback])`\\n         * * `server.listen(options[, callback])`\\n         * * `server.listen(path[, backlog][, callback])` for `IPC` servers\\n         * * `server.listen([port[, host[, backlog]]][, callback])` for TCP servers\\n         *\\n         * This function is asynchronous. When the server starts listening, the `'listening'` event will be emitted. The last parameter `callback`will be added as a listener for the `'listening'`\\n         * event.\\n         *\\n         * All `listen()` methods can take a `backlog` parameter to specify the maximum\\n         * length of the queue of pending connections. The actual length will be determined\\n         * by the OS through sysctl settings such as `tcp_max_syn_backlog` and `somaxconn`on Linux. The default value of this parameter is 511 (not 512).\\n         *\\n         * All {@link Socket} are set to `SO_REUSEADDR` (see [`socket(7)`](https://man7.org/linux/man-pages/man7/socket.7.html) for\\n         * details).\\n         *\\n         * The `server.listen()` method can be called again if and only if there was an\\n         * error during the first `server.listen()` call or `server.close()` has been\\n         * called. Otherwise, an `ERR_SERVER_ALREADY_LISTEN` error will be thrown.\\n         *\\n         * One of the most common errors raised when listening is `EADDRINUSE`.\\n         * This happens when another server is already listening on the requested`port`/`path`/`handle`. One way to handle this would be to retry\\n         * after a certain amount of time:\\n         *\\n         * ```js\\n         * server.on('error', (e) => {\\n         *   if (e.code === 'EADDRINUSE') {\\n         *     console.log('Address in use, retrying...');\\n         *     setTimeout(() => {\\n         *       server.close();\\n         *       server.listen(PORT, HOST);\\n         *     }, 1000);\\n         *   }\\n         * });\\n         * ```\\n         */\\n        listen(port?: number, hostname?: string, backlog?: number, listeningListener?: () => void): this;\\n        listen(port?: number, hostname?: string, listeningListener?: () => void): this;\\n        listen(port?: number, backlog?: number, listeningListener?: () => void): this;\\n        listen(port?: number, listeningListener?: () => void): this;\\n        listen(path: string, backlog?: number, listeningListener?: () => void): this;\\n        listen(path: string, listeningListener?: () => void): this;\\n        listen(options: ListenOptions, listeningListener?: () => void): this;\\n        listen(handle: any, backlog?: number, listeningListener?: () => void): this;\\n        listen(handle: any, listeningListener?: () => void): this;\\n        /**\\n         * Stops the server from accepting new connections and keeps existing\\n         * connections. This function is asynchronous, the server is finally closed\\n         * when all connections are ended and the server emits a `'close'` event.\\n         * The optional `callback` will be called once the `'close'` event occurs. Unlike\\n         * that event, it will be called with an `Error` as its only argument if the server\\n         * was not open when it was closed.\\n         * @since v0.1.90\\n         * @param callback Called when the server is closed.\\n         */\\n        close(callback?: (err?: Error) => void): this;\\n        /**\\n         * Returns the bound `address`, the address `family` name, and `port` of the server\\n         * as reported by the operating system if listening on an IP socket\\n         * (useful to find which port was assigned when getting an OS-assigned address):`{ port: 12346, family: 'IPv4', address: '127.0.0.1' }`.\\n         *\\n         * For a server listening on a pipe or Unix domain socket, the name is returned\\n         * as a string.\\n         *\\n         * ```js\\n         * const server = net.createServer((socket) => {\\n         *   socket.end('goodbye\\\\n');\\n         * }).on('error', (err) => {\\n         *   // Handle errors here.\\n         *   throw err;\\n         * });\\n         *\\n         * // Grab an arbitrary unused port.\\n         * server.listen(() => {\\n         *   console.log('opened server on', server.address());\\n         * });\\n         * ```\\n         *\\n         * `server.address()` returns `null` before the `'listening'` event has been\\n         * emitted or after calling `server.close()`.\\n         * @since v0.1.90\\n         */\\n        address(): AddressInfo | string | null;\\n        /**\\n         * Asynchronously get the number of concurrent connections on the server. Works\\n         * when sockets were sent to forks.\\n         *\\n         * Callback should take two arguments `err` and `count`.\\n         * @since v0.9.7\\n         */\\n        getConnections(cb: (error: Error | null, count: number) => void): void;\\n        /**\\n         * Opposite of `unref()`, calling `ref()` on a previously `unref`ed server will _not_ let the program exit if it's the only server left (the default behavior).\\n         * If the server is `ref`ed calling `ref()` again will have no effect.\\n         * @since v0.9.1\\n         */\\n        ref(): this;\\n        /**\\n         * Calling `unref()` on a server will allow the program to exit if this is the only\\n         * active server in the event system. If the server is already `unref`ed calling`unref()` again will have no effect.\\n         * @since v0.9.1\\n         */\\n        unref(): this;\\n        /**\\n         * Set this property to reject connections when the server's connection count gets\\n         * high.\\n         *\\n         * It is not recommended to use this option once a socket has been sent to a child\\n         * with `child_process.fork()`.\\n         * @since v0.2.0\\n         */\\n        maxConnections: number;\\n        connections: number;\\n        /**\\n         * Indicates whether or not the server is listening for connections.\\n         * @since v5.7.0\\n         */\\n        listening: boolean;\\n        /**\\n         * events.EventEmitter\\n         *   1. close\\n         *   2. connection\\n         *   3. error\\n         *   4. listening\\n         *   5. drop\\n         */\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        addListener(event: 'close', listener: () => void): this;\\n        addListener(event: 'connection', listener: (socket: Socket) => void): this;\\n        addListener(event: 'error', listener: (err: Error) => void): this;\\n        addListener(event: 'listening', listener: () => void): this;\\n        addListener(event: 'drop', listener: (data?: DropArgument) => void): this;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        emit(event: 'close'): boolean;\\n        emit(event: 'connection', socket: Socket): boolean;\\n        emit(event: 'error', err: Error): boolean;\\n        emit(event: 'listening'): boolean;\\n        emit(event: 'drop', data?: DropArgument): boolean;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        on(event: 'close', listener: () => void): this;\\n        on(event: 'connection', listener: (socket: Socket) => void): this;\\n        on(event: 'error', listener: (err: Error) => void): this;\\n        on(event: 'listening', listener: () => void): this;\\n        on(event: 'drop', listener: (data?: DropArgument) => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        once(event: 'close', listener: () => void): this;\\n        once(event: 'connection', listener: (socket: Socket) => void): this;\\n        once(event: 'error', listener: (err: Error) => void): this;\\n        once(event: 'listening', listener: () => void): this;\\n        once(event: 'drop', listener: (data?: DropArgument) => void): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'close', listener: () => void): this;\\n        prependListener(event: 'connection', listener: (socket: Socket) => void): this;\\n        prependListener(event: 'error', listener: (err: Error) => void): this;\\n        prependListener(event: 'listening', listener: () => void): this;\\n        prependListener(event: 'drop', listener: (data?: DropArgument) => void): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'close', listener: () => void): this;\\n        prependOnceListener(event: 'connection', listener: (socket: Socket) => void): this;\\n        prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n        prependOnceListener(event: 'listening', listener: () => void): this;\\n        prependOnceListener(event: 'drop', listener: (data?: DropArgument) => void): this;\\n    }\\n    type IPVersion = 'ipv4' | 'ipv6';\\n    /**\\n     * The `BlockList` object can be used with some network APIs to specify rules for\\n     * disabling inbound or outbound access to specific IP addresses, IP ranges, or\\n     * IP subnets.\\n     * @since v15.0.0, v14.18.0\\n     */\\n    class BlockList {\\n        /**\\n         * Adds a rule to block the given IP address.\\n         * @since v15.0.0, v14.18.0\\n         * @param address An IPv4 or IPv6 address.\\n         * @param [type='ipv4'] Either `'ipv4'` or `'ipv6'`.\\n         */\\n        addAddress(address: string, type?: IPVersion): void;\\n        addAddress(address: SocketAddress): void;\\n        /**\\n         * Adds a rule to block a range of IP addresses from `start` (inclusive) to`end` (inclusive).\\n         * @since v15.0.0, v14.18.0\\n         * @param start The starting IPv4 or IPv6 address in the range.\\n         * @param end The ending IPv4 or IPv6 address in the range.\\n         * @param [type='ipv4'] Either `'ipv4'` or `'ipv6'`.\\n         */\\n        addRange(start: string, end: string, type?: IPVersion): void;\\n        addRange(start: SocketAddress, end: SocketAddress): void;\\n        /**\\n         * Adds a rule to block a range of IP addresses specified as a subnet mask.\\n         * @since v15.0.0, v14.18.0\\n         * @param net The network IPv4 or IPv6 address.\\n         * @param prefix The number of CIDR prefix bits. For IPv4, this must be a value between `0` and `32`. For IPv6, this must be between `0` and `128`.\\n         * @param [type='ipv4'] Either `'ipv4'` or `'ipv6'`.\\n         */\\n        addSubnet(net: SocketAddress, prefix: number): void;\\n        addSubnet(net: string, prefix: number, type?: IPVersion): void;\\n        /**\\n         * Returns `true` if the given IP address matches any of the rules added to the`BlockList`.\\n         *\\n         * ```js\\n         * const blockList = new net.BlockList();\\n         * blockList.addAddress('123.123.123.123');\\n         * blockList.addRange('10.0.0.1', '10.0.0.10');\\n         * blockList.addSubnet('8592:757c:efae:4e45::', 64, 'ipv6');\\n         *\\n         * console.log(blockList.check('123.123.123.123'));  // Prints: true\\n         * console.log(blockList.check('10.0.0.3'));  // Prints: true\\n         * console.log(blockList.check('222.111.111.222'));  // Prints: false\\n         *\\n         * // IPv6 notation for IPv4 addresses works:\\n         * console.log(blockList.check('::ffff:7b7b:7b7b', 'ipv6')); // Prints: true\\n         * console.log(blockList.check('::ffff:123.123.123.123', 'ipv6')); // Prints: true\\n         * ```\\n         * @since v15.0.0, v14.18.0\\n         * @param address The IP address to check\\n         * @param [type='ipv4'] Either `'ipv4'` or `'ipv6'`.\\n         */\\n        check(address: SocketAddress): boolean;\\n        check(address: string, type?: IPVersion): boolean;\\n    }\\n    interface TcpNetConnectOpts extends TcpSocketConnectOpts, SocketConstructorOpts {\\n        timeout?: number | undefined;\\n    }\\n    interface IpcNetConnectOpts extends IpcSocketConnectOpts, SocketConstructorOpts {\\n        timeout?: number | undefined;\\n    }\\n    type NetConnectOpts = TcpNetConnectOpts | IpcNetConnectOpts;\\n    /**\\n     * Creates a new TCP or `IPC` server.\\n     *\\n     * If `allowHalfOpen` is set to `true`, when the other end of the socket\\n     * signals the end of transmission, the server will only send back the end of\\n     * transmission when `socket.end()` is explicitly called. For example, in the\\n     * context of TCP, when a FIN packed is received, a FIN packed is sent\\n     * back only when `socket.end()` is explicitly called. Until then the\\n     * connection is half-closed (non-readable but still writable). See `'end'` event and [RFC 1122](https://tools.ietf.org/html/rfc1122) (section 4.2.2.13) for more information.\\n     *\\n     * If `pauseOnConnect` is set to `true`, then the socket associated with each\\n     * incoming connection will be paused, and no data will be read from its handle.\\n     * This allows connections to be passed between processes without any data being\\n     * read by the original process. To begin reading data from a paused socket, call `socket.resume()`.\\n     *\\n     * The server can be a TCP server or an `IPC` server, depending on what it `listen()` to.\\n     *\\n     * Here is an example of a TCP echo server which listens for connections\\n     * on port 8124:\\n     *\\n     * ```js\\n     * const net = require('net');\\n     * const server = net.createServer((c) => {\\n     *   // 'connection' listener.\\n     *   console.log('client connected');\\n     *   c.on('end', () => {\\n     *     console.log('client disconnected');\\n     *   });\\n     *   c.write('hello\\\\r\\\\n');\\n     *   c.pipe(c);\\n     * });\\n     * server.on('error', (err) => {\\n     *   throw err;\\n     * });\\n     * server.listen(8124, () => {\\n     *   console.log('server bound');\\n     * });\\n     * ```\\n     *\\n     * Test this by using `telnet`:\\n     *\\n     * ```console\\n     * $ telnet localhost 8124\\n     * ```\\n     *\\n     * To listen on the socket `/tmp/echo.sock`:\\n     *\\n     * ```js\\n     * server.listen('/tmp/echo.sock', () => {\\n     *   console.log('server bound');\\n     * });\\n     * ```\\n     *\\n     * Use `nc` to connect to a Unix domain socket server:\\n     *\\n     * ```console\\n     * $ nc -U /tmp/echo.sock\\n     * ```\\n     * @since v0.5.0\\n     * @param connectionListener Automatically set as a listener for the {@link 'connection'} event.\\n     */\\n    function createServer(connectionListener?: (socket: Socket) => void): Server;\\n    function createServer(options?: ServerOpts, connectionListener?: (socket: Socket) => void): Server;\\n    /**\\n     * Aliases to {@link createConnection}.\\n     *\\n     * Possible signatures:\\n     *\\n     * * {@link connect}\\n     * * {@link connect} for `IPC` connections.\\n     * * {@link connect} for TCP connections.\\n     */\\n    function connect(options: NetConnectOpts, connectionListener?: () => void): Socket;\\n    function connect(port: number, host?: string, connectionListener?: () => void): Socket;\\n    function connect(path: string, connectionListener?: () => void): Socket;\\n    /**\\n     * A factory function, which creates a new {@link Socket},\\n     * immediately initiates connection with `socket.connect()`,\\n     * then returns the `net.Socket` that starts the connection.\\n     *\\n     * When the connection is established, a `'connect'` event will be emitted\\n     * on the returned socket. The last parameter `connectListener`, if supplied,\\n     * will be added as a listener for the `'connect'` event **once**.\\n     *\\n     * Possible signatures:\\n     *\\n     * * {@link createConnection}\\n     * * {@link createConnection} for `IPC` connections.\\n     * * {@link createConnection} for TCP connections.\\n     *\\n     * The {@link connect} function is an alias to this function.\\n     */\\n    function createConnection(options: NetConnectOpts, connectionListener?: () => void): Socket;\\n    function createConnection(port: number, host?: string, connectionListener?: () => void): Socket;\\n    function createConnection(path: string, connectionListener?: () => void): Socket;\\n    /**\\n     * Returns `6` if `input` is an IPv6 address. Returns `4` if `input` is an IPv4\\n     * address in [dot-decimal notation](https://en.wikipedia.org/wiki/Dot-decimal_notation) with no leading zeroes. Otherwise, returns`0`.\\n     *\\n     * ```js\\n     * net.isIP('::1'); // returns 6\\n     * net.isIP('127.0.0.1'); // returns 4\\n     * net.isIP('127.000.000.001'); // returns 0\\n     * net.isIP('127.0.0.1/24'); // returns 0\\n     * net.isIP('fhqwhgads'); // returns 0\\n     * ```\\n     * @since v0.3.0\\n     */\\n    function isIP(input: string): number;\\n    /**\\n     * Returns `true` if `input` is an IPv4 address in [dot-decimal notation](https://en.wikipedia.org/wiki/Dot-decimal_notation) with no\\n     * leading zeroes. Otherwise, returns `false`.\\n     *\\n     * ```js\\n     * net.isIPv4('127.0.0.1'); // returns true\\n     * net.isIPv4('127.000.000.001'); // returns false\\n     * net.isIPv4('127.0.0.1/24'); // returns false\\n     * net.isIPv4('fhqwhgads'); // returns false\\n     * ```\\n     * @since v0.3.0\\n     */\\n    function isIPv4(input: string): boolean;\\n    /**\\n     * Returns `true` if `input` is an IPv6 address. Otherwise, returns `false`.\\n     *\\n     * ```js\\n     * net.isIPv6('::1'); // returns true\\n     * net.isIPv6('fhqwhgads'); // returns false\\n     * ```\\n     * @since v0.3.0\\n     */\\n    function isIPv6(input: string): boolean;\\n    interface SocketAddressInitOptions {\\n        /**\\n         * The network address as either an IPv4 or IPv6 string.\\n         * @default 127.0.0.1\\n         */\\n        address?: string | undefined;\\n        /**\\n         * @default `'ipv4'`\\n         */\\n        family?: IPVersion | undefined;\\n        /**\\n         * An IPv6 flow-label used only if `family` is `'ipv6'`.\\n         * @default 0\\n         */\\n        flowlabel?: number | undefined;\\n        /**\\n         * An IP port.\\n         * @default 0\\n         */\\n        port?: number | undefined;\\n    }\\n    /**\\n     * @since v15.14.0, v14.18.0\\n     */\\n    class SocketAddress {\\n        constructor(options: SocketAddressInitOptions);\\n        /**\\n         * @since v15.14.0, v14.18.0\\n         */\\n        readonly address: string;\\n        /**\\n         * Either \\\\`'ipv4'\\\\` or \\\\`'ipv6'\\\\`.\\n         * @since v15.14.0, v14.18.0\\n         */\\n        readonly family: IPVersion;\\n        /**\\n         * @since v15.14.0, v14.18.0\\n         */\\n        readonly port: number;\\n        /**\\n         * @since v15.14.0, v14.18.0\\n         */\\n        readonly flowlabel: number;\\n    }\\n}\\ndeclare module 'node:net' {\\n    export * from 'net';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/os.d.ts\":\"/**\\n * The `os` module provides operating system-related utility methods and\\n * properties. It can be accessed using:\\n *\\n * ```js\\n * const os = require('os');\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/os.js)\\n */\\ndeclare module 'os' {\\n    interface CpuInfo {\\n        model: string;\\n        speed: number;\\n        times: {\\n            user: number;\\n            nice: number;\\n            sys: number;\\n            idle: number;\\n            irq: number;\\n        };\\n    }\\n    interface NetworkInterfaceBase {\\n        address: string;\\n        netmask: string;\\n        mac: string;\\n        internal: boolean;\\n        cidr: string | null;\\n    }\\n    interface NetworkInterfaceInfoIPv4 extends NetworkInterfaceBase {\\n        family: 'IPv4';\\n        scopeid?: undefined;\\n    }\\n    interface NetworkInterfaceInfoIPv6 extends NetworkInterfaceBase {\\n        family: 'IPv6';\\n        scopeid: number;\\n    }\\n    interface UserInfo<T> {\\n        username: T;\\n        uid: number;\\n        gid: number;\\n        shell: T;\\n        homedir: T;\\n    }\\n    type NetworkInterfaceInfo = NetworkInterfaceInfoIPv4 | NetworkInterfaceInfoIPv6;\\n    /**\\n     * Returns the host name of the operating system as a string.\\n     * @since v0.3.3\\n     */\\n    function hostname(): string;\\n    /**\\n     * Returns an array containing the 1, 5, and 15 minute load averages.\\n     *\\n     * The load average is a measure of system activity calculated by the operating\\n     * system and expressed as a fractional number.\\n     *\\n     * The load average is a Unix-specific concept. On Windows, the return value is\\n     * always `[0, 0, 0]`.\\n     * @since v0.3.3\\n     */\\n    function loadavg(): number[];\\n    /**\\n     * Returns the system uptime in number of seconds.\\n     * @since v0.3.3\\n     */\\n    function uptime(): number;\\n    /**\\n     * Returns the amount of free system memory in bytes as an integer.\\n     * @since v0.3.3\\n     */\\n    function freemem(): number;\\n    /**\\n     * Returns the total amount of system memory in bytes as an integer.\\n     * @since v0.3.3\\n     */\\n    function totalmem(): number;\\n    /**\\n     * Returns an array of objects containing information about each logical CPU core.\\n     *\\n     * The properties included on each object include:\\n     *\\n     * ```js\\n     * [\\n     *   {\\n     *     model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',\\n     *     speed: 2926,\\n     *     times: {\\n     *       user: 252020,\\n     *       nice: 0,\\n     *       sys: 30340,\\n     *       idle: 1070356870,\\n     *       irq: 0\\n     *     }\\n     *   },\\n     *   {\\n     *     model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',\\n     *     speed: 2926,\\n     *     times: {\\n     *       user: 306960,\\n     *       nice: 0,\\n     *       sys: 26980,\\n     *       idle: 1071569080,\\n     *       irq: 0\\n     *     }\\n     *   },\\n     *   {\\n     *     model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',\\n     *     speed: 2926,\\n     *     times: {\\n     *       user: 248450,\\n     *       nice: 0,\\n     *       sys: 21750,\\n     *       idle: 1070919370,\\n     *       irq: 0\\n     *     }\\n     *   },\\n     *   {\\n     *     model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',\\n     *     speed: 2926,\\n     *     times: {\\n     *       user: 256880,\\n     *       nice: 0,\\n     *       sys: 19430,\\n     *       idle: 1070905480,\\n     *       irq: 20\\n     *     }\\n     *   },\\n     * ]\\n     * ```\\n     *\\n     * `nice` values are POSIX-only. On Windows, the `nice` values of all processors\\n     * are always 0.\\n     * @since v0.3.3\\n     */\\n    function cpus(): CpuInfo[];\\n    /**\\n     * Returns an estimate of the default amount of parallelism a program should use. Always returns a value greater than zero.\\n     *\\n     * This function is a small wrapper about libuv's [`uv_available_parallelism()`](https://docs.libuv.org/en/v1.x/misc.html#c.uv_available_parallelism).\\n     * @since 18.4.0\\n     */\\n    function availableParallelism(): number;\\n    /**\\n     * Returns the operating system name as returned by [`uname(3)`](https://linux.die.net/man/3/uname). For example, it\\n     * returns `'Linux'` on Linux, `'Darwin'` on macOS, and `'Windows_NT'` on Windows.\\n     *\\n     * See [https://en.wikipedia.org/wiki/Uname#Examples](https://en.wikipedia.org/wiki/Uname#Examples) for additional information\\n     * about the output of running [`uname(3)`](https://linux.die.net/man/3/uname) on various operating systems.\\n     * @since v0.3.3\\n     */\\n    function type(): string;\\n    /**\\n     * Returns the operating system as a string.\\n     *\\n     * On POSIX systems, the operating system release is determined by calling [`uname(3)`](https://linux.die.net/man/3/uname). On Windows, `GetVersionExW()` is used. See\\n     * [https://en.wikipedia.org/wiki/Uname#Examples](https://en.wikipedia.org/wiki/Uname#Examples) for more information.\\n     * @since v0.3.3\\n     */\\n    function release(): string;\\n    /**\\n     * Returns an object containing network interfaces that have been assigned a\\n     * network address.\\n     *\\n     * Each key on the returned object identifies a network interface. The associated\\n     * value is an array of objects that each describe an assigned network address.\\n     *\\n     * The properties available on the assigned network address object include:\\n     *\\n     * ```js\\n     * {\\n     *   lo: [\\n     *     {\\n     *       address: '127.0.0.1',\\n     *       netmask: '255.0.0.0',\\n     *       family: 'IPv4',\\n     *       mac: '00:00:00:00:00:00',\\n     *       internal: true,\\n     *       cidr: '127.0.0.1/8'\\n     *     },\\n     *     {\\n     *       address: '::1',\\n     *       netmask: 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff',\\n     *       family: 'IPv6',\\n     *       mac: '00:00:00:00:00:00',\\n     *       scopeid: 0,\\n     *       internal: true,\\n     *       cidr: '::1/128'\\n     *     }\\n     *   ],\\n     *   eth0: [\\n     *     {\\n     *       address: '192.168.1.108',\\n     *       netmask: '255.255.255.0',\\n     *       family: 'IPv4',\\n     *       mac: '01:02:03:0a:0b:0c',\\n     *       internal: false,\\n     *       cidr: '192.168.1.108/24'\\n     *     },\\n     *     {\\n     *       address: 'fe80::a00:27ff:fe4e:66a1',\\n     *       netmask: 'ffff:ffff:ffff:ffff::',\\n     *       family: 'IPv6',\\n     *       mac: '01:02:03:0a:0b:0c',\\n     *       scopeid: 1,\\n     *       internal: false,\\n     *       cidr: 'fe80::a00:27ff:fe4e:66a1/64'\\n     *     }\\n     *   ]\\n     * }\\n     * ```\\n     * @since v0.6.0\\n     */\\n    function networkInterfaces(): NodeJS.Dict<NetworkInterfaceInfo[]>;\\n    /**\\n     * Returns the string path of the current user's home directory.\\n     *\\n     * On POSIX, it uses the `$HOME` environment variable if defined. Otherwise it\\n     * uses the [effective UID](https://en.wikipedia.org/wiki/User_identifier#Effective_user_ID) to look up the user's home directory.\\n     *\\n     * On Windows, it uses the `USERPROFILE` environment variable if defined.\\n     * Otherwise it uses the path to the profile directory of the current user.\\n     * @since v2.3.0\\n     */\\n    function homedir(): string;\\n    /**\\n     * Returns information about the currently effective user. On POSIX platforms,\\n     * this is typically a subset of the password file. The returned object includes\\n     * the `username`, `uid`, `gid`, `shell`, and `homedir`. On Windows, the `uid` and`gid` fields are `-1`, and `shell` is `null`.\\n     *\\n     * The value of `homedir` returned by `os.userInfo()` is provided by the operating\\n     * system. This differs from the result of `os.homedir()`, which queries\\n     * environment variables for the home directory before falling back to the\\n     * operating system response.\\n     *\\n     * Throws a `SystemError` if a user has no `username` or `homedir`.\\n     * @since v6.0.0\\n     */\\n    function userInfo(options: { encoding: 'buffer' }): UserInfo<Buffer>;\\n    function userInfo(options?: { encoding: BufferEncoding }): UserInfo<string>;\\n    type SignalConstants = {\\n        [key in NodeJS.Signals]: number;\\n    };\\n    namespace constants {\\n        const UV_UDP_REUSEADDR: number;\\n        namespace signals {}\\n        const signals: SignalConstants;\\n        namespace errno {\\n            const E2BIG: number;\\n            const EACCES: number;\\n            const EADDRINUSE: number;\\n            const EADDRNOTAVAIL: number;\\n            const EAFNOSUPPORT: number;\\n            const EAGAIN: number;\\n            const EALREADY: number;\\n            const EBADF: number;\\n            const EBADMSG: number;\\n            const EBUSY: number;\\n            const ECANCELED: number;\\n            const ECHILD: number;\\n            const ECONNABORTED: number;\\n            const ECONNREFUSED: number;\\n            const ECONNRESET: number;\\n            const EDEADLK: number;\\n            const EDESTADDRREQ: number;\\n            const EDOM: number;\\n            const EDQUOT: number;\\n            const EEXIST: number;\\n            const EFAULT: number;\\n            const EFBIG: number;\\n            const EHOSTUNREACH: number;\\n            const EIDRM: number;\\n            const EILSEQ: number;\\n            const EINPROGRESS: number;\\n            const EINTR: number;\\n            const EINVAL: number;\\n            const EIO: number;\\n            const EISCONN: number;\\n            const EISDIR: number;\\n            const ELOOP: number;\\n            const EMFILE: number;\\n            const EMLINK: number;\\n            const EMSGSIZE: number;\\n            const EMULTIHOP: number;\\n            const ENAMETOOLONG: number;\\n            const ENETDOWN: number;\\n            const ENETRESET: number;\\n            const ENETUNREACH: number;\\n            const ENFILE: number;\\n            const ENOBUFS: number;\\n            const ENODATA: number;\\n            const ENODEV: number;\\n            const ENOENT: number;\\n            const ENOEXEC: number;\\n            const ENOLCK: number;\\n            const ENOLINK: number;\\n            const ENOMEM: number;\\n            const ENOMSG: number;\\n            const ENOPROTOOPT: number;\\n            const ENOSPC: number;\\n            const ENOSR: number;\\n            const ENOSTR: number;\\n            const ENOSYS: number;\\n            const ENOTCONN: number;\\n            const ENOTDIR: number;\\n            const ENOTEMPTY: number;\\n            const ENOTSOCK: number;\\n            const ENOTSUP: number;\\n            const ENOTTY: number;\\n            const ENXIO: number;\\n            const EOPNOTSUPP: number;\\n            const EOVERFLOW: number;\\n            const EPERM: number;\\n            const EPIPE: number;\\n            const EPROTO: number;\\n            const EPROTONOSUPPORT: number;\\n            const EPROTOTYPE: number;\\n            const ERANGE: number;\\n            const EROFS: number;\\n            const ESPIPE: number;\\n            const ESRCH: number;\\n            const ESTALE: number;\\n            const ETIME: number;\\n            const ETIMEDOUT: number;\\n            const ETXTBSY: number;\\n            const EWOULDBLOCK: number;\\n            const EXDEV: number;\\n            const WSAEINTR: number;\\n            const WSAEBADF: number;\\n            const WSAEACCES: number;\\n            const WSAEFAULT: number;\\n            const WSAEINVAL: number;\\n            const WSAEMFILE: number;\\n            const WSAEWOULDBLOCK: number;\\n            const WSAEINPROGRESS: number;\\n            const WSAEALREADY: number;\\n            const WSAENOTSOCK: number;\\n            const WSAEDESTADDRREQ: number;\\n            const WSAEMSGSIZE: number;\\n            const WSAEPROTOTYPE: number;\\n            const WSAENOPROTOOPT: number;\\n            const WSAEPROTONOSUPPORT: number;\\n            const WSAESOCKTNOSUPPORT: number;\\n            const WSAEOPNOTSUPP: number;\\n            const WSAEPFNOSUPPORT: number;\\n            const WSAEAFNOSUPPORT: number;\\n            const WSAEADDRINUSE: number;\\n            const WSAEADDRNOTAVAIL: number;\\n            const WSAENETDOWN: number;\\n            const WSAENETUNREACH: number;\\n            const WSAENETRESET: number;\\n            const WSAECONNABORTED: number;\\n            const WSAECONNRESET: number;\\n            const WSAENOBUFS: number;\\n            const WSAEISCONN: number;\\n            const WSAENOTCONN: number;\\n            const WSAESHUTDOWN: number;\\n            const WSAETOOMANYREFS: number;\\n            const WSAETIMEDOUT: number;\\n            const WSAECONNREFUSED: number;\\n            const WSAELOOP: number;\\n            const WSAENAMETOOLONG: number;\\n            const WSAEHOSTDOWN: number;\\n            const WSAEHOSTUNREACH: number;\\n            const WSAENOTEMPTY: number;\\n            const WSAEPROCLIM: number;\\n            const WSAEUSERS: number;\\n            const WSAEDQUOT: number;\\n            const WSAESTALE: number;\\n            const WSAEREMOTE: number;\\n            const WSASYSNOTREADY: number;\\n            const WSAVERNOTSUPPORTED: number;\\n            const WSANOTINITIALISED: number;\\n            const WSAEDISCON: number;\\n            const WSAENOMORE: number;\\n            const WSAECANCELLED: number;\\n            const WSAEINVALIDPROCTABLE: number;\\n            const WSAEINVALIDPROVIDER: number;\\n            const WSAEPROVIDERFAILEDINIT: number;\\n            const WSASYSCALLFAILURE: number;\\n            const WSASERVICE_NOT_FOUND: number;\\n            const WSATYPE_NOT_FOUND: number;\\n            const WSA_E_NO_MORE: number;\\n            const WSA_E_CANCELLED: number;\\n            const WSAEREFUSED: number;\\n        }\\n        namespace priority {\\n            const PRIORITY_LOW: number;\\n            const PRIORITY_BELOW_NORMAL: number;\\n            const PRIORITY_NORMAL: number;\\n            const PRIORITY_ABOVE_NORMAL: number;\\n            const PRIORITY_HIGH: number;\\n            const PRIORITY_HIGHEST: number;\\n        }\\n    }\\n    const devNull: string;\\n    const EOL: string;\\n    /**\\n     * Returns the operating system CPU architecture for which the Node.js binary was\\n     * compiled. Possible values are `'arm'`, `'arm64'`, `'ia32'`, `'mips'`,`'mipsel'`, `'ppc'`, `'ppc64'`, `'s390'`, `'s390x'`, and `'x64'`.\\n     *\\n     * The return value is equivalent to `process.arch`.\\n     * @since v0.5.0\\n     */\\n    function arch(): string;\\n    /**\\n     * Returns a string identifying the kernel version.\\n     *\\n     * On POSIX systems, the operating system release is determined by calling [`uname(3)`](https://linux.die.net/man/3/uname). On Windows, `RtlGetVersion()` is used, and if it is not\\n     * available, `GetVersionExW()` will be used. See [https://en.wikipedia.org/wiki/Uname#Examples](https://en.wikipedia.org/wiki/Uname#Examples) for more information.\\n     * @since v13.11.0, v12.17.0\\n     */\\n    function version(): string;\\n    /**\\n     * Returns a string identifying the operating system platform for which\\n     * the Node.js binary was compiled. The value is set at compile time.\\n     * Possible values are `'aix'`, `'darwin'`, `'freebsd'`,`'linux'`,`'openbsd'`, `'sunos'`, and `'win32'`.\\n     *\\n     * The return value is equivalent to `process.platform`.\\n     *\\n     * The value `'android'` may also be returned if Node.js is built on the Android\\n     * operating system. [Android support is experimental](https://github.com/nodejs/node/blob/HEAD/BUILDING.md#androidandroid-based-devices-eg-firefox-os).\\n     * @since v0.5.0\\n     */\\n    function platform(): NodeJS.Platform;\\n    /**\\n     * Returns the machine type as a string, such as arm, aarch64, mips, mips64, ppc64, ppc64le, s390, s390x, i386, i686, x86_64.\\n     *\\n     * On POSIX systems, the machine type is determined by calling [`uname(3)`](https://linux.die.net/man/3/uname).\\n     * On Windows, `RtlGetVersion()` is used, and if it is not available, `GetVersionExW()` will be used.\\n     * See [https://en.wikipedia.org/wiki/Uname#Examples](https://en.wikipedia.org/wiki/Uname#Examples) for more information.\\n     * @since v18.9.0\\n     */\\n    function machine(): string;\\n    /**\\n     * Returns the operating system's default directory for temporary files as a\\n     * string.\\n     * @since v0.9.9\\n     */\\n    function tmpdir(): string;\\n    /**\\n     * Returns a string identifying the endianness of the CPU for which the Node.js\\n     * binary was compiled.\\n     *\\n     * Possible values are `'BE'` for big endian and `'LE'` for little endian.\\n     * @since v0.9.4\\n     */\\n    function endianness(): 'BE' | 'LE';\\n    /**\\n     * Returns the scheduling priority for the process specified by `pid`. If `pid` is\\n     * not provided or is `0`, the priority of the current process is returned.\\n     * @since v10.10.0\\n     * @param [pid=0] The process ID to retrieve scheduling priority for.\\n     */\\n    function getPriority(pid?: number): number;\\n    /**\\n     * Attempts to set the scheduling priority for the process specified by `pid`. If`pid` is not provided or is `0`, the process ID of the current process is used.\\n     *\\n     * The `priority` input must be an integer between `-20` (high priority) and `19`(low priority). Due to differences between Unix priority levels and Windows\\n     * priority classes, `priority` is mapped to one of six priority constants in`os.constants.priority`. When retrieving a process priority level, this range\\n     * mapping may cause the return value to be slightly different on Windows. To avoid\\n     * confusion, set `priority` to one of the priority constants.\\n     *\\n     * On Windows, setting priority to `PRIORITY_HIGHEST` requires elevated user\\n     * privileges. Otherwise the set priority will be silently reduced to`PRIORITY_HIGH`.\\n     * @since v10.10.0\\n     * @param [pid=0] The process ID to set scheduling priority for.\\n     * @param priority The scheduling priority to assign to the process.\\n     */\\n    function setPriority(priority: number): void;\\n    function setPriority(pid: number, priority: number): void;\\n}\\ndeclare module 'node:os' {\\n    export * from 'os';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/path.d.ts\":\"declare module 'path/posix' {\\n    import path = require('path');\\n    export = path;\\n}\\ndeclare module 'path/win32' {\\n    import path = require('path');\\n    export = path;\\n}\\n/**\\n * The `path` module provides utilities for working with file and directory paths.\\n * It can be accessed using:\\n *\\n * ```js\\n * const path = require('path');\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/path.js)\\n */\\ndeclare module 'path' {\\n    namespace path {\\n        /**\\n         * A parsed path object generated by path.parse() or consumed by path.format().\\n         */\\n        interface ParsedPath {\\n            /**\\n             * The root of the path such as '/' or 'c:\\\\'\\n             */\\n            root: string;\\n            /**\\n             * The full directory path such as '/home/user/dir' or 'c:\\\\path\\\\dir'\\n             */\\n            dir: string;\\n            /**\\n             * The file name including extension (if any) such as 'index.html'\\n             */\\n            base: string;\\n            /**\\n             * The file extension (if any) such as '.html'\\n             */\\n            ext: string;\\n            /**\\n             * The file name without extension (if any) such as 'index'\\n             */\\n            name: string;\\n        }\\n        interface FormatInputPathObject {\\n            /**\\n             * The root of the path such as '/' or 'c:\\\\'\\n             */\\n            root?: string | undefined;\\n            /**\\n             * The full directory path such as '/home/user/dir' or 'c:\\\\path\\\\dir'\\n             */\\n            dir?: string | undefined;\\n            /**\\n             * The file name including extension (if any) such as 'index.html'\\n             */\\n            base?: string | undefined;\\n            /**\\n             * The file extension (if any) such as '.html'\\n             */\\n            ext?: string | undefined;\\n            /**\\n             * The file name without extension (if any) such as 'index'\\n             */\\n            name?: string | undefined;\\n        }\\n        interface PlatformPath {\\n            /**\\n             * Normalize a string path, reducing '..' and '.' parts.\\n             * When multiple slashes are found, they're replaced by a single one; when the path contains a trailing slash, it is preserved. On Windows backslashes are used.\\n             *\\n             * @param path string path to normalize.\\n             * @throws {TypeError} if `path` is not a string.\\n             */\\n            normalize(path: string): string;\\n            /**\\n             * Join all arguments together and normalize the resulting path.\\n             *\\n             * @param paths paths to join.\\n             * @throws {TypeError} if any of the path segments is not a string.\\n             */\\n            join(...paths: string[]): string;\\n            /**\\n             * The right-most parameter is considered {to}. Other parameters are considered an array of {from}.\\n             *\\n             * Starting from leftmost {from} parameter, resolves {to} to an absolute path.\\n             *\\n             * If {to} isn't already absolute, {from} arguments are prepended in right to left order,\\n             * until an absolute path is found. If after using all {from} paths still no absolute path is found,\\n             * the current working directory is used as well. The resulting path is normalized,\\n             * and trailing slashes are removed unless the path gets resolved to the root directory.\\n             *\\n             * @param paths A sequence of paths or path segments.\\n             * @throws {TypeError} if any of the arguments is not a string.\\n             */\\n            resolve(...paths: string[]): string;\\n            /**\\n             * Determines whether {path} is an absolute path. An absolute path will always resolve to the same location, regardless of the working directory.\\n             *\\n             * If the given {path} is a zero-length string, `false` will be returned.\\n             *\\n             * @param path path to test.\\n             * @throws {TypeError} if `path` is not a string.\\n             */\\n            isAbsolute(path: string): boolean;\\n            /**\\n             * Solve the relative path from {from} to {to} based on the current working directory.\\n             * At times we have two absolute paths, and we need to derive the relative path from one to the other. This is actually the reverse transform of path.resolve.\\n             *\\n             * @throws {TypeError} if either `from` or `to` is not a string.\\n             */\\n            relative(from: string, to: string): string;\\n            /**\\n             * Return the directory name of a path. Similar to the Unix dirname command.\\n             *\\n             * @param path the path to evaluate.\\n             * @throws {TypeError} if `path` is not a string.\\n             */\\n            dirname(path: string): string;\\n            /**\\n             * Return the last portion of a path. Similar to the Unix basename command.\\n             * Often used to extract the file name from a fully qualified path.\\n             *\\n             * @param path the path to evaluate.\\n             * @param suffix optionally, an extension to remove from the result.\\n             * @throws {TypeError} if `path` is not a string or if `ext` is given and is not a string.\\n             */\\n            basename(path: string, suffix?: string): string;\\n            /**\\n             * Return the extension of the path, from the last '.' to end of string in the last portion of the path.\\n             * If there is no '.' in the last portion of the path or the first character of it is '.', then it returns an empty string.\\n             *\\n             * @param path the path to evaluate.\\n             * @throws {TypeError} if `path` is not a string.\\n             */\\n            extname(path: string): string;\\n            /**\\n             * The platform-specific file separator. '\\\\\\\\' or '/'.\\n             */\\n            readonly sep: '\\\\\\\\' | '/';\\n            /**\\n             * The platform-specific file delimiter. ';' or ':'.\\n             */\\n            readonly delimiter: ';' | ':';\\n            /**\\n             * Returns an object from a path string - the opposite of format().\\n             *\\n             * @param path path to evaluate.\\n             * @throws {TypeError} if `path` is not a string.\\n             */\\n            parse(path: string): ParsedPath;\\n            /**\\n             * Returns a path string from an object - the opposite of parse().\\n             *\\n             * @param pathObject path to evaluate.\\n             */\\n            format(pathObject: FormatInputPathObject): string;\\n            /**\\n             * On Windows systems only, returns an equivalent namespace-prefixed path for the given path.\\n             * If path is not a string, path will be returned without modifications.\\n             * This method is meaningful only on Windows system.\\n             * On POSIX systems, the method is non-operational and always returns path without modifications.\\n             */\\n            toNamespacedPath(path: string): string;\\n            /**\\n             * Posix specific pathing.\\n             * Same as parent object on posix.\\n             */\\n            readonly posix: PlatformPath;\\n            /**\\n             * Windows specific pathing.\\n             * Same as parent object on windows\\n             */\\n            readonly win32: PlatformPath;\\n        }\\n    }\\n    const path: path.PlatformPath;\\n    export = path;\\n}\\ndeclare module 'node:path' {\\n    import path = require('path');\\n    export = path;\\n}\\ndeclare module 'node:path/posix' {\\n    import path = require('path/posix');\\n    export = path;\\n}\\ndeclare module 'node:path/win32' {\\n    import path = require('path/win32');\\n    export = path;\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/perf_hooks.d.ts\":\"/**\\n * This module provides an implementation of a subset of the W3C [Web Performance APIs](https://w3c.github.io/perf-timing-primer/) as well as additional APIs for\\n * Node.js-specific performance measurements.\\n *\\n * Node.js supports the following [Web Performance APIs](https://w3c.github.io/perf-timing-primer/):\\n *\\n * * [High Resolution Time](https://www.w3.org/TR/hr-time-2)\\n * * [Performance Timeline](https://w3c.github.io/performance-timeline/)\\n * * [User Timing](https://www.w3.org/TR/user-timing/)\\n *\\n * ```js\\n * const { PerformanceObserver, performance } = require('perf_hooks');\\n *\\n * const obs = new PerformanceObserver((items) => {\\n *   console.log(items.getEntries()[0].duration);\\n *   performance.clearMarks();\\n * });\\n * obs.observe({ type: 'measure' });\\n * performance.measure('Start to Now');\\n *\\n * performance.mark('A');\\n * doSomeLongRunningProcess(() => {\\n *   performance.measure('A to Now', 'A');\\n *\\n *   performance.mark('B');\\n *   performance.measure('A to B', 'A', 'B');\\n * });\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/perf_hooks.js)\\n */\\ndeclare module 'perf_hooks' {\\n    import { AsyncResource } from 'node:async_hooks';\\n    type EntryType = 'node' | 'mark' | 'measure' | 'gc' | 'function' | 'http2' | 'http';\\n    interface NodeGCPerformanceDetail {\\n        /**\\n         * When `performanceEntry.entryType` is equal to 'gc', `the performance.kind` property identifies\\n         * the type of garbage collection operation that occurred.\\n         * See perf_hooks.constants for valid values.\\n         */\\n        readonly kind?: number | undefined;\\n        /**\\n         * When `performanceEntry.entryType` is equal to 'gc', the `performance.flags`\\n         * property contains additional information about garbage collection operation.\\n         * See perf_hooks.constants for valid values.\\n         */\\n        readonly flags?: number | undefined;\\n    }\\n    /**\\n     * @since v8.5.0\\n     */\\n    class PerformanceEntry {\\n        protected constructor();\\n        /**\\n         * The total number of milliseconds elapsed for this entry. This value will not\\n         * be meaningful for all Performance Entry types.\\n         * @since v8.5.0\\n         */\\n        readonly duration: number;\\n        /**\\n         * The name of the performance entry.\\n         * @since v8.5.0\\n         */\\n        readonly name: string;\\n        /**\\n         * The high resolution millisecond timestamp marking the starting time of the\\n         * Performance Entry.\\n         * @since v8.5.0\\n         */\\n        readonly startTime: number;\\n        /**\\n         * The type of the performance entry. It may be one of:\\n         *\\n         * * `'node'` (Node.js only)\\n         * * `'mark'` (available on the Web)\\n         * * `'measure'` (available on the Web)\\n         * * `'gc'` (Node.js only)\\n         * * `'function'` (Node.js only)\\n         * * `'http2'` (Node.js only)\\n         * * `'http'` (Node.js only)\\n         * @since v8.5.0\\n         */\\n        readonly entryType: EntryType;\\n        /**\\n         * Additional detail specific to the `entryType`.\\n         * @since v16.0.0\\n         */\\n        readonly detail?: NodeGCPerformanceDetail | unknown | undefined; // TODO: Narrow this based on entry type.\\n        toJSON(): any;\\n    }\\n    class PerformanceMark extends PerformanceEntry {\\n        readonly duration: 0;\\n        readonly entryType: 'mark';\\n    }\\n    class PerformanceMeasure extends PerformanceEntry {\\n        readonly entryType: 'measure';\\n    }\\n    /**\\n     * _This property is an extension by Node.js. It is not available in Web browsers._\\n     *\\n     * Provides timing details for Node.js itself. The constructor of this class\\n     * is not exposed to users.\\n     * @since v8.5.0\\n     */\\n    class PerformanceNodeTiming extends PerformanceEntry {\\n        /**\\n         * The high resolution millisecond timestamp at which the Node.js process\\n         * completed bootstrapping. If bootstrapping has not yet finished, the property\\n         * has the value of -1.\\n         * @since v8.5.0\\n         */\\n        readonly bootstrapComplete: number;\\n        /**\\n         * The high resolution millisecond timestamp at which the Node.js environment was\\n         * initialized.\\n         * @since v8.5.0\\n         */\\n        readonly environment: number;\\n        /**\\n         * The high resolution millisecond timestamp of the amount of time the event loop\\n         * has been idle within the event loop's event provider (e.g. `epoll_wait`). This\\n         * does not take CPU usage into consideration. If the event loop has not yet\\n         * started (e.g., in the first tick of the main script), the property has the\\n         * value of 0.\\n         * @since v14.10.0, v12.19.0\\n         */\\n        readonly idleTime: number;\\n        /**\\n         * The high resolution millisecond timestamp at which the Node.js event loop\\n         * exited. If the event loop has not yet exited, the property has the value of -1\\\\.\\n         * It can only have a value of not -1 in a handler of the `'exit'` event.\\n         * @since v8.5.0\\n         */\\n        readonly loopExit: number;\\n        /**\\n         * The high resolution millisecond timestamp at which the Node.js event loop\\n         * started. If the event loop has not yet started (e.g., in the first tick of the\\n         * main script), the property has the value of -1.\\n         * @since v8.5.0\\n         */\\n        readonly loopStart: number;\\n        /**\\n         * The high resolution millisecond timestamp at which the V8 platform was\\n         * initialized.\\n         * @since v8.5.0\\n         */\\n        readonly v8Start: number;\\n    }\\n    interface EventLoopUtilization {\\n        idle: number;\\n        active: number;\\n        utilization: number;\\n    }\\n    /**\\n     * @param util1 The result of a previous call to eventLoopUtilization()\\n     * @param util2 The result of a previous call to eventLoopUtilization() prior to util1\\n     */\\n    type EventLoopUtilityFunction = (util1?: EventLoopUtilization, util2?: EventLoopUtilization) => EventLoopUtilization;\\n    interface MarkOptions {\\n        /**\\n         * Additional optional detail to include with the mark.\\n         */\\n        detail?: unknown | undefined;\\n        /**\\n         * An optional timestamp to be used as the mark time.\\n         * @default `performance.now()`.\\n         */\\n        startTime?: number | undefined;\\n    }\\n    interface MeasureOptions {\\n        /**\\n         * Additional optional detail to include with the mark.\\n         */\\n        detail?: unknown | undefined;\\n        /**\\n         * Duration between start and end times.\\n         */\\n        duration?: number | undefined;\\n        /**\\n         * Timestamp to be used as the end time, or a string identifying a previously recorded mark.\\n         */\\n        end?: number | string | undefined;\\n        /**\\n         * Timestamp to be used as the start time, or a string identifying a previously recorded mark.\\n         */\\n        start?: number | string | undefined;\\n    }\\n    interface TimerifyOptions {\\n        /**\\n         * A histogram object created using\\n         * `perf_hooks.createHistogram()` that will record runtime durations in\\n         * nanoseconds.\\n         */\\n        histogram?: RecordableHistogram | undefined;\\n    }\\n    interface Performance {\\n        /**\\n         * If name is not provided, removes all PerformanceMark objects from the Performance Timeline.\\n         * If name is provided, removes only the named mark.\\n         * @param name\\n         */\\n        clearMarks(name?: string): void;\\n        /**\\n         * If name is not provided, removes all PerformanceMeasure objects from the Performance Timeline.\\n         * If name is provided, removes only the named measure.\\n         * @param name\\n         * @since v16.7.0\\n         */\\n        clearMeasures(name?: string): void;\\n        /**\\n         * Returns a list of `PerformanceEntry` objects in chronological order with respect to `performanceEntry.startTime`.\\n         * If you are only interested in performance entries of certain types or that have certain names, see\\n         * `performance.getEntriesByType()` and `performance.getEntriesByName()`.\\n         * @since v16.7.0\\n         */\\n        getEntries(): PerformanceEntry[];\\n        /**\\n         * Returns a list of `PerformanceEntry` objects in chronological order with respect to `performanceEntry.startTime`\\n         * whose `performanceEntry.name` is equal to `name`, and optionally, whose `performanceEntry.entryType` is equal to `type`.\\n         * @param name\\n         * @param type\\n         * @since v16.7.0\\n         */\\n        getEntriesByName(name: string, type?: EntryType): PerformanceEntry[];\\n        /**\\n         * Returns a list of `PerformanceEntry` objects in chronological order with respect to `performanceEntry.startTime`\\n         * whose `performanceEntry.entryType` is equal to `type`.\\n         * @param type\\n         * @since v16.7.0\\n         */\\n        getEntriesByType(type: EntryType): PerformanceEntry[];\\n        /**\\n         * Creates a new PerformanceMark entry in the Performance Timeline.\\n         * A PerformanceMark is a subclass of PerformanceEntry whose performanceEntry.entryType is always 'mark',\\n         * and whose performanceEntry.duration is always 0.\\n         * Performance marks are used to mark specific significant moments in the Performance Timeline.\\n         * @param name\\n         * @return The PerformanceMark entry that was created\\n         */\\n        mark(name?: string, options?: MarkOptions): PerformanceMark;\\n        /**\\n         * Creates a new PerformanceMeasure entry in the Performance Timeline.\\n         * A PerformanceMeasure is a subclass of PerformanceEntry whose performanceEntry.entryType is always 'measure',\\n         * and whose performanceEntry.duration measures the number of milliseconds elapsed since startMark and endMark.\\n         *\\n         * The startMark argument may identify any existing PerformanceMark in the the Performance Timeline, or may identify\\n         * any of the timestamp properties provided by the PerformanceNodeTiming class. If the named startMark does not exist,\\n         * then startMark is set to timeOrigin by default.\\n         *\\n         * The endMark argument must identify any existing PerformanceMark in the the Performance Timeline or any of the timestamp\\n         * properties provided by the PerformanceNodeTiming class. If the named endMark does not exist, an error will be thrown.\\n         * @param name\\n         * @param startMark\\n         * @param endMark\\n         * @return The PerformanceMeasure entry that was created\\n         */\\n        measure(name: string, startMark?: string, endMark?: string): PerformanceMeasure;\\n        measure(name: string, options: MeasureOptions): PerformanceMeasure;\\n        /**\\n         * An instance of the PerformanceNodeTiming class that provides performance metrics for specific Node.js operational milestones.\\n         */\\n        readonly nodeTiming: PerformanceNodeTiming;\\n        /**\\n         * @return the current high resolution millisecond timestamp\\n         */\\n        now(): number;\\n        /**\\n         * The timeOrigin specifies the high resolution millisecond timestamp from which all performance metric durations are measured.\\n         */\\n        readonly timeOrigin: number;\\n        /**\\n         * Wraps a function within a new function that measures the running time of the wrapped function.\\n         * A PerformanceObserver must be subscribed to the 'function' event type in order for the timing details to be accessed.\\n         * @param fn\\n         */\\n        timerify<T extends (...params: any[]) => any>(fn: T, options?: TimerifyOptions): T;\\n        /**\\n         * eventLoopUtilization is similar to CPU utilization except that it is calculated using high precision wall-clock time.\\n         * It represents the percentage of time the event loop has spent outside the event loop's event provider (e.g. epoll_wait).\\n         * No other CPU idle time is taken into consideration.\\n         */\\n        eventLoopUtilization: EventLoopUtilityFunction;\\n    }\\n    interface PerformanceObserverEntryList {\\n        /**\\n         * Returns a list of `PerformanceEntry` objects in chronological order\\n         * with respect to `performanceEntry.startTime`.\\n         *\\n         * ```js\\n         * const {\\n         *   performance,\\n         *   PerformanceObserver\\n         * } = require('perf_hooks');\\n         *\\n         * const obs = new PerformanceObserver((perfObserverList, observer) => {\\n         *   console.log(perfObserverList.getEntries());\\n         *\\n         *    * [\\n         *    *   PerformanceEntry {\\n         *    *     name: 'test',\\n         *    *     entryType: 'mark',\\n         *    *     startTime: 81.465639,\\n         *    *     duration: 0\\n         *    *   },\\n         *    *   PerformanceEntry {\\n         *    *     name: 'meow',\\n         *    *     entryType: 'mark',\\n         *    *     startTime: 81.860064,\\n         *    *     duration: 0\\n         *    *   }\\n         *    * ]\\n         *\\n         *\\n         *   performance.clearMarks();\\n         *   performance.clearMeasures();\\n         *   observer.disconnect();\\n         * });\\n         * obs.observe({ type: 'mark' });\\n         *\\n         * performance.mark('test');\\n         * performance.mark('meow');\\n         * ```\\n         * @since v8.5.0\\n         */\\n        getEntries(): PerformanceEntry[];\\n        /**\\n         * Returns a list of `PerformanceEntry` objects in chronological order\\n         * with respect to `performanceEntry.startTime` whose `performanceEntry.name` is\\n         * equal to `name`, and optionally, whose `performanceEntry.entryType` is equal to`type`.\\n         *\\n         * ```js\\n         * const {\\n         *   performance,\\n         *   PerformanceObserver\\n         * } = require('perf_hooks');\\n         *\\n         * const obs = new PerformanceObserver((perfObserverList, observer) => {\\n         *   console.log(perfObserverList.getEntriesByName('meow'));\\n         *\\n         *    * [\\n         *    *   PerformanceEntry {\\n         *    *     name: 'meow',\\n         *    *     entryType: 'mark',\\n         *    *     startTime: 98.545991,\\n         *    *     duration: 0\\n         *    *   }\\n         *    * ]\\n         *\\n         *   console.log(perfObserverList.getEntriesByName('nope')); // []\\n         *\\n         *   console.log(perfObserverList.getEntriesByName('test', 'mark'));\\n         *\\n         *    * [\\n         *    *   PerformanceEntry {\\n         *    *     name: 'test',\\n         *    *     entryType: 'mark',\\n         *    *     startTime: 63.518931,\\n         *    *     duration: 0\\n         *    *   }\\n         *    * ]\\n         *\\n         *   console.log(perfObserverList.getEntriesByName('test', 'measure')); // []\\n         *\\n         *   performance.clearMarks();\\n         *   performance.clearMeasures();\\n         *   observer.disconnect();\\n         * });\\n         * obs.observe({ entryTypes: ['mark', 'measure'] });\\n         *\\n         * performance.mark('test');\\n         * performance.mark('meow');\\n         * ```\\n         * @since v8.5.0\\n         */\\n        getEntriesByName(name: string, type?: EntryType): PerformanceEntry[];\\n        /**\\n         * Returns a list of `PerformanceEntry` objects in chronological order\\n         * with respect to `performanceEntry.startTime` whose `performanceEntry.entryType`is equal to `type`.\\n         *\\n         * ```js\\n         * const {\\n         *   performance,\\n         *   PerformanceObserver\\n         * } = require('perf_hooks');\\n         *\\n         * const obs = new PerformanceObserver((perfObserverList, observer) => {\\n         *   console.log(perfObserverList.getEntriesByType('mark'));\\n         *\\n         *    * [\\n         *    *   PerformanceEntry {\\n         *    *     name: 'test',\\n         *    *     entryType: 'mark',\\n         *    *     startTime: 55.897834,\\n         *    *     duration: 0\\n         *    *   },\\n         *    *   PerformanceEntry {\\n         *    *     name: 'meow',\\n         *    *     entryType: 'mark',\\n         *    *     startTime: 56.350146,\\n         *    *     duration: 0\\n         *    *   }\\n         *    * ]\\n         *\\n         *   performance.clearMarks();\\n         *   performance.clearMeasures();\\n         *   observer.disconnect();\\n         * });\\n         * obs.observe({ type: 'mark' });\\n         *\\n         * performance.mark('test');\\n         * performance.mark('meow');\\n         * ```\\n         * @since v8.5.0\\n         */\\n        getEntriesByType(type: EntryType): PerformanceEntry[];\\n    }\\n    type PerformanceObserverCallback = (list: PerformanceObserverEntryList, observer: PerformanceObserver) => void;\\n    class PerformanceObserver extends AsyncResource {\\n        constructor(callback: PerformanceObserverCallback);\\n        /**\\n         * Disconnects the `PerformanceObserver` instance from all notifications.\\n         * @since v8.5.0\\n         */\\n        disconnect(): void;\\n        /**\\n         * Subscribes the `PerformanceObserver` instance to notifications of new `PerformanceEntry` instances identified either by `options.entryTypes`or `options.type`:\\n         *\\n         * ```js\\n         * const {\\n         *   performance,\\n         *   PerformanceObserver\\n         * } = require('perf_hooks');\\n         *\\n         * const obs = new PerformanceObserver((list, observer) => {\\n         *   // Called once asynchronously. `list` contains three items.\\n         * });\\n         * obs.observe({ type: 'mark' });\\n         *\\n         * for (let n = 0; n < 3; n++)\\n         *   performance.mark(`test${n}`);\\n         * ```\\n         * @since v8.5.0\\n         */\\n        observe(\\n            options:\\n                | {\\n                      entryTypes: ReadonlyArray<EntryType>;\\n                      buffered?: boolean | undefined;\\n                  }\\n                | {\\n                      type: EntryType;\\n                      buffered?: boolean | undefined;\\n                  }\\n        ): void;\\n    }\\n    namespace constants {\\n        const NODE_PERFORMANCE_GC_MAJOR: number;\\n        const NODE_PERFORMANCE_GC_MINOR: number;\\n        const NODE_PERFORMANCE_GC_INCREMENTAL: number;\\n        const NODE_PERFORMANCE_GC_WEAKCB: number;\\n        const NODE_PERFORMANCE_GC_FLAGS_NO: number;\\n        const NODE_PERFORMANCE_GC_FLAGS_CONSTRUCT_RETAINED: number;\\n        const NODE_PERFORMANCE_GC_FLAGS_FORCED: number;\\n        const NODE_PERFORMANCE_GC_FLAGS_SYNCHRONOUS_PHANTOM_PROCESSING: number;\\n        const NODE_PERFORMANCE_GC_FLAGS_ALL_AVAILABLE_GARBAGE: number;\\n        const NODE_PERFORMANCE_GC_FLAGS_ALL_EXTERNAL_MEMORY: number;\\n        const NODE_PERFORMANCE_GC_FLAGS_SCHEDULE_IDLE: number;\\n    }\\n    const performance: Performance;\\n    interface EventLoopMonitorOptions {\\n        /**\\n         * The sampling rate in milliseconds.\\n         * Must be greater than zero.\\n         * @default 10\\n         */\\n        resolution?: number | undefined;\\n    }\\n    interface Histogram {\\n        /**\\n         * Returns a `Map` object detailing the accumulated percentile distribution.\\n         * @since v11.10.0\\n         */\\n        readonly percentiles: Map<number, number>;\\n        /**\\n         * The number of times the event loop delay exceeded the maximum 1 hour event\\n         * loop delay threshold.\\n         * @since v11.10.0\\n         */\\n        readonly exceeds: number;\\n        /**\\n         * The minimum recorded event loop delay.\\n         * @since v11.10.0\\n         */\\n        readonly min: number;\\n        /**\\n         * The maximum recorded event loop delay.\\n         * @since v11.10.0\\n         */\\n        readonly max: number;\\n        /**\\n         * The mean of the recorded event loop delays.\\n         * @since v11.10.0\\n         */\\n        readonly mean: number;\\n        /**\\n         * The standard deviation of the recorded event loop delays.\\n         * @since v11.10.0\\n         */\\n        readonly stddev: number;\\n        /**\\n         * Resets the collected histogram data.\\n         * @since v11.10.0\\n         */\\n        reset(): void;\\n        /**\\n         * Returns the value at the given percentile.\\n         * @since v11.10.0\\n         * @param percentile A percentile value in the range (0, 100].\\n         */\\n        percentile(percentile: number): number;\\n    }\\n    interface IntervalHistogram extends Histogram {\\n        /**\\n         * Enables the update interval timer. Returns `true` if the timer was\\n         * started, `false` if it was already started.\\n         * @since v11.10.0\\n         */\\n        enable(): boolean;\\n        /**\\n         * Disables the update interval timer. Returns `true` if the timer was\\n         * stopped, `false` if it was already stopped.\\n         * @since v11.10.0\\n         */\\n        disable(): boolean;\\n    }\\n    interface RecordableHistogram extends Histogram {\\n        /**\\n         * @since v15.9.0, v14.18.0\\n         * @param val The amount to record in the histogram.\\n         */\\n        record(val: number | bigint): void;\\n        /**\\n         * Calculates the amount of time (in nanoseconds) that has passed since the\\n         * previous call to `recordDelta()` and records that amount in the histogram.\\n         *\\n         * ## Examples\\n         * @since v15.9.0, v14.18.0\\n         */\\n        recordDelta(): void;\\n        /**\\n         * Adds the values from other to this histogram.\\n         * @since v17.4.0, v16.14.0\\n         * @param other Recordable Histogram to combine with\\n         */\\n         add(other: RecordableHistogram): void;\\n    }\\n    /**\\n     * _This property is an extension by Node.js. It is not available in Web browsers._\\n     *\\n     * Creates an `IntervalHistogram` object that samples and reports the event loop\\n     * delay over time. The delays will be reported in nanoseconds.\\n     *\\n     * Using a timer to detect approximate event loop delay works because the\\n     * execution of timers is tied specifically to the lifecycle of the libuv\\n     * event loop. That is, a delay in the loop will cause a delay in the execution\\n     * of the timer, and those delays are specifically what this API is intended to\\n     * detect.\\n     *\\n     * ```js\\n     * const { monitorEventLoopDelay } = require('perf_hooks');\\n     * const h = monitorEventLoopDelay({ resolution: 20 });\\n     * h.enable();\\n     * // Do something.\\n     * h.disable();\\n     * console.log(h.min);\\n     * console.log(h.max);\\n     * console.log(h.mean);\\n     * console.log(h.stddev);\\n     * console.log(h.percentiles);\\n     * console.log(h.percentile(50));\\n     * console.log(h.percentile(99));\\n     * ```\\n     * @since v11.10.0\\n     */\\n    function monitorEventLoopDelay(options?: EventLoopMonitorOptions): IntervalHistogram;\\n    interface CreateHistogramOptions {\\n        /**\\n         * The minimum recordable value. Must be an integer value greater than 0.\\n         * @default 1\\n         */\\n        min?: number | bigint | undefined;\\n        /**\\n         * The maximum recordable value. Must be an integer value greater than min.\\n         * @default Number.MAX_SAFE_INTEGER\\n         */\\n        max?: number | bigint | undefined;\\n        /**\\n         * The number of accuracy digits. Must be a number between 1 and 5.\\n         * @default 3\\n         */\\n        figures?: number | undefined;\\n    }\\n    /**\\n     * Returns a `RecordableHistogram`.\\n     * @since v15.9.0, v14.18.0\\n     */\\n    function createHistogram(options?: CreateHistogramOptions): RecordableHistogram;\\n\\n    import { performance as _performance } from 'perf_hooks';\\n    global {\\n        /**\\n         * `performance` is a global reference for `require('perf_hooks').performance`\\n         * https://nodejs.org/api/globals.html#performance\\n         * @since v16.0.0\\n         */\\n        var performance: typeof globalThis extends {\\n            onmessage: any;\\n            performance: infer T;\\n        }\\n            ? T\\n            : typeof _performance;\\n    }\\n}\\ndeclare module 'node:perf_hooks' {\\n    export * from 'perf_hooks';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/process.d.ts\":\"declare module 'process' {\\n    import * as tty from 'node:tty';\\n    import { Worker } from 'node:worker_threads';\\n    global {\\n        var process: NodeJS.Process;\\n        namespace NodeJS {\\n            // this namespace merge is here because these are specifically used\\n            // as the type for process.stdin, process.stdout, and process.stderr.\\n            // they can't live in tty.d.ts because we need to disambiguate the imported name.\\n            interface ReadStream extends tty.ReadStream {}\\n            interface WriteStream extends tty.WriteStream {}\\n            interface MemoryUsageFn {\\n                /**\\n                 * The `process.memoryUsage()` method iterate over each page to gather informations about memory\\n                 * usage which can be slow depending on the program memory allocations.\\n                 */\\n                (): MemoryUsage;\\n                /**\\n                 * method returns an integer representing the Resident Set Size (RSS) in bytes.\\n                 */\\n                rss(): number;\\n            }\\n            interface MemoryUsage {\\n                rss: number;\\n                heapTotal: number;\\n                heapUsed: number;\\n                external: number;\\n                arrayBuffers: number;\\n            }\\n            interface CpuUsage {\\n                user: number;\\n                system: number;\\n            }\\n            interface ProcessRelease {\\n                name: string;\\n                sourceUrl?: string | undefined;\\n                headersUrl?: string | undefined;\\n                libUrl?: string | undefined;\\n                lts?: string | undefined;\\n            }\\n            interface ProcessVersions extends Dict<string> {\\n                http_parser: string;\\n                node: string;\\n                v8: string;\\n                ares: string;\\n                uv: string;\\n                zlib: string;\\n                modules: string;\\n                openssl: string;\\n            }\\n            type Platform = 'aix' | 'android' | 'darwin' | 'freebsd' | 'haiku' | 'linux' | 'openbsd' | 'sunos' | 'win32' | 'cygwin' | 'netbsd';\\n            type Architecture = 'arm' | 'arm64' | 'ia32' | 'mips' | 'mipsel' | 'ppc' | 'ppc64' | 's390' | 's390x' | 'x64';\\n            type Signals =\\n                | 'SIGABRT'\\n                | 'SIGALRM'\\n                | 'SIGBUS'\\n                | 'SIGCHLD'\\n                | 'SIGCONT'\\n                | 'SIGFPE'\\n                | 'SIGHUP'\\n                | 'SIGILL'\\n                | 'SIGINT'\\n                | 'SIGIO'\\n                | 'SIGIOT'\\n                | 'SIGKILL'\\n                | 'SIGPIPE'\\n                | 'SIGPOLL'\\n                | 'SIGPROF'\\n                | 'SIGPWR'\\n                | 'SIGQUIT'\\n                | 'SIGSEGV'\\n                | 'SIGSTKFLT'\\n                | 'SIGSTOP'\\n                | 'SIGSYS'\\n                | 'SIGTERM'\\n                | 'SIGTRAP'\\n                | 'SIGTSTP'\\n                | 'SIGTTIN'\\n                | 'SIGTTOU'\\n                | 'SIGUNUSED'\\n                | 'SIGURG'\\n                | 'SIGUSR1'\\n                | 'SIGUSR2'\\n                | 'SIGVTALRM'\\n                | 'SIGWINCH'\\n                | 'SIGXCPU'\\n                | 'SIGXFSZ'\\n                | 'SIGBREAK'\\n                | 'SIGLOST'\\n                | 'SIGINFO';\\n            type UncaughtExceptionOrigin = 'uncaughtException' | 'unhandledRejection';\\n            type MultipleResolveType = 'resolve' | 'reject';\\n            type BeforeExitListener = (code: number) => void;\\n            type DisconnectListener = () => void;\\n            type ExitListener = (code: number) => void;\\n            type RejectionHandledListener = (promise: Promise<unknown>) => void;\\n            type UncaughtExceptionListener = (error: Error, origin: UncaughtExceptionOrigin) => void;\\n            /**\\n             * Most of the time the unhandledRejection will be an Error, but this should not be relied upon\\n             * as *anything* can be thrown/rejected, it is therefore unsafe to assume that the value is an Error.\\n             */\\n            type UnhandledRejectionListener = (reason: unknown, promise: Promise<unknown>) => void;\\n            type WarningListener = (warning: Error) => void;\\n            type MessageListener = (message: unknown, sendHandle: unknown) => void;\\n            type SignalsListener = (signal: Signals) => void;\\n            type MultipleResolveListener = (type: MultipleResolveType, promise: Promise<unknown>, value: unknown) => void;\\n            type WorkerListener = (worker: Worker) => void;\\n            interface Socket extends ReadWriteStream {\\n                isTTY?: true | undefined;\\n            }\\n            // Alias for compatibility\\n            interface ProcessEnv extends Dict<string> {\\n                /**\\n                 * Can be used to change the default timezone at runtime\\n                 */\\n                TZ?: string;\\n            }\\n            interface HRTime {\\n                (time?: [number, number]): [number, number];\\n                bigint(): bigint;\\n            }\\n            interface ProcessReport {\\n                /**\\n                 * Directory where the report is written.\\n                 * working directory of the Node.js process.\\n                 * @default '' indicating that reports are written to the current\\n                 */\\n                directory: string;\\n                /**\\n                 * Filename where the report is written.\\n                 * The default value is the empty string.\\n                 * @default '' the output filename will be comprised of a timestamp,\\n                 * PID, and sequence number.\\n                 */\\n                filename: string;\\n                /**\\n                 * Returns a JSON-formatted diagnostic report for the running process.\\n                 * The report's JavaScript stack trace is taken from err, if present.\\n                 */\\n                getReport(err?: Error): string;\\n                /**\\n                 * If true, a diagnostic report is generated on fatal errors,\\n                 * such as out of memory errors or failed C++ assertions.\\n                 * @default false\\n                 */\\n                reportOnFatalError: boolean;\\n                /**\\n                 * If true, a diagnostic report is generated when the process\\n                 * receives the signal specified by process.report.signal.\\n                 * @default false\\n                 */\\n                reportOnSignal: boolean;\\n                /**\\n                 * If true, a diagnostic report is generated on uncaught exception.\\n                 * @default false\\n                 */\\n                reportOnUncaughtException: boolean;\\n                /**\\n                 * The signal used to trigger the creation of a diagnostic report.\\n                 * @default 'SIGUSR2'\\n                 */\\n                signal: Signals;\\n                /**\\n                 * Writes a diagnostic report to a file. If filename is not provided, the default filename\\n                 * includes the date, time, PID, and a sequence number.\\n                 * The report's JavaScript stack trace is taken from err, if present.\\n                 *\\n                 * @param fileName Name of the file where the report is written.\\n                 * This should be a relative path, that will be appended to the directory specified in\\n                 * `process.report.directory`, or the current working directory of the Node.js process,\\n                 * if unspecified.\\n                 * @param error A custom error used for reporting the JavaScript stack.\\n                 * @return Filename of the generated report.\\n                 */\\n                writeReport(fileName?: string): string;\\n                writeReport(error?: Error): string;\\n                writeReport(fileName?: string, err?: Error): string;\\n            }\\n            interface ResourceUsage {\\n                fsRead: number;\\n                fsWrite: number;\\n                involuntaryContextSwitches: number;\\n                ipcReceived: number;\\n                ipcSent: number;\\n                majorPageFault: number;\\n                maxRSS: number;\\n                minorPageFault: number;\\n                sharedMemorySize: number;\\n                signalsCount: number;\\n                swappedOut: number;\\n                systemCPUTime: number;\\n                unsharedDataSize: number;\\n                unsharedStackSize: number;\\n                userCPUTime: number;\\n                voluntaryContextSwitches: number;\\n            }\\n            interface EmitWarningOptions {\\n                /**\\n                 * When `warning` is a `string`, `type` is the name to use for the _type_ of warning being emitted.\\n                 *\\n                 * @default 'Warning'\\n                 */\\n                type?: string | undefined;\\n                /**\\n                 * A unique identifier for the warning instance being emitted.\\n                 */\\n                code?: string | undefined;\\n                /**\\n                 * When `warning` is a `string`, `ctor` is an optional function used to limit the generated stack trace.\\n                 *\\n                 * @default process.emitWarning\\n                 */\\n                ctor?: Function | undefined;\\n                /**\\n                 * Additional text to include with the error.\\n                 */\\n                detail?: string | undefined;\\n            }\\n            interface ProcessConfig {\\n                readonly target_defaults: {\\n                    readonly cflags: any[];\\n                    readonly default_configuration: string;\\n                    readonly defines: string[];\\n                    readonly include_dirs: string[];\\n                    readonly libraries: string[];\\n                };\\n                readonly variables: {\\n                    readonly clang: number;\\n                    readonly host_arch: string;\\n                    readonly node_install_npm: boolean;\\n                    readonly node_install_waf: boolean;\\n                    readonly node_prefix: string;\\n                    readonly node_shared_openssl: boolean;\\n                    readonly node_shared_v8: boolean;\\n                    readonly node_shared_zlib: boolean;\\n                    readonly node_use_dtrace: boolean;\\n                    readonly node_use_etw: boolean;\\n                    readonly node_use_openssl: boolean;\\n                    readonly target_arch: string;\\n                    readonly v8_no_strict_aliasing: number;\\n                    readonly v8_use_snapshot: boolean;\\n                    readonly visibility: string;\\n                };\\n            }\\n            interface Process extends EventEmitter {\\n                /**\\n                 * The `process.stdout` property returns a stream connected to`stdout` (fd `1`). It is a `net.Socket` (which is a `Duplex` stream) unless fd `1` refers to a file, in which case it is\\n                 * a `Writable` stream.\\n                 *\\n                 * For example, to copy `process.stdin` to `process.stdout`:\\n                 *\\n                 * ```js\\n                 * import { stdin, stdout } from 'process';\\n                 *\\n                 * stdin.pipe(stdout);\\n                 * ```\\n                 *\\n                 * `process.stdout` differs from other Node.js streams in important ways. See `note on process I/O` for more information.\\n                 */\\n                stdout: WriteStream & {\\n                    fd: 1;\\n                };\\n                /**\\n                 * The `process.stderr` property returns a stream connected to`stderr` (fd `2`). It is a `net.Socket` (which is a `Duplex` stream) unless fd `2` refers to a file, in which case it is\\n                 * a `Writable` stream.\\n                 *\\n                 * `process.stderr` differs from other Node.js streams in important ways. See `note on process I/O` for more information.\\n                 */\\n                stderr: WriteStream & {\\n                    fd: 2;\\n                };\\n                /**\\n                 * The `process.stdin` property returns a stream connected to`stdin` (fd `0`). It is a `net.Socket` (which is a `Duplex` stream) unless fd `0` refers to a file, in which case it is\\n                 * a `Readable` stream.\\n                 *\\n                 * For details of how to read from `stdin` see `readable.read()`.\\n                 *\\n                 * As a `Duplex` stream, `process.stdin` can also be used in \\\"old\\\" mode that\\n                 * is compatible with scripts written for Node.js prior to v0.10\\\\.\\n                 * For more information see `Stream compatibility`.\\n                 *\\n                 * In \\\"old\\\" streams mode the `stdin` stream is paused by default, so one\\n                 * must call `process.stdin.resume()` to read from it. Note also that calling`process.stdin.resume()` itself would switch stream to \\\"old\\\" mode.\\n                 */\\n                stdin: ReadStream & {\\n                    fd: 0;\\n                };\\n                openStdin(): Socket;\\n                /**\\n                 * The `process.argv` property returns an array containing the command-line\\n                 * arguments passed when the Node.js process was launched. The first element will\\n                 * be {@link execPath}. See `process.argv0` if access to the original value\\n                 * of `argv[0]` is needed. The second element will be the path to the JavaScript\\n                 * file being executed. The remaining elements will be any additional command-line\\n                 * arguments.\\n                 *\\n                 * For example, assuming the following script for `process-args.js`:\\n                 *\\n                 * ```js\\n                 * import { argv } from 'process';\\n                 *\\n                 * // print process.argv\\n                 * argv.forEach((val, index) => {\\n                 *   console.log(`${index}: ${val}`);\\n                 * });\\n                 * ```\\n                 *\\n                 * Launching the Node.js process as:\\n                 *\\n                 * ```console\\n                 * $ node process-args.js one two=three four\\n                 * ```\\n                 *\\n                 * Would generate the output:\\n                 *\\n                 * ```text\\n                 * 0: /usr/local/bin/node\\n                 * 1: /Users/mjr/work/node/process-args.js\\n                 * 2: one\\n                 * 3: two=three\\n                 * 4: four\\n                 * ```\\n                 * @since v0.1.27\\n                 */\\n                argv: string[];\\n                /**\\n                 * The `process.argv0` property stores a read-only copy of the original value of`argv[0]` passed when Node.js starts.\\n                 *\\n                 * ```console\\n                 * $ bash -c 'exec -a customArgv0 ./node'\\n                 * > process.argv[0]\\n                 * '/Volumes/code/external/node/out/Release/node'\\n                 * > process.argv0\\n                 * 'customArgv0'\\n                 * ```\\n                 * @since v6.4.0\\n                 */\\n                argv0: string;\\n                /**\\n                 * The `process.execArgv` property returns the set of Node.js-specific command-line\\n                 * options passed when the Node.js process was launched. These options do not\\n                 * appear in the array returned by the {@link argv} property, and do not\\n                 * include the Node.js executable, the name of the script, or any options following\\n                 * the script name. These options are useful in order to spawn child processes with\\n                 * the same execution environment as the parent.\\n                 *\\n                 * ```console\\n                 * $ node --harmony script.js --version\\n                 * ```\\n                 *\\n                 * Results in `process.execArgv`:\\n                 *\\n                 * ```js\\n                 * ['--harmony']\\n                 * ```\\n                 *\\n                 * And `process.argv`:\\n                 *\\n                 * ```js\\n                 * ['/usr/local/bin/node', 'script.js', '--version']\\n                 * ```\\n                 *\\n                 * Refer to `Worker constructor` for the detailed behavior of worker\\n                 * threads with this property.\\n                 * @since v0.7.7\\n                 */\\n                execArgv: string[];\\n                /**\\n                 * The `process.execPath` property returns the absolute pathname of the executable\\n                 * that started the Node.js process. Symbolic links, if any, are resolved.\\n                 *\\n                 * ```js\\n                 * '/usr/local/bin/node'\\n                 * ```\\n                 * @since v0.1.100\\n                 */\\n                execPath: string;\\n                /**\\n                 * The `process.abort()` method causes the Node.js process to exit immediately and\\n                 * generate a core file.\\n                 *\\n                 * This feature is not available in `Worker` threads.\\n                 * @since v0.7.0\\n                 */\\n                abort(): never;\\n                /**\\n                 * The `process.chdir()` method changes the current working directory of the\\n                 * Node.js process or throws an exception if doing so fails (for instance, if\\n                 * the specified `directory` does not exist).\\n                 *\\n                 * ```js\\n                 * import { chdir, cwd } from 'process';\\n                 *\\n                 * console.log(`Starting directory: ${cwd()}`);\\n                 * try {\\n                 *   chdir('/tmp');\\n                 *   console.log(`New directory: ${cwd()}`);\\n                 * } catch (err) {\\n                 *   console.error(`chdir: ${err}`);\\n                 * }\\n                 * ```\\n                 *\\n                 * This feature is not available in `Worker` threads.\\n                 * @since v0.1.17\\n                 */\\n                chdir(directory: string): void;\\n                /**\\n                 * The `process.cwd()` method returns the current working directory of the Node.js\\n                 * process.\\n                 *\\n                 * ```js\\n                 * import { cwd } from 'process';\\n                 *\\n                 * console.log(`Current directory: ${cwd()}`);\\n                 * ```\\n                 * @since v0.1.8\\n                 */\\n                cwd(): string;\\n                /**\\n                 * The port used by the Node.js debugger when enabled.\\n                 *\\n                 * ```js\\n                 * import process from 'process';\\n                 *\\n                 * process.debugPort = 5858;\\n                 * ```\\n                 * @since v0.7.2\\n                 */\\n                debugPort: number;\\n                /**\\n                 * The `process.emitWarning()` method can be used to emit custom or application\\n                 * specific process warnings. These can be listened for by adding a handler to the `'warning'` event.\\n                 *\\n                 * ```js\\n                 * import { emitWarning } from 'process';\\n                 *\\n                 * // Emit a warning with a code and additional detail.\\n                 * emitWarning('Something happened!', {\\n                 *   code: 'MY_WARNING',\\n                 *   detail: 'This is some additional information'\\n                 * });\\n                 * // Emits:\\n                 * // (node:56338) [MY_WARNING] Warning: Something happened!\\n                 * // This is some additional information\\n                 * ```\\n                 *\\n                 * In this example, an `Error` object is generated internally by`process.emitWarning()` and passed through to the `'warning'` handler.\\n                 *\\n                 * ```js\\n                 * import process from 'process';\\n                 *\\n                 * process.on('warning', (warning) => {\\n                 *   console.warn(warning.name);    // 'Warning'\\n                 *   console.warn(warning.message); // 'Something happened!'\\n                 *   console.warn(warning.code);    // 'MY_WARNING'\\n                 *   console.warn(warning.stack);   // Stack trace\\n                 *   console.warn(warning.detail);  // 'This is some additional information'\\n                 * });\\n                 * ```\\n                 *\\n                 * If `warning` is passed as an `Error` object, the `options` argument is ignored.\\n                 * @since v8.0.0\\n                 * @param warning The warning to emit.\\n                 */\\n                emitWarning(warning: string | Error, ctor?: Function): void;\\n                emitWarning(warning: string | Error, type?: string, ctor?: Function): void;\\n                emitWarning(warning: string | Error, type?: string, code?: string, ctor?: Function): void;\\n                emitWarning(warning: string | Error, options?: EmitWarningOptions): void;\\n                /**\\n                 * The `process.env` property returns an object containing the user environment.\\n                 * See [`environ(7)`](http://man7.org/linux/man-pages/man7/environ.7.html).\\n                 *\\n                 * An example of this object looks like:\\n                 *\\n                 * ```js\\n                 * {\\n                 *   TERM: 'xterm-256color',\\n                 *   SHELL: '/usr/local/bin/bash',\\n                 *   USER: 'maciej',\\n                 *   PATH: '~/.bin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin',\\n                 *   PWD: '/Users/maciej',\\n                 *   EDITOR: 'vim',\\n                 *   SHLVL: '1',\\n                 *   HOME: '/Users/maciej',\\n                 *   LOGNAME: 'maciej',\\n                 *   _: '/usr/local/bin/node'\\n                 * }\\n                 * ```\\n                 *\\n                 * It is possible to modify this object, but such modifications will not be\\n                 * reflected outside the Node.js process, or (unless explicitly requested)\\n                 * to other `Worker` threads.\\n                 * In other words, the following example would not work:\\n                 *\\n                 * ```console\\n                 * $ node -e 'process.env.foo = \\\"bar\\\"' &#x26;&#x26; echo $foo\\n                 * ```\\n                 *\\n                 * While the following will:\\n                 *\\n                 * ```js\\n                 * import { env } from 'process';\\n                 *\\n                 * env.foo = 'bar';\\n                 * console.log(env.foo);\\n                 * ```\\n                 *\\n                 * Assigning a property on `process.env` will implicitly convert the value\\n                 * to a string. **This behavior is deprecated.** Future versions of Node.js may\\n                 * throw an error when the value is not a string, number, or boolean.\\n                 *\\n                 * ```js\\n                 * import { env } from 'process';\\n                 *\\n                 * env.test = null;\\n                 * console.log(env.test);\\n                 * // => 'null'\\n                 * env.test = undefined;\\n                 * console.log(env.test);\\n                 * // => 'undefined'\\n                 * ```\\n                 *\\n                 * Use `delete` to delete a property from `process.env`.\\n                 *\\n                 * ```js\\n                 * import { env } from 'process';\\n                 *\\n                 * env.TEST = 1;\\n                 * delete env.TEST;\\n                 * console.log(env.TEST);\\n                 * // => undefined\\n                 * ```\\n                 *\\n                 * On Windows operating systems, environment variables are case-insensitive.\\n                 *\\n                 * ```js\\n                 * import { env } from 'process';\\n                 *\\n                 * env.TEST = 1;\\n                 * console.log(env.test);\\n                 * // => 1\\n                 * ```\\n                 *\\n                 * Unless explicitly specified when creating a `Worker` instance,\\n                 * each `Worker` thread has its own copy of `process.env`, based on its\\n                 * parent thread\u2019s `process.env`, or whatever was specified as the `env` option\\n                 * to the `Worker` constructor. Changes to `process.env` will not be visible\\n                 * across `Worker` threads, and only the main thread can make changes that\\n                 * are visible to the operating system or to native add-ons.\\n                 * @since v0.1.27\\n                 */\\n                env: ProcessEnv;\\n                /**\\n                 * The `process.exit()` method instructs Node.js to terminate the process\\n                 * synchronously with an exit status of `code`. If `code` is omitted, exit uses\\n                 * either the 'success' code `0` or the value of `process.exitCode` if it has been\\n                 * set. Node.js will not terminate until all the `'exit'` event listeners are\\n                 * called.\\n                 *\\n                 * To exit with a 'failure' code:\\n                 *\\n                 * ```js\\n                 * import { exit } from 'process';\\n                 *\\n                 * exit(1);\\n                 * ```\\n                 *\\n                 * The shell that executed Node.js should see the exit code as `1`.\\n                 *\\n                 * Calling `process.exit()` will force the process to exit as quickly as possible\\n                 * even if there are still asynchronous operations pending that have not yet\\n                 * completed fully, including I/O operations to `process.stdout` and`process.stderr`.\\n                 *\\n                 * In most situations, it is not actually necessary to call `process.exit()`explicitly. The Node.js process will exit on its own _if there is no additional_\\n                 * _work pending_ in the event loop. The `process.exitCode` property can be set to\\n                 * tell the process which exit code to use when the process exits gracefully.\\n                 *\\n                 * For instance, the following example illustrates a _misuse_ of the`process.exit()` method that could lead to data printed to stdout being\\n                 * truncated and lost:\\n                 *\\n                 * ```js\\n                 * import { exit } from 'process';\\n                 *\\n                 * // This is an example of what *not* to do:\\n                 * if (someConditionNotMet()) {\\n                 *   printUsageToStdout();\\n                 *   exit(1);\\n                 * }\\n                 * ```\\n                 *\\n                 * The reason this is problematic is because writes to `process.stdout` in Node.js\\n                 * are sometimes _asynchronous_ and may occur over multiple ticks of the Node.js\\n                 * event loop. Calling `process.exit()`, however, forces the process to exit _before_ those additional writes to `stdout` can be performed.\\n                 *\\n                 * Rather than calling `process.exit()` directly, the code _should_ set the`process.exitCode` and allow the process to exit naturally by avoiding\\n                 * scheduling any additional work for the event loop:\\n                 *\\n                 * ```js\\n                 * import process from 'process';\\n                 *\\n                 * // How to properly set the exit code while letting\\n                 * // the process exit gracefully.\\n                 * if (someConditionNotMet()) {\\n                 *   printUsageToStdout();\\n                 *   process.exitCode = 1;\\n                 * }\\n                 * ```\\n                 *\\n                 * If it is necessary to terminate the Node.js process due to an error condition,\\n                 * throwing an _uncaught_ error and allowing the process to terminate accordingly\\n                 * is safer than calling `process.exit()`.\\n                 *\\n                 * In `Worker` threads, this function stops the current thread rather\\n                 * than the current process.\\n                 * @since v0.1.13\\n                 * @param [code=0] The exit code.\\n                 */\\n                exit(code?: number): never;\\n                /**\\n                 * A number which will be the process exit code, when the process either\\n                 * exits gracefully, or is exited via {@link exit} without specifying\\n                 * a code.\\n                 *\\n                 * Specifying a code to {@link exit} will override any\\n                 * previous setting of `process.exitCode`.\\n                 * @since v0.11.8\\n                 */\\n                exitCode?: number | undefined;\\n                /**\\n                 * The `process.getgid()` method returns the numerical group identity of the\\n                 * process. (See [`getgid(2)`](http://man7.org/linux/man-pages/man2/getgid.2.html).)\\n                 *\\n                 * ```js\\n                 * import process from 'process';\\n                 *\\n                 * if (process.getgid) {\\n                 *   console.log(`Current gid: ${process.getgid()}`);\\n                 * }\\n                 * ```\\n                 *\\n                 * This function is only available on POSIX platforms (i.e. not Windows or\\n                 * Android).\\n                 * @since v0.1.31\\n                 */\\n                getgid?: () => number;\\n                /**\\n                 * The `process.setgid()` method sets the group identity of the process. (See [`setgid(2)`](http://man7.org/linux/man-pages/man2/setgid.2.html).) The `id` can be passed as either a\\n                 * numeric ID or a group name\\n                 * string. If a group name is specified, this method blocks while resolving the\\n                 * associated numeric ID.\\n                 *\\n                 * ```js\\n                 * import process from 'process';\\n                 *\\n                 * if (process.getgid &#x26;&#x26; process.setgid) {\\n                 *   console.log(`Current gid: ${process.getgid()}`);\\n                 *   try {\\n                 *     process.setgid(501);\\n                 *     console.log(`New gid: ${process.getgid()}`);\\n                 *   } catch (err) {\\n                 *     console.log(`Failed to set gid: ${err}`);\\n                 *   }\\n                 * }\\n                 * ```\\n                 *\\n                 * This function is only available on POSIX platforms (i.e. not Windows or\\n                 * Android).\\n                 * This feature is not available in `Worker` threads.\\n                 * @since v0.1.31\\n                 * @param id The group name or ID\\n                 */\\n                setgid?: (id: number | string) => void;\\n                /**\\n                 * The `process.getuid()` method returns the numeric user identity of the process.\\n                 * (See [`getuid(2)`](http://man7.org/linux/man-pages/man2/getuid.2.html).)\\n                 *\\n                 * ```js\\n                 * import process from 'process';\\n                 *\\n                 * if (process.getuid) {\\n                 *   console.log(`Current uid: ${process.getuid()}`);\\n                 * }\\n                 * ```\\n                 *\\n                 * This function is only available on POSIX platforms (i.e. not Windows or\\n                 * Android).\\n                 * @since v0.1.28\\n                 */\\n                getuid?: () => number;\\n                /**\\n                 * The `process.setuid(id)` method sets the user identity of the process. (See [`setuid(2)`](http://man7.org/linux/man-pages/man2/setuid.2.html).) The `id` can be passed as either a\\n                 * numeric ID or a username string.\\n                 * If a username is specified, the method blocks while resolving the associated\\n                 * numeric ID.\\n                 *\\n                 * ```js\\n                 * import process from 'process';\\n                 *\\n                 * if (process.getuid &#x26;&#x26; process.setuid) {\\n                 *   console.log(`Current uid: ${process.getuid()}`);\\n                 *   try {\\n                 *     process.setuid(501);\\n                 *     console.log(`New uid: ${process.getuid()}`);\\n                 *   } catch (err) {\\n                 *     console.log(`Failed to set uid: ${err}`);\\n                 *   }\\n                 * }\\n                 * ```\\n                 *\\n                 * This function is only available on POSIX platforms (i.e. not Windows or\\n                 * Android).\\n                 * This feature is not available in `Worker` threads.\\n                 * @since v0.1.28\\n                 */\\n                setuid?: (id: number | string) => void;\\n                /**\\n                 * The `process.geteuid()` method returns the numerical effective user identity of\\n                 * the process. (See [`geteuid(2)`](http://man7.org/linux/man-pages/man2/geteuid.2.html).)\\n                 *\\n                 * ```js\\n                 * import process from 'process';\\n                 *\\n                 * if (process.geteuid) {\\n                 *   console.log(`Current uid: ${process.geteuid()}`);\\n                 * }\\n                 * ```\\n                 *\\n                 * This function is only available on POSIX platforms (i.e. not Windows or\\n                 * Android).\\n                 * @since v2.0.0\\n                 */\\n                geteuid?: () => number;\\n                /**\\n                 * The `process.seteuid()` method sets the effective user identity of the process.\\n                 * (See [`seteuid(2)`](http://man7.org/linux/man-pages/man2/seteuid.2.html).) The `id` can be passed as either a numeric ID or a username\\n                 * string. If a username is specified, the method blocks while resolving the\\n                 * associated numeric ID.\\n                 *\\n                 * ```js\\n                 * import process from 'process';\\n                 *\\n                 * if (process.geteuid &#x26;&#x26; process.seteuid) {\\n                 *   console.log(`Current uid: ${process.geteuid()}`);\\n                 *   try {\\n                 *     process.seteuid(501);\\n                 *     console.log(`New uid: ${process.geteuid()}`);\\n                 *   } catch (err) {\\n                 *     console.log(`Failed to set uid: ${err}`);\\n                 *   }\\n                 * }\\n                 * ```\\n                 *\\n                 * This function is only available on POSIX platforms (i.e. not Windows or\\n                 * Android).\\n                 * This feature is not available in `Worker` threads.\\n                 * @since v2.0.0\\n                 * @param id A user name or ID\\n                 */\\n                seteuid?: (id: number | string) => void;\\n                /**\\n                 * The `process.getegid()` method returns the numerical effective group identity\\n                 * of the Node.js process. (See [`getegid(2)`](http://man7.org/linux/man-pages/man2/getegid.2.html).)\\n                 *\\n                 * ```js\\n                 * import process from 'process';\\n                 *\\n                 * if (process.getegid) {\\n                 *   console.log(`Current gid: ${process.getegid()}`);\\n                 * }\\n                 * ```\\n                 *\\n                 * This function is only available on POSIX platforms (i.e. not Windows or\\n                 * Android).\\n                 * @since v2.0.0\\n                 */\\n                getegid?: () => number;\\n                /**\\n                 * The `process.setegid()` method sets the effective group identity of the process.\\n                 * (See [`setegid(2)`](http://man7.org/linux/man-pages/man2/setegid.2.html).) The `id` can be passed as either a numeric ID or a group\\n                 * name string. If a group name is specified, this method blocks while resolving\\n                 * the associated a numeric ID.\\n                 *\\n                 * ```js\\n                 * import process from 'process';\\n                 *\\n                 * if (process.getegid &#x26;&#x26; process.setegid) {\\n                 *   console.log(`Current gid: ${process.getegid()}`);\\n                 *   try {\\n                 *     process.setegid(501);\\n                 *     console.log(`New gid: ${process.getegid()}`);\\n                 *   } catch (err) {\\n                 *     console.log(`Failed to set gid: ${err}`);\\n                 *   }\\n                 * }\\n                 * ```\\n                 *\\n                 * This function is only available on POSIX platforms (i.e. not Windows or\\n                 * Android).\\n                 * This feature is not available in `Worker` threads.\\n                 * @since v2.0.0\\n                 * @param id A group name or ID\\n                 */\\n                setegid?: (id: number | string) => void;\\n                /**\\n                 * The `process.getgroups()` method returns an array with the supplementary group\\n                 * IDs. POSIX leaves it unspecified if the effective group ID is included but\\n                 * Node.js ensures it always is.\\n                 *\\n                 * ```js\\n                 * import process from 'process';\\n                 *\\n                 * if (process.getgroups) {\\n                 *   console.log(process.getgroups()); // [ 16, 21, 297 ]\\n                 * }\\n                 * ```\\n                 *\\n                 * This function is only available on POSIX platforms (i.e. not Windows or\\n                 * Android).\\n                 * @since v0.9.4\\n                 */\\n                getgroups?: () => number[];\\n                /**\\n                 * The `process.setgroups()` method sets the supplementary group IDs for the\\n                 * Node.js process. This is a privileged operation that requires the Node.js\\n                 * process to have `root` or the `CAP_SETGID` capability.\\n                 *\\n                 * The `groups` array can contain numeric group IDs, group names, or both.\\n                 *\\n                 * ```js\\n                 * import process from 'process';\\n                 *\\n                 * if (process.getgroups &#x26;&#x26; process.setgroups) {\\n                 *   try {\\n                 *     process.setgroups([501]);\\n                 *     console.log(process.getgroups()); // new groups\\n                 *   } catch (err) {\\n                 *     console.log(`Failed to set groups: ${err}`);\\n                 *   }\\n                 * }\\n                 * ```\\n                 *\\n                 * This function is only available on POSIX platforms (i.e. not Windows or\\n                 * Android).\\n                 * This feature is not available in `Worker` threads.\\n                 * @since v0.9.4\\n                 */\\n                setgroups?: (groups: ReadonlyArray<string | number>) => void;\\n                /**\\n                 * The `process.setUncaughtExceptionCaptureCallback()` function sets a function\\n                 * that will be invoked when an uncaught exception occurs, which will receive the\\n                 * exception value itself as its first argument.\\n                 *\\n                 * If such a function is set, the `'uncaughtException'` event will\\n                 * not be emitted. If `--abort-on-uncaught-exception` was passed from the\\n                 * command line or set through `v8.setFlagsFromString()`, the process will\\n                 * not abort. Actions configured to take place on exceptions such as report\\n                 * generations will be affected too\\n                 *\\n                 * To unset the capture function,`process.setUncaughtExceptionCaptureCallback(null)` may be used. Calling this\\n                 * method with a non-`null` argument while another capture function is set will\\n                 * throw an error.\\n                 *\\n                 * Using this function is mutually exclusive with using the deprecated `domain` built-in module.\\n                 * @since v9.3.0\\n                 */\\n                setUncaughtExceptionCaptureCallback(cb: ((err: Error) => void) | null): void;\\n                /**\\n                 * Indicates whether a callback has been set using {@link setUncaughtExceptionCaptureCallback}.\\n                 * @since v9.3.0\\n                 */\\n                hasUncaughtExceptionCaptureCallback(): boolean;\\n                /**\\n                 * The `process.version` property contains the Node.js version string.\\n                 *\\n                 * ```js\\n                 * import { version } from 'process';\\n                 *\\n                 * console.log(`Version: ${version}`);\\n                 * // Version: v14.8.0\\n                 * ```\\n                 *\\n                 * To get the version string without the prepended _v_, use`process.versions.node`.\\n                 * @since v0.1.3\\n                 */\\n                readonly version: string;\\n                /**\\n                 * The `process.versions` property returns an object listing the version strings of\\n                 * Node.js and its dependencies. `process.versions.modules` indicates the current\\n                 * ABI version, which is increased whenever a C++ API changes. Node.js will refuse\\n                 * to load modules that were compiled against a different module ABI version.\\n                 *\\n                 * ```js\\n                 * import { versions } from 'process';\\n                 *\\n                 * console.log(versions);\\n                 * ```\\n                 *\\n                 * Will generate an object similar to:\\n                 *\\n                 * ```console\\n                 * { node: '11.13.0',\\n                 *   v8: '7.0.276.38-node.18',\\n                 *   uv: '1.27.0',\\n                 *   zlib: '1.2.11',\\n                 *   brotli: '1.0.7',\\n                 *   ares: '1.15.0',\\n                 *   modules: '67',\\n                 *   nghttp2: '1.34.0',\\n                 *   napi: '4',\\n                 *   llhttp: '1.1.1',\\n                 *   openssl: '1.1.1b',\\n                 *   cldr: '34.0',\\n                 *   icu: '63.1',\\n                 *   tz: '2018e',\\n                 *   unicode: '11.0' }\\n                 * ```\\n                 * @since v0.2.0\\n                 */\\n                readonly versions: ProcessVersions;\\n                /**\\n                 * The `process.config` property returns an `Object` containing the JavaScript\\n                 * representation of the configure options used to compile the current Node.js\\n                 * executable. This is the same as the `config.gypi` file that was produced when\\n                 * running the `./configure` script.\\n                 *\\n                 * An example of the possible output looks like:\\n                 *\\n                 * ```js\\n                 * {\\n                 *   target_defaults:\\n                 *    { cflags: [],\\n                 *      default_configuration: 'Release',\\n                 *      defines: [],\\n                 *      include_dirs: [],\\n                 *      libraries: [] },\\n                 *   variables:\\n                 *    {\\n                 *      host_arch: 'x64',\\n                 *      napi_build_version: 5,\\n                 *      node_install_npm: 'true',\\n                 *      node_prefix: '',\\n                 *      node_shared_cares: 'false',\\n                 *      node_shared_http_parser: 'false',\\n                 *      node_shared_libuv: 'false',\\n                 *      node_shared_zlib: 'false',\\n                 *      node_use_dtrace: 'false',\\n                 *      node_use_openssl: 'true',\\n                 *      node_shared_openssl: 'false',\\n                 *      strict_aliasing: 'true',\\n                 *      target_arch: 'x64',\\n                 *      v8_use_snapshot: 1\\n                 *    }\\n                 * }\\n                 * ```\\n                 *\\n                 * The `process.config` property is **not** read-only and there are existing\\n                 * modules in the ecosystem that are known to extend, modify, or entirely replace\\n                 * the value of `process.config`.\\n                 *\\n                 * Modifying the `process.config` property, or any child-property of the`process.config` object has been deprecated. The `process.config` will be made\\n                 * read-only in a future release.\\n                 * @since v0.7.7\\n                 */\\n                readonly config: ProcessConfig;\\n                /**\\n                 * The `process.kill()` method sends the `signal` to the process identified by`pid`.\\n                 *\\n                 * Signal names are strings such as `'SIGINT'` or `'SIGHUP'`. See `Signal Events` and [`kill(2)`](http://man7.org/linux/man-pages/man2/kill.2.html) for more information.\\n                 *\\n                 * This method will throw an error if the target `pid` does not exist. As a special\\n                 * case, a signal of `0` can be used to test for the existence of a process.\\n                 * Windows platforms will throw an error if the `pid` is used to kill a process\\n                 * group.\\n                 *\\n                 * Even though the name of this function is `process.kill()`, it is really just a\\n                 * signal sender, like the `kill` system call. The signal sent may do something\\n                 * other than kill the target process.\\n                 *\\n                 * ```js\\n                 * import process, { kill } from 'process';\\n                 *\\n                 * process.on('SIGHUP', () => {\\n                 *   console.log('Got SIGHUP signal.');\\n                 * });\\n                 *\\n                 * setTimeout(() => {\\n                 *   console.log('Exiting.');\\n                 *   process.exit(0);\\n                 * }, 100);\\n                 *\\n                 * kill(process.pid, 'SIGHUP');\\n                 * ```\\n                 *\\n                 * When `SIGUSR1` is received by a Node.js process, Node.js will start the\\n                 * debugger. See `Signal Events`.\\n                 * @since v0.0.6\\n                 * @param pid A process ID\\n                 * @param [signal='SIGTERM'] The signal to send, either as a string or number.\\n                 */\\n                kill(pid: number, signal?: string | number): true;\\n                /**\\n                 * The `process.pid` property returns the PID of the process.\\n                 *\\n                 * ```js\\n                 * import { pid } from 'process';\\n                 *\\n                 * console.log(`This process is pid ${pid}`);\\n                 * ```\\n                 * @since v0.1.15\\n                 */\\n                readonly pid: number;\\n                /**\\n                 * The `process.ppid` property returns the PID of the parent of the\\n                 * current process.\\n                 *\\n                 * ```js\\n                 * import { ppid } from 'process';\\n                 *\\n                 * console.log(`The parent process is pid ${ppid}`);\\n                 * ```\\n                 * @since v9.2.0, v8.10.0, v6.13.0\\n                 */\\n                readonly ppid: number;\\n                /**\\n                 * The `process.title` property returns the current process title (i.e. returns\\n                 * the current value of `ps`). Assigning a new value to `process.title` modifies\\n                 * the current value of `ps`.\\n                 *\\n                 * When a new value is assigned, different platforms will impose different maximum\\n                 * length restrictions on the title. Usually such restrictions are quite limited.\\n                 * For instance, on Linux and macOS, `process.title` is limited to the size of the\\n                 * binary name plus the length of the command-line arguments because setting the`process.title` overwrites the `argv` memory of the process. Node.js v0.8\\n                 * allowed for longer process title strings by also overwriting the `environ`memory but that was potentially insecure and confusing in some (rather obscure)\\n                 * cases.\\n                 *\\n                 * Assigning a value to `process.title` might not result in an accurate label\\n                 * within process manager applications such as macOS Activity Monitor or Windows\\n                 * Services Manager.\\n                 * @since v0.1.104\\n                 */\\n                title: string;\\n                /**\\n                 * The operating system CPU architecture for which the Node.js binary was compiled.\\n                 * Possible values are: `'arm'`, `'arm64'`, `'ia32'`, `'mips'`,`'mipsel'`, `'ppc'`,`'ppc64'`, `'s390'`, `'s390x'`, and `'x64'`.\\n                 *\\n                 * ```js\\n                 * import { arch } from 'process';\\n                 *\\n                 * console.log(`This processor architecture is ${arch}`);\\n                 * ```\\n                 * @since v0.5.0\\n                 */\\n                readonly arch: Architecture;\\n                /**\\n                 * The `process.platform` property returns a string identifying the operating\\n                 * system platform for which the Node.js binary was compiled.\\n                 *\\n                 * Currently possible values are:\\n                 *\\n                 * * `'aix'`\\n                 * * `'darwin'`\\n                 * * `'freebsd'`\\n                 * * `'linux'`\\n                 * * `'openbsd'`\\n                 * * `'sunos'`\\n                 * * `'win32'`\\n                 *\\n                 * ```js\\n                 * import { platform } from 'process';\\n                 *\\n                 * console.log(`This platform is ${platform}`);\\n                 * ```\\n                 *\\n                 * The value `'android'` may also be returned if the Node.js is built on the\\n                 * Android operating system. However, Android support in Node.js [is experimental](https://github.com/nodejs/node/blob/HEAD/BUILDING.md#androidandroid-based-devices-eg-firefox-os).\\n                 * @since v0.1.16\\n                 */\\n                readonly platform: Platform;\\n                /**\\n                 * The `process.mainModule` property provides an alternative way of retrieving `require.main`. The difference is that if the main module changes at\\n                 * runtime, `require.main` may still refer to the original main module in\\n                 * modules that were required before the change occurred. Generally, it's\\n                 * safe to assume that the two refer to the same module.\\n                 *\\n                 * As with `require.main`, `process.mainModule` will be `undefined` if there\\n                 * is no entry script.\\n                 * @since v0.1.17\\n                 * @deprecated Since v14.0.0 - Use `main` instead.\\n                 */\\n                mainModule?: Module | undefined;\\n                memoryUsage: MemoryUsageFn;\\n                /**\\n                 * Gets the amount of memory available to the process (in bytes) based on\\n                 * limits imposed by the OS. If there is no such constraint, or the constraint\\n                 * is unknown, `undefined` is returned.\\n                 */\\n                constrainedMemory(): number | undefined;\\n                /**\\n                 * The `process.cpuUsage()` method returns the user and system CPU time usage of\\n                 * the current process, in an object with properties `user` and `system`, whose\\n                 * values are microsecond values (millionth of a second). These values measure time\\n                 * spent in user and system code respectively, and may end up being greater than\\n                 * actual elapsed time if multiple CPU cores are performing work for this process.\\n                 *\\n                 * The result of a previous call to `process.cpuUsage()` can be passed as the\\n                 * argument to the function, to get a diff reading.\\n                 *\\n                 * ```js\\n                 * import { cpuUsage } from 'process';\\n                 *\\n                 * const startUsage = cpuUsage();\\n                 * // { user: 38579, system: 6986 }\\n                 *\\n                 * // spin the CPU for 500 milliseconds\\n                 * const now = Date.now();\\n                 * while (Date.now() - now < 500);\\n                 *\\n                 * console.log(cpuUsage(startUsage));\\n                 * // { user: 514883, system: 11226 }\\n                 * ```\\n                 * @since v6.1.0\\n                 * @param previousValue A previous return value from calling `process.cpuUsage()`\\n                 */\\n                cpuUsage(previousValue?: CpuUsage): CpuUsage;\\n                /**\\n                 * `process.nextTick()` adds `callback` to the \\\"next tick queue\\\". This queue is\\n                 * fully drained after the current operation on the JavaScript stack runs to\\n                 * completion and before the event loop is allowed to continue. It's possible to\\n                 * create an infinite loop if one were to recursively call `process.nextTick()`.\\n                 * See the [Event Loop](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#process-nexttick) guide for more background.\\n                 *\\n                 * ```js\\n                 * import { nextTick } from 'process';\\n                 *\\n                 * console.log('start');\\n                 * nextTick(() => {\\n                 *   console.log('nextTick callback');\\n                 * });\\n                 * console.log('scheduled');\\n                 * // Output:\\n                 * // start\\n                 * // scheduled\\n                 * // nextTick callback\\n                 * ```\\n                 *\\n                 * This is important when developing APIs in order to give users the opportunity\\n                 * to assign event handlers _after_ an object has been constructed but before any\\n                 * I/O has occurred:\\n                 *\\n                 * ```js\\n                 * import { nextTick } from 'process';\\n                 *\\n                 * function MyThing(options) {\\n                 *   this.setupOptions(options);\\n                 *\\n                 *   nextTick(() => {\\n                 *     this.startDoingStuff();\\n                 *   });\\n                 * }\\n                 *\\n                 * const thing = new MyThing();\\n                 * thing.getReadyForStuff();\\n                 *\\n                 * // thing.startDoingStuff() gets called now, not before.\\n                 * ```\\n                 *\\n                 * It is very important for APIs to be either 100% synchronous or 100%\\n                 * asynchronous. Consider this example:\\n                 *\\n                 * ```js\\n                 * // WARNING!  DO NOT USE!  BAD UNSAFE HAZARD!\\n                 * function maybeSync(arg, cb) {\\n                 *   if (arg) {\\n                 *     cb();\\n                 *     return;\\n                 *   }\\n                 *\\n                 *   fs.stat('file', cb);\\n                 * }\\n                 * ```\\n                 *\\n                 * This API is hazardous because in the following case:\\n                 *\\n                 * ```js\\n                 * const maybeTrue = Math.random() > 0.5;\\n                 *\\n                 * maybeSync(maybeTrue, () => {\\n                 *   foo();\\n                 * });\\n                 *\\n                 * bar();\\n                 * ```\\n                 *\\n                 * It is not clear whether `foo()` or `bar()` will be called first.\\n                 *\\n                 * The following approach is much better:\\n                 *\\n                 * ```js\\n                 * import { nextTick } from 'process';\\n                 *\\n                 * function definitelyAsync(arg, cb) {\\n                 *   if (arg) {\\n                 *     nextTick(cb);\\n                 *     return;\\n                 *   }\\n                 *\\n                 *   fs.stat('file', cb);\\n                 * }\\n                 * ```\\n                 * @since v0.1.26\\n                 * @param args Additional arguments to pass when invoking the `callback`\\n                 */\\n                nextTick(callback: Function, ...args: any[]): void;\\n                /**\\n                 * The `process.release` property returns an `Object` containing metadata related\\n                 * to the current release, including URLs for the source tarball and headers-only\\n                 * tarball.\\n                 *\\n                 * `process.release` contains the following properties:\\n                 *\\n                 * ```js\\n                 * {\\n                 *   name: 'node',\\n                 *   lts: 'Erbium',\\n                 *   sourceUrl: 'https://nodejs.org/download/release/v12.18.1/node-v12.18.1.tar.gz',\\n                 *   headersUrl: 'https://nodejs.org/download/release/v12.18.1/node-v12.18.1-headers.tar.gz',\\n                 *   libUrl: 'https://nodejs.org/download/release/v12.18.1/win-x64/node.lib'\\n                 * }\\n                 * ```\\n                 *\\n                 * In custom builds from non-release versions of the source tree, only the`name` property may be present. The additional properties should not be\\n                 * relied upon to exist.\\n                 * @since v3.0.0\\n                 */\\n                readonly release: ProcessRelease;\\n                features: {\\n                    inspector: boolean;\\n                    debug: boolean;\\n                    uv: boolean;\\n                    ipv6: boolean;\\n                    tls_alpn: boolean;\\n                    tls_sni: boolean;\\n                    tls_ocsp: boolean;\\n                    tls: boolean;\\n                };\\n                /**\\n                 * `process.umask()` returns the Node.js process's file mode creation mask. Child\\n                 * processes inherit the mask from the parent process.\\n                 * @since v0.1.19\\n                 * @deprecated Calling `process.umask()` with no argument causes the process-wide umask to be written twice. This introduces a race condition between threads, and is a potential   *\\n                 * security vulnerability. There is no safe, cross-platform alternative API.\\n                 */\\n                umask(): number;\\n                /**\\n                 * Can only be set if not in worker thread.\\n                 */\\n                umask(mask: string | number): number;\\n                /**\\n                 * The `process.uptime()` method returns the number of seconds the current Node.js\\n                 * process has been running.\\n                 *\\n                 * The return value includes fractions of a second. Use `Math.floor()` to get whole\\n                 * seconds.\\n                 * @since v0.5.0\\n                 */\\n                uptime(): number;\\n                hrtime: HRTime;\\n                /**\\n                 * If Node.js is spawned with an IPC channel, the `process.send()` method can be\\n                 * used to send messages to the parent process. Messages will be received as a `'message'` event on the parent's `ChildProcess` object.\\n                 *\\n                 * If Node.js was not spawned with an IPC channel, `process.send` will be`undefined`.\\n                 *\\n                 * The message goes through serialization and parsing. The resulting message might\\n                 * not be the same as what is originally sent.\\n                 * @since v0.5.9\\n                 * @param options used to parameterize the sending of certain types of handles.`options` supports the following properties:\\n                 */\\n                send?(\\n                    message: any,\\n                    sendHandle?: any,\\n                    options?: {\\n                        swallowErrors?: boolean | undefined;\\n                    },\\n                    callback?: (error: Error | null) => void\\n                ): boolean;\\n                /**\\n                 * If the Node.js process is spawned with an IPC channel (see the `Child Process` and `Cluster` documentation), the `process.disconnect()` method will close the\\n                 * IPC channel to the parent process, allowing the child process to exit gracefully\\n                 * once there are no other connections keeping it alive.\\n                 *\\n                 * The effect of calling `process.disconnect()` is the same as calling `ChildProcess.disconnect()` from the parent process.\\n                 *\\n                 * If the Node.js process was not spawned with an IPC channel,`process.disconnect()` will be `undefined`.\\n                 * @since v0.7.2\\n                 */\\n                disconnect(): void;\\n                /**\\n                 * If the Node.js process is spawned with an IPC channel (see the `Child Process` and `Cluster` documentation), the `process.connected` property will return`true` so long as the IPC\\n                 * channel is connected and will return `false` after`process.disconnect()` is called.\\n                 *\\n                 * Once `process.connected` is `false`, it is no longer possible to send messages\\n                 * over the IPC channel using `process.send()`.\\n                 * @since v0.7.2\\n                 */\\n                connected: boolean;\\n                /**\\n                 * The `process.allowedNodeEnvironmentFlags` property is a special,\\n                 * read-only `Set` of flags allowable within the `NODE_OPTIONS` environment variable.\\n                 *\\n                 * `process.allowedNodeEnvironmentFlags` extends `Set`, but overrides`Set.prototype.has` to recognize several different possible flag\\n                 * representations. `process.allowedNodeEnvironmentFlags.has()` will\\n                 * return `true` in the following cases:\\n                 *\\n                 * * Flags may omit leading single (`-`) or double (`--`) dashes; e.g.,`inspect-brk` for `--inspect-brk`, or `r` for `-r`.\\n                 * * Flags passed through to V8 (as listed in `--v8-options`) may replace\\n                 * one or more _non-leading_ dashes for an underscore, or vice-versa;\\n                 * e.g., `--perf_basic_prof`, `--perf-basic-prof`, `--perf_basic-prof`,\\n                 * etc.\\n                 * * Flags may contain one or more equals (`=`) characters; all\\n                 * characters after and including the first equals will be ignored;\\n                 * e.g., `--stack-trace-limit=100`.\\n                 * * Flags _must_ be allowable within `NODE_OPTIONS`.\\n                 *\\n                 * When iterating over `process.allowedNodeEnvironmentFlags`, flags will\\n                 * appear only _once_; each will begin with one or more dashes. Flags\\n                 * passed through to V8 will contain underscores instead of non-leading\\n                 * dashes:\\n                 *\\n                 * ```js\\n                 * import { allowedNodeEnvironmentFlags } from 'process';\\n                 *\\n                 * allowedNodeEnvironmentFlags.forEach((flag) => {\\n                 *   // -r\\n                 *   // --inspect-brk\\n                 *   // --abort_on_uncaught_exception\\n                 *   // ...\\n                 * });\\n                 * ```\\n                 *\\n                 * The methods `add()`, `clear()`, and `delete()` of`process.allowedNodeEnvironmentFlags` do nothing, and will fail\\n                 * silently.\\n                 *\\n                 * If Node.js was compiled _without_ `NODE_OPTIONS` support (shown in {@link config}), `process.allowedNodeEnvironmentFlags` will\\n                 * contain what _would have_ been allowable.\\n                 * @since v10.10.0\\n                 */\\n                allowedNodeEnvironmentFlags: ReadonlySet<string>;\\n                /**\\n                 * `process.report` is an object whose methods are used to generate diagnostic\\n                 * reports for the current process. Additional documentation is available in the `report documentation`.\\n                 * @since v11.8.0\\n                 */\\n                report?: ProcessReport | undefined;\\n                /**\\n                 * ```js\\n                 * import { resourceUsage } from 'process';\\n                 *\\n                 * console.log(resourceUsage());\\n                 * /*\\n                 *   Will output:\\n                 *   {\\n                 *     userCPUTime: 82872,\\n                 *     systemCPUTime: 4143,\\n                 *     maxRSS: 33164,\\n                 *     sharedMemorySize: 0,\\n                 *     unsharedDataSize: 0,\\n                 *     unsharedStackSize: 0,\\n                 *     minorPageFault: 2469,\\n                 *     majorPageFault: 0,\\n                 *     swappedOut: 0,\\n                 *     fsRead: 0,\\n                 *     fsWrite: 8,\\n                 *     ipcSent: 0,\\n                 *     ipcReceived: 0,\\n                 *     signalsCount: 0,\\n                 *     voluntaryContextSwitches: 79,\\n                 *     involuntaryContextSwitches: 1\\n                 *   }\\n                 *\\n                 * ```\\n                 * @since v12.6.0\\n                 * @return the resource usage for the current process. All of these values come from the `uv_getrusage` call which returns a [`uv_rusage_t` struct][uv_rusage_t].\\n                 */\\n                resourceUsage(): ResourceUsage;\\n                /**\\n                 * The `process.traceDeprecation` property indicates whether the`--trace-deprecation` flag is set on the current Node.js process. See the\\n                 * documentation for the `'warning' event` and the `emitWarning() method` for more information about this\\n                 * flag's behavior.\\n                 * @since v0.8.0\\n                 */\\n                traceDeprecation: boolean;\\n                /* EventEmitter */\\n                addListener(event: 'beforeExit', listener: BeforeExitListener): this;\\n                addListener(event: 'disconnect', listener: DisconnectListener): this;\\n                addListener(event: 'exit', listener: ExitListener): this;\\n                addListener(event: 'rejectionHandled', listener: RejectionHandledListener): this;\\n                addListener(event: 'uncaughtException', listener: UncaughtExceptionListener): this;\\n                addListener(event: 'uncaughtExceptionMonitor', listener: UncaughtExceptionListener): this;\\n                addListener(event: 'unhandledRejection', listener: UnhandledRejectionListener): this;\\n                addListener(event: 'warning', listener: WarningListener): this;\\n                addListener(event: 'message', listener: MessageListener): this;\\n                addListener(event: Signals, listener: SignalsListener): this;\\n                addListener(event: 'multipleResolves', listener: MultipleResolveListener): this;\\n                addListener(event: 'worker', listener: WorkerListener): this;\\n                emit(event: 'beforeExit', code: number): boolean;\\n                emit(event: 'disconnect'): boolean;\\n                emit(event: 'exit', code: number): boolean;\\n                emit(event: 'rejectionHandled', promise: Promise<unknown>): boolean;\\n                emit(event: 'uncaughtException', error: Error): boolean;\\n                emit(event: 'uncaughtExceptionMonitor', error: Error): boolean;\\n                emit(event: 'unhandledRejection', reason: unknown, promise: Promise<unknown>): boolean;\\n                emit(event: 'warning', warning: Error): boolean;\\n                emit(event: 'message', message: unknown, sendHandle: unknown): this;\\n                emit(event: Signals, signal?: Signals): boolean;\\n                emit(event: 'multipleResolves', type: MultipleResolveType, promise: Promise<unknown>, value: unknown): this;\\n                emit(event: 'worker', listener: WorkerListener): this;\\n                on(event: 'beforeExit', listener: BeforeExitListener): this;\\n                on(event: 'disconnect', listener: DisconnectListener): this;\\n                on(event: 'exit', listener: ExitListener): this;\\n                on(event: 'rejectionHandled', listener: RejectionHandledListener): this;\\n                on(event: 'uncaughtException', listener: UncaughtExceptionListener): this;\\n                on(event: 'uncaughtExceptionMonitor', listener: UncaughtExceptionListener): this;\\n                on(event: 'unhandledRejection', listener: UnhandledRejectionListener): this;\\n                on(event: 'warning', listener: WarningListener): this;\\n                on(event: 'message', listener: MessageListener): this;\\n                on(event: Signals, listener: SignalsListener): this;\\n                on(event: 'multipleResolves', listener: MultipleResolveListener): this;\\n                on(event: 'worker', listener: WorkerListener): this;\\n                on(event: string | symbol, listener: (...args: any[]) => void): this;\\n                once(event: 'beforeExit', listener: BeforeExitListener): this;\\n                once(event: 'disconnect', listener: DisconnectListener): this;\\n                once(event: 'exit', listener: ExitListener): this;\\n                once(event: 'rejectionHandled', listener: RejectionHandledListener): this;\\n                once(event: 'uncaughtException', listener: UncaughtExceptionListener): this;\\n                once(event: 'uncaughtExceptionMonitor', listener: UncaughtExceptionListener): this;\\n                once(event: 'unhandledRejection', listener: UnhandledRejectionListener): this;\\n                once(event: 'warning', listener: WarningListener): this;\\n                once(event: 'message', listener: MessageListener): this;\\n                once(event: Signals, listener: SignalsListener): this;\\n                once(event: 'multipleResolves', listener: MultipleResolveListener): this;\\n                once(event: 'worker', listener: WorkerListener): this;\\n                once(event: string | symbol, listener: (...args: any[]) => void): this;\\n                prependListener(event: 'beforeExit', listener: BeforeExitListener): this;\\n                prependListener(event: 'disconnect', listener: DisconnectListener): this;\\n                prependListener(event: 'exit', listener: ExitListener): this;\\n                prependListener(event: 'rejectionHandled', listener: RejectionHandledListener): this;\\n                prependListener(event: 'uncaughtException', listener: UncaughtExceptionListener): this;\\n                prependListener(event: 'uncaughtExceptionMonitor', listener: UncaughtExceptionListener): this;\\n                prependListener(event: 'unhandledRejection', listener: UnhandledRejectionListener): this;\\n                prependListener(event: 'warning', listener: WarningListener): this;\\n                prependListener(event: 'message', listener: MessageListener): this;\\n                prependListener(event: Signals, listener: SignalsListener): this;\\n                prependListener(event: 'multipleResolves', listener: MultipleResolveListener): this;\\n                prependListener(event: 'worker', listener: WorkerListener): this;\\n                prependOnceListener(event: 'beforeExit', listener: BeforeExitListener): this;\\n                prependOnceListener(event: 'disconnect', listener: DisconnectListener): this;\\n                prependOnceListener(event: 'exit', listener: ExitListener): this;\\n                prependOnceListener(event: 'rejectionHandled', listener: RejectionHandledListener): this;\\n                prependOnceListener(event: 'uncaughtException', listener: UncaughtExceptionListener): this;\\n                prependOnceListener(event: 'uncaughtExceptionMonitor', listener: UncaughtExceptionListener): this;\\n                prependOnceListener(event: 'unhandledRejection', listener: UnhandledRejectionListener): this;\\n                prependOnceListener(event: 'warning', listener: WarningListener): this;\\n                prependOnceListener(event: 'message', listener: MessageListener): this;\\n                prependOnceListener(event: Signals, listener: SignalsListener): this;\\n                prependOnceListener(event: 'multipleResolves', listener: MultipleResolveListener): this;\\n                prependOnceListener(event: 'worker', listener: WorkerListener): this;\\n                listeners(event: 'beforeExit'): BeforeExitListener[];\\n                listeners(event: 'disconnect'): DisconnectListener[];\\n                listeners(event: 'exit'): ExitListener[];\\n                listeners(event: 'rejectionHandled'): RejectionHandledListener[];\\n                listeners(event: 'uncaughtException'): UncaughtExceptionListener[];\\n                listeners(event: 'uncaughtExceptionMonitor'): UncaughtExceptionListener[];\\n                listeners(event: 'unhandledRejection'): UnhandledRejectionListener[];\\n                listeners(event: 'warning'): WarningListener[];\\n                listeners(event: 'message'): MessageListener[];\\n                listeners(event: Signals): SignalsListener[];\\n                listeners(event: 'multipleResolves'): MultipleResolveListener[];\\n                listeners(event: 'worker'): WorkerListener[];\\n            }\\n        }\\n    }\\n    export = process;\\n}\\ndeclare module 'node:process' {\\n    import process = require('process');\\n    export = process;\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/punycode.d.ts\":\"/**\\n * **The version of the punycode module bundled in Node.js is being deprecated.**In a future major version of Node.js this module will be removed. Users\\n * currently depending on the `punycode` module should switch to using the\\n * userland-provided [Punycode.js](https://github.com/bestiejs/punycode.js) module instead. For punycode-based URL\\n * encoding, see `url.domainToASCII` or, more generally, the `WHATWG URL API`.\\n *\\n * The `punycode` module is a bundled version of the [Punycode.js](https://github.com/bestiejs/punycode.js) module. It\\n * can be accessed using:\\n *\\n * ```js\\n * const punycode = require('punycode');\\n * ```\\n *\\n * [Punycode](https://tools.ietf.org/html/rfc3492) is a character encoding scheme defined by RFC 3492 that is\\n * primarily intended for use in Internationalized Domain Names. Because host\\n * names in URLs are limited to ASCII characters only, Domain Names that contain\\n * non-ASCII characters must be converted into ASCII using the Punycode scheme.\\n * For instance, the Japanese character that translates into the English word,`'example'` is `'\u4f8b'`. The Internationalized Domain Name, `'\u4f8b.com'` (equivalent\\n * to `'example.com'`) is represented by Punycode as the ASCII string`'xn--fsq.com'`.\\n *\\n * The `punycode` module provides a simple implementation of the Punycode standard.\\n *\\n * The `punycode` module is a third-party dependency used by Node.js and\\n * made available to developers as a convenience. Fixes or other modifications to\\n * the module must be directed to the [Punycode.js](https://github.com/bestiejs/punycode.js) project.\\n * @deprecated Since v7.0.0 - Deprecated\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/punycode.js)\\n */\\ndeclare module 'punycode' {\\n    /**\\n     * The `punycode.decode()` method converts a [Punycode](https://tools.ietf.org/html/rfc3492) string of ASCII-only\\n     * characters to the equivalent string of Unicode codepoints.\\n     *\\n     * ```js\\n     * punycode.decode('maana-pta'); // 'ma\xf1ana'\\n     * punycode.decode('--dqo34k'); // '\u2603-\u2318'\\n     * ```\\n     * @since v0.5.1\\n     */\\n    function decode(string: string): string;\\n    /**\\n     * The `punycode.encode()` method converts a string of Unicode codepoints to a [Punycode](https://tools.ietf.org/html/rfc3492) string of ASCII-only characters.\\n     *\\n     * ```js\\n     * punycode.encode('ma\xf1ana'); // 'maana-pta'\\n     * punycode.encode('\u2603-\u2318'); // '--dqo34k'\\n     * ```\\n     * @since v0.5.1\\n     */\\n    function encode(string: string): string;\\n    /**\\n     * The `punycode.toUnicode()` method converts a string representing a domain name\\n     * containing [Punycode](https://tools.ietf.org/html/rfc3492) encoded characters into Unicode. Only the [Punycode](https://tools.ietf.org/html/rfc3492) encoded parts of the domain name are be\\n     * converted.\\n     *\\n     * ```js\\n     * // decode domain names\\n     * punycode.toUnicode('xn--maana-pta.com'); // 'ma\xf1ana.com'\\n     * punycode.toUnicode('xn----dqo34k.com');  // '\u2603-\u2318.com'\\n     * punycode.toUnicode('example.com');       // 'example.com'\\n     * ```\\n     * @since v0.6.1\\n     */\\n    function toUnicode(domain: string): string;\\n    /**\\n     * The `punycode.toASCII()` method converts a Unicode string representing an\\n     * Internationalized Domain Name to [Punycode](https://tools.ietf.org/html/rfc3492). Only the non-ASCII parts of the\\n     * domain name will be converted. Calling `punycode.toASCII()` on a string that\\n     * already only contains ASCII characters will have no effect.\\n     *\\n     * ```js\\n     * // encode domain names\\n     * punycode.toASCII('ma\xf1ana.com');  // 'xn--maana-pta.com'\\n     * punycode.toASCII('\u2603-\u2318.com');   // 'xn----dqo34k.com'\\n     * punycode.toASCII('example.com'); // 'example.com'\\n     * ```\\n     * @since v0.6.1\\n     */\\n    function toASCII(domain: string): string;\\n    /**\\n     * @deprecated since v7.0.0\\n     * The version of the punycode module bundled in Node.js is being deprecated.\\n     * In a future major version of Node.js this module will be removed.\\n     * Users currently depending on the punycode module should switch to using\\n     * the userland-provided Punycode.js module instead.\\n     */\\n    const ucs2: ucs2;\\n    interface ucs2 {\\n        /**\\n         * @deprecated since v7.0.0\\n         * The version of the punycode module bundled in Node.js is being deprecated.\\n         * In a future major version of Node.js this module will be removed.\\n         * Users currently depending on the punycode module should switch to using\\n         * the userland-provided Punycode.js module instead.\\n         */\\n        decode(string: string): number[];\\n        /**\\n         * @deprecated since v7.0.0\\n         * The version of the punycode module bundled in Node.js is being deprecated.\\n         * In a future major version of Node.js this module will be removed.\\n         * Users currently depending on the punycode module should switch to using\\n         * the userland-provided Punycode.js module instead.\\n         */\\n        encode(codePoints: ReadonlyArray<number>): string;\\n    }\\n    /**\\n     * @deprecated since v7.0.0\\n     * The version of the punycode module bundled in Node.js is being deprecated.\\n     * In a future major version of Node.js this module will be removed.\\n     * Users currently depending on the punycode module should switch to using\\n     * the userland-provided Punycode.js module instead.\\n     */\\n    const version: string;\\n}\\ndeclare module 'node:punycode' {\\n    export * from 'punycode';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/querystring.d.ts\":\"/**\\n * The `querystring` module provides utilities for parsing and formatting URL\\n * query strings. It can be accessed using:\\n *\\n * ```js\\n * const querystring = require('querystring');\\n * ```\\n *\\n * `querystring` is more performant than `URLSearchParams` but is not a\\n * standardized API. Use `URLSearchParams` when performance is not critical\\n * or when compatibility with browser code is desirable.\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/querystring.js)\\n */\\ndeclare module 'querystring' {\\n    interface StringifyOptions {\\n        encodeURIComponent?: ((str: string) => string) | undefined;\\n    }\\n    interface ParseOptions {\\n        maxKeys?: number | undefined;\\n        decodeURIComponent?: ((str: string) => string) | undefined;\\n    }\\n    interface ParsedUrlQuery extends NodeJS.Dict<string | string[]> {}\\n    interface ParsedUrlQueryInput extends NodeJS.Dict<string | number | boolean | ReadonlyArray<string> | ReadonlyArray<number> | ReadonlyArray<boolean> | null> {}\\n    /**\\n     * The `querystring.stringify()` method produces a URL query string from a\\n     * given `obj` by iterating through the object's \\\"own properties\\\".\\n     *\\n     * It serializes the following types of values passed in `obj`:[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type) |\\n     * [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type) |\\n     * [bigint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) |\\n     * [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type) |\\n     * [string\\\\[\\\\]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type) |\\n     * [number\\\\[\\\\]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type) |\\n     * [bigint\\\\[\\\\]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) |\\n     * [boolean\\\\[\\\\]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type) The numeric values must be finite. Any other input values will be coerced to\\n     * empty strings.\\n     *\\n     * ```js\\n     * querystring.stringify({ foo: 'bar', baz: ['qux', 'quux'], corge: '' });\\n     * // Returns 'foo=bar&#x26;baz=qux&#x26;baz=quux&#x26;corge='\\n     *\\n     * querystring.stringify({ foo: 'bar', baz: 'qux' }, ';', ':');\\n     * // Returns 'foo:bar;baz:qux'\\n     * ```\\n     *\\n     * By default, characters requiring percent-encoding within the query string will\\n     * be encoded as UTF-8\\\\. If an alternative encoding is required, then an alternative`encodeURIComponent` option will need to be specified:\\n     *\\n     * ```js\\n     * // Assuming gbkEncodeURIComponent function already exists,\\n     *\\n     * querystring.stringify({ w: '\u4e2d\u6587', foo: 'bar' }, null, null,\\n     *                       { encodeURIComponent: gbkEncodeURIComponent });\\n     * ```\\n     * @since v0.1.25\\n     * @param obj The object to serialize into a URL query string\\n     * @param [sep='&'] The substring used to delimit key and value pairs in the query string.\\n     * @param [eq='='] . The substring used to delimit keys and values in the query string.\\n     */\\n    function stringify(obj?: ParsedUrlQueryInput, sep?: string, eq?: string, options?: StringifyOptions): string;\\n    /**\\n     * The `querystring.parse()` method parses a URL query string (`str`) into a\\n     * collection of key and value pairs.\\n     *\\n     * For example, the query string `'foo=bar&#x26;abc=xyz&#x26;abc=123'` is parsed into:\\n     *\\n     * ```js\\n     * {\\n     *   foo: 'bar',\\n     *   abc: ['xyz', '123']\\n     * }\\n     * ```\\n     *\\n     * The object returned by the `querystring.parse()` method _does not_prototypically inherit from the JavaScript `Object`. This means that typical`Object` methods such as `obj.toString()`,\\n     * `obj.hasOwnProperty()`, and others\\n     * are not defined and _will not work_.\\n     *\\n     * By default, percent-encoded characters within the query string will be assumed\\n     * to use UTF-8 encoding. If an alternative character encoding is used, then an\\n     * alternative `decodeURIComponent` option will need to be specified:\\n     *\\n     * ```js\\n     * // Assuming gbkDecodeURIComponent function already exists...\\n     *\\n     * querystring.parse('w=%D6%D0%CE%C4&#x26;foo=bar', null, null,\\n     *                   { decodeURIComponent: gbkDecodeURIComponent });\\n     * ```\\n     * @since v0.1.25\\n     * @param str The URL query string to parse\\n     * @param [sep='&'] The substring used to delimit key and value pairs in the query string.\\n     * @param [eq='='] . The substring used to delimit keys and values in the query string.\\n     */\\n    function parse(str: string, sep?: string, eq?: string, options?: ParseOptions): ParsedUrlQuery;\\n    /**\\n     * The querystring.encode() function is an alias for querystring.stringify().\\n     */\\n    const encode: typeof stringify;\\n    /**\\n     * The querystring.decode() function is an alias for querystring.parse().\\n     */\\n    const decode: typeof parse;\\n    /**\\n     * The `querystring.escape()` method performs URL percent-encoding on the given`str` in a manner that is optimized for the specific requirements of URL\\n     * query strings.\\n     *\\n     * The `querystring.escape()` method is used by `querystring.stringify()` and is\\n     * generally not expected to be used directly. It is exported primarily to allow\\n     * application code to provide a replacement percent-encoding implementation if\\n     * necessary by assigning `querystring.escape` to an alternative function.\\n     * @since v0.1.25\\n     */\\n    function escape(str: string): string;\\n    /**\\n     * The `querystring.unescape()` method performs decoding of URL percent-encoded\\n     * characters on the given `str`.\\n     *\\n     * The `querystring.unescape()` method is used by `querystring.parse()` and is\\n     * generally not expected to be used directly. It is exported primarily to allow\\n     * application code to provide a replacement decoding implementation if\\n     * necessary by assigning `querystring.unescape` to an alternative function.\\n     *\\n     * By default, the `querystring.unescape()` method will attempt to use the\\n     * JavaScript built-in `decodeURIComponent()` method to decode. If that fails,\\n     * a safer equivalent that does not throw on malformed URLs will be used.\\n     * @since v0.1.25\\n     */\\n    function unescape(str: string): string;\\n}\\ndeclare module 'node:querystring' {\\n    export * from 'querystring';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/readline.d.ts\":\"/**\\n * The `readline` module provides an interface for reading data from a `Readable` stream (such as `process.stdin`) one line at a time.\\n *\\n * To use the promise-based APIs:\\n *\\n * ```js\\n * import * as readline from 'node:readline/promises';\\n * ```\\n *\\n * To use the callback and sync APIs:\\n *\\n * ```js\\n * import * as readline from 'node:readline';\\n * ```\\n *\\n * The following simple example illustrates the basic use of the `readline` module.\\n *\\n * ```js\\n * import * as readline from 'node:readline/promises';\\n * import { stdin as input, stdout as output } from 'node:process';\\n *\\n * const rl = readline.createInterface({ input, output });\\n *\\n * const answer = await rl.question('What do you think of Node.js? ');\\n *\\n * console.log(`Thank you for your valuable feedback: ${answer}`);\\n *\\n * rl.close();\\n * ```\\n *\\n * Once this code is invoked, the Node.js application will not terminate until the`readline.Interface` is closed because the interface waits for data to be\\n * received on the `input` stream.\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/readline.js)\\n */\\ndeclare module 'readline' {\\n    import { Abortable, EventEmitter } from 'node:events';\\n    import * as promises from 'node:readline/promises';\\n\\n    export { promises };\\n    export interface Key {\\n        sequence?: string | undefined;\\n        name?: string | undefined;\\n        ctrl?: boolean | undefined;\\n        meta?: boolean | undefined;\\n        shift?: boolean | undefined;\\n    }\\n    /**\\n     * Instances of the `readline.Interface` class are constructed using the`readline.createInterface()` method. Every instance is associated with a\\n     * single `input` `Readable` stream and a single `output` `Writable` stream.\\n     * The `output` stream is used to print prompts for user input that arrives on,\\n     * and is read from, the `input` stream.\\n     * @since v0.1.104\\n     */\\n    export class Interface extends EventEmitter {\\n        readonly terminal: boolean;\\n        /**\\n         * The current input data being processed by node.\\n         *\\n         * This can be used when collecting input from a TTY stream to retrieve the\\n         * current value that has been processed thus far, prior to the `line` event\\n         * being emitted. Once the `line` event has been emitted, this property will\\n         * be an empty string.\\n         *\\n         * Be aware that modifying the value during the instance runtime may have\\n         * unintended consequences if `rl.cursor` is not also controlled.\\n         *\\n         * **If not using a TTY stream for input, use the `'line'` event.**\\n         *\\n         * One possible use case would be as follows:\\n         *\\n         * ```js\\n         * const values = ['lorem ipsum', 'dolor sit amet'];\\n         * const rl = readline.createInterface(process.stdin);\\n         * const showResults = debounce(() => {\\n         *   console.log(\\n         *     '\\\\n',\\n         *     values.filter((val) => val.startsWith(rl.line)).join(' ')\\n         *   );\\n         * }, 300);\\n         * process.stdin.on('keypress', (c, k) => {\\n         *   showResults();\\n         * });\\n         * ```\\n         * @since v0.1.98\\n         */\\n        readonly line: string;\\n        /**\\n         * The cursor position relative to `rl.line`.\\n         *\\n         * This will track where the current cursor lands in the input string, when\\n         * reading input from a TTY stream. The position of cursor determines the\\n         * portion of the input string that will be modified as input is processed,\\n         * as well as the column where the terminal caret will be rendered.\\n         * @since v0.1.98\\n         */\\n        readonly cursor: number;\\n        /**\\n         * NOTE: According to the documentation:\\n         *\\n         * > Instances of the `readline.Interface` class are constructed using the\\n         * > `readline.createInterface()` method.\\n         *\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/readline.html#readline_class_interface\\n         */\\n        protected constructor(input: NodeJS.ReadableStream, output?: NodeJS.WritableStream, completer?: Completer | AsyncCompleter, terminal?: boolean);\\n        /**\\n         * NOTE: According to the documentation:\\n         *\\n         * > Instances of the `readline.Interface` class are constructed using the\\n         * > `readline.createInterface()` method.\\n         *\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/readline.html#readline_class_interface\\n         */\\n        protected constructor(options: ReadLineOptions);\\n        /**\\n         * The `rl.getPrompt()` method returns the current prompt used by `rl.prompt()`.\\n         * @since v15.3.0\\n         * @return the current prompt string\\n         */\\n        getPrompt(): string;\\n        /**\\n         * The `rl.setPrompt()` method sets the prompt that will be written to `output`whenever `rl.prompt()` is called.\\n         * @since v0.1.98\\n         */\\n        setPrompt(prompt: string): void;\\n        /**\\n         * The `rl.prompt()` method writes the `readline.Interface` instances configured`prompt` to a new line in `output` in order to provide a user with a new\\n         * location at which to provide input.\\n         *\\n         * When called, `rl.prompt()` will resume the `input` stream if it has been\\n         * paused.\\n         *\\n         * If the `readline.Interface` was created with `output` set to `null` or`undefined` the prompt is not written.\\n         * @since v0.1.98\\n         * @param preserveCursor If `true`, prevents the cursor placement from being reset to `0`.\\n         */\\n        prompt(preserveCursor?: boolean): void;\\n        /**\\n         * The `rl.question()` method displays the `query` by writing it to the `output`,\\n         * waits for user input to be provided on `input`, then invokes the `callback`function passing the provided input as the first argument.\\n         *\\n         * When called, `rl.question()` will resume the `input` stream if it has been\\n         * paused.\\n         *\\n         * If the `readline.Interface` was created with `output` set to `null` or`undefined` the `query` is not written.\\n         *\\n         * The `callback` function passed to `rl.question()` does not follow the typical\\n         * pattern of accepting an `Error` object or `null` as the first argument.\\n         * The `callback` is called with the provided answer as the only argument.\\n         *\\n         * Example usage:\\n         *\\n         * ```js\\n         * rl.question('What is your favorite food? ', (answer) => {\\n         *   console.log(`Oh, so your favorite food is ${answer}`);\\n         * });\\n         * ```\\n         *\\n         * Using an `AbortController` to cancel a question.\\n         *\\n         * ```js\\n         * const ac = new AbortController();\\n         * const signal = ac.signal;\\n         *\\n         * rl.question('What is your favorite food? ', { signal }, (answer) => {\\n         *   console.log(`Oh, so your favorite food is ${answer}`);\\n         * });\\n         *\\n         * signal.addEventListener('abort', () => {\\n         *   console.log('The food question timed out');\\n         * }, { once: true });\\n         *\\n         * setTimeout(() => ac.abort(), 10000);\\n         * ```\\n         *\\n         * If this method is invoked as it's util.promisify()ed version, it returns a\\n         * Promise that fulfills with the answer. If the question is canceled using\\n         * an `AbortController` it will reject with an `AbortError`.\\n         *\\n         * ```js\\n         * const util = require('util');\\n         * const question = util.promisify(rl.question).bind(rl);\\n         *\\n         * async function questionExample() {\\n         *   try {\\n         *     const answer = await question('What is you favorite food? ');\\n         *     console.log(`Oh, so your favorite food is ${answer}`);\\n         *   } catch (err) {\\n         *     console.error('Question rejected', err);\\n         *   }\\n         * }\\n         * questionExample();\\n         * ```\\n         * @since v0.3.3\\n         * @param query A statement or query to write to `output`, prepended to the prompt.\\n         * @param callback A callback function that is invoked with the user's input in response to the `query`.\\n         */\\n        question(query: string, callback: (answer: string) => void): void;\\n        question(query: string, options: Abortable, callback: (answer: string) => void): void;\\n        /**\\n         * The `rl.pause()` method pauses the `input` stream, allowing it to be resumed\\n         * later if necessary.\\n         *\\n         * Calling `rl.pause()` does not immediately pause other events (including`'line'`) from being emitted by the `readline.Interface` instance.\\n         * @since v0.3.4\\n         */\\n        pause(): this;\\n        /**\\n         * The `rl.resume()` method resumes the `input` stream if it has been paused.\\n         * @since v0.3.4\\n         */\\n        resume(): this;\\n        /**\\n         * The `rl.close()` method closes the `readline.Interface` instance and\\n         * relinquishes control over the `input` and `output` streams. When called,\\n         * the `'close'` event will be emitted.\\n         *\\n         * Calling `rl.close()` does not immediately stop other events (including `'line'`)\\n         * from being emitted by the `readline.Interface` instance.\\n         * @since v0.1.98\\n         */\\n        close(): void;\\n        /**\\n         * The `rl.write()` method will write either `data` or a key sequence identified\\n         * by `key` to the `output`. The `key` argument is supported only if `output` is\\n         * a `TTY` text terminal. See `TTY keybindings` for a list of key\\n         * combinations.\\n         *\\n         * If `key` is specified, `data` is ignored.\\n         *\\n         * When called, `rl.write()` will resume the `input` stream if it has been\\n         * paused.\\n         *\\n         * If the `readline.Interface` was created with `output` set to `null` or`undefined` the `data` and `key` are not written.\\n         *\\n         * ```js\\n         * rl.write('Delete this!');\\n         * // Simulate Ctrl+U to delete the line written previously\\n         * rl.write(null, { ctrl: true, name: 'u' });\\n         * ```\\n         *\\n         * The `rl.write()` method will write the data to the `readline` `Interface`'s`input`_as if it were provided by the user_.\\n         * @since v0.1.98\\n         */\\n        write(data: string | Buffer, key?: Key): void;\\n        write(data: undefined | null | string | Buffer, key: Key): void;\\n        /**\\n         * Returns the real position of the cursor in relation to the input\\n         * prompt + string. Long input (wrapping) strings, as well as multiple\\n         * line prompts are included in the calculations.\\n         * @since v13.5.0, v12.16.0\\n         */\\n        getCursorPos(): CursorPos;\\n        /**\\n         * events.EventEmitter\\n         * 1. close\\n         * 2. line\\n         * 3. pause\\n         * 4. resume\\n         * 5. SIGCONT\\n         * 6. SIGINT\\n         * 7. SIGTSTP\\n         * 8. history\\n         */\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        addListener(event: 'close', listener: () => void): this;\\n        addListener(event: 'line', listener: (input: string) => void): this;\\n        addListener(event: 'pause', listener: () => void): this;\\n        addListener(event: 'resume', listener: () => void): this;\\n        addListener(event: 'SIGCONT', listener: () => void): this;\\n        addListener(event: 'SIGINT', listener: () => void): this;\\n        addListener(event: 'SIGTSTP', listener: () => void): this;\\n        addListener(event: 'history', listener: (history: string[]) => void): this;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        emit(event: 'close'): boolean;\\n        emit(event: 'line', input: string): boolean;\\n        emit(event: 'pause'): boolean;\\n        emit(event: 'resume'): boolean;\\n        emit(event: 'SIGCONT'): boolean;\\n        emit(event: 'SIGINT'): boolean;\\n        emit(event: 'SIGTSTP'): boolean;\\n        emit(event: 'history', history: string[]): boolean;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        on(event: 'close', listener: () => void): this;\\n        on(event: 'line', listener: (input: string) => void): this;\\n        on(event: 'pause', listener: () => void): this;\\n        on(event: 'resume', listener: () => void): this;\\n        on(event: 'SIGCONT', listener: () => void): this;\\n        on(event: 'SIGINT', listener: () => void): this;\\n        on(event: 'SIGTSTP', listener: () => void): this;\\n        on(event: 'history', listener: (history: string[]) => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        once(event: 'close', listener: () => void): this;\\n        once(event: 'line', listener: (input: string) => void): this;\\n        once(event: 'pause', listener: () => void): this;\\n        once(event: 'resume', listener: () => void): this;\\n        once(event: 'SIGCONT', listener: () => void): this;\\n        once(event: 'SIGINT', listener: () => void): this;\\n        once(event: 'SIGTSTP', listener: () => void): this;\\n        once(event: 'history', listener: (history: string[]) => void): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'close', listener: () => void): this;\\n        prependListener(event: 'line', listener: (input: string) => void): this;\\n        prependListener(event: 'pause', listener: () => void): this;\\n        prependListener(event: 'resume', listener: () => void): this;\\n        prependListener(event: 'SIGCONT', listener: () => void): this;\\n        prependListener(event: 'SIGINT', listener: () => void): this;\\n        prependListener(event: 'SIGTSTP', listener: () => void): this;\\n        prependListener(event: 'history', listener: (history: string[]) => void): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'close', listener: () => void): this;\\n        prependOnceListener(event: 'line', listener: (input: string) => void): this;\\n        prependOnceListener(event: 'pause', listener: () => void): this;\\n        prependOnceListener(event: 'resume', listener: () => void): this;\\n        prependOnceListener(event: 'SIGCONT', listener: () => void): this;\\n        prependOnceListener(event: 'SIGINT', listener: () => void): this;\\n        prependOnceListener(event: 'SIGTSTP', listener: () => void): this;\\n        prependOnceListener(event: 'history', listener: (history: string[]) => void): this;\\n        [Symbol.asyncIterator](): AsyncIterableIterator<string>;\\n    }\\n    export type ReadLine = Interface; // type forwarded for backwards compatibility\\n    export type Completer = (line: string) => CompleterResult;\\n    export type AsyncCompleter = (line: string, callback: (err?: null | Error, result?: CompleterResult) => void) => void;\\n    export type CompleterResult = [string[], string];\\n    export interface ReadLineOptions {\\n        input: NodeJS.ReadableStream;\\n        output?: NodeJS.WritableStream | undefined;\\n        completer?: Completer | AsyncCompleter | undefined;\\n        terminal?: boolean | undefined;\\n        /**\\n         *  Initial list of history lines. This option makes sense\\n         * only if `terminal` is set to `true` by the user or by an internal `output`\\n         * check, otherwise the history caching mechanism is not initialized at all.\\n         * @default []\\n         */\\n        history?: string[] | undefined;\\n        historySize?: number | undefined;\\n        prompt?: string | undefined;\\n        crlfDelay?: number | undefined;\\n        /**\\n         * If `true`, when a new input line added\\n         * to the history list duplicates an older one, this removes the older line\\n         * from the list.\\n         * @default false\\n         */\\n        removeHistoryDuplicates?: boolean | undefined;\\n        escapeCodeTimeout?: number | undefined;\\n        tabSize?: number | undefined;\\n    }\\n    /**\\n     * The `readline.createInterface()` method creates a new `readline.Interface`instance.\\n     *\\n     * ```js\\n     * const readline = require('readline');\\n     * const rl = readline.createInterface({\\n     *   input: process.stdin,\\n     *   output: process.stdout\\n     * });\\n     * ```\\n     *\\n     * Once the `readline.Interface` instance is created, the most common case is to\\n     * listen for the `'line'` event:\\n     *\\n     * ```js\\n     * rl.on('line', (line) => {\\n     *   console.log(`Received: ${line}`);\\n     * });\\n     * ```\\n     *\\n     * If `terminal` is `true` for this instance then the `output` stream will get\\n     * the best compatibility if it defines an `output.columns` property and emits\\n     * a `'resize'` event on the `output` if or when the columns ever change\\n     * (`process.stdout` does this automatically when it is a TTY).\\n     *\\n     * When creating a `readline.Interface` using `stdin` as input, the program\\n     * will not terminate until it receives `EOF` (Ctrl+D on\\n     * Linux/macOS, Ctrl+Z followed by Return on\\n     * Windows).\\n     * If you want your application to exit without waiting for user input, you can `unref()` the standard input stream:\\n     *\\n     * ```js\\n     * process.stdin.unref();\\n     * ```\\n     * @since v0.1.98\\n     */\\n    export function createInterface(input: NodeJS.ReadableStream, output?: NodeJS.WritableStream, completer?: Completer | AsyncCompleter, terminal?: boolean): Interface;\\n    export function createInterface(options: ReadLineOptions): Interface;\\n    /**\\n     * The `readline.emitKeypressEvents()` method causes the given `Readable` stream to begin emitting `'keypress'` events corresponding to received input.\\n     *\\n     * Optionally, `interface` specifies a `readline.Interface` instance for which\\n     * autocompletion is disabled when copy-pasted input is detected.\\n     *\\n     * If the `stream` is a `TTY`, then it must be in raw mode.\\n     *\\n     * This is automatically called by any readline instance on its `input` if the`input` is a terminal. Closing the `readline` instance does not stop\\n     * the `input` from emitting `'keypress'` events.\\n     *\\n     * ```js\\n     * readline.emitKeypressEvents(process.stdin);\\n     * if (process.stdin.isTTY)\\n     *   process.stdin.setRawMode(true);\\n     * ```\\n     *\\n     * ## Example: Tiny CLI\\n     *\\n     * The following example illustrates the use of `readline.Interface` class to\\n     * implement a small command-line interface:\\n     *\\n     * ```js\\n     * const readline = require('readline');\\n     * const rl = readline.createInterface({\\n     *   input: process.stdin,\\n     *   output: process.stdout,\\n     *   prompt: 'OHAI> '\\n     * });\\n     *\\n     * rl.prompt();\\n     *\\n     * rl.on('line', (line) => {\\n     *   switch (line.trim()) {\\n     *     case 'hello':\\n     *       console.log('world!');\\n     *       break;\\n     *     default:\\n     *       console.log(`Say what? I might have heard '${line.trim()}'`);\\n     *       break;\\n     *   }\\n     *   rl.prompt();\\n     * }).on('close', () => {\\n     *   console.log('Have a great day!');\\n     *   process.exit(0);\\n     * });\\n     * ```\\n     *\\n     * ## Example: Read file stream line-by-Line\\n     *\\n     * A common use case for `readline` is to consume an input file one line at a\\n     * time. The easiest way to do so is leveraging the `fs.ReadStream` API as\\n     * well as a `for await...of` loop:\\n     *\\n     * ```js\\n     * const fs = require('fs');\\n     * const readline = require('readline');\\n     *\\n     * async function processLineByLine() {\\n     *   const fileStream = fs.createReadStream('input.txt');\\n     *\\n     *   const rl = readline.createInterface({\\n     *     input: fileStream,\\n     *     crlfDelay: Infinity\\n     *   });\\n     *   // Note: we use the crlfDelay option to recognize all instances of CR LF\\n     *   // ('\\\\r\\\\n') in input.txt as a single line break.\\n     *\\n     *   for await (const line of rl) {\\n     *     // Each line in input.txt will be successively available here as `line`.\\n     *     console.log(`Line from file: ${line}`);\\n     *   }\\n     * }\\n     *\\n     * processLineByLine();\\n     * ```\\n     *\\n     * Alternatively, one could use the `'line'` event:\\n     *\\n     * ```js\\n     * const fs = require('fs');\\n     * const readline = require('readline');\\n     *\\n     * const rl = readline.createInterface({\\n     *   input: fs.createReadStream('sample.txt'),\\n     *   crlfDelay: Infinity\\n     * });\\n     *\\n     * rl.on('line', (line) => {\\n     *   console.log(`Line from file: ${line}`);\\n     * });\\n     * ```\\n     *\\n     * Currently, `for await...of` loop can be a bit slower. If `async` / `await`flow and speed are both essential, a mixed approach can be applied:\\n     *\\n     * ```js\\n     * const { once } = require('events');\\n     * const { createReadStream } = require('fs');\\n     * const { createInterface } = require('readline');\\n     *\\n     * (async function processLineByLine() {\\n     *   try {\\n     *     const rl = createInterface({\\n     *       input: createReadStream('big-file.txt'),\\n     *       crlfDelay: Infinity\\n     *     });\\n     *\\n     *     rl.on('line', (line) => {\\n     *       // Process the line.\\n     *     });\\n     *\\n     *     await once(rl, 'close');\\n     *\\n     *     console.log('File processed.');\\n     *   } catch (err) {\\n     *     console.error(err);\\n     *   }\\n     * })();\\n     * ```\\n     * @since v0.7.7\\n     */\\n    export function emitKeypressEvents(stream: NodeJS.ReadableStream, readlineInterface?: Interface): void;\\n    export type Direction = -1 | 0 | 1;\\n    export interface CursorPos {\\n        rows: number;\\n        cols: number;\\n    }\\n    /**\\n     * The `readline.clearLine()` method clears current line of given `TTY` stream\\n     * in a specified direction identified by `dir`.\\n     * @since v0.7.7\\n     * @param callback Invoked once the operation completes.\\n     * @return `false` if `stream` wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`.\\n     */\\n    export function clearLine(stream: NodeJS.WritableStream, dir: Direction, callback?: () => void): boolean;\\n    /**\\n     * The `readline.clearScreenDown()` method clears the given `TTY` stream from\\n     * the current position of the cursor down.\\n     * @since v0.7.7\\n     * @param callback Invoked once the operation completes.\\n     * @return `false` if `stream` wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`.\\n     */\\n    export function clearScreenDown(stream: NodeJS.WritableStream, callback?: () => void): boolean;\\n    /**\\n     * The `readline.cursorTo()` method moves cursor to the specified position in a\\n     * given `TTY` `stream`.\\n     * @since v0.7.7\\n     * @param callback Invoked once the operation completes.\\n     * @return `false` if `stream` wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`.\\n     */\\n    export function cursorTo(stream: NodeJS.WritableStream, x: number, y?: number, callback?: () => void): boolean;\\n    /**\\n     * The `readline.moveCursor()` method moves the cursor _relative_ to its current\\n     * position in a given `TTY` `stream`.\\n     *\\n     * ## Example: Tiny CLI\\n     *\\n     * The following example illustrates the use of `readline.Interface` class to\\n     * implement a small command-line interface:\\n     *\\n     * ```js\\n     * const readline = require('readline');\\n     * const rl = readline.createInterface({\\n     *   input: process.stdin,\\n     *   output: process.stdout,\\n     *   prompt: 'OHAI> '\\n     * });\\n     *\\n     * rl.prompt();\\n     *\\n     * rl.on('line', (line) => {\\n     *   switch (line.trim()) {\\n     *     case 'hello':\\n     *       console.log('world!');\\n     *       break;\\n     *     default:\\n     *       console.log(`Say what? I might have heard '${line.trim()}'`);\\n     *       break;\\n     *   }\\n     *   rl.prompt();\\n     * }).on('close', () => {\\n     *   console.log('Have a great day!');\\n     *   process.exit(0);\\n     * });\\n     * ```\\n     *\\n     * ## Example: Read file stream line-by-Line\\n     *\\n     * A common use case for `readline` is to consume an input file one line at a\\n     * time. The easiest way to do so is leveraging the `fs.ReadStream` API as\\n     * well as a `for await...of` loop:\\n     *\\n     * ```js\\n     * const fs = require('fs');\\n     * const readline = require('readline');\\n     *\\n     * async function processLineByLine() {\\n     *   const fileStream = fs.createReadStream('input.txt');\\n     *\\n     *   const rl = readline.createInterface({\\n     *     input: fileStream,\\n     *     crlfDelay: Infinity\\n     *   });\\n     *   // Note: we use the crlfDelay option to recognize all instances of CR LF\\n     *   // ('\\\\r\\\\n') in input.txt as a single line break.\\n     *\\n     *   for await (const line of rl) {\\n     *     // Each line in input.txt will be successively available here as `line`.\\n     *     console.log(`Line from file: ${line}`);\\n     *   }\\n     * }\\n     *\\n     * processLineByLine();\\n     * ```\\n     *\\n     * Alternatively, one could use the `'line'` event:\\n     *\\n     * ```js\\n     * const fs = require('fs');\\n     * const readline = require('readline');\\n     *\\n     * const rl = readline.createInterface({\\n     *   input: fs.createReadStream('sample.txt'),\\n     *   crlfDelay: Infinity\\n     * });\\n     *\\n     * rl.on('line', (line) => {\\n     *   console.log(`Line from file: ${line}`);\\n     * });\\n     * ```\\n     *\\n     * Currently, `for await...of` loop can be a bit slower. If `async` / `await`flow and speed are both essential, a mixed approach can be applied:\\n     *\\n     * ```js\\n     * const { once } = require('events');\\n     * const { createReadStream } = require('fs');\\n     * const { createInterface } = require('readline');\\n     *\\n     * (async function processLineByLine() {\\n     *   try {\\n     *     const rl = createInterface({\\n     *       input: createReadStream('big-file.txt'),\\n     *       crlfDelay: Infinity\\n     *     });\\n     *\\n     *     rl.on('line', (line) => {\\n     *       // Process the line.\\n     *     });\\n     *\\n     *     await once(rl, 'close');\\n     *\\n     *     console.log('File processed.');\\n     *   } catch (err) {\\n     *     console.error(err);\\n     *   }\\n     * })();\\n     * ```\\n     * @since v0.7.7\\n     * @param callback Invoked once the operation completes.\\n     * @return `false` if `stream` wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`.\\n     */\\n    export function moveCursor(stream: NodeJS.WritableStream, dx: number, dy: number, callback?: () => void): boolean;\\n}\\ndeclare module 'node:readline' {\\n    export * from 'readline';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/repl.d.ts\":\"/**\\n * The `repl` module provides a Read-Eval-Print-Loop (REPL) implementation that\\n * is available both as a standalone program or includible in other applications.\\n * It can be accessed using:\\n *\\n * ```js\\n * const repl = require('repl');\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/repl.js)\\n */\\ndeclare module 'repl' {\\n    import { Interface, Completer, AsyncCompleter } from 'node:readline';\\n    import { Context } from 'node:vm';\\n    import { InspectOptions } from 'node:util';\\n    interface ReplOptions {\\n        /**\\n         * The input prompt to display.\\n         * @default \\\"> \\\"\\n         */\\n        prompt?: string | undefined;\\n        /**\\n         * The `Readable` stream from which REPL input will be read.\\n         * @default process.stdin\\n         */\\n        input?: NodeJS.ReadableStream | undefined;\\n        /**\\n         * The `Writable` stream to which REPL output will be written.\\n         * @default process.stdout\\n         */\\n        output?: NodeJS.WritableStream | undefined;\\n        /**\\n         * If `true`, specifies that the output should be treated as a TTY terminal, and have\\n         * ANSI/VT100 escape codes written to it.\\n         * Default: checking the value of the `isTTY` property on the output stream upon\\n         * instantiation.\\n         */\\n        terminal?: boolean | undefined;\\n        /**\\n         * The function to be used when evaluating each given line of input.\\n         * Default: an async wrapper for the JavaScript `eval()` function. An `eval` function can\\n         * error with `repl.Recoverable` to indicate the input was incomplete and prompt for\\n         * additional lines.\\n         *\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_default_evaluation\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_custom_evaluation_functions\\n         */\\n        eval?: REPLEval | undefined;\\n        /**\\n         * Defines if the repl prints output previews or not.\\n         * @default `true` Always `false` in case `terminal` is falsy.\\n         */\\n        preview?: boolean | undefined;\\n        /**\\n         * If `true`, specifies that the default `writer` function should include ANSI color\\n         * styling to REPL output. If a custom `writer` function is provided then this has no\\n         * effect.\\n         * Default: the REPL instance's `terminal` value.\\n         */\\n        useColors?: boolean | undefined;\\n        /**\\n         * If `true`, specifies that the default evaluation function will use the JavaScript\\n         * `global` as the context as opposed to creating a new separate context for the REPL\\n         * instance. The node CLI REPL sets this value to `true`.\\n         * Default: `false`.\\n         */\\n        useGlobal?: boolean | undefined;\\n        /**\\n         * If `true`, specifies that the default writer will not output the return value of a\\n         * command if it evaluates to `undefined`.\\n         * Default: `false`.\\n         */\\n        ignoreUndefined?: boolean | undefined;\\n        /**\\n         * The function to invoke to format the output of each command before writing to `output`.\\n         * Default: a wrapper for `util.inspect`.\\n         *\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_customizing_repl_output\\n         */\\n        writer?: REPLWriter | undefined;\\n        /**\\n         * An optional function used for custom Tab auto completion.\\n         *\\n         * @see https://nodejs.org/dist/latest-v11.x/docs/api/readline.html#readline_use_of_the_completer_function\\n         */\\n        completer?: Completer | AsyncCompleter | undefined;\\n        /**\\n         * A flag that specifies whether the default evaluator executes all JavaScript commands in\\n         * strict mode or default (sloppy) mode.\\n         * Accepted values are:\\n         * - `repl.REPL_MODE_SLOPPY` - evaluates expressions in sloppy mode.\\n         * - `repl.REPL_MODE_STRICT` - evaluates expressions in strict mode. This is equivalent to\\n         *   prefacing every repl statement with `'use strict'`.\\n         */\\n        replMode?: typeof REPL_MODE_SLOPPY | typeof REPL_MODE_STRICT | undefined;\\n        /**\\n         * Stop evaluating the current piece of code when `SIGINT` is received, i.e. `Ctrl+C` is\\n         * pressed. This cannot be used together with a custom `eval` function.\\n         * Default: `false`.\\n         */\\n        breakEvalOnSigint?: boolean | undefined;\\n    }\\n    type REPLEval = (this: REPLServer, evalCmd: string, context: Context, file: string, cb: (err: Error | null, result: any) => void) => void;\\n    type REPLWriter = (this: REPLServer, obj: any) => string;\\n    /**\\n     * This is the default \\\"writer\\\" value, if none is passed in the REPL options,\\n     * and it can be overridden by custom print functions.\\n     */\\n    const writer: REPLWriter & {\\n        options: InspectOptions;\\n    };\\n    type REPLCommandAction = (this: REPLServer, text: string) => void;\\n    interface REPLCommand {\\n        /**\\n         * Help text to be displayed when `.help` is entered.\\n         */\\n        help?: string | undefined;\\n        /**\\n         * The function to execute, optionally accepting a single string argument.\\n         */\\n        action: REPLCommandAction;\\n    }\\n    /**\\n     * Instances of `repl.REPLServer` are created using the {@link start} method\\n     * or directly using the JavaScript `new` keyword.\\n     *\\n     * ```js\\n     * const repl = require('repl');\\n     *\\n     * const options = { useColors: true };\\n     *\\n     * const firstInstance = repl.start(options);\\n     * const secondInstance = new repl.REPLServer(options);\\n     * ```\\n     * @since v0.1.91\\n     */\\n    class REPLServer extends Interface {\\n        /**\\n         * The `vm.Context` provided to the `eval` function to be used for JavaScript\\n         * evaluation.\\n         */\\n        readonly context: Context;\\n        /**\\n         * @deprecated since v14.3.0 - Use `input` instead.\\n         */\\n        readonly inputStream: NodeJS.ReadableStream;\\n        /**\\n         * @deprecated since v14.3.0 - Use `output` instead.\\n         */\\n        readonly outputStream: NodeJS.WritableStream;\\n        /**\\n         * The `Readable` stream from which REPL input will be read.\\n         */\\n        readonly input: NodeJS.ReadableStream;\\n        /**\\n         * The `Writable` stream to which REPL output will be written.\\n         */\\n        readonly output: NodeJS.WritableStream;\\n        /**\\n         * The commands registered via `replServer.defineCommand()`.\\n         */\\n        readonly commands: NodeJS.ReadOnlyDict<REPLCommand>;\\n        /**\\n         * A value indicating whether the REPL is currently in \\\"editor mode\\\".\\n         *\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_commands_and_special_keys\\n         */\\n        readonly editorMode: boolean;\\n        /**\\n         * A value indicating whether the `_` variable has been assigned.\\n         *\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_assignment_of_the_underscore_variable\\n         */\\n        readonly underscoreAssigned: boolean;\\n        /**\\n         * The last evaluation result from the REPL (assigned to the `_` variable inside of the REPL).\\n         *\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_assignment_of_the_underscore_variable\\n         */\\n        readonly last: any;\\n        /**\\n         * A value indicating whether the `_error` variable has been assigned.\\n         *\\n         * @since v9.8.0\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_assignment_of_the_underscore_variable\\n         */\\n        readonly underscoreErrAssigned: boolean;\\n        /**\\n         * The last error raised inside the REPL (assigned to the `_error` variable inside of the REPL).\\n         *\\n         * @since v9.8.0\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_assignment_of_the_underscore_variable\\n         */\\n        readonly lastError: any;\\n        /**\\n         * Specified in the REPL options, this is the function to be used when evaluating each\\n         * given line of input. If not specified in the REPL options, this is an async wrapper\\n         * for the JavaScript `eval()` function.\\n         */\\n        readonly eval: REPLEval;\\n        /**\\n         * Specified in the REPL options, this is a value indicating whether the default\\n         * `writer` function should include ANSI color styling to REPL output.\\n         */\\n        readonly useColors: boolean;\\n        /**\\n         * Specified in the REPL options, this is a value indicating whether the default `eval`\\n         * function will use the JavaScript `global` as the context as opposed to creating a new\\n         * separate context for the REPL instance.\\n         */\\n        readonly useGlobal: boolean;\\n        /**\\n         * Specified in the REPL options, this is a value indicating whether the default `writer`\\n         * function should output the result of a command if it evaluates to `undefined`.\\n         */\\n        readonly ignoreUndefined: boolean;\\n        /**\\n         * Specified in the REPL options, this is the function to invoke to format the output of\\n         * each command before writing to `outputStream`. If not specified in the REPL options,\\n         * this will be a wrapper for `util.inspect`.\\n         */\\n        readonly writer: REPLWriter;\\n        /**\\n         * Specified in the REPL options, this is the function to use for custom Tab auto-completion.\\n         */\\n        readonly completer: Completer | AsyncCompleter;\\n        /**\\n         * Specified in the REPL options, this is a flag that specifies whether the default `eval`\\n         * function should execute all JavaScript commands in strict mode or default (sloppy) mode.\\n         * Possible values are:\\n         * - `repl.REPL_MODE_SLOPPY` - evaluates expressions in sloppy mode.\\n         * - `repl.REPL_MODE_STRICT` - evaluates expressions in strict mode. This is equivalent to\\n         *    prefacing every repl statement with `'use strict'`.\\n         */\\n        readonly replMode: typeof REPL_MODE_SLOPPY | typeof REPL_MODE_STRICT;\\n        /**\\n         * NOTE: According to the documentation:\\n         *\\n         * > Instances of `repl.REPLServer` are created using the `repl.start()` method and\\n         * > _should not_ be created directly using the JavaScript `new` keyword.\\n         *\\n         * `REPLServer` cannot be subclassed due to implementation specifics in NodeJS.\\n         *\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_class_replserver\\n         */\\n        private constructor();\\n        /**\\n         * The `replServer.defineCommand()` method is used to add new `.`\\\\-prefixed commands\\n         * to the REPL instance. Such commands are invoked by typing a `.` followed by the`keyword`. The `cmd` is either a `Function` or an `Object` with the following\\n         * properties:\\n         *\\n         * The following example shows two new commands added to the REPL instance:\\n         *\\n         * ```js\\n         * const repl = require('repl');\\n         *\\n         * const replServer = repl.start({ prompt: '> ' });\\n         * replServer.defineCommand('sayhello', {\\n         *   help: 'Say hello',\\n         *   action(name) {\\n         *     this.clearBufferedCommand();\\n         *     console.log(`Hello, ${name}!`);\\n         *     this.displayPrompt();\\n         *   }\\n         * });\\n         * replServer.defineCommand('saybye', function saybye() {\\n         *   console.log('Goodbye!');\\n         *   this.close();\\n         * });\\n         * ```\\n         *\\n         * The new commands can then be used from within the REPL instance:\\n         *\\n         * ```console\\n         * > .sayhello Node.js User\\n         * Hello, Node.js User!\\n         * > .saybye\\n         * Goodbye!\\n         * ```\\n         * @since v0.3.0\\n         * @param keyword The command keyword (_without_ a leading `.` character).\\n         * @param cmd The function to invoke when the command is processed.\\n         */\\n        defineCommand(keyword: string, cmd: REPLCommandAction | REPLCommand): void;\\n        /**\\n         * The `replServer.displayPrompt()` method readies the REPL instance for input\\n         * from the user, printing the configured `prompt` to a new line in the `output`and resuming the `input` to accept new input.\\n         *\\n         * When multi-line input is being entered, an ellipsis is printed rather than the\\n         * 'prompt'.\\n         *\\n         * When `preserveCursor` is `true`, the cursor placement will not be reset to `0`.\\n         *\\n         * The `replServer.displayPrompt` method is primarily intended to be called from\\n         * within the action function for commands registered using the`replServer.defineCommand()` method.\\n         * @since v0.1.91\\n         */\\n        displayPrompt(preserveCursor?: boolean): void;\\n        /**\\n         * The `replServer.clearBufferedCommand()` method clears any command that has been\\n         * buffered but not yet executed. This method is primarily intended to be\\n         * called from within the action function for commands registered using the`replServer.defineCommand()` method.\\n         * @since v9.0.0\\n         */\\n        clearBufferedCommand(): void;\\n        /**\\n         * Initializes a history log file for the REPL instance. When executing the\\n         * Node.js binary and using the command-line REPL, a history file is initialized\\n         * by default. However, this is not the case when creating a REPL\\n         * programmatically. Use this method to initialize a history log file when working\\n         * with REPL instances programmatically.\\n         * @since v11.10.0\\n         * @param historyPath the path to the history file\\n         * @param callback called when history writes are ready or upon error\\n         */\\n        setupHistory(path: string, callback: (err: Error | null, repl: this) => void): void;\\n        /**\\n         * events.EventEmitter\\n         * 1. close - inherited from `readline.Interface`\\n         * 2. line - inherited from `readline.Interface`\\n         * 3. pause - inherited from `readline.Interface`\\n         * 4. resume - inherited from `readline.Interface`\\n         * 5. SIGCONT - inherited from `readline.Interface`\\n         * 6. SIGINT - inherited from `readline.Interface`\\n         * 7. SIGTSTP - inherited from `readline.Interface`\\n         * 8. exit\\n         * 9. reset\\n         */\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        addListener(event: 'close', listener: () => void): this;\\n        addListener(event: 'line', listener: (input: string) => void): this;\\n        addListener(event: 'pause', listener: () => void): this;\\n        addListener(event: 'resume', listener: () => void): this;\\n        addListener(event: 'SIGCONT', listener: () => void): this;\\n        addListener(event: 'SIGINT', listener: () => void): this;\\n        addListener(event: 'SIGTSTP', listener: () => void): this;\\n        addListener(event: 'exit', listener: () => void): this;\\n        addListener(event: 'reset', listener: (context: Context) => void): this;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        emit(event: 'close'): boolean;\\n        emit(event: 'line', input: string): boolean;\\n        emit(event: 'pause'): boolean;\\n        emit(event: 'resume'): boolean;\\n        emit(event: 'SIGCONT'): boolean;\\n        emit(event: 'SIGINT'): boolean;\\n        emit(event: 'SIGTSTP'): boolean;\\n        emit(event: 'exit'): boolean;\\n        emit(event: 'reset', context: Context): boolean;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        on(event: 'close', listener: () => void): this;\\n        on(event: 'line', listener: (input: string) => void): this;\\n        on(event: 'pause', listener: () => void): this;\\n        on(event: 'resume', listener: () => void): this;\\n        on(event: 'SIGCONT', listener: () => void): this;\\n        on(event: 'SIGINT', listener: () => void): this;\\n        on(event: 'SIGTSTP', listener: () => void): this;\\n        on(event: 'exit', listener: () => void): this;\\n        on(event: 'reset', listener: (context: Context) => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        once(event: 'close', listener: () => void): this;\\n        once(event: 'line', listener: (input: string) => void): this;\\n        once(event: 'pause', listener: () => void): this;\\n        once(event: 'resume', listener: () => void): this;\\n        once(event: 'SIGCONT', listener: () => void): this;\\n        once(event: 'SIGINT', listener: () => void): this;\\n        once(event: 'SIGTSTP', listener: () => void): this;\\n        once(event: 'exit', listener: () => void): this;\\n        once(event: 'reset', listener: (context: Context) => void): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'close', listener: () => void): this;\\n        prependListener(event: 'line', listener: (input: string) => void): this;\\n        prependListener(event: 'pause', listener: () => void): this;\\n        prependListener(event: 'resume', listener: () => void): this;\\n        prependListener(event: 'SIGCONT', listener: () => void): this;\\n        prependListener(event: 'SIGINT', listener: () => void): this;\\n        prependListener(event: 'SIGTSTP', listener: () => void): this;\\n        prependListener(event: 'exit', listener: () => void): this;\\n        prependListener(event: 'reset', listener: (context: Context) => void): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'close', listener: () => void): this;\\n        prependOnceListener(event: 'line', listener: (input: string) => void): this;\\n        prependOnceListener(event: 'pause', listener: () => void): this;\\n        prependOnceListener(event: 'resume', listener: () => void): this;\\n        prependOnceListener(event: 'SIGCONT', listener: () => void): this;\\n        prependOnceListener(event: 'SIGINT', listener: () => void): this;\\n        prependOnceListener(event: 'SIGTSTP', listener: () => void): this;\\n        prependOnceListener(event: 'exit', listener: () => void): this;\\n        prependOnceListener(event: 'reset', listener: (context: Context) => void): this;\\n    }\\n    /**\\n     * A flag passed in the REPL options. Evaluates expressions in sloppy mode.\\n     */\\n    const REPL_MODE_SLOPPY: unique symbol;\\n    /**\\n     * A flag passed in the REPL options. Evaluates expressions in strict mode.\\n     * This is equivalent to prefacing every repl statement with `'use strict'`.\\n     */\\n    const REPL_MODE_STRICT: unique symbol;\\n    /**\\n     * The `repl.start()` method creates and starts a {@link REPLServer} instance.\\n     *\\n     * If `options` is a string, then it specifies the input prompt:\\n     *\\n     * ```js\\n     * const repl = require('repl');\\n     *\\n     * // a Unix style prompt\\n     * repl.start('$ ');\\n     * ```\\n     * @since v0.1.91\\n     */\\n    function start(options?: string | ReplOptions): REPLServer;\\n    /**\\n     * Indicates a recoverable error that a `REPLServer` can use to support multi-line input.\\n     *\\n     * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_recoverable_errors\\n     */\\n    class Recoverable extends SyntaxError {\\n        err: Error;\\n        constructor(err: Error);\\n    }\\n}\\ndeclare module 'node:repl' {\\n    export * from 'repl';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/stream.d.ts\":\"/**\\n * A stream is an abstract interface for working with streaming data in Node.js.\\n * The `stream` module provides an API for implementing the stream interface.\\n *\\n * There are many stream objects provided by Node.js. For instance, a `request to an HTTP server` and `process.stdout` are both stream instances.\\n *\\n * Streams can be readable, writable, or both. All streams are instances of `EventEmitter`.\\n *\\n * To access the `stream` module:\\n *\\n * ```js\\n * const stream = require('stream');\\n * ```\\n *\\n * The `stream` module is useful for creating new types of stream instances. It is\\n * usually not necessary to use the `stream` module to consume streams.\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/stream.js)\\n */\\ndeclare module 'stream' {\\n    import { EventEmitter, Abortable } from 'node:events';\\n    import { Blob as NodeBlob } from \\\"node:buffer\\\";\\n    import * as streamPromises from 'node:stream/promises';\\n    import * as streamConsumers from 'node:stream/consumers';\\n    import * as streamWeb from 'node:stream/web';\\n    class internal extends EventEmitter {\\n        pipe<T extends NodeJS.WritableStream>(\\n            destination: T,\\n            options?: {\\n                end?: boolean | undefined;\\n            }\\n        ): T;\\n    }\\n    namespace internal {\\n        class Stream extends internal {\\n            constructor(opts?: ReadableOptions);\\n        }\\n        interface StreamOptions<T extends Stream> extends Abortable {\\n            emitClose?: boolean | undefined;\\n            highWaterMark?: number | undefined;\\n            objectMode?: boolean | undefined;\\n            construct?(this: T, callback: (error?: Error | null) => void): void;\\n            destroy?(this: T, error: Error | null, callback: (error: Error | null) => void): void;\\n            autoDestroy?: boolean | undefined;\\n        }\\n        interface ReadableOptions extends StreamOptions<Readable> {\\n            encoding?: BufferEncoding | undefined;\\n            read?(this: Readable, size: number): void;\\n        }\\n        /**\\n         * @since v0.9.4\\n         */\\n        class Readable extends Stream implements NodeJS.ReadableStream {\\n            /**\\n             * A utility method for creating Readable Streams out of iterators.\\n             */\\n            static from(iterable: Iterable<any> | AsyncIterable<any>, options?: ReadableOptions): Readable;\\n            /**\\n             * A utility method for creating a `Readable` from a web `ReadableStream`.\\n             * @since v17.0.0\\n             * @experimental\\n             */\\n            static fromWeb(readableStream: streamWeb.ReadableStream, options?: Pick<ReadableOptions, 'encoding' | 'highWaterMark' | 'objectMode' | 'signal'>): Readable;\\n            /**\\n             * Returns whether the stream has been read from or cancelled.\\n             * @since v16.8.0\\n             */\\n            static isDisturbed(stream: Readable | NodeJS.ReadableStream): boolean;\\n            /**\\n             * A utility method for creating a web `ReadableStream` from a `Readable`.\\n             * @since v17.0.0\\n             * @experimental\\n             */\\n            static toWeb(streamReadable: Readable): streamWeb.ReadableStream;\\n            /**\\n             * Returns whether the stream was destroyed or errored before emitting `'end'`.\\n             * @since v16.8.0\\n             * @experimental\\n             */\\n            readonly readableAborted: boolean;\\n            /**\\n             * Is `true` if it is safe to call `readable.read()`, which means\\n             * the stream has not been destroyed or emitted `'error'` or `'end'`.\\n             * @since v11.4.0\\n             */\\n            readable: boolean;\\n            /**\\n             * Returns whether `'data'` has been emitted.\\n             * @since v16.7.0, v14.18.0\\n             * @experimental\\n             */\\n            readonly readableDidRead: boolean;\\n            /**\\n             * Getter for the property `encoding` of a given `Readable` stream. The `encoding`property can be set using the `readable.setEncoding()` method.\\n             * @since v12.7.0\\n             */\\n            readonly readableEncoding: BufferEncoding | null;\\n            /**\\n             * Becomes `true` when `'end'` event is emitted.\\n             * @since v12.9.0\\n             */\\n            readonly readableEnded: boolean;\\n            /**\\n             * This property reflects the current state of a `Readable` stream as described\\n             * in the `Three states` section.\\n             * @since v9.4.0\\n             */\\n            readonly readableFlowing: boolean | null;\\n            /**\\n             * Returns the value of `highWaterMark` passed when creating this `Readable`.\\n             * @since v9.3.0\\n             */\\n            readonly readableHighWaterMark: number;\\n            /**\\n             * This property contains the number of bytes (or objects) in the queue\\n             * ready to be read. The value provides introspection data regarding\\n             * the status of the `highWaterMark`.\\n             * @since v9.4.0\\n             */\\n            readonly readableLength: number;\\n            /**\\n             * Getter for the property `objectMode` of a given `Readable` stream.\\n             * @since v12.3.0\\n             */\\n            readonly readableObjectMode: boolean;\\n            /**\\n             * Is `true` after `readable.destroy()` has been called.\\n             * @since v18.0.0\\n             */\\n            destroyed: boolean;\\n            /**\\n             * Is true after 'close' has been emitted.\\n             * @since v8.0.0\\n             */\\n            readonly closed: boolean;\\n            /**\\n             * Returns error if the stream has been destroyed with an error.\\n             * @since v18.0.0\\n             */\\n            readonly errored: Error | null;\\n            constructor(opts?: ReadableOptions);\\n            _construct?(callback: (error?: Error | null) => void): void;\\n            _read(size: number): void;\\n            /**\\n             * The `readable.read()` method reads data out of the internal buffer and\\n             * returns it. If no data is available to be read, `null` is returned. By default,\\n             * the data is returned as a `Buffer` object unless an encoding has been\\n             * specified using the `readable.setEncoding()` method or the stream is operating\\n             * in object mode.\\n             *\\n             * The optional `size` argument specifies a specific number of bytes to read. If`size` bytes are not available to be read, `null` will be returned _unless_the stream has ended, in which\\n             * case all of the data remaining in the internal\\n             * buffer will be returned.\\n             *\\n             * If the `size` argument is not specified, all of the data contained in the\\n             * internal buffer will be returned.\\n             *\\n             * The `size` argument must be less than or equal to 1 GiB.\\n             *\\n             * The `readable.read()` method should only be called on `Readable` streams\\n             * operating in paused mode. In flowing mode, `readable.read()` is called\\n             * automatically until the internal buffer is fully drained.\\n             *\\n             * ```js\\n             * const readable = getReadableStreamSomehow();\\n             *\\n             * // 'readable' may be triggered multiple times as data is buffered in\\n             * readable.on('readable', () => {\\n             *   let chunk;\\n             *   console.log('Stream is readable (new data received in buffer)');\\n             *   // Use a loop to make sure we read all currently available data\\n             *   while (null !== (chunk = readable.read())) {\\n             *     console.log(`Read ${chunk.length} bytes of data...`);\\n             *   }\\n             * });\\n             *\\n             * // 'end' will be triggered once when there is no more data available\\n             * readable.on('end', () => {\\n             *   console.log('Reached end of stream.');\\n             * });\\n             * ```\\n             *\\n             * Each call to `readable.read()` returns a chunk of data, or `null`. The chunks\\n             * are not concatenated. A `while` loop is necessary to consume all data\\n             * currently in the buffer. When reading a large file `.read()` may return `null`,\\n             * having consumed all buffered content so far, but there is still more data to\\n             * come not yet buffered. In this case a new `'readable'` event will be emitted\\n             * when there is more data in the buffer. Finally the `'end'` event will be\\n             * emitted when there is no more data to come.\\n             *\\n             * Therefore to read a file's whole contents from a `readable`, it is necessary\\n             * to collect chunks across multiple `'readable'` events:\\n             *\\n             * ```js\\n             * const chunks = [];\\n             *\\n             * readable.on('readable', () => {\\n             *   let chunk;\\n             *   while (null !== (chunk = readable.read())) {\\n             *     chunks.push(chunk);\\n             *   }\\n             * });\\n             *\\n             * readable.on('end', () => {\\n             *   const content = chunks.join('');\\n             * });\\n             * ```\\n             *\\n             * A `Readable` stream in object mode will always return a single item from\\n             * a call to `readable.read(size)`, regardless of the value of the`size` argument.\\n             *\\n             * If the `readable.read()` method returns a chunk of data, a `'data'` event will\\n             * also be emitted.\\n             *\\n             * Calling {@link read} after the `'end'` event has\\n             * been emitted will return `null`. No runtime error will be raised.\\n             * @since v0.9.4\\n             * @param size Optional argument to specify how much data to read.\\n             */\\n            read(size?: number): any;\\n            /**\\n             * The `readable.setEncoding()` method sets the character encoding for\\n             * data read from the `Readable` stream.\\n             *\\n             * By default, no encoding is assigned and stream data will be returned as`Buffer` objects. Setting an encoding causes the stream data\\n             * to be returned as strings of the specified encoding rather than as `Buffer`objects. For instance, calling `readable.setEncoding('utf8')` will cause the\\n             * output data to be interpreted as UTF-8 data, and passed as strings. Calling`readable.setEncoding('hex')` will cause the data to be encoded in hexadecimal\\n             * string format.\\n             *\\n             * The `Readable` stream will properly handle multi-byte characters delivered\\n             * through the stream that would otherwise become improperly decoded if simply\\n             * pulled from the stream as `Buffer` objects.\\n             *\\n             * ```js\\n             * const readable = getReadableStreamSomehow();\\n             * readable.setEncoding('utf8');\\n             * readable.on('data', (chunk) => {\\n             *   assert.equal(typeof chunk, 'string');\\n             *   console.log('Got %d characters of string data:', chunk.length);\\n             * });\\n             * ```\\n             * @since v0.9.4\\n             * @param encoding The encoding to use.\\n             */\\n            setEncoding(encoding: BufferEncoding): this;\\n            /**\\n             * The `readable.pause()` method will cause a stream in flowing mode to stop\\n             * emitting `'data'` events, switching out of flowing mode. Any data that\\n             * becomes available will remain in the internal buffer.\\n             *\\n             * ```js\\n             * const readable = getReadableStreamSomehow();\\n             * readable.on('data', (chunk) => {\\n             *   console.log(`Received ${chunk.length} bytes of data.`);\\n             *   readable.pause();\\n             *   console.log('There will be no additional data for 1 second.');\\n             *   setTimeout(() => {\\n             *     console.log('Now data will start flowing again.');\\n             *     readable.resume();\\n             *   }, 1000);\\n             * });\\n             * ```\\n             *\\n             * The `readable.pause()` method has no effect if there is a `'readable'`event listener.\\n             * @since v0.9.4\\n             */\\n            pause(): this;\\n            /**\\n             * The `readable.resume()` method causes an explicitly paused `Readable` stream to\\n             * resume emitting `'data'` events, switching the stream into flowing mode.\\n             *\\n             * The `readable.resume()` method can be used to fully consume the data from a\\n             * stream without actually processing any of that data:\\n             *\\n             * ```js\\n             * getReadableStreamSomehow()\\n             *   .resume()\\n             *   .on('end', () => {\\n             *     console.log('Reached the end, but did not read anything.');\\n             *   });\\n             * ```\\n             *\\n             * The `readable.resume()` method has no effect if there is a `'readable'`event listener.\\n             * @since v0.9.4\\n             */\\n            resume(): this;\\n            /**\\n             * The `readable.isPaused()` method returns the current operating state of the`Readable`. This is used primarily by the mechanism that underlies the`readable.pipe()` method. In most\\n             * typical cases, there will be no reason to\\n             * use this method directly.\\n             *\\n             * ```js\\n             * const readable = new stream.Readable();\\n             *\\n             * readable.isPaused(); // === false\\n             * readable.pause();\\n             * readable.isPaused(); // === true\\n             * readable.resume();\\n             * readable.isPaused(); // === false\\n             * ```\\n             * @since v0.11.14\\n             */\\n            isPaused(): boolean;\\n            /**\\n             * The `readable.unpipe()` method detaches a `Writable` stream previously attached\\n             * using the {@link pipe} method.\\n             *\\n             * If the `destination` is not specified, then _all_ pipes are detached.\\n             *\\n             * If the `destination` is specified, but no pipe is set up for it, then\\n             * the method does nothing.\\n             *\\n             * ```js\\n             * const fs = require('fs');\\n             * const readable = getReadableStreamSomehow();\\n             * const writable = fs.createWriteStream('file.txt');\\n             * // All the data from readable goes into 'file.txt',\\n             * // but only for the first second.\\n             * readable.pipe(writable);\\n             * setTimeout(() => {\\n             *   console.log('Stop writing to file.txt.');\\n             *   readable.unpipe(writable);\\n             *   console.log('Manually close the file stream.');\\n             *   writable.end();\\n             * }, 1000);\\n             * ```\\n             * @since v0.9.4\\n             * @param destination Optional specific stream to unpipe\\n             */\\n            unpipe(destination?: NodeJS.WritableStream): this;\\n            /**\\n             * Passing `chunk` as `null` signals the end of the stream (EOF) and behaves the\\n             * same as `readable.push(null)`, after which no more data can be written. The EOF\\n             * signal is put at the end of the buffer and any buffered data will still be\\n             * flushed.\\n             *\\n             * The `readable.unshift()` method pushes a chunk of data back into the internal\\n             * buffer. This is useful in certain situations where a stream is being consumed by\\n             * code that needs to \\\"un-consume\\\" some amount of data that it has optimistically\\n             * pulled out of the source, so that the data can be passed on to some other party.\\n             *\\n             * The `stream.unshift(chunk)` method cannot be called after the `'end'` event\\n             * has been emitted or a runtime error will be thrown.\\n             *\\n             * Developers using `stream.unshift()` often should consider switching to\\n             * use of a `Transform` stream instead. See the `API for stream implementers` section for more information.\\n             *\\n             * ```js\\n             * // Pull off a header delimited by \\\\n\\\\n.\\n             * // Use unshift() if we get too much.\\n             * // Call the callback with (error, header, stream).\\n             * const { StringDecoder } = require('string_decoder');\\n             * function parseHeader(stream, callback) {\\n             *   stream.on('error', callback);\\n             *   stream.on('readable', onReadable);\\n             *   const decoder = new StringDecoder('utf8');\\n             *   let header = '';\\n             *   function onReadable() {\\n             *     let chunk;\\n             *     while (null !== (chunk = stream.read())) {\\n             *       const str = decoder.write(chunk);\\n             *       if (str.includes('\\\\n\\\\n')) {\\n             *         // Found the header boundary.\\n             *         const split = str.split(/\\\\n\\\\n/);\\n             *         header += split.shift();\\n             *         const remaining = split.join('\\\\n\\\\n');\\n             *         const buf = Buffer.from(remaining, 'utf8');\\n             *         stream.removeListener('error', callback);\\n             *         // Remove the 'readable' listener before unshifting.\\n             *         stream.removeListener('readable', onReadable);\\n             *         if (buf.length)\\n             *           stream.unshift(buf);\\n             *         // Now the body of the message can be read from the stream.\\n             *         callback(null, header, stream);\\n             *         return;\\n             *       }\\n             *       // Still reading the header.\\n             *       header += str;\\n             *     }\\n             *   }\\n             * }\\n             * ```\\n             *\\n             * Unlike {@link push}, `stream.unshift(chunk)` will not\\n             * end the reading process by resetting the internal reading state of the stream.\\n             * This can cause unexpected results if `readable.unshift()` is called during a\\n             * read (i.e. from within a {@link _read} implementation on a\\n             * custom stream). Following the call to `readable.unshift()` with an immediate {@link push} will reset the reading state appropriately,\\n             * however it is best to simply avoid calling `readable.unshift()` while in the\\n             * process of performing a read.\\n             * @since v0.9.11\\n             * @param chunk Chunk of data to unshift onto the read queue. For streams not operating in object mode, `chunk` must be a string, `Buffer`, `Uint8Array` or `null`. For object mode\\n             * streams, `chunk` may be any JavaScript value.\\n             * @param encoding Encoding of string chunks. Must be a valid `Buffer` encoding, such as `'utf8'` or `'ascii'`.\\n             */\\n            unshift(chunk: any, encoding?: BufferEncoding): void;\\n            /**\\n             * Prior to Node.js 0.10, streams did not implement the entire `stream` module API\\n             * as it is currently defined. (See `Compatibility` for more information.)\\n             *\\n             * When using an older Node.js library that emits `'data'` events and has a {@link pause} method that is advisory only, the`readable.wrap()` method can be used to create a `Readable`\\n             * stream that uses\\n             * the old stream as its data source.\\n             *\\n             * It will rarely be necessary to use `readable.wrap()` but the method has been\\n             * provided as a convenience for interacting with older Node.js applications and\\n             * libraries.\\n             *\\n             * ```js\\n             * const { OldReader } = require('./old-api-module.js');\\n             * const { Readable } = require('stream');\\n             * const oreader = new OldReader();\\n             * const myReader = new Readable().wrap(oreader);\\n             *\\n             * myReader.on('readable', () => {\\n             *   myReader.read(); // etc.\\n             * });\\n             * ```\\n             * @since v0.9.4\\n             * @param stream An \\\"old style\\\" readable stream\\n             */\\n            wrap(stream: NodeJS.ReadableStream): this;\\n            push(chunk: any, encoding?: BufferEncoding): boolean;\\n            _destroy(error: Error | null, callback: (error?: Error | null) => void): void;\\n            /**\\n             * Destroy the stream. Optionally emit an `'error'` event, and emit a `'close'`event (unless `emitClose` is set to `false`). After this call, the readable\\n             * stream will release any internal resources and subsequent calls to `push()`will be ignored.\\n             *\\n             * Once `destroy()` has been called any further calls will be a no-op and no\\n             * further errors except from `_destroy()` may be emitted as `'error'`.\\n             *\\n             * Implementors should not override this method, but instead implement `readable._destroy()`.\\n             * @since v8.0.0\\n             * @param error Error which will be passed as payload in `'error'` event\\n             */\\n            destroy(error?: Error): this;\\n            /**\\n             * Event emitter\\n             * The defined events on documents including:\\n             * 1. close\\n             * 2. data\\n             * 3. end\\n             * 4. error\\n             * 5. pause\\n             * 6. readable\\n             * 7. resume\\n             */\\n            addListener(event: 'close', listener: () => void): this;\\n            addListener(event: 'data', listener: (chunk: any) => void): this;\\n            addListener(event: 'end', listener: () => void): this;\\n            addListener(event: 'error', listener: (err: Error) => void): this;\\n            addListener(event: 'pause', listener: () => void): this;\\n            addListener(event: 'readable', listener: () => void): this;\\n            addListener(event: 'resume', listener: () => void): this;\\n            addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n            emit(event: 'close'): boolean;\\n            emit(event: 'data', chunk: any): boolean;\\n            emit(event: 'end'): boolean;\\n            emit(event: 'error', err: Error): boolean;\\n            emit(event: 'pause'): boolean;\\n            emit(event: 'readable'): boolean;\\n            emit(event: 'resume'): boolean;\\n            emit(event: string | symbol, ...args: any[]): boolean;\\n            on(event: 'close', listener: () => void): this;\\n            on(event: 'data', listener: (chunk: any) => void): this;\\n            on(event: 'end', listener: () => void): this;\\n            on(event: 'error', listener: (err: Error) => void): this;\\n            on(event: 'pause', listener: () => void): this;\\n            on(event: 'readable', listener: () => void): this;\\n            on(event: 'resume', listener: () => void): this;\\n            on(event: string | symbol, listener: (...args: any[]) => void): this;\\n            once(event: 'close', listener: () => void): this;\\n            once(event: 'data', listener: (chunk: any) => void): this;\\n            once(event: 'end', listener: () => void): this;\\n            once(event: 'error', listener: (err: Error) => void): this;\\n            once(event: 'pause', listener: () => void): this;\\n            once(event: 'readable', listener: () => void): this;\\n            once(event: 'resume', listener: () => void): this;\\n            once(event: string | symbol, listener: (...args: any[]) => void): this;\\n            prependListener(event: 'close', listener: () => void): this;\\n            prependListener(event: 'data', listener: (chunk: any) => void): this;\\n            prependListener(event: 'end', listener: () => void): this;\\n            prependListener(event: 'error', listener: (err: Error) => void): this;\\n            prependListener(event: 'pause', listener: () => void): this;\\n            prependListener(event: 'readable', listener: () => void): this;\\n            prependListener(event: 'resume', listener: () => void): this;\\n            prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n            prependOnceListener(event: 'close', listener: () => void): this;\\n            prependOnceListener(event: 'data', listener: (chunk: any) => void): this;\\n            prependOnceListener(event: 'end', listener: () => void): this;\\n            prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n            prependOnceListener(event: 'pause', listener: () => void): this;\\n            prependOnceListener(event: 'readable', listener: () => void): this;\\n            prependOnceListener(event: 'resume', listener: () => void): this;\\n            prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n            removeListener(event: 'close', listener: () => void): this;\\n            removeListener(event: 'data', listener: (chunk: any) => void): this;\\n            removeListener(event: 'end', listener: () => void): this;\\n            removeListener(event: 'error', listener: (err: Error) => void): this;\\n            removeListener(event: 'pause', listener: () => void): this;\\n            removeListener(event: 'readable', listener: () => void): this;\\n            removeListener(event: 'resume', listener: () => void): this;\\n            removeListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n            [Symbol.asyncIterator](): AsyncIterableIterator<any>;\\n        }\\n        interface WritableOptions extends StreamOptions<Writable> {\\n            decodeStrings?: boolean | undefined;\\n            defaultEncoding?: BufferEncoding | undefined;\\n            write?(this: Writable, chunk: any, encoding: BufferEncoding, callback: (error?: Error | null) => void): void;\\n            writev?(\\n                this: Writable,\\n                chunks: Array<{\\n                    chunk: any;\\n                    encoding: BufferEncoding;\\n                }>,\\n                callback: (error?: Error | null) => void\\n            ): void;\\n            final?(this: Writable, callback: (error?: Error | null) => void): void;\\n        }\\n        /**\\n         * @since v0.9.4\\n         */\\n        class Writable extends Stream implements NodeJS.WritableStream {\\n            /**\\n             * A utility method for creating a `Writable` from a web `WritableStream`.\\n             * @since v17.0.0\\n             * @experimental\\n             */\\n            static fromWeb(writableStream: streamWeb.WritableStream, options?: Pick<WritableOptions, 'decodeStrings' | 'highWaterMark' | 'objectMode' | 'signal'>): Writable;\\n            /**\\n             * A utility method for creating a web `WritableStream` from a `Writable`.\\n             * @since v17.0.0\\n             * @experimental\\n             */\\n            static toWeb(streamWritable: Writable): streamWeb.WritableStream;\\n            /**\\n             * Is `true` if it is safe to call `writable.write()`, which means\\n             * the stream has not been destroyed, errored or ended.\\n             * @since v11.4.0\\n             */\\n            readonly writable: boolean;\\n            /**\\n             * Is `true` after `writable.end()` has been called. This property\\n             * does not indicate whether the data has been flushed, for this use `writable.writableFinished` instead.\\n             * @since v12.9.0\\n             */\\n            readonly writableEnded: boolean;\\n            /**\\n             * Is set to `true` immediately before the `'finish'` event is emitted.\\n             * @since v12.6.0\\n             */\\n            readonly writableFinished: boolean;\\n            /**\\n             * Return the value of `highWaterMark` passed when creating this `Writable`.\\n             * @since v9.3.0\\n             */\\n            readonly writableHighWaterMark: number;\\n            /**\\n             * This property contains the number of bytes (or objects) in the queue\\n             * ready to be written. The value provides introspection data regarding\\n             * the status of the `highWaterMark`.\\n             * @since v9.4.0\\n             */\\n            readonly writableLength: number;\\n            /**\\n             * Getter for the property `objectMode` of a given `Writable` stream.\\n             * @since v12.3.0\\n             */\\n            readonly writableObjectMode: boolean;\\n            /**\\n             * Number of times `writable.uncork()` needs to be\\n             * called in order to fully uncork the stream.\\n             * @since v13.2.0, v12.16.0\\n             */\\n            readonly writableCorked: number;\\n            /**\\n             * Is `true` after `writable.destroy()` has been called.\\n             * @since v8.0.0\\n             */\\n            destroyed: boolean;\\n            /**\\n             * Is true after 'close' has been emitted.\\n             * @since v8.0.0\\n             */\\n            readonly closed: boolean;\\n            /**\\n             * Returns error if the stream has been destroyed with an error.\\n             * @since v18.0.0\\n             */\\n            readonly errored: Error | null;\\n            /**\\n             * Is `true` if the stream's buffer has been full and stream will emit 'drain'.\\n             * @since v15.2.0, v14.17.0\\n             */\\n            readonly writableNeedDrain: boolean;\\n            constructor(opts?: WritableOptions);\\n            _write(chunk: any, encoding: BufferEncoding, callback: (error?: Error | null) => void): void;\\n            _writev?(\\n                chunks: Array<{\\n                    chunk: any;\\n                    encoding: BufferEncoding;\\n                }>,\\n                callback: (error?: Error | null) => void\\n            ): void;\\n            _construct?(callback: (error?: Error | null) => void): void;\\n            _destroy(error: Error | null, callback: (error?: Error | null) => void): void;\\n            _final(callback: (error?: Error | null) => void): void;\\n            /**\\n             * The `writable.write()` method writes some data to the stream, and calls the\\n             * supplied `callback` once the data has been fully handled. If an error\\n             * occurs, the `callback` will be called with the error as its\\n             * first argument. The `callback` is called asynchronously and before `'error'` is\\n             * emitted.\\n             *\\n             * The return value is `true` if the internal buffer is less than the`highWaterMark` configured when the stream was created after admitting `chunk`.\\n             * If `false` is returned, further attempts to write data to the stream should\\n             * stop until the `'drain'` event is emitted.\\n             *\\n             * While a stream is not draining, calls to `write()` will buffer `chunk`, and\\n             * return false. Once all currently buffered chunks are drained (accepted for\\n             * delivery by the operating system), the `'drain'` event will be emitted.\\n             * Once `write()` returns false, do not write more chunks\\n             * until the `'drain'` event is emitted. While calling `write()` on a stream that\\n             * is not draining is allowed, Node.js will buffer all written chunks until\\n             * maximum memory usage occurs, at which point it will abort unconditionally.\\n             * Even before it aborts, high memory usage will cause poor garbage collector\\n             * performance and high RSS (which is not typically released back to the system,\\n             * even after the memory is no longer required). Since TCP sockets may never\\n             * drain if the remote peer does not read the data, writing a socket that is\\n             * not draining may lead to a remotely exploitable vulnerability.\\n             *\\n             * Writing data while the stream is not draining is particularly\\n             * problematic for a `Transform`, because the `Transform` streams are paused\\n             * by default until they are piped or a `'data'` or `'readable'` event handler\\n             * is added.\\n             *\\n             * If the data to be written can be generated or fetched on demand, it is\\n             * recommended to encapsulate the logic into a `Readable` and use {@link pipe}. However, if calling `write()` is preferred, it is\\n             * possible to respect backpressure and avoid memory issues using the `'drain'` event:\\n             *\\n             * ```js\\n             * function write(data, cb) {\\n             *   if (!stream.write(data)) {\\n             *     stream.once('drain', cb);\\n             *   } else {\\n             *     process.nextTick(cb);\\n             *   }\\n             * }\\n             *\\n             * // Wait for cb to be called before doing any other write.\\n             * write('hello', () => {\\n             *   console.log('Write completed, do more writes now.');\\n             * });\\n             * ```\\n             *\\n             * A `Writable` stream in object mode will always ignore the `encoding` argument.\\n             * @since v0.9.4\\n             * @param chunk Optional data to write. For streams not operating in object mode, `chunk` must be a string, `Buffer` or `Uint8Array`. For object mode streams, `chunk` may be any\\n             * JavaScript value other than `null`.\\n             * @param [encoding='utf8'] The encoding, if `chunk` is a string.\\n             * @param callback Callback for when this chunk of data is flushed.\\n             * @return `false` if the stream wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`.\\n             */\\n            write(chunk: any, callback?: (error: Error | null | undefined) => void): boolean;\\n            write(chunk: any, encoding: BufferEncoding, callback?: (error: Error | null | undefined) => void): boolean;\\n            /**\\n             * The `writable.setDefaultEncoding()` method sets the default `encoding` for a `Writable` stream.\\n             * @since v0.11.15\\n             * @param encoding The new default encoding\\n             */\\n            setDefaultEncoding(encoding: BufferEncoding): this;\\n            /**\\n             * Calling the `writable.end()` method signals that no more data will be written\\n             * to the `Writable`. The optional `chunk` and `encoding` arguments allow one\\n             * final additional chunk of data to be written immediately before closing the\\n             * stream.\\n             *\\n             * Calling the {@link write} method after calling {@link end} will raise an error.\\n             *\\n             * ```js\\n             * // Write 'hello, ' and then end with 'world!'.\\n             * const fs = require('fs');\\n             * const file = fs.createWriteStream('example.txt');\\n             * file.write('hello, ');\\n             * file.end('world!');\\n             * // Writing more now is not allowed!\\n             * ```\\n             * @since v0.9.4\\n             * @param chunk Optional data to write. For streams not operating in object mode, `chunk` must be a string, `Buffer` or `Uint8Array`. For object mode streams, `chunk` may be any\\n             * JavaScript value other than `null`.\\n             * @param encoding The encoding if `chunk` is a string\\n             * @param callback Callback for when the stream is finished.\\n             */\\n            end(cb?: () => void): this;\\n            end(chunk: any, cb?: () => void): this;\\n            end(chunk: any, encoding: BufferEncoding, cb?: () => void): this;\\n            /**\\n             * The `writable.cork()` method forces all written data to be buffered in memory.\\n             * The buffered data will be flushed when either the {@link uncork} or {@link end} methods are called.\\n             *\\n             * The primary intent of `writable.cork()` is to accommodate a situation in which\\n             * several small chunks are written to the stream in rapid succession. Instead of\\n             * immediately forwarding them to the underlying destination, `writable.cork()`buffers all the chunks until `writable.uncork()` is called, which will pass them\\n             * all to `writable._writev()`, if present. This prevents a head-of-line blocking\\n             * situation where data is being buffered while waiting for the first small chunk\\n             * to be processed. However, use of `writable.cork()` without implementing`writable._writev()` may have an adverse effect on throughput.\\n             *\\n             * See also: `writable.uncork()`, `writable._writev()`.\\n             * @since v0.11.2\\n             */\\n            cork(): void;\\n            /**\\n             * The `writable.uncork()` method flushes all data buffered since {@link cork} was called.\\n             *\\n             * When using `writable.cork()` and `writable.uncork()` to manage the buffering\\n             * of writes to a stream, defer calls to `writable.uncork()` using`process.nextTick()`. Doing so allows batching of all`writable.write()` calls that occur within a given Node.js event\\n             * loop phase.\\n             *\\n             * ```js\\n             * stream.cork();\\n             * stream.write('some ');\\n             * stream.write('data ');\\n             * process.nextTick(() => stream.uncork());\\n             * ```\\n             *\\n             * If the `writable.cork()` method is called multiple times on a stream, the\\n             * same number of calls to `writable.uncork()` must be called to flush the buffered\\n             * data.\\n             *\\n             * ```js\\n             * stream.cork();\\n             * stream.write('some ');\\n             * stream.cork();\\n             * stream.write('data ');\\n             * process.nextTick(() => {\\n             *   stream.uncork();\\n             *   // The data will not be flushed until uncork() is called a second time.\\n             *   stream.uncork();\\n             * });\\n             * ```\\n             *\\n             * See also: `writable.cork()`.\\n             * @since v0.11.2\\n             */\\n            uncork(): void;\\n            /**\\n             * Destroy the stream. Optionally emit an `'error'` event, and emit a `'close'`event (unless `emitClose` is set to `false`). After this call, the writable\\n             * stream has ended and subsequent calls to `write()` or `end()` will result in\\n             * an `ERR_STREAM_DESTROYED` error.\\n             * This is a destructive and immediate way to destroy a stream. Previous calls to`write()` may not have drained, and may trigger an `ERR_STREAM_DESTROYED` error.\\n             * Use `end()` instead of destroy if data should flush before close, or wait for\\n             * the `'drain'` event before destroying the stream.\\n             *\\n             * Once `destroy()` has been called any further calls will be a no-op and no\\n             * further errors except from `_destroy()` may be emitted as `'error'`.\\n             *\\n             * Implementors should not override this method,\\n             * but instead implement `writable._destroy()`.\\n             * @since v8.0.0\\n             * @param error Optional, an error to emit with `'error'` event.\\n             */\\n            destroy(error?: Error): this;\\n            /**\\n             * Event emitter\\n             * The defined events on documents including:\\n             * 1. close\\n             * 2. drain\\n             * 3. error\\n             * 4. finish\\n             * 5. pipe\\n             * 6. unpipe\\n             */\\n            addListener(event: 'close', listener: () => void): this;\\n            addListener(event: 'drain', listener: () => void): this;\\n            addListener(event: 'error', listener: (err: Error) => void): this;\\n            addListener(event: 'finish', listener: () => void): this;\\n            addListener(event: 'pipe', listener: (src: Readable) => void): this;\\n            addListener(event: 'unpipe', listener: (src: Readable) => void): this;\\n            addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n            emit(event: 'close'): boolean;\\n            emit(event: 'drain'): boolean;\\n            emit(event: 'error', err: Error): boolean;\\n            emit(event: 'finish'): boolean;\\n            emit(event: 'pipe', src: Readable): boolean;\\n            emit(event: 'unpipe', src: Readable): boolean;\\n            emit(event: string | symbol, ...args: any[]): boolean;\\n            on(event: 'close', listener: () => void): this;\\n            on(event: 'drain', listener: () => void): this;\\n            on(event: 'error', listener: (err: Error) => void): this;\\n            on(event: 'finish', listener: () => void): this;\\n            on(event: 'pipe', listener: (src: Readable) => void): this;\\n            on(event: 'unpipe', listener: (src: Readable) => void): this;\\n            on(event: string | symbol, listener: (...args: any[]) => void): this;\\n            once(event: 'close', listener: () => void): this;\\n            once(event: 'drain', listener: () => void): this;\\n            once(event: 'error', listener: (err: Error) => void): this;\\n            once(event: 'finish', listener: () => void): this;\\n            once(event: 'pipe', listener: (src: Readable) => void): this;\\n            once(event: 'unpipe', listener: (src: Readable) => void): this;\\n            once(event: string | symbol, listener: (...args: any[]) => void): this;\\n            prependListener(event: 'close', listener: () => void): this;\\n            prependListener(event: 'drain', listener: () => void): this;\\n            prependListener(event: 'error', listener: (err: Error) => void): this;\\n            prependListener(event: 'finish', listener: () => void): this;\\n            prependListener(event: 'pipe', listener: (src: Readable) => void): this;\\n            prependListener(event: 'unpipe', listener: (src: Readable) => void): this;\\n            prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n            prependOnceListener(event: 'close', listener: () => void): this;\\n            prependOnceListener(event: 'drain', listener: () => void): this;\\n            prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n            prependOnceListener(event: 'finish', listener: () => void): this;\\n            prependOnceListener(event: 'pipe', listener: (src: Readable) => void): this;\\n            prependOnceListener(event: 'unpipe', listener: (src: Readable) => void): this;\\n            prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n            removeListener(event: 'close', listener: () => void): this;\\n            removeListener(event: 'drain', listener: () => void): this;\\n            removeListener(event: 'error', listener: (err: Error) => void): this;\\n            removeListener(event: 'finish', listener: () => void): this;\\n            removeListener(event: 'pipe', listener: (src: Readable) => void): this;\\n            removeListener(event: 'unpipe', listener: (src: Readable) => void): this;\\n            removeListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        }\\n        interface DuplexOptions extends ReadableOptions, WritableOptions {\\n            allowHalfOpen?: boolean | undefined;\\n            readableObjectMode?: boolean | undefined;\\n            writableObjectMode?: boolean | undefined;\\n            readableHighWaterMark?: number | undefined;\\n            writableHighWaterMark?: number | undefined;\\n            writableCorked?: number | undefined;\\n            construct?(this: Duplex, callback: (error?: Error | null) => void): void;\\n            read?(this: Duplex, size: number): void;\\n            write?(this: Duplex, chunk: any, encoding: BufferEncoding, callback: (error?: Error | null) => void): void;\\n            writev?(\\n                this: Duplex,\\n                chunks: Array<{\\n                    chunk: any;\\n                    encoding: BufferEncoding;\\n                }>,\\n                callback: (error?: Error | null) => void\\n            ): void;\\n            final?(this: Duplex, callback: (error?: Error | null) => void): void;\\n            destroy?(this: Duplex, error: Error | null, callback: (error: Error | null) => void): void;\\n        }\\n        /**\\n         * Duplex streams are streams that implement both the `Readable` and `Writable` interfaces.\\n         *\\n         * Examples of `Duplex` streams include:\\n         *\\n         * * `TCP sockets`\\n         * * `zlib streams`\\n         * * `crypto streams`\\n         * @since v0.9.4\\n         */\\n        class Duplex extends Readable implements Writable {\\n            readonly writable: boolean;\\n            readonly writableEnded: boolean;\\n            readonly writableFinished: boolean;\\n            readonly writableHighWaterMark: number;\\n            readonly writableLength: number;\\n            readonly writableObjectMode: boolean;\\n            readonly writableCorked: number;\\n            readonly writableNeedDrain: boolean;\\n            readonly closed: boolean;\\n            readonly errored: Error | null;\\n            /**\\n             * If `false` then the stream will automatically end the writable side when the\\n             * readable side ends. Set initially by the `allowHalfOpen` constructor option,\\n             * which defaults to `false`.\\n             *\\n             * This can be changed manually to change the half-open behavior of an existing`Duplex` stream instance, but must be changed before the `'end'` event is\\n             * emitted.\\n             * @since v0.9.4\\n             */\\n            allowHalfOpen: boolean;\\n            constructor(opts?: DuplexOptions);\\n            /**\\n             * A utility method for creating duplex streams.\\n             *\\n             * - `Stream` converts writable stream into writable `Duplex` and readable stream\\n             *   to `Duplex`.\\n             * - `Blob` converts into readable `Duplex`.\\n             * - `string` converts into readable `Duplex`.\\n             * - `ArrayBuffer` converts into readable `Duplex`.\\n             * - `AsyncIterable` converts into a readable `Duplex`. Cannot yield `null`.\\n             * - `AsyncGeneratorFunction` converts into a readable/writable transform\\n             *   `Duplex`. Must take a source `AsyncIterable` as first parameter. Cannot yield\\n             *   `null`.\\n             * - `AsyncFunction` converts into a writable `Duplex`. Must return\\n             *   either `null` or `undefined`\\n             * - `Object ({ writable, readable })` converts `readable` and\\n             *   `writable` into `Stream` and then combines them into `Duplex` where the\\n             *   `Duplex` will write to the `writable` and read from the `readable`.\\n             * - `Promise` converts into readable `Duplex`. Value `null` is ignored.\\n             *\\n             * @since v16.8.0\\n             */\\n            static from(src: Stream | NodeBlob | ArrayBuffer | string | Iterable<any> | AsyncIterable<any> | AsyncGeneratorFunction | Promise<any> | Object): Duplex;\\n            _write(chunk: any, encoding: BufferEncoding, callback: (error?: Error | null) => void): void;\\n            _writev?(\\n                chunks: Array<{\\n                    chunk: any;\\n                    encoding: BufferEncoding;\\n                }>,\\n                callback: (error?: Error | null) => void\\n            ): void;\\n            _destroy(error: Error | null, callback: (error: Error | null) => void): void;\\n            _final(callback: (error?: Error | null) => void): void;\\n            write(chunk: any, encoding?: BufferEncoding, cb?: (error: Error | null | undefined) => void): boolean;\\n            write(chunk: any, cb?: (error: Error | null | undefined) => void): boolean;\\n            setDefaultEncoding(encoding: BufferEncoding): this;\\n            end(cb?: () => void): this;\\n            end(chunk: any, cb?: () => void): this;\\n            end(chunk: any, encoding?: BufferEncoding, cb?: () => void): this;\\n            cork(): void;\\n            uncork(): void;\\n            /**\\n             * Event emitter\\n             * The defined events on documents including:\\n             * 1.  close\\n             * 2.  data\\n             * 3.  drain\\n             * 4.  end\\n             * 5.  error\\n             * 6.  finish\\n             * 7.  pause\\n             * 8.  pipe\\n             * 9.  readable\\n             * 10. resume\\n             * 11. unpipe\\n             */\\n            addListener(event: 'close', listener: () => void): this;\\n            addListener(event: 'data', listener: (chunk: any) => void): this;\\n            addListener(event: 'drain', listener: () => void): this;\\n            addListener(event: 'end', listener: () => void): this;\\n            addListener(event: 'error', listener: (err: Error) => void): this;\\n            addListener(event: 'finish', listener: () => void): this;\\n            addListener(event: 'pause', listener: () => void): this;\\n            addListener(event: 'pipe', listener: (src: Readable) => void): this;\\n            addListener(event: 'readable', listener: () => void): this;\\n            addListener(event: 'resume', listener: () => void): this;\\n            addListener(event: 'unpipe', listener: (src: Readable) => void): this;\\n            addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n            emit(event: 'close'): boolean;\\n            emit(event: 'data', chunk: any): boolean;\\n            emit(event: 'drain'): boolean;\\n            emit(event: 'end'): boolean;\\n            emit(event: 'error', err: Error): boolean;\\n            emit(event: 'finish'): boolean;\\n            emit(event: 'pause'): boolean;\\n            emit(event: 'pipe', src: Readable): boolean;\\n            emit(event: 'readable'): boolean;\\n            emit(event: 'resume'): boolean;\\n            emit(event: 'unpipe', src: Readable): boolean;\\n            emit(event: string | symbol, ...args: any[]): boolean;\\n            on(event: 'close', listener: () => void): this;\\n            on(event: 'data', listener: (chunk: any) => void): this;\\n            on(event: 'drain', listener: () => void): this;\\n            on(event: 'end', listener: () => void): this;\\n            on(event: 'error', listener: (err: Error) => void): this;\\n            on(event: 'finish', listener: () => void): this;\\n            on(event: 'pause', listener: () => void): this;\\n            on(event: 'pipe', listener: (src: Readable) => void): this;\\n            on(event: 'readable', listener: () => void): this;\\n            on(event: 'resume', listener: () => void): this;\\n            on(event: 'unpipe', listener: (src: Readable) => void): this;\\n            on(event: string | symbol, listener: (...args: any[]) => void): this;\\n            once(event: 'close', listener: () => void): this;\\n            once(event: 'data', listener: (chunk: any) => void): this;\\n            once(event: 'drain', listener: () => void): this;\\n            once(event: 'end', listener: () => void): this;\\n            once(event: 'error', listener: (err: Error) => void): this;\\n            once(event: 'finish', listener: () => void): this;\\n            once(event: 'pause', listener: () => void): this;\\n            once(event: 'pipe', listener: (src: Readable) => void): this;\\n            once(event: 'readable', listener: () => void): this;\\n            once(event: 'resume', listener: () => void): this;\\n            once(event: 'unpipe', listener: (src: Readable) => void): this;\\n            once(event: string | symbol, listener: (...args: any[]) => void): this;\\n            prependListener(event: 'close', listener: () => void): this;\\n            prependListener(event: 'data', listener: (chunk: any) => void): this;\\n            prependListener(event: 'drain', listener: () => void): this;\\n            prependListener(event: 'end', listener: () => void): this;\\n            prependListener(event: 'error', listener: (err: Error) => void): this;\\n            prependListener(event: 'finish', listener: () => void): this;\\n            prependListener(event: 'pause', listener: () => void): this;\\n            prependListener(event: 'pipe', listener: (src: Readable) => void): this;\\n            prependListener(event: 'readable', listener: () => void): this;\\n            prependListener(event: 'resume', listener: () => void): this;\\n            prependListener(event: 'unpipe', listener: (src: Readable) => void): this;\\n            prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n            prependOnceListener(event: 'close', listener: () => void): this;\\n            prependOnceListener(event: 'data', listener: (chunk: any) => void): this;\\n            prependOnceListener(event: 'drain', listener: () => void): this;\\n            prependOnceListener(event: 'end', listener: () => void): this;\\n            prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n            prependOnceListener(event: 'finish', listener: () => void): this;\\n            prependOnceListener(event: 'pause', listener: () => void): this;\\n            prependOnceListener(event: 'pipe', listener: (src: Readable) => void): this;\\n            prependOnceListener(event: 'readable', listener: () => void): this;\\n            prependOnceListener(event: 'resume', listener: () => void): this;\\n            prependOnceListener(event: 'unpipe', listener: (src: Readable) => void): this;\\n            prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n            removeListener(event: 'close', listener: () => void): this;\\n            removeListener(event: 'data', listener: (chunk: any) => void): this;\\n            removeListener(event: 'drain', listener: () => void): this;\\n            removeListener(event: 'end', listener: () => void): this;\\n            removeListener(event: 'error', listener: (err: Error) => void): this;\\n            removeListener(event: 'finish', listener: () => void): this;\\n            removeListener(event: 'pause', listener: () => void): this;\\n            removeListener(event: 'pipe', listener: (src: Readable) => void): this;\\n            removeListener(event: 'readable', listener: () => void): this;\\n            removeListener(event: 'resume', listener: () => void): this;\\n            removeListener(event: 'unpipe', listener: (src: Readable) => void): this;\\n            removeListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        }\\n        type TransformCallback = (error?: Error | null, data?: any) => void;\\n        interface TransformOptions extends DuplexOptions {\\n            construct?(this: Transform, callback: (error?: Error | null) => void): void;\\n            read?(this: Transform, size: number): void;\\n            write?(this: Transform, chunk: any, encoding: BufferEncoding, callback: (error?: Error | null) => void): void;\\n            writev?(\\n                this: Transform,\\n                chunks: Array<{\\n                    chunk: any;\\n                    encoding: BufferEncoding;\\n                }>,\\n                callback: (error?: Error | null) => void\\n            ): void;\\n            final?(this: Transform, callback: (error?: Error | null) => void): void;\\n            destroy?(this: Transform, error: Error | null, callback: (error: Error | null) => void): void;\\n            transform?(this: Transform, chunk: any, encoding: BufferEncoding, callback: TransformCallback): void;\\n            flush?(this: Transform, callback: TransformCallback): void;\\n        }\\n        /**\\n         * Transform streams are `Duplex` streams where the output is in some way\\n         * related to the input. Like all `Duplex` streams, `Transform` streams\\n         * implement both the `Readable` and `Writable` interfaces.\\n         *\\n         * Examples of `Transform` streams include:\\n         *\\n         * * `zlib streams`\\n         * * `crypto streams`\\n         * @since v0.9.4\\n         */\\n        class Transform extends Duplex {\\n            constructor(opts?: TransformOptions);\\n            _transform(chunk: any, encoding: BufferEncoding, callback: TransformCallback): void;\\n            _flush(callback: TransformCallback): void;\\n        }\\n        /**\\n         * The `stream.PassThrough` class is a trivial implementation of a `Transform` stream that simply passes the input bytes across to the output. Its purpose is\\n         * primarily for examples and testing, but there are some use cases where`stream.PassThrough` is useful as a building block for novel sorts of streams.\\n         */\\n        class PassThrough extends Transform {}\\n        /**\\n         * Attaches an AbortSignal to a readable or writeable stream. This lets code\\n         * control stream destruction using an `AbortController`.\\n         *\\n         * Calling `abort` on the `AbortController` corresponding to the passed`AbortSignal` will behave the same way as calling `.destroy(new AbortError())`on the stream.\\n         *\\n         * ```js\\n         * const fs = require('fs');\\n         *\\n         * const controller = new AbortController();\\n         * const read = addAbortSignal(\\n         *   controller.signal,\\n         *   fs.createReadStream(('object.json'))\\n         * );\\n         * // Later, abort the operation closing the stream\\n         * controller.abort();\\n         * ```\\n         *\\n         * Or using an `AbortSignal` with a readable stream as an async iterable:\\n         *\\n         * ```js\\n         * const controller = new AbortController();\\n         * setTimeout(() => controller.abort(), 10_000); // set a timeout\\n         * const stream = addAbortSignal(\\n         *   controller.signal,\\n         *   fs.createReadStream(('object.json'))\\n         * );\\n         * (async () => {\\n         *   try {\\n         *     for await (const chunk of stream) {\\n         *       await process(chunk);\\n         *     }\\n         *   } catch (e) {\\n         *     if (e.name === 'AbortError') {\\n         *       // The operation was cancelled\\n         *     } else {\\n         *       throw e;\\n         *     }\\n         *   }\\n         * })();\\n         * ```\\n         * @since v15.4.0\\n         * @param signal A signal representing possible cancellation\\n         * @param stream a stream to attach a signal to\\n         */\\n        function addAbortSignal<T extends Stream>(signal: AbortSignal, stream: T): T;\\n        interface FinishedOptions extends Abortable {\\n            error?: boolean | undefined;\\n            readable?: boolean | undefined;\\n            writable?: boolean | undefined;\\n        }\\n        /**\\n         * A function to get notified when a stream is no longer readable, writable\\n         * or has experienced an error or a premature close event.\\n         *\\n         * ```js\\n         * const { finished } = require('stream');\\n         *\\n         * const rs = fs.createReadStream('archive.tar');\\n         *\\n         * finished(rs, (err) => {\\n         *   if (err) {\\n         *     console.error('Stream failed.', err);\\n         *   } else {\\n         *     console.log('Stream is done reading.');\\n         *   }\\n         * });\\n         *\\n         * rs.resume(); // Drain the stream.\\n         * ```\\n         *\\n         * Especially useful in error handling scenarios where a stream is destroyed\\n         * prematurely (like an aborted HTTP request), and will not emit `'end'`or `'finish'`.\\n         *\\n         * The `finished` API provides promise version:\\n         *\\n         * ```js\\n         * const { finished } = require('stream/promises');\\n         *\\n         * const rs = fs.createReadStream('archive.tar');\\n         *\\n         * async function run() {\\n         *   await finished(rs);\\n         *   console.log('Stream is done reading.');\\n         * }\\n         *\\n         * run().catch(console.error);\\n         * rs.resume(); // Drain the stream.\\n         * ```\\n         *\\n         * `stream.finished()` leaves dangling event listeners (in particular`'error'`, `'end'`, `'finish'` and `'close'`) after `callback` has been\\n         * invoked. The reason for this is so that unexpected `'error'` events (due to\\n         * incorrect stream implementations) do not cause unexpected crashes.\\n         * If this is unwanted behavior then the returned cleanup function needs to be\\n         * invoked in the callback:\\n         *\\n         * ```js\\n         * const cleanup = finished(rs, (err) => {\\n         *   cleanup();\\n         *   // ...\\n         * });\\n         * ```\\n         * @since v10.0.0\\n         * @param stream A readable and/or writable stream.\\n         * @param callback A callback function that takes an optional error argument.\\n         * @return A cleanup function which removes all registered listeners.\\n         */\\n        function finished(stream: NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream, options: FinishedOptions, callback: (err?: NodeJS.ErrnoException | null) => void): () => void;\\n        function finished(stream: NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream, callback: (err?: NodeJS.ErrnoException | null) => void): () => void;\\n        namespace finished {\\n            function __promisify__(stream: NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream, options?: FinishedOptions): Promise<void>;\\n        }\\n        type PipelineSourceFunction<T> = () => Iterable<T> | AsyncIterable<T>;\\n        type PipelineSource<T> = Iterable<T> | AsyncIterable<T> | NodeJS.ReadableStream | PipelineSourceFunction<T>;\\n        type PipelineTransform<S extends PipelineTransformSource<any>, U> =\\n            | NodeJS.ReadWriteStream\\n            | ((source: S extends (...args: any[]) => Iterable<infer ST> | AsyncIterable<infer ST> ? AsyncIterable<ST> : S) => AsyncIterable<U>);\\n        type PipelineTransformSource<T> = PipelineSource<T> | PipelineTransform<any, T>;\\n        type PipelineDestinationIterableFunction<T> = (source: AsyncIterable<T>) => AsyncIterable<any>;\\n        type PipelineDestinationPromiseFunction<T, P> = (source: AsyncIterable<T>) => Promise<P>;\\n        type PipelineDestination<S extends PipelineTransformSource<any>, P> = S extends PipelineTransformSource<infer ST>\\n            ? NodeJS.WritableStream | PipelineDestinationIterableFunction<ST> | PipelineDestinationPromiseFunction<ST, P>\\n            : never;\\n        type PipelineCallback<S extends PipelineDestination<any, any>> = S extends PipelineDestinationPromiseFunction<any, infer P>\\n            ? (err: NodeJS.ErrnoException | null, value: P) => void\\n            : (err: NodeJS.ErrnoException | null) => void;\\n        type PipelinePromise<S extends PipelineDestination<any, any>> = S extends PipelineDestinationPromiseFunction<any, infer P> ? Promise<P> : Promise<void>;\\n        interface PipelineOptions {\\n            signal?: AbortSignal | undefined;\\n            end?: boolean | undefined;\\n        }\\n        /**\\n         * A module method to pipe between streams and generators forwarding errors and\\n         * properly cleaning up and provide a callback when the pipeline is complete.\\n         *\\n         * ```js\\n         * const { pipeline } = require('stream');\\n         * const fs = require('fs');\\n         * const zlib = require('zlib');\\n         *\\n         * // Use the pipeline API to easily pipe a series of streams\\n         * // together and get notified when the pipeline is fully done.\\n         *\\n         * // A pipeline to gzip a potentially huge tar file efficiently:\\n         *\\n         * pipeline(\\n         *   fs.createReadStream('archive.tar'),\\n         *   zlib.createGzip(),\\n         *   fs.createWriteStream('archive.tar.gz'),\\n         *   (err) => {\\n         *     if (err) {\\n         *       console.error('Pipeline failed.', err);\\n         *     } else {\\n         *       console.log('Pipeline succeeded.');\\n         *     }\\n         *   }\\n         * );\\n         * ```\\n         *\\n         * The `pipeline` API provides a promise version, which can also\\n         * receive an options argument as the last parameter with a`signal` `AbortSignal` property. When the signal is aborted,`destroy` will be called on the underlying pipeline, with\\n         * an`AbortError`.\\n         *\\n         * ```js\\n         * const { pipeline } = require('stream/promises');\\n         *\\n         * async function run() {\\n         *   await pipeline(\\n         *     fs.createReadStream('archive.tar'),\\n         *     zlib.createGzip(),\\n         *     fs.createWriteStream('archive.tar.gz')\\n         *   );\\n         *   console.log('Pipeline succeeded.');\\n         * }\\n         *\\n         * run().catch(console.error);\\n         * ```\\n         *\\n         * To use an `AbortSignal`, pass it inside an options object,\\n         * as the last argument:\\n         *\\n         * ```js\\n         * const { pipeline } = require('stream/promises');\\n         *\\n         * async function run() {\\n         *   const ac = new AbortController();\\n         *   const signal = ac.signal;\\n         *\\n         *   setTimeout(() => ac.abort(), 1);\\n         *   await pipeline(\\n         *     fs.createReadStream('archive.tar'),\\n         *     zlib.createGzip(),\\n         *     fs.createWriteStream('archive.tar.gz'),\\n         *     { signal },\\n         *   );\\n         * }\\n         *\\n         * run().catch(console.error); // AbortError\\n         * ```\\n         *\\n         * The `pipeline` API also supports async generators:\\n         *\\n         * ```js\\n         * const { pipeline } = require('stream/promises');\\n         * const fs = require('fs');\\n         *\\n         * async function run() {\\n         *   await pipeline(\\n         *     fs.createReadStream('lowercase.txt'),\\n         *     async function* (source, { signal }) {\\n         *       source.setEncoding('utf8');  // Work with strings rather than `Buffer`s.\\n         *       for await (const chunk of source) {\\n         *         yield await processChunk(chunk, { signal });\\n         *       }\\n         *     },\\n         *     fs.createWriteStream('uppercase.txt')\\n         *   );\\n         *   console.log('Pipeline succeeded.');\\n         * }\\n         *\\n         * run().catch(console.error);\\n         * ```\\n         *\\n         * Remember to handle the `signal` argument passed into the async generator.\\n         * Especially in the case where the async generator is the source for the\\n         * pipeline (i.e. first argument) or the pipeline will never complete.\\n         *\\n         * ```js\\n         * const { pipeline } = require('stream/promises');\\n         * const fs = require('fs');\\n         *\\n         * async function run() {\\n         *   await pipeline(\\n         *     async function* ({ signal }) {\\n         *       await someLongRunningfn({ signal });\\n         *       yield 'asd';\\n         *     },\\n         *     fs.createWriteStream('uppercase.txt')\\n         *   );\\n         *   console.log('Pipeline succeeded.');\\n         * }\\n         *\\n         * run().catch(console.error);\\n         * ```\\n         *\\n         * `stream.pipeline()` will call `stream.destroy(err)` on all streams except:\\n         *\\n         * * `Readable` streams which have emitted `'end'` or `'close'`.\\n         * * `Writable` streams which have emitted `'finish'` or `'close'`.\\n         *\\n         * `stream.pipeline()` leaves dangling event listeners on the streams\\n         * after the `callback` has been invoked. In the case of reuse of streams after\\n         * failure, this can cause event listener leaks and swallowed errors. If the last\\n         * stream is readable, dangling event listeners will be removed so that the last\\n         * stream can be consumed later.\\n         *\\n         * `stream.pipeline()` closes all the streams when an error is raised.\\n         * The `IncomingRequest` usage with `pipeline` could lead to an unexpected behavior\\n         * once it would destroy the socket without sending the expected response.\\n         * See the example below:\\n         *\\n         * ```js\\n         * const fs = require('fs');\\n         * const http = require('http');\\n         * const { pipeline } = require('stream');\\n         *\\n         * const server = http.createServer((req, res) => {\\n         *   const fileStream = fs.createReadStream('./fileNotExist.txt');\\n         *   pipeline(fileStream, res, (err) => {\\n         *     if (err) {\\n         *       console.log(err); // No such file\\n         *       // this message can't be sent once `pipeline` already destroyed the socket\\n         *       return res.end('error!!!');\\n         *     }\\n         *   });\\n         * });\\n         * ```\\n         * @since v10.0.0\\n         * @param callback Called when the pipeline is fully done.\\n         */\\n        function pipeline<A extends PipelineSource<any>, B extends PipelineDestination<A, any>>(\\n            source: A,\\n            destination: B,\\n            callback?: PipelineCallback<B>\\n        ): B extends NodeJS.WritableStream ? B : NodeJS.WritableStream;\\n        function pipeline<A extends PipelineSource<any>, T1 extends PipelineTransform<A, any>, B extends PipelineDestination<T1, any>>(\\n            source: A,\\n            transform1: T1,\\n            destination: B,\\n            callback?: PipelineCallback<B>\\n        ): B extends NodeJS.WritableStream ? B : NodeJS.WritableStream;\\n        function pipeline<A extends PipelineSource<any>, T1 extends PipelineTransform<A, any>, T2 extends PipelineTransform<T1, any>, B extends PipelineDestination<T2, any>>(\\n            source: A,\\n            transform1: T1,\\n            transform2: T2,\\n            destination: B,\\n            callback?: PipelineCallback<B>\\n        ): B extends NodeJS.WritableStream ? B : NodeJS.WritableStream;\\n        function pipeline<\\n            A extends PipelineSource<any>,\\n            T1 extends PipelineTransform<A, any>,\\n            T2 extends PipelineTransform<T1, any>,\\n            T3 extends PipelineTransform<T2, any>,\\n            B extends PipelineDestination<T3, any>\\n        >(source: A, transform1: T1, transform2: T2, transform3: T3, destination: B, callback?: PipelineCallback<B>): B extends NodeJS.WritableStream ? B : NodeJS.WritableStream;\\n        function pipeline<\\n            A extends PipelineSource<any>,\\n            T1 extends PipelineTransform<A, any>,\\n            T2 extends PipelineTransform<T1, any>,\\n            T3 extends PipelineTransform<T2, any>,\\n            T4 extends PipelineTransform<T3, any>,\\n            B extends PipelineDestination<T4, any>\\n        >(source: A, transform1: T1, transform2: T2, transform3: T3, transform4: T4, destination: B, callback?: PipelineCallback<B>): B extends NodeJS.WritableStream ? B : NodeJS.WritableStream;\\n        function pipeline(\\n            streams: ReadonlyArray<NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream>,\\n            callback?: (err: NodeJS.ErrnoException | null) => void\\n        ): NodeJS.WritableStream;\\n        function pipeline(\\n            stream1: NodeJS.ReadableStream,\\n            stream2: NodeJS.ReadWriteStream | NodeJS.WritableStream,\\n            ...streams: Array<NodeJS.ReadWriteStream | NodeJS.WritableStream | ((err: NodeJS.ErrnoException | null) => void)>\\n        ): NodeJS.WritableStream;\\n        namespace pipeline {\\n            function __promisify__<A extends PipelineSource<any>, B extends PipelineDestination<A, any>>(source: A, destination: B, options?: PipelineOptions): PipelinePromise<B>;\\n            function __promisify__<A extends PipelineSource<any>, T1 extends PipelineTransform<A, any>, B extends PipelineDestination<T1, any>>(\\n                source: A,\\n                transform1: T1,\\n                destination: B,\\n                options?: PipelineOptions\\n            ): PipelinePromise<B>;\\n            function __promisify__<A extends PipelineSource<any>, T1 extends PipelineTransform<A, any>, T2 extends PipelineTransform<T1, any>, B extends PipelineDestination<T2, any>>(\\n                source: A,\\n                transform1: T1,\\n                transform2: T2,\\n                destination: B,\\n                options?: PipelineOptions\\n            ): PipelinePromise<B>;\\n            function __promisify__<\\n                A extends PipelineSource<any>,\\n                T1 extends PipelineTransform<A, any>,\\n                T2 extends PipelineTransform<T1, any>,\\n                T3 extends PipelineTransform<T2, any>,\\n                B extends PipelineDestination<T3, any>\\n            >(source: A, transform1: T1, transform2: T2, transform3: T3, destination: B, options?: PipelineOptions): PipelinePromise<B>;\\n            function __promisify__<\\n                A extends PipelineSource<any>,\\n                T1 extends PipelineTransform<A, any>,\\n                T2 extends PipelineTransform<T1, any>,\\n                T3 extends PipelineTransform<T2, any>,\\n                T4 extends PipelineTransform<T3, any>,\\n                B extends PipelineDestination<T4, any>\\n            >(source: A, transform1: T1, transform2: T2, transform3: T3, transform4: T4, destination: B, options?: PipelineOptions): PipelinePromise<B>;\\n            function __promisify__(streams: ReadonlyArray<NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream>, options?: PipelineOptions): Promise<void>;\\n            function __promisify__(\\n                stream1: NodeJS.ReadableStream,\\n                stream2: NodeJS.ReadWriteStream | NodeJS.WritableStream,\\n                ...streams: Array<NodeJS.ReadWriteStream | NodeJS.WritableStream | PipelineOptions>\\n            ): Promise<void>;\\n        }\\n        interface Pipe {\\n            close(): void;\\n            hasRef(): boolean;\\n            ref(): void;\\n            unref(): void;\\n        }\\n\\n        /**\\n         * Returns whether the stream has encountered an error.\\n         * @since v17.3.0\\n         */\\n        function isErrored(stream: Readable | Writable | NodeJS.ReadableStream | NodeJS.WritableStream): boolean;\\n\\n        /**\\n         * Returns whether the stream is readable.\\n         * @since v17.4.0\\n         */\\n        function isReadable(stream: Readable | NodeJS.ReadableStream): boolean;\\n\\n        const promises: typeof streamPromises;\\n        const consumers: typeof streamConsumers;\\n    }\\n    export = internal;\\n}\\ndeclare module 'node:stream' {\\n    import stream = require('stream');\\n    export = stream;\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/string_decoder.d.ts\":\"/**\\n * The `string_decoder` module provides an API for decoding `Buffer` objects into\\n * strings in a manner that preserves encoded multi-byte UTF-8 and UTF-16\\n * characters. It can be accessed using:\\n *\\n * ```js\\n * const { StringDecoder } = require('string_decoder');\\n * ```\\n *\\n * The following example shows the basic use of the `StringDecoder` class.\\n *\\n * ```js\\n * const { StringDecoder } = require('string_decoder');\\n * const decoder = new StringDecoder('utf8');\\n *\\n * const cent = Buffer.from([0xC2, 0xA2]);\\n * console.log(decoder.write(cent));\\n *\\n * const euro = Buffer.from([0xE2, 0x82, 0xAC]);\\n * console.log(decoder.write(euro));\\n * ```\\n *\\n * When a `Buffer` instance is written to the `StringDecoder` instance, an\\n * internal buffer is used to ensure that the decoded string does not contain\\n * any incomplete multibyte characters. These are held in the buffer until the\\n * next call to `stringDecoder.write()` or until `stringDecoder.end()` is called.\\n *\\n * In the following example, the three UTF-8 encoded bytes of the European Euro\\n * symbol (`\u20ac`) are written over three separate operations:\\n *\\n * ```js\\n * const { StringDecoder } = require('string_decoder');\\n * const decoder = new StringDecoder('utf8');\\n *\\n * decoder.write(Buffer.from([0xE2]));\\n * decoder.write(Buffer.from([0x82]));\\n * console.log(decoder.end(Buffer.from([0xAC])));\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/string_decoder.js)\\n */\\ndeclare module 'string_decoder' {\\n    class StringDecoder {\\n        constructor(encoding?: BufferEncoding);\\n        /**\\n         * Returns a decoded string, ensuring that any incomplete multibyte characters at\\n         * the end of the `Buffer`, or `TypedArray`, or `DataView` are omitted from the\\n         * returned string and stored in an internal buffer for the next call to`stringDecoder.write()` or `stringDecoder.end()`.\\n         * @since v0.1.99\\n         * @param buffer A `Buffer`, or `TypedArray`, or `DataView` containing the bytes to decode.\\n         */\\n        write(buffer: Buffer): string;\\n        /**\\n         * Returns any remaining input stored in the internal buffer as a string. Bytes\\n         * representing incomplete UTF-8 and UTF-16 characters will be replaced with\\n         * substitution characters appropriate for the character encoding.\\n         *\\n         * If the `buffer` argument is provided, one final call to `stringDecoder.write()`is performed before returning the remaining input.\\n         * After `end()` is called, the `stringDecoder` object can be reused for new input.\\n         * @since v0.9.3\\n         * @param buffer A `Buffer`, or `TypedArray`, or `DataView` containing the bytes to decode.\\n         */\\n        end(buffer?: Buffer): string;\\n    }\\n}\\ndeclare module 'node:string_decoder' {\\n    export * from 'string_decoder';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/test.d.ts\":\"/**\\n * The `node:test` module provides a standalone testing module.\\n * @see [source](https://github.com/nodejs/node/blob/v18.x/lib/test.js)\\n */\\ndeclare module 'node:test' {\\n    /**\\n     * Programmatically start the test runner.\\n     * @since v18.9.0\\n     * @param options Configuration options for running tests.\\n     * @returns A {@link TestsStream} that emits events about the test execution.\\n     */\\n    function run(options?: RunOptions): TestsStream;\\n\\n    /**\\n     * The `test()` function is the value imported from the test module. Each invocation of this\\n     * function results in reporting the test to the {@link TestsStream}.\\n     *\\n     * The {@link TestContext} object passed to the fn argument can be used to perform actions\\n     * related to the current test. Examples include skipping the test, adding additional\\n     * diagnostic information, or creating subtests.\\n     *\\n     * `test()` returns a {@link Promise} that resolves once the test completes. The return value\\n     * can usually be discarded for top level tests. However, the return value from subtests should\\n     * be used to prevent the parent test from finishing first and cancelling the subtest as shown\\n     * in the following example.\\n     *\\n     * ```js\\n     * test('top level test', async (t) => {\\n     *   // The setTimeout() in the following subtest would cause it to outlive its\\n     *   // parent test if 'await' is removed on the next line. Once the parent test\\n     *   // completes, it will cancel any outstanding subtests.\\n     *   await t.test('longer running subtest', async (t) => {\\n     *     return new Promise((resolve, reject) => {\\n     *       setTimeout(resolve, 1000);\\n     *     });\\n     *   });\\n     * });\\n     * ```\\n     * @since v18.0.0\\n     * @param name The name of the test, which is displayed when reporting test results.\\n     *    Default: The `name` property of fn, or `'<anonymous>'` if `fn` does not have a name.\\n     * @param options Configuration options for the test\\n     * @param fn The function under test. The first argument to this function is a\\n     *    {@link TestContext} object. If the test uses callbacks, the callback function is\\n     *    passed as the second argument. Default: A no-op function.\\n     * @returns A {@link Promise} resolved with `undefined` once the test completes.\\n     */\\n    function test(name?: string, fn?: TestFn): Promise<void>;\\n    function test(name?: string, options?: TestOptions, fn?: TestFn): Promise<void>;\\n    function test(options?: TestOptions, fn?: TestFn): Promise<void>;\\n    function test(fn?: TestFn): Promise<void>;\\n\\n    /**\\n     * @since v18.6.0\\n     * @param name The name of the suite, which is displayed when reporting suite results.\\n     *    Default: The `name` property of fn, or `'<anonymous>'` if `fn` does not have a name.\\n     * @param options Configuration options for the suite\\n     * @param fn The function under suite. Default: A no-op function.\\n     */\\n    function describe(name?: string, options?: TestOptions, fn?: SuiteFn): void;\\n    function describe(name?: string, fn?: SuiteFn): void;\\n    function describe(options?: TestOptions, fn?: SuiteFn): void;\\n    function describe(fn?: SuiteFn): void;\\n    namespace describe {\\n        // Shorthand for skipping a suite, same as `describe([name], { skip: true }[, fn])`.\\n        function skip(name?: string, options?: TestOptions, fn?: SuiteFn): void;\\n        function skip(name?: string, fn?: SuiteFn): void;\\n        function skip(options?: TestOptions, fn?: SuiteFn): void;\\n        function skip(fn?: SuiteFn): void;\\n\\n        // Shorthand for marking a suite as `TODO`, same as `describe([name], { todo: true }[, fn])`.\\n        function todo(name?: string, options?: TestOptions, fn?: SuiteFn): void;\\n        function todo(name?: string, fn?: SuiteFn): void;\\n        function todo(options?: TestOptions, fn?: SuiteFn): void;\\n        function todo(fn?: SuiteFn): void;\\n    }\\n\\n    /**\\n     * @since v18.6.0\\n     * @param name The name of the test, which is displayed when reporting test results.\\n     *    Default: The `name` property of fn, or `'<anonymous>'` if `fn` does not have a name.\\n     * @param options Configuration options for the test\\n     * @param fn The function under test. If the test uses callbacks, the callback function is\\n     *    passed as the second argument. Default: A no-op function.\\n     */\\n    function it(name?: string, options?: TestOptions, fn?: ItFn): void;\\n    function it(name?: string, fn?: ItFn): void;\\n    function it(options?: TestOptions, fn?: ItFn): void;\\n    function it(fn?: ItFn): void;\\n    namespace it {\\n        // Shorthand for skipping a test, same as `it([name], { skip: true }[, fn])`.\\n        function skip(name?: string, options?: TestOptions, fn?: ItFn): void;\\n        function skip(name?: string, fn?: ItFn): void;\\n        function skip(options?: TestOptions, fn?: ItFn): void;\\n        function skip(fn?: ItFn): void;\\n\\n        // Shorthand for marking a test as `TODO`, same as `it([name], { todo: true }[, fn])`.\\n        function todo(name?: string, options?: TestOptions, fn?: ItFn): void;\\n        function todo(name?: string, fn?: ItFn): void;\\n        function todo(options?: TestOptions, fn?: ItFn): void;\\n        function todo(fn?: ItFn): void;\\n    }\\n\\n    /**\\n     * The type of a function under test. The first argument to this function is a\\n     * {@link TestContext} object. If the test uses callbacks, the callback function is passed as\\n     * the second argument.\\n     */\\n    type TestFn = (t: TestContext, done: (result?: any) => void) => any;\\n\\n    /**\\n     * The type of a function under Suite.\\n     * If the test uses callbacks, the callback function is passed as an argument\\n     */\\n    type SuiteFn = (done: (result?: any) => void) => void;\\n\\n    /**\\n     * The type of a function under test.\\n     * If the test uses callbacks, the callback function is passed as an argument\\n     */\\n    type ItFn = (done: (result?: any) => void) => any;\\n\\n    interface RunOptions {\\n        /**\\n         * If a number is provided, then that many files would run in parallel.\\n         * If truthy, it would run (number of cpu cores - 1) files in parallel.\\n         * If falsy, it would only run one file at a time.\\n         * If unspecified, subtests inherit this value from their parent.\\n         * @default true\\n         */\\n        concurrency?: number | boolean | undefined;\\n\\n        /**\\n         * An array containing the list of files to run.\\n         * If unspecified, the test runner execution model will be used.\\n         */\\n        files?: readonly string[] | undefined;\\n\\n        /**\\n         * Allows aborting an in-progress test execution.\\n         * @default undefined\\n         */\\n        signal?: AbortSignal | undefined;\\n\\n        /**\\n         * A number of milliseconds the test will fail after.\\n         * If unspecified, subtests inherit this value from their parent.\\n         * @default Infinity\\n         */\\n        timeout?: number | undefined;\\n\\n        /**\\n         * Sets inspector port of test child process.\\n         * If a nullish value is provided, each process gets its own port,\\n         * incremented from the primary's `process.debugPort`.\\n         */\\n        inspectPort?: number | (() => number) | undefined;\\n    }\\n\\n    /**\\n     * A successful call of the `run()` method will return a new `TestsStream` object,\\n     * streaming a series of events representing the execution of the tests.\\n     * `TestsStream` will emit events in the order of the tests' definitions.\\n     * @since v18.9.0\\n     */\\n    interface TestsStream extends NodeJS.ReadableStream {\\n        addListener(event: 'test:diagnostic', listener: (data: DiagnosticData) => void): this;\\n        addListener(event: 'test:fail', listener: (data: TestFail) => void): this;\\n        addListener(event: 'test:pass', listener: (data: TestPass) => void): this;\\n        addListener(event: 'test:plan', listener: (data: TestPlan) => void): this;\\n        addListener(event: 'test:start', listener: (data: TestStart) => void): this;\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        emit(event: 'test:diagnostic', data: DiagnosticData): boolean;\\n        emit(event: 'test:fail', data: TestFail): boolean;\\n        emit(event: 'test:pass', data: TestPass): boolean;\\n        emit(event: 'test:plan', data: TestPlan): boolean;\\n        emit(event: 'test:start', data: TestStart): boolean;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        on(event: 'test:diagnostic', listener: (data: DiagnosticData) => void): this;\\n        on(event: 'test:fail', listener: (data: TestFail) => void): this;\\n        on(event: 'test:pass', listener: (data: TestPass) => void): this;\\n        on(event: 'test:plan', listener: (data: TestPlan) => void): this;\\n        on(event: 'test:start', listener: (data: TestStart) => void): this;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        once(event: 'test:diagnostic', listener: (data: DiagnosticData) => void): this;\\n        once(event: 'test:fail', listener: (data: TestFail) => void): this;\\n        once(event: 'test:pass', listener: (data: TestPass) => void): this;\\n        once(event: 'test:plan', listener: (data: TestPlan) => void): this;\\n        once(event: 'test:start', listener: (data: TestStart) => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'test:diagnostic', listener: (data: DiagnosticData) => void): this;\\n        prependListener(event: 'test:fail', listener: (data: TestFail) => void): this;\\n        prependListener(event: 'test:pass', listener: (data: TestPass) => void): this;\\n        prependListener(event: 'test:plan', listener: (data: TestPlan) => void): this;\\n        prependListener(event: 'test:start', listener: (data: TestStart) => void): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'test:diagnostic', listener: (data: DiagnosticData) => void): this;\\n        prependOnceListener(event: 'test:fail', listener: (data: TestFail) => void): this;\\n        prependOnceListener(event: 'test:pass', listener: (data: TestPass) => void): this;\\n        prependOnceListener(event: 'test:plan', listener: (data: TestPlan) => void): this;\\n        prependOnceListener(event: 'test:start', listener: (data: TestStart) => void): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n    }\\n\\n    interface DiagnosticData {\\n        /**\\n         * The diagnostic message.\\n         */\\n        message: string;\\n\\n        /**\\n         * The nesting level of the test.\\n         */\\n        nesting: number;\\n    }\\n\\n    interface TestFail {\\n        /**\\n         * Additional execution metadata.\\n         */\\n        details: {\\n            /**\\n             * The duration of the test in milliseconds.\\n             */\\n            duration: number;\\n\\n            /**\\n             * The error thrown by the test.\\n             */\\n            error: Error;\\n        };\\n\\n        /**\\n         * The test name.\\n         */\\n        name: string;\\n\\n        /**\\n         * The nesting level of the test.\\n         */\\n        nesting: number;\\n\\n        /**\\n         * The ordinal number of the test.\\n         */\\n        testNumber: number;\\n\\n        /**\\n         * Present if `context.todo` is called.\\n         */\\n        todo?: string | boolean;\\n\\n        /**\\n         * Present if `context.skip` is called.\\n         */\\n        skip?: string | boolean;\\n    }\\n\\n    interface TestPass {\\n        /**\\n         * Additional execution metadata.\\n         */\\n        details: {\\n            /**\\n             * The duration of the test in milliseconds.\\n             */\\n            duration: number;\\n        };\\n\\n        /**\\n         * The test name.\\n         */\\n        name: string;\\n\\n        /**\\n         * The nesting level of the test.\\n         */\\n        nesting: number;\\n\\n        /**\\n         * The ordinal number of the test.\\n         */\\n        testNumber: number;\\n\\n        /**\\n         * Present if `context.todo` is called.\\n         */\\n        todo?: string | boolean;\\n\\n        /**\\n         * Present if `context.skip` is called.\\n         */\\n        skip?: string | boolean;\\n    }\\n\\n    interface TestPlan {\\n        /**\\n         * The nesting level of the test.\\n         */\\n        nesting: number;\\n\\n        /**\\n         * The number of subtests that have ran.\\n         */\\n        count: number;\\n    }\\n\\n    interface TestStart {\\n        /**\\n         * The test name.\\n         */\\n        name: string;\\n\\n        /**\\n         * The nesting level of the test.\\n         */\\n        nesting: number;\\n    }\\n\\n    /**\\n     * An instance of `TestContext` is passed to each test function in order to interact with the\\n     * test runner. However, the `TestContext` constructor is not exposed as part of the API.\\n     * @since v18.0.0\\n     */\\n    interface TestContext {\\n        /**\\n         * This function is used to create a hook running before each subtest of the current test.\\n         * @param fn The hook function. If the hook uses callbacks, the callback function is passed as\\n         *    the second argument. Default: A no-op function.\\n         * @param options Configuration options for the hook.\\n         * @since v18.8.0\\n         */\\n        beforeEach: typeof beforeEach;\\n\\n        /**\\n         * This function is used to create a hook that runs after the current test finishes.\\n         * @param fn The hook function. If the hook uses callbacks, the callback function is passed as\\n         *    the second argument. Default: A no-op function.\\n         * @param options Configuration options for the hook.\\n         * @since v18.13.0\\n         */\\n        after: typeof after;\\n\\n        /**\\n         * This function is used to create a hook running after each subtest of the current test.\\n         * @param fn The hook function. If the hook uses callbacks, the callback function is passed as\\n         *    the second argument. Default: A no-op function.\\n         * @param options Configuration options for the hook.\\n         * @since v18.8.0\\n         */\\n        afterEach: typeof afterEach;\\n\\n        /**\\n         * This function is used to write diagnostics to the output. Any diagnostic information is\\n         * included at the end of the test's results. This function does not return a value.\\n         * @param message Message to be reported.\\n         * @since v18.0.0\\n         */\\n        diagnostic(message: string): void;\\n\\n        /**\\n         * The name of the test.\\n         * @since v18.8.0\\n         */\\n        readonly name: string;\\n\\n        /**\\n         * If `shouldRunOnlyTests` is truthy, the test context will only run tests that have the `only`\\n         * option set. Otherwise, all tests are run. If Node.js was not started with the `--test-only`\\n         * command-line option, this function is a no-op.\\n         * @param shouldRunOnlyTests Whether or not to run `only` tests.\\n         * @since v18.0.0\\n         */\\n        runOnly(shouldRunOnlyTests: boolean): void;\\n\\n        /**\\n         * Can be used to abort test subtasks when the test has been aborted.\\n         * @since v18.7.0\\n         */\\n        readonly signal: AbortSignal;\\n\\n        /**\\n         * This function causes the test's output to indicate the test as skipped. If `message` is\\n         * provided, it is included in the output. Calling `skip()` does not terminate execution of\\n         * the test function. This function does not return a value.\\n         * @param message Optional skip message.\\n         * @since v18.0.0\\n         */\\n        skip(message?: string): void;\\n\\n        /**\\n         * This function adds a `TODO` directive to the test's output. If `message` is provided, it is\\n         * included in the output. Calling `todo()` does not terminate execution of the test\\n         * function. This function does not return a value.\\n         * @param message Optional `TODO` message.\\n         * @since v18.0.0\\n         */\\n        todo(message?: string): void;\\n\\n        /**\\n         * This function is used to create subtests under the current test. This function behaves in\\n         * the same fashion as the top level {@link test} function.\\n         * @since v18.0.0\\n         * @param name The name of the test, which is displayed when reporting test results.\\n         *    Default: The `name` property of fn, or `'<anonymous>'` if `fn` does not have a name.\\n         * @param options Configuration options for the test\\n         * @param fn The function under test. This first argument to this function is a\\n         *    {@link TestContext} object. If the test uses callbacks, the callback function is\\n         *    passed as the second argument. Default: A no-op function.\\n         * @returns A {@link Promise} resolved with `undefined` once the test completes.\\n         */\\n        test: typeof test;\\n        /**\\n         * Each test provides its own MockTracker instance.\\n         */\\n        readonly mock: MockTracker;\\n    }\\n\\n    interface TestOptions {\\n        /**\\n         * If a number is provided, then that many tests would run in parallel.\\n         * If truthy, it would run (number of cpu cores - 1) tests in parallel.\\n         * For subtests, it will be `Infinity` tests in parallel.\\n         * If falsy, it would only run one test at a time.\\n         * If unspecified, subtests inherit this value from their parent.\\n         * @default false\\n         */\\n        concurrency?: number | boolean | undefined;\\n\\n        /**\\n         * If truthy, and the test context is configured to run `only` tests, then this test will be\\n         * run. Otherwise, the test is skipped.\\n         * @default false\\n         */\\n        only?: boolean | undefined;\\n\\n        /**\\n         * Allows aborting an in-progress test.\\n         * @since v18.8.0\\n         */\\n        signal?: AbortSignal | undefined;\\n\\n        /**\\n         * If truthy, the test is skipped. If a string is provided, that string is displayed in the\\n         * test results as the reason for skipping the test.\\n         * @default false\\n         */\\n        skip?: boolean | string | undefined;\\n\\n        /**\\n         * A number of milliseconds the test will fail after. If unspecified, subtests inherit this\\n         * value from their parent.\\n         * @default Infinity\\n         * @since v18.7.0\\n         */\\n        timeout?: number | undefined;\\n\\n        /**\\n         * If truthy, the test marked as `TODO`. If a string is provided, that string is displayed in\\n         * the test results as the reason why the test is `TODO`.\\n         * @default false\\n         */\\n        todo?: boolean | string | undefined;\\n    }\\n\\n    /**\\n     * This function is used to create a hook running before running a suite.\\n     * @param fn The hook function. If the hook uses callbacks, the callback function is passed as\\n     *    the second argument. Default: A no-op function.\\n     * @param options Configuration options for the hook.\\n     * @since v18.8.0\\n     */\\n    function before(fn?: HookFn, options?: HookOptions): void;\\n\\n    /**\\n     * This function is used to create a hook running after running a suite.\\n     * @param fn The hook function. If the hook uses callbacks, the callback function is passed as\\n     *    the second argument. Default: A no-op function.\\n     * @param options Configuration options for the hook.\\n     * @since v18.8.0\\n     */\\n    function after(fn?: HookFn, options?: HookOptions): void;\\n\\n    /**\\n     * This function is used to create a hook running before each subtest of the current suite.\\n     * @param fn The hook function. If the hook uses callbacks, the callback function is passed as\\n     *    the second argument. Default: A no-op function.\\n     * @param options Configuration options for the hook.\\n     * @since v18.8.0\\n     */\\n    function beforeEach(fn?: HookFn, options?: HookOptions): void;\\n\\n    /**\\n     * This function is used to create a hook running after each subtest of the current test.\\n     * @param fn The hook function. If the hook uses callbacks, the callback function is passed as\\n     *    the second argument. Default: A no-op function.\\n     * @param options Configuration options for the hook.\\n     * @since v18.8.0\\n     */\\n    function afterEach(fn?: HookFn, options?: HookOptions): void;\\n\\n    /**\\n     * The hook function. If the hook uses callbacks, the callback function is passed as the\\n     * second argument.\\n     */\\n    type HookFn = (done: (result?: any) => void) => any;\\n\\n    /**\\n     * Configuration options for hooks.\\n     * @since v18.8.0\\n     */\\n    interface HookOptions {\\n        /**\\n         * Allows aborting an in-progress hook.\\n         */\\n        signal?: AbortSignal | undefined;\\n\\n        /**\\n         * A number of milliseconds the hook will fail after. If unspecified, subtests inherit this\\n         * value from their parent.\\n         * @default Infinity\\n         */\\n        timeout?: number | undefined;\\n    }\\n\\n    interface MockFunctionOptions {\\n        /**\\n         * The number of times that the mock will use the behavior of `implementation`.\\n         * Once the mock function has been called `times` times,\\n         * it will automatically restore the behavior of `original`.\\n         * This value must be an integer greater than zero.\\n         * @default Infinity\\n         */\\n        times?: number | undefined;\\n    }\\n\\n    interface MockMethodOptions extends MockFunctionOptions {\\n        /**\\n         * If `true`, `object[methodName]` is treated as a getter.\\n         * This option cannot be used with the `setter` option.\\n         */\\n        getter?: boolean | undefined;\\n\\n        /**\\n         * If `true`, `object[methodName]` is treated as a setter.\\n         * This option cannot be used with the `getter` option.\\n         */\\n        setter?: boolean | undefined;\\n    }\\n\\n    type Mock<F extends Function> = F & {\\n        mock: MockFunctionContext<F>;\\n    };\\n\\n    type NoOpFunction = (...args: any[]) => undefined;\\n\\n    type FunctionPropertyNames<T> = {\\n        [K in keyof T]: T[K] extends Function ? K : never;\\n    }[keyof T];\\n\\n    interface MockTracker {\\n        /**\\n         * This function is used to create a mock function.\\n         * @param original An optional function to create a mock on.\\n         * @param implementation An optional function used as the mock implementation for `original`.\\n         *  This is useful for creating mocks that exhibit one behavior for a specified number of calls and then restore the behavior of `original`.\\n         * @param options Optional configuration options for the mock function.\\n         */\\n        fn<F extends Function = NoOpFunction>(original?: F, options?: MockFunctionOptions): Mock<F>;\\n        fn<F extends Function = NoOpFunction, Implementation extends Function = F>(original?: F, implementation?: Implementation, options?: MockFunctionOptions): Mock<F | Implementation>;\\n\\n        /**\\n         * This function is used to create a mock on an existing object method.\\n         * @param object The object whose method is being mocked.\\n         * @param methodName The identifier of the method on `object` to mock. If `object[methodName]` is not a function, an error is thrown.\\n         * @param implementation An optional function used as the mock implementation for `object[methodName]`.\\n         * @param options Optional configuration options for the mock method.\\n         */\\n        method<\\n            MockedObject extends object,\\n            MethodName extends FunctionPropertyNames<MockedObject>,\\n        >(\\n            object: MockedObject,\\n            methodName: MethodName,\\n            options?: MockFunctionOptions,\\n        ): MockedObject[MethodName] extends Function\\n            ? Mock<MockedObject[MethodName]>\\n            : never;\\n        method<\\n            MockedObject extends object,\\n            MethodName extends FunctionPropertyNames<MockedObject>,\\n            Implementation extends Function,\\n        >(\\n            object: MockedObject,\\n            methodName: MethodName,\\n            implementation: Implementation,\\n            options?: MockFunctionOptions,\\n        ): MockedObject[MethodName] extends Function\\n            ? Mock<MockedObject[MethodName] | Implementation>\\n            : never;\\n        method<MockedObject extends object>(\\n            object: MockedObject,\\n            methodName: keyof MockedObject,\\n            options: MockMethodOptions,\\n        ): Mock<Function>;\\n        method<MockedObject extends object>(\\n            object: MockedObject,\\n            methodName: keyof MockedObject,\\n            implementation: Function,\\n            options: MockMethodOptions,\\n        ): Mock<Function>;\\n\\n        /**\\n         * This function is syntax sugar for {@link MockTracker.method} with `options.getter` set to `true`.\\n         */\\n        getter<\\n            MockedObject extends object,\\n            MethodName extends keyof MockedObject,\\n        >(\\n            object: MockedObject,\\n            methodName: MethodName,\\n            options?: MockFunctionOptions,\\n        ): Mock<() => MockedObject[MethodName]>;\\n        getter<\\n            MockedObject extends object,\\n            MethodName extends keyof MockedObject,\\n            Implementation extends Function,\\n        >(\\n            object: MockedObject,\\n            methodName: MethodName,\\n            implementation?: Implementation,\\n            options?: MockFunctionOptions,\\n        ): Mock<(() => MockedObject[MethodName]) | Implementation>;\\n\\n        /**\\n         * This function is syntax sugar for {@link MockTracker.method} with `options.setter` set to `true`.\\n         */\\n        setter<\\n            MockedObject extends object,\\n            MethodName extends keyof MockedObject,\\n        >(\\n            object: MockedObject,\\n            methodName: MethodName,\\n            options?: MockFunctionOptions,\\n        ): Mock<(value: MockedObject[MethodName]) => void>;\\n        setter<\\n            MockedObject extends object,\\n            MethodName extends keyof MockedObject,\\n            Implementation extends Function,\\n        >(\\n            object: MockedObject,\\n            methodName: MethodName,\\n            implementation?: Implementation,\\n            options?: MockFunctionOptions,\\n        ): Mock<((value: MockedObject[MethodName]) => void) | Implementation>;\\n\\n        /**\\n         * This function restores the default behavior of all mocks that were previously created by this `MockTracker`\\n         * and disassociates the mocks from the `MockTracker` instance. Once disassociated, the mocks can still be used,\\n         * but the `MockTracker` instance can no longer be used to reset their behavior or otherwise interact with them.\\n         *\\n         * After each test completes, this function is called on the test context's `MockTracker`.\\n         * If the global `MockTracker` is used extensively, calling this function manually is recommended.\\n         */\\n        reset(): void;\\n\\n        /**\\n         * This function restores the default behavior of all mocks that were previously created by this `MockTracker`.\\n         * Unlike `mock.reset()`, `mock.restoreAll()` does not disassociate the mocks from the `MockTracker` instance.\\n         */\\n        restoreAll(): void;\\n    }\\n\\n    const mock: MockTracker;\\n\\n    interface MockFunctionCall<\\n        F extends Function,\\n        ReturnType = F extends (...args: any) => infer T\\n            ? T\\n            : F extends abstract new (...args: any) => infer T\\n                ? T\\n                : unknown,\\n        Args = F extends (...args: infer Y) => any\\n            ? Y\\n            : F extends abstract new (...args: infer Y) => any\\n                ? Y\\n                : unknown[],\\n    > {\\n        /**\\n         * An array of the arguments passed to the mock function.\\n         */\\n        arguments: Args;\\n        /**\\n         * If the mocked function threw then this property contains the thrown value.\\n         */\\n        error: unknown | undefined;\\n        /**\\n         * The value returned by the mocked function.\\n         *\\n         * If the mocked function threw, it will be `undefined`.\\n         */\\n        result: ReturnType | undefined;\\n        /**\\n         * An `Error` object whose stack can be used to determine the callsite of the mocked function invocation.\\n         */\\n        stack: Error;\\n        /**\\n         * If the mocked function is a constructor, this field contains the class being constructed.\\n         * Otherwise this will be `undefined`.\\n         */\\n        target: F extends abstract new (...args: any) => any ? F : undefined;\\n        /**\\n         * The mocked function's `this` value.\\n         */\\n        this: unknown;\\n    }\\n\\n    interface MockFunctionContext<F extends Function> {\\n        /**\\n         * A getter that returns a copy of the internal array used to track calls to the mock.\\n         */\\n        readonly calls: Array<MockFunctionCall<F>>;\\n\\n        /**\\n         * This function returns the number of times that this mock has been invoked.\\n         * This function is more efficient than checking `ctx.calls.length`\\n         * because `ctx.calls` is a getter that creates a copy of the internal call tracking array.\\n         */\\n        callCount(): number;\\n\\n        /**\\n         * This function is used to change the behavior of an existing mock.\\n         * @param implementation The function to be used as the mock's new implementation.\\n         */\\n        mockImplementation(implementation: Function): void;\\n\\n        /**\\n         * This function is used to change the behavior of an existing mock for a single invocation.\\n         * Once invocation `onCall` has occurred, the mock will revert to whatever behavior\\n         * it would have used had `mockImplementationOnce()` not been called.\\n         * @param implementation The function to be used as the mock's implementation for the invocation number specified by `onCall`.\\n         * @param onCall The invocation number that will use `implementation`.\\n         *  If the specified invocation has already occurred then an exception is thrown.\\n         */\\n        mockImplementationOnce(implementation: Function, onCall?: number): void;\\n\\n        /**\\n         * Resets the call history of the mock function.\\n         */\\n        resetCalls(): void;\\n\\n        /**\\n         * Resets the implementation of the mock function to its original behavior.\\n         * The mock can still be used after calling this function.\\n         */\\n        restore(): void;\\n    }\\n\\n    export { test as default, run, test, describe, it, before, after, beforeEach, afterEach, mock };\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/timers.d.ts\":\"/**\\n * The `timer` module exposes a global API for scheduling functions to\\n * be called at some future period of time. Because the timer functions are\\n * globals, there is no need to call `require('timers')` to use the API.\\n *\\n * The timer functions within Node.js implement a similar API as the timers API\\n * provided by Web Browsers but use a different internal implementation that is\\n * built around the Node.js [Event Loop](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#setimmediate-vs-settimeout).\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/timers.js)\\n */\\ndeclare module 'timers' {\\n    import { Abortable } from 'node:events';\\n    import { setTimeout as setTimeoutPromise, setImmediate as setImmediatePromise, setInterval as setIntervalPromise } from 'node:timers/promises';\\n    interface TimerOptions extends Abortable {\\n        /**\\n         * Set to `false` to indicate that the scheduled `Timeout`\\n         * should not require the Node.js event loop to remain active.\\n         * @default true\\n         */\\n        ref?: boolean | undefined;\\n    }\\n    let setTimeout: typeof global.setTimeout;\\n    let clearTimeout: typeof global.clearTimeout;\\n    let setInterval: typeof global.setInterval;\\n    let clearInterval: typeof global.clearInterval;\\n    let setImmediate: typeof global.setImmediate;\\n    let clearImmediate: typeof global.clearImmediate;\\n    global {\\n        namespace NodeJS {\\n            // compatibility with older typings\\n            interface Timer extends RefCounted {\\n                hasRef(): boolean;\\n                refresh(): this;\\n                [Symbol.toPrimitive](): number;\\n            }\\n            interface Immediate extends RefCounted {\\n                /**\\n                 * If true, the `Immediate` object will keep the Node.js event loop active.\\n                 * @since v11.0.0\\n                 */\\n                hasRef(): boolean;\\n                _onImmediate: Function; // to distinguish it from the Timeout class\\n            }\\n            interface Timeout extends Timer {\\n                /**\\n                 * If true, the `Timeout` object will keep the Node.js event loop active.\\n                 * @since v11.0.0\\n                 */\\n                hasRef(): boolean;\\n                /**\\n                 * Sets the timer's start time to the current time, and reschedules the timer to\\n                 * call its callback at the previously specified duration adjusted to the current\\n                 * time. This is useful for refreshing a timer without allocating a new\\n                 * JavaScript object.\\n                 *\\n                 * Using this on a timer that has already called its callback will reactivate the\\n                 * timer.\\n                 * @since v10.2.0\\n                 * @return a reference to `timeout`\\n                 */\\n                refresh(): this;\\n                [Symbol.toPrimitive](): number;\\n            }\\n        }\\n        function setTimeout<TArgs extends any[]>(callback: (...args: TArgs) => void, ms?: number, ...args: TArgs): NodeJS.Timeout;\\n        // util.promisify no rest args compability\\n        // tslint:disable-next-line void-return\\n        function setTimeout(callback: (args: void) => void, ms?: number): NodeJS.Timeout;\\n        namespace setTimeout {\\n            const __promisify__: typeof setTimeoutPromise;\\n        }\\n        function clearTimeout(timeoutId: NodeJS.Timeout | string | number | undefined): void;\\n        function setInterval<TArgs extends any[]>(callback: (...args: TArgs) => void, ms?: number, ...args: TArgs): NodeJS.Timer;\\n        // util.promisify no rest args compability\\n        // tslint:disable-next-line void-return\\n        function setInterval(callback: (args: void) => void, ms?: number): NodeJS.Timer;\\n        namespace setInterval {\\n            const __promisify__: typeof setIntervalPromise;\\n        }\\n        function clearInterval(intervalId: NodeJS.Timeout | string | number | undefined): void;\\n        function setImmediate<TArgs extends any[]>(callback: (...args: TArgs) => void, ...args: TArgs): NodeJS.Immediate;\\n        // util.promisify no rest args compability\\n        // tslint:disable-next-line void-return\\n        function setImmediate(callback: (args: void) => void): NodeJS.Immediate;\\n        namespace setImmediate {\\n            const __promisify__: typeof setImmediatePromise;\\n        }\\n        function clearImmediate(immediateId: NodeJS.Immediate | undefined): void;\\n        function queueMicrotask(callback: () => void): void;\\n    }\\n}\\ndeclare module 'node:timers' {\\n    export * from 'timers';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/tls.d.ts\":\"/**\\n * The `tls` module provides an implementation of the Transport Layer Security\\n * (TLS) and Secure Socket Layer (SSL) protocols that is built on top of OpenSSL.\\n * The module can be accessed using:\\n *\\n * ```js\\n * const tls = require('tls');\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/tls.js)\\n */\\ndeclare module 'tls' {\\n    import { X509Certificate } from 'node:crypto';\\n    import * as net from 'node:net';\\n    import * as stream from 'stream';\\n    const CLIENT_RENEG_LIMIT: number;\\n    const CLIENT_RENEG_WINDOW: number;\\n    interface Certificate {\\n        /**\\n         * Country code.\\n         */\\n        C: string;\\n        /**\\n         * Street.\\n         */\\n        ST: string;\\n        /**\\n         * Locality.\\n         */\\n        L: string;\\n        /**\\n         * Organization.\\n         */\\n        O: string;\\n        /**\\n         * Organizational unit.\\n         */\\n        OU: string;\\n        /**\\n         * Common name.\\n         */\\n        CN: string;\\n    }\\n    interface PeerCertificate {\\n        /**\\n         * `true` if a Certificate Authority (CA), `false` otherwise.\\n         * @since v18.13.0\\n         */\\n        ca: boolean;\\n        /**\\n         * The DER encoded X.509 certificate data.\\n         */\\n        raw: Buffer;\\n        /**\\n         * The certificate subject.\\n         */\\n        subject: Certificate;\\n        /**\\n         * The certificate issuer, described in the same terms as the `subject`.\\n         */\\n        issuer: Certificate;\\n        /**\\n         * The date-time the certificate is valid from.\\n         */\\n        valid_from: string;\\n        /**\\n         * The date-time the certificate is valid to.\\n         */\\n        valid_to: string;\\n        /**\\n         * The certificate serial number, as a hex string.\\n         */\\n        serialNumber: string;\\n        /**\\n         * The SHA-1 digest of the DER encoded certificate.\\n         * It is returned as a `:` separated hexadecimal string.\\n         */\\n        fingerprint: string;\\n        /**\\n         * The SHA-256 digest of the DER encoded certificate.\\n         * It is returned as a `:` separated hexadecimal string.\\n         */\\n        fingerprint256: string;\\n        /**\\n         * The SHA-512 digest of the DER encoded certificate.\\n         * It is returned as a `:` separated hexadecimal string.\\n         */\\n        fingerprint512: string;\\n        /**\\n         * The extended key usage, a set of OIDs.\\n         */\\n        ext_key_usage?: string[];\\n        /**\\n         * A string containing concatenated names for the subject,\\n         * an alternative to the `subject` names.\\n         */\\n        subjectaltname?: string;\\n        /**\\n         * An array describing the AuthorityInfoAccess, used with OCSP.\\n         */\\n        infoAccess?: NodeJS.Dict<string[]>;\\n        /**\\n         * For RSA keys: The RSA bit size.\\n         *\\n         * For EC keys: The key size in bits.\\n         */\\n        bits?: number;\\n        /**\\n         * The RSA exponent, as a string in hexadecimal number notation.\\n         */\\n        exponent?: string;\\n        /**\\n         * The RSA modulus, as a hexadecimal string.\\n         */\\n        modulus?: string;\\n        /**\\n         * The public key.\\n         */\\n        pubkey?: Buffer;\\n        /**\\n         * The ASN.1 name of the OID of the elliptic curve.\\n         * Well-known curves are identified by an OID.\\n         * While it is unusual, it is possible that the curve\\n         * is identified by its mathematical properties,\\n         * in which case it will not have an OID.\\n         */\\n        asn1Curve?: string;\\n        /**\\n         * The NIST name for the elliptic curve,if it has one\\n         * (not all well-known curves have been assigned names by NIST).\\n         */\\n        nistCurve?: string;\\n    }\\n    interface DetailedPeerCertificate extends PeerCertificate {\\n        /**\\n         * The issuer certificate object.\\n         * For self-signed certificates, this may be a circular reference.\\n         */\\n        issuerCertificate: DetailedPeerCertificate;\\n    }\\n    interface CipherNameAndProtocol {\\n        /**\\n         * The cipher name.\\n         */\\n        name: string;\\n        /**\\n         * SSL/TLS protocol version.\\n         */\\n        version: string;\\n        /**\\n         * IETF name for the cipher suite.\\n         */\\n        standardName: string;\\n    }\\n    interface EphemeralKeyInfo {\\n        /**\\n         * The supported types are 'DH' and 'ECDH'.\\n         */\\n        type: string;\\n        /**\\n         * The name property is available only when type is 'ECDH'.\\n         */\\n        name?: string | undefined;\\n        /**\\n         * The size of parameter of an ephemeral key exchange.\\n         */\\n        size: number;\\n    }\\n    interface KeyObject {\\n        /**\\n         * Private keys in PEM format.\\n         */\\n        pem: string | Buffer;\\n        /**\\n         * Optional passphrase.\\n         */\\n        passphrase?: string | undefined;\\n    }\\n    interface PxfObject {\\n        /**\\n         * PFX or PKCS12 encoded private key and certificate chain.\\n         */\\n        buf: string | Buffer;\\n        /**\\n         * Optional passphrase.\\n         */\\n        passphrase?: string | undefined;\\n    }\\n    interface TLSSocketOptions extends SecureContextOptions, CommonConnectionOptions {\\n        /**\\n         * If true the TLS socket will be instantiated in server-mode.\\n         * Defaults to false.\\n         */\\n        isServer?: boolean | undefined;\\n        /**\\n         * An optional net.Server instance.\\n         */\\n        server?: net.Server | undefined;\\n        /**\\n         * An optional Buffer instance containing a TLS session.\\n         */\\n        session?: Buffer | undefined;\\n        /**\\n         * If true, specifies that the OCSP status request extension will be\\n         * added to the client hello and an 'OCSPResponse' event will be\\n         * emitted on the socket before establishing a secure communication\\n         */\\n        requestOCSP?: boolean | undefined;\\n    }\\n    /**\\n     * Performs transparent encryption of written data and all required TLS\\n     * negotiation.\\n     *\\n     * Instances of `tls.TLSSocket` implement the duplex `Stream` interface.\\n     *\\n     * Methods that return TLS connection metadata (e.g.{@link TLSSocket.getPeerCertificate} will only return data while the\\n     * connection is open.\\n     * @since v0.11.4\\n     */\\n    class TLSSocket extends net.Socket {\\n        /**\\n         * Construct a new tls.TLSSocket object from an existing TCP socket.\\n         */\\n        constructor(socket: net.Socket, options?: TLSSocketOptions);\\n        /**\\n         * This property is `true` if the peer certificate was signed by one of the CAs\\n         * specified when creating the `tls.TLSSocket` instance, otherwise `false`.\\n         * @since v0.11.4\\n         */\\n        authorized: boolean;\\n        /**\\n         * Returns the reason why the peer's certificate was not been verified. This\\n         * property is set only when `tlsSocket.authorized === false`.\\n         * @since v0.11.4\\n         */\\n        authorizationError: Error;\\n        /**\\n         * Always returns `true`. This may be used to distinguish TLS sockets from regular`net.Socket` instances.\\n         * @since v0.11.4\\n         */\\n        encrypted: true;\\n        /**\\n         * String containing the selected ALPN protocol.\\n         * Before a handshake has completed, this value is always null.\\n         * When a handshake is completed but not ALPN protocol was selected, tlsSocket.alpnProtocol equals false.\\n         */\\n        alpnProtocol: string | false | null;\\n        /**\\n         * Returns an object representing the local certificate. The returned object has\\n         * some properties corresponding to the fields of the certificate.\\n         *\\n         * See {@link TLSSocket.getPeerCertificate} for an example of the certificate\\n         * structure.\\n         *\\n         * If there is no local certificate, an empty object will be returned. If the\\n         * socket has been destroyed, `null` will be returned.\\n         * @since v11.2.0\\n         */\\n        getCertificate(): PeerCertificate | object | null;\\n        /**\\n         * Returns an object containing information on the negotiated cipher suite.\\n         *\\n         * For example:\\n         *\\n         * ```json\\n         * {\\n         *     \\\"name\\\": \\\"AES128-SHA256\\\",\\n         *     \\\"standardName\\\": \\\"TLS_RSA_WITH_AES_128_CBC_SHA256\\\",\\n         *     \\\"version\\\": \\\"TLSv1.2\\\"\\n         * }\\n         * ```\\n         *\\n         * See [SSL\\\\_CIPHER\\\\_get\\\\_name](https://www.openssl.org/docs/man1.1.1/man3/SSL_CIPHER_get_name.html) for more information.\\n         * @since v0.11.4\\n         */\\n        getCipher(): CipherNameAndProtocol;\\n        /**\\n         * Returns an object representing the type, name, and size of parameter of\\n         * an ephemeral key exchange in `perfect forward secrecy` on a client\\n         * connection. It returns an empty object when the key exchange is not\\n         * ephemeral. As this is only supported on a client socket; `null` is returned\\n         * if called on a server socket. The supported types are `'DH'` and `'ECDH'`. The`name` property is available only when type is `'ECDH'`.\\n         *\\n         * For example: `{ type: 'ECDH', name: 'prime256v1', size: 256 }`.\\n         * @since v5.0.0\\n         */\\n        getEphemeralKeyInfo(): EphemeralKeyInfo | object | null;\\n        /**\\n         * As the `Finished` messages are message digests of the complete handshake\\n         * (with a total of 192 bits for TLS 1.0 and more for SSL 3.0), they can\\n         * be used for external authentication procedures when the authentication\\n         * provided by SSL/TLS is not desired or is not enough.\\n         *\\n         * Corresponds to the `SSL_get_finished` routine in OpenSSL and may be used\\n         * to implement the `tls-unique` channel binding from [RFC 5929](https://tools.ietf.org/html/rfc5929).\\n         * @since v9.9.0\\n         * @return The latest `Finished` message that has been sent to the socket as part of a SSL/TLS handshake, or `undefined` if no `Finished` message has been sent yet.\\n         */\\n        getFinished(): Buffer | undefined;\\n        /**\\n         * Returns an object representing the peer's certificate. If the peer does not\\n         * provide a certificate, an empty object will be returned. If the socket has been\\n         * destroyed, `null` will be returned.\\n         *\\n         * If the full certificate chain was requested, each certificate will include an`issuerCertificate` property containing an object representing its issuer's\\n         * certificate.\\n         * @since v0.11.4\\n         * @param detailed Include the full certificate chain if `true`, otherwise include just the peer's certificate.\\n         * @return A certificate object.\\n         */\\n        getPeerCertificate(detailed: true): DetailedPeerCertificate;\\n        getPeerCertificate(detailed?: false): PeerCertificate;\\n        getPeerCertificate(detailed?: boolean): PeerCertificate | DetailedPeerCertificate;\\n        /**\\n         * As the `Finished` messages are message digests of the complete handshake\\n         * (with a total of 192 bits for TLS 1.0 and more for SSL 3.0), they can\\n         * be used for external authentication procedures when the authentication\\n         * provided by SSL/TLS is not desired or is not enough.\\n         *\\n         * Corresponds to the `SSL_get_peer_finished` routine in OpenSSL and may be used\\n         * to implement the `tls-unique` channel binding from [RFC 5929](https://tools.ietf.org/html/rfc5929).\\n         * @since v9.9.0\\n         * @return The latest `Finished` message that is expected or has actually been received from the socket as part of a SSL/TLS handshake, or `undefined` if there is no `Finished` message so\\n         * far.\\n         */\\n        getPeerFinished(): Buffer | undefined;\\n        /**\\n         * Returns a string containing the negotiated SSL/TLS protocol version of the\\n         * current connection. The value `'unknown'` will be returned for connected\\n         * sockets that have not completed the handshaking process. The value `null` will\\n         * be returned for server sockets or disconnected client sockets.\\n         *\\n         * Protocol versions are:\\n         *\\n         * * `'SSLv3'`\\n         * * `'TLSv1'`\\n         * * `'TLSv1.1'`\\n         * * `'TLSv1.2'`\\n         * * `'TLSv1.3'`\\n         *\\n         * See the OpenSSL [`SSL_get_version`](https://www.openssl.org/docs/man1.1.1/man3/SSL_get_version.html) documentation for more information.\\n         * @since v5.7.0\\n         */\\n        getProtocol(): string | null;\\n        /**\\n         * Returns the TLS session data or `undefined` if no session was\\n         * negotiated. On the client, the data can be provided to the `session` option of {@link connect} to resume the connection. On the server, it may be useful\\n         * for debugging.\\n         *\\n         * See `Session Resumption` for more information.\\n         *\\n         * Note: `getSession()` works only for TLSv1.2 and below. For TLSv1.3, applications\\n         * must use the `'session'` event (it also works for TLSv1.2 and below).\\n         * @since v0.11.4\\n         */\\n        getSession(): Buffer | undefined;\\n        /**\\n         * See [SSL\\\\_get\\\\_shared\\\\_sigalgs](https://www.openssl.org/docs/man1.1.1/man3/SSL_get_shared_sigalgs.html) for more information.\\n         * @since v12.11.0\\n         * @return List of signature algorithms shared between the server and the client in the order of decreasing preference.\\n         */\\n        getSharedSigalgs(): string[];\\n        /**\\n         * For a client, returns the TLS session ticket if one is available, or`undefined`. For a server, always returns `undefined`.\\n         *\\n         * It may be useful for debugging.\\n         *\\n         * See `Session Resumption` for more information.\\n         * @since v0.11.4\\n         */\\n        getTLSTicket(): Buffer | undefined;\\n        /**\\n         * See `Session Resumption` for more information.\\n         * @since v0.5.6\\n         * @return `true` if the session was reused, `false` otherwise.\\n         */\\n        isSessionReused(): boolean;\\n        /**\\n         * The `tlsSocket.renegotiate()` method initiates a TLS renegotiation process.\\n         * Upon completion, the `callback` function will be passed a single argument\\n         * that is either an `Error` (if the request failed) or `null`.\\n         *\\n         * This method can be used to request a peer's certificate after the secure\\n         * connection has been established.\\n         *\\n         * When running as the server, the socket will be destroyed with an error after`handshakeTimeout` timeout.\\n         *\\n         * For TLSv1.3, renegotiation cannot be initiated, it is not supported by the\\n         * protocol.\\n         * @since v0.11.8\\n         * @param callback If `renegotiate()` returned `true`, callback is attached once to the `'secure'` event. If `renegotiate()` returned `false`, `callback` will be called in the next tick with\\n         * an error, unless the `tlsSocket` has been destroyed, in which case `callback` will not be called at all.\\n         * @return `true` if renegotiation was initiated, `false` otherwise.\\n         */\\n        renegotiate(\\n            options: {\\n                rejectUnauthorized?: boolean | undefined;\\n                requestCert?: boolean | undefined;\\n            },\\n            callback: (err: Error | null) => void\\n        ): undefined | boolean;\\n        /**\\n         * The `tlsSocket.setMaxSendFragment()` method sets the maximum TLS fragment size.\\n         * Returns `true` if setting the limit succeeded; `false` otherwise.\\n         *\\n         * Smaller fragment sizes decrease the buffering latency on the client: larger\\n         * fragments are buffered by the TLS layer until the entire fragment is received\\n         * and its integrity is verified; large fragments can span multiple roundtrips\\n         * and their processing can be delayed due to packet loss or reordering. However,\\n         * smaller fragments add extra TLS framing bytes and CPU overhead, which may\\n         * decrease overall server throughput.\\n         * @since v0.11.11\\n         * @param [size=16384] The maximum TLS fragment size. The maximum value is `16384`.\\n         */\\n        setMaxSendFragment(size: number): boolean;\\n        /**\\n         * Disables TLS renegotiation for this `TLSSocket` instance. Once called, attempts\\n         * to renegotiate will trigger an `'error'` event on the `TLSSocket`.\\n         * @since v8.4.0\\n         */\\n        disableRenegotiation(): void;\\n        /**\\n         * When enabled, TLS packet trace information is written to `stderr`. This can be\\n         * used to debug TLS connection problems.\\n         *\\n         * The format of the output is identical to the output of`openssl s_client -trace` or `openssl s_server -trace`. While it is produced by\\n         * OpenSSL's `SSL_trace()` function, the format is undocumented, can change\\n         * without notice, and should not be relied on.\\n         * @since v12.2.0\\n         */\\n        enableTrace(): void;\\n        /**\\n         * Returns the peer certificate as an `X509Certificate` object.\\n         *\\n         * If there is no peer certificate, or the socket has been destroyed,`undefined` will be returned.\\n         * @since v15.9.0\\n         */\\n        getPeerX509Certificate(): X509Certificate | undefined;\\n        /**\\n         * Returns the local certificate as an `X509Certificate` object.\\n         *\\n         * If there is no local certificate, or the socket has been destroyed,`undefined` will be returned.\\n         * @since v15.9.0\\n         */\\n        getX509Certificate(): X509Certificate | undefined;\\n        /**\\n         * Keying material is used for validations to prevent different kind of attacks in\\n         * network protocols, for example in the specifications of IEEE 802.1X.\\n         *\\n         * Example\\n         *\\n         * ```js\\n         * const keyingMaterial = tlsSocket.exportKeyingMaterial(\\n         *   128,\\n         *   'client finished');\\n         *\\n         * /*\\n         *  Example return value of keyingMaterial:\\n         *  <Buffer 76 26 af 99 c5 56 8e 42 09 91 ef 9f 93 cb ad 6c 7b 65 f8 53 f1 d8 d9\\n         *     12 5a 33 b8 b5 25 df 7b 37 9f e0 e2 4f b8 67 83 a3 2f cd 5d 41 42 4c 91\\n         *     74 ef 2c ... 78 more bytes>\\n         *\\n         * ```\\n         *\\n         * See the OpenSSL [`SSL_export_keying_material`](https://www.openssl.org/docs/man1.1.1/man3/SSL_export_keying_material.html) documentation for more\\n         * information.\\n         * @since v13.10.0, v12.17.0\\n         * @param length number of bytes to retrieve from keying material\\n         * @param label an application specific label, typically this will be a value from the [IANA Exporter Label\\n         * Registry](https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#exporter-labels).\\n         * @param context Optionally provide a context.\\n         * @return requested bytes of the keying material\\n         */\\n        exportKeyingMaterial(length: number, label: string, context: Buffer): Buffer;\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        addListener(event: 'OCSPResponse', listener: (response: Buffer) => void): this;\\n        addListener(event: 'secureConnect', listener: () => void): this;\\n        addListener(event: 'session', listener: (session: Buffer) => void): this;\\n        addListener(event: 'keylog', listener: (line: Buffer) => void): this;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        emit(event: 'OCSPResponse', response: Buffer): boolean;\\n        emit(event: 'secureConnect'): boolean;\\n        emit(event: 'session', session: Buffer): boolean;\\n        emit(event: 'keylog', line: Buffer): boolean;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        on(event: 'OCSPResponse', listener: (response: Buffer) => void): this;\\n        on(event: 'secureConnect', listener: () => void): this;\\n        on(event: 'session', listener: (session: Buffer) => void): this;\\n        on(event: 'keylog', listener: (line: Buffer) => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        once(event: 'OCSPResponse', listener: (response: Buffer) => void): this;\\n        once(event: 'secureConnect', listener: () => void): this;\\n        once(event: 'session', listener: (session: Buffer) => void): this;\\n        once(event: 'keylog', listener: (line: Buffer) => void): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'OCSPResponse', listener: (response: Buffer) => void): this;\\n        prependListener(event: 'secureConnect', listener: () => void): this;\\n        prependListener(event: 'session', listener: (session: Buffer) => void): this;\\n        prependListener(event: 'keylog', listener: (line: Buffer) => void): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'OCSPResponse', listener: (response: Buffer) => void): this;\\n        prependOnceListener(event: 'secureConnect', listener: () => void): this;\\n        prependOnceListener(event: 'session', listener: (session: Buffer) => void): this;\\n        prependOnceListener(event: 'keylog', listener: (line: Buffer) => void): this;\\n    }\\n    interface CommonConnectionOptions {\\n        /**\\n         * An optional TLS context object from tls.createSecureContext()\\n         */\\n        secureContext?: SecureContext | undefined;\\n        /**\\n         * When enabled, TLS packet trace information is written to `stderr`. This can be\\n         * used to debug TLS connection problems.\\n         * @default false\\n         */\\n        enableTrace?: boolean | undefined;\\n        /**\\n         * If true the server will request a certificate from clients that\\n         * connect and attempt to verify that certificate. Defaults to\\n         * false.\\n         */\\n        requestCert?: boolean | undefined;\\n        /**\\n         * An array of strings or a Buffer naming possible ALPN protocols.\\n         * (Protocols should be ordered by their priority.)\\n         */\\n        ALPNProtocols?: string[] | Uint8Array[] | Uint8Array | undefined;\\n        /**\\n         * SNICallback(servername, cb) <Function> A function that will be\\n         * called if the client supports SNI TLS extension. Two arguments\\n         * will be passed when called: servername and cb. SNICallback should\\n         * invoke cb(null, ctx), where ctx is a SecureContext instance.\\n         * (tls.createSecureContext(...) can be used to get a proper\\n         * SecureContext.) If SNICallback wasn't provided the default callback\\n         * with high-level API will be used (see below).\\n         */\\n        SNICallback?: ((servername: string, cb: (err: Error | null, ctx?: SecureContext) => void) => void) | undefined;\\n        /**\\n         * If true the server will reject any connection which is not\\n         * authorized with the list of supplied CAs. This option only has an\\n         * effect if requestCert is true.\\n         * @default true\\n         */\\n        rejectUnauthorized?: boolean | undefined;\\n    }\\n    interface TlsOptions extends SecureContextOptions, CommonConnectionOptions, net.ServerOpts {\\n        /**\\n         * Abort the connection if the SSL/TLS handshake does not finish in the\\n         * specified number of milliseconds. A 'tlsClientError' is emitted on\\n         * the tls.Server object whenever a handshake times out. Default:\\n         * 120000 (120 seconds).\\n         */\\n        handshakeTimeout?: number | undefined;\\n        /**\\n         * The number of seconds after which a TLS session created by the\\n         * server will no longer be resumable. See Session Resumption for more\\n         * information. Default: 300.\\n         */\\n        sessionTimeout?: number | undefined;\\n        /**\\n         * 48-bytes of cryptographically strong pseudo-random data.\\n         */\\n        ticketKeys?: Buffer | undefined;\\n        /**\\n         *\\n         * @param socket\\n         * @param identity identity parameter sent from the client.\\n         * @return pre-shared key that must either be\\n         * a buffer or `null` to stop the negotiation process. Returned PSK must be\\n         * compatible with the selected cipher's digest.\\n         *\\n         * When negotiating TLS-PSK (pre-shared keys), this function is called\\n         * with the identity provided by the client.\\n         * If the return value is `null` the negotiation process will stop and an\\n         * \\\"unknown_psk_identity\\\" alert message will be sent to the other party.\\n         * If the server wishes to hide the fact that the PSK identity was not known,\\n         * the callback must provide some random data as `psk` to make the connection\\n         * fail with \\\"decrypt_error\\\" before negotiation is finished.\\n         * PSK ciphers are disabled by default, and using TLS-PSK thus\\n         * requires explicitly specifying a cipher suite with the `ciphers` option.\\n         * More information can be found in the RFC 4279.\\n         */\\n        pskCallback?(socket: TLSSocket, identity: string): DataView | NodeJS.TypedArray | null;\\n        /**\\n         * hint to send to a client to help\\n         * with selecting the identity during TLS-PSK negotiation. Will be ignored\\n         * in TLS 1.3. Upon failing to set pskIdentityHint `tlsClientError` will be\\n         * emitted with `ERR_TLS_PSK_SET_IDENTIY_HINT_FAILED` code.\\n         */\\n        pskIdentityHint?: string | undefined;\\n    }\\n    interface PSKCallbackNegotation {\\n        psk: DataView | NodeJS.TypedArray;\\n        identity: string;\\n    }\\n    interface ConnectionOptions extends SecureContextOptions, CommonConnectionOptions {\\n        host?: string | undefined;\\n        port?: number | undefined;\\n        path?: string | undefined; // Creates unix socket connection to path. If this option is specified, `host` and `port` are ignored.\\n        socket?: stream.Duplex | undefined; // Establish secure connection on a given socket rather than creating a new socket\\n        checkServerIdentity?: typeof checkServerIdentity | undefined;\\n        servername?: string | undefined; // SNI TLS Extension\\n        session?: Buffer | undefined;\\n        minDHSize?: number | undefined;\\n        lookup?: net.LookupFunction | undefined;\\n        timeout?: number | undefined;\\n        /**\\n         * When negotiating TLS-PSK (pre-shared keys), this function is called\\n         * with optional identity `hint` provided by the server or `null`\\n         * in case of TLS 1.3 where `hint` was removed.\\n         * It will be necessary to provide a custom `tls.checkServerIdentity()`\\n         * for the connection as the default one will try to check hostname/IP\\n         * of the server against the certificate but that's not applicable for PSK\\n         * because there won't be a certificate present.\\n         * More information can be found in the RFC 4279.\\n         *\\n         * @param hint message sent from the server to help client\\n         * decide which identity to use during negotiation.\\n         * Always `null` if TLS 1.3 is used.\\n         * @returns Return `null` to stop the negotiation process. `psk` must be\\n         * compatible with the selected cipher's digest.\\n         * `identity` must use UTF-8 encoding.\\n         */\\n        pskCallback?(hint: string | null): PSKCallbackNegotation | null;\\n    }\\n    /**\\n     * Accepts encrypted connections using TLS or SSL.\\n     * @since v0.3.2\\n     */\\n    class Server extends net.Server {\\n        constructor(secureConnectionListener?: (socket: TLSSocket) => void);\\n        constructor(options: TlsOptions, secureConnectionListener?: (socket: TLSSocket) => void);\\n        /**\\n         * The `server.addContext()` method adds a secure context that will be used if\\n         * the client request's SNI name matches the supplied `hostname` (or wildcard).\\n         *\\n         * When there are multiple matching contexts, the most recently added one is\\n         * used.\\n         * @since v0.5.3\\n         * @param hostname A SNI host name or wildcard (e.g. `'*'`)\\n         * @param context An object containing any of the possible properties from the {@link createSecureContext} `options` arguments (e.g. `key`, `cert`, `ca`, etc).\\n         */\\n        addContext(hostname: string, context: SecureContextOptions): void;\\n        /**\\n         * Returns the session ticket keys.\\n         *\\n         * See `Session Resumption` for more information.\\n         * @since v3.0.0\\n         * @return A 48-byte buffer containing the session ticket keys.\\n         */\\n        getTicketKeys(): Buffer;\\n        /**\\n         * The `server.setSecureContext()` method replaces the secure context of an\\n         * existing server. Existing connections to the server are not interrupted.\\n         * @since v11.0.0\\n         * @param options An object containing any of the possible properties from the {@link createSecureContext} `options` arguments (e.g. `key`, `cert`, `ca`, etc).\\n         */\\n        setSecureContext(options: SecureContextOptions): void;\\n        /**\\n         * Sets the session ticket keys.\\n         *\\n         * Changes to the ticket keys are effective only for future server connections.\\n         * Existing or currently pending server connections will use the previous keys.\\n         *\\n         * See `Session Resumption` for more information.\\n         * @since v3.0.0\\n         * @param keys A 48-byte buffer containing the session ticket keys.\\n         */\\n        setTicketKeys(keys: Buffer): void;\\n        /**\\n         * events.EventEmitter\\n         * 1. tlsClientError\\n         * 2. newSession\\n         * 3. OCSPRequest\\n         * 4. resumeSession\\n         * 5. secureConnection\\n         * 6. keylog\\n         */\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        addListener(event: 'tlsClientError', listener: (err: Error, tlsSocket: TLSSocket) => void): this;\\n        addListener(event: 'newSession', listener: (sessionId: Buffer, sessionData: Buffer, callback: () => void) => void): this;\\n        addListener(event: 'OCSPRequest', listener: (certificate: Buffer, issuer: Buffer, callback: (err: Error | null, resp: Buffer) => void) => void): this;\\n        addListener(event: 'resumeSession', listener: (sessionId: Buffer, callback: (err: Error | null, sessionData: Buffer | null) => void) => void): this;\\n        addListener(event: 'secureConnection', listener: (tlsSocket: TLSSocket) => void): this;\\n        addListener(event: 'keylog', listener: (line: Buffer, tlsSocket: TLSSocket) => void): this;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        emit(event: 'tlsClientError', err: Error, tlsSocket: TLSSocket): boolean;\\n        emit(event: 'newSession', sessionId: Buffer, sessionData: Buffer, callback: () => void): boolean;\\n        emit(event: 'OCSPRequest', certificate: Buffer, issuer: Buffer, callback: (err: Error | null, resp: Buffer) => void): boolean;\\n        emit(event: 'resumeSession', sessionId: Buffer, callback: (err: Error | null, sessionData: Buffer | null) => void): boolean;\\n        emit(event: 'secureConnection', tlsSocket: TLSSocket): boolean;\\n        emit(event: 'keylog', line: Buffer, tlsSocket: TLSSocket): boolean;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        on(event: 'tlsClientError', listener: (err: Error, tlsSocket: TLSSocket) => void): this;\\n        on(event: 'newSession', listener: (sessionId: Buffer, sessionData: Buffer, callback: () => void) => void): this;\\n        on(event: 'OCSPRequest', listener: (certificate: Buffer, issuer: Buffer, callback: (err: Error | null, resp: Buffer) => void) => void): this;\\n        on(event: 'resumeSession', listener: (sessionId: Buffer, callback: (err: Error | null, sessionData: Buffer | null) => void) => void): this;\\n        on(event: 'secureConnection', listener: (tlsSocket: TLSSocket) => void): this;\\n        on(event: 'keylog', listener: (line: Buffer, tlsSocket: TLSSocket) => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        once(event: 'tlsClientError', listener: (err: Error, tlsSocket: TLSSocket) => void): this;\\n        once(event: 'newSession', listener: (sessionId: Buffer, sessionData: Buffer, callback: () => void) => void): this;\\n        once(event: 'OCSPRequest', listener: (certificate: Buffer, issuer: Buffer, callback: (err: Error | null, resp: Buffer) => void) => void): this;\\n        once(event: 'resumeSession', listener: (sessionId: Buffer, callback: (err: Error | null, sessionData: Buffer | null) => void) => void): this;\\n        once(event: 'secureConnection', listener: (tlsSocket: TLSSocket) => void): this;\\n        once(event: 'keylog', listener: (line: Buffer, tlsSocket: TLSSocket) => void): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'tlsClientError', listener: (err: Error, tlsSocket: TLSSocket) => void): this;\\n        prependListener(event: 'newSession', listener: (sessionId: Buffer, sessionData: Buffer, callback: () => void) => void): this;\\n        prependListener(event: 'OCSPRequest', listener: (certificate: Buffer, issuer: Buffer, callback: (err: Error | null, resp: Buffer) => void) => void): this;\\n        prependListener(event: 'resumeSession', listener: (sessionId: Buffer, callback: (err: Error | null, sessionData: Buffer | null) => void) => void): this;\\n        prependListener(event: 'secureConnection', listener: (tlsSocket: TLSSocket) => void): this;\\n        prependListener(event: 'keylog', listener: (line: Buffer, tlsSocket: TLSSocket) => void): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'tlsClientError', listener: (err: Error, tlsSocket: TLSSocket) => void): this;\\n        prependOnceListener(event: 'newSession', listener: (sessionId: Buffer, sessionData: Buffer, callback: () => void) => void): this;\\n        prependOnceListener(event: 'OCSPRequest', listener: (certificate: Buffer, issuer: Buffer, callback: (err: Error | null, resp: Buffer) => void) => void): this;\\n        prependOnceListener(event: 'resumeSession', listener: (sessionId: Buffer, callback: (err: Error | null, sessionData: Buffer | null) => void) => void): this;\\n        prependOnceListener(event: 'secureConnection', listener: (tlsSocket: TLSSocket) => void): this;\\n        prependOnceListener(event: 'keylog', listener: (line: Buffer, tlsSocket: TLSSocket) => void): this;\\n    }\\n    /**\\n     * @deprecated since v0.11.3 Use `tls.TLSSocket` instead.\\n     */\\n    interface SecurePair {\\n        encrypted: TLSSocket;\\n        cleartext: TLSSocket;\\n    }\\n    type SecureVersion = 'TLSv1.3' | 'TLSv1.2' | 'TLSv1.1' | 'TLSv1';\\n    interface SecureContextOptions {\\n        /**\\n         * Optionally override the trusted CA certificates. Default is to trust\\n         * the well-known CAs curated by Mozilla. Mozilla's CAs are completely\\n         * replaced when CAs are explicitly specified using this option.\\n         */\\n        ca?: string | Buffer | Array<string | Buffer> | undefined;\\n        /**\\n         *  Cert chains in PEM format. One cert chain should be provided per\\n         *  private key. Each cert chain should consist of the PEM formatted\\n         *  certificate for a provided private key, followed by the PEM\\n         *  formatted intermediate certificates (if any), in order, and not\\n         *  including the root CA (the root CA must be pre-known to the peer,\\n         *  see ca). When providing multiple cert chains, they do not have to\\n         *  be in the same order as their private keys in key. If the\\n         *  intermediate certificates are not provided, the peer will not be\\n         *  able to validate the certificate, and the handshake will fail.\\n         */\\n        cert?: string | Buffer | Array<string | Buffer> | undefined;\\n        /**\\n         *  Colon-separated list of supported signature algorithms. The list\\n         *  can contain digest algorithms (SHA256, MD5 etc.), public key\\n         *  algorithms (RSA-PSS, ECDSA etc.), combination of both (e.g\\n         *  'RSA+SHA384') or TLS v1.3 scheme names (e.g. rsa_pss_pss_sha512).\\n         */\\n        sigalgs?: string | undefined;\\n        /**\\n         * Cipher suite specification, replacing the default. For more\\n         * information, see modifying the default cipher suite. Permitted\\n         * ciphers can be obtained via tls.getCiphers(). Cipher names must be\\n         * uppercased in order for OpenSSL to accept them.\\n         */\\n        ciphers?: string | undefined;\\n        /**\\n         * Name of an OpenSSL engine which can provide the client certificate.\\n         */\\n        clientCertEngine?: string | undefined;\\n        /**\\n         * PEM formatted CRLs (Certificate Revocation Lists).\\n         */\\n        crl?: string | Buffer | Array<string | Buffer> | undefined;\\n        /**\\n         * `'auto'` or custom Diffie-Hellman parameters, required for non-ECDHE perfect forward secrecy.\\n         * If omitted or invalid, the parameters are silently discarded and DHE ciphers will not be available.\\n         * ECDHE-based perfect forward secrecy will still be available.\\n         */\\n        dhparam?: string | Buffer | undefined;\\n        /**\\n         * A string describing a named curve or a colon separated list of curve\\n         * NIDs or names, for example P-521:P-384:P-256, to use for ECDH key\\n         * agreement. Set to auto to select the curve automatically. Use\\n         * crypto.getCurves() to obtain a list of available curve names. On\\n         * recent releases, openssl ecparam -list_curves will also display the\\n         * name and description of each available elliptic curve. Default:\\n         * tls.DEFAULT_ECDH_CURVE.\\n         */\\n        ecdhCurve?: string | undefined;\\n        /**\\n         * Attempt to use the server's cipher suite preferences instead of the\\n         * client's. When true, causes SSL_OP_CIPHER_SERVER_PREFERENCE to be\\n         * set in secureOptions\\n         */\\n        honorCipherOrder?: boolean | undefined;\\n        /**\\n         * Private keys in PEM format. PEM allows the option of private keys\\n         * being encrypted. Encrypted keys will be decrypted with\\n         * options.passphrase. Multiple keys using different algorithms can be\\n         * provided either as an array of unencrypted key strings or buffers,\\n         * or an array of objects in the form {pem: <string|buffer>[,\\n         * passphrase: <string>]}. The object form can only occur in an array.\\n         * object.passphrase is optional. Encrypted keys will be decrypted with\\n         * object.passphrase if provided, or options.passphrase if it is not.\\n         */\\n        key?: string | Buffer | Array<string | Buffer | KeyObject> | undefined;\\n        /**\\n         * Name of an OpenSSL engine to get private key from. Should be used\\n         * together with privateKeyIdentifier.\\n         */\\n        privateKeyEngine?: string | undefined;\\n        /**\\n         * Identifier of a private key managed by an OpenSSL engine. Should be\\n         * used together with privateKeyEngine. Should not be set together with\\n         * key, because both options define a private key in different ways.\\n         */\\n        privateKeyIdentifier?: string | undefined;\\n        /**\\n         * Optionally set the maximum TLS version to allow. One\\n         * of `'TLSv1.3'`, `'TLSv1.2'`, `'TLSv1.1'`, or `'TLSv1'`. Cannot be specified along with the\\n         * `secureProtocol` option, use one or the other.\\n         * **Default:** `'TLSv1.3'`, unless changed using CLI options. Using\\n         * `--tls-max-v1.2` sets the default to `'TLSv1.2'`. Using `--tls-max-v1.3` sets the default to\\n         * `'TLSv1.3'`. If multiple of the options are provided, the highest maximum is used.\\n         */\\n        maxVersion?: SecureVersion | undefined;\\n        /**\\n         * Optionally set the minimum TLS version to allow. One\\n         * of `'TLSv1.3'`, `'TLSv1.2'`, `'TLSv1.1'`, or `'TLSv1'`. Cannot be specified along with the\\n         * `secureProtocol` option, use one or the other.  It is not recommended to use\\n         * less than TLSv1.2, but it may be required for interoperability.\\n         * **Default:** `'TLSv1.2'`, unless changed using CLI options. Using\\n         * `--tls-v1.0` sets the default to `'TLSv1'`. Using `--tls-v1.1` sets the default to\\n         * `'TLSv1.1'`. Using `--tls-min-v1.3` sets the default to\\n         * 'TLSv1.3'. If multiple of the options are provided, the lowest minimum is used.\\n         */\\n        minVersion?: SecureVersion | undefined;\\n        /**\\n         * Shared passphrase used for a single private key and/or a PFX.\\n         */\\n        passphrase?: string | undefined;\\n        /**\\n         * PFX or PKCS12 encoded private key and certificate chain. pfx is an\\n         * alternative to providing key and cert individually. PFX is usually\\n         * encrypted, if it is, passphrase will be used to decrypt it. Multiple\\n         * PFX can be provided either as an array of unencrypted PFX buffers,\\n         * or an array of objects in the form {buf: <string|buffer>[,\\n         * passphrase: <string>]}. The object form can only occur in an array.\\n         * object.passphrase is optional. Encrypted PFX will be decrypted with\\n         * object.passphrase if provided, or options.passphrase if it is not.\\n         */\\n        pfx?: string | Buffer | Array<string | Buffer | PxfObject> | undefined;\\n        /**\\n         * Optionally affect the OpenSSL protocol behavior, which is not\\n         * usually necessary. This should be used carefully if at all! Value is\\n         * a numeric bitmask of the SSL_OP_* options from OpenSSL Options\\n         */\\n        secureOptions?: number | undefined; // Value is a numeric bitmask of the `SSL_OP_*` options\\n        /**\\n         * Legacy mechanism to select the TLS protocol version to use, it does\\n         * not support independent control of the minimum and maximum version,\\n         * and does not support limiting the protocol to TLSv1.3. Use\\n         * minVersion and maxVersion instead. The possible values are listed as\\n         * SSL_METHODS, use the function names as strings. For example, use\\n         * 'TLSv1_1_method' to force TLS version 1.1, or 'TLS_method' to allow\\n         * any TLS protocol version up to TLSv1.3. It is not recommended to use\\n         * TLS versions less than 1.2, but it may be required for\\n         * interoperability. Default: none, see minVersion.\\n         */\\n        secureProtocol?: string | undefined;\\n        /**\\n         * Opaque identifier used by servers to ensure session state is not\\n         * shared between applications. Unused by clients.\\n         */\\n        sessionIdContext?: string | undefined;\\n        /**\\n         * 48-bytes of cryptographically strong pseudo-random data.\\n         * See Session Resumption for more information.\\n         */\\n        ticketKeys?: Buffer | undefined;\\n        /**\\n         * The number of seconds after which a TLS session created by the\\n         * server will no longer be resumable. See Session Resumption for more\\n         * information. Default: 300.\\n         */\\n        sessionTimeout?: number | undefined;\\n    }\\n    interface SecureContext {\\n        context: any;\\n    }\\n    /**\\n     * Verifies the certificate `cert` is issued to `hostname`.\\n     *\\n     * Returns [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object, populating it with `reason`, `host`, and `cert` on\\n     * failure. On success, returns [undefined](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type).\\n     *\\n     * This function is intended to be used in combination with the`checkServerIdentity` option that can be passed to {@link connect} and as\\n     * such operates on a `certificate object`. For other purposes, consider using `x509.checkHost()` instead.\\n     *\\n     * This function can be overwritten by providing an alternative function as the`options.checkServerIdentity` option that is passed to `tls.connect()`. The\\n     * overwriting function can call `tls.checkServerIdentity()` of course, to augment\\n     * the checks done with additional verification.\\n     *\\n     * This function is only called if the certificate passed all other checks, such as\\n     * being issued by trusted CA (`options.ca`).\\n     *\\n     * Earlier versions of Node.js incorrectly accepted certificates for a given`hostname` if a matching `uniformResourceIdentifier` subject alternative name\\n     * was present (see [CVE-2021-44531](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44531)). Applications that wish to accept`uniformResourceIdentifier` subject alternative names can use\\n     * a custom`options.checkServerIdentity` function that implements the desired behavior.\\n     * @since v0.8.4\\n     * @param hostname The host name or IP address to verify the certificate against.\\n     * @param cert A `certificate object` representing the peer's certificate.\\n     */\\n    function checkServerIdentity(hostname: string, cert: PeerCertificate): Error | undefined;\\n    /**\\n     * Creates a new {@link Server}. The `secureConnectionListener`, if provided, is\\n     * automatically set as a listener for the `'secureConnection'` event.\\n     *\\n     * The `ticketKeys` options is automatically shared between `cluster` module\\n     * workers.\\n     *\\n     * The following illustrates a simple echo server:\\n     *\\n     * ```js\\n     * const tls = require('tls');\\n     * const fs = require('fs');\\n     *\\n     * const options = {\\n     *   key: fs.readFileSync('server-key.pem'),\\n     *   cert: fs.readFileSync('server-cert.pem'),\\n     *\\n     *   // This is necessary only if using client certificate authentication.\\n     *   requestCert: true,\\n     *\\n     *   // This is necessary only if the client uses a self-signed certificate.\\n     *   ca: [ fs.readFileSync('client-cert.pem') ]\\n     * };\\n     *\\n     * const server = tls.createServer(options, (socket) => {\\n     *   console.log('server connected',\\n     *               socket.authorized ? 'authorized' : 'unauthorized');\\n     *   socket.write('welcome!\\\\n');\\n     *   socket.setEncoding('utf8');\\n     *   socket.pipe(socket);\\n     * });\\n     * server.listen(8000, () => {\\n     *   console.log('server bound');\\n     * });\\n     * ```\\n     *\\n     * The server can be tested by connecting to it using the example client from {@link connect}.\\n     * @since v0.3.2\\n     */\\n    function createServer(secureConnectionListener?: (socket: TLSSocket) => void): Server;\\n    function createServer(options: TlsOptions, secureConnectionListener?: (socket: TLSSocket) => void): Server;\\n    /**\\n     * The `callback` function, if specified, will be added as a listener for the `'secureConnect'` event.\\n     *\\n     * `tls.connect()` returns a {@link TLSSocket} object.\\n     *\\n     * Unlike the `https` API, `tls.connect()` does not enable the\\n     * SNI (Server Name Indication) extension by default, which may cause some\\n     * servers to return an incorrect certificate or reject the connection\\n     * altogether. To enable SNI, set the `servername` option in addition\\n     * to `host`.\\n     *\\n     * The following illustrates a client for the echo server example from {@link createServer}:\\n     *\\n     * ```js\\n     * // Assumes an echo server that is listening on port 8000.\\n     * const tls = require('tls');\\n     * const fs = require('fs');\\n     *\\n     * const options = {\\n     *   // Necessary only if the server requires client certificate authentication.\\n     *   key: fs.readFileSync('client-key.pem'),\\n     *   cert: fs.readFileSync('client-cert.pem'),\\n     *\\n     *   // Necessary only if the server uses a self-signed certificate.\\n     *   ca: [ fs.readFileSync('server-cert.pem') ],\\n     *\\n     *   // Necessary only if the server's cert isn't for \\\"localhost\\\".\\n     *   checkServerIdentity: () => { return null; },\\n     * };\\n     *\\n     * const socket = tls.connect(8000, options, () => {\\n     *   console.log('client connected',\\n     *               socket.authorized ? 'authorized' : 'unauthorized');\\n     *   process.stdin.pipe(socket);\\n     *   process.stdin.resume();\\n     * });\\n     * socket.setEncoding('utf8');\\n     * socket.on('data', (data) => {\\n     *   console.log(data);\\n     * });\\n     * socket.on('end', () => {\\n     *   console.log('server ends connection');\\n     * });\\n     * ```\\n     * @since v0.11.3\\n     */\\n    function connect(options: ConnectionOptions, secureConnectListener?: () => void): TLSSocket;\\n    function connect(port: number, host?: string, options?: ConnectionOptions, secureConnectListener?: () => void): TLSSocket;\\n    function connect(port: number, options?: ConnectionOptions, secureConnectListener?: () => void): TLSSocket;\\n    /**\\n     * Creates a new secure pair object with two streams, one of which reads and writes\\n     * the encrypted data and the other of which reads and writes the cleartext data.\\n     * Generally, the encrypted stream is piped to/from an incoming encrypted data\\n     * stream and the cleartext one is used as a replacement for the initial encrypted\\n     * stream.\\n     *\\n     * `tls.createSecurePair()` returns a `tls.SecurePair` object with `cleartext` and`encrypted` stream properties.\\n     *\\n     * Using `cleartext` has the same API as {@link TLSSocket}.\\n     *\\n     * The `tls.createSecurePair()` method is now deprecated in favor of`tls.TLSSocket()`. For example, the code:\\n     *\\n     * ```js\\n     * pair = tls.createSecurePair(// ... );\\n     * pair.encrypted.pipe(socket);\\n     * socket.pipe(pair.encrypted);\\n     * ```\\n     *\\n     * can be replaced by:\\n     *\\n     * ```js\\n     * secureSocket = tls.TLSSocket(socket, options);\\n     * ```\\n     *\\n     * where `secureSocket` has the same API as `pair.cleartext`.\\n     * @since v0.3.2\\n     * @deprecated Since v0.11.3 - Use {@link TLSSocket} instead.\\n     * @param context A secure context object as returned by `tls.createSecureContext()`\\n     * @param isServer `true` to specify that this TLS connection should be opened as a server.\\n     * @param requestCert `true` to specify whether a server should request a certificate from a connecting client. Only applies when `isServer` is `true`.\\n     * @param rejectUnauthorized If not `false` a server automatically reject clients with invalid certificates. Only applies when `isServer` is `true`.\\n     */\\n    function createSecurePair(context?: SecureContext, isServer?: boolean, requestCert?: boolean, rejectUnauthorized?: boolean): SecurePair;\\n    /**\\n     * {@link createServer} sets the default value of the `honorCipherOrder` option\\n     * to `true`, other APIs that create secure contexts leave it unset.\\n     *\\n     * {@link createServer} uses a 128 bit truncated SHA1 hash value generated\\n     * from `process.argv` as the default value of the `sessionIdContext` option, other\\n     * APIs that create secure contexts have no default value.\\n     *\\n     * The `tls.createSecureContext()` method creates a `SecureContext` object. It is\\n     * usable as an argument to several `tls` APIs, such as {@link createServer} and `server.addContext()`, but has no public methods.\\n     *\\n     * A key is _required_ for ciphers that use certificates. Either `key` or`pfx` can be used to provide it.\\n     *\\n     * If the `ca` option is not given, then Node.js will default to using [Mozilla's publicly trusted list of\\n     * CAs](https://hg.mozilla.org/mozilla-central/raw-file/tip/security/nss/lib/ckfw/builtins/certdata.txt).\\n     * @since v0.11.13\\n     */\\n    function createSecureContext(options?: SecureContextOptions): SecureContext;\\n    /**\\n     * Returns an array with the names of the supported TLS ciphers. The names are\\n     * lower-case for historical reasons, but must be uppercased to be used in\\n     * the `ciphers` option of {@link createSecureContext}.\\n     *\\n     * Not all supported ciphers are enabled by default. See `Modifying the default TLS cipher suite`.\\n     *\\n     * Cipher names that start with `'tls_'` are for TLSv1.3, all the others are for\\n     * TLSv1.2 and below.\\n     *\\n     * ```js\\n     * console.log(tls.getCiphers()); // ['aes128-gcm-sha256', 'aes128-sha', ...]\\n     * ```\\n     * @since v0.10.2\\n     */\\n    function getCiphers(): string[];\\n    /**\\n     * The default curve name to use for ECDH key agreement in a tls server.\\n     * The default value is 'auto'. See tls.createSecureContext() for further\\n     * information.\\n     */\\n    let DEFAULT_ECDH_CURVE: string;\\n    /**\\n     * The default value of the maxVersion option of\\n     * tls.createSecureContext(). It can be assigned any of the supported TLS\\n     * protocol versions, 'TLSv1.3', 'TLSv1.2', 'TLSv1.1', or 'TLSv1'. Default:\\n     * 'TLSv1.3', unless changed using CLI options. Using --tls-max-v1.2 sets\\n     * the default to 'TLSv1.2'. Using --tls-max-v1.3 sets the default to\\n     * 'TLSv1.3'. If multiple of the options are provided, the highest maximum\\n     * is used.\\n     */\\n    let DEFAULT_MAX_VERSION: SecureVersion;\\n    /**\\n     * The default value of the minVersion option of tls.createSecureContext().\\n     * It can be assigned any of the supported TLS protocol versions,\\n     * 'TLSv1.3', 'TLSv1.2', 'TLSv1.1', or 'TLSv1'. Default: 'TLSv1.2', unless\\n     * changed using CLI options. Using --tls-min-v1.0 sets the default to\\n     * 'TLSv1'. Using --tls-min-v1.1 sets the default to 'TLSv1.1'. Using\\n     * --tls-min-v1.3 sets the default to 'TLSv1.3'. If multiple of the options\\n     * are provided, the lowest minimum is used.\\n     */\\n    let DEFAULT_MIN_VERSION: SecureVersion;\\n    /**\\n     * The default value of the ciphers option of tls.createSecureContext().\\n     * It can be assigned any of the supported OpenSSL ciphers.\\n     * Defaults to the content of crypto.constants.defaultCoreCipherList, unless\\n     * changed using CLI options using --tls-default-ciphers.\\n     */\\n    let DEFAULT_CIPHERS: string;\\n    /**\\n     * An immutable array of strings representing the root certificates (in PEM\\n     * format) used for verifying peer certificates. This is the default value\\n     * of the ca option to tls.createSecureContext().\\n     */\\n    const rootCertificates: ReadonlyArray<string>;\\n}\\ndeclare module 'node:tls' {\\n    export * from 'tls';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/trace_events.d.ts\":\"/**\\n * The `trace_events` module provides a mechanism to centralize tracing information\\n * generated by V8, Node.js core, and userspace code.\\n *\\n * Tracing can be enabled with the `--trace-event-categories` command-line flag\\n * or by using the `trace_events` module. The `--trace-event-categories` flag\\n * accepts a list of comma-separated category names.\\n *\\n * The available categories are:\\n *\\n * * `node`: An empty placeholder.\\n * * `node.async_hooks`: Enables capture of detailed `async_hooks` trace data.\\n * The `async_hooks` events have a unique `asyncId` and a special `triggerId` `triggerAsyncId` property.\\n * * `node.bootstrap`: Enables capture of Node.js bootstrap milestones.\\n * * `node.console`: Enables capture of `console.time()` and `console.count()`output.\\n * * `node.dns.native`: Enables capture of trace data for DNS queries.\\n * * `node.environment`: Enables capture of Node.js Environment milestones.\\n * * `node.fs.sync`: Enables capture of trace data for file system sync methods.\\n * * `node.perf`: Enables capture of `Performance API` measurements.\\n *    * `node.perf.usertiming`: Enables capture of only Performance API User Timing\\n *    measures and marks.\\n *    * `node.perf.timerify`: Enables capture of only Performance API timerify\\n *    measurements.\\n * * `node.promises.rejections`: Enables capture of trace data tracking the number\\n * of unhandled Promise rejections and handled-after-rejections.\\n * * `node.vm.script`: Enables capture of trace data for the `vm` module's`runInNewContext()`, `runInContext()`, and `runInThisContext()` methods.\\n * * `v8`: The `V8` events are GC, compiling, and execution related.\\n *\\n * By default the `node`, `node.async_hooks`, and `v8` categories are enabled.\\n *\\n * ```bash\\n * node --trace-event-categories v8,node,node.async_hooks server.js\\n * ```\\n *\\n * Prior versions of Node.js required the use of the `--trace-events-enabled`flag to enable trace events. This requirement has been removed. However, the`--trace-events-enabled` flag _may_ still be\\n * used and will enable the`node`, `node.async_hooks`, and `v8` trace event categories by default.\\n *\\n * ```bash\\n * node --trace-events-enabled\\n *\\n * # is equivalent to\\n *\\n * node --trace-event-categories v8,node,node.async_hooks\\n * ```\\n *\\n * Alternatively, trace events may be enabled using the `trace_events` module:\\n *\\n * ```js\\n * const trace_events = require('trace_events');\\n * const tracing = trace_events.createTracing({ categories: ['node.perf'] });\\n * tracing.enable();  // Enable trace event capture for the 'node.perf' category\\n *\\n * // do work\\n *\\n * tracing.disable();  // Disable trace event capture for the 'node.perf' category\\n * ```\\n *\\n * Running Node.js with tracing enabled will produce log files that can be opened\\n * in the [`chrome://tracing`](https://www.chromium.org/developers/how-tos/trace-event-profiling-tool) tab of Chrome.\\n *\\n * The logging file is by default called `node_trace.${rotation}.log`, where`${rotation}` is an incrementing log-rotation id. The filepath pattern can\\n * be specified with `--trace-event-file-pattern` that accepts a template\\n * string that supports `${rotation}` and `${pid}`:\\n *\\n * ```bash\\n * node --trace-event-categories v8 --trace-event-file-pattern '${pid}-${rotation}.log' server.js\\n * ```\\n *\\n * To guarantee that the log file is properly generated after signal events like`SIGINT`, `SIGTERM`, or `SIGBREAK`, make sure to have the appropriate handlers\\n * in your code, such as:\\n *\\n * ```js\\n * process.on('SIGINT', function onSigint() {\\n *   console.info('Received SIGINT.');\\n *   process.exit(130);  // Or applicable exit code depending on OS and signal\\n * });\\n * ```\\n *\\n * The tracing system uses the same time source\\n * as the one used by `process.hrtime()`.\\n * However the trace-event timestamps are expressed in microseconds,\\n * unlike `process.hrtime()` which returns nanoseconds.\\n *\\n * The features from this module are not available in `Worker` threads.\\n * @experimental\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/trace_events.js)\\n */\\ndeclare module 'trace_events' {\\n    /**\\n     * The `Tracing` object is used to enable or disable tracing for sets of\\n     * categories. Instances are created using the\\n     * `trace_events.createTracing()` method.\\n     *\\n     * When created, the `Tracing` object is disabled. Calling the\\n     * `tracing.enable()` method adds the categories to the set of enabled trace\\n     * event categories. Calling `tracing.disable()` will remove the categories\\n     * from the set of enabled trace event categories.\\n     */\\n    interface Tracing {\\n        /**\\n         * A comma-separated list of the trace event categories covered by this\\n         * `Tracing` object.\\n         */\\n        readonly categories: string;\\n        /**\\n         * Disables this `Tracing` object.\\n         *\\n         * Only trace event categories _not_ covered by other enabled `Tracing`\\n         * objects and _not_ specified by the `--trace-event-categories` flag\\n         * will be disabled.\\n         */\\n        disable(): void;\\n        /**\\n         * Enables this `Tracing` object for the set of categories covered by\\n         * the `Tracing` object.\\n         */\\n        enable(): void;\\n        /**\\n         * `true` only if the `Tracing` object has been enabled.\\n         */\\n        readonly enabled: boolean;\\n    }\\n    interface CreateTracingOptions {\\n        /**\\n         * An array of trace category names. Values included in the array are\\n         * coerced to a string when possible. An error will be thrown if the\\n         * value cannot be coerced.\\n         */\\n        categories: string[];\\n    }\\n    /**\\n     * Creates and returns a `Tracing` object for the given set of `categories`.\\n     *\\n     * ```js\\n     * const trace_events = require('trace_events');\\n     * const categories = ['node.perf', 'node.async_hooks'];\\n     * const tracing = trace_events.createTracing({ categories });\\n     * tracing.enable();\\n     * // do stuff\\n     * tracing.disable();\\n     * ```\\n     * @since v10.0.0\\n     * @return .\\n     */\\n    function createTracing(options: CreateTracingOptions): Tracing;\\n    /**\\n     * Returns a comma-separated list of all currently-enabled trace event\\n     * categories. The current set of enabled trace event categories is determined\\n     * by the _union_ of all currently-enabled `Tracing` objects and any categories\\n     * enabled using the `--trace-event-categories` flag.\\n     *\\n     * Given the file `test.js` below, the command`node --trace-event-categories node.perf test.js` will print`'node.async_hooks,node.perf'` to the console.\\n     *\\n     * ```js\\n     * const trace_events = require('trace_events');\\n     * const t1 = trace_events.createTracing({ categories: ['node.async_hooks'] });\\n     * const t2 = trace_events.createTracing({ categories: ['node.perf'] });\\n     * const t3 = trace_events.createTracing({ categories: ['v8'] });\\n     *\\n     * t1.enable();\\n     * t2.enable();\\n     *\\n     * console.log(trace_events.getEnabledCategories());\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function getEnabledCategories(): string | undefined;\\n}\\ndeclare module 'node:trace_events' {\\n    export * from 'trace_events';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/tty.d.ts\":\"/**\\n * The `tty` module provides the `tty.ReadStream` and `tty.WriteStream` classes.\\n * In most cases, it will not be necessary or possible to use this module directly.\\n * However, it can be accessed using:\\n *\\n * ```js\\n * const tty = require('tty');\\n * ```\\n *\\n * When Node.js detects that it is being run with a text terminal (\\\"TTY\\\")\\n * attached, `process.stdin` will, by default, be initialized as an instance of`tty.ReadStream` and both `process.stdout` and `process.stderr` will, by\\n * default, be instances of `tty.WriteStream`. The preferred method of determining\\n * whether Node.js is being run within a TTY context is to check that the value of\\n * the `process.stdout.isTTY` property is `true`:\\n *\\n * ```console\\n * $ node -p -e \\\"Boolean(process.stdout.isTTY)\\\"\\n * true\\n * $ node -p -e \\\"Boolean(process.stdout.isTTY)\\\" | cat\\n * false\\n * ```\\n *\\n * In most cases, there should be little to no reason for an application to\\n * manually create instances of the `tty.ReadStream` and `tty.WriteStream`classes.\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/tty.js)\\n */\\ndeclare module 'tty' {\\n    import * as net from 'node:net';\\n    /**\\n     * The `tty.isatty()` method returns `true` if the given `fd` is associated with\\n     * a TTY and `false` if it is not, including whenever `fd` is not a non-negative\\n     * integer.\\n     * @since v0.5.8\\n     * @param fd A numeric file descriptor\\n     */\\n    function isatty(fd: number): boolean;\\n    /**\\n     * Represents the readable side of a TTY. In normal circumstances `process.stdin` will be the only `tty.ReadStream` instance in a Node.js\\n     * process and there should be no reason to create additional instances.\\n     * @since v0.5.8\\n     */\\n    class ReadStream extends net.Socket {\\n        constructor(fd: number, options?: net.SocketConstructorOpts);\\n        /**\\n         * A `boolean` that is `true` if the TTY is currently configured to operate as a\\n         * raw device. Defaults to `false`.\\n         * @since v0.7.7\\n         */\\n        isRaw: boolean;\\n        /**\\n         * Allows configuration of `tty.ReadStream` so that it operates as a raw device.\\n         *\\n         * When in raw mode, input is always available character-by-character, not\\n         * including modifiers. Additionally, all special processing of characters by the\\n         * terminal is disabled, including echoing input\\n         * characters. Ctrl+C will no longer cause a `SIGINT` when\\n         * in this mode.\\n         * @since v0.7.7\\n         * @param mode If `true`, configures the `tty.ReadStream` to operate as a raw device. If `false`, configures the `tty.ReadStream` to operate in its default mode. The `readStream.isRaw`\\n         * property will be set to the resulting mode.\\n         * @return The read stream instance.\\n         */\\n        setRawMode(mode: boolean): this;\\n        /**\\n         * A `boolean` that is always `true` for `tty.ReadStream` instances.\\n         * @since v0.5.8\\n         */\\n        isTTY: boolean;\\n    }\\n    /**\\n     * -1 - to the left from cursor\\n     *  0 - the entire line\\n     *  1 - to the right from cursor\\n     */\\n    type Direction = -1 | 0 | 1;\\n    /**\\n     * Represents the writable side of a TTY. In normal circumstances,`process.stdout` and `process.stderr` will be the only`tty.WriteStream` instances created for a Node.js process and there\\n     * should be no reason to create additional instances.\\n     * @since v0.5.8\\n     */\\n    class WriteStream extends net.Socket {\\n        constructor(fd: number);\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\n        addListener(event: 'resize', listener: () => void): this;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        emit(event: 'resize'): boolean;\\n        on(event: string, listener: (...args: any[]) => void): this;\\n        on(event: 'resize', listener: () => void): this;\\n        once(event: string, listener: (...args: any[]) => void): this;\\n        once(event: 'resize', listener: () => void): this;\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'resize', listener: () => void): this;\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'resize', listener: () => void): this;\\n        /**\\n         * `writeStream.clearLine()` clears the current line of this `WriteStream` in a\\n         * direction identified by `dir`.\\n         * @since v0.7.7\\n         * @param callback Invoked once the operation completes.\\n         * @return `false` if the stream wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`.\\n         */\\n        clearLine(dir: Direction, callback?: () => void): boolean;\\n        /**\\n         * `writeStream.clearScreenDown()` clears this `WriteStream` from the current\\n         * cursor down.\\n         * @since v0.7.7\\n         * @param callback Invoked once the operation completes.\\n         * @return `false` if the stream wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`.\\n         */\\n        clearScreenDown(callback?: () => void): boolean;\\n        /**\\n         * `writeStream.cursorTo()` moves this `WriteStream`'s cursor to the specified\\n         * position.\\n         * @since v0.7.7\\n         * @param callback Invoked once the operation completes.\\n         * @return `false` if the stream wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`.\\n         */\\n        cursorTo(x: number, y?: number, callback?: () => void): boolean;\\n        cursorTo(x: number, callback: () => void): boolean;\\n        /**\\n         * `writeStream.moveCursor()` moves this `WriteStream`'s cursor _relative_ to its\\n         * current position.\\n         * @since v0.7.7\\n         * @param callback Invoked once the operation completes.\\n         * @return `false` if the stream wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`.\\n         */\\n        moveCursor(dx: number, dy: number, callback?: () => void): boolean;\\n        /**\\n         * Returns:\\n         *\\n         * * `1` for 2,\\n         * * `4` for 16,\\n         * * `8` for 256,\\n         * * `24` for 16,777,216 colors supported.\\n         *\\n         * Use this to determine what colors the terminal supports. Due to the nature of\\n         * colors in terminals it is possible to either have false positives or false\\n         * negatives. It depends on process information and the environment variables that\\n         * may lie about what terminal is used.\\n         * It is possible to pass in an `env` object to simulate the usage of a specific\\n         * terminal. This can be useful to check how specific environment settings behave.\\n         *\\n         * To enforce a specific color support, use one of the below environment settings.\\n         *\\n         * * 2 colors: `FORCE_COLOR = 0` (Disables colors)\\n         * * 16 colors: `FORCE_COLOR = 1`\\n         * * 256 colors: `FORCE_COLOR = 2`\\n         * * 16,777,216 colors: `FORCE_COLOR = 3`\\n         *\\n         * Disabling color support is also possible by using the `NO_COLOR` and`NODE_DISABLE_COLORS` environment variables.\\n         * @since v9.9.0\\n         * @param [env=process.env] An object containing the environment variables to check. This enables simulating the usage of a specific terminal.\\n         */\\n        getColorDepth(env?: object): number;\\n        /**\\n         * Returns `true` if the `writeStream` supports at least as many colors as provided\\n         * in `count`. Minimum support is 2 (black and white).\\n         *\\n         * This has the same false positives and negatives as described in `writeStream.getColorDepth()`.\\n         *\\n         * ```js\\n         * process.stdout.hasColors();\\n         * // Returns true or false depending on if `stdout` supports at least 16 colors.\\n         * process.stdout.hasColors(256);\\n         * // Returns true or false depending on if `stdout` supports at least 256 colors.\\n         * process.stdout.hasColors({ TMUX: '1' });\\n         * // Returns true.\\n         * process.stdout.hasColors(2 ** 24, { TMUX: '1' });\\n         * // Returns false (the environment setting pretends to support 2 ** 8 colors).\\n         * ```\\n         * @since v11.13.0, v10.16.0\\n         * @param [count=16] The number of colors that are requested (minimum 2).\\n         * @param [env=process.env] An object containing the environment variables to check. This enables simulating the usage of a specific terminal.\\n         */\\n        hasColors(count?: number): boolean;\\n        hasColors(env?: object): boolean;\\n        hasColors(count: number, env?: object): boolean;\\n        /**\\n         * `writeStream.getWindowSize()` returns the size of the TTY\\n         * corresponding to this `WriteStream`. The array is of the type`[numColumns, numRows]` where `numColumns` and `numRows` represent the number\\n         * of columns and rows in the corresponding TTY.\\n         * @since v0.7.7\\n         */\\n        getWindowSize(): [number, number];\\n        /**\\n         * A `number` specifying the number of columns the TTY currently has. This property\\n         * is updated whenever the `'resize'` event is emitted.\\n         * @since v0.7.7\\n         */\\n        columns: number;\\n        /**\\n         * A `number` specifying the number of rows the TTY currently has. This property\\n         * is updated whenever the `'resize'` event is emitted.\\n         * @since v0.7.7\\n         */\\n        rows: number;\\n        /**\\n         * A `boolean` that is always `true`.\\n         * @since v0.5.8\\n         */\\n        isTTY: boolean;\\n    }\\n}\\ndeclare module 'node:tty' {\\n    export * from 'tty';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/url.d.ts\":\"/**\\n * The `url` module provides utilities for URL resolution and parsing. It can be\\n * accessed using:\\n *\\n * ```js\\n * import url from 'url';\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/url.js)\\n */\\ndeclare module 'url' {\\n    import { Blob as NodeBlob } from 'node:buffer';\\n    import { ClientRequestArgs } from 'node:http';\\n    import { ParsedUrlQuery, ParsedUrlQueryInput } from 'node:querystring';\\n    // Input to `url.format`\\n    interface UrlObject {\\n        auth?: string | null | undefined;\\n        hash?: string | null | undefined;\\n        host?: string | null | undefined;\\n        hostname?: string | null | undefined;\\n        href?: string | null | undefined;\\n        pathname?: string | null | undefined;\\n        protocol?: string | null | undefined;\\n        search?: string | null | undefined;\\n        slashes?: boolean | null | undefined;\\n        port?: string | number | null | undefined;\\n        query?: string | null | ParsedUrlQueryInput | undefined;\\n    }\\n    // Output of `url.parse`\\n    interface Url {\\n        auth: string | null;\\n        hash: string | null;\\n        host: string | null;\\n        hostname: string | null;\\n        href: string;\\n        path: string | null;\\n        pathname: string | null;\\n        protocol: string | null;\\n        search: string | null;\\n        slashes: boolean | null;\\n        port: string | null;\\n        query: string | null | ParsedUrlQuery;\\n    }\\n    interface UrlWithParsedQuery extends Url {\\n        query: ParsedUrlQuery;\\n    }\\n    interface UrlWithStringQuery extends Url {\\n        query: string | null;\\n    }\\n    /**\\n     * The `url.parse()` method takes a URL string, parses it, and returns a URL\\n     * object.\\n     *\\n     * A `TypeError` is thrown if `urlString` is not a string.\\n     *\\n     * A `URIError` is thrown if the `auth` property is present but cannot be decoded.\\n     *\\n     * Use of the legacy `url.parse()` method is discouraged. Users should\\n     * use the WHATWG `URL` API. Because the `url.parse()` method uses a\\n     * lenient, non-standard algorithm for parsing URL strings, security\\n     * issues can be introduced. Specifically, issues with [host name spoofing](https://hackerone.com/reports/678487) and\\n     * incorrect handling of usernames and passwords have been identified.\\n     *\\n     * Deprecation of this API has been shelved for now primarily due to the the\\n     * inability of the [WHATWG API to parse relative URLs](https://github.com/nodejs/node/issues/12682#issuecomment-1154492373).\\n     * [Discussions are ongoing](https://github.com/whatwg/url/issues/531) for the  best way to resolve this.\\n     *\\n     * @since v0.1.25\\n     * @param urlString The URL string to parse.\\n     * @param [parseQueryString=false] If `true`, the `query` property will always be set to an object returned by the {@link querystring} module's `parse()` method. If `false`, the `query` property\\n     * on the returned URL object will be an unparsed, undecoded string.\\n     * @param [slashesDenoteHost=false] If `true`, the first token after the literal string `//` and preceding the next `/` will be interpreted as the `host`. For instance, given `//foo/bar`, the\\n     * result would be `{host: 'foo', pathname: '/bar'}` rather than `{pathname: '//foo/bar'}`.\\n     */\\n    function parse(urlString: string): UrlWithStringQuery;\\n    function parse(urlString: string, parseQueryString: false | undefined, slashesDenoteHost?: boolean): UrlWithStringQuery;\\n    function parse(urlString: string, parseQueryString: true, slashesDenoteHost?: boolean): UrlWithParsedQuery;\\n    function parse(urlString: string, parseQueryString: boolean, slashesDenoteHost?: boolean): Url;\\n    /**\\n     * The `url.format()` method returns a formatted URL string derived from`urlObject`.\\n     *\\n     * ```js\\n     * const url = require('url');\\n     * url.format({\\n     *   protocol: 'https',\\n     *   hostname: 'example.com',\\n     *   pathname: '/some/path',\\n     *   query: {\\n     *     page: 1,\\n     *     format: 'json'\\n     *   }\\n     * });\\n     *\\n     * // => 'https://example.com/some/path?page=1&#x26;format=json'\\n     * ```\\n     *\\n     * If `urlObject` is not an object or a string, `url.format()` will throw a `TypeError`.\\n     *\\n     * The formatting process operates as follows:\\n     *\\n     * * A new empty string `result` is created.\\n     * * If `urlObject.protocol` is a string, it is appended as-is to `result`.\\n     * * Otherwise, if `urlObject.protocol` is not `undefined` and is not a string, an `Error` is thrown.\\n     * * For all string values of `urlObject.protocol` that _do not end_ with an ASCII\\n     * colon (`:`) character, the literal string `:` will be appended to `result`.\\n     * * If either of the following conditions is true, then the literal string `//`will be appended to `result`:\\n     *    * `urlObject.slashes` property is true;\\n     *    * `urlObject.protocol` begins with `http`, `https`, `ftp`, `gopher`, or`file`;\\n     * * If the value of the `urlObject.auth` property is truthy, and either`urlObject.host` or `urlObject.hostname` are not `undefined`, the value of`urlObject.auth` will be coerced into a string\\n     * and appended to `result`followed by the literal string `@`.\\n     * * If the `urlObject.host` property is `undefined` then:\\n     *    * If the `urlObject.hostname` is a string, it is appended to `result`.\\n     *    * Otherwise, if `urlObject.hostname` is not `undefined` and is not a string,\\n     *    an `Error` is thrown.\\n     *    * If the `urlObject.port` property value is truthy, and `urlObject.hostname`is not `undefined`:\\n     *          * The literal string `:` is appended to `result`, and\\n     *          * The value of `urlObject.port` is coerced to a string and appended to`result`.\\n     * * Otherwise, if the `urlObject.host` property value is truthy, the value of`urlObject.host` is coerced to a string and appended to `result`.\\n     * * If the `urlObject.pathname` property is a string that is not an empty string:\\n     *    * If the `urlObject.pathname`_does not start_ with an ASCII forward slash\\n     *    (`/`), then the literal string `'/'` is appended to `result`.\\n     *    * The value of `urlObject.pathname` is appended to `result`.\\n     * * Otherwise, if `urlObject.pathname` is not `undefined` and is not a string, an `Error` is thrown.\\n     * * If the `urlObject.search` property is `undefined` and if the `urlObject.query`property is an `Object`, the literal string `?` is appended to `result`followed by the output of calling the\\n     * `querystring` module's `stringify()`method passing the value of `urlObject.query`.\\n     * * Otherwise, if `urlObject.search` is a string:\\n     *    * If the value of `urlObject.search`_does not start_ with the ASCII question\\n     *    mark (`?`) character, the literal string `?` is appended to `result`.\\n     *    * The value of `urlObject.search` is appended to `result`.\\n     * * Otherwise, if `urlObject.search` is not `undefined` and is not a string, an `Error` is thrown.\\n     * * If the `urlObject.hash` property is a string:\\n     *    * If the value of `urlObject.hash`_does not start_ with the ASCII hash (`#`)\\n     *    character, the literal string `#` is appended to `result`.\\n     *    * The value of `urlObject.hash` is appended to `result`.\\n     * * Otherwise, if the `urlObject.hash` property is not `undefined` and is not a\\n     * string, an `Error` is thrown.\\n     * * `result` is returned.\\n     * @since v0.1.25\\n     * @deprecated Legacy: Use the WHATWG URL API instead.\\n     * @param urlObject A URL object (as returned by `url.parse()` or constructed otherwise). If a string, it is converted to an object by passing it to `url.parse()`.\\n     */\\n    function format(urlObject: URL, options?: URLFormatOptions): string;\\n    /**\\n     * The `url.format()` method returns a formatted URL string derived from`urlObject`.\\n     *\\n     * ```js\\n     * const url = require('url');\\n     * url.format({\\n     *   protocol: 'https',\\n     *   hostname: 'example.com',\\n     *   pathname: '/some/path',\\n     *   query: {\\n     *     page: 1,\\n     *     format: 'json'\\n     *   }\\n     * });\\n     *\\n     * // => 'https://example.com/some/path?page=1&#x26;format=json'\\n     * ```\\n     *\\n     * If `urlObject` is not an object or a string, `url.format()` will throw a `TypeError`.\\n     *\\n     * The formatting process operates as follows:\\n     *\\n     * * A new empty string `result` is created.\\n     * * If `urlObject.protocol` is a string, it is appended as-is to `result`.\\n     * * Otherwise, if `urlObject.protocol` is not `undefined` and is not a string, an `Error` is thrown.\\n     * * For all string values of `urlObject.protocol` that _do not end_ with an ASCII\\n     * colon (`:`) character, the literal string `:` will be appended to `result`.\\n     * * If either of the following conditions is true, then the literal string `//`will be appended to `result`:\\n     *    * `urlObject.slashes` property is true;\\n     *    * `urlObject.protocol` begins with `http`, `https`, `ftp`, `gopher`, or`file`;\\n     * * If the value of the `urlObject.auth` property is truthy, and either`urlObject.host` or `urlObject.hostname` are not `undefined`, the value of`urlObject.auth` will be coerced into a string\\n     * and appended to `result`followed by the literal string `@`.\\n     * * If the `urlObject.host` property is `undefined` then:\\n     *    * If the `urlObject.hostname` is a string, it is appended to `result`.\\n     *    * Otherwise, if `urlObject.hostname` is not `undefined` and is not a string,\\n     *    an `Error` is thrown.\\n     *    * If the `urlObject.port` property value is truthy, and `urlObject.hostname`is not `undefined`:\\n     *          * The literal string `:` is appended to `result`, and\\n     *          * The value of `urlObject.port` is coerced to a string and appended to`result`.\\n     * * Otherwise, if the `urlObject.host` property value is truthy, the value of`urlObject.host` is coerced to a string and appended to `result`.\\n     * * If the `urlObject.pathname` property is a string that is not an empty string:\\n     *    * If the `urlObject.pathname`_does not start_ with an ASCII forward slash\\n     *    (`/`), then the literal string `'/'` is appended to `result`.\\n     *    * The value of `urlObject.pathname` is appended to `result`.\\n     * * Otherwise, if `urlObject.pathname` is not `undefined` and is not a string, an `Error` is thrown.\\n     * * If the `urlObject.search` property is `undefined` and if the `urlObject.query`property is an `Object`, the literal string `?` is appended to `result`followed by the output of calling the\\n     * `querystring` module's `stringify()`method passing the value of `urlObject.query`.\\n     * * Otherwise, if `urlObject.search` is a string:\\n     *    * If the value of `urlObject.search`_does not start_ with the ASCII question\\n     *    mark (`?`) character, the literal string `?` is appended to `result`.\\n     *    * The value of `urlObject.search` is appended to `result`.\\n     * * Otherwise, if `urlObject.search` is not `undefined` and is not a string, an `Error` is thrown.\\n     * * If the `urlObject.hash` property is a string:\\n     *    * If the value of `urlObject.hash`_does not start_ with the ASCII hash (`#`)\\n     *    character, the literal string `#` is appended to `result`.\\n     *    * The value of `urlObject.hash` is appended to `result`.\\n     * * Otherwise, if the `urlObject.hash` property is not `undefined` and is not a\\n     * string, an `Error` is thrown.\\n     * * `result` is returned.\\n     * @since v0.1.25\\n     * @deprecated Legacy: Use the WHATWG URL API instead.\\n     * @param urlObject A URL object (as returned by `url.parse()` or constructed otherwise). If a string, it is converted to an object by passing it to `url.parse()`.\\n     */\\n    function format(urlObject: UrlObject | string): string;\\n    /**\\n     * The `url.resolve()` method resolves a target URL relative to a base URL in a\\n     * manner similar to that of a web browser resolving an anchor tag.\\n     *\\n     * ```js\\n     * const url = require('url');\\n     * url.resolve('/one/two/three', 'four');         // '/one/two/four'\\n     * url.resolve('http://example.com/', '/one');    // 'http://example.com/one'\\n     * url.resolve('http://example.com/one', '/two'); // 'http://example.com/two'\\n     * ```\\n     *\\n     * To achieve the same result using the WHATWG URL API:\\n     *\\n     * ```js\\n     * function resolve(from, to) {\\n     *   const resolvedUrl = new URL(to, new URL(from, 'resolve://'));\\n     *   if (resolvedUrl.protocol === 'resolve:') {\\n     *     // `from` is a relative URL.\\n     *     const { pathname, search, hash } = resolvedUrl;\\n     *     return pathname + search + hash;\\n     *   }\\n     *   return resolvedUrl.toString();\\n     * }\\n     *\\n     * resolve('/one/two/three', 'four');         // '/one/two/four'\\n     * resolve('http://example.com/', '/one');    // 'http://example.com/one'\\n     * resolve('http://example.com/one', '/two'); // 'http://example.com/two'\\n     * ```\\n     * @since v0.1.25\\n     * @deprecated Legacy: Use the WHATWG URL API instead.\\n     * @param from The base URL to use if `to` is a relative URL.\\n     * @param to The target URL to resolve.\\n     */\\n    function resolve(from: string, to: string): string;\\n    /**\\n     * Returns the [Punycode](https://tools.ietf.org/html/rfc5891#section-4.4) ASCII serialization of the `domain`. If `domain` is an\\n     * invalid domain, the empty string is returned.\\n     *\\n     * It performs the inverse operation to {@link domainToUnicode}.\\n     *\\n     * This feature is only available if the `node` executable was compiled with `ICU` enabled. If not, the domain names are passed through unchanged.\\n     *\\n     * ```js\\n     * import url from 'url';\\n     *\\n     * console.log(url.domainToASCII('espa\xf1ol.com'));\\n     * // Prints xn--espaol-zwa.com\\n     * console.log(url.domainToASCII('\u4e2d\u6587.com'));\\n     * // Prints xn--fiq228c.com\\n     * console.log(url.domainToASCII('xn--i\xf1valid.com'));\\n     * // Prints an empty string\\n     * ```\\n     * @since v7.4.0, v6.13.0\\n     */\\n    function domainToASCII(domain: string): string;\\n    /**\\n     * Returns the Unicode serialization of the `domain`. If `domain` is an invalid\\n     * domain, the empty string is returned.\\n     *\\n     * It performs the inverse operation to {@link domainToASCII}.\\n     *\\n     * This feature is only available if the `node` executable was compiled with `ICU` enabled. If not, the domain names are passed through unchanged.\\n     *\\n     * ```js\\n     * import url from 'url';\\n     *\\n     * console.log(url.domainToUnicode('xn--espaol-zwa.com'));\\n     * // Prints espa\xf1ol.com\\n     * console.log(url.domainToUnicode('xn--fiq228c.com'));\\n     * // Prints \u4e2d\u6587.com\\n     * console.log(url.domainToUnicode('xn--i\xf1valid.com'));\\n     * // Prints an empty string\\n     * ```\\n     * @since v7.4.0, v6.13.0\\n     */\\n    function domainToUnicode(domain: string): string;\\n    /**\\n     * This function ensures the correct decodings of percent-encoded characters as\\n     * well as ensuring a cross-platform valid absolute path string.\\n     *\\n     * ```js\\n     * import { fileURLToPath } from 'url';\\n     *\\n     * const __filename = fileURLToPath(import.meta.url);\\n     *\\n     * new URL('file:///C:/path/').pathname;      // Incorrect: /C:/path/\\n     * fileURLToPath('file:///C:/path/');         // Correct:   C:\\\\path\\\\ (Windows)\\n     *\\n     * new URL('file://nas/foo.txt').pathname;    // Incorrect: /foo.txt\\n     * fileURLToPath('file://nas/foo.txt');       // Correct:   \\\\\\\\nas\\\\foo.txt (Windows)\\n     *\\n     * new URL('file:///\u4f60\u597d.txt').pathname;      // Incorrect: /%E4%BD%A0%E5%A5%BD.txt\\n     * fileURLToPath('file:///\u4f60\u597d.txt');         // Correct:   /\u4f60\u597d.txt (POSIX)\\n     *\\n     * new URL('file:///hello world').pathname;   // Incorrect: /hello%20world\\n     * fileURLToPath('file:///hello world');      // Correct:   /hello world (POSIX)\\n     * ```\\n     * @since v10.12.0\\n     * @param url The file URL string or URL object to convert to a path.\\n     * @return The fully-resolved platform-specific Node.js file path.\\n     */\\n    function fileURLToPath(url: string | URL): string;\\n    /**\\n     * This function ensures that `path` is resolved absolutely, and that the URL\\n     * control characters are correctly encoded when converting into a File URL.\\n     *\\n     * ```js\\n     * import { pathToFileURL } from 'url';\\n     *\\n     * new URL('/foo#1', 'file:');           // Incorrect: file:///foo#1\\n     * pathToFileURL('/foo#1');              // Correct:   file:///foo%231 (POSIX)\\n     *\\n     * new URL('/some/path%.c', 'file:');    // Incorrect: file:///some/path%.c\\n     * pathToFileURL('/some/path%.c');       // Correct:   file:///some/path%25.c (POSIX)\\n     * ```\\n     * @since v10.12.0\\n     * @param path The path to convert to a File URL.\\n     * @return The file URL object.\\n     */\\n    function pathToFileURL(path: string): URL;\\n    /**\\n     * This utility function converts a URL object into an ordinary options object as\\n     * expected by the `http.request()` and `https.request()` APIs.\\n     *\\n     * ```js\\n     * import { urlToHttpOptions } from 'url';\\n     * const myURL = new URL('https://a:b@\u6e2c\u8a66?abc#foo');\\n     *\\n     * console.log(urlToHttpOptions(myURL));\\n     * /*\\n     * {\\n     *   protocol: 'https:',\\n     *   hostname: 'xn--g6w251d',\\n     *   hash: '#foo',\\n     *   search: '?abc',\\n     *   pathname: '/',\\n     *   path: '/?abc',\\n     *   href: 'https://a:b@xn--g6w251d/?abc#foo',\\n     *   auth: 'a:b'\\n     * }\\n     *\\n     * ```\\n     * @since v15.7.0, v14.18.0\\n     * @param url The `WHATWG URL` object to convert to an options object.\\n     * @return Options object\\n     */\\n    function urlToHttpOptions(url: URL): ClientRequestArgs;\\n    interface URLFormatOptions {\\n        auth?: boolean | undefined;\\n        fragment?: boolean | undefined;\\n        search?: boolean | undefined;\\n        unicode?: boolean | undefined;\\n    }\\n    /**\\n     * Browser-compatible `URL` class, implemented by following the WHATWG URL\\n     * Standard. [Examples of parsed URLs](https://url.spec.whatwg.org/#example-url-parsing) may be found in the Standard itself.\\n     * The `URL` class is also available on the global object.\\n     *\\n     * In accordance with browser conventions, all properties of `URL` objects\\n     * are implemented as getters and setters on the class prototype, rather than as\\n     * data properties on the object itself. Thus, unlike `legacy urlObject` s,\\n     * using the `delete` keyword on any properties of `URL` objects (e.g. `delete myURL.protocol`, `delete myURL.pathname`, etc) has no effect but will still\\n     * return `true`.\\n     * @since v7.0.0, v6.13.0\\n     */\\n    class URL {\\n        /**\\n         * Creates a `'blob:nodedata:...'` URL string that represents the given `Blob` object and can be used to retrieve the `Blob` later.\\n         *\\n         * ```js\\n         * const {\\n         *   Blob,\\n         *   resolveObjectURL,\\n         * } = require('buffer');\\n         *\\n         * const blob = new Blob(['hello']);\\n         * const id = URL.createObjectURL(blob);\\n         *\\n         * // later...\\n         *\\n         * const otherBlob = resolveObjectURL(id);\\n         * console.log(otherBlob.size);\\n         * ```\\n         *\\n         * The data stored by the registered `Blob` will be retained in memory until`URL.revokeObjectURL()` is called to remove it.\\n         *\\n         * `Blob` objects are registered within the current thread. If using Worker\\n         * Threads, `Blob` objects registered within one Worker will not be available\\n         * to other workers or the main thread.\\n         * @since v16.7.0\\n         * @experimental\\n         */\\n        static createObjectURL(blob: NodeBlob): string;\\n        /**\\n         * Removes the stored `Blob` identified by the given ID. Attempting to revoke a\\n         * ID that isn\u2019t registered will silently fail.\\n         * @since v16.7.0\\n         * @experimental\\n         * @param id A `'blob:nodedata:...` URL string returned by a prior call to `URL.createObjectURL()`.\\n         */\\n        static revokeObjectURL(objectUrl: string): void;\\n        constructor(input: string, base?: string | URL);\\n        /**\\n         * Gets and sets the fragment portion of the URL.\\n         *\\n         * ```js\\n         * const myURL = new URL('https://example.org/foo#bar');\\n         * console.log(myURL.hash);\\n         * // Prints #bar\\n         *\\n         * myURL.hash = 'baz';\\n         * console.log(myURL.href);\\n         * // Prints https://example.org/foo#baz\\n         * ```\\n         *\\n         * Invalid URL characters included in the value assigned to the `hash` property\\n         * are `percent-encoded`. The selection of which characters to\\n         * percent-encode may vary somewhat from what the {@link parse} and {@link format} methods would produce.\\n         */\\n        hash: string;\\n        /**\\n         * Gets and sets the host portion of the URL.\\n         *\\n         * ```js\\n         * const myURL = new URL('https://example.org:81/foo');\\n         * console.log(myURL.host);\\n         * // Prints example.org:81\\n         *\\n         * myURL.host = 'example.com:82';\\n         * console.log(myURL.href);\\n         * // Prints https://example.com:82/foo\\n         * ```\\n         *\\n         * Invalid host values assigned to the `host` property are ignored.\\n         */\\n        host: string;\\n        /**\\n         * Gets and sets the host name portion of the URL. The key difference between`url.host` and `url.hostname` is that `url.hostname` does _not_ include the\\n         * port.\\n         *\\n         * ```js\\n         * const myURL = new URL('https://example.org:81/foo');\\n         * console.log(myURL.hostname);\\n         * // Prints example.org\\n         *\\n         * // Setting the hostname does not change the port\\n         * myURL.hostname = 'example.com:82';\\n         * console.log(myURL.href);\\n         * // Prints https://example.com:81/foo\\n         *\\n         * // Use myURL.host to change the hostname and port\\n         * myURL.host = 'example.org:82';\\n         * console.log(myURL.href);\\n         * // Prints https://example.org:82/foo\\n         * ```\\n         *\\n         * Invalid host name values assigned to the `hostname` property are ignored.\\n         */\\n        hostname: string;\\n        /**\\n         * Gets and sets the serialized URL.\\n         *\\n         * ```js\\n         * const myURL = new URL('https://example.org/foo');\\n         * console.log(myURL.href);\\n         * // Prints https://example.org/foo\\n         *\\n         * myURL.href = 'https://example.com/bar';\\n         * console.log(myURL.href);\\n         * // Prints https://example.com/bar\\n         * ```\\n         *\\n         * Getting the value of the `href` property is equivalent to calling {@link toString}.\\n         *\\n         * Setting the value of this property to a new value is equivalent to creating a\\n         * new `URL` object using `new URL(value)`. Each of the `URL`object's properties will be modified.\\n         *\\n         * If the value assigned to the `href` property is not a valid URL, a `TypeError`will be thrown.\\n         */\\n        href: string;\\n        /**\\n         * Gets the read-only serialization of the URL's origin.\\n         *\\n         * ```js\\n         * const myURL = new URL('https://example.org/foo/bar?baz');\\n         * console.log(myURL.origin);\\n         * // Prints https://example.org\\n         * ```\\n         *\\n         * ```js\\n         * const idnURL = new URL('https://\u6e2c\u8a66');\\n         * console.log(idnURL.origin);\\n         * // Prints https://xn--g6w251d\\n         *\\n         * console.log(idnURL.hostname);\\n         * // Prints xn--g6w251d\\n         * ```\\n         */\\n        readonly origin: string;\\n        /**\\n         * Gets and sets the password portion of the URL.\\n         *\\n         * ```js\\n         * const myURL = new URL('https://abc:xyz@example.com');\\n         * console.log(myURL.password);\\n         * // Prints xyz\\n         *\\n         * myURL.password = '123';\\n         * console.log(myURL.href);\\n         * // Prints https://abc:123@example.com\\n         * ```\\n         *\\n         * Invalid URL characters included in the value assigned to the `password` property\\n         * are `percent-encoded`. The selection of which characters to\\n         * percent-encode may vary somewhat from what the {@link parse} and {@link format} methods would produce.\\n         */\\n        password: string;\\n        /**\\n         * Gets and sets the path portion of the URL.\\n         *\\n         * ```js\\n         * const myURL = new URL('https://example.org/abc/xyz?123');\\n         * console.log(myURL.pathname);\\n         * // Prints /abc/xyz\\n         *\\n         * myURL.pathname = '/abcdef';\\n         * console.log(myURL.href);\\n         * // Prints https://example.org/abcdef?123\\n         * ```\\n         *\\n         * Invalid URL characters included in the value assigned to the `pathname`property are `percent-encoded`. The selection of which characters\\n         * to percent-encode may vary somewhat from what the {@link parse} and {@link format} methods would produce.\\n         */\\n        pathname: string;\\n        /**\\n         * Gets and sets the port portion of the URL.\\n         *\\n         * The port value may be a number or a string containing a number in the range`0` to `65535` (inclusive). Setting the value to the default port of the`URL` objects given `protocol` will\\n         * result in the `port` value becoming\\n         * the empty string (`''`).\\n         *\\n         * The port value can be an empty string in which case the port depends on\\n         * the protocol/scheme:\\n         *\\n         * <omitted>\\n         *\\n         * Upon assigning a value to the port, the value will first be converted to a\\n         * string using `.toString()`.\\n         *\\n         * If that string is invalid but it begins with a number, the leading number is\\n         * assigned to `port`.\\n         * If the number lies outside the range denoted above, it is ignored.\\n         *\\n         * ```js\\n         * const myURL = new URL('https://example.org:8888');\\n         * console.log(myURL.port);\\n         * // Prints 8888\\n         *\\n         * // Default ports are automatically transformed to the empty string\\n         * // (HTTPS protocol's default port is 443)\\n         * myURL.port = '443';\\n         * console.log(myURL.port);\\n         * // Prints the empty string\\n         * console.log(myURL.href);\\n         * // Prints https://example.org/\\n         *\\n         * myURL.port = 1234;\\n         * console.log(myURL.port);\\n         * // Prints 1234\\n         * console.log(myURL.href);\\n         * // Prints https://example.org:1234/\\n         *\\n         * // Completely invalid port strings are ignored\\n         * myURL.port = 'abcd';\\n         * console.log(myURL.port);\\n         * // Prints 1234\\n         *\\n         * // Leading numbers are treated as a port number\\n         * myURL.port = '5678abcd';\\n         * console.log(myURL.port);\\n         * // Prints 5678\\n         *\\n         * // Non-integers are truncated\\n         * myURL.port = 1234.5678;\\n         * console.log(myURL.port);\\n         * // Prints 1234\\n         *\\n         * // Out-of-range numbers which are not represented in scientific notation\\n         * // will be ignored.\\n         * myURL.port = 1e10; // 10000000000, will be range-checked as described below\\n         * console.log(myURL.port);\\n         * // Prints 1234\\n         * ```\\n         *\\n         * Numbers which contain a decimal point,\\n         * such as floating-point numbers or numbers in scientific notation,\\n         * are not an exception to this rule.\\n         * Leading numbers up to the decimal point will be set as the URL's port,\\n         * assuming they are valid:\\n         *\\n         * ```js\\n         * myURL.port = 4.567e21;\\n         * console.log(myURL.port);\\n         * // Prints 4 (because it is the leading number in the string '4.567e21')\\n         * ```\\n         */\\n        port: string;\\n        /**\\n         * Gets and sets the protocol portion of the URL.\\n         *\\n         * ```js\\n         * const myURL = new URL('https://example.org');\\n         * console.log(myURL.protocol);\\n         * // Prints https:\\n         *\\n         * myURL.protocol = 'ftp';\\n         * console.log(myURL.href);\\n         * // Prints ftp://example.org/\\n         * ```\\n         *\\n         * Invalid URL protocol values assigned to the `protocol` property are ignored.\\n         */\\n        protocol: string;\\n        /**\\n         * Gets and sets the serialized query portion of the URL.\\n         *\\n         * ```js\\n         * const myURL = new URL('https://example.org/abc?123');\\n         * console.log(myURL.search);\\n         * // Prints ?123\\n         *\\n         * myURL.search = 'abc=xyz';\\n         * console.log(myURL.href);\\n         * // Prints https://example.org/abc?abc=xyz\\n         * ```\\n         *\\n         * Any invalid URL characters appearing in the value assigned the `search`property will be `percent-encoded`. The selection of which\\n         * characters to percent-encode may vary somewhat from what the {@link parse} and {@link format} methods would produce.\\n         */\\n        search: string;\\n        /**\\n         * Gets the `URLSearchParams` object representing the query parameters of the\\n         * URL. This property is read-only but the `URLSearchParams` object it provides\\n         * can be used to mutate the URL instance; to replace the entirety of query\\n         * parameters of the URL, use the {@link search} setter. See `URLSearchParams` documentation for details.\\n         *\\n         * Use care when using `.searchParams` to modify the `URL` because,\\n         * per the WHATWG specification, the `URLSearchParams` object uses\\n         * different rules to determine which characters to percent-encode. For\\n         * instance, the `URL` object will not percent encode the ASCII tilde (`~`)\\n         * character, while `URLSearchParams` will always encode it:\\n         *\\n         * ```js\\n         * const myUrl = new URL('https://example.org/abc?foo=~bar');\\n         *\\n         * console.log(myUrl.search);  // prints ?foo=~bar\\n         *\\n         * // Modify the URL via searchParams...\\n         * myUrl.searchParams.sort();\\n         *\\n         * console.log(myUrl.search);  // prints ?foo=%7Ebar\\n         * ```\\n         */\\n        readonly searchParams: URLSearchParams;\\n        /**\\n         * Gets and sets the username portion of the URL.\\n         *\\n         * ```js\\n         * const myURL = new URL('https://abc:xyz@example.com');\\n         * console.log(myURL.username);\\n         * // Prints abc\\n         *\\n         * myURL.username = '123';\\n         * console.log(myURL.href);\\n         * // Prints https://123:xyz@example.com/\\n         * ```\\n         *\\n         * Any invalid URL characters appearing in the value assigned the `username`property will be `percent-encoded`. The selection of which\\n         * characters to percent-encode may vary somewhat from what the {@link parse} and {@link format} methods would produce.\\n         */\\n        username: string;\\n        /**\\n         * The `toString()` method on the `URL` object returns the serialized URL. The\\n         * value returned is equivalent to that of {@link href} and {@link toJSON}.\\n         */\\n        toString(): string;\\n        /**\\n         * The `toJSON()` method on the `URL` object returns the serialized URL. The\\n         * value returned is equivalent to that of {@link href} and {@link toString}.\\n         *\\n         * This method is automatically called when an `URL` object is serialized\\n         * with [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify).\\n         *\\n         * ```js\\n         * const myURLs = [\\n         *   new URL('https://www.example.com'),\\n         *   new URL('https://test.example.org'),\\n         * ];\\n         * console.log(JSON.stringify(myURLs));\\n         * // Prints [\\\"https://www.example.com/\\\",\\\"https://test.example.org/\\\"]\\n         * ```\\n         */\\n        toJSON(): string;\\n    }\\n    /**\\n     * The `URLSearchParams` API provides read and write access to the query of a`URL`. The `URLSearchParams` class can also be used standalone with one of the\\n     * four following constructors.\\n     * The `URLSearchParams` class is also available on the global object.\\n     *\\n     * The WHATWG `URLSearchParams` interface and the `querystring` module have\\n     * similar purpose, but the purpose of the `querystring` module is more\\n     * general, as it allows the customization of delimiter characters (`&#x26;` and `=`).\\n     * On the other hand, this API is designed purely for URL query strings.\\n     *\\n     * ```js\\n     * const myURL = new URL('https://example.org/?abc=123');\\n     * console.log(myURL.searchParams.get('abc'));\\n     * // Prints 123\\n     *\\n     * myURL.searchParams.append('abc', 'xyz');\\n     * console.log(myURL.href);\\n     * // Prints https://example.org/?abc=123&#x26;abc=xyz\\n     *\\n     * myURL.searchParams.delete('abc');\\n     * myURL.searchParams.set('a', 'b');\\n     * console.log(myURL.href);\\n     * // Prints https://example.org/?a=b\\n     *\\n     * const newSearchParams = new URLSearchParams(myURL.searchParams);\\n     * // The above is equivalent to\\n     * // const newSearchParams = new URLSearchParams(myURL.search);\\n     *\\n     * newSearchParams.append('a', 'c');\\n     * console.log(myURL.href);\\n     * // Prints https://example.org/?a=b\\n     * console.log(newSearchParams.toString());\\n     * // Prints a=b&#x26;a=c\\n     *\\n     * // newSearchParams.toString() is implicitly called\\n     * myURL.search = newSearchParams;\\n     * console.log(myURL.href);\\n     * // Prints https://example.org/?a=b&#x26;a=c\\n     * newSearchParams.delete('a');\\n     * console.log(myURL.href);\\n     * // Prints https://example.org/?a=b&#x26;a=c\\n     * ```\\n     * @since v7.5.0, v6.13.0\\n     */\\n    class URLSearchParams implements Iterable<[string, string]> {\\n        constructor(init?: URLSearchParams | string | Record<string, string | ReadonlyArray<string>> | Iterable<[string, string]> | ReadonlyArray<[string, string]>);\\n        /**\\n         * Append a new name-value pair to the query string.\\n         */\\n        append(name: string, value: string): void;\\n        /**\\n         * Remove all name-value pairs whose name is `name`.\\n         */\\n        delete(name: string): void;\\n        /**\\n         * Returns an ES6 `Iterator` over each of the name-value pairs in the query.\\n         * Each item of the iterator is a JavaScript `Array`. The first item of the `Array`is the `name`, the second item of the `Array` is the `value`.\\n         *\\n         * Alias for `urlSearchParams[@@iterator]()`.\\n         */\\n        entries(): IterableIterator<[string, string]>;\\n        /**\\n         * Iterates over each name-value pair in the query and invokes the given function.\\n         *\\n         * ```js\\n         * const myURL = new URL('https://example.org/?a=b&#x26;c=d');\\n         * myURL.searchParams.forEach((value, name, searchParams) => {\\n         *   console.log(name, value, myURL.searchParams === searchParams);\\n         * });\\n         * // Prints:\\n         * //   a b true\\n         * //   c d true\\n         * ```\\n         * @param fn Invoked for each name-value pair in the query\\n         * @param thisArg To be used as `this` value for when `fn` is called\\n         */\\n        forEach<TThis = this>(callback: (this: TThis, value: string, name: string, searchParams: URLSearchParams) => void, thisArg?: TThis): void;\\n        /**\\n         * Returns the value of the first name-value pair whose name is `name`. If there\\n         * are no such pairs, `null` is returned.\\n         * @return or `null` if there is no name-value pair with the given `name`.\\n         */\\n        get(name: string): string | null;\\n        /**\\n         * Returns the values of all name-value pairs whose name is `name`. If there are\\n         * no such pairs, an empty array is returned.\\n         */\\n        getAll(name: string): string[];\\n        /**\\n         * Returns `true` if there is at least one name-value pair whose name is `name`.\\n         */\\n        has(name: string): boolean;\\n        /**\\n         * Returns an ES6 `Iterator` over the names of each name-value pair.\\n         *\\n         * ```js\\n         * const params = new URLSearchParams('foo=bar&#x26;foo=baz');\\n         * for (const name of params.keys()) {\\n         *   console.log(name);\\n         * }\\n         * // Prints:\\n         * //   foo\\n         * //   foo\\n         * ```\\n         */\\n        keys(): IterableIterator<string>;\\n        /**\\n         * Sets the value in the `URLSearchParams` object associated with `name` to`value`. If there are any pre-existing name-value pairs whose names are `name`,\\n         * set the first such pair's value to `value` and remove all others. If not,\\n         * append the name-value pair to the query string.\\n         *\\n         * ```js\\n         * const params = new URLSearchParams();\\n         * params.append('foo', 'bar');\\n         * params.append('foo', 'baz');\\n         * params.append('abc', 'def');\\n         * console.log(params.toString());\\n         * // Prints foo=bar&#x26;foo=baz&#x26;abc=def\\n         *\\n         * params.set('foo', 'def');\\n         * params.set('xyz', 'opq');\\n         * console.log(params.toString());\\n         * // Prints foo=def&#x26;abc=def&#x26;xyz=opq\\n         * ```\\n         */\\n        set(name: string, value: string): void;\\n        /**\\n         * The total number of parameter entries.\\n         * @since v18.16.0\\n         */\\n        readonly size: number;\\n        /**\\n         * Sort all existing name-value pairs in-place by their names. Sorting is done\\n         * with a [stable sorting algorithm](https://en.wikipedia.org/wiki/Sorting_algorithm#Stability), so relative order between name-value pairs\\n         * with the same name is preserved.\\n         *\\n         * This method can be used, in particular, to increase cache hits.\\n         *\\n         * ```js\\n         * const params = new URLSearchParams('query[]=abc&#x26;type=search&#x26;query[]=123');\\n         * params.sort();\\n         * console.log(params.toString());\\n         * // Prints query%5B%5D=abc&#x26;query%5B%5D=123&#x26;type=search\\n         * ```\\n         * @since v7.7.0, v6.13.0\\n         */\\n        sort(): void;\\n        /**\\n         * Returns the search parameters serialized as a string, with characters\\n         * percent-encoded where necessary.\\n         */\\n        toString(): string;\\n        /**\\n         * Returns an ES6 `Iterator` over the values of each name-value pair.\\n         */\\n        values(): IterableIterator<string>;\\n        [Symbol.iterator](): IterableIterator<[string, string]>;\\n    }\\n    import { URL as _URL, URLSearchParams as _URLSearchParams } from 'url';\\n    global {\\n        interface URLSearchParams extends _URLSearchParams {}\\n        interface URL extends _URL {}\\n        interface Global {\\n            URL: typeof _URL;\\n            URLSearchParams: typeof _URLSearchParams;\\n        }\\n        /**\\n         * `URL` class is a global reference for `require('url').URL`\\n         * https://nodejs.org/api/url.html#the-whatwg-url-api\\n         * @since v10.0.0\\n         */\\n        var URL: typeof globalThis extends {\\n            onmessage: any;\\n            URL: infer T;\\n        }\\n            ? T\\n            : typeof _URL;\\n        /**\\n         * `URLSearchParams` class is a global reference for `require('url').URLSearchParams`\\n         * https://nodejs.org/api/url.html#class-urlsearchparams\\n         * @since v10.0.0\\n         */\\n        var URLSearchParams: typeof globalThis extends {\\n            onmessage: any;\\n            URLSearchParams: infer T;\\n        }\\n            ? T\\n            : typeof _URLSearchParams;\\n    }\\n}\\ndeclare module 'node:url' {\\n    export * from 'url';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/util.d.ts\":\"/**\\n * The `util` module supports the needs of Node.js internal APIs. Many of the\\n * utilities are useful for application and module developers as well. To access\\n * it:\\n *\\n * ```js\\n * const util = require('util');\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.x/lib/util.js)\\n */\\ndeclare module 'util' {\\n    import * as types from 'node:util/types';\\n    export interface InspectOptions {\\n        /**\\n         * If `true`, object's non-enumerable symbols and properties are included in the formatted result.\\n         * `WeakMap` and `WeakSet` entries are also included as well as user defined prototype properties (excluding method properties).\\n         * @default false\\n         */\\n        showHidden?: boolean | undefined;\\n        /**\\n         * Specifies the number of times to recurse while formatting object.\\n         * This is useful for inspecting large objects.\\n         * To recurse up to the maximum call stack size pass `Infinity` or `null`.\\n         * @default 2\\n         */\\n        depth?: number | null | undefined;\\n        /**\\n         * If `true`, the output is styled with ANSI color codes. Colors are customizable.\\n         */\\n        colors?: boolean | undefined;\\n        /**\\n         * If `false`, `[util.inspect.custom](depth, opts, inspect)` functions are not invoked.\\n         * @default true\\n         */\\n        customInspect?: boolean | undefined;\\n        /**\\n         * If `true`, `Proxy` inspection includes the target and handler objects.\\n         * @default false\\n         */\\n        showProxy?: boolean | undefined;\\n        /**\\n         * Specifies the maximum number of `Array`, `TypedArray`, `WeakMap`, and `WeakSet` elements\\n         * to include when formatting. Set to `null` or `Infinity` to show all elements.\\n         * Set to `0` or negative to show no elements.\\n         * @default 100\\n         */\\n        maxArrayLength?: number | null | undefined;\\n        /**\\n         * Specifies the maximum number of characters to\\n         * include when formatting. Set to `null` or `Infinity` to show all elements.\\n         * Set to `0` or negative to show no characters.\\n         * @default 10000\\n         */\\n        maxStringLength?: number | null | undefined;\\n        /**\\n         * The length at which input values are split across multiple lines.\\n         * Set to `Infinity` to format the input as a single line\\n         * (in combination with `compact` set to `true` or any number >= `1`).\\n         * @default 80\\n         */\\n        breakLength?: number | undefined;\\n        /**\\n         * Setting this to `false` causes each object key\\n         * to be displayed on a new line. It will also add new lines to text that is\\n         * longer than `breakLength`. If set to a number, the most `n` inner elements\\n         * are united on a single line as long as all properties fit into\\n         * `breakLength`. Short array elements are also grouped together. Note that no\\n         * text will be reduced below 16 characters, no matter the `breakLength` size.\\n         * For more information, see the example below.\\n         * @default true\\n         */\\n        compact?: boolean | number | undefined;\\n        /**\\n         * If set to `true` or a function, all properties of an object, and `Set` and `Map`\\n         * entries are sorted in the resulting string.\\n         * If set to `true` the default sort is used.\\n         * If set to a function, it is used as a compare function.\\n         */\\n        sorted?: boolean | ((a: string, b: string) => number) | undefined;\\n        /**\\n         * If set to `true`, getters are going to be\\n         * inspected as well. If set to `'get'` only getters without setter are going\\n         * to be inspected. If set to `'set'` only getters having a corresponding\\n         * setter are going to be inspected. This might cause side effects depending on\\n         * the getter function.\\n         * @default false\\n         */\\n        getters?: 'get' | 'set' | boolean | undefined;\\n        /**\\n         * If set to `true`, an underscore is used to separate every three digits in all bigints and numbers.\\n         * @default false\\n         */\\n        numericSeparator?: boolean | undefined;\\n    }\\n    export type Style = 'special' | 'number' | 'bigint' | 'boolean' | 'undefined' | 'null' | 'string' | 'symbol' | 'date' | 'regexp' | 'module';\\n    export type CustomInspectFunction = (depth: number, options: InspectOptionsStylized) => any; // TODO: , inspect: inspect\\n    export interface InspectOptionsStylized extends InspectOptions {\\n        stylize(text: string, styleType: Style): string;\\n    }\\n    /**\\n     * The `util.format()` method returns a formatted string using the first argument\\n     * as a `printf`\\\\-like format string which can contain zero or more format\\n     * specifiers. Each specifier is replaced with the converted value from the\\n     * corresponding argument. Supported specifiers are:\\n     *\\n     * If a specifier does not have a corresponding argument, it is not replaced:\\n     *\\n     * ```js\\n     * util.format('%s:%s', 'foo');\\n     * // Returns: 'foo:%s'\\n     * ```\\n     *\\n     * Values that are not part of the format string are formatted using`util.inspect()` if their type is not `string`.\\n     *\\n     * If there are more arguments passed to the `util.format()` method than the\\n     * number of specifiers, the extra arguments are concatenated to the returned\\n     * string, separated by spaces:\\n     *\\n     * ```js\\n     * util.format('%s:%s', 'foo', 'bar', 'baz');\\n     * // Returns: 'foo:bar baz'\\n     * ```\\n     *\\n     * If the first argument does not contain a valid format specifier, `util.format()`returns a string that is the concatenation of all arguments separated by spaces:\\n     *\\n     * ```js\\n     * util.format(1, 2, 3);\\n     * // Returns: '1 2 3'\\n     * ```\\n     *\\n     * If only one argument is passed to `util.format()`, it is returned as it is\\n     * without any formatting:\\n     *\\n     * ```js\\n     * util.format('%% %s');\\n     * // Returns: '%% %s'\\n     * ```\\n     *\\n     * `util.format()` is a synchronous method that is intended as a debugging tool.\\n     * Some input values can have a significant performance overhead that can block the\\n     * event loop. Use this function with care and never in a hot code path.\\n     * @since v0.5.3\\n     * @param format A `printf`-like format string.\\n     */\\n    export function format(format?: any, ...param: any[]): string;\\n    /**\\n     * This function is identical to {@link format}, except in that it takes\\n     * an `inspectOptions` argument which specifies options that are passed along to {@link inspect}.\\n     *\\n     * ```js\\n     * util.formatWithOptions({ colors: true }, 'See object %O', { foo: 42 });\\n     * // Returns 'See object { foo: 42 }', where `42` is colored as a number\\n     * // when printed to a terminal.\\n     * ```\\n     * @since v10.0.0\\n     */\\n    export function formatWithOptions(inspectOptions: InspectOptions, format?: any, ...param: any[]): string;\\n    /**\\n     * Returns the string name for a numeric error code that comes from a Node.js API.\\n     * The mapping between error codes and error names is platform-dependent.\\n     * See `Common System Errors` for the names of common errors.\\n     *\\n     * ```js\\n     * fs.access('file/that/does/not/exist', (err) => {\\n     *   const name = util.getSystemErrorName(err.errno);\\n     *   console.error(name);  // ENOENT\\n     * });\\n     * ```\\n     * @since v9.7.0\\n     */\\n    export function getSystemErrorName(err: number): string;\\n    /**\\n     * Returns a Map of all system error codes available from the Node.js API.\\n     * The mapping between error codes and error names is platform-dependent.\\n     * See `Common System Errors` for the names of common errors.\\n     *\\n     * ```js\\n     * fs.access('file/that/does/not/exist', (err) => {\\n     *   const errorMap = util.getSystemErrorMap();\\n     *   const name = errorMap.get(err.errno);\\n     *   console.error(name);  // ENOENT\\n     * });\\n     * ```\\n     * @since v16.0.0, v14.17.0\\n     */\\n    export function getSystemErrorMap(): Map<number, [string, string]>;\\n    /**\\n     * The `util.log()` method prints the given `string` to `stdout` with an included\\n     * timestamp.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * util.log('Timestamped message.');\\n     * ```\\n     * @since v0.3.0\\n     * @deprecated Since v6.0.0 - Use a third party module instead.\\n     */\\n    export function log(string: string): void;\\n    /**\\n     * Returns the `string` after replacing any surrogate code points\\n     * (or equivalently, any unpaired surrogate code units) with the\\n     * Unicode \\\"replacement character\\\" U+FFFD.\\n     * @since v16.8.0, v14.18.0\\n     */\\n    export function toUSVString(string: string): string;\\n    /**\\n     * Creates and returns an `AbortController` instance whose `AbortSignal` is marked\\n     * as transferable and can be used with `structuredClone()` or `postMessage()`.\\n     * @since v18.11.0\\n     * @returns A transferable AbortController\\n     */\\n    export function transferableAbortController(): AbortController;\\n    /**\\n     * Marks the given {AbortSignal} as transferable so that it can be used with\\n     * `structuredClone()` and `postMessage()`.\\n     *\\n     * ```js\\n     * const signal = transferableAbortSignal(AbortSignal.timeout(100));\\n     * const channel = new MessageChannel();\\n     * channel.port2.postMessage(signal, [signal]);\\n     * ```\\n     * @since v18.11.0\\n     * @param signal The AbortSignal\\n     * @returns The same AbortSignal\\n     */\\n    export function transferableAbortSignal(signal: AbortSignal): AbortSignal;\\n    /**\\n     * Listens to abort event on the provided `signal` and returns a promise that is fulfilled when the `signal` is aborted.\\n     * If the passed `resource` is garbage collected before the `signal` is aborted, the returned promise shall remain pending indefinitely.\\n     * @param resource  Any non-null entity, reference to which is held weakly.\\n     */\\n    export function aborted(signal: AbortSignal, resource: any): Promise<void>;\\n    /**\\n     * The `util.inspect()` method returns a string representation of `object` that is\\n     * intended for debugging. The output of `util.inspect` may change at any time\\n     * and should not be depended upon programmatically. Additional `options` may be\\n     * passed that alter the result.`util.inspect()` will use the constructor's name and/or `@@toStringTag` to make\\n     * an identifiable tag for an inspected value.\\n     *\\n     * ```js\\n     * class Foo {\\n     *   get [Symbol.toStringTag]() {\\n     *     return 'bar';\\n     *   }\\n     * }\\n     *\\n     * class Bar {}\\n     *\\n     * const baz = Object.create(null, { [Symbol.toStringTag]: { value: 'foo' } });\\n     *\\n     * util.inspect(new Foo()); // 'Foo [bar] {}'\\n     * util.inspect(new Bar()); // 'Bar {}'\\n     * util.inspect(baz);       // '[foo] {}'\\n     * ```\\n     *\\n     * Circular references point to their anchor by using a reference index:\\n     *\\n     * ```js\\n     * const { inspect } = require('util');\\n     *\\n     * const obj = {};\\n     * obj.a = [obj];\\n     * obj.b = {};\\n     * obj.b.inner = obj.b;\\n     * obj.b.obj = obj;\\n     *\\n     * console.log(inspect(obj));\\n     * // <ref *1> {\\n     * //   a: [ [Circular *1] ],\\n     * //   b: <ref *2> { inner: [Circular *2], obj: [Circular *1] }\\n     * // }\\n     * ```\\n     *\\n     * The following example inspects all properties of the `util` object:\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * console.log(util.inspect(util, { showHidden: true, depth: null }));\\n     * ```\\n     *\\n     * The following example highlights the effect of the `compact` option:\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * const o = {\\n     *   a: [1, 2, [[\\n     *     'Lorem ipsum dolor sit amet,\\\\nconsectetur adipiscing elit, sed do ' +\\n     *       'eiusmod \\\\ntempor incididunt ut labore et dolore magna aliqua.',\\n     *     'test',\\n     *     'foo']], 4],\\n     *   b: new Map([['za', 1], ['zb', 'test']])\\n     * };\\n     * console.log(util.inspect(o, { compact: true, depth: 5, breakLength: 80 }));\\n     *\\n     * // { a:\\n     * //   [ 1,\\n     * //     2,\\n     * //     [ [ 'Lorem ipsum dolor sit amet,\\\\nconsectetur [...]', // A long line\\n     * //           'test',\\n     * //           'foo' ] ],\\n     * //     4 ],\\n     * //   b: Map(2) { 'za' => 1, 'zb' => 'test' } }\\n     *\\n     * // Setting `compact` to false or an integer creates more reader friendly output.\\n     * console.log(util.inspect(o, { compact: false, depth: 5, breakLength: 80 }));\\n     *\\n     * // {\\n     * //   a: [\\n     * //     1,\\n     * //     2,\\n     * //     [\\n     * //       [\\n     * //         'Lorem ipsum dolor sit amet,\\\\n' +\\n     * //           'consectetur adipiscing elit, sed do eiusmod \\\\n' +\\n     * //           'tempor incididunt ut labore et dolore magna aliqua.',\\n     * //         'test',\\n     * //         'foo'\\n     * //       ]\\n     * //     ],\\n     * //     4\\n     * //   ],\\n     * //   b: Map(2) {\\n     * //     'za' => 1,\\n     * //     'zb' => 'test'\\n     * //   }\\n     * // }\\n     *\\n     * // Setting `breakLength` to e.g. 150 will print the \\\"Lorem ipsum\\\" text in a\\n     * // single line.\\n     * ```\\n     *\\n     * The `showHidden` option allows [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap) and\\n     * [`WeakSet`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet) entries to be\\n     * inspected. If there are more entries than `maxArrayLength`, there is no\\n     * guarantee which entries are displayed. That means retrieving the same [`WeakSet`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet) entries twice may\\n     * result in different output. Furthermore, entries\\n     * with no remaining strong references may be garbage collected at any time.\\n     *\\n     * ```js\\n     * const { inspect } = require('util');\\n     *\\n     * const obj = { a: 1 };\\n     * const obj2 = { b: 2 };\\n     * const weakSet = new WeakSet([obj, obj2]);\\n     *\\n     * console.log(inspect(weakSet, { showHidden: true }));\\n     * // WeakSet { { a: 1 }, { b: 2 } }\\n     * ```\\n     *\\n     * The `sorted` option ensures that an object's property insertion order does not\\n     * impact the result of `util.inspect()`.\\n     *\\n     * ```js\\n     * const { inspect } = require('util');\\n     * const assert = require('assert');\\n     *\\n     * const o1 = {\\n     *   b: [2, 3, 1],\\n     *   a: '`a` comes before `b`',\\n     *   c: new Set([2, 3, 1])\\n     * };\\n     * console.log(inspect(o1, { sorted: true }));\\n     * // { a: '`a` comes before `b`', b: [ 2, 3, 1 ], c: Set(3) { 1, 2, 3 } }\\n     * console.log(inspect(o1, { sorted: (a, b) => b.localeCompare(a) }));\\n     * // { c: Set(3) { 3, 2, 1 }, b: [ 2, 3, 1 ], a: '`a` comes before `b`' }\\n     *\\n     * const o2 = {\\n     *   c: new Set([2, 1, 3]),\\n     *   a: '`a` comes before `b`',\\n     *   b: [2, 3, 1]\\n     * };\\n     * assert.strict.equal(\\n     *   inspect(o1, { sorted: true }),\\n     *   inspect(o2, { sorted: true })\\n     * );\\n     * ```\\n     *\\n     * The `numericSeparator` option adds an underscore every three digits to all\\n     * numbers.\\n     *\\n     * ```js\\n     * const { inspect } = require('util');\\n     *\\n     * const thousand = 1_000;\\n     * const million = 1_000_000;\\n     * const bigNumber = 123_456_789n;\\n     * const bigDecimal = 1_234.123_45;\\n     *\\n     * console.log(thousand, million, bigNumber, bigDecimal);\\n     * // 1_000 1_000_000 123_456_789n 1_234.123_45\\n     * ```\\n     *\\n     * `util.inspect()` is a synchronous method intended for debugging. Its maximum\\n     * output length is approximately 128 MB. Inputs that result in longer output will\\n     * be truncated.\\n     * @since v0.3.0\\n     * @param object Any JavaScript primitive or `Object`.\\n     * @return The representation of `object`.\\n     */\\n    export function inspect(object: any, showHidden?: boolean, depth?: number | null, color?: boolean): string;\\n    export function inspect(object: any, options?: InspectOptions): string;\\n    export namespace inspect {\\n        let colors: NodeJS.Dict<[number, number]>;\\n        let styles: {\\n            [K in Style]: string;\\n        };\\n        let defaultOptions: InspectOptions;\\n        /**\\n         * Allows changing inspect settings from the repl.\\n         */\\n        let replDefaults: InspectOptions;\\n        /**\\n         * That can be used to declare custom inspect functions.\\n         */\\n        const custom: unique symbol;\\n    }\\n    /**\\n     * Alias for [`Array.isArray()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray).\\n     *\\n     * Returns `true` if the given `object` is an `Array`. Otherwise, returns `false`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * util.isArray([]);\\n     * // Returns: true\\n     * util.isArray(new Array());\\n     * // Returns: true\\n     * util.isArray({});\\n     * // Returns: false\\n     * ```\\n     * @since v0.6.0\\n     * @deprecated Since v4.0.0 - Use `isArray` instead.\\n     */\\n    export function isArray(object: unknown): object is unknown[];\\n    /**\\n     * Returns `true` if the given `object` is a `RegExp`. Otherwise, returns `false`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * util.isRegExp(/some regexp/);\\n     * // Returns: true\\n     * util.isRegExp(new RegExp('another regexp'));\\n     * // Returns: true\\n     * util.isRegExp({});\\n     * // Returns: false\\n     * ```\\n     * @since v0.6.0\\n     * @deprecated Since v4.0.0 - Deprecated\\n     */\\n    export function isRegExp(object: unknown): object is RegExp;\\n    /**\\n     * Returns `true` if the given `object` is a `Date`. Otherwise, returns `false`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * util.isDate(new Date());\\n     * // Returns: true\\n     * util.isDate(Date());\\n     * // false (without 'new' returns a String)\\n     * util.isDate({});\\n     * // Returns: false\\n     * ```\\n     * @since v0.6.0\\n     * @deprecated Since v4.0.0 - Use {@link types.isDate} instead.\\n     */\\n    export function isDate(object: unknown): object is Date;\\n    /**\\n     * Returns `true` if the given `object` is an `Error`. Otherwise, returns`false`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * util.isError(new Error());\\n     * // Returns: true\\n     * util.isError(new TypeError());\\n     * // Returns: true\\n     * util.isError({ name: 'Error', message: 'an error occurred' });\\n     * // Returns: false\\n     * ```\\n     *\\n     * This method relies on `Object.prototype.toString()` behavior. It is\\n     * possible to obtain an incorrect result when the `object` argument manipulates`@@toStringTag`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     * const obj = { name: 'Error', message: 'an error occurred' };\\n     *\\n     * util.isError(obj);\\n     * // Returns: false\\n     * obj[Symbol.toStringTag] = 'Error';\\n     * util.isError(obj);\\n     * // Returns: true\\n     * ```\\n     * @since v0.6.0\\n     * @deprecated Since v4.0.0 - Use {@link types.isNativeError} instead.\\n     */\\n    export function isError(object: unknown): object is Error;\\n    /**\\n     * Usage of `util.inherits()` is discouraged. Please use the ES6 `class` and`extends` keywords to get language level inheritance support. Also note\\n     * that the two styles are [semantically incompatible](https://github.com/nodejs/node/issues/4179).\\n     *\\n     * Inherit the prototype methods from one [constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor) into another. The\\n     * prototype of `constructor` will be set to a new object created from`superConstructor`.\\n     *\\n     * This mainly adds some input validation on top of`Object.setPrototypeOf(constructor.prototype, superConstructor.prototype)`.\\n     * As an additional convenience, `superConstructor` will be accessible\\n     * through the `constructor.super_` property.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     * const EventEmitter = require('events');\\n     *\\n     * function MyStream() {\\n     *   EventEmitter.call(this);\\n     * }\\n     *\\n     * util.inherits(MyStream, EventEmitter);\\n     *\\n     * MyStream.prototype.write = function(data) {\\n     *   this.emit('data', data);\\n     * };\\n     *\\n     * const stream = new MyStream();\\n     *\\n     * console.log(stream instanceof EventEmitter); // true\\n     * console.log(MyStream.super_ === EventEmitter); // true\\n     *\\n     * stream.on('data', (data) => {\\n     *   console.log(`Received data: \\\"${data}\\\"`);\\n     * });\\n     * stream.write('It works!'); // Received data: \\\"It works!\\\"\\n     * ```\\n     *\\n     * ES6 example using `class` and `extends`:\\n     *\\n     * ```js\\n     * const EventEmitter = require('events');\\n     *\\n     * class MyStream extends EventEmitter {\\n     *   write(data) {\\n     *     this.emit('data', data);\\n     *   }\\n     * }\\n     *\\n     * const stream = new MyStream();\\n     *\\n     * stream.on('data', (data) => {\\n     *   console.log(`Received data: \\\"${data}\\\"`);\\n     * });\\n     * stream.write('With ES6');\\n     * ```\\n     * @since v0.3.0\\n     * @deprecated Legacy: Use ES2015 class syntax and `extends` keyword instead.\\n     */\\n    export function inherits(constructor: unknown, superConstructor: unknown): void;\\n    export type DebugLoggerFunction = (msg: string, ...param: unknown[]) => void;\\n    export interface DebugLogger extends DebugLoggerFunction {\\n        enabled: boolean;\\n    }\\n    /**\\n     * The `util.debuglog()` method is used to create a function that conditionally\\n     * writes debug messages to `stderr` based on the existence of the `NODE_DEBUG`environment variable. If the `section` name appears within the value of that\\n     * environment variable, then the returned function operates similar to `console.error()`. If not, then the returned function is a no-op.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     * const debuglog = util.debuglog('foo');\\n     *\\n     * debuglog('hello from foo [%d]', 123);\\n     * ```\\n     *\\n     * If this program is run with `NODE_DEBUG=foo` in the environment, then\\n     * it will output something like:\\n     *\\n     * ```console\\n     * FOO 3245: hello from foo [123]\\n     * ```\\n     *\\n     * where `3245` is the process id. If it is not run with that\\n     * environment variable set, then it will not print anything.\\n     *\\n     * The `section` supports wildcard also:\\n     *\\n     * ```js\\n     * const util = require('util');\\n     * const debuglog = util.debuglog('foo-bar');\\n     *\\n     * debuglog('hi there, it\\\\'s foo-bar [%d]', 2333);\\n     * ```\\n     *\\n     * if it is run with `NODE_DEBUG=foo*` in the environment, then it will output\\n     * something like:\\n     *\\n     * ```console\\n     * FOO-BAR 3257: hi there, it's foo-bar [2333]\\n     * ```\\n     *\\n     * Multiple comma-separated `section` names may be specified in the `NODE_DEBUG`environment variable: `NODE_DEBUG=fs,net,tls`.\\n     *\\n     * The optional `callback` argument can be used to replace the logging function\\n     * with a different function that doesn't have any initialization or\\n     * unnecessary wrapping.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     * let debuglog = util.debuglog('internals', (debug) => {\\n     *   // Replace with a logging function that optimizes out\\n     *   // testing if the section is enabled\\n     *   debuglog = debug;\\n     * });\\n     * ```\\n     * @since v0.11.3\\n     * @param section A string identifying the portion of the application for which the `debuglog` function is being created.\\n     * @param callback A callback invoked the first time the logging function is called with a function argument that is a more optimized logging function.\\n     * @return The logging function\\n     */\\n    export function debuglog(section: string, callback?: (fn: DebugLoggerFunction) => void): DebugLogger;\\n    export const debug: typeof debuglog;\\n    /**\\n     * Returns `true` if the given `object` is a `Boolean`. Otherwise, returns `false`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * util.isBoolean(1);\\n     * // Returns: false\\n     * util.isBoolean(0);\\n     * // Returns: false\\n     * util.isBoolean(false);\\n     * // Returns: true\\n     * ```\\n     * @since v0.11.5\\n     * @deprecated Since v4.0.0 - Use `typeof value === 'boolean'` instead.\\n     */\\n    export function isBoolean(object: unknown): object is boolean;\\n    /**\\n     * Returns `true` if the given `object` is a `Buffer`. Otherwise, returns `false`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * util.isBuffer({ length: 0 });\\n     * // Returns: false\\n     * util.isBuffer([]);\\n     * // Returns: false\\n     * util.isBuffer(Buffer.from('hello world'));\\n     * // Returns: true\\n     * ```\\n     * @since v0.11.5\\n     * @deprecated Since v4.0.0 - Use `isBuffer` instead.\\n     */\\n    export function isBuffer(object: unknown): object is Buffer;\\n    /**\\n     * Returns `true` if the given `object` is a `Function`. Otherwise, returns`false`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * function Foo() {}\\n     * const Bar = () => {};\\n     *\\n     * util.isFunction({});\\n     * // Returns: false\\n     * util.isFunction(Foo);\\n     * // Returns: true\\n     * util.isFunction(Bar);\\n     * // Returns: true\\n     * ```\\n     * @since v0.11.5\\n     * @deprecated Since v4.0.0 - Use `typeof value === 'function'` instead.\\n     */\\n    export function isFunction(object: unknown): boolean;\\n    /**\\n     * Returns `true` if the given `object` is strictly `null`. Otherwise, returns`false`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * util.isNull(0);\\n     * // Returns: false\\n     * util.isNull(undefined);\\n     * // Returns: false\\n     * util.isNull(null);\\n     * // Returns: true\\n     * ```\\n     * @since v0.11.5\\n     * @deprecated Since v4.0.0 - Use `value === null` instead.\\n     */\\n    export function isNull(object: unknown): object is null;\\n    /**\\n     * Returns `true` if the given `object` is `null` or `undefined`. Otherwise,\\n     * returns `false`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * util.isNullOrUndefined(0);\\n     * // Returns: false\\n     * util.isNullOrUndefined(undefined);\\n     * // Returns: true\\n     * util.isNullOrUndefined(null);\\n     * // Returns: true\\n     * ```\\n     * @since v0.11.5\\n     * @deprecated Since v4.0.0 - Use `value === undefined || value === null` instead.\\n     */\\n    export function isNullOrUndefined(object: unknown): object is null | undefined;\\n    /**\\n     * Returns `true` if the given `object` is a `Number`. Otherwise, returns `false`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * util.isNumber(false);\\n     * // Returns: false\\n     * util.isNumber(Infinity);\\n     * // Returns: true\\n     * util.isNumber(0);\\n     * // Returns: true\\n     * util.isNumber(NaN);\\n     * // Returns: true\\n     * ```\\n     * @since v0.11.5\\n     * @deprecated Since v4.0.0 - Use `typeof value === 'number'` instead.\\n     */\\n    export function isNumber(object: unknown): object is number;\\n    /**\\n     * Returns `true` if the given `object` is strictly an `Object`**and** not a`Function` (even though functions are objects in JavaScript).\\n     * Otherwise, returns `false`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * util.isObject(5);\\n     * // Returns: false\\n     * util.isObject(null);\\n     * // Returns: false\\n     * util.isObject({});\\n     * // Returns: true\\n     * util.isObject(() => {});\\n     * // Returns: false\\n     * ```\\n     * @since v0.11.5\\n     * @deprecated Since v4.0.0 - Deprecated: Use `value !== null && typeof value === 'object'` instead.\\n     */\\n    export function isObject(object: unknown): boolean;\\n    /**\\n     * Returns `true` if the given `object` is a primitive type. Otherwise, returns`false`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * util.isPrimitive(5);\\n     * // Returns: true\\n     * util.isPrimitive('foo');\\n     * // Returns: true\\n     * util.isPrimitive(false);\\n     * // Returns: true\\n     * util.isPrimitive(null);\\n     * // Returns: true\\n     * util.isPrimitive(undefined);\\n     * // Returns: true\\n     * util.isPrimitive({});\\n     * // Returns: false\\n     * util.isPrimitive(() => {});\\n     * // Returns: false\\n     * util.isPrimitive(/^$/);\\n     * // Returns: false\\n     * util.isPrimitive(new Date());\\n     * // Returns: false\\n     * ```\\n     * @since v0.11.5\\n     * @deprecated Since v4.0.0 - Use `(typeof value !== 'object' && typeof value !== 'function') || value === null` instead.\\n     */\\n    export function isPrimitive(object: unknown): boolean;\\n    /**\\n     * Returns `true` if the given `object` is a `string`. Otherwise, returns `false`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * util.isString('');\\n     * // Returns: true\\n     * util.isString('foo');\\n     * // Returns: true\\n     * util.isString(String('foo'));\\n     * // Returns: true\\n     * util.isString(5);\\n     * // Returns: false\\n     * ```\\n     * @since v0.11.5\\n     * @deprecated Since v4.0.0 - Use `typeof value === 'string'` instead.\\n     */\\n    export function isString(object: unknown): object is string;\\n    /**\\n     * Returns `true` if the given `object` is a `Symbol`. Otherwise, returns `false`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * util.isSymbol(5);\\n     * // Returns: false\\n     * util.isSymbol('foo');\\n     * // Returns: false\\n     * util.isSymbol(Symbol('foo'));\\n     * // Returns: true\\n     * ```\\n     * @since v0.11.5\\n     * @deprecated Since v4.0.0 - Use `typeof value === 'symbol'` instead.\\n     */\\n    export function isSymbol(object: unknown): object is symbol;\\n    /**\\n     * Returns `true` if the given `object` is `undefined`. Otherwise, returns `false`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * const foo = undefined;\\n     * util.isUndefined(5);\\n     * // Returns: false\\n     * util.isUndefined(foo);\\n     * // Returns: true\\n     * util.isUndefined(null);\\n     * // Returns: false\\n     * ```\\n     * @since v0.11.5\\n     * @deprecated Since v4.0.0 - Use `value === undefined` instead.\\n     */\\n    export function isUndefined(object: unknown): object is undefined;\\n    /**\\n     * The `util.deprecate()` method wraps `fn` (which may be a function or class) in\\n     * such a way that it is marked as deprecated.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * exports.obsoleteFunction = util.deprecate(() => {\\n     *   // Do something here.\\n     * }, 'obsoleteFunction() is deprecated. Use newShinyFunction() instead.');\\n     * ```\\n     *\\n     * When called, `util.deprecate()` will return a function that will emit a`DeprecationWarning` using the `'warning'` event. The warning will\\n     * be emitted and printed to `stderr` the first time the returned function is\\n     * called. After the warning is emitted, the wrapped function is called without\\n     * emitting a warning.\\n     *\\n     * If the same optional `code` is supplied in multiple calls to `util.deprecate()`,\\n     * the warning will be emitted only once for that `code`.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * const fn1 = util.deprecate(someFunction, someMessage, 'DEP0001');\\n     * const fn2 = util.deprecate(someOtherFunction, someOtherMessage, 'DEP0001');\\n     * fn1(); // Emits a deprecation warning with code DEP0001\\n     * fn2(); // Does not emit a deprecation warning because it has the same code\\n     * ```\\n     *\\n     * If either the `--no-deprecation` or `--no-warnings` command-line flags are\\n     * used, or if the `process.noDeprecation` property is set to `true`_prior_ to\\n     * the first deprecation warning, the `util.deprecate()` method does nothing.\\n     *\\n     * If the `--trace-deprecation` or `--trace-warnings` command-line flags are set,\\n     * or the `process.traceDeprecation` property is set to `true`, a warning and a\\n     * stack trace are printed to `stderr` the first time the deprecated function is\\n     * called.\\n     *\\n     * If the `--throw-deprecation` command-line flag is set, or the`process.throwDeprecation` property is set to `true`, then an exception will be\\n     * thrown when the deprecated function is called.\\n     *\\n     * The `--throw-deprecation` command-line flag and `process.throwDeprecation`property take precedence over `--trace-deprecation` and`process.traceDeprecation`.\\n     * @since v0.8.0\\n     * @param fn The function that is being deprecated.\\n     * @param msg A warning message to display when the deprecated function is invoked.\\n     * @param code A deprecation code. See the `list of deprecated APIs` for a list of codes.\\n     * @return The deprecated function wrapped to emit a warning.\\n     */\\n    export function deprecate<T extends Function>(fn: T, msg: string, code?: string): T;\\n    /**\\n     * Returns `true` if there is deep strict equality between `val1` and `val2`.\\n     * Otherwise, returns `false`.\\n     *\\n     * See `assert.deepStrictEqual()` for more information about deep strict\\n     * equality.\\n     * @since v9.0.0\\n     */\\n    export function isDeepStrictEqual(val1: unknown, val2: unknown): boolean;\\n    /**\\n     * Returns `str` with any ANSI escape codes removed.\\n     *\\n     * ```js\\n     * console.log(util.stripVTControlCharacters('\\\\u001B[4mvalue\\\\u001B[0m'));\\n     * // Prints \\\"value\\\"\\n     * ```\\n     * @since v16.11.0\\n     */\\n    export function stripVTControlCharacters(str: string): string;\\n    /**\\n     * Takes an `async` function (or a function that returns a `Promise`) and returns a\\n     * function following the error-first callback style, i.e. taking\\n     * an `(err, value) => ...` callback as the last argument. In the callback, the\\n     * first argument will be the rejection reason (or `null` if the `Promise`resolved), and the second argument will be the resolved value.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * async function fn() {\\n     *   return 'hello world';\\n     * }\\n     * const callbackFunction = util.callbackify(fn);\\n     *\\n     * callbackFunction((err, ret) => {\\n     *   if (err) throw err;\\n     *   console.log(ret);\\n     * });\\n     * ```\\n     *\\n     * Will print:\\n     *\\n     * ```text\\n     * hello world\\n     * ```\\n     *\\n     * The callback is executed asynchronously, and will have a limited stack trace.\\n     * If the callback throws, the process will emit an `'uncaughtException'` event, and if not handled will exit.\\n     *\\n     * Since `null` has a special meaning as the first argument to a callback, if a\\n     * wrapped function rejects a `Promise` with a falsy value as a reason, the value\\n     * is wrapped in an `Error` with the original value stored in a field named`reason`.\\n     *\\n     * ```js\\n     * function fn() {\\n     *   return Promise.reject(null);\\n     * }\\n     * const callbackFunction = util.callbackify(fn);\\n     *\\n     * callbackFunction((err, ret) => {\\n     *   // When the Promise was rejected with `null` it is wrapped with an Error and\\n     *   // the original value is stored in `reason`.\\n     *   err &#x26;&#x26; Object.hasOwn(err, 'reason') &#x26;&#x26; err.reason === null;  // true\\n     * });\\n     * ```\\n     * @since v8.2.0\\n     * @param fn An `async` function\\n     * @return a callback style function\\n     */\\n    export function callbackify(fn: () => Promise<void>): (callback: (err: NodeJS.ErrnoException) => void) => void;\\n    export function callbackify<TResult>(fn: () => Promise<TResult>): (callback: (err: NodeJS.ErrnoException, result: TResult) => void) => void;\\n    export function callbackify<T1>(fn: (arg1: T1) => Promise<void>): (arg1: T1, callback: (err: NodeJS.ErrnoException) => void) => void;\\n    export function callbackify<T1, TResult>(fn: (arg1: T1) => Promise<TResult>): (arg1: T1, callback: (err: NodeJS.ErrnoException, result: TResult) => void) => void;\\n    export function callbackify<T1, T2>(fn: (arg1: T1, arg2: T2) => Promise<void>): (arg1: T1, arg2: T2, callback: (err: NodeJS.ErrnoException) => void) => void;\\n    export function callbackify<T1, T2, TResult>(fn: (arg1: T1, arg2: T2) => Promise<TResult>): (arg1: T1, arg2: T2, callback: (err: NodeJS.ErrnoException | null, result: TResult) => void) => void;\\n    export function callbackify<T1, T2, T3>(fn: (arg1: T1, arg2: T2, arg3: T3) => Promise<void>): (arg1: T1, arg2: T2, arg3: T3, callback: (err: NodeJS.ErrnoException) => void) => void;\\n    export function callbackify<T1, T2, T3, TResult>(\\n        fn: (arg1: T1, arg2: T2, arg3: T3) => Promise<TResult>\\n    ): (arg1: T1, arg2: T2, arg3: T3, callback: (err: NodeJS.ErrnoException | null, result: TResult) => void) => void;\\n    export function callbackify<T1, T2, T3, T4>(\\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => Promise<void>\\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, callback: (err: NodeJS.ErrnoException) => void) => void;\\n    export function callbackify<T1, T2, T3, T4, TResult>(\\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => Promise<TResult>\\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, callback: (err: NodeJS.ErrnoException | null, result: TResult) => void) => void;\\n    export function callbackify<T1, T2, T3, T4, T5>(\\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => Promise<void>\\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, callback: (err: NodeJS.ErrnoException) => void) => void;\\n    export function callbackify<T1, T2, T3, T4, T5, TResult>(\\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => Promise<TResult>\\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, callback: (err: NodeJS.ErrnoException | null, result: TResult) => void) => void;\\n    export function callbackify<T1, T2, T3, T4, T5, T6>(\\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => Promise<void>\\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, callback: (err: NodeJS.ErrnoException) => void) => void;\\n    export function callbackify<T1, T2, T3, T4, T5, T6, TResult>(\\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => Promise<TResult>\\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, callback: (err: NodeJS.ErrnoException | null, result: TResult) => void) => void;\\n    export interface CustomPromisifyLegacy<TCustom extends Function> extends Function {\\n        __promisify__: TCustom;\\n    }\\n    export interface CustomPromisifySymbol<TCustom extends Function> extends Function {\\n        [promisify.custom]: TCustom;\\n    }\\n    export type CustomPromisify<TCustom extends Function> = CustomPromisifySymbol<TCustom> | CustomPromisifyLegacy<TCustom>;\\n    /**\\n     * Takes a function following the common error-first callback style, i.e. taking\\n     * an `(err, value) => ...` callback as the last argument, and returns a version\\n     * that returns promises.\\n     *\\n     * ```js\\n     * const util = require('util');\\n     * const fs = require('fs');\\n     *\\n     * const stat = util.promisify(fs.stat);\\n     * stat('.').then((stats) => {\\n     *   // Do something with `stats`\\n     * }).catch((error) => {\\n     *   // Handle the error.\\n     * });\\n     * ```\\n     *\\n     * Or, equivalently using `async function`s:\\n     *\\n     * ```js\\n     * const util = require('util');\\n     * const fs = require('fs');\\n     *\\n     * const stat = util.promisify(fs.stat);\\n     *\\n     * async function callStat() {\\n     *   const stats = await stat('.');\\n     *   console.log(`This directory is owned by ${stats.uid}`);\\n     * }\\n     * ```\\n     *\\n     * If there is an `original[util.promisify.custom]` property present, `promisify`will return its value, see `Custom promisified functions`.\\n     *\\n     * `promisify()` assumes that `original` is a function taking a callback as its\\n     * final argument in all cases. If `original` is not a function, `promisify()`will throw an error. If `original` is a function but its last argument is not\\n     * an error-first callback, it will still be passed an error-first\\n     * callback as its last argument.\\n     *\\n     * Using `promisify()` on class methods or other methods that use `this` may not\\n     * work as expected unless handled specially:\\n     *\\n     * ```js\\n     * const util = require('util');\\n     *\\n     * class Foo {\\n     *   constructor() {\\n     *     this.a = 42;\\n     *   }\\n     *\\n     *   bar(callback) {\\n     *     callback(null, this.a);\\n     *   }\\n     * }\\n     *\\n     * const foo = new Foo();\\n     *\\n     * const naiveBar = util.promisify(foo.bar);\\n     * // TypeError: Cannot read property 'a' of undefined\\n     * // naiveBar().then(a => console.log(a));\\n     *\\n     * naiveBar.call(foo).then((a) => console.log(a)); // '42'\\n     *\\n     * const bindBar = naiveBar.bind(foo);\\n     * bindBar().then((a) => console.log(a)); // '42'\\n     * ```\\n     * @since v8.0.0\\n     */\\n    export function promisify<TCustom extends Function>(fn: CustomPromisify<TCustom>): TCustom;\\n    export function promisify<TResult>(fn: (callback: (err: any, result: TResult) => void) => void): () => Promise<TResult>;\\n    export function promisify(fn: (callback: (err?: any) => void) => void): () => Promise<void>;\\n    export function promisify<T1, TResult>(fn: (arg1: T1, callback: (err: any, result: TResult) => void) => void): (arg1: T1) => Promise<TResult>;\\n    export function promisify<T1>(fn: (arg1: T1, callback: (err?: any) => void) => void): (arg1: T1) => Promise<void>;\\n    export function promisify<T1, T2, TResult>(fn: (arg1: T1, arg2: T2, callback: (err: any, result: TResult) => void) => void): (arg1: T1, arg2: T2) => Promise<TResult>;\\n    export function promisify<T1, T2>(fn: (arg1: T1, arg2: T2, callback: (err?: any) => void) => void): (arg1: T1, arg2: T2) => Promise<void>;\\n    export function promisify<T1, T2, T3, TResult>(fn: (arg1: T1, arg2: T2, arg3: T3, callback: (err: any, result: TResult) => void) => void): (arg1: T1, arg2: T2, arg3: T3) => Promise<TResult>;\\n    export function promisify<T1, T2, T3>(fn: (arg1: T1, arg2: T2, arg3: T3, callback: (err?: any) => void) => void): (arg1: T1, arg2: T2, arg3: T3) => Promise<void>;\\n    export function promisify<T1, T2, T3, T4, TResult>(\\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, callback: (err: any, result: TResult) => void) => void\\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => Promise<TResult>;\\n    export function promisify<T1, T2, T3, T4>(fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, callback: (err?: any) => void) => void): (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => Promise<void>;\\n    export function promisify<T1, T2, T3, T4, T5, TResult>(\\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, callback: (err: any, result: TResult) => void) => void\\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => Promise<TResult>;\\n    export function promisify<T1, T2, T3, T4, T5>(\\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, callback: (err?: any) => void) => void\\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => Promise<void>;\\n    export function promisify(fn: Function): Function;\\n    export namespace promisify {\\n        /**\\n         * That can be used to declare custom promisified variants of functions.\\n         */\\n        const custom: unique symbol;\\n    }\\n    /**\\n     * An implementation of the [WHATWG Encoding Standard](https://encoding.spec.whatwg.org/) `TextDecoder` API.\\n     *\\n     * ```js\\n     * const decoder = new TextDecoder();\\n     * const u8arr = new Uint8Array([72, 101, 108, 108, 111]);\\n     * console.log(decoder.decode(u8arr)); // Hello\\n     * ```\\n     * @since v8.3.0\\n     */\\n    export class TextDecoder {\\n        /**\\n         * The encoding supported by the `TextDecoder` instance.\\n         */\\n        readonly encoding: string;\\n        /**\\n         * The value will be `true` if decoding errors result in a `TypeError` being\\n         * thrown.\\n         */\\n        readonly fatal: boolean;\\n        /**\\n         * The value will be `true` if the decoding result will include the byte order\\n         * mark.\\n         */\\n        readonly ignoreBOM: boolean;\\n        constructor(\\n            encoding?: string,\\n            options?: {\\n                fatal?: boolean | undefined;\\n                ignoreBOM?: boolean | undefined;\\n            }\\n        );\\n        /**\\n         * Decodes the `input` and returns a string. If `options.stream` is `true`, any\\n         * incomplete byte sequences occurring at the end of the `input` are buffered\\n         * internally and emitted after the next call to `textDecoder.decode()`.\\n         *\\n         * If `textDecoder.fatal` is `true`, decoding errors that occur will result in a`TypeError` being thrown.\\n         * @param input An `ArrayBuffer`, `DataView` or `TypedArray` instance containing the encoded data.\\n         */\\n        decode(\\n            input?: NodeJS.ArrayBufferView | ArrayBuffer | null,\\n            options?: {\\n                stream?: boolean | undefined;\\n            }\\n        ): string;\\n    }\\n    export interface EncodeIntoResult {\\n        /**\\n         * The read Unicode code units of input.\\n         */\\n        read: number;\\n        /**\\n         * The written UTF-8 bytes of output.\\n         */\\n        written: number;\\n    }\\n    export { types };\\n\\n    //// TextEncoder/Decoder\\n    /**\\n     * An implementation of the [WHATWG Encoding Standard](https://encoding.spec.whatwg.org/) `TextEncoder` API. All\\n     * instances of `TextEncoder` only support UTF-8 encoding.\\n     *\\n     * ```js\\n     * const encoder = new TextEncoder();\\n     * const uint8array = encoder.encode('this is some data');\\n     * ```\\n     *\\n     * The `TextEncoder` class is also available on the global object.\\n     * @since v8.3.0\\n     */\\n    export class TextEncoder {\\n        /**\\n         * The encoding supported by the `TextEncoder` instance. Always set to `'utf-8'`.\\n         */\\n        readonly encoding: string;\\n        /**\\n         * UTF-8 encodes the `input` string and returns a `Uint8Array` containing the\\n         * encoded bytes.\\n         * @param [input='an empty string'] The text to encode.\\n         */\\n        encode(input?: string): Uint8Array;\\n        /**\\n         * UTF-8 encodes the `src` string to the `dest` Uint8Array and returns an object\\n         * containing the read Unicode code units and written UTF-8 bytes.\\n         *\\n         * ```js\\n         * const encoder = new TextEncoder();\\n         * const src = 'this is some data';\\n         * const dest = new Uint8Array(10);\\n         * const { read, written } = encoder.encodeInto(src, dest);\\n         * ```\\n         * @param src The text to encode.\\n         * @param dest The array to hold the encode result.\\n         */\\n        encodeInto(src: string, dest: Uint8Array): EncodeIntoResult;\\n    }\\n\\n    import { TextDecoder as _TextDecoder, TextEncoder as _TextEncoder } from 'util';\\n    global {\\n        /**\\n         * `TextDecoder` class is a global reference for `require('util').TextDecoder`\\n         * https://nodejs.org/api/globals.html#textdecoder\\n         * @since v11.0.0\\n         */\\n         var TextDecoder: typeof globalThis extends {\\n            onmessage: any;\\n            TextDecoder: infer TextDecoder;\\n        }\\n            ? TextDecoder\\n            : typeof _TextDecoder;\\n\\n        /**\\n         * `TextEncoder` class is a global reference for `require('util').TextEncoder`\\n         * https://nodejs.org/api/globals.html#textencoder\\n         * @since v11.0.0\\n         */\\n         var TextEncoder: typeof globalThis extends {\\n            onmessage: any;\\n            TextEncoder: infer TextEncoder;\\n        }\\n            ? TextEncoder\\n            : typeof _TextEncoder;\\n    }\\n\\n    //// parseArgs\\n    /**\\n     * Provides a high-level API for command-line argument parsing. Takes a\\n     * specification for the expected arguments and returns a structured object\\n     * with the parsed values and positionals.\\n     *\\n     * `config` provides arguments for parsing and configures the parser. It\\n     * supports the following properties:\\n     *\\n     *   - `args` The array of argument strings. **Default:** `process.argv` with\\n     *     `execPath` and `filename` removed.\\n     *   - `options` Arguments known to the parser. Keys of `options` are the long\\n     *     names of options and values are objects accepting the following properties:\\n     *\\n     *     - `type` Type of argument, which must be either `boolean` (for options\\n     *        which do not take values) or `string` (for options which do).\\n     *     - `multiple` Whether this option can be provided multiple\\n     *       times. If `true`, all values will be collected in an array. If\\n     *       `false`, values for the option are last-wins. **Default:** `false`.\\n     *     - `short` A single character alias for the option.\\n     *     - `default` The default option value when it is not set by args. It\\n     *       must be of the same type as the `type` property. When `multiple`\\n     *       is `true`, it must be an array.\\n     *\\n     *   - `strict`: Whether an error should be thrown when unknown arguments\\n     *     are encountered, or when arguments are passed that do not match the\\n     *     `type` configured in `options`. **Default:** `true`.\\n     *   - `allowPositionals`: Whether this command accepts positional arguments.\\n     *     **Default:** `false` if `strict` is `true`, otherwise `true`.\\n     *   - `tokens`: Whether tokens {boolean} Return the parsed tokens. This is useful\\n     *     for extending the built-in behavior, from adding additional checks through\\n     *     to reprocessing the tokens in different ways.\\n     *     **Default:** `false`.\\n     *\\n     * @returns The parsed command line arguments:\\n     *\\n     *   - `values` A mapping of parsed option names with their string\\n     *     or boolean values.\\n     *   - `positionals` Positional arguments.\\n     *   - `tokens` Detailed parse information (only if `tokens` was specified).\\n     *\\n     */\\n    export function parseArgs<T extends ParseArgsConfig>(config?: T): ParsedResults<T>;\\n\\n    interface ParseArgsOptionConfig {\\n        /**\\n         * Type of argument.\\n         */\\n        type: 'string' | 'boolean';\\n        /**\\n         * Whether this option can be provided multiple times.\\n         * If `true`, all values will be collected in an array.\\n         * If `false`, values for the option are last-wins.\\n         * @default false.\\n         */\\n        multiple?: boolean | undefined;\\n        /**\\n         * A single character alias for the option.\\n         */\\n        short?: string | undefined;\\n        /**\\n         * The default option value when it is not set by args.\\n         * It must be of the same type as the the `type` property.\\n         * When `multiple` is `true`, it must be an array.\\n         * @since v18.11.0\\n         */\\n        default?: string | boolean | string[] | boolean[] | undefined;\\n    }\\n\\n    interface ParseArgsOptionsConfig {\\n        [longOption: string]: ParseArgsOptionConfig;\\n    }\\n\\n    export interface ParseArgsConfig {\\n        /**\\n         * Array of argument strings.\\n         */\\n        args?: string[] | undefined;\\n        /**\\n         * Used to describe arguments known to the parser.\\n         */\\n        options?: ParseArgsOptionsConfig | undefined;\\n        /**\\n         * Should an error be thrown when unknown arguments are encountered,\\n         * or when arguments are passed that do not match the `type` configured in `options`.\\n         * @default true\\n         */\\n        strict?: boolean | undefined;\\n        /**\\n         * Whether this command accepts positional arguments.\\n         */\\n        allowPositionals?: boolean | undefined;\\n        /**\\n         * Return the parsed tokens. This is useful for extending the built-in behavior,\\n         * from adding additional checks through to reprocessing the tokens in different ways.\\n         * @default false\\n         */\\n        tokens?: boolean | undefined;\\n    }\\n\\n    /*\\n    IfDefaultsTrue and IfDefaultsFalse are helpers to handle default values for missing boolean properties.\\n    TypeScript does not have exact types for objects: https://github.com/microsoft/TypeScript/issues/12936\\n    This means it is impossible to distinguish between \\\"field X is definitely not present\\\" and \\\"field X may or may not be present\\\".\\n    But we expect users to generally provide their config inline or `as const`, which means TS will always know whether a given field is present.\\n    So this helper treats \\\"not definitely present\\\" (i.e., not `extends boolean`) as being \\\"definitely not present\\\", i.e. it should have its default value.\\n    This is technically incorrect but is a much nicer UX for the common case.\\n    The IfDefaultsTrue version is for things which default to true; the IfDefaultsFalse version is for things which default to false.\\n    */\\n    type IfDefaultsTrue<T, IfTrue, IfFalse> = T extends true\\n        ? IfTrue\\n        : T extends false\\n        ? IfFalse\\n        : IfTrue;\\n\\n    // we put the `extends false` condition first here because `undefined` compares like `any` when `strictNullChecks: false`\\n    type IfDefaultsFalse<T, IfTrue, IfFalse> = T extends false\\n        ? IfFalse\\n        : T extends true\\n        ? IfTrue\\n        : IfFalse;\\n\\n    type ExtractOptionValue<T extends ParseArgsConfig, O extends ParseArgsOptionConfig> = IfDefaultsTrue<\\n        T['strict'],\\n        O['type'] extends 'string' ? string : O['type'] extends 'boolean' ? boolean : string | boolean,\\n        string | boolean\\n    >;\\n\\n    type ParsedValues<T extends ParseArgsConfig> =\\n        & IfDefaultsTrue<T['strict'], unknown, { [longOption: string]: undefined | string | boolean }>\\n        & (T['options'] extends ParseArgsOptionsConfig\\n            ? {\\n                -readonly [LongOption in keyof T['options']]: IfDefaultsFalse<\\n                    T['options'][LongOption]['multiple'],\\n                    undefined | Array<ExtractOptionValue<T, T['options'][LongOption]>>,\\n                    undefined | ExtractOptionValue<T, T['options'][LongOption]>\\n                >;\\n            }\\n            : {});\\n\\n    type ParsedPositionals<T extends ParseArgsConfig> = IfDefaultsTrue<\\n        T['strict'],\\n        IfDefaultsFalse<T['allowPositionals'], string[], []>,\\n        IfDefaultsTrue<T['allowPositionals'], string[], []>\\n    >;\\n\\n    type PreciseTokenForOptions<\\n        K extends string,\\n        O extends ParseArgsOptionConfig,\\n    > = O['type'] extends 'string'\\n        ? {\\n              kind: 'option';\\n              index: number;\\n              name: K;\\n              rawName: string;\\n              value: string;\\n              inlineValue: boolean;\\n          }\\n        : O['type'] extends 'boolean'\\n        ? {\\n              kind: 'option';\\n              index: number;\\n              name: K;\\n              rawName: string;\\n              value: undefined;\\n              inlineValue: undefined;\\n          }\\n        : OptionToken & { name: K };\\n\\n    type TokenForOptions<\\n        T extends ParseArgsConfig,\\n        K extends keyof T['options'] = keyof T['options'],\\n    > = K extends unknown\\n        ? T['options'] extends ParseArgsOptionsConfig\\n            ? PreciseTokenForOptions<K & string, T['options'][K]>\\n            : OptionToken\\n        : never;\\n\\n    type ParsedOptionToken<T extends ParseArgsConfig> = IfDefaultsTrue<T['strict'], TokenForOptions<T>, OptionToken>;\\n\\n    type ParsedPositionalToken<T extends ParseArgsConfig> = IfDefaultsTrue<\\n        T['strict'],\\n        IfDefaultsFalse<T['allowPositionals'], { kind: 'positional'; index: number; value: string }, never>,\\n        IfDefaultsTrue<T['allowPositionals'], { kind: 'positional'; index: number; value: string }, never>\\n    >;\\n\\n    type ParsedTokens<T extends ParseArgsConfig> = Array<\\n        ParsedOptionToken<T> | ParsedPositionalToken<T> | { kind: 'option-terminator'; index: number }\\n    >;\\n\\n    type PreciseParsedResults<T extends ParseArgsConfig> = IfDefaultsFalse<\\n        T['tokens'],\\n        {\\n            values: ParsedValues<T>;\\n            positionals: ParsedPositionals<T>;\\n            tokens: ParsedTokens<T>;\\n        },\\n        {\\n            values: ParsedValues<T>;\\n            positionals: ParsedPositionals<T>;\\n        }\\n    >;\\n\\n    type OptionToken =\\n        | { kind: 'option'; index: number; name: string; rawName: string; value: string; inlineValue: boolean }\\n        | {\\n              kind: 'option';\\n              index: number;\\n              name: string;\\n              rawName: string;\\n              value: undefined;\\n              inlineValue: undefined;\\n          };\\n\\n    type Token =\\n        | OptionToken\\n        | { kind: 'positional'; index: number; value: string }\\n        | { kind: 'option-terminator'; index: number };\\n\\n    // If ParseArgsConfig extends T, then the user passed config constructed elsewhere.\\n    // So we can't rely on the `\\\"not definitely present\\\" implies \\\"definitely not present\\\"` assumption mentioned above.\\n    type ParsedResults<T extends ParseArgsConfig> = ParseArgsConfig extends T\\n        ? {\\n              values: { [longOption: string]: undefined | string | boolean | Array<string | boolean> };\\n              positionals: string[];\\n              tokens?: Token[];\\n          }\\n        : PreciseParsedResults<T>;\\n\\n    /**\\n     * @since v18.13.0\\n     */\\n    export class MIMEType {\\n        /**\\n         * Creates a new MIMEType object by parsing the input.\\n         *\\n         * A `TypeError` will be thrown if the `input` is not a valid MIME.\\n         * Note that an effort will be made to coerce the given values into strings.\\n         * @param input The input MIME to parse.\\n         */\\n        constructor(input: string | { toString: () => string });\\n\\n        /**\\n         * Gets and sets the type portion of the MIME.\\n         */\\n        type: string;\\n\\n        /**\\n         * Gets and sets the subtype portion of the MIME.\\n         */\\n        subtype: string;\\n\\n        /**\\n         * Gets the essence of the MIME.\\n         *\\n         * Use `mime.type` or `mime.subtype` to alter the MIME.\\n         */\\n        readonly essence: string;\\n\\n        /**\\n         * Gets the `MIMEParams` object representing the parameters of the MIME.\\n         */\\n        readonly params: MIMEParams;\\n\\n        /**\\n         * Returns the serialized MIME.\\n         *\\n         * Because of the need for standard compliance, this method\\n         * does not allow users to customize the serialization process of the MIME.\\n         */\\n        toString(): string;\\n    }\\n\\n    /**\\n     * @since v18.13.0\\n     */\\n    export class MIMEParams {\\n        /**\\n         * Remove all name-value pairs whose name is `name`.\\n         */\\n        delete(name: string): void;\\n        /**\\n         * Returns an iterator over each of the name-value pairs in the parameters.\\n         */\\n        entries(): IterableIterator<[string, string]>;\\n        /**\\n         * Returns the value of the first name-value pair whose name is `name`.\\n         * If there are no such pairs, `null` is returned.\\n         */\\n        get(name: string): string | null;\\n        /**\\n         * Returns `true` if there is at least one name-value pair whose name is `name`.\\n         */\\n        has(name: string): boolean;\\n        /**\\n         * Returns an iterator over the names of each name-value pair.\\n         */\\n        keys(): IterableIterator<string>;\\n        /**\\n         * Sets the value in the `MIMEParams` object associated with `name` to `value`.\\n         * If there are any pre-existing name-value pairs whose names are `name`,\\n         * set the first such pair's value to `value`.\\n         */\\n        set(name: string, value: string): void;\\n        /**\\n         * Returns an iterator over the values of each name-value pair.\\n         */\\n        values(): IterableIterator<string>;\\n        /**\\n         * Returns an iterator over each of the name-value pairs in the parameters.\\n         */\\n        [Symbol.iterator]: typeof MIMEParams.prototype.entries;\\n    }\\n}\\ndeclare module 'util/types' {\\n    export * from 'util/types';\\n}\\ndeclare module 'util/types' {\\n    import { KeyObject, webcrypto } from 'node:crypto';\\n    /**\\n     * Returns `true` if the value is a built-in [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) or\\n     * [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) instance.\\n     *\\n     * See also `util.types.isArrayBuffer()` and `util.types.isSharedArrayBuffer()`.\\n     *\\n     * ```js\\n     * util.types.isAnyArrayBuffer(new ArrayBuffer());  // Returns true\\n     * util.types.isAnyArrayBuffer(new SharedArrayBuffer());  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isAnyArrayBuffer(object: unknown): object is ArrayBufferLike;\\n    /**\\n     * Returns `true` if the value is an `arguments` object.\\n     *\\n     * ```js\\n     * function foo() {\\n     *   util.types.isArgumentsObject(arguments);  // Returns true\\n     * }\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isArgumentsObject(object: unknown): object is IArguments;\\n    /**\\n     * Returns `true` if the value is a built-in [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) instance.\\n     * This does _not_ include [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) instances. Usually, it is\\n     * desirable to test for both; See `util.types.isAnyArrayBuffer()` for that.\\n     *\\n     * ```js\\n     * util.types.isArrayBuffer(new ArrayBuffer());  // Returns true\\n     * util.types.isArrayBuffer(new SharedArrayBuffer());  // Returns false\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isArrayBuffer(object: unknown): object is ArrayBuffer;\\n    /**\\n     * Returns `true` if the value is an instance of one of the [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) views, such as typed\\n     * array objects or [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView). Equivalent to\\n     * [`ArrayBuffer.isView()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/isView).\\n     *\\n     * ```js\\n     * util.types.isArrayBufferView(new Int8Array());  // true\\n     * util.types.isArrayBufferView(Buffer.from('hello world')); // true\\n     * util.types.isArrayBufferView(new DataView(new ArrayBuffer(16)));  // true\\n     * util.types.isArrayBufferView(new ArrayBuffer());  // false\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isArrayBufferView(object: unknown): object is NodeJS.ArrayBufferView;\\n    /**\\n     * Returns `true` if the value is an [async function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function).\\n     * This only reports back what the JavaScript engine is seeing;\\n     * in particular, the return value may not match the original source code if\\n     * a transpilation tool was used.\\n     *\\n     * ```js\\n     * util.types.isAsyncFunction(function foo() {});  // Returns false\\n     * util.types.isAsyncFunction(async function foo() {});  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isAsyncFunction(object: unknown): boolean;\\n    /**\\n     * Returns `true` if the value is a `BigInt64Array` instance.\\n     *\\n     * ```js\\n     * util.types.isBigInt64Array(new BigInt64Array());   // Returns true\\n     * util.types.isBigInt64Array(new BigUint64Array());  // Returns false\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isBigInt64Array(value: unknown): value is BigInt64Array;\\n    /**\\n     * Returns `true` if the value is a `BigUint64Array` instance.\\n     *\\n     * ```js\\n     * util.types.isBigUint64Array(new BigInt64Array());   // Returns false\\n     * util.types.isBigUint64Array(new BigUint64Array());  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isBigUint64Array(value: unknown): value is BigUint64Array;\\n    /**\\n     * Returns `true` if the value is a boolean object, e.g. created\\n     * by `new Boolean()`.\\n     *\\n     * ```js\\n     * util.types.isBooleanObject(false);  // Returns false\\n     * util.types.isBooleanObject(true);   // Returns false\\n     * util.types.isBooleanObject(new Boolean(false)); // Returns true\\n     * util.types.isBooleanObject(new Boolean(true));  // Returns true\\n     * util.types.isBooleanObject(Boolean(false)); // Returns false\\n     * util.types.isBooleanObject(Boolean(true));  // Returns false\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isBooleanObject(object: unknown): object is Boolean;\\n    /**\\n     * Returns `true` if the value is any boxed primitive object, e.g. created\\n     * by `new Boolean()`, `new String()` or `Object(Symbol())`.\\n     *\\n     * For example:\\n     *\\n     * ```js\\n     * util.types.isBoxedPrimitive(false); // Returns false\\n     * util.types.isBoxedPrimitive(new Boolean(false)); // Returns true\\n     * util.types.isBoxedPrimitive(Symbol('foo')); // Returns false\\n     * util.types.isBoxedPrimitive(Object(Symbol('foo'))); // Returns true\\n     * util.types.isBoxedPrimitive(Object(BigInt(5))); // Returns true\\n     * ```\\n     * @since v10.11.0\\n     */\\n    function isBoxedPrimitive(object: unknown): object is String | Number | BigInt | Boolean | Symbol;\\n    /**\\n     * Returns `true` if the value is a built-in [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instance.\\n     *\\n     * ```js\\n     * const ab = new ArrayBuffer(20);\\n     * util.types.isDataView(new DataView(ab));  // Returns true\\n     * util.types.isDataView(new Float64Array());  // Returns false\\n     * ```\\n     *\\n     * See also [`ArrayBuffer.isView()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/isView).\\n     * @since v10.0.0\\n     */\\n    function isDataView(object: unknown): object is DataView;\\n    /**\\n     * Returns `true` if the value is a built-in [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instance.\\n     *\\n     * ```js\\n     * util.types.isDate(new Date());  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isDate(object: unknown): object is Date;\\n    /**\\n     * Returns `true` if the value is a native `External` value.\\n     *\\n     * A native `External` value is a special type of object that contains a\\n     * raw C++ pointer (`void*`) for access from native code, and has no other\\n     * properties. Such objects are created either by Node.js internals or native\\n     * addons. In JavaScript, they are [frozen](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze) objects with a`null` prototype.\\n     *\\n     * ```c\\n     * #include <js_native_api.h>\\n     * #include <stdlib.h>\\n     * napi_value result;\\n     * static napi_value MyNapi(napi_env env, napi_callback_info info) {\\n     *   int* raw = (int*) malloc(1024);\\n     *   napi_status status = napi_create_external(env, (void*) raw, NULL, NULL, &#x26;result);\\n     *   if (status != napi_ok) {\\n     *     napi_throw_error(env, NULL, \\\"napi_create_external failed\\\");\\n     *     return NULL;\\n     *   }\\n     *   return result;\\n     * }\\n     * ...\\n     * DECLARE_NAPI_PROPERTY(\\\"myNapi\\\", MyNapi)\\n     * ...\\n     * ```\\n     *\\n     * ```js\\n     * const native = require('napi_addon.node');\\n     * const data = native.myNapi();\\n     * util.types.isExternal(data); // returns true\\n     * util.types.isExternal(0); // returns false\\n     * util.types.isExternal(new String('foo')); // returns false\\n     * ```\\n     *\\n     * For further information on `napi_create_external`, refer to `napi_create_external()`.\\n     * @since v10.0.0\\n     */\\n    function isExternal(object: unknown): boolean;\\n    /**\\n     * Returns `true` if the value is a built-in [`Float32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array) instance.\\n     *\\n     * ```js\\n     * util.types.isFloat32Array(new ArrayBuffer());  // Returns false\\n     * util.types.isFloat32Array(new Float32Array());  // Returns true\\n     * util.types.isFloat32Array(new Float64Array());  // Returns false\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isFloat32Array(object: unknown): object is Float32Array;\\n    /**\\n     * Returns `true` if the value is a built-in [`Float64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array) instance.\\n     *\\n     * ```js\\n     * util.types.isFloat64Array(new ArrayBuffer());  // Returns false\\n     * util.types.isFloat64Array(new Uint8Array());  // Returns false\\n     * util.types.isFloat64Array(new Float64Array());  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isFloat64Array(object: unknown): object is Float64Array;\\n    /**\\n     * Returns `true` if the value is a generator function.\\n     * This only reports back what the JavaScript engine is seeing;\\n     * in particular, the return value may not match the original source code if\\n     * a transpilation tool was used.\\n     *\\n     * ```js\\n     * util.types.isGeneratorFunction(function foo() {});  // Returns false\\n     * util.types.isGeneratorFunction(function* foo() {});  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isGeneratorFunction(object: unknown): object is GeneratorFunction;\\n    /**\\n     * Returns `true` if the value is a generator object as returned from a\\n     * built-in generator function.\\n     * This only reports back what the JavaScript engine is seeing;\\n     * in particular, the return value may not match the original source code if\\n     * a transpilation tool was used.\\n     *\\n     * ```js\\n     * function* foo() {}\\n     * const generator = foo();\\n     * util.types.isGeneratorObject(generator);  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isGeneratorObject(object: unknown): object is Generator;\\n    /**\\n     * Returns `true` if the value is a built-in [`Int8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array) instance.\\n     *\\n     * ```js\\n     * util.types.isInt8Array(new ArrayBuffer());  // Returns false\\n     * util.types.isInt8Array(new Int8Array());  // Returns true\\n     * util.types.isInt8Array(new Float64Array());  // Returns false\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isInt8Array(object: unknown): object is Int8Array;\\n    /**\\n     * Returns `true` if the value is a built-in [`Int16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array) instance.\\n     *\\n     * ```js\\n     * util.types.isInt16Array(new ArrayBuffer());  // Returns false\\n     * util.types.isInt16Array(new Int16Array());  // Returns true\\n     * util.types.isInt16Array(new Float64Array());  // Returns false\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isInt16Array(object: unknown): object is Int16Array;\\n    /**\\n     * Returns `true` if the value is a built-in [`Int32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array) instance.\\n     *\\n     * ```js\\n     * util.types.isInt32Array(new ArrayBuffer());  // Returns false\\n     * util.types.isInt32Array(new Int32Array());  // Returns true\\n     * util.types.isInt32Array(new Float64Array());  // Returns false\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isInt32Array(object: unknown): object is Int32Array;\\n    /**\\n     * Returns `true` if the value is a built-in [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instance.\\n     *\\n     * ```js\\n     * util.types.isMap(new Map());  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isMap<T>(object: T | {}): object is T extends ReadonlyMap<any, any> ? (unknown extends T ? never : ReadonlyMap<any, any>) : Map<unknown, unknown>;\\n    /**\\n     * Returns `true` if the value is an iterator returned for a built-in [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instance.\\n     *\\n     * ```js\\n     * const map = new Map();\\n     * util.types.isMapIterator(map.keys());  // Returns true\\n     * util.types.isMapIterator(map.values());  // Returns true\\n     * util.types.isMapIterator(map.entries());  // Returns true\\n     * util.types.isMapIterator(map[Symbol.iterator]());  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isMapIterator(object: unknown): boolean;\\n    /**\\n     * Returns `true` if the value is an instance of a [Module Namespace Object](https://tc39.github.io/ecma262/#sec-module-namespace-exotic-objects).\\n     *\\n     * ```js\\n     * import * as ns from './a.js';\\n     *\\n     * util.types.isModuleNamespaceObject(ns);  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isModuleNamespaceObject(value: unknown): boolean;\\n    /**\\n     * Returns `true` if the value is an instance of a built-in `Error` type.\\n     *\\n     * ```js\\n     * util.types.isNativeError(new Error());  // Returns true\\n     * util.types.isNativeError(new TypeError());  // Returns true\\n     * util.types.isNativeError(new RangeError());  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isNativeError(object: unknown): object is Error;\\n    /**\\n     * Returns `true` if the value is a number object, e.g. created\\n     * by `new Number()`.\\n     *\\n     * ```js\\n     * util.types.isNumberObject(0);  // Returns false\\n     * util.types.isNumberObject(new Number(0));   // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isNumberObject(object: unknown): object is Number;\\n    /**\\n     * Returns `true` if the value is a built-in [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\\n     *\\n     * ```js\\n     * util.types.isPromise(Promise.resolve(42));  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isPromise(object: unknown): object is Promise<unknown>;\\n    /**\\n     * Returns `true` if the value is a [`Proxy`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) instance.\\n     *\\n     * ```js\\n     * const target = {};\\n     * const proxy = new Proxy(target, {});\\n     * util.types.isProxy(target);  // Returns false\\n     * util.types.isProxy(proxy);  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isProxy(object: unknown): boolean;\\n    /**\\n     * Returns `true` if the value is a regular expression object.\\n     *\\n     * ```js\\n     * util.types.isRegExp(/abc/);  // Returns true\\n     * util.types.isRegExp(new RegExp('abc'));  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isRegExp(object: unknown): object is RegExp;\\n    /**\\n     * Returns `true` if the value is a built-in [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instance.\\n     *\\n     * ```js\\n     * util.types.isSet(new Set());  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isSet<T>(object: T | {}): object is T extends ReadonlySet<any> ? (unknown extends T ? never : ReadonlySet<any>) : Set<unknown>;\\n    /**\\n     * Returns `true` if the value is an iterator returned for a built-in [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instance.\\n     *\\n     * ```js\\n     * const set = new Set();\\n     * util.types.isSetIterator(set.keys());  // Returns true\\n     * util.types.isSetIterator(set.values());  // Returns true\\n     * util.types.isSetIterator(set.entries());  // Returns true\\n     * util.types.isSetIterator(set[Symbol.iterator]());  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isSetIterator(object: unknown): boolean;\\n    /**\\n     * Returns `true` if the value is a built-in [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) instance.\\n     * This does _not_ include [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) instances. Usually, it is\\n     * desirable to test for both; See `util.types.isAnyArrayBuffer()` for that.\\n     *\\n     * ```js\\n     * util.types.isSharedArrayBuffer(new ArrayBuffer());  // Returns false\\n     * util.types.isSharedArrayBuffer(new SharedArrayBuffer());  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isSharedArrayBuffer(object: unknown): object is SharedArrayBuffer;\\n    /**\\n     * Returns `true` if the value is a string object, e.g. created\\n     * by `new String()`.\\n     *\\n     * ```js\\n     * util.types.isStringObject('foo');  // Returns false\\n     * util.types.isStringObject(new String('foo'));   // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isStringObject(object: unknown): object is String;\\n    /**\\n     * Returns `true` if the value is a symbol object, created\\n     * by calling `Object()` on a `Symbol` primitive.\\n     *\\n     * ```js\\n     * const symbol = Symbol('foo');\\n     * util.types.isSymbolObject(symbol);  // Returns false\\n     * util.types.isSymbolObject(Object(symbol));   // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isSymbolObject(object: unknown): object is Symbol;\\n    /**\\n     * Returns `true` if the value is a built-in [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instance.\\n     *\\n     * ```js\\n     * util.types.isTypedArray(new ArrayBuffer());  // Returns false\\n     * util.types.isTypedArray(new Uint8Array());  // Returns true\\n     * util.types.isTypedArray(new Float64Array());  // Returns true\\n     * ```\\n     *\\n     * See also [`ArrayBuffer.isView()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/isView).\\n     * @since v10.0.0\\n     */\\n    function isTypedArray(object: unknown): object is NodeJS.TypedArray;\\n    /**\\n     * Returns `true` if the value is a built-in [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) instance.\\n     *\\n     * ```js\\n     * util.types.isUint8Array(new ArrayBuffer());  // Returns false\\n     * util.types.isUint8Array(new Uint8Array());  // Returns true\\n     * util.types.isUint8Array(new Float64Array());  // Returns false\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isUint8Array(object: unknown): object is Uint8Array;\\n    /**\\n     * Returns `true` if the value is a built-in [`Uint8ClampedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray) instance.\\n     *\\n     * ```js\\n     * util.types.isUint8ClampedArray(new ArrayBuffer());  // Returns false\\n     * util.types.isUint8ClampedArray(new Uint8ClampedArray());  // Returns true\\n     * util.types.isUint8ClampedArray(new Float64Array());  // Returns false\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isUint8ClampedArray(object: unknown): object is Uint8ClampedArray;\\n    /**\\n     * Returns `true` if the value is a built-in [`Uint16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array) instance.\\n     *\\n     * ```js\\n     * util.types.isUint16Array(new ArrayBuffer());  // Returns false\\n     * util.types.isUint16Array(new Uint16Array());  // Returns true\\n     * util.types.isUint16Array(new Float64Array());  // Returns false\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isUint16Array(object: unknown): object is Uint16Array;\\n    /**\\n     * Returns `true` if the value is a built-in [`Uint32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array) instance.\\n     *\\n     * ```js\\n     * util.types.isUint32Array(new ArrayBuffer());  // Returns false\\n     * util.types.isUint32Array(new Uint32Array());  // Returns true\\n     * util.types.isUint32Array(new Float64Array());  // Returns false\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isUint32Array(object: unknown): object is Uint32Array;\\n    /**\\n     * Returns `true` if the value is a built-in [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap) instance.\\n     *\\n     * ```js\\n     * util.types.isWeakMap(new WeakMap());  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isWeakMap(object: unknown): object is WeakMap<object, unknown>;\\n    /**\\n     * Returns `true` if the value is a built-in [`WeakSet`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet) instance.\\n     *\\n     * ```js\\n     * util.types.isWeakSet(new WeakSet());  // Returns true\\n     * ```\\n     * @since v10.0.0\\n     */\\n    function isWeakSet(object: unknown): object is WeakSet<object>;\\n    /**\\n     * Returns `true` if `value` is a `KeyObject`, `false` otherwise.\\n     * @since v16.2.0\\n     */\\n    function isKeyObject(object: unknown): object is KeyObject;\\n    /**\\n     * Returns `true` if `value` is a `CryptoKey`, `false` otherwise.\\n     * @since v16.2.0\\n     */\\n    function isCryptoKey(object: unknown): object is webcrypto.CryptoKey;\\n}\\ndeclare module 'node:util' {\\n    export * from 'util';\\n}\\ndeclare module 'node:util/types' {\\n    export * from 'util/types';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/v8.d.ts\":\"/**\\n * The `v8` module exposes APIs that are specific to the version of [V8](https://developers.google.com/v8/) built into the Node.js binary. It can be accessed using:\\n *\\n * ```js\\n * const v8 = require('v8');\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/v8.js)\\n */\\ndeclare module 'v8' {\\n    import { Readable } from 'node:stream';\\n    interface HeapSpaceInfo {\\n        space_name: string;\\n        space_size: number;\\n        space_used_size: number;\\n        space_available_size: number;\\n        physical_space_size: number;\\n    }\\n    // ** Signifies if the --zap_code_space option is enabled or not.  1 == enabled, 0 == disabled. */\\n    type DoesZapCodeSpaceFlag = 0 | 1;\\n    interface HeapInfo {\\n        total_heap_size: number;\\n        total_heap_size_executable: number;\\n        total_physical_size: number;\\n        total_available_size: number;\\n        used_heap_size: number;\\n        heap_size_limit: number;\\n        malloced_memory: number;\\n        peak_malloced_memory: number;\\n        does_zap_garbage: DoesZapCodeSpaceFlag;\\n        number_of_native_contexts: number;\\n        number_of_detached_contexts: number;\\n    }\\n    interface HeapCodeStatistics {\\n        code_and_metadata_size: number;\\n        bytecode_and_metadata_size: number;\\n        external_script_source_size: number;\\n    }\\n    /**\\n     * Returns an integer representing a version tag derived from the V8 version,\\n     * command-line flags, and detected CPU features. This is useful for determining\\n     * whether a `vm.Script` `cachedData` buffer is compatible with this instance\\n     * of V8.\\n     *\\n     * ```js\\n     * console.log(v8.cachedDataVersionTag()); // 3947234607\\n     * // The value returned by v8.cachedDataVersionTag() is derived from the V8\\n     * // version, command-line flags, and detected CPU features. Test that the value\\n     * // does indeed update when flags are toggled.\\n     * v8.setFlagsFromString('--allow_natives_syntax');\\n     * console.log(v8.cachedDataVersionTag()); // 183726201\\n     * ```\\n     * @since v8.0.0\\n     */\\n    function cachedDataVersionTag(): number;\\n    /**\\n     * Returns an object with the following properties:\\n     *\\n     * `does_zap_garbage` is a 0/1 boolean, which signifies whether the`--zap_code_space` option is enabled or not. This makes V8 overwrite heap\\n     * garbage with a bit pattern. The RSS footprint (resident set size) gets bigger\\n     * because it continuously touches all heap pages and that makes them less likely\\n     * to get swapped out by the operating system.\\n     *\\n     * `number_of_native_contexts` The value of native\\\\_context is the number of the\\n     * top-level contexts currently active. Increase of this number over time indicates\\n     * a memory leak.\\n     *\\n     * `number_of_detached_contexts` The value of detached\\\\_context is the number\\n     * of contexts that were detached and not yet garbage collected. This number\\n     * being non-zero indicates a potential memory leak.\\n     *\\n     * ```js\\n     * {\\n     *   total_heap_size: 7326976,\\n     *   total_heap_size_executable: 4194304,\\n     *   total_physical_size: 7326976,\\n     *   total_available_size: 1152656,\\n     *   used_heap_size: 3476208,\\n     *   heap_size_limit: 1535115264,\\n     *   malloced_memory: 16384,\\n     *   peak_malloced_memory: 1127496,\\n     *   does_zap_garbage: 0,\\n     *   number_of_native_contexts: 1,\\n     *   number_of_detached_contexts: 0\\n     * }\\n     * ```\\n     * @since v1.0.0\\n     */\\n    function getHeapStatistics(): HeapInfo;\\n    /**\\n     * Returns statistics about the V8 heap spaces, i.e. the segments which make up\\n     * the V8 heap. Neither the ordering of heap spaces, nor the availability of a\\n     * heap space can be guaranteed as the statistics are provided via the\\n     * V8[`GetHeapSpaceStatistics`](https://v8docs.nodesource.com/node-13.2/d5/dda/classv8_1_1_isolate.html#ac673576f24fdc7a33378f8f57e1d13a4) function and may change from one V8 version to the\\n     * next.\\n     *\\n     * The value returned is an array of objects containing the following properties:\\n     *\\n     * ```json\\n     * [\\n     *   {\\n     *     \\\"space_name\\\": \\\"new_space\\\",\\n     *     \\\"space_size\\\": 2063872,\\n     *     \\\"space_used_size\\\": 951112,\\n     *     \\\"space_available_size\\\": 80824,\\n     *     \\\"physical_space_size\\\": 2063872\\n     *   },\\n     *   {\\n     *     \\\"space_name\\\": \\\"old_space\\\",\\n     *     \\\"space_size\\\": 3090560,\\n     *     \\\"space_used_size\\\": 2493792,\\n     *     \\\"space_available_size\\\": 0,\\n     *     \\\"physical_space_size\\\": 3090560\\n     *   },\\n     *   {\\n     *     \\\"space_name\\\": \\\"code_space\\\",\\n     *     \\\"space_size\\\": 1260160,\\n     *     \\\"space_used_size\\\": 644256,\\n     *     \\\"space_available_size\\\": 960,\\n     *     \\\"physical_space_size\\\": 1260160\\n     *   },\\n     *   {\\n     *     \\\"space_name\\\": \\\"map_space\\\",\\n     *     \\\"space_size\\\": 1094160,\\n     *     \\\"space_used_size\\\": 201608,\\n     *     \\\"space_available_size\\\": 0,\\n     *     \\\"physical_space_size\\\": 1094160\\n     *   },\\n     *   {\\n     *     \\\"space_name\\\": \\\"large_object_space\\\",\\n     *     \\\"space_size\\\": 0,\\n     *     \\\"space_used_size\\\": 0,\\n     *     \\\"space_available_size\\\": 1490980608,\\n     *     \\\"physical_space_size\\\": 0\\n     *   }\\n     * ]\\n     * ```\\n     * @since v6.0.0\\n     */\\n    function getHeapSpaceStatistics(): HeapSpaceInfo[];\\n    /**\\n     * The `v8.setFlagsFromString()` method can be used to programmatically set\\n     * V8 command-line flags. This method should be used with care. Changing settings\\n     * after the VM has started may result in unpredictable behavior, including\\n     * crashes and data loss; or it may simply do nothing.\\n     *\\n     * The V8 options available for a version of Node.js may be determined by running`node --v8-options`.\\n     *\\n     * Usage:\\n     *\\n     * ```js\\n     * // Print GC events to stdout for one minute.\\n     * const v8 = require('v8');\\n     * v8.setFlagsFromString('--trace_gc');\\n     * setTimeout(() => { v8.setFlagsFromString('--notrace_gc'); }, 60e3);\\n     * ```\\n     * @since v1.0.0\\n     */\\n    function setFlagsFromString(flags: string): void;\\n    /**\\n     * Generates a snapshot of the current V8 heap and returns a Readable\\n     * Stream that may be used to read the JSON serialized representation.\\n     * This JSON stream format is intended to be used with tools such as\\n     * Chrome DevTools. The JSON schema is undocumented and specific to the\\n     * V8 engine. Therefore, the schema may change from one version of V8 to the next.\\n     *\\n     * Creating a heap snapshot requires memory about twice the size of the heap at\\n     * the time the snapshot is created. This results in the risk of OOM killers\\n     * terminating the process.\\n     *\\n     * Generating a snapshot is a synchronous operation which blocks the event loop\\n     * for a duration depending on the heap size.\\n     *\\n     * ```js\\n     * // Print heap snapshot to the console\\n     * const v8 = require('v8');\\n     * const stream = v8.getHeapSnapshot();\\n     * stream.pipe(process.stdout);\\n     * ```\\n     * @since v11.13.0\\n     * @return A Readable Stream containing the V8 heap snapshot\\n     */\\n    function getHeapSnapshot(): Readable;\\n    /**\\n     * Generates a snapshot of the current V8 heap and writes it to a JSON\\n     * file. This file is intended to be used with tools such as Chrome\\n     * DevTools. The JSON schema is undocumented and specific to the V8\\n     * engine, and may change from one version of V8 to the next.\\n     *\\n     * A heap snapshot is specific to a single V8 isolate. When using `worker threads`, a heap snapshot generated from the main thread will\\n     * not contain any information about the workers, and vice versa.\\n     *\\n     * Creating a heap snapshot requires memory about twice the size of the heap at\\n     * the time the snapshot is created. This results in the risk of OOM killers\\n     * terminating the process.\\n     *\\n     * Generating a snapshot is a synchronous operation which blocks the event loop\\n     * for a duration depending on the heap size.\\n     *\\n     * ```js\\n     * const { writeHeapSnapshot } = require('v8');\\n     * const {\\n     *   Worker,\\n     *   isMainThread,\\n     *   parentPort\\n     * } = require('worker_threads');\\n     *\\n     * if (isMainThread) {\\n     *   const worker = new Worker(__filename);\\n     *\\n     *   worker.once('message', (filename) => {\\n     *     console.log(`worker heapdump: ${filename}`);\\n     *     // Now get a heapdump for the main thread.\\n     *     console.log(`main thread heapdump: ${writeHeapSnapshot()}`);\\n     *   });\\n     *\\n     *   // Tell the worker to create a heapdump.\\n     *   worker.postMessage('heapdump');\\n     * } else {\\n     *   parentPort.once('message', (message) => {\\n     *     if (message === 'heapdump') {\\n     *       // Generate a heapdump for the worker\\n     *       // and return the filename to the parent.\\n     *       parentPort.postMessage(writeHeapSnapshot());\\n     *     }\\n     *   });\\n     * }\\n     * ```\\n     * @since v11.13.0\\n     * @param filename The file path where the V8 heap snapshot is to be saved. If not specified, a file name with the pattern `'Heap-${yyyymmdd}-${hhmmss}-${pid}-${thread_id}.heapsnapshot'` will be\\n     * generated, where `{pid}` will be the PID of the Node.js process, `{thread_id}` will be `0` when `writeHeapSnapshot()` is called from the main Node.js thread or the id of a\\n     * worker thread.\\n     * @return The filename where the snapshot was saved.\\n     */\\n    function writeHeapSnapshot(filename?: string): string;\\n    /**\\n     * Returns an object with the following properties:\\n     *\\n     * ```js\\n     * {\\n     *   code_and_metadata_size: 212208,\\n     *   bytecode_and_metadata_size: 161368,\\n     *   external_script_source_size: 1410794\\n     * }\\n     * ```\\n     * @since v12.8.0\\n     */\\n    function getHeapCodeStatistics(): HeapCodeStatistics;\\n    /**\\n     * @since v8.0.0\\n     */\\n    class Serializer {\\n        /**\\n         * Writes out a header, which includes the serialization format version.\\n         */\\n        writeHeader(): void;\\n        /**\\n         * Serializes a JavaScript value and adds the serialized representation to the\\n         * internal buffer.\\n         *\\n         * This throws an error if `value` cannot be serialized.\\n         */\\n        writeValue(val: any): boolean;\\n        /**\\n         * Returns the stored internal buffer. This serializer should not be used once\\n         * the buffer is released. Calling this method results in undefined behavior\\n         * if a previous write has failed.\\n         */\\n        releaseBuffer(): Buffer;\\n        /**\\n         * Marks an `ArrayBuffer` as having its contents transferred out of band.\\n         * Pass the corresponding `ArrayBuffer` in the deserializing context to `deserializer.transferArrayBuffer()`.\\n         * @param id A 32-bit unsigned integer.\\n         * @param arrayBuffer An `ArrayBuffer` instance.\\n         */\\n        transferArrayBuffer(id: number, arrayBuffer: ArrayBuffer): void;\\n        /**\\n         * Write a raw 32-bit unsigned integer.\\n         * For use inside of a custom `serializer._writeHostObject()`.\\n         */\\n        writeUint32(value: number): void;\\n        /**\\n         * Write a raw 64-bit unsigned integer, split into high and low 32-bit parts.\\n         * For use inside of a custom `serializer._writeHostObject()`.\\n         */\\n        writeUint64(hi: number, lo: number): void;\\n        /**\\n         * Write a JS `number` value.\\n         * For use inside of a custom `serializer._writeHostObject()`.\\n         */\\n        writeDouble(value: number): void;\\n        /**\\n         * Write raw bytes into the serializer\u2019s internal buffer. The deserializer\\n         * will require a way to compute the length of the buffer.\\n         * For use inside of a custom `serializer._writeHostObject()`.\\n         */\\n        writeRawBytes(buffer: NodeJS.TypedArray): void;\\n    }\\n    /**\\n     * A subclass of `Serializer` that serializes `TypedArray`(in particular `Buffer`) and `DataView` objects as host objects, and only\\n     * stores the part of their underlying `ArrayBuffer`s that they are referring to.\\n     * @since v8.0.0\\n     */\\n    class DefaultSerializer extends Serializer {}\\n    /**\\n     * @since v8.0.0\\n     */\\n    class Deserializer {\\n        constructor(data: NodeJS.TypedArray);\\n        /**\\n         * Reads and validates a header (including the format version).\\n         * May, for example, reject an invalid or unsupported wire format. In that case,\\n         * an `Error` is thrown.\\n         */\\n        readHeader(): boolean;\\n        /**\\n         * Deserializes a JavaScript value from the buffer and returns it.\\n         */\\n        readValue(): any;\\n        /**\\n         * Marks an `ArrayBuffer` as having its contents transferred out of band.\\n         * Pass the corresponding `ArrayBuffer` in the serializing context to `serializer.transferArrayBuffer()` (or return the `id` from `serializer._getSharedArrayBufferId()` in the case of\\n         * `SharedArrayBuffer`s).\\n         * @param id A 32-bit unsigned integer.\\n         * @param arrayBuffer An `ArrayBuffer` instance.\\n         */\\n        transferArrayBuffer(id: number, arrayBuffer: ArrayBuffer): void;\\n        /**\\n         * Reads the underlying wire format version. Likely mostly to be useful to\\n         * legacy code reading old wire format versions. May not be called before`.readHeader()`.\\n         */\\n        getWireFormatVersion(): number;\\n        /**\\n         * Read a raw 32-bit unsigned integer and return it.\\n         * For use inside of a custom `deserializer._readHostObject()`.\\n         */\\n        readUint32(): number;\\n        /**\\n         * Read a raw 64-bit unsigned integer and return it as an array `[hi, lo]`with two 32-bit unsigned integer entries.\\n         * For use inside of a custom `deserializer._readHostObject()`.\\n         */\\n        readUint64(): [number, number];\\n        /**\\n         * Read a JS `number` value.\\n         * For use inside of a custom `deserializer._readHostObject()`.\\n         */\\n        readDouble(): number;\\n        /**\\n         * Read raw bytes from the deserializer\u2019s internal buffer. The `length` parameter\\n         * must correspond to the length of the buffer that was passed to `serializer.writeRawBytes()`.\\n         * For use inside of a custom `deserializer._readHostObject()`.\\n         */\\n        readRawBytes(length: number): Buffer;\\n    }\\n    /**\\n     * A subclass of `Deserializer` corresponding to the format written by `DefaultSerializer`.\\n     * @since v8.0.0\\n     */\\n    class DefaultDeserializer extends Deserializer {}\\n    /**\\n     * Uses a `DefaultSerializer` to serialize `value` into a buffer.\\n     *\\n     * `ERR_BUFFER_TOO_LARGE` will be thrown when trying to\\n     * serialize a huge object which requires buffer\\n     * larger than `buffer.constants.MAX_LENGTH`.\\n     * @since v8.0.0\\n     */\\n    function serialize(value: any): Buffer;\\n    /**\\n     * Uses a `DefaultDeserializer` with default options to read a JS value\\n     * from a buffer.\\n     * @since v8.0.0\\n     * @param buffer A buffer returned by {@link serialize}.\\n     */\\n    function deserialize(buffer: NodeJS.TypedArray): any;\\n    /**\\n     * The `v8.takeCoverage()` method allows the user to write the coverage started by `NODE_V8_COVERAGE` to disk on demand. This method can be invoked multiple\\n     * times during the lifetime of the process. Each time the execution counter will\\n     * be reset and a new coverage report will be written to the directory specified\\n     * by `NODE_V8_COVERAGE`.\\n     *\\n     * When the process is about to exit, one last coverage will still be written to\\n     * disk unless {@link stopCoverage} is invoked before the process exits.\\n     * @since v15.1.0, v14.18.0, v12.22.0\\n     */\\n    function takeCoverage(): void;\\n    /**\\n     * The `v8.stopCoverage()` method allows the user to stop the coverage collection\\n     * started by `NODE_V8_COVERAGE`, so that V8 can release the execution count\\n     * records and optimize code. This can be used in conjunction with {@link takeCoverage} if the user wants to collect the coverage on demand.\\n     * @since v15.1.0, v14.18.0, v12.22.0\\n     */\\n    function stopCoverage(): void;\\n\\n    /**\\n     * This API collects GC data in current thread.\\n     */\\n    class GCProfiler {\\n        /**\\n         * Start collecting GC data.\\n         */\\n        start(): void;\\n        /**\\n         * Stop collecting GC data and return a object.\\n         */\\n        stop(): GCProfilerResult;\\n    }\\n    interface GCProfilerResult {\\n        version: number;\\n        startTime: number;\\n        endTime: number;\\n        statistics: Array<{\\n            gcType: string;\\n            cost: number;\\n            beforeGC: {\\n                heapStatistics: HeapStatistics;\\n                heapSpaceStatistics: HeapSpaceStatistics[];\\n            };\\n            afterGC: {\\n                heapStatistics: HeapStatistics;\\n                heapSpaceStatistics: HeapSpaceStatistics[];\\n            };\\n        }>;\\n    }\\n    interface HeapStatistics {\\n        totalHeapSize: number;\\n        totalHeapSizeExecutable: number;\\n        totalPhysicalSize: number;\\n        totalAvailableSize: number;\\n        totalGlobalHandlesSize: number;\\n        usedGlobalHandlesSize: number;\\n        usedHeapSize: number;\\n        heapSizeLimit: number;\\n        mallocedMemory: number;\\n        externalMemory: number;\\n        peakMallocedMemory: number;\\n    }\\n    interface HeapSpaceStatistics {\\n        spaceName: string;\\n        spaceSize: number;\\n        spaceUsedSize: number;\\n        spaceAvailableSize: number;\\n        physicalSpaceSize: number;\\n    }\\n    /**\\n     * Called when a promise is constructed. This does not mean that corresponding before/after events will occur, only that the possibility exists. This will\\n     * happen if a promise is created without ever getting a continuation.\\n     * @since v17.1.0, v16.14.0\\n     * @param promise The promise being created.\\n     * @param parent The promise continued from, if applicable.\\n     */\\n    interface Init {\\n        (promise: Promise<unknown>, parent: Promise<unknown>): void;\\n    }\\n    /**\\n     * Called before a promise continuation executes. This can be in the form of `then()`, `catch()`, or `finally()` handlers or an await resuming.\\n     *\\n     * The before callback will be called 0 to N times. The before callback will typically be called 0 times if no continuation was ever made for the promise.\\n     * The before callback may be called many times in the case where many continuations have been made from the same promise.\\n     * @since v17.1.0, v16.14.0\\n     */\\n    interface Before {\\n        (promise: Promise<unknown>): void;\\n    }\\n    /**\\n     * Called immediately after a promise continuation executes. This may be after a `then()`, `catch()`, or `finally()` handler or before an await after another await.\\n     * @since v17.1.0, v16.14.0\\n     */\\n    interface After {\\n        (promise: Promise<unknown>): void;\\n    }\\n    /**\\n     * Called when the promise receives a resolution or rejection value. This may occur synchronously in the case of {@link Promise.resolve()} or\\n     * {@link Promise.reject()}.\\n     * @since v17.1.0, v16.14.0\\n     */\\n    interface Settled {\\n        (promise: Promise<unknown>): void;\\n    }\\n    /**\\n     * Key events in the lifetime of a promise have been categorized into four areas: creation of a promise, before/after a continuation handler is called or\\n     * around an await, and when the promise resolves or rejects.\\n     *\\n     * Because promises are asynchronous resources whose lifecycle is tracked via the promise hooks mechanism, the `init()`, `before()`, `after()`, and\\n     * `settled()` callbacks must not be async functions as they create more promises which would produce an infinite loop.\\n     * @since v17.1.0, v16.14.0\\n     */\\n    interface HookCallbacks {\\n        init?: Init;\\n        before?: Before;\\n        after?: After;\\n        settled?: Settled;\\n    }\\n    interface PromiseHooks {\\n        /**\\n         * The `init` hook must be a plain function. Providing an async function will throw as it would produce an infinite microtask loop.\\n         * @since v17.1.0, v16.14.0\\n         * @param init The {@link Init | `init` callback} to call when a promise is created.\\n         * @return Call to stop the hook.\\n         */\\n        onInit: (init: Init) => Function;\\n        /**\\n         * The `settled` hook must be a plain function. Providing an async function will throw as it would produce an infinite microtask loop.\\n         * @since v17.1.0, v16.14.0\\n         * @param settled The {@link Settled | `settled` callback} to call when a promise is created.\\n         * @return Call to stop the hook.\\n         */\\n        onSettled: (settled: Settled) => Function;\\n        /**\\n         * The `before` hook must be a plain function. Providing an async function will throw as it would produce an infinite microtask loop.\\n         * @since v17.1.0, v16.14.0\\n         * @param before The {@link Before | `before` callback} to call before a promise continuation executes.\\n         * @return Call to stop the hook.\\n         */\\n        onBefore: (before: Before) => Function;\\n        /**\\n         * The `after` hook must be a plain function. Providing an async function will throw as it would produce an infinite microtask loop.\\n         * @since v17.1.0, v16.14.0\\n         * @param after The {@link After | `after` callback} to call after a promise continuation executes.\\n         * @return Call to stop the hook.\\n         */\\n        onAfter: (after: After) => Function;\\n        /**\\n         * Registers functions to be called for different lifetime events of each promise.\\n         * The callbacks `init()`/`before()`/`after()`/`settled()` are called for the respective events during a promise's lifetime.\\n         * All callbacks are optional. For example, if only promise creation needs to be tracked, then only the init callback needs to be passed.\\n         * The hook callbacks must be plain functions. Providing async functions will throw as it would produce an infinite microtask loop.\\n         * @since v17.1.0, v16.14.0\\n         * @param callbacks The {@link HookCallbacks | Hook Callbacks} to register\\n         * @return Used for disabling hooks\\n         */\\n        createHook: (callbacks: HookCallbacks) => Function;\\n    }\\n    /**\\n     * The `promiseHooks` interface can be used to track promise lifecycle events.\\n     * @since v17.1.0, v16.14.0\\n     */\\n    const promiseHooks: PromiseHooks;\\n}\\ndeclare module 'node:v8' {\\n    export * from 'v8';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/vm.d.ts\":\"/**\\n * The `vm` module enables compiling and running code within V8 Virtual\\n * Machine contexts.\\n *\\n * **The `vm` module is not a security**\\n * **mechanism. Do not use it to run untrusted code.**\\n *\\n * JavaScript code can be compiled and run immediately or\\n * compiled, saved, and run later.\\n *\\n * A common use case is to run the code in a different V8 Context. This means\\n * invoked code has a different global object than the invoking code.\\n *\\n * One can provide the context by `contextifying` an\\n * object. The invoked code treats any property in the context like a\\n * global variable. Any changes to global variables caused by the invoked\\n * code are reflected in the context object.\\n *\\n * ```js\\n * const vm = require('vm');\\n *\\n * const x = 1;\\n *\\n * const context = { x: 2 };\\n * vm.createContext(context); // Contextify the object.\\n *\\n * const code = 'x += 40; var y = 17;';\\n * // `x` and `y` are global variables in the context.\\n * // Initially, x has the value 2 because that is the value of context.x.\\n * vm.runInContext(code, context);\\n *\\n * console.log(context.x); // 42\\n * console.log(context.y); // 17\\n *\\n * console.log(x); // 1; y is not defined.\\n * ```\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/vm.js)\\n */\\ndeclare module 'vm' {\\n    interface Context extends NodeJS.Dict<any> {}\\n    interface BaseOptions {\\n        /**\\n         * Specifies the filename used in stack traces produced by this script.\\n         * Default: `''`.\\n         */\\n        filename?: string | undefined;\\n        /**\\n         * Specifies the line number offset that is displayed in stack traces produced by this script.\\n         * Default: `0`.\\n         */\\n        lineOffset?: number | undefined;\\n        /**\\n         * Specifies the column number offset that is displayed in stack traces produced by this script.\\n         * @default 0\\n         */\\n        columnOffset?: number | undefined;\\n    }\\n    interface ScriptOptions extends BaseOptions {\\n        /**\\n         * V8's code cache data for the supplied source.\\n         */\\n        cachedData?: Buffer | NodeJS.ArrayBufferView | undefined;\\n        /** @deprecated in favor of `script.createCachedData()` */\\n        produceCachedData?: boolean | undefined;\\n        /**\\n         * Called during evaluation of this module when `import()` is called.\\n         * If this option is not specified, calls to `import()` will reject with `ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING`.\\n         */\\n        importModuleDynamically?: ((specifier: string, script: Script, importAssertions: Object) => Module) | undefined;\\n    }\\n    interface RunningScriptOptions extends BaseOptions {\\n        /**\\n         * When `true`, if an `Error` occurs while compiling the `code`, the line of code causing the error is attached to the stack trace.\\n         * Default: `true`.\\n         */\\n        displayErrors?: boolean | undefined;\\n        /**\\n         * Specifies the number of milliseconds to execute code before terminating execution.\\n         * If execution is terminated, an `Error` will be thrown. This value must be a strictly positive integer.\\n         */\\n        timeout?: number | undefined;\\n        /**\\n         * If `true`, the execution will be terminated when `SIGINT` (Ctrl+C) is received.\\n         * Existing handlers for the event that have been attached via `process.on('SIGINT')` will be disabled during script execution, but will continue to work after that.\\n         * If execution is terminated, an `Error` will be thrown.\\n         * Default: `false`.\\n         */\\n        breakOnSigint?: boolean | undefined;\\n    }\\n    interface RunningScriptInNewContextOptions extends RunningScriptOptions {\\n        /**\\n         * Human-readable name of the newly created context.\\n         */\\n        contextName?: CreateContextOptions['name'];\\n        /**\\n         * Origin corresponding to the newly created context for display purposes. The origin should be formatted like a URL,\\n         * but with only the scheme, host, and port (if necessary), like the value of the `url.origin` property of a `URL` object.\\n         * Most notably, this string should omit the trailing slash, as that denotes a path.\\n         */\\n        contextOrigin?: CreateContextOptions['origin'];\\n        contextCodeGeneration?: CreateContextOptions['codeGeneration'];\\n        /**\\n         * If set to `afterEvaluate`, microtasks will be run immediately after the script has run.\\n         */\\n        microtaskMode?: CreateContextOptions['microtaskMode'];\\n    }\\n    interface RunningCodeOptions extends RunningScriptOptions {\\n        cachedData?: ScriptOptions['cachedData'];\\n        importModuleDynamically?: ScriptOptions['importModuleDynamically'];\\n    }\\n    interface RunningCodeInNewContextOptions extends RunningScriptInNewContextOptions {\\n        cachedData?: ScriptOptions['cachedData'];\\n        importModuleDynamically?: ScriptOptions['importModuleDynamically'];\\n    }\\n    interface CompileFunctionOptions extends BaseOptions {\\n        /**\\n         * Provides an optional data with V8's code cache data for the supplied source.\\n         */\\n        cachedData?: Buffer | undefined;\\n        /**\\n         * Specifies whether to produce new cache data.\\n         * Default: `false`,\\n         */\\n        produceCachedData?: boolean | undefined;\\n        /**\\n         * The sandbox/context in which the said function should be compiled in.\\n         */\\n        parsingContext?: Context | undefined;\\n        /**\\n         * An array containing a collection of context extensions (objects wrapping the current scope) to be applied while compiling\\n         */\\n        contextExtensions?: Object[] | undefined;\\n    }\\n    interface CreateContextOptions {\\n        /**\\n         * Human-readable name of the newly created context.\\n         * @default 'VM Context i' Where i is an ascending numerical index of the created context.\\n         */\\n        name?: string | undefined;\\n        /**\\n         * Corresponds to the newly created context for display purposes.\\n         * The origin should be formatted like a `URL`, but with only the scheme, host, and port (if necessary),\\n         * like the value of the `url.origin` property of a URL object.\\n         * Most notably, this string should omit the trailing slash, as that denotes a path.\\n         * @default ''\\n         */\\n        origin?: string | undefined;\\n        codeGeneration?:\\n            | {\\n                  /**\\n                   * If set to false any calls to eval or function constructors (Function, GeneratorFunction, etc)\\n                   * will throw an EvalError.\\n                   * @default true\\n                   */\\n                  strings?: boolean | undefined;\\n                  /**\\n                   * If set to false any attempt to compile a WebAssembly module will throw a WebAssembly.CompileError.\\n                   * @default true\\n                   */\\n                  wasm?: boolean | undefined;\\n              }\\n            | undefined;\\n        /**\\n         * If set to `afterEvaluate`, microtasks will be run immediately after the script has run.\\n         */\\n        microtaskMode?: 'afterEvaluate' | undefined;\\n    }\\n    type MeasureMemoryMode = 'summary' | 'detailed';\\n    interface MeasureMemoryOptions {\\n        /**\\n         * @default 'summary'\\n         */\\n        mode?: MeasureMemoryMode | undefined;\\n        /**\\n         * @default 'default'\\n         */\\n        execution?: 'default' | 'eager' | undefined;\\n    }\\n    interface MemoryMeasurement {\\n        total: {\\n            jsMemoryEstimate: number;\\n            jsMemoryRange: [number, number];\\n        };\\n    }\\n    /**\\n     * Instances of the `vm.Script` class contain precompiled scripts that can be\\n     * executed in specific contexts.\\n     * @since v0.3.1\\n     */\\n    class Script {\\n        constructor(code: string, options?: ScriptOptions | string);\\n        /**\\n         * Runs the compiled code contained by the `vm.Script` object within the given`contextifiedObject` and returns the result. Running code does not have access\\n         * to local scope.\\n         *\\n         * The following example compiles code that increments a global variable, sets\\n         * the value of another global variable, then execute the code multiple times.\\n         * The globals are contained in the `context` object.\\n         *\\n         * ```js\\n         * const vm = require('vm');\\n         *\\n         * const context = {\\n         *   animal: 'cat',\\n         *   count: 2\\n         * };\\n         *\\n         * const script = new vm.Script('count += 1; name = \\\"kitty\\\";');\\n         *\\n         * vm.createContext(context);\\n         * for (let i = 0; i < 10; ++i) {\\n         *   script.runInContext(context);\\n         * }\\n         *\\n         * console.log(context);\\n         * // Prints: { animal: 'cat', count: 12, name: 'kitty' }\\n         * ```\\n         *\\n         * Using the `timeout` or `breakOnSigint` options will result in new event loops\\n         * and corresponding threads being started, which have a non-zero performance\\n         * overhead.\\n         * @since v0.3.1\\n         * @param contextifiedObject A `contextified` object as returned by the `vm.createContext()` method.\\n         * @return the result of the very last statement executed in the script.\\n         */\\n        runInContext(contextifiedObject: Context, options?: RunningScriptOptions): any;\\n        /**\\n         * First contextifies the given `contextObject`, runs the compiled code contained\\n         * by the `vm.Script` object within the created context, and returns the result.\\n         * Running code does not have access to local scope.\\n         *\\n         * The following example compiles code that sets a global variable, then executes\\n         * the code multiple times in different contexts. The globals are set on and\\n         * contained within each individual `context`.\\n         *\\n         * ```js\\n         * const vm = require('vm');\\n         *\\n         * const script = new vm.Script('globalVar = \\\"set\\\"');\\n         *\\n         * const contexts = [{}, {}, {}];\\n         * contexts.forEach((context) => {\\n         *   script.runInNewContext(context);\\n         * });\\n         *\\n         * console.log(contexts);\\n         * // Prints: [{ globalVar: 'set' }, { globalVar: 'set' }, { globalVar: 'set' }]\\n         * ```\\n         * @since v0.3.1\\n         * @param contextObject An object that will be `contextified`. If `undefined`, a new object will be created.\\n         * @return the result of the very last statement executed in the script.\\n         */\\n        runInNewContext(contextObject?: Context, options?: RunningScriptInNewContextOptions): any;\\n        /**\\n         * Runs the compiled code contained by the `vm.Script` within the context of the\\n         * current `global` object. Running code does not have access to local scope, but _does_ have access to the current `global` object.\\n         *\\n         * The following example compiles code that increments a `global` variable then\\n         * executes that code multiple times:\\n         *\\n         * ```js\\n         * const vm = require('vm');\\n         *\\n         * global.globalVar = 0;\\n         *\\n         * const script = new vm.Script('globalVar += 1', { filename: 'myfile.vm' });\\n         *\\n         * for (let i = 0; i < 1000; ++i) {\\n         *   script.runInThisContext();\\n         * }\\n         *\\n         * console.log(globalVar);\\n         *\\n         * // 1000\\n         * ```\\n         * @since v0.3.1\\n         * @return the result of the very last statement executed in the script.\\n         */\\n        runInThisContext(options?: RunningScriptOptions): any;\\n        /**\\n         * Creates a code cache that can be used with the `Script` constructor's`cachedData` option. Returns a `Buffer`. This method may be called at any\\n         * time and any number of times.\\n         *\\n         * ```js\\n         * const script = new vm.Script(`\\n         * function add(a, b) {\\n         *   return a + b;\\n         * }\\n         *\\n         * const x = add(1, 2);\\n         * `);\\n         *\\n         * const cacheWithoutX = script.createCachedData();\\n         *\\n         * script.runInThisContext();\\n         *\\n         * const cacheWithX = script.createCachedData();\\n         * ```\\n         * @since v10.6.0\\n         */\\n        createCachedData(): Buffer;\\n        /** @deprecated in favor of `script.createCachedData()` */\\n        cachedDataProduced?: boolean | undefined;\\n        cachedDataRejected?: boolean | undefined;\\n        cachedData?: Buffer | undefined;\\n        /**\\n         * When the script is compiled from a source that contains a source map magic comment, this property will be set to the URL of the source map.\\n         */\\n        sourceMapURL?: string | undefined;\\n    }\\n    /**\\n     * If given a `contextObject`, the `vm.createContext()` method will `prepare\\n     * that object` so that it can be used in calls to {@link runInContext} or `script.runInContext()`. Inside such scripts,\\n     * the `contextObject` will be the global object, retaining all of its existing\\n     * properties but also having the built-in objects and functions any standard [global object](https://es5.github.io/#x15.1) has. Outside of scripts run by the vm module, global variables\\n     * will remain unchanged.\\n     *\\n     * ```js\\n     * const vm = require('vm');\\n     *\\n     * global.globalVar = 3;\\n     *\\n     * const context = { globalVar: 1 };\\n     * vm.createContext(context);\\n     *\\n     * vm.runInContext('globalVar *= 2;', context);\\n     *\\n     * console.log(context);\\n     * // Prints: { globalVar: 2 }\\n     *\\n     * console.log(global.globalVar);\\n     * // Prints: 3\\n     * ```\\n     *\\n     * If `contextObject` is omitted (or passed explicitly as `undefined`), a new,\\n     * empty `contextified` object will be returned.\\n     *\\n     * The `vm.createContext()` method is primarily useful for creating a single\\n     * context that can be used to run multiple scripts. For instance, if emulating a\\n     * web browser, the method can be used to create a single context representing a\\n     * window's global object, then run all `<script>` tags together within that\\n     * context.\\n     *\\n     * The provided `name` and `origin` of the context are made visible through the\\n     * Inspector API.\\n     * @since v0.3.1\\n     * @return contextified object.\\n     */\\n    function createContext(sandbox?: Context, options?: CreateContextOptions): Context;\\n    /**\\n     * Returns `true` if the given `object` object has been `contextified` using {@link createContext}.\\n     * @since v0.11.7\\n     */\\n    function isContext(sandbox: Context): boolean;\\n    /**\\n     * The `vm.runInContext()` method compiles `code`, runs it within the context of\\n     * the `contextifiedObject`, then returns the result. Running code does not have\\n     * access to the local scope. The `contextifiedObject` object _must_ have been\\n     * previously `contextified` using the {@link createContext} method.\\n     *\\n     * If `options` is a string, then it specifies the filename.\\n     *\\n     * The following example compiles and executes different scripts using a single `contextified` object:\\n     *\\n     * ```js\\n     * const vm = require('vm');\\n     *\\n     * const contextObject = { globalVar: 1 };\\n     * vm.createContext(contextObject);\\n     *\\n     * for (let i = 0; i < 10; ++i) {\\n     *   vm.runInContext('globalVar *= 2;', contextObject);\\n     * }\\n     * console.log(contextObject);\\n     * // Prints: { globalVar: 1024 }\\n     * ```\\n     * @since v0.3.1\\n     * @param code The JavaScript code to compile and run.\\n     * @param contextifiedObject The `contextified` object that will be used as the `global` when the `code` is compiled and run.\\n     * @return the result of the very last statement executed in the script.\\n     */\\n    function runInContext(code: string, contextifiedObject: Context, options?: RunningCodeOptions | string): any;\\n    /**\\n     * The `vm.runInNewContext()` first contextifies the given `contextObject` (or\\n     * creates a new `contextObject` if passed as `undefined`), compiles the `code`,\\n     * runs it within the created context, then returns the result. Running code\\n     * does not have access to the local scope.\\n     *\\n     * If `options` is a string, then it specifies the filename.\\n     *\\n     * The following example compiles and executes code that increments a global\\n     * variable and sets a new one. These globals are contained in the `contextObject`.\\n     *\\n     * ```js\\n     * const vm = require('vm');\\n     *\\n     * const contextObject = {\\n     *   animal: 'cat',\\n     *   count: 2\\n     * };\\n     *\\n     * vm.runInNewContext('count += 1; name = \\\"kitty\\\"', contextObject);\\n     * console.log(contextObject);\\n     * // Prints: { animal: 'cat', count: 3, name: 'kitty' }\\n     * ```\\n     * @since v0.3.1\\n     * @param code The JavaScript code to compile and run.\\n     * @param contextObject An object that will be `contextified`. If `undefined`, a new object will be created.\\n     * @return the result of the very last statement executed in the script.\\n     */\\n    function runInNewContext(code: string, contextObject?: Context, options?: RunningCodeInNewContextOptions | string): any;\\n    /**\\n     * `vm.runInThisContext()` compiles `code`, runs it within the context of the\\n     * current `global` and returns the result. Running code does not have access to\\n     * local scope, but does have access to the current `global` object.\\n     *\\n     * If `options` is a string, then it specifies the filename.\\n     *\\n     * The following example illustrates using both `vm.runInThisContext()` and\\n     * the JavaScript [`eval()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval) function to run the same code:\\n     *\\n     * ```js\\n     * const vm = require('vm');\\n     * let localVar = 'initial value';\\n     *\\n     * const vmResult = vm.runInThisContext('localVar = \\\"vm\\\";');\\n     * console.log(`vmResult: '${vmResult}', localVar: '${localVar}'`);\\n     * // Prints: vmResult: 'vm', localVar: 'initial value'\\n     *\\n     * const evalResult = eval('localVar = \\\"eval\\\";');\\n     * console.log(`evalResult: '${evalResult}', localVar: '${localVar}'`);\\n     * // Prints: evalResult: 'eval', localVar: 'eval'\\n     * ```\\n     *\\n     * Because `vm.runInThisContext()` does not have access to the local scope,`localVar` is unchanged. In contrast,\\n     * [`eval()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval) _does_ have access to the\\n     * local scope, so the value `localVar` is changed. In this way`vm.runInThisContext()` is much like an [indirect `eval()` call](https://es5.github.io/#x10.4.2), e.g.`(0,eval)('code')`.\\n     *\\n     * ## Example: Running an HTTP server within a VM\\n     *\\n     * When using either `script.runInThisContext()` or {@link runInThisContext}, the code is executed within the current V8 global\\n     * context. The code passed to this VM context will have its own isolated scope.\\n     *\\n     * In order to run a simple web server using the `http` module the code passed to\\n     * the context must either call `require('http')` on its own, or have a reference\\n     * to the `http` module passed to it. For instance:\\n     *\\n     * ```js\\n     * 'use strict';\\n     * const vm = require('vm');\\n     *\\n     * const code = `\\n     * ((require) => {\\n     *   const http = require('http');\\n     *\\n     *   http.createServer((request, response) => {\\n     *     response.writeHead(200, { 'Content-Type': 'text/plain' });\\n     *     response.end('Hello World\\\\\\\\n');\\n     *   }).listen(8124);\\n     *\\n     *   console.log('Server running at http://127.0.0.1:8124/');\\n     * })`;\\n     *\\n     * vm.runInThisContext(code)(require);\\n     * ```\\n     *\\n     * The `require()` in the above case shares the state with the context it is\\n     * passed from. This may introduce risks when untrusted code is executed, e.g.\\n     * altering objects in the context in unwanted ways.\\n     * @since v0.3.1\\n     * @param code The JavaScript code to compile and run.\\n     * @return the result of the very last statement executed in the script.\\n     */\\n    function runInThisContext(code: string, options?: RunningCodeOptions | string): any;\\n    /**\\n     * Compiles the given code into the provided context (if no context is\\n     * supplied, the current context is used), and returns it wrapped inside a\\n     * function with the given `params`.\\n     * @since v10.10.0\\n     * @param code The body of the function to compile.\\n     * @param params An array of strings containing all parameters for the function.\\n     */\\n    function compileFunction(code: string, params?: ReadonlyArray<string>, options?: CompileFunctionOptions): Function & {\\n        cachedData?: Script['cachedData'] | undefined;\\n        cachedDataProduced?: Script['cachedDataProduced'] | undefined;\\n        cachedDataRejected?: Script['cachedDataRejected'] | undefined;\\n    };\\n    /**\\n     * Measure the memory known to V8 and used by all contexts known to the\\n     * current V8 isolate, or the main context.\\n     *\\n     * The format of the object that the returned Promise may resolve with is\\n     * specific to the V8 engine and may change from one version of V8 to the next.\\n     *\\n     * The returned result is different from the statistics returned by`v8.getHeapSpaceStatistics()` in that `vm.measureMemory()` measure the\\n     * memory reachable by each V8 specific contexts in the current instance of\\n     * the V8 engine, while the result of `v8.getHeapSpaceStatistics()` measure\\n     * the memory occupied by each heap space in the current V8 instance.\\n     *\\n     * ```js\\n     * const vm = require('vm');\\n     * // Measure the memory used by the main context.\\n     * vm.measureMemory({ mode: 'summary' })\\n     *   // This is the same as vm.measureMemory()\\n     *   .then((result) => {\\n     *     // The current format is:\\n     *     // {\\n     *     //   total: {\\n     *     //      jsMemoryEstimate: 2418479, jsMemoryRange: [ 2418479, 2745799 ]\\n     *     //    }\\n     *     // }\\n     *     console.log(result);\\n     *   });\\n     *\\n     * const context = vm.createContext({ a: 1 });\\n     * vm.measureMemory({ mode: 'detailed', execution: 'eager' })\\n     *   .then((result) => {\\n     *     // Reference the context here so that it won't be GC'ed\\n     *     // until the measurement is complete.\\n     *     console.log(context.a);\\n     *     // {\\n     *     //   total: {\\n     *     //     jsMemoryEstimate: 2574732,\\n     *     //     jsMemoryRange: [ 2574732, 2904372 ]\\n     *     //   },\\n     *     //   current: {\\n     *     //     jsMemoryEstimate: 2438996,\\n     *     //     jsMemoryRange: [ 2438996, 2768636 ]\\n     *     //   },\\n     *     //   other: [\\n     *     //     {\\n     *     //       jsMemoryEstimate: 135736,\\n     *     //       jsMemoryRange: [ 135736, 465376 ]\\n     *     //     }\\n     *     //   ]\\n     *     // }\\n     *     console.log(result);\\n     *   });\\n     * ```\\n     * @since v13.10.0\\n     * @experimental\\n     */\\n    function measureMemory(options?: MeasureMemoryOptions): Promise<MemoryMeasurement>;\\n\\n    interface ModuleEvaluateOptions {\\n        timeout?: RunningScriptOptions['timeout'] | undefined;\\n        breakOnSigint?: RunningScriptOptions['breakOnSigint'] | undefined;\\n    }\\n    type ModuleLinker = (specifier: string, referencingModule: Module, extra: { assert: Object }) => Module | Promise<Module>;\\n    type ModuleStatus = 'unlinked' | 'linking' | 'linked' | 'evaluating' | 'evaluated' | 'errored';\\n    class Module {\\n        /**\\n         * The specifiers of all dependencies of this module.\\n         */\\n        dependencySpecifiers: readonly string[];\\n        /**\\n         * If the `module.status` is `'errored'`, this property contains the exception thrown by the module during evaluation.\\n         * If the status is anything else, accessing this property will result in a thrown exception.\\n         */\\n        error: any;\\n        /**\\n         * The identifier of the current module, as set in the constructor.\\n         */\\n        identifier: string;\\n        context: Context;\\n        /**\\n         * The namespace object of the module. This is only available after linking (`module.link()`) has completed.\\n         */\\n        namespace: Object;\\n        /**\\n         * The current status of the module.\\n         */\\n        status: ModuleStatus;\\n        /**\\n         * Evaluate the module.\\n         *\\n         * This must be called after the module has been linked; otherwise it will reject\\n         * It could be called also when the module has already been evaluated, in which case it will either do nothing\\n         * if the initial evaluation ended in success (`module.status` is `'evaluated'`) or it will re-throw the exception\\n         * that the initial evaluation resulted in (`module.status` is `'errored'`).\\n         *\\n         * This method cannot be called while the module is being evaluated (`module.status` is `'evaluating'`).\\n         */\\n        evaluate(options?: ModuleEvaluateOptions): Promise<void>;\\n        /**\\n         * Link module dependencies. This method must be called before evaluation, and can only be called once per module.\\n         */\\n        link(linker: ModuleLinker): Promise<void>;\\n    }\\n\\n    interface SourceTextModuleOptions {\\n        /**\\n         * String used in stack traces.\\n         * @default 'vm:module(i)' where i is a context-specific ascending index.\\n         */\\n        identifier?: string | undefined;\\n        cachedData?: ScriptOptions['cachedData'] | undefined;\\n        context?: Context | undefined;\\n        lineOffset?: BaseOptions['lineOffset'] | undefined;\\n        columnOffset?: BaseOptions['columnOffset'] | undefined;\\n        /**\\n         * Called during evaluation of this module to initialize the `import.meta`.\\n         */\\n        initializeImportMeta?: ((meta: ImportMeta, module: SourceTextModule) => void) | undefined;\\n        importModuleDynamically?: ScriptOptions['importModuleDynamically'] | undefined;\\n    }\\n    class SourceTextModule extends Module {\\n        /**\\n         * Creates a new `SourceTextModule` instance.\\n         * @param code JavaScript Module code to parse\\n         */\\n        constructor(code: string, options?: SourceTextModuleOptions);\\n    }\\n\\n    interface SyntheticModuleOptions {\\n        /**\\n         * String used in stack traces.\\n         * @default 'vm:module(i)' where i is a context-specific ascending index.\\n         */\\n        identifier?: string | undefined;\\n        /**\\n         * The contextified object as returned by the `vm.createContext()` method, to compile and evaluate this module in.\\n         */\\n        context?: Context | undefined;\\n    }\\n    class SyntheticModule extends Module {\\n        /**\\n         * Creates a new `SyntheticModule` instance.\\n         * @param exportNames Array of names that will be exported from the module.\\n         * @param evaluateCallback Called when the module is evaluated.\\n         */\\n        constructor(exportNames: string[], evaluateCallback: (this: SyntheticModule) => void, options?: SyntheticModuleOptions);\\n        /**\\n         * This method is used after the module is linked to set the values of exports.\\n         * If it is called before the module is linked, an `ERR_VM_MODULE_STATUS` error will be thrown.\\n         * @param name\\n         * @param value\\n         */\\n        setExport(name: string, value: any): void;\\n    }\\n}\\ndeclare module 'node:vm' {\\n    export * from 'vm';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/wasi.d.ts\":\"/**\\n * The WASI API provides an implementation of the [WebAssembly System Interface](https://wasi.dev/) specification. WASI gives sandboxed WebAssembly applications access to the\\n * underlying operating system via a collection of POSIX-like functions.\\n *\\n * ```js\\n * import { readFile } from 'fs/promises';\\n * import { WASI } from 'wasi';\\n * import { argv, env } from 'process';\\n *\\n * const wasi = new WASI({\\n *   args: argv,\\n *   env,\\n *   preopens: {\\n *     '/sandbox': '/some/real/path/that/wasm/can/access'\\n *   }\\n * });\\n *\\n * // Some WASI binaries require:\\n * //   const importObject = { wasi_unstable: wasi.wasiImport };\\n * const importObject = { wasi_snapshot_preview1: wasi.wasiImport };\\n *\\n * const wasm = await WebAssembly.compile(\\n *   await readFile(new URL('./demo.wasm', import.meta.url))\\n * );\\n * const instance = await WebAssembly.instantiate(wasm, importObject);\\n *\\n * wasi.start(instance);\\n * ```\\n *\\n * To run the above example, create a new WebAssembly text format file named`demo.wat`:\\n *\\n * ```text\\n * (module\\n *     ;; Import the required fd_write WASI function which will write the given io vectors to stdout\\n *     ;; The function signature for fd_write is:\\n *     ;; (File Descriptor, *iovs, iovs_len, nwritten) -> Returns number of bytes written\\n *     (import \\\"wasi_snapshot_preview1\\\" \\\"fd_write\\\" (func $fd_write (param i32 i32 i32 i32) (result i32)))\\n *\\n *     (memory 1)\\n *     (export \\\"memory\\\" (memory 0))\\n *\\n *     ;; Write 'hello world\\\\n' to memory at an offset of 8 bytes\\n *     ;; Note the trailing newline which is required for the text to appear\\n *     (data (i32.const 8) \\\"hello world\\\\n\\\")\\n *\\n *     (func $main (export \\\"_start\\\")\\n *         ;; Creating a new io vector within linear memory\\n *         (i32.store (i32.const 0) (i32.const 8))  ;; iov.iov_base - This is a pointer to the start of the 'hello world\\\\n' string\\n *         (i32.store (i32.const 4) (i32.const 12))  ;; iov.iov_len - The length of the 'hello world\\\\n' string\\n *\\n *         (call $fd_write\\n *             (i32.const 1) ;; file_descriptor - 1 for stdout\\n *             (i32.const 0) ;; *iovs - The pointer to the iov array, which is stored at memory location 0\\n *             (i32.const 1) ;; iovs_len - We're printing 1 string stored in an iov - so one.\\n *             (i32.const 20) ;; nwritten - A place in memory to store the number of bytes written\\n *         )\\n *         drop ;; Discard the number of bytes written from the top of the stack\\n *     )\\n * )\\n * ```\\n *\\n * Use [wabt](https://github.com/WebAssembly/wabt) to compile `.wat` to `.wasm`\\n *\\n * ```console\\n * $ wat2wasm demo.wat\\n * ```\\n *\\n * The `--experimental-wasi-unstable-preview1` CLI argument is needed for this\\n * example to run.\\n * @experimental\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/wasi.js)\\n */\\ndeclare module 'wasi' {\\n    interface WASIOptions {\\n        /**\\n         * An array of strings that the WebAssembly application will\\n         * see as command line arguments. The first argument is the virtual path to the\\n         * WASI command itself.\\n         */\\n        args?: string[] | undefined;\\n        /**\\n         * An object similar to `process.env` that the WebAssembly\\n         * application will see as its environment.\\n         */\\n        env?: object | undefined;\\n        /**\\n         * This object represents the WebAssembly application's\\n         * sandbox directory structure. The string keys of `preopens` are treated as\\n         * directories within the sandbox. The corresponding values in `preopens` are\\n         * the real paths to those directories on the host machine.\\n         */\\n        preopens?: NodeJS.Dict<string> | undefined;\\n        /**\\n         * By default, WASI applications terminate the Node.js\\n         * process via the `__wasi_proc_exit()` function. Setting this option to `true`\\n         * causes `wasi.start()` to return the exit code rather than terminate the\\n         * process.\\n         * @default false\\n         */\\n        returnOnExit?: boolean | undefined;\\n        /**\\n         * The file descriptor used as standard input in the WebAssembly application.\\n         * @default 0\\n         */\\n        stdin?: number | undefined;\\n        /**\\n         * The file descriptor used as standard output in the WebAssembly application.\\n         * @default 1\\n         */\\n        stdout?: number | undefined;\\n        /**\\n         * The file descriptor used as standard error in the WebAssembly application.\\n         * @default 2\\n         */\\n        stderr?: number | undefined;\\n    }\\n    /**\\n     * The `WASI` class provides the WASI system call API and additional convenience\\n     * methods for working with WASI-based applications. Each `WASI` instance\\n     * represents a distinct sandbox environment. For security purposes, each `WASI`instance must have its command-line arguments, environment variables, and\\n     * sandbox directory structure configured explicitly.\\n     * @since v13.3.0, v12.16.0\\n     */\\n    class WASI {\\n        constructor(options?: WASIOptions);\\n        /**\\n         * Attempt to begin execution of `instance` as a WASI command by invoking its`_start()` export. If `instance` does not contain a `_start()` export, or if`instance` contains an `_initialize()`\\n         * export, then an exception is thrown.\\n         *\\n         * `start()` requires that `instance` exports a [`WebAssembly.Memory`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory) named`memory`. If\\n         * `instance` does not have a `memory` export an exception is thrown.\\n         *\\n         * If `start()` is called more than once, an exception is thrown.\\n         * @since v13.3.0, v12.16.0\\n         */\\n        start(instance: object): void; // TODO: avoid DOM dependency until WASM moved to own lib.\\n        /**\\n         * Attempt to initialize `instance` as a WASI reactor by invoking its`_initialize()` export, if it is present. If `instance` contains a `_start()`export, then an exception is thrown.\\n         *\\n         * `initialize()` requires that `instance` exports a [`WebAssembly.Memory`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory) named`memory`.\\n         * If `instance` does not have a `memory` export an exception is thrown.\\n         *\\n         * If `initialize()` is called more than once, an exception is thrown.\\n         * @since v14.6.0, v12.19.0\\n         */\\n        initialize(instance: object): void; // TODO: avoid DOM dependency until WASM moved to own lib.\\n        /**\\n         * `wasiImport` is an object that implements the WASI system call API. This object\\n         * should be passed as the `wasi_snapshot_preview1` import during the instantiation\\n         * of a [`WebAssembly.Instance`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance).\\n         * @since v13.3.0, v12.16.0\\n         */\\n        readonly wasiImport: NodeJS.Dict<any>; // TODO: Narrow to DOM types\\n    }\\n}\\ndeclare module 'node:wasi' {\\n    export * from 'wasi';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/worker_threads.d.ts\":\"/**\\n * The `worker_threads` module enables the use of threads that execute JavaScript\\n * in parallel. To access it:\\n *\\n * ```js\\n * const worker = require('worker_threads');\\n * ```\\n *\\n * Workers (threads) are useful for performing CPU-intensive JavaScript operations.\\n * They do not help much with I/O-intensive work. The Node.js built-in\\n * asynchronous I/O operations are more efficient than Workers can be.\\n *\\n * Unlike `child_process` or `cluster`, `worker_threads` can share memory. They do\\n * so by transferring `ArrayBuffer` instances or sharing `SharedArrayBuffer`instances.\\n *\\n * ```js\\n * const {\\n *   Worker, isMainThread, parentPort, workerData\\n * } = require('worker_threads');\\n *\\n * if (isMainThread) {\\n *   module.exports = function parseJSAsync(script) {\\n *     return new Promise((resolve, reject) => {\\n *       const worker = new Worker(__filename, {\\n *         workerData: script\\n *       });\\n *       worker.on('message', resolve);\\n *       worker.on('error', reject);\\n *       worker.on('exit', (code) => {\\n *         if (code !== 0)\\n *           reject(new Error(`Worker stopped with exit code ${code}`));\\n *       });\\n *     });\\n *   };\\n * } else {\\n *   const { parse } = require('some-js-parsing-library');\\n *   const script = workerData;\\n *   parentPort.postMessage(parse(script));\\n * }\\n * ```\\n *\\n * The above example spawns a Worker thread for each `parseJSAsync()` call. In\\n * practice, use a pool of Workers for these kinds of tasks. Otherwise, the\\n * overhead of creating Workers would likely exceed their benefit.\\n *\\n * When implementing a worker pool, use the `AsyncResource` API to inform\\n * diagnostic tools (e.g. to provide asynchronous stack traces) about the\\n * correlation between tasks and their outcomes. See `\\\"Using AsyncResource for a Worker thread pool\\\"` in the `async_hooks` documentation for an example implementation.\\n *\\n * Worker threads inherit non-process-specific options by default. Refer to `Worker constructor options` to know how to customize worker thread options,\\n * specifically `argv` and `execArgv` options.\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/worker_threads.js)\\n */\\ndeclare module 'worker_threads' {\\n    import { Blob } from 'node:buffer';\\n    import { Context } from 'node:vm';\\n    import { EventEmitter } from 'node:events';\\n    import { EventLoopUtilityFunction } from 'node:perf_hooks';\\n    import { FileHandle } from 'node:fs/promises';\\n    import { Readable, Writable } from 'node:stream';\\n    import { URL } from 'node:url';\\n    import { X509Certificate } from 'node:crypto';\\n    const isMainThread: boolean;\\n    const parentPort: null | MessagePort;\\n    const resourceLimits: ResourceLimits;\\n    const SHARE_ENV: unique symbol;\\n    const threadId: number;\\n    const workerData: any;\\n    /**\\n     * Instances of the `worker.MessageChannel` class represent an asynchronous,\\n     * two-way communications channel.\\n     * The `MessageChannel` has no methods of its own. `new MessageChannel()`yields an object with `port1` and `port2` properties, which refer to linked `MessagePort` instances.\\n     *\\n     * ```js\\n     * const { MessageChannel } = require('worker_threads');\\n     *\\n     * const { port1, port2 } = new MessageChannel();\\n     * port1.on('message', (message) => console.log('received', message));\\n     * port2.postMessage({ foo: 'bar' });\\n     * // Prints: received { foo: 'bar' } from the `port1.on('message')` listener\\n     * ```\\n     * @since v10.5.0\\n     */\\n    class MessageChannel {\\n        readonly port1: MessagePort;\\n        readonly port2: MessagePort;\\n    }\\n    interface WorkerPerformance {\\n        eventLoopUtilization: EventLoopUtilityFunction;\\n    }\\n    type TransferListItem = ArrayBuffer | MessagePort | FileHandle | X509Certificate | Blob;\\n    /**\\n     * Instances of the `worker.MessagePort` class represent one end of an\\n     * asynchronous, two-way communications channel. It can be used to transfer\\n     * structured data, memory regions and other `MessagePort`s between different `Worker` s.\\n     *\\n     * This implementation matches [browser `MessagePort`](https://developer.mozilla.org/en-US/docs/Web/API/MessagePort) s.\\n     * @since v10.5.0\\n     */\\n    class MessagePort extends EventEmitter {\\n        /**\\n         * Disables further sending of messages on either side of the connection.\\n         * This method can be called when no further communication will happen over this`MessagePort`.\\n         *\\n         * The `'close' event` is emitted on both `MessagePort` instances that\\n         * are part of the channel.\\n         * @since v10.5.0\\n         */\\n        close(): void;\\n        /**\\n         * Sends a JavaScript value to the receiving side of this channel.`value` is transferred in a way which is compatible with\\n         * the [HTML structured clone algorithm](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm).\\n         *\\n         * In particular, the significant differences to `JSON` are:\\n         *\\n         * * `value` may contain circular references.\\n         * * `value` may contain instances of builtin JS types such as `RegExp`s,`BigInt`s, `Map`s, `Set`s, etc.\\n         * * `value` may contain typed arrays, both using `ArrayBuffer`s\\n         * and `SharedArrayBuffer`s.\\n         * * `value` may contain [`WebAssembly.Module`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module) instances.\\n         * * `value` may not contain native (C++-backed) objects other than:\\n         *\\n         * ```js\\n         * const { MessageChannel } = require('worker_threads');\\n         * const { port1, port2 } = new MessageChannel();\\n         *\\n         * port1.on('message', (message) => console.log(message));\\n         *\\n         * const circularData = {};\\n         * circularData.foo = circularData;\\n         * // Prints: { foo: [Circular] }\\n         * port2.postMessage(circularData);\\n         * ```\\n         *\\n         * `transferList` may be a list of [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer), `MessagePort` and `FileHandle` objects.\\n         * After transferring, they are not usable on the sending side of the channel\\n         * anymore (even if they are not contained in `value`). Unlike with `child processes`, transferring handles such as network sockets is currently\\n         * not supported.\\n         *\\n         * If `value` contains [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) instances, those are accessible\\n         * from either thread. They cannot be listed in `transferList`.\\n         *\\n         * `value` may still contain `ArrayBuffer` instances that are not in`transferList`; in that case, the underlying memory is copied rather than moved.\\n         *\\n         * ```js\\n         * const { MessageChannel } = require('worker_threads');\\n         * const { port1, port2 } = new MessageChannel();\\n         *\\n         * port1.on('message', (message) => console.log(message));\\n         *\\n         * const uint8Array = new Uint8Array([ 1, 2, 3, 4 ]);\\n         * // This posts a copy of `uint8Array`:\\n         * port2.postMessage(uint8Array);\\n         * // This does not copy data, but renders `uint8Array` unusable:\\n         * port2.postMessage(uint8Array, [ uint8Array.buffer ]);\\n         *\\n         * // The memory for the `sharedUint8Array` is accessible from both the\\n         * // original and the copy received by `.on('message')`:\\n         * const sharedUint8Array = new Uint8Array(new SharedArrayBuffer(4));\\n         * port2.postMessage(sharedUint8Array);\\n         *\\n         * // This transfers a freshly created message port to the receiver.\\n         * // This can be used, for example, to create communication channels between\\n         * // multiple `Worker` threads that are children of the same parent thread.\\n         * const otherChannel = new MessageChannel();\\n         * port2.postMessage({ port: otherChannel.port1 }, [ otherChannel.port1 ]);\\n         * ```\\n         *\\n         * The message object is cloned immediately, and can be modified after\\n         * posting without having side effects.\\n         *\\n         * For more information on the serialization and deserialization mechanisms\\n         * behind this API, see the `serialization API of the v8 module`.\\n         * @since v10.5.0\\n         */\\n        postMessage(value: any, transferList?: ReadonlyArray<TransferListItem>): void;\\n        /**\\n         * Opposite of `unref()`. Calling `ref()` on a previously `unref()`ed port does _not_ let the program exit if it's the only active handle left (the default\\n         * behavior). If the port is `ref()`ed, calling `ref()` again has no effect.\\n         *\\n         * If listeners are attached or removed using `.on('message')`, the port\\n         * is `ref()`ed and `unref()`ed automatically depending on whether\\n         * listeners for the event exist.\\n         * @since v10.5.0\\n         */\\n        ref(): void;\\n        /**\\n         * Calling `unref()` on a port allows the thread to exit if this is the only\\n         * active handle in the event system. If the port is already `unref()`ed calling`unref()` again has no effect.\\n         *\\n         * If listeners are attached or removed using `.on('message')`, the port is`ref()`ed and `unref()`ed automatically depending on whether\\n         * listeners for the event exist.\\n         * @since v10.5.0\\n         */\\n        unref(): void;\\n        /**\\n         * Starts receiving messages on this `MessagePort`. When using this port\\n         * as an event emitter, this is called automatically once `'message'`listeners are attached.\\n         *\\n         * This method exists for parity with the Web `MessagePort` API. In Node.js,\\n         * it is only useful for ignoring messages when no event listener is present.\\n         * Node.js also diverges in its handling of `.onmessage`. Setting it\\n         * automatically calls `.start()`, but unsetting it lets messages queue up\\n         * until a new handler is set or the port is discarded.\\n         * @since v10.5.0\\n         */\\n        start(): void;\\n        addListener(event: 'close', listener: () => void): this;\\n        addListener(event: 'message', listener: (value: any) => void): this;\\n        addListener(event: 'messageerror', listener: (error: Error) => void): this;\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        emit(event: 'close'): boolean;\\n        emit(event: 'message', value: any): boolean;\\n        emit(event: 'messageerror', error: Error): boolean;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        on(event: 'close', listener: () => void): this;\\n        on(event: 'message', listener: (value: any) => void): this;\\n        on(event: 'messageerror', listener: (error: Error) => void): this;\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\n        once(event: 'close', listener: () => void): this;\\n        once(event: 'message', listener: (value: any) => void): this;\\n        once(event: 'messageerror', listener: (error: Error) => void): this;\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'close', listener: () => void): this;\\n        prependListener(event: 'message', listener: (value: any) => void): this;\\n        prependListener(event: 'messageerror', listener: (error: Error) => void): this;\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'close', listener: () => void): this;\\n        prependOnceListener(event: 'message', listener: (value: any) => void): this;\\n        prependOnceListener(event: 'messageerror', listener: (error: Error) => void): this;\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        removeListener(event: 'close', listener: () => void): this;\\n        removeListener(event: 'message', listener: (value: any) => void): this;\\n        removeListener(event: 'messageerror', listener: (error: Error) => void): this;\\n        removeListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        off(event: 'close', listener: () => void): this;\\n        off(event: 'message', listener: (value: any) => void): this;\\n        off(event: 'messageerror', listener: (error: Error) => void): this;\\n        off(event: string | symbol, listener: (...args: any[]) => void): this;\\n    }\\n    interface WorkerOptions {\\n        /**\\n         * List of arguments which would be stringified and appended to\\n         * `process.argv` in the worker. This is mostly similar to the `workerData`\\n         * but the values will be available on the global `process.argv` as if they\\n         * were passed as CLI options to the script.\\n         */\\n        argv?: any[] | undefined;\\n        env?: NodeJS.Dict<string> | typeof SHARE_ENV | undefined;\\n        eval?: boolean | undefined;\\n        workerData?: any;\\n        stdin?: boolean | undefined;\\n        stdout?: boolean | undefined;\\n        stderr?: boolean | undefined;\\n        execArgv?: string[] | undefined;\\n        resourceLimits?: ResourceLimits | undefined;\\n        /**\\n         * Additional data to send in the first worker message.\\n         */\\n        transferList?: TransferListItem[] | undefined;\\n        /**\\n         * @default true\\n         */\\n        trackUnmanagedFds?: boolean | undefined;\\n        /**\\n         * An optional `name` to be appended to the worker title\\n         * for debuggin/identification purposes, making the final title as\\n         * `[worker ${id}] ${name}`.\\n         */\\n        name?: string | undefined;\\n    }\\n    interface ResourceLimits {\\n        /**\\n         * The maximum size of a heap space for recently created objects.\\n         */\\n        maxYoungGenerationSizeMb?: number | undefined;\\n        /**\\n         * The maximum size of the main heap in MB.\\n         */\\n        maxOldGenerationSizeMb?: number | undefined;\\n        /**\\n         * The size of a pre-allocated memory range used for generated code.\\n         */\\n        codeRangeSizeMb?: number | undefined;\\n        /**\\n         * The default maximum stack size for the thread. Small values may lead to unusable Worker instances.\\n         * @default 4\\n         */\\n        stackSizeMb?: number | undefined;\\n    }\\n    /**\\n     * The `Worker` class represents an independent JavaScript execution thread.\\n     * Most Node.js APIs are available inside of it.\\n     *\\n     * Notable differences inside a Worker environment are:\\n     *\\n     * * The `process.stdin`, `process.stdout` and `process.stderr` may be redirected by the parent thread.\\n     * * The `require('worker_threads').isMainThread` property is set to `false`.\\n     * * The `require('worker_threads').parentPort` message port is available.\\n     * * `process.exit()` does not stop the whole program, just the single thread,\\n     * and `process.abort()` is not available.\\n     * * `process.chdir()` and `process` methods that set group or user ids\\n     * are not available.\\n     * * `process.env` is a copy of the parent thread's environment variables,\\n     * unless otherwise specified. Changes to one copy are not visible in other\\n     * threads, and are not visible to native add-ons (unless `worker.SHARE_ENV` is passed as the `env` option to the `Worker` constructor).\\n     * * `process.title` cannot be modified.\\n     * * Signals are not delivered through `process.on('...')`.\\n     * * Execution may stop at any point as a result of `worker.terminate()` being invoked.\\n     * * IPC channels from parent processes are not accessible.\\n     * * The `trace_events` module is not supported.\\n     * * Native add-ons can only be loaded from multiple threads if they fulfill `certain conditions`.\\n     *\\n     * Creating `Worker` instances inside of other `Worker`s is possible.\\n     *\\n     * Like [Web Workers](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API) and the `cluster module`, two-way communication can be\\n     * achieved through inter-thread message passing. Internally, a `Worker` has a\\n     * built-in pair of `MessagePort` s that are already associated with each other\\n     * when the `Worker` is created. While the `MessagePort` object on the parent side\\n     * is not directly exposed, its functionalities are exposed through `worker.postMessage()` and the `worker.on('message')` event\\n     * on the `Worker` object for the parent thread.\\n     *\\n     * To create custom messaging channels (which is encouraged over using the default\\n     * global channel because it facilitates separation of concerns), users can create\\n     * a `MessageChannel` object on either thread and pass one of the`MessagePort`s on that `MessageChannel` to the other thread through a\\n     * pre-existing channel, such as the global one.\\n     *\\n     * See `port.postMessage()` for more information on how messages are passed,\\n     * and what kind of JavaScript values can be successfully transported through\\n     * the thread barrier.\\n     *\\n     * ```js\\n     * const assert = require('assert');\\n     * const {\\n     *   Worker, MessageChannel, MessagePort, isMainThread, parentPort\\n     * } = require('worker_threads');\\n     * if (isMainThread) {\\n     *   const worker = new Worker(__filename);\\n     *   const subChannel = new MessageChannel();\\n     *   worker.postMessage({ hereIsYourPort: subChannel.port1 }, [subChannel.port1]);\\n     *   subChannel.port2.on('message', (value) => {\\n     *     console.log('received:', value);\\n     *   });\\n     * } else {\\n     *   parentPort.once('message', (value) => {\\n     *     assert(value.hereIsYourPort instanceof MessagePort);\\n     *     value.hereIsYourPort.postMessage('the worker is sending this');\\n     *     value.hereIsYourPort.close();\\n     *   });\\n     * }\\n     * ```\\n     * @since v10.5.0\\n     */\\n    class Worker extends EventEmitter {\\n        /**\\n         * If `stdin: true` was passed to the `Worker` constructor, this is a\\n         * writable stream. The data written to this stream will be made available in\\n         * the worker thread as `process.stdin`.\\n         * @since v10.5.0\\n         */\\n        readonly stdin: Writable | null;\\n        /**\\n         * This is a readable stream which contains data written to `process.stdout` inside the worker thread. If `stdout: true` was not passed to the `Worker` constructor, then data is piped to the\\n         * parent thread's `process.stdout` stream.\\n         * @since v10.5.0\\n         */\\n        readonly stdout: Readable;\\n        /**\\n         * This is a readable stream which contains data written to `process.stderr` inside the worker thread. If `stderr: true` was not passed to the `Worker` constructor, then data is piped to the\\n         * parent thread's `process.stderr` stream.\\n         * @since v10.5.0\\n         */\\n        readonly stderr: Readable;\\n        /**\\n         * An integer identifier for the referenced thread. Inside the worker thread,\\n         * it is available as `require('worker_threads').threadId`.\\n         * This value is unique for each `Worker` instance inside a single process.\\n         * @since v10.5.0\\n         */\\n        readonly threadId: number;\\n        /**\\n         * Provides the set of JS engine resource constraints for this Worker thread.\\n         * If the `resourceLimits` option was passed to the `Worker` constructor,\\n         * this matches its values.\\n         *\\n         * If the worker has stopped, the return value is an empty object.\\n         * @since v13.2.0, v12.16.0\\n         */\\n        readonly resourceLimits?: ResourceLimits | undefined;\\n        /**\\n         * An object that can be used to query performance information from a worker\\n         * instance. Similar to `perf_hooks.performance`.\\n         * @since v15.1.0, v14.17.0, v12.22.0\\n         */\\n        readonly performance: WorkerPerformance;\\n        /**\\n         * @param filename  The path to the Worker\u2019s main script or module.\\n         *                  Must be either an absolute path or a relative path (i.e. relative to the current working directory) starting with ./ or ../,\\n         *                  or a WHATWG URL object using file: protocol. If options.eval is true, this is a string containing JavaScript code rather than a path.\\n         */\\n        constructor(filename: string | URL, options?: WorkerOptions);\\n        /**\\n         * Send a message to the worker that is received via `require('worker_threads').parentPort.on('message')`.\\n         * See `port.postMessage()` for more details.\\n         * @since v10.5.0\\n         */\\n        postMessage(value: any, transferList?: ReadonlyArray<TransferListItem>): void;\\n        /**\\n         * Opposite of `unref()`, calling `ref()` on a previously `unref()`ed worker does _not_ let the program exit if it's the only active handle left (the default\\n         * behavior). If the worker is `ref()`ed, calling `ref()` again has\\n         * no effect.\\n         * @since v10.5.0\\n         */\\n        ref(): void;\\n        /**\\n         * Calling `unref()` on a worker allows the thread to exit if this is the only\\n         * active handle in the event system. If the worker is already `unref()`ed calling`unref()` again has no effect.\\n         * @since v10.5.0\\n         */\\n        unref(): void;\\n        /**\\n         * Stop all JavaScript execution in the worker thread as soon as possible.\\n         * Returns a Promise for the exit code that is fulfilled when the `'exit' event` is emitted.\\n         * @since v10.5.0\\n         */\\n        terminate(): Promise<number>;\\n        /**\\n         * Returns a readable stream for a V8 snapshot of the current state of the Worker.\\n         * See `v8.getHeapSnapshot()` for more details.\\n         *\\n         * If the Worker thread is no longer running, which may occur before the `'exit' event` is emitted, the returned `Promise` is rejected\\n         * immediately with an `ERR_WORKER_NOT_RUNNING` error.\\n         * @since v13.9.0, v12.17.0\\n         * @return A promise for a Readable Stream containing a V8 heap snapshot\\n         */\\n        getHeapSnapshot(): Promise<Readable>;\\n        addListener(event: 'error', listener: (err: Error) => void): this;\\n        addListener(event: 'exit', listener: (exitCode: number) => void): this;\\n        addListener(event: 'message', listener: (value: any) => void): this;\\n        addListener(event: 'messageerror', listener: (error: Error) => void): this;\\n        addListener(event: 'online', listener: () => void): this;\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        emit(event: 'error', err: Error): boolean;\\n        emit(event: 'exit', exitCode: number): boolean;\\n        emit(event: 'message', value: any): boolean;\\n        emit(event: 'messageerror', error: Error): boolean;\\n        emit(event: 'online'): boolean;\\n        emit(event: string | symbol, ...args: any[]): boolean;\\n        on(event: 'error', listener: (err: Error) => void): this;\\n        on(event: 'exit', listener: (exitCode: number) => void): this;\\n        on(event: 'message', listener: (value: any) => void): this;\\n        on(event: 'messageerror', listener: (error: Error) => void): this;\\n        on(event: 'online', listener: () => void): this;\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\n        once(event: 'error', listener: (err: Error) => void): this;\\n        once(event: 'exit', listener: (exitCode: number) => void): this;\\n        once(event: 'message', listener: (value: any) => void): this;\\n        once(event: 'messageerror', listener: (error: Error) => void): this;\\n        once(event: 'online', listener: () => void): this;\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependListener(event: 'error', listener: (err: Error) => void): this;\\n        prependListener(event: 'exit', listener: (exitCode: number) => void): this;\\n        prependListener(event: 'message', listener: (value: any) => void): this;\\n        prependListener(event: 'messageerror', listener: (error: Error) => void): this;\\n        prependListener(event: 'online', listener: () => void): this;\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\n        prependOnceListener(event: 'exit', listener: (exitCode: number) => void): this;\\n        prependOnceListener(event: 'message', listener: (value: any) => void): this;\\n        prependOnceListener(event: 'messageerror', listener: (error: Error) => void): this;\\n        prependOnceListener(event: 'online', listener: () => void): this;\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        removeListener(event: 'error', listener: (err: Error) => void): this;\\n        removeListener(event: 'exit', listener: (exitCode: number) => void): this;\\n        removeListener(event: 'message', listener: (value: any) => void): this;\\n        removeListener(event: 'messageerror', listener: (error: Error) => void): this;\\n        removeListener(event: 'online', listener: () => void): this;\\n        removeListener(event: string | symbol, listener: (...args: any[]) => void): this;\\n        off(event: 'error', listener: (err: Error) => void): this;\\n        off(event: 'exit', listener: (exitCode: number) => void): this;\\n        off(event: 'message', listener: (value: any) => void): this;\\n        off(event: 'messageerror', listener: (error: Error) => void): this;\\n        off(event: 'online', listener: () => void): this;\\n        off(event: string | symbol, listener: (...args: any[]) => void): this;\\n    }\\n    interface BroadcastChannel extends NodeJS.RefCounted {}\\n    /**\\n     * Instances of `BroadcastChannel` allow asynchronous one-to-many communication\\n     * with all other `BroadcastChannel` instances bound to the same channel name.\\n     *\\n     * ```js\\n     * 'use strict';\\n     *\\n     * const {\\n     *   isMainThread,\\n     *   BroadcastChannel,\\n     *   Worker\\n     * } = require('worker_threads');\\n     *\\n     * const bc = new BroadcastChannel('hello');\\n     *\\n     * if (isMainThread) {\\n     *   let c = 0;\\n     *   bc.onmessage = (event) => {\\n     *     console.log(event.data);\\n     *     if (++c === 10) bc.close();\\n     *   };\\n     *   for (let n = 0; n < 10; n++)\\n     *     new Worker(__filename);\\n     * } else {\\n     *   bc.postMessage('hello from every worker');\\n     *   bc.close();\\n     * }\\n     * ```\\n     * @since v15.4.0\\n     */\\n    class BroadcastChannel {\\n        readonly name: string;\\n        /**\\n         * Invoked with a single \\\\`MessageEvent\\\\` argument when a message is received.\\n         * @since v15.4.0\\n         */\\n        onmessage: (message: unknown) => void;\\n        /**\\n         * Invoked with a received message cannot be deserialized.\\n         * @since v15.4.0\\n         */\\n        onmessageerror: (message: unknown) => void;\\n        constructor(name: string);\\n        /**\\n         * Closes the `BroadcastChannel` connection.\\n         * @since v15.4.0\\n         */\\n        close(): void;\\n        /**\\n         * @since v15.4.0\\n         * @param message Any cloneable JavaScript value.\\n         */\\n        postMessage(message: unknown): void;\\n    }\\n    /**\\n     * Mark an object as not transferable. If `object` occurs in the transfer list of\\n     * a `port.postMessage()` call, it is ignored.\\n     *\\n     * In particular, this makes sense for objects that can be cloned, rather than\\n     * transferred, and which are used by other objects on the sending side.\\n     * For example, Node.js marks the `ArrayBuffer`s it uses for its `Buffer pool` with this.\\n     *\\n     * This operation cannot be undone.\\n     *\\n     * ```js\\n     * const { MessageChannel, markAsUntransferable } = require('worker_threads');\\n     *\\n     * const pooledBuffer = new ArrayBuffer(8);\\n     * const typedArray1 = new Uint8Array(pooledBuffer);\\n     * const typedArray2 = new Float64Array(pooledBuffer);\\n     *\\n     * markAsUntransferable(pooledBuffer);\\n     *\\n     * const { port1 } = new MessageChannel();\\n     * port1.postMessage(typedArray1, [ typedArray1.buffer ]);\\n     *\\n     * // The following line prints the contents of typedArray1 -- it still owns\\n     * // its memory and has been cloned, not transferred. Without\\n     * // `markAsUntransferable()`, this would print an empty Uint8Array.\\n     * // typedArray2 is intact as well.\\n     * console.log(typedArray1);\\n     * console.log(typedArray2);\\n     * ```\\n     *\\n     * There is no equivalent to this API in browsers.\\n     * @since v14.5.0, v12.19.0\\n     */\\n    function markAsUntransferable(object: object): void;\\n    /**\\n     * Transfer a `MessagePort` to a different `vm` Context. The original `port`object is rendered unusable, and the returned `MessagePort` instance\\n     * takes its place.\\n     *\\n     * The returned `MessagePort` is an object in the target context and\\n     * inherits from its global `Object` class. Objects passed to the [`port.onmessage()`](https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage) listener are also created in the\\n     * target context\\n     * and inherit from its global `Object` class.\\n     *\\n     * However, the created `MessagePort` no longer inherits from [`EventTarget`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget), and only\\n     * [`port.onmessage()`](https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage) can be used to receive\\n     * events using it.\\n     * @since v11.13.0\\n     * @param port The message port to transfer.\\n     * @param contextifiedSandbox A `contextified` object as returned by the `vm.createContext()` method.\\n     */\\n    function moveMessagePortToContext(port: MessagePort, contextifiedSandbox: Context): MessagePort;\\n    /**\\n     * Receive a single message from a given `MessagePort`. If no message is available,`undefined` is returned, otherwise an object with a single `message` property\\n     * that contains the message payload, corresponding to the oldest message in the`MessagePort`\u2019s queue.\\n     *\\n     * ```js\\n     * const { MessageChannel, receiveMessageOnPort } = require('worker_threads');\\n     * const { port1, port2 } = new MessageChannel();\\n     * port1.postMessage({ hello: 'world' });\\n     *\\n     * console.log(receiveMessageOnPort(port2));\\n     * // Prints: { message: { hello: 'world' } }\\n     * console.log(receiveMessageOnPort(port2));\\n     * // Prints: undefined\\n     * ```\\n     *\\n     * When this function is used, no `'message'` event is emitted and the`onmessage` listener is not invoked.\\n     * @since v12.3.0\\n     */\\n    function receiveMessageOnPort(port: MessagePort):\\n        | {\\n              message: any;\\n          }\\n        | undefined;\\n    type Serializable = string | object | number | boolean | bigint;\\n    /**\\n     * Within a worker thread, `worker.getEnvironmentData()` returns a clone\\n     * of data passed to the spawning thread's `worker.setEnvironmentData()`.\\n     * Every new `Worker` receives its own copy of the environment data\\n     * automatically.\\n     *\\n     * ```js\\n     * const {\\n     *   Worker,\\n     *   isMainThread,\\n     *   setEnvironmentData,\\n     *   getEnvironmentData,\\n     * } = require('worker_threads');\\n     *\\n     * if (isMainThread) {\\n     *   setEnvironmentData('Hello', 'World!');\\n     *   const worker = new Worker(__filename);\\n     * } else {\\n     *   console.log(getEnvironmentData('Hello'));  // Prints 'World!'.\\n     * }\\n     * ```\\n     * @since v15.12.0, v14.18.0\\n     * @param key Any arbitrary, cloneable JavaScript value that can be used as a {Map} key.\\n     */\\n    function getEnvironmentData(key: Serializable): Serializable;\\n    /**\\n     * The `worker.setEnvironmentData()` API sets the content of`worker.getEnvironmentData()` in the current thread and all new `Worker`instances spawned from the current context.\\n     * @since v15.12.0, v14.18.0\\n     * @param key Any arbitrary, cloneable JavaScript value that can be used as a {Map} key.\\n     * @param value Any arbitrary, cloneable JavaScript value that will be cloned and passed automatically to all new `Worker` instances. If `value` is passed as `undefined`, any previously set value\\n     * for the `key` will be deleted.\\n     */\\n    function setEnvironmentData(key: Serializable, value: Serializable): void;\\n\\n    import {\\n        BroadcastChannel as _BroadcastChannel,\\n        MessageChannel as _MessageChannel,\\n        MessagePort as _MessagePort,\\n    } from 'worker_threads';\\n    global {\\n        /**\\n         * `BroadcastChannel` class is a global reference for `require('worker_threads').BroadcastChannel`\\n         * https://nodejs.org/api/globals.html#broadcastchannel\\n         * @since v18.0.0\\n         */\\n        var BroadcastChannel: typeof globalThis extends {\\n            onmessage: any;\\n            BroadcastChannel: infer T;\\n        }\\n            ? T\\n            : typeof _BroadcastChannel;\\n\\n        /**\\n         * `MessageChannel` class is a global reference for `require('worker_threads').MessageChannel`\\n         * https://nodejs.org/api/globals.html#messagechannel\\n         * @since v15.0.0\\n         */\\n        var MessageChannel: typeof globalThis extends {\\n            onmessage: any;\\n            MessageChannel: infer T;\\n        }\\n            ? T\\n            : typeof _MessageChannel;\\n\\n        /**\\n         * `MessagePort` class is a global reference for `require('worker_threads').MessagePort`\\n         * https://nodejs.org/api/globals.html#messageport\\n         * @since v15.0.0\\n         */\\n         var MessagePort: typeof globalThis extends {\\n            onmessage: any;\\n            MessagePort: infer T;\\n        }\\n            ? T\\n            : typeof _MessagePort;\\n    }\\n}\\ndeclare module 'node:worker_threads' {\\n    export * from 'worker_threads';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/zlib.d.ts\":\"/**\\n * The `zlib` module provides compression functionality implemented using Gzip,\\n * Deflate/Inflate, and Brotli.\\n *\\n * To access it:\\n *\\n * ```js\\n * const zlib = require('zlib');\\n * ```\\n *\\n * Compression and decompression are built around the Node.js `Streams API`.\\n *\\n * Compressing or decompressing a stream (such as a file) can be accomplished by\\n * piping the source stream through a `zlib` `Transform` stream into a destination\\n * stream:\\n *\\n * ```js\\n * const { createGzip } = require('zlib');\\n * const { pipeline } = require('stream');\\n * const {\\n *   createReadStream,\\n *   createWriteStream\\n * } = require('fs');\\n *\\n * const gzip = createGzip();\\n * const source = createReadStream('input.txt');\\n * const destination = createWriteStream('input.txt.gz');\\n *\\n * pipeline(source, gzip, destination, (err) => {\\n *   if (err) {\\n *     console.error('An error occurred:', err);\\n *     process.exitCode = 1;\\n *   }\\n * });\\n *\\n * // Or, Promisified\\n *\\n * const { promisify } = require('util');\\n * const pipe = promisify(pipeline);\\n *\\n * async function do_gzip(input, output) {\\n *   const gzip = createGzip();\\n *   const source = createReadStream(input);\\n *   const destination = createWriteStream(output);\\n *   await pipe(source, gzip, destination);\\n * }\\n *\\n * do_gzip('input.txt', 'input.txt.gz')\\n *   .catch((err) => {\\n *     console.error('An error occurred:', err);\\n *     process.exitCode = 1;\\n *   });\\n * ```\\n *\\n * It is also possible to compress or decompress data in a single step:\\n *\\n * ```js\\n * const { deflate, unzip } = require('zlib');\\n *\\n * const input = '.................................';\\n * deflate(input, (err, buffer) => {\\n *   if (err) {\\n *     console.error('An error occurred:', err);\\n *     process.exitCode = 1;\\n *   }\\n *   console.log(buffer.toString('base64'));\\n * });\\n *\\n * const buffer = Buffer.from('eJzT0yMAAGTvBe8=', 'base64');\\n * unzip(buffer, (err, buffer) => {\\n *   if (err) {\\n *     console.error('An error occurred:', err);\\n *     process.exitCode = 1;\\n *   }\\n *   console.log(buffer.toString());\\n * });\\n *\\n * // Or, Promisified\\n *\\n * const { promisify } = require('util');\\n * const do_unzip = promisify(unzip);\\n *\\n * do_unzip(buffer)\\n *   .then((buf) => console.log(buf.toString()))\\n *   .catch((err) => {\\n *     console.error('An error occurred:', err);\\n *     process.exitCode = 1;\\n *   });\\n * ```\\n * @since v0.5.8\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/zlib.js)\\n */\\ndeclare module 'zlib' {\\n    import * as stream from 'node:stream';\\n    interface ZlibOptions {\\n        /**\\n         * @default constants.Z_NO_FLUSH\\n         */\\n        flush?: number | undefined;\\n        /**\\n         * @default constants.Z_FINISH\\n         */\\n        finishFlush?: number | undefined;\\n        /**\\n         * @default 16*1024\\n         */\\n        chunkSize?: number | undefined;\\n        windowBits?: number | undefined;\\n        level?: number | undefined; // compression only\\n        memLevel?: number | undefined; // compression only\\n        strategy?: number | undefined; // compression only\\n        dictionary?: NodeJS.ArrayBufferView | ArrayBuffer | undefined; // deflate/inflate only, empty dictionary by default\\n        info?: boolean | undefined;\\n        maxOutputLength?: number | undefined;\\n    }\\n    interface BrotliOptions {\\n        /**\\n         * @default constants.BROTLI_OPERATION_PROCESS\\n         */\\n        flush?: number | undefined;\\n        /**\\n         * @default constants.BROTLI_OPERATION_FINISH\\n         */\\n        finishFlush?: number | undefined;\\n        /**\\n         * @default 16*1024\\n         */\\n        chunkSize?: number | undefined;\\n        params?:\\n            | {\\n                  /**\\n                   * Each key is a `constants.BROTLI_*` constant.\\n                   */\\n                  [key: number]: boolean | number;\\n              }\\n            | undefined;\\n        maxOutputLength?: number | undefined;\\n    }\\n    interface Zlib {\\n        /** @deprecated Use bytesWritten instead. */\\n        readonly bytesRead: number;\\n        readonly bytesWritten: number;\\n        shell?: boolean | string | undefined;\\n        close(callback?: () => void): void;\\n        flush(kind?: number, callback?: () => void): void;\\n        flush(callback?: () => void): void;\\n    }\\n    interface ZlibParams {\\n        params(level: number, strategy: number, callback: () => void): void;\\n    }\\n    interface ZlibReset {\\n        reset(): void;\\n    }\\n    interface BrotliCompress extends stream.Transform, Zlib {}\\n    interface BrotliDecompress extends stream.Transform, Zlib {}\\n    interface Gzip extends stream.Transform, Zlib {}\\n    interface Gunzip extends stream.Transform, Zlib {}\\n    interface Deflate extends stream.Transform, Zlib, ZlibReset, ZlibParams {}\\n    interface Inflate extends stream.Transform, Zlib, ZlibReset {}\\n    interface DeflateRaw extends stream.Transform, Zlib, ZlibReset, ZlibParams {}\\n    interface InflateRaw extends stream.Transform, Zlib, ZlibReset {}\\n    interface Unzip extends stream.Transform, Zlib {}\\n    /**\\n     * Creates and returns a new `BrotliCompress` object.\\n     * @since v11.7.0, v10.16.0\\n     */\\n    function createBrotliCompress(options?: BrotliOptions): BrotliCompress;\\n    /**\\n     * Creates and returns a new `BrotliDecompress` object.\\n     * @since v11.7.0, v10.16.0\\n     */\\n    function createBrotliDecompress(options?: BrotliOptions): BrotliDecompress;\\n    /**\\n     * Creates and returns a new `Gzip` object.\\n     * See `example`.\\n     * @since v0.5.8\\n     */\\n    function createGzip(options?: ZlibOptions): Gzip;\\n    /**\\n     * Creates and returns a new `Gunzip` object.\\n     * @since v0.5.8\\n     */\\n    function createGunzip(options?: ZlibOptions): Gunzip;\\n    /**\\n     * Creates and returns a new `Deflate` object.\\n     * @since v0.5.8\\n     */\\n    function createDeflate(options?: ZlibOptions): Deflate;\\n    /**\\n     * Creates and returns a new `Inflate` object.\\n     * @since v0.5.8\\n     */\\n    function createInflate(options?: ZlibOptions): Inflate;\\n    /**\\n     * Creates and returns a new `DeflateRaw` object.\\n     *\\n     * An upgrade of zlib from 1.2.8 to 1.2.11 changed behavior when `windowBits`is set to 8 for raw deflate streams. zlib would automatically set `windowBits`to 9 if was initially set to 8\\\\. Newer\\n     * versions of zlib will throw an exception,\\n     * so Node.js restored the original behavior of upgrading a value of 8 to 9,\\n     * since passing `windowBits = 9` to zlib actually results in a compressed stream\\n     * that effectively uses an 8-bit window only.\\n     * @since v0.5.8\\n     */\\n    function createDeflateRaw(options?: ZlibOptions): DeflateRaw;\\n    /**\\n     * Creates and returns a new `InflateRaw` object.\\n     * @since v0.5.8\\n     */\\n    function createInflateRaw(options?: ZlibOptions): InflateRaw;\\n    /**\\n     * Creates and returns a new `Unzip` object.\\n     * @since v0.5.8\\n     */\\n    function createUnzip(options?: ZlibOptions): Unzip;\\n    type InputType = string | ArrayBuffer | NodeJS.ArrayBufferView;\\n    type CompressCallback = (error: Error | null, result: Buffer) => void;\\n    /**\\n     * @since v11.7.0, v10.16.0\\n     */\\n    function brotliCompress(buf: InputType, options: BrotliOptions, callback: CompressCallback): void;\\n    function brotliCompress(buf: InputType, callback: CompressCallback): void;\\n    namespace brotliCompress {\\n        function __promisify__(buffer: InputType, options?: BrotliOptions): Promise<Buffer>;\\n    }\\n    /**\\n     * Compress a chunk of data with `BrotliCompress`.\\n     * @since v11.7.0, v10.16.0\\n     */\\n    function brotliCompressSync(buf: InputType, options?: BrotliOptions): Buffer;\\n    /**\\n     * @since v11.7.0, v10.16.0\\n     */\\n    function brotliDecompress(buf: InputType, options: BrotliOptions, callback: CompressCallback): void;\\n    function brotliDecompress(buf: InputType, callback: CompressCallback): void;\\n    namespace brotliDecompress {\\n        function __promisify__(buffer: InputType, options?: BrotliOptions): Promise<Buffer>;\\n    }\\n    /**\\n     * Decompress a chunk of data with `BrotliDecompress`.\\n     * @since v11.7.0, v10.16.0\\n     */\\n    function brotliDecompressSync(buf: InputType, options?: BrotliOptions): Buffer;\\n    /**\\n     * @since v0.6.0\\n     */\\n    function deflate(buf: InputType, callback: CompressCallback): void;\\n    function deflate(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\\n    namespace deflate {\\n        function __promisify__(buffer: InputType, options?: ZlibOptions): Promise<Buffer>;\\n    }\\n    /**\\n     * Compress a chunk of data with `Deflate`.\\n     * @since v0.11.12\\n     */\\n    function deflateSync(buf: InputType, options?: ZlibOptions): Buffer;\\n    /**\\n     * @since v0.6.0\\n     */\\n    function deflateRaw(buf: InputType, callback: CompressCallback): void;\\n    function deflateRaw(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\\n    namespace deflateRaw {\\n        function __promisify__(buffer: InputType, options?: ZlibOptions): Promise<Buffer>;\\n    }\\n    /**\\n     * Compress a chunk of data with `DeflateRaw`.\\n     * @since v0.11.12\\n     */\\n    function deflateRawSync(buf: InputType, options?: ZlibOptions): Buffer;\\n    /**\\n     * @since v0.6.0\\n     */\\n    function gzip(buf: InputType, callback: CompressCallback): void;\\n    function gzip(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\\n    namespace gzip {\\n        function __promisify__(buffer: InputType, options?: ZlibOptions): Promise<Buffer>;\\n    }\\n    /**\\n     * Compress a chunk of data with `Gzip`.\\n     * @since v0.11.12\\n     */\\n    function gzipSync(buf: InputType, options?: ZlibOptions): Buffer;\\n    /**\\n     * @since v0.6.0\\n     */\\n    function gunzip(buf: InputType, callback: CompressCallback): void;\\n    function gunzip(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\\n    namespace gunzip {\\n        function __promisify__(buffer: InputType, options?: ZlibOptions): Promise<Buffer>;\\n    }\\n    /**\\n     * Decompress a chunk of data with `Gunzip`.\\n     * @since v0.11.12\\n     */\\n    function gunzipSync(buf: InputType, options?: ZlibOptions): Buffer;\\n    /**\\n     * @since v0.6.0\\n     */\\n    function inflate(buf: InputType, callback: CompressCallback): void;\\n    function inflate(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\\n    namespace inflate {\\n        function __promisify__(buffer: InputType, options?: ZlibOptions): Promise<Buffer>;\\n    }\\n    /**\\n     * Decompress a chunk of data with `Inflate`.\\n     * @since v0.11.12\\n     */\\n    function inflateSync(buf: InputType, options?: ZlibOptions): Buffer;\\n    /**\\n     * @since v0.6.0\\n     */\\n    function inflateRaw(buf: InputType, callback: CompressCallback): void;\\n    function inflateRaw(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\\n    namespace inflateRaw {\\n        function __promisify__(buffer: InputType, options?: ZlibOptions): Promise<Buffer>;\\n    }\\n    /**\\n     * Decompress a chunk of data with `InflateRaw`.\\n     * @since v0.11.12\\n     */\\n    function inflateRawSync(buf: InputType, options?: ZlibOptions): Buffer;\\n    /**\\n     * @since v0.6.0\\n     */\\n    function unzip(buf: InputType, callback: CompressCallback): void;\\n    function unzip(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\\n    namespace unzip {\\n        function __promisify__(buffer: InputType, options?: ZlibOptions): Promise<Buffer>;\\n    }\\n    /**\\n     * Decompress a chunk of data with `Unzip`.\\n     * @since v0.11.12\\n     */\\n    function unzipSync(buf: InputType, options?: ZlibOptions): Buffer;\\n    namespace constants {\\n        const BROTLI_DECODE: number;\\n        const BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES: number;\\n        const BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP: number;\\n        const BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES: number;\\n        const BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1: number;\\n        const BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2: number;\\n        const BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS: number;\\n        const BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_CL_SPACE: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_DICTIONARY: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_DISTANCE: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_PADDING_1: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_PADDING_2: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_RESERVED: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_TRANSFORM: number;\\n        const BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS: number;\\n        const BROTLI_DECODER_ERROR_INVALID_ARGUMENTS: number;\\n        const BROTLI_DECODER_ERROR_UNREACHABLE: number;\\n        const BROTLI_DECODER_NEEDS_MORE_INPUT: number;\\n        const BROTLI_DECODER_NEEDS_MORE_OUTPUT: number;\\n        const BROTLI_DECODER_NO_ERROR: number;\\n        const BROTLI_DECODER_PARAM_DISABLE_RING_BUFFER_REALLOCATION: number;\\n        const BROTLI_DECODER_PARAM_LARGE_WINDOW: number;\\n        const BROTLI_DECODER_RESULT_ERROR: number;\\n        const BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT: number;\\n        const BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT: number;\\n        const BROTLI_DECODER_RESULT_SUCCESS: number;\\n        const BROTLI_DECODER_SUCCESS: number;\\n        const BROTLI_DEFAULT_MODE: number;\\n        const BROTLI_DEFAULT_QUALITY: number;\\n        const BROTLI_DEFAULT_WINDOW: number;\\n        const BROTLI_ENCODE: number;\\n        const BROTLI_LARGE_MAX_WINDOW_BITS: number;\\n        const BROTLI_MAX_INPUT_BLOCK_BITS: number;\\n        const BROTLI_MAX_QUALITY: number;\\n        const BROTLI_MAX_WINDOW_BITS: number;\\n        const BROTLI_MIN_INPUT_BLOCK_BITS: number;\\n        const BROTLI_MIN_QUALITY: number;\\n        const BROTLI_MIN_WINDOW_BITS: number;\\n        const BROTLI_MODE_FONT: number;\\n        const BROTLI_MODE_GENERIC: number;\\n        const BROTLI_MODE_TEXT: number;\\n        const BROTLI_OPERATION_EMIT_METADATA: number;\\n        const BROTLI_OPERATION_FINISH: number;\\n        const BROTLI_OPERATION_FLUSH: number;\\n        const BROTLI_OPERATION_PROCESS: number;\\n        const BROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING: number;\\n        const BROTLI_PARAM_LARGE_WINDOW: number;\\n        const BROTLI_PARAM_LGBLOCK: number;\\n        const BROTLI_PARAM_LGWIN: number;\\n        const BROTLI_PARAM_MODE: number;\\n        const BROTLI_PARAM_NDIRECT: number;\\n        const BROTLI_PARAM_NPOSTFIX: number;\\n        const BROTLI_PARAM_QUALITY: number;\\n        const BROTLI_PARAM_SIZE_HINT: number;\\n        const DEFLATE: number;\\n        const DEFLATERAW: number;\\n        const GUNZIP: number;\\n        const GZIP: number;\\n        const INFLATE: number;\\n        const INFLATERAW: number;\\n        const UNZIP: number;\\n        // Allowed flush values.\\n        const Z_NO_FLUSH: number;\\n        const Z_PARTIAL_FLUSH: number;\\n        const Z_SYNC_FLUSH: number;\\n        const Z_FULL_FLUSH: number;\\n        const Z_FINISH: number;\\n        const Z_BLOCK: number;\\n        const Z_TREES: number;\\n        // Return codes for the compression/decompression functions.\\n        // Negative values are errors, positive values are used for special but normal events.\\n        const Z_OK: number;\\n        const Z_STREAM_END: number;\\n        const Z_NEED_DICT: number;\\n        const Z_ERRNO: number;\\n        const Z_STREAM_ERROR: number;\\n        const Z_DATA_ERROR: number;\\n        const Z_MEM_ERROR: number;\\n        const Z_BUF_ERROR: number;\\n        const Z_VERSION_ERROR: number;\\n        // Compression levels.\\n        const Z_NO_COMPRESSION: number;\\n        const Z_BEST_SPEED: number;\\n        const Z_BEST_COMPRESSION: number;\\n        const Z_DEFAULT_COMPRESSION: number;\\n        // Compression strategy.\\n        const Z_FILTERED: number;\\n        const Z_HUFFMAN_ONLY: number;\\n        const Z_RLE: number;\\n        const Z_FIXED: number;\\n        const Z_DEFAULT_STRATEGY: number;\\n        const Z_DEFAULT_WINDOWBITS: number;\\n        const Z_MIN_WINDOWBITS: number;\\n        const Z_MAX_WINDOWBITS: number;\\n        const Z_MIN_CHUNK: number;\\n        const Z_MAX_CHUNK: number;\\n        const Z_DEFAULT_CHUNK: number;\\n        const Z_MIN_MEMLEVEL: number;\\n        const Z_MAX_MEMLEVEL: number;\\n        const Z_DEFAULT_MEMLEVEL: number;\\n        const Z_MIN_LEVEL: number;\\n        const Z_MAX_LEVEL: number;\\n        const Z_DEFAULT_LEVEL: number;\\n        const ZLIB_VERNUM: number;\\n    }\\n    // Allowed flush values.\\n    /** @deprecated Use `constants.Z_NO_FLUSH` */\\n    const Z_NO_FLUSH: number;\\n    /** @deprecated Use `constants.Z_PARTIAL_FLUSH` */\\n    const Z_PARTIAL_FLUSH: number;\\n    /** @deprecated Use `constants.Z_SYNC_FLUSH` */\\n    const Z_SYNC_FLUSH: number;\\n    /** @deprecated Use `constants.Z_FULL_FLUSH` */\\n    const Z_FULL_FLUSH: number;\\n    /** @deprecated Use `constants.Z_FINISH` */\\n    const Z_FINISH: number;\\n    /** @deprecated Use `constants.Z_BLOCK` */\\n    const Z_BLOCK: number;\\n    /** @deprecated Use `constants.Z_TREES` */\\n    const Z_TREES: number;\\n    // Return codes for the compression/decompression functions.\\n    // Negative values are errors, positive values are used for special but normal events.\\n    /** @deprecated Use `constants.Z_OK` */\\n    const Z_OK: number;\\n    /** @deprecated Use `constants.Z_STREAM_END` */\\n    const Z_STREAM_END: number;\\n    /** @deprecated Use `constants.Z_NEED_DICT` */\\n    const Z_NEED_DICT: number;\\n    /** @deprecated Use `constants.Z_ERRNO` */\\n    const Z_ERRNO: number;\\n    /** @deprecated Use `constants.Z_STREAM_ERROR` */\\n    const Z_STREAM_ERROR: number;\\n    /** @deprecated Use `constants.Z_DATA_ERROR` */\\n    const Z_DATA_ERROR: number;\\n    /** @deprecated Use `constants.Z_MEM_ERROR` */\\n    const Z_MEM_ERROR: number;\\n    /** @deprecated Use `constants.Z_BUF_ERROR` */\\n    const Z_BUF_ERROR: number;\\n    /** @deprecated Use `constants.Z_VERSION_ERROR` */\\n    const Z_VERSION_ERROR: number;\\n    // Compression levels.\\n    /** @deprecated Use `constants.Z_NO_COMPRESSION` */\\n    const Z_NO_COMPRESSION: number;\\n    /** @deprecated Use `constants.Z_BEST_SPEED` */\\n    const Z_BEST_SPEED: number;\\n    /** @deprecated Use `constants.Z_BEST_COMPRESSION` */\\n    const Z_BEST_COMPRESSION: number;\\n    /** @deprecated Use `constants.Z_DEFAULT_COMPRESSION` */\\n    const Z_DEFAULT_COMPRESSION: number;\\n    // Compression strategy.\\n    /** @deprecated Use `constants.Z_FILTERED` */\\n    const Z_FILTERED: number;\\n    /** @deprecated Use `constants.Z_HUFFMAN_ONLY` */\\n    const Z_HUFFMAN_ONLY: number;\\n    /** @deprecated Use `constants.Z_RLE` */\\n    const Z_RLE: number;\\n    /** @deprecated Use `constants.Z_FIXED` */\\n    const Z_FIXED: number;\\n    /** @deprecated Use `constants.Z_DEFAULT_STRATEGY` */\\n    const Z_DEFAULT_STRATEGY: number;\\n    /** @deprecated */\\n    const Z_BINARY: number;\\n    /** @deprecated */\\n    const Z_TEXT: number;\\n    /** @deprecated */\\n    const Z_ASCII: number;\\n    /** @deprecated  */\\n    const Z_UNKNOWN: number;\\n    /** @deprecated */\\n    const Z_DEFLATED: number;\\n}\\ndeclare module 'node:zlib' {\\n    export * from 'zlib';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/assert/strict.d.ts\":\"declare module 'assert/strict' {\\n    import { strict } from 'node:assert';\\n    export = strict;\\n}\\ndeclare module 'node:assert/strict' {\\n    import { strict } from 'node:assert';\\n    export = strict;\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/dns/promises.d.ts\":\"/**\\n * The `dns.promises` API provides an alternative set of asynchronous DNS methods\\n * that return `Promise` objects rather than using callbacks. The API is accessible\\n * via `require('dns').promises` or `require('dns/promises')`.\\n * @since v10.6.0\\n */\\ndeclare module 'dns/promises' {\\n    import {\\n        LookupAddress,\\n        LookupOneOptions,\\n        LookupAllOptions,\\n        LookupOptions,\\n        AnyRecord,\\n        CaaRecord,\\n        MxRecord,\\n        NaptrRecord,\\n        SoaRecord,\\n        SrvRecord,\\n        ResolveWithTtlOptions,\\n        RecordWithTtl,\\n        ResolveOptions,\\n        ResolverOptions,\\n    } from 'node:dns';\\n    /**\\n     * Returns an array of IP address strings, formatted according to [RFC 5952](https://tools.ietf.org/html/rfc5952#section-6),\\n     * that are currently configured for DNS resolution. A string will include a port\\n     * section if a custom port is used.\\n     *\\n     * ```js\\n     * [\\n     *   '4.4.4.4',\\n     *   '2001:4860:4860::8888',\\n     *   '4.4.4.4:1053',\\n     *   '[2001:4860:4860::8888]:1053',\\n     * ]\\n     * ```\\n     * @since v10.6.0\\n     */\\n    function getServers(): string[];\\n    /**\\n     * Resolves a host name (e.g. `'nodejs.org'`) into the first found A (IPv4) or\\n     * AAAA (IPv6) record. All `option` properties are optional. If `options` is an\\n     * integer, then it must be `4` or `6` \u2013 if `options` is not provided, then IPv4\\n     * and IPv6 addresses are both returned if found.\\n     *\\n     * With the `all` option set to `true`, the `Promise` is resolved with `addresses`being an array of objects with the properties `address` and `family`.\\n     *\\n     * On error, the `Promise` is rejected with an `Error` object, where `err.code`is the error code.\\n     * Keep in mind that `err.code` will be set to `'ENOTFOUND'` not only when\\n     * the host name does not exist but also when the lookup fails in other ways\\n     * such as no available file descriptors.\\n     *\\n     * `dnsPromises.lookup()` does not necessarily have anything to do with the DNS\\n     * protocol. The implementation uses an operating system facility that can\\n     * associate names with addresses, and vice versa. This implementation can have\\n     * subtle but important consequences on the behavior of any Node.js program. Please\\n     * take some time to consult the `Implementation considerations section` before\\n     * using `dnsPromises.lookup()`.\\n     *\\n     * Example usage:\\n     *\\n     * ```js\\n     * const dns = require('dns');\\n     * const dnsPromises = dns.promises;\\n     * const options = {\\n     *   family: 6,\\n     *   hints: dns.ADDRCONFIG | dns.V4MAPPED,\\n     * };\\n     *\\n     * dnsPromises.lookup('example.com', options).then((result) => {\\n     *   console.log('address: %j family: IPv%s', result.address, result.family);\\n     *   // address: \\\"2606:2800:220:1:248:1893:25c8:1946\\\" family: IPv6\\n     * });\\n     *\\n     * // When options.all is true, the result will be an Array.\\n     * options.all = true;\\n     * dnsPromises.lookup('example.com', options).then((result) => {\\n     *   console.log('addresses: %j', result);\\n     *   // addresses: [{\\\"address\\\":\\\"2606:2800:220:1:248:1893:25c8:1946\\\",\\\"family\\\":6}]\\n     * });\\n     * ```\\n     * @since v10.6.0\\n     */\\n    function lookup(hostname: string, family: number): Promise<LookupAddress>;\\n    function lookup(hostname: string, options: LookupOneOptions): Promise<LookupAddress>;\\n    function lookup(hostname: string, options: LookupAllOptions): Promise<LookupAddress[]>;\\n    function lookup(hostname: string, options: LookupOptions): Promise<LookupAddress | LookupAddress[]>;\\n    function lookup(hostname: string): Promise<LookupAddress>;\\n    /**\\n     * Resolves the given `address` and `port` into a host name and service using\\n     * the operating system's underlying `getnameinfo` implementation.\\n     *\\n     * If `address` is not a valid IP address, a `TypeError` will be thrown.\\n     * The `port` will be coerced to a number. If it is not a legal port, a `TypeError`will be thrown.\\n     *\\n     * On error, the `Promise` is rejected with an `Error` object, where `err.code`is the error code.\\n     *\\n     * ```js\\n     * const dnsPromises = require('dns').promises;\\n     * dnsPromises.lookupService('127.0.0.1', 22).then((result) => {\\n     *   console.log(result.hostname, result.service);\\n     *   // Prints: localhost ssh\\n     * });\\n     * ```\\n     * @since v10.6.0\\n     */\\n    function lookupService(\\n        address: string,\\n        port: number\\n    ): Promise<{\\n        hostname: string;\\n        service: string;\\n    }>;\\n    /**\\n     * Uses the DNS protocol to resolve a host name (e.g. `'nodejs.org'`) into an array\\n     * of the resource records. When successful, the `Promise` is resolved with an\\n     * array of resource records. The type and structure of individual results vary\\n     * based on `rrtype`:\\n     *\\n     * <omitted>\\n     *\\n     * On error, the `Promise` is rejected with an `Error` object, where `err.code`is one of the `DNS error codes`.\\n     * @since v10.6.0\\n     * @param hostname Host name to resolve.\\n     * @param [rrtype='A'] Resource record type.\\n     */\\n    function resolve(hostname: string): Promise<string[]>;\\n    function resolve(hostname: string, rrtype: 'A'): Promise<string[]>;\\n    function resolve(hostname: string, rrtype: 'AAAA'): Promise<string[]>;\\n    function resolve(hostname: string, rrtype: 'ANY'): Promise<AnyRecord[]>;\\n    function resolve(hostname: string, rrtype: 'CAA'): Promise<CaaRecord[]>;\\n    function resolve(hostname: string, rrtype: 'CNAME'): Promise<string[]>;\\n    function resolve(hostname: string, rrtype: 'MX'): Promise<MxRecord[]>;\\n    function resolve(hostname: string, rrtype: 'NAPTR'): Promise<NaptrRecord[]>;\\n    function resolve(hostname: string, rrtype: 'NS'): Promise<string[]>;\\n    function resolve(hostname: string, rrtype: 'PTR'): Promise<string[]>;\\n    function resolve(hostname: string, rrtype: 'SOA'): Promise<SoaRecord>;\\n    function resolve(hostname: string, rrtype: 'SRV'): Promise<SrvRecord[]>;\\n    function resolve(hostname: string, rrtype: 'TXT'): Promise<string[][]>;\\n    function resolve(hostname: string, rrtype: string): Promise<string[] | MxRecord[] | NaptrRecord[] | SoaRecord | SrvRecord[] | string[][] | AnyRecord[]>;\\n    /**\\n     * Uses the DNS protocol to resolve IPv4 addresses (`A` records) for the`hostname`. On success, the `Promise` is resolved with an array of IPv4\\n     * addresses (e.g. `['74.125.79.104', '74.125.79.105', '74.125.79.106']`).\\n     * @since v10.6.0\\n     * @param hostname Host name to resolve.\\n     */\\n    function resolve4(hostname: string): Promise<string[]>;\\n    function resolve4(hostname: string, options: ResolveWithTtlOptions): Promise<RecordWithTtl[]>;\\n    function resolve4(hostname: string, options: ResolveOptions): Promise<string[] | RecordWithTtl[]>;\\n    /**\\n     * Uses the DNS protocol to resolve IPv6 addresses (`AAAA` records) for the`hostname`. On success, the `Promise` is resolved with an array of IPv6\\n     * addresses.\\n     * @since v10.6.0\\n     * @param hostname Host name to resolve.\\n     */\\n    function resolve6(hostname: string): Promise<string[]>;\\n    function resolve6(hostname: string, options: ResolveWithTtlOptions): Promise<RecordWithTtl[]>;\\n    function resolve6(hostname: string, options: ResolveOptions): Promise<string[] | RecordWithTtl[]>;\\n    /**\\n     * Uses the DNS protocol to resolve all records (also known as `ANY` or `*` query).\\n     * On success, the `Promise` is resolved with an array containing various types of\\n     * records. Each object has a property `type` that indicates the type of the\\n     * current record. And depending on the `type`, additional properties will be\\n     * present on the object:\\n     *\\n     * <omitted>\\n     *\\n     * Here is an example of the result object:\\n     *\\n     * ```js\\n     * [ { type: 'A', address: '127.0.0.1', ttl: 299 },\\n     *   { type: 'CNAME', value: 'example.com' },\\n     *   { type: 'MX', exchange: 'alt4.aspmx.l.example.com', priority: 50 },\\n     *   { type: 'NS', value: 'ns1.example.com' },\\n     *   { type: 'TXT', entries: [ 'v=spf1 include:_spf.example.com ~all' ] },\\n     *   { type: 'SOA',\\n     *     nsname: 'ns1.example.com',\\n     *     hostmaster: 'admin.example.com',\\n     *     serial: 156696742,\\n     *     refresh: 900,\\n     *     retry: 900,\\n     *     expire: 1800,\\n     *     minttl: 60 } ]\\n     * ```\\n     * @since v10.6.0\\n     */\\n    function resolveAny(hostname: string): Promise<AnyRecord[]>;\\n    /**\\n     * Uses the DNS protocol to resolve `CAA` records for the `hostname`. On success,\\n     * the `Promise` is resolved with an array of objects containing available\\n     * certification authority authorization records available for the `hostname`(e.g. `[{critical: 0, iodef: 'mailto:pki@example.com'},{critical: 128, issue: 'pki.example.com'}]`).\\n     * @since v15.0.0, v14.17.0\\n     */\\n    function resolveCaa(hostname: string): Promise<CaaRecord[]>;\\n    /**\\n     * Uses the DNS protocol to resolve `CNAME` records for the `hostname`. On success,\\n     * the `Promise` is resolved with an array of canonical name records available for\\n     * the `hostname` (e.g. `['bar.example.com']`).\\n     * @since v10.6.0\\n     */\\n    function resolveCname(hostname: string): Promise<string[]>;\\n    /**\\n     * Uses the DNS protocol to resolve mail exchange records (`MX` records) for the`hostname`. On success, the `Promise` is resolved with an array of objects\\n     * containing both a `priority` and `exchange` property (e.g.`[{priority: 10, exchange: 'mx.example.com'}, ...]`).\\n     * @since v10.6.0\\n     */\\n    function resolveMx(hostname: string): Promise<MxRecord[]>;\\n    /**\\n     * Uses the DNS protocol to resolve regular expression based records (`NAPTR`records) for the `hostname`. On success, the `Promise` is resolved with an array\\n     * of objects with the following properties:\\n     *\\n     * * `flags`\\n     * * `service`\\n     * * `regexp`\\n     * * `replacement`\\n     * * `order`\\n     * * `preference`\\n     *\\n     * ```js\\n     * {\\n     *   flags: 's',\\n     *   service: 'SIP+D2U',\\n     *   regexp: '',\\n     *   replacement: '_sip._udp.example.com',\\n     *   order: 30,\\n     *   preference: 100\\n     * }\\n     * ```\\n     * @since v10.6.0\\n     */\\n    function resolveNaptr(hostname: string): Promise<NaptrRecord[]>;\\n    /**\\n     * Uses the DNS protocol to resolve name server records (`NS` records) for the`hostname`. On success, the `Promise` is resolved with an array of name server\\n     * records available for `hostname` (e.g.`['ns1.example.com', 'ns2.example.com']`).\\n     * @since v10.6.0\\n     */\\n    function resolveNs(hostname: string): Promise<string[]>;\\n    /**\\n     * Uses the DNS protocol to resolve pointer records (`PTR` records) for the`hostname`. On success, the `Promise` is resolved with an array of strings\\n     * containing the reply records.\\n     * @since v10.6.0\\n     */\\n    function resolvePtr(hostname: string): Promise<string[]>;\\n    /**\\n     * Uses the DNS protocol to resolve a start of authority record (`SOA` record) for\\n     * the `hostname`. On success, the `Promise` is resolved with an object with the\\n     * following properties:\\n     *\\n     * * `nsname`\\n     * * `hostmaster`\\n     * * `serial`\\n     * * `refresh`\\n     * * `retry`\\n     * * `expire`\\n     * * `minttl`\\n     *\\n     * ```js\\n     * {\\n     *   nsname: 'ns.example.com',\\n     *   hostmaster: 'root.example.com',\\n     *   serial: 2013101809,\\n     *   refresh: 10000,\\n     *   retry: 2400,\\n     *   expire: 604800,\\n     *   minttl: 3600\\n     * }\\n     * ```\\n     * @since v10.6.0\\n     */\\n    function resolveSoa(hostname: string): Promise<SoaRecord>;\\n    /**\\n     * Uses the DNS protocol to resolve service records (`SRV` records) for the`hostname`. On success, the `Promise` is resolved with an array of objects with\\n     * the following properties:\\n     *\\n     * * `priority`\\n     * * `weight`\\n     * * `port`\\n     * * `name`\\n     *\\n     * ```js\\n     * {\\n     *   priority: 10,\\n     *   weight: 5,\\n     *   port: 21223,\\n     *   name: 'service.example.com'\\n     * }\\n     * ```\\n     * @since v10.6.0\\n     */\\n    function resolveSrv(hostname: string): Promise<SrvRecord[]>;\\n    /**\\n     * Uses the DNS protocol to resolve text queries (`TXT` records) for the`hostname`. On success, the `Promise` is resolved with a two-dimensional array\\n     * of the text records available for `hostname` (e.g.`[ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]`). Each sub-array contains TXT chunks of\\n     * one record. Depending on the use case, these could be either joined together or\\n     * treated separately.\\n     * @since v10.6.0\\n     */\\n    function resolveTxt(hostname: string): Promise<string[][]>;\\n    /**\\n     * Performs a reverse DNS query that resolves an IPv4 or IPv6 address to an\\n     * array of host names.\\n     *\\n     * On error, the `Promise` is rejected with an `Error` object, where `err.code`is one of the `DNS error codes`.\\n     * @since v10.6.0\\n     */\\n    function reverse(ip: string): Promise<string[]>;\\n    /**\\n     * Sets the IP address and port of servers to be used when performing DNS\\n     * resolution. The `servers` argument is an array of [RFC 5952](https://tools.ietf.org/html/rfc5952#section-6) formatted\\n     * addresses. If the port is the IANA default DNS port (53) it can be omitted.\\n     *\\n     * ```js\\n     * dnsPromises.setServers([\\n     *   '4.4.4.4',\\n     *   '[2001:4860:4860::8888]',\\n     *   '4.4.4.4:1053',\\n     *   '[2001:4860:4860::8888]:1053',\\n     * ]);\\n     * ```\\n     *\\n     * An error will be thrown if an invalid address is provided.\\n     *\\n     * The `dnsPromises.setServers()` method must not be called while a DNS query is in\\n     * progress.\\n     *\\n     * This method works much like [resolve.conf](https://man7.org/linux/man-pages/man5/resolv.conf.5.html).\\n     * That is, if attempting to resolve with the first server provided results in a`NOTFOUND` error, the `resolve()` method will _not_ attempt to resolve with\\n     * subsequent servers provided. Fallback DNS servers will only be used if the\\n     * earlier ones time out or result in some other error.\\n     * @since v10.6.0\\n     * @param servers array of `RFC 5952` formatted addresses\\n     */\\n    function setServers(servers: ReadonlyArray<string>): void;\\n    /**\\n     * Set the default value of `verbatim` in `dns.lookup()` and `dnsPromises.lookup()`. The value could be:\\n     *\\n     * * `ipv4first`: sets default `verbatim` `false`.\\n     * * `verbatim`: sets default `verbatim` `true`.\\n     *\\n     * The default is `ipv4first` and `dnsPromises.setDefaultResultOrder()` have\\n     * higher priority than `--dns-result-order`. When using `worker threads`,`dnsPromises.setDefaultResultOrder()` from the main thread won't affect the\\n     * default dns orders in workers.\\n     * @since v16.4.0, v14.18.0\\n     * @param order must be `'ipv4first'` or `'verbatim'`.\\n     */\\n    function setDefaultResultOrder(order: 'ipv4first' | 'verbatim'): void;\\n    class Resolver {\\n        constructor(options?: ResolverOptions);\\n        cancel(): void;\\n        getServers: typeof getServers;\\n        resolve: typeof resolve;\\n        resolve4: typeof resolve4;\\n        resolve6: typeof resolve6;\\n        resolveAny: typeof resolveAny;\\n        resolveCname: typeof resolveCname;\\n        resolveMx: typeof resolveMx;\\n        resolveNaptr: typeof resolveNaptr;\\n        resolveNs: typeof resolveNs;\\n        resolvePtr: typeof resolvePtr;\\n        resolveSoa: typeof resolveSoa;\\n        resolveSrv: typeof resolveSrv;\\n        resolveTxt: typeof resolveTxt;\\n        reverse: typeof reverse;\\n        setLocalAddress(ipv4?: string, ipv6?: string): void;\\n        setServers: typeof setServers;\\n    }\\n}\\ndeclare module 'node:dns/promises' {\\n    export * from 'dns/promises';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/fs/promises.d.ts\":\"/**\\n * The `fs/promises` API provides asynchronous file system methods that return\\n * promises.\\n *\\n * The promise APIs use the underlying Node.js threadpool to perform file\\n * system operations off the event loop thread. These operations are not\\n * synchronized or threadsafe. Care must be taken when performing multiple\\n * concurrent modifications on the same file or data corruption may occur.\\n * @since v10.0.0\\n */\\ndeclare module 'fs/promises' {\\n    import { Abortable } from 'node:events';\\n    import { Stream } from 'node:stream';\\n    import { ReadableStream } from 'node:stream/web';\\n    import {\\n        BigIntStats,\\n        BufferEncodingOption,\\n        constants as fsConstants,\\n        CopyOptions,\\n        Dir,\\n        Dirent,\\n        MakeDirectoryOptions,\\n        Mode,\\n        ObjectEncodingOptions,\\n        OpenDirOptions,\\n        OpenMode,\\n        PathLike,\\n        ReadStream,\\n        ReadVResult,\\n        RmDirOptions,\\n        RmOptions,\\n        StatOptions,\\n        Stats,\\n        TimeLike,\\n        WatchEventType,\\n        WatchOptions,\\n        WriteStream,\\n        WriteVResult,\\n    } from 'node:fs';\\n    import { Interface as ReadlineInterface } from 'node:readline';\\n\\n    interface FileChangeInfo<T extends string | Buffer> {\\n        eventType: WatchEventType;\\n        filename: T;\\n    }\\n    interface FlagAndOpenMode {\\n        mode?: Mode | undefined;\\n        flag?: OpenMode | undefined;\\n    }\\n    interface FileReadResult<T extends NodeJS.ArrayBufferView> {\\n        bytesRead: number;\\n        buffer: T;\\n    }\\n    interface FileReadOptions<T extends NodeJS.ArrayBufferView = Buffer> {\\n        /**\\n         * @default `Buffer.alloc(0xffff)`\\n         */\\n        buffer?: T;\\n        /**\\n         * @default 0\\n         */\\n        offset?: number | null;\\n        /**\\n         * @default `buffer.byteLength`\\n         */\\n        length?: number | null;\\n        position?: number | null;\\n    }\\n    interface CreateReadStreamOptions {\\n        encoding?: BufferEncoding | null | undefined;\\n        autoClose?: boolean | undefined;\\n        emitClose?: boolean | undefined;\\n        start?: number | undefined;\\n        end?: number | undefined;\\n        highWaterMark?: number | undefined;\\n    }\\n    interface CreateWriteStreamOptions {\\n        encoding?: BufferEncoding | null | undefined;\\n        autoClose?: boolean | undefined;\\n        emitClose?: boolean | undefined;\\n        start?: number | undefined;\\n    }\\n    // TODO: Add `EventEmitter` close\\n    interface FileHandle {\\n        /**\\n         * The numeric file descriptor managed by the {FileHandle} object.\\n         * @since v10.0.0\\n         */\\n        readonly fd: number;\\n        /**\\n         * Alias of `filehandle.writeFile()`.\\n         *\\n         * When operating on file handles, the mode cannot be changed from what it was set\\n         * to with `fsPromises.open()`. Therefore, this is equivalent to `filehandle.writeFile()`.\\n         * @since v10.0.0\\n         * @return Fulfills with `undefined` upon success.\\n         */\\n        appendFile(data: string | Uint8Array, options?: (ObjectEncodingOptions & FlagAndOpenMode) | BufferEncoding | null): Promise<void>;\\n        /**\\n         * Changes the ownership of the file. A wrapper for [`chown(2)`](http://man7.org/linux/man-pages/man2/chown.2.html).\\n         * @since v10.0.0\\n         * @param uid The file's new owner's user id.\\n         * @param gid The file's new group's group id.\\n         * @return Fulfills with `undefined` upon success.\\n         */\\n        chown(uid: number, gid: number): Promise<void>;\\n        /**\\n         * Modifies the permissions on the file. See [`chmod(2)`](http://man7.org/linux/man-pages/man2/chmod.2.html).\\n         * @since v10.0.0\\n         * @param mode the file mode bit mask.\\n         * @return Fulfills with `undefined` upon success.\\n         */\\n        chmod(mode: Mode): Promise<void>;\\n        /**\\n         * Unlike the 16 kb default `highWaterMark` for a `stream.Readable`, the stream\\n         * returned by this method has a default `highWaterMark` of 64 kb.\\n         *\\n         * `options` can include `start` and `end` values to read a range of bytes from\\n         * the file instead of the entire file. Both `start` and `end` are inclusive and\\n         * start counting at 0, allowed values are in the\\n         * \\\\[0, [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER)\\\\] range. If `start` is\\n         * omitted or `undefined`, `filehandle.createReadStream()` reads sequentially from\\n         * the current file position. The `encoding` can be any one of those accepted by `Buffer`.\\n         *\\n         * If the `FileHandle` points to a character device that only supports blocking\\n         * reads (such as keyboard or sound card), read operations do not finish until data\\n         * is available. This can prevent the process from exiting and the stream from\\n         * closing naturally.\\n         *\\n         * By default, the stream will emit a `'close'` event after it has been\\n         * destroyed.  Set the `emitClose` option to `false` to change this behavior.\\n         *\\n         * ```js\\n         * import { open } from 'fs/promises';\\n         *\\n         * const fd = await open('/dev/input/event0');\\n         * // Create a stream from some character device.\\n         * const stream = fd.createReadStream();\\n         * setTimeout(() => {\\n         *   stream.close(); // This may not close the stream.\\n         *   // Artificially marking end-of-stream, as if the underlying resource had\\n         *   // indicated end-of-file by itself, allows the stream to close.\\n         *   // This does not cancel pending read operations, and if there is such an\\n         *   // operation, the process may still not be able to exit successfully\\n         *   // until it finishes.\\n         *   stream.push(null);\\n         *   stream.read(0);\\n         * }, 100);\\n         * ```\\n         *\\n         * If `autoClose` is false, then the file descriptor won't be closed, even if\\n         * there's an error. It is the application's responsibility to close it and make\\n         * sure there's no file descriptor leak. If `autoClose` is set to true (default\\n         * behavior), on `'error'` or `'end'` the file descriptor will be closed\\n         * automatically.\\n         *\\n         * An example to read the last 10 bytes of a file which is 100 bytes long:\\n         *\\n         * ```js\\n         * import { open } from 'fs/promises';\\n         *\\n         * const fd = await open('sample.txt');\\n         * fd.createReadStream({ start: 90, end: 99 });\\n         * ```\\n         * @since v16.11.0\\n         */\\n        createReadStream(options?: CreateReadStreamOptions): ReadStream;\\n        /**\\n         * `options` may also include a `start` option to allow writing data at some\\n         * position past the beginning of the file, allowed values are in the\\n         * \\\\[0, [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER)\\\\] range. Modifying a file rather than\\n         * replacing it may require the `flags` `open` option to be set to `r+` rather than\\n         * the default `r`. The `encoding` can be any one of those accepted by `Buffer`.\\n         *\\n         * If `autoClose` is set to true (default behavior) on `'error'` or `'finish'`the file descriptor will be closed automatically. If `autoClose` is false,\\n         * then the file descriptor won't be closed, even if there's an error.\\n         * It is the application's responsibility to close it and make sure there's no\\n         * file descriptor leak.\\n         *\\n         * By default, the stream will emit a `'close'` event after it has been\\n         * destroyed.  Set the `emitClose` option to `false` to change this behavior.\\n         * @since v16.11.0\\n         */\\n        createWriteStream(options?: CreateWriteStreamOptions): WriteStream;\\n        /**\\n         * Forces all currently queued I/O operations associated with the file to the\\n         * operating system's synchronized I/O completion state. Refer to the POSIX [`fdatasync(2)`](http://man7.org/linux/man-pages/man2/fdatasync.2.html) documentation for details.\\n         *\\n         * Unlike `filehandle.sync` this method does not flush modified metadata.\\n         * @since v10.0.0\\n         * @return Fulfills with `undefined` upon success.\\n         */\\n        datasync(): Promise<void>;\\n        /**\\n         * Request that all data for the open file descriptor is flushed to the storage\\n         * device. The specific implementation is operating system and device specific.\\n         * Refer to the POSIX [`fsync(2)`](http://man7.org/linux/man-pages/man2/fsync.2.html) documentation for more detail.\\n         * @since v10.0.0\\n         * @return Fufills with `undefined` upon success.\\n         */\\n        sync(): Promise<void>;\\n        /**\\n         * Reads data from the file and stores that in the given buffer.\\n         *\\n         * If the file is not modified concurrently, the end-of-file is reached when the\\n         * number of bytes read is zero.\\n         * @since v10.0.0\\n         * @param buffer A buffer that will be filled with the file data read.\\n         * @param offset The location in the buffer at which to start filling.\\n         * @param length The number of bytes to read.\\n         * @param position The location where to begin reading data from the file. If `null`, data will be read from the current file position, and the position will be updated. If `position` is an\\n         * integer, the current file position will remain unchanged.\\n         * @return Fulfills upon success with an object with two properties:\\n         */\\n        read<T extends NodeJS.ArrayBufferView>(buffer: T, offset?: number | null, length?: number | null, position?: number | null): Promise<FileReadResult<T>>;\\n        read<T extends NodeJS.ArrayBufferView = Buffer>(options?: FileReadOptions<T>): Promise<FileReadResult<T>>;\\n        /**\\n         * Returns a `ReadableStream` that may be used to read the files data.\\n         *\\n         * An error will be thrown if this method is called more than once or is called after the `FileHandle` is closed\\n         * or closing.\\n         *\\n         * ```js\\n         * import { open } from 'node:fs/promises';\\n         *\\n         * const file = await open('./some/file/to/read');\\n         *\\n         * for await (const chunk of file.readableWebStream())\\n         *   console.log(chunk);\\n         *\\n         * await file.close();\\n         * ```\\n         *\\n         * While the `ReadableStream` will read the file to completion, it will not close the `FileHandle` automatically. User code must still call the `fileHandle.close()` method.\\n         *\\n         * @since v17.0.0\\n         * @experimental\\n         */\\n        readableWebStream(): ReadableStream;\\n        /**\\n         * Asynchronously reads the entire contents of a file.\\n         *\\n         * If `options` is a string, then it specifies the `encoding`.\\n         *\\n         * The `FileHandle` has to support reading.\\n         *\\n         * If one or more `filehandle.read()` calls are made on a file handle and then a`filehandle.readFile()` call is made, the data will be read from the current\\n         * position till the end of the file. It doesn't always read from the beginning\\n         * of the file.\\n         * @since v10.0.0\\n         * @return Fulfills upon a successful read with the contents of the file. If no encoding is specified (using `options.encoding`), the data is returned as a {Buffer} object. Otherwise, the\\n         * data will be a string.\\n         */\\n        readFile(\\n            options?: {\\n                encoding?: null | undefined;\\n                flag?: OpenMode | undefined;\\n            } | null\\n        ): Promise<Buffer>;\\n        /**\\n         * Asynchronously reads the entire contents of a file. The underlying file will _not_ be closed automatically.\\n         * The `FileHandle` must have been opened for reading.\\n         * @param options An object that may contain an optional flag.\\n         * If a flag is not provided, it defaults to `'r'`.\\n         */\\n        readFile(\\n            options:\\n                | {\\n                      encoding: BufferEncoding;\\n                      flag?: OpenMode | undefined;\\n                  }\\n                | BufferEncoding\\n        ): Promise<string>;\\n        /**\\n         * Asynchronously reads the entire contents of a file. The underlying file will _not_ be closed automatically.\\n         * The `FileHandle` must have been opened for reading.\\n         * @param options An object that may contain an optional flag.\\n         * If a flag is not provided, it defaults to `'r'`.\\n         */\\n        readFile(\\n            options?:\\n                | (ObjectEncodingOptions & {\\n                      flag?: OpenMode | undefined;\\n                  })\\n                | BufferEncoding\\n                | null\\n        ): Promise<string | Buffer>;\\n        /**\\n         * Convenience method to create a `readline` interface and stream over the file. For example:\\n         *\\n         * ```js\\n         * import { open } from 'node:fs/promises';\\n         *\\n         * const file = await open('./some/file/to/read');\\n         *\\n         * for await (const line of file.readLines()) {\\n         *   console.log(line);\\n         * }\\n         * ```\\n         *\\n         * @since v18.11.0\\n         * @param options See `filehandle.createReadStream()` for the options.\\n         */\\n        readLines(options?: CreateReadStreamOptions): ReadlineInterface;\\n        /**\\n         * @since v10.0.0\\n         * @return Fulfills with an {fs.Stats} for the file.\\n         */\\n        stat(\\n            opts?: StatOptions & {\\n                bigint?: false | undefined;\\n            }\\n        ): Promise<Stats>;\\n        stat(\\n            opts: StatOptions & {\\n                bigint: true;\\n            }\\n        ): Promise<BigIntStats>;\\n        stat(opts?: StatOptions): Promise<Stats | BigIntStats>;\\n        /**\\n         * Truncates the file.\\n         *\\n         * If the file was larger than `len` bytes, only the first `len` bytes will be\\n         * retained in the file.\\n         *\\n         * The following example retains only the first four bytes of the file:\\n         *\\n         * ```js\\n         * import { open } from 'fs/promises';\\n         *\\n         * let filehandle = null;\\n         * try {\\n         *   filehandle = await open('temp.txt', 'r+');\\n         *   await filehandle.truncate(4);\\n         * } finally {\\n         *   await filehandle?.close();\\n         * }\\n         * ```\\n         *\\n         * If the file previously was shorter than `len` bytes, it is extended, and the\\n         * extended part is filled with null bytes (`'\\\\0'`):\\n         *\\n         * If `len` is negative then `0` will be used.\\n         * @since v10.0.0\\n         * @param [len=0]\\n         * @return Fulfills with `undefined` upon success.\\n         */\\n        truncate(len?: number): Promise<void>;\\n        /**\\n         * Change the file system timestamps of the object referenced by the `FileHandle` then resolves the promise with no arguments upon success.\\n         * @since v10.0.0\\n         */\\n        utimes(atime: TimeLike, mtime: TimeLike): Promise<void>;\\n        /**\\n         * Asynchronously writes data to a file, replacing the file if it already exists.`data` can be a string, a buffer, an\\n         * [AsyncIterable](https://tc39.github.io/ecma262/#sec-asynciterable-interface) or\\n         * [Iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol) object.\\n         * The promise is resolved with no arguments upon success.\\n         *\\n         * If `options` is a string, then it specifies the `encoding`.\\n         *\\n         * The `FileHandle` has to support writing.\\n         *\\n         * It is unsafe to use `filehandle.writeFile()` multiple times on the same file\\n         * without waiting for the promise to be resolved (or rejected).\\n         *\\n         * If one or more `filehandle.write()` calls are made on a file handle and then a`filehandle.writeFile()` call is made, the data will be written from the\\n         * current position till the end of the file. It doesn't always write from the\\n         * beginning of the file.\\n         * @since v10.0.0\\n         */\\n        writeFile(data: string | Uint8Array, options?: (ObjectEncodingOptions & FlagAndOpenMode & Abortable) | BufferEncoding | null): Promise<void>;\\n        /**\\n         * Write `buffer` to the file.\\n         *\\n         * The promise is resolved with an object containing two properties:\\n         *\\n         * It is unsafe to use `filehandle.write()` multiple times on the same file\\n         * without waiting for the promise to be resolved (or rejected). For this\\n         * scenario, use `filehandle.createWriteStream()`.\\n         *\\n         * On Linux, positional writes do not work when the file is opened in append mode.\\n         * The kernel ignores the position argument and always appends the data to\\n         * the end of the file.\\n         * @since v10.0.0\\n         * @param [offset=0] The start position from within `buffer` where the data to write begins.\\n         * @param [length=buffer.byteLength - offset] The number of bytes from `buffer` to write.\\n         * @param position The offset from the beginning of the file where the data from `buffer` should be written. If `position` is not a `number`, the data will be written at the current position.\\n         * See the POSIX pwrite(2) documentation for more detail.\\n         */\\n        write<TBuffer extends Uint8Array>(\\n            buffer: TBuffer,\\n            offset?: number | null,\\n            length?: number | null,\\n            position?: number | null\\n        ): Promise<{\\n            bytesWritten: number;\\n            buffer: TBuffer;\\n        }>;\\n        write(\\n            data: string,\\n            position?: number | null,\\n            encoding?: BufferEncoding | null\\n        ): Promise<{\\n            bytesWritten: number;\\n            buffer: string;\\n        }>;\\n        /**\\n         * Write an array of [ArrayBufferView](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView) s to the file.\\n         *\\n         * The promise is resolved with an object containing a two properties:\\n         *\\n         * It is unsafe to call `writev()` multiple times on the same file without waiting\\n         * for the promise to be resolved (or rejected).\\n         *\\n         * On Linux, positional writes don't work when the file is opened in append mode.\\n         * The kernel ignores the position argument and always appends the data to\\n         * the end of the file.\\n         * @since v12.9.0\\n         * @param position The offset from the beginning of the file where the data from `buffers` should be written. If `position` is not a `number`, the data will be written at the current\\n         * position.\\n         */\\n        writev(buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number): Promise<WriteVResult>;\\n        /**\\n         * Read from a file and write to an array of [ArrayBufferView](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView) s\\n         * @since v13.13.0, v12.17.0\\n         * @param position The offset from the beginning of the file where the data should be read from. If `position` is not a `number`, the data will be read from the current position.\\n         * @return Fulfills upon success an object containing two properties:\\n         */\\n        readv(buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number): Promise<ReadVResult>;\\n        /**\\n         * Closes the file handle after waiting for any pending operation on the handle to\\n         * complete.\\n         *\\n         * ```js\\n         * import { open } from 'fs/promises';\\n         *\\n         * let filehandle;\\n         * try {\\n         *   filehandle = await open('thefile.txt', 'r');\\n         * } finally {\\n         *   await filehandle?.close();\\n         * }\\n         * ```\\n         * @since v10.0.0\\n         * @return Fulfills with `undefined` upon success.\\n         */\\n        close(): Promise<void>;\\n    }\\n\\n    const constants: typeof fsConstants;\\n\\n    /**\\n     * Tests a user's permissions for the file or directory specified by `path`.\\n     * The `mode` argument is an optional integer that specifies the accessibility\\n     * checks to be performed. `mode` should be either the value `fs.constants.F_OK`or a mask consisting of the bitwise OR of any of `fs.constants.R_OK`,`fs.constants.W_OK`, and `fs.constants.X_OK`\\n     * (e.g.`fs.constants.W_OK | fs.constants.R_OK`). Check `File access constants` for\\n     * possible values of `mode`.\\n     *\\n     * If the accessibility check is successful, the promise is resolved with no\\n     * value. If any of the accessibility checks fail, the promise is rejected\\n     * with an [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object. The following example checks if the file`/etc/passwd` can be read and\\n     * written by the current process.\\n     *\\n     * ```js\\n     * import { access } from 'fs/promises';\\n     * import { constants } from 'fs';\\n     *\\n     * try {\\n     *   await access('/etc/passwd', constants.R_OK | constants.W_OK);\\n     *   console.log('can access');\\n     * } catch {\\n     *   console.error('cannot access');\\n     * }\\n     * ```\\n     *\\n     * Using `fsPromises.access()` to check for the accessibility of a file before\\n     * calling `fsPromises.open()` is not recommended. Doing so introduces a race\\n     * condition, since other processes may change the file's state between the two\\n     * calls. Instead, user code should open/read/write the file directly and handle\\n     * the error raised if the file is not accessible.\\n     * @since v10.0.0\\n     * @param [mode=fs.constants.F_OK]\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function access(path: PathLike, mode?: number): Promise<void>;\\n    /**\\n     * Asynchronously copies `src` to `dest`. By default, `dest` is overwritten if it\\n     * already exists.\\n     *\\n     * No guarantees are made about the atomicity of the copy operation. If an\\n     * error occurs after the destination file has been opened for writing, an attempt\\n     * will be made to remove the destination.\\n     *\\n     * ```js\\n     * import { constants } from 'fs';\\n     * import { copyFile } from 'fs/promises';\\n     *\\n     * try {\\n     *   await copyFile('source.txt', 'destination.txt');\\n     *   console.log('source.txt was copied to destination.txt');\\n     * } catch {\\n     *   console.log('The file could not be copied');\\n     * }\\n     *\\n     * // By using COPYFILE_EXCL, the operation will fail if destination.txt exists.\\n     * try {\\n     *   await copyFile('source.txt', 'destination.txt', constants.COPYFILE_EXCL);\\n     *   console.log('source.txt was copied to destination.txt');\\n     * } catch {\\n     *   console.log('The file could not be copied');\\n     * }\\n     * ```\\n     * @since v10.0.0\\n     * @param src source filename to copy\\n     * @param dest destination filename of the copy operation\\n     * @param [mode=0] Optional modifiers that specify the behavior of the copy operation. It is possible to create a mask consisting of the bitwise OR of two or more values (e.g.\\n     * `fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE`)\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function copyFile(src: PathLike, dest: PathLike, mode?: number): Promise<void>;\\n    /**\\n     * Opens a `FileHandle`.\\n     *\\n     * Refer to the POSIX [`open(2)`](http://man7.org/linux/man-pages/man2/open.2.html) documentation for more detail.\\n     *\\n     * Some characters (`< > : \\\" / \\\\ | ? *`) are reserved under Windows as documented\\n     * by [Naming Files, Paths, and Namespaces](https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file). Under NTFS, if the filename contains\\n     * a colon, Node.js will open a file system stream, as described by [this MSDN page](https://docs.microsoft.com/en-us/windows/desktop/FileIO/using-streams).\\n     * @since v10.0.0\\n     * @param [flags='r'] See `support of file system `flags``.\\n     * @param [mode=0o666] Sets the file mode (permission and sticky bits) if the file is created.\\n     * @return Fulfills with a {FileHandle} object.\\n     */\\n    function open(path: PathLike, flags?: string | number, mode?: Mode): Promise<FileHandle>;\\n    /**\\n     * Renames `oldPath` to `newPath`.\\n     * @since v10.0.0\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function rename(oldPath: PathLike, newPath: PathLike): Promise<void>;\\n    /**\\n     * Truncates (shortens or extends the length) of the content at `path` to `len`bytes.\\n     * @since v10.0.0\\n     * @param [len=0]\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function truncate(path: PathLike, len?: number): Promise<void>;\\n    /**\\n     * Removes the directory identified by `path`.\\n     *\\n     * Using `fsPromises.rmdir()` on a file (not a directory) results in the\\n     * promise being rejected with an `ENOENT` error on Windows and an `ENOTDIR`error on POSIX.\\n     *\\n     * To get a behavior similar to the `rm -rf` Unix command, use `fsPromises.rm()` with options `{ recursive: true, force: true }`.\\n     * @since v10.0.0\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function rmdir(path: PathLike, options?: RmDirOptions): Promise<void>;\\n    /**\\n     * Removes files and directories (modeled on the standard POSIX `rm` utility).\\n     * @since v14.14.0\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function rm(path: PathLike, options?: RmOptions): Promise<void>;\\n    /**\\n     * Asynchronously creates a directory.\\n     *\\n     * The optional `options` argument can be an integer specifying `mode` (permission\\n     * and sticky bits), or an object with a `mode` property and a `recursive`property indicating whether parent directories should be created. Calling`fsPromises.mkdir()` when `path` is a directory\\n     * that exists results in a\\n     * rejection only when `recursive` is false.\\n     * @since v10.0.0\\n     * @return Upon success, fulfills with `undefined` if `recursive` is `false`, or the first directory path created if `recursive` is `true`.\\n     */\\n    function mkdir(\\n        path: PathLike,\\n        options: MakeDirectoryOptions & {\\n            recursive: true;\\n        }\\n    ): Promise<string | undefined>;\\n    /**\\n     * Asynchronous mkdir(2) - create a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\\n     * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\\n     */\\n    function mkdir(\\n        path: PathLike,\\n        options?:\\n            | Mode\\n            | (MakeDirectoryOptions & {\\n                  recursive?: false | undefined;\\n              })\\n            | null\\n    ): Promise<void>;\\n    /**\\n     * Asynchronous mkdir(2) - create a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\\n     * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\\n     */\\n    function mkdir(path: PathLike, options?: Mode | MakeDirectoryOptions | null): Promise<string | undefined>;\\n    /**\\n     * Reads the contents of a directory.\\n     *\\n     * The optional `options` argument can be a string specifying an encoding, or an\\n     * object with an `encoding` property specifying the character encoding to use for\\n     * the filenames. If the `encoding` is set to `'buffer'`, the filenames returned\\n     * will be passed as `Buffer` objects.\\n     *\\n     * If `options.withFileTypes` is set to `true`, the resolved array will contain `fs.Dirent` objects.\\n     *\\n     * ```js\\n     * import { readdir } from 'fs/promises';\\n     *\\n     * try {\\n     *   const files = await readdir(path);\\n     *   for (const file of files)\\n     *     console.log(file);\\n     * } catch (err) {\\n     *   console.error(err);\\n     * }\\n     * ```\\n     * @since v10.0.0\\n     * @return Fulfills with an array of the names of the files in the directory excluding `'.'` and `'..'`.\\n     */\\n    function readdir(\\n        path: PathLike,\\n        options?:\\n            | (ObjectEncodingOptions & {\\n                  withFileTypes?: false | undefined;\\n              })\\n            | BufferEncoding\\n            | null\\n    ): Promise<string[]>;\\n    /**\\n     * Asynchronous readdir(3) - read a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    function readdir(\\n        path: PathLike,\\n        options:\\n            | {\\n                  encoding: 'buffer';\\n                  withFileTypes?: false | undefined;\\n              }\\n            | 'buffer'\\n    ): Promise<Buffer[]>;\\n    /**\\n     * Asynchronous readdir(3) - read a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    function readdir(\\n        path: PathLike,\\n        options?:\\n            | (ObjectEncodingOptions & {\\n                  withFileTypes?: false | undefined;\\n              })\\n            | BufferEncoding\\n            | null\\n    ): Promise<string[] | Buffer[]>;\\n    /**\\n     * Asynchronous readdir(3) - read a directory.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options If called with `withFileTypes: true` the result data will be an array of Dirent.\\n     */\\n    function readdir(\\n        path: PathLike,\\n        options: ObjectEncodingOptions & {\\n            withFileTypes: true;\\n        }\\n    ): Promise<Dirent[]>;\\n    /**\\n     * Reads the contents of the symbolic link referred to by `path`. See the POSIX [`readlink(2)`](http://man7.org/linux/man-pages/man2/readlink.2.html) documentation for more detail. The promise is\\n     * resolved with the`linkString` upon success.\\n     *\\n     * The optional `options` argument can be a string specifying an encoding, or an\\n     * object with an `encoding` property specifying the character encoding to use for\\n     * the link path returned. If the `encoding` is set to `'buffer'`, the link path\\n     * returned will be passed as a `Buffer` object.\\n     * @since v10.0.0\\n     * @return Fulfills with the `linkString` upon success.\\n     */\\n    function readlink(path: PathLike, options?: ObjectEncodingOptions | BufferEncoding | null): Promise<string>;\\n    /**\\n     * Asynchronous readlink(2) - read value of a symbolic link.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    function readlink(path: PathLike, options: BufferEncodingOption): Promise<Buffer>;\\n    /**\\n     * Asynchronous readlink(2) - read value of a symbolic link.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    function readlink(path: PathLike, options?: ObjectEncodingOptions | string | null): Promise<string | Buffer>;\\n    /**\\n     * Creates a symbolic link.\\n     *\\n     * The `type` argument is only used on Windows platforms and can be one of `'dir'`,`'file'`, or `'junction'`. Windows junction points require the destination path\\n     * to be absolute. When using `'junction'`, the `target` argument will\\n     * automatically be normalized to absolute path.\\n     * @since v10.0.0\\n     * @param [type='file']\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function symlink(target: PathLike, path: PathLike, type?: string | null): Promise<void>;\\n    /**\\n     * Equivalent to `fsPromises.stat()` unless `path` refers to a symbolic link,\\n     * in which case the link itself is stat-ed, not the file that it refers to.\\n     * Refer to the POSIX [`lstat(2)`](http://man7.org/linux/man-pages/man2/lstat.2.html) document for more detail.\\n     * @since v10.0.0\\n     * @return Fulfills with the {fs.Stats} object for the given symbolic link `path`.\\n     */\\n    function lstat(\\n        path: PathLike,\\n        opts?: StatOptions & {\\n            bigint?: false | undefined;\\n        }\\n    ): Promise<Stats>;\\n    function lstat(\\n        path: PathLike,\\n        opts: StatOptions & {\\n            bigint: true;\\n        }\\n    ): Promise<BigIntStats>;\\n    function lstat(path: PathLike, opts?: StatOptions): Promise<Stats | BigIntStats>;\\n    /**\\n     * @since v10.0.0\\n     * @return Fulfills with the {fs.Stats} object for the given `path`.\\n     */\\n    function stat(\\n        path: PathLike,\\n        opts?: StatOptions & {\\n            bigint?: false | undefined;\\n        }\\n    ): Promise<Stats>;\\n    function stat(\\n        path: PathLike,\\n        opts: StatOptions & {\\n            bigint: true;\\n        }\\n    ): Promise<BigIntStats>;\\n    function stat(path: PathLike, opts?: StatOptions): Promise<Stats | BigIntStats>;\\n    /**\\n     * Creates a new link from the `existingPath` to the `newPath`. See the POSIX [`link(2)`](http://man7.org/linux/man-pages/man2/link.2.html) documentation for more detail.\\n     * @since v10.0.0\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function link(existingPath: PathLike, newPath: PathLike): Promise<void>;\\n    /**\\n     * If `path` refers to a symbolic link, then the link is removed without affecting\\n     * the file or directory to which that link refers. If the `path` refers to a file\\n     * path that is not a symbolic link, the file is deleted. See the POSIX [`unlink(2)`](http://man7.org/linux/man-pages/man2/unlink.2.html) documentation for more detail.\\n     * @since v10.0.0\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function unlink(path: PathLike): Promise<void>;\\n    /**\\n     * Changes the permissions of a file.\\n     * @since v10.0.0\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function chmod(path: PathLike, mode: Mode): Promise<void>;\\n    /**\\n     * Changes the permissions on a symbolic link.\\n     *\\n     * This method is only implemented on macOS.\\n     * @deprecated Since v10.0.0\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function lchmod(path: PathLike, mode: Mode): Promise<void>;\\n    /**\\n     * Changes the ownership on a symbolic link.\\n     * @since v10.0.0\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function lchown(path: PathLike, uid: number, gid: number): Promise<void>;\\n    /**\\n     * Changes the access and modification times of a file in the same way as `fsPromises.utimes()`, with the difference that if the path refers to a\\n     * symbolic link, then the link is not dereferenced: instead, the timestamps of\\n     * the symbolic link itself are changed.\\n     * @since v14.5.0, v12.19.0\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function lutimes(path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void>;\\n    /**\\n     * Changes the ownership of a file.\\n     * @since v10.0.0\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function chown(path: PathLike, uid: number, gid: number): Promise<void>;\\n    /**\\n     * Change the file system timestamps of the object referenced by `path`.\\n     *\\n     * The `atime` and `mtime` arguments follow these rules:\\n     *\\n     * * Values can be either numbers representing Unix epoch time, `Date`s, or a\\n     * numeric string like `'123456789.0'`.\\n     * * If the value can not be converted to a number, or is `NaN`, `Infinity` or`-Infinity`, an `Error` will be thrown.\\n     * @since v10.0.0\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function utimes(path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void>;\\n    /**\\n     * Determines the actual location of `path` using the same semantics as the`fs.realpath.native()` function.\\n     *\\n     * Only paths that can be converted to UTF8 strings are supported.\\n     *\\n     * The optional `options` argument can be a string specifying an encoding, or an\\n     * object with an `encoding` property specifying the character encoding to use for\\n     * the path. If the `encoding` is set to `'buffer'`, the path returned will be\\n     * passed as a `Buffer` object.\\n     *\\n     * On Linux, when Node.js is linked against musl libc, the procfs file system must\\n     * be mounted on `/proc` in order for this function to work. Glibc does not have\\n     * this restriction.\\n     * @since v10.0.0\\n     * @return Fulfills with the resolved path upon success.\\n     */\\n    function realpath(path: PathLike, options?: ObjectEncodingOptions | BufferEncoding | null): Promise<string>;\\n    /**\\n     * Asynchronous realpath(3) - return the canonicalized absolute pathname.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    function realpath(path: PathLike, options: BufferEncodingOption): Promise<Buffer>;\\n    /**\\n     * Asynchronous realpath(3) - return the canonicalized absolute pathname.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    function realpath(path: PathLike, options?: ObjectEncodingOptions | BufferEncoding | null): Promise<string | Buffer>;\\n    /**\\n     * Creates a unique temporary directory. A unique directory name is generated by\\n     * appending six random characters to the end of the provided `prefix`. Due to\\n     * platform inconsistencies, avoid trailing `X` characters in `prefix`. Some\\n     * platforms, notably the BSDs, can return more than six random characters, and\\n     * replace trailing `X` characters in `prefix` with random characters.\\n     *\\n     * The optional `options` argument can be a string specifying an encoding, or an\\n     * object with an `encoding` property specifying the character encoding to use.\\n     *\\n     * ```js\\n     * import { mkdtemp } from 'fs/promises';\\n     *\\n     * try {\\n     *   await mkdtemp(path.join(os.tmpdir(), 'foo-'));\\n     * } catch (err) {\\n     *   console.error(err);\\n     * }\\n     * ```\\n     *\\n     * The `fsPromises.mkdtemp()` method will append the six randomly selected\\n     * characters directly to the `prefix` string. For instance, given a directory`/tmp`, if the intention is to create a temporary directory _within_`/tmp`, the`prefix` must end with a trailing\\n     * platform-specific path separator\\n     * (`require('path').sep`).\\n     * @since v10.0.0\\n     * @return Fulfills with a string containing the filesystem path of the newly created temporary directory.\\n     */\\n    function mkdtemp(prefix: string, options?: ObjectEncodingOptions | BufferEncoding | null): Promise<string>;\\n    /**\\n     * Asynchronously creates a unique temporary directory.\\n     * Generates six random characters to be appended behind a required `prefix` to create a unique temporary directory.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    function mkdtemp(prefix: string, options: BufferEncodingOption): Promise<Buffer>;\\n    /**\\n     * Asynchronously creates a unique temporary directory.\\n     * Generates six random characters to be appended behind a required `prefix` to create a unique temporary directory.\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\n     */\\n    function mkdtemp(prefix: string, options?: ObjectEncodingOptions | BufferEncoding | null): Promise<string | Buffer>;\\n    /**\\n     * Asynchronously writes data to a file, replacing the file if it already exists.`data` can be a string, a buffer, an\\n     * [AsyncIterable](https://tc39.github.io/ecma262/#sec-asynciterable-interface) or\\n     * [Iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol) object.\\n     *\\n     * The `encoding` option is ignored if `data` is a buffer.\\n     *\\n     * If `options` is a string, then it specifies the encoding.\\n     *\\n     * The `mode` option only affects the newly created file. See `fs.open()` for more details.\\n     *\\n     * Any specified `FileHandle` has to support writing.\\n     *\\n     * It is unsafe to use `fsPromises.writeFile()` multiple times on the same file\\n     * without waiting for the promise to be settled.\\n     *\\n     * Similarly to `fsPromises.readFile` \\\\- `fsPromises.writeFile` is a convenience\\n     * method that performs multiple `write` calls internally to write the buffer\\n     * passed to it. For performance sensitive code consider using `fs.createWriteStream()` or `filehandle.createWriteStream()`.\\n     *\\n     * It is possible to use an `AbortSignal` to cancel an `fsPromises.writeFile()`.\\n     * Cancelation is \\\"best effort\\\", and some amount of data is likely still\\n     * to be written.\\n     *\\n     * ```js\\n     * import { writeFile } from 'fs/promises';\\n     * import { Buffer } from 'buffer';\\n     *\\n     * try {\\n     *   const controller = new AbortController();\\n     *   const { signal } = controller;\\n     *   const data = new Uint8Array(Buffer.from('Hello Node.js'));\\n     *   const promise = writeFile('message.txt', data, { signal });\\n     *\\n     *   // Abort the request before the promise settles.\\n     *   controller.abort();\\n     *\\n     *   await promise;\\n     * } catch (err) {\\n     *   // When a request is aborted - err is an AbortError\\n     *   console.error(err);\\n     * }\\n     * ```\\n     *\\n     * Aborting an ongoing request does not abort individual operating\\n     * system requests but rather the internal buffering `fs.writeFile` performs.\\n     * @since v10.0.0\\n     * @param file filename or `FileHandle`\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function writeFile(\\n        file: PathLike | FileHandle,\\n        data: string | NodeJS.ArrayBufferView | Iterable<string | NodeJS.ArrayBufferView> | AsyncIterable<string | NodeJS.ArrayBufferView> | Stream,\\n        options?:\\n            | (ObjectEncodingOptions & {\\n                  mode?: Mode | undefined;\\n                  flag?: OpenMode | undefined;\\n              } & Abortable)\\n            | BufferEncoding\\n            | null\\n    ): Promise<void>;\\n    /**\\n     * Asynchronously append data to a file, creating the file if it does not yet\\n     * exist. `data` can be a string or a `Buffer`.\\n     *\\n     * If `options` is a string, then it specifies the `encoding`.\\n     *\\n     * The `mode` option only affects the newly created file. See `fs.open()` for more details.\\n     *\\n     * The `path` may be specified as a `FileHandle` that has been opened\\n     * for appending (using `fsPromises.open()`).\\n     * @since v10.0.0\\n     * @param path filename or {FileHandle}\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function appendFile(path: PathLike | FileHandle, data: string | Uint8Array, options?: (ObjectEncodingOptions & FlagAndOpenMode) | BufferEncoding | null): Promise<void>;\\n    /**\\n     * Asynchronously reads the entire contents of a file.\\n     *\\n     * If no encoding is specified (using `options.encoding`), the data is returned\\n     * as a `Buffer` object. Otherwise, the data will be a string.\\n     *\\n     * If `options` is a string, then it specifies the encoding.\\n     *\\n     * When the `path` is a directory, the behavior of `fsPromises.readFile()` is\\n     * platform-specific. On macOS, Linux, and Windows, the promise will be rejected\\n     * with an error. On FreeBSD, a representation of the directory's contents will be\\n     * returned.\\n     *\\n     * It is possible to abort an ongoing `readFile` using an `AbortSignal`. If a\\n     * request is aborted the promise returned is rejected with an `AbortError`:\\n     *\\n     * ```js\\n     * import { readFile } from 'fs/promises';\\n     *\\n     * try {\\n     *   const controller = new AbortController();\\n     *   const { signal } = controller;\\n     *   const promise = readFile(fileName, { signal });\\n     *\\n     *   // Abort the request before the promise settles.\\n     *   controller.abort();\\n     *\\n     *   await promise;\\n     * } catch (err) {\\n     *   // When a request is aborted - err is an AbortError\\n     *   console.error(err);\\n     * }\\n     * ```\\n     *\\n     * Aborting an ongoing request does not abort individual operating\\n     * system requests but rather the internal buffering `fs.readFile` performs.\\n     *\\n     * Any specified `FileHandle` has to support reading.\\n     * @since v10.0.0\\n     * @param path filename or `FileHandle`\\n     * @return Fulfills with the contents of the file.\\n     */\\n    function readFile(\\n        path: PathLike | FileHandle,\\n        options?:\\n            | ({\\n                  encoding?: null | undefined;\\n                  flag?: OpenMode | undefined;\\n              } & Abortable)\\n            | null\\n    ): Promise<Buffer>;\\n    /**\\n     * Asynchronously reads the entire contents of a file.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * If a `FileHandle` is provided, the underlying file will _not_ be closed automatically.\\n     * @param options An object that may contain an optional flag.\\n     * If a flag is not provided, it defaults to `'r'`.\\n     */\\n    function readFile(\\n        path: PathLike | FileHandle,\\n        options:\\n            | ({\\n                  encoding: BufferEncoding;\\n                  flag?: OpenMode | undefined;\\n              } & Abortable)\\n            | BufferEncoding\\n    ): Promise<string>;\\n    /**\\n     * Asynchronously reads the entire contents of a file.\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\n     * If a `FileHandle` is provided, the underlying file will _not_ be closed automatically.\\n     * @param options An object that may contain an optional flag.\\n     * If a flag is not provided, it defaults to `'r'`.\\n     */\\n    function readFile(\\n        path: PathLike | FileHandle,\\n        options?:\\n            | (ObjectEncodingOptions &\\n                  Abortable & {\\n                      flag?: OpenMode | undefined;\\n                  })\\n            | BufferEncoding\\n            | null\\n    ): Promise<string | Buffer>;\\n    /**\\n     * Asynchronously open a directory for iterative scanning. See the POSIX [`opendir(3)`](http://man7.org/linux/man-pages/man3/opendir.3.html) documentation for more detail.\\n     *\\n     * Creates an `fs.Dir`, which contains all further functions for reading from\\n     * and cleaning up the directory.\\n     *\\n     * The `encoding` option sets the encoding for the `path` while opening the\\n     * directory and subsequent read operations.\\n     *\\n     * Example using async iteration:\\n     *\\n     * ```js\\n     * import { opendir } from 'fs/promises';\\n     *\\n     * try {\\n     *   const dir = await opendir('./');\\n     *   for await (const dirent of dir)\\n     *     console.log(dirent.name);\\n     * } catch (err) {\\n     *   console.error(err);\\n     * }\\n     * ```\\n     *\\n     * When using the async iterator, the `fs.Dir` object will be automatically\\n     * closed after the iterator exits.\\n     * @since v12.12.0\\n     * @return Fulfills with an {fs.Dir}.\\n     */\\n    function opendir(path: PathLike, options?: OpenDirOptions): Promise<Dir>;\\n    /**\\n     * Returns an async iterator that watches for changes on `filename`, where `filename`is either a file or a directory.\\n     *\\n     * ```js\\n     * const { watch } = require('fs/promises');\\n     *\\n     * const ac = new AbortController();\\n     * const { signal } = ac;\\n     * setTimeout(() => ac.abort(), 10000);\\n     *\\n     * (async () => {\\n     *   try {\\n     *     const watcher = watch(__filename, { signal });\\n     *     for await (const event of watcher)\\n     *       console.log(event);\\n     *   } catch (err) {\\n     *     if (err.name === 'AbortError')\\n     *       return;\\n     *     throw err;\\n     *   }\\n     * })();\\n     * ```\\n     *\\n     * On most platforms, `'rename'` is emitted whenever a filename appears or\\n     * disappears in the directory.\\n     *\\n     * All the `caveats` for `fs.watch()` also apply to `fsPromises.watch()`.\\n     * @since v15.9.0, v14.18.0\\n     * @return of objects with the properties:\\n     */\\n    function watch(\\n        filename: PathLike,\\n        options:\\n            | (WatchOptions & {\\n                  encoding: 'buffer';\\n              })\\n            | 'buffer'\\n    ): AsyncIterable<FileChangeInfo<Buffer>>;\\n    /**\\n     * Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.\\n     * @param filename A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\n     * @param options Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.\\n     * If `encoding` is not supplied, the default of `'utf8'` is used.\\n     * If `persistent` is not supplied, the default of `true` is used.\\n     * If `recursive` is not supplied, the default of `false` is used.\\n     */\\n    function watch(filename: PathLike, options?: WatchOptions | BufferEncoding): AsyncIterable<FileChangeInfo<string>>;\\n    /**\\n     * Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.\\n     * @param filename A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\n     * @param options Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.\\n     * If `encoding` is not supplied, the default of `'utf8'` is used.\\n     * If `persistent` is not supplied, the default of `true` is used.\\n     * If `recursive` is not supplied, the default of `false` is used.\\n     */\\n    function watch(filename: PathLike, options: WatchOptions | string): AsyncIterable<FileChangeInfo<string>> | AsyncIterable<FileChangeInfo<Buffer>>;\\n    /**\\n     * Asynchronously copies the entire directory structure from `src` to `dest`,\\n     * including subdirectories and files.\\n     *\\n     * When copying a directory to another directory, globs are not supported and\\n     * behavior is similar to `cp dir1/ dir2/`.\\n     * @since v16.7.0\\n     * @experimental\\n     * @param src source path to copy.\\n     * @param dest destination path to copy to.\\n     * @return Fulfills with `undefined` upon success.\\n     */\\n    function cp(source: string | URL, destination: string | URL, opts?: CopyOptions): Promise<void>;\\n}\\ndeclare module 'node:fs/promises' {\\n    export * from 'fs/promises';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/readline/promises.d.ts\":\"/**\\n * The `readline/promise` module provides an API for reading lines of input from a Readable stream one line at a time.\\n *\\n * @see [source](https://github.com/nodejs/node/blob/v18.0.0/lib/readline/promises.js)\\n * @since v17.0.0\\n */\\ndeclare module 'readline/promises' {\\n    import { Interface as _Interface, ReadLineOptions, Completer, AsyncCompleter, Direction } from 'node:readline';\\n    import { Abortable } from 'node:events';\\n\\n    class Interface extends _Interface {\\n        /**\\n         * The rl.question() method displays the query by writing it to the output, waits for user input to be provided on input,\\n         * then invokes the callback function passing the provided input as the first argument.\\n         *\\n         * When called, rl.question() will resume the input stream if it has been paused.\\n         *\\n         * If the readlinePromises.Interface was created with output set to null or undefined the query is not written.\\n         *\\n         * If the question is called after rl.close(), it returns a rejected promise.\\n         *\\n         * Example usage:\\n         *\\n         * ```js\\n         * const answer = await rl.question('What is your favorite food? ');\\n         * console.log(`Oh, so your favorite food is ${answer}`);\\n         * ```\\n         *\\n         * Using an AbortSignal to cancel a question.\\n         *\\n         * ```js\\n         * const signal = AbortSignal.timeout(10_000);\\n         *\\n         * signal.addEventListener('abort', () => {\\n         *   console.log('The food question timed out');\\n         * }, { once: true });\\n         *\\n         * const answer = await rl.question('What is your favorite food? ', { signal });\\n         * console.log(`Oh, so your favorite food is ${answer}`);\\n         * ```\\n         *\\n         * @since v17.0.0\\n         * @param query A statement or query to write to output, prepended to the prompt.\\n         */\\n        question(query: string): Promise<string>;\\n        question(query: string, options: Abortable): Promise<string>;\\n    }\\n\\n    class Readline {\\n        /**\\n         * @param stream A TTY stream.\\n         */\\n        constructor(stream: NodeJS.WritableStream, options?: { autoCommit?: boolean });\\n        /**\\n         * The `rl.clearLine()` method adds to the internal list of pending action an action that clears current line of the associated `stream` in a specified direction identified by `dir`.\\n         * Call `rl.commit()` to see the effect of this method, unless `autoCommit: true` was passed to the constructor.\\n         */\\n        clearLine(dir: Direction): this;\\n        /**\\n         * The `rl.clearScreenDown()` method adds to the internal list of pending action an action that clears the associated `stream` from the current position of the cursor down.\\n         * Call `rl.commit()` to see the effect of this method, unless `autoCommit: true` was passed to the constructor.\\n         */\\n        clearScreenDown(): this;\\n        /**\\n         * The `rl.commit()` method sends all the pending actions to the associated `stream` and clears the internal list of pending actions.\\n         */\\n        commit(): Promise<void>;\\n        /**\\n         * The `rl.cursorTo()` method adds to the internal list of pending action an action that moves cursor to the specified position in the associated `stream`.\\n         * Call `rl.commit()` to see the effect of this method, unless `autoCommit: true` was passed to the constructor.\\n         */\\n        cursorTo(x: number, y?: number): this;\\n        /**\\n         * The `rl.moveCursor()` method adds to the internal list of pending action an action that moves the cursor relative to its current position in the associated `stream`.\\n         * Call `rl.commit()` to see the effect of this method, unless autoCommit: true was passed to the constructor.\\n         */\\n        moveCursor(dx: number, dy: number): this;\\n        /**\\n         * The `rl.rollback()` method clears the internal list of pending actions without sending it to the associated `stream`.\\n         */\\n        rollback(): this;\\n    }\\n\\n    /**\\n     * The `readlinePromises.createInterface()` method creates a new `readlinePromises.Interface` instance.\\n     *\\n     * ```js\\n     * const readlinePromises = require('node:readline/promises');\\n     * const rl = readlinePromises.createInterface({\\n     *   input: process.stdin,\\n     *   output: process.stdout\\n     * });\\n     * ```\\n     *\\n     * Once the `readlinePromises.Interface` instance is created, the most common case is to listen for the `'line'` event:\\n     *\\n     * ```js\\n     * rl.on('line', (line) => {\\n     *   console.log(`Received: ${line}`);\\n     * });\\n     * ```\\n     *\\n     * If `terminal` is `true` for this instance then the `output` stream will get the best compatibility if it defines an `output.columns` property,\\n     * and emits a `'resize'` event on the `output`, if or when the columns ever change (`process.stdout` does this automatically when it is a TTY).\\n     *\\n     * ## Use of the `completer` function\\n     *\\n     * The `completer` function takes the current line entered by the user as an argument, and returns an `Array` with 2 entries:\\n     *\\n     * - An Array with matching entries for the completion.\\n     * - The substring that was used for the matching.\\n     *\\n     * For instance: `[[substr1, substr2, ...], originalsubstring]`.\\n     *\\n     * ```js\\n     * function completer(line) {\\n     *   const completions = '.help .error .exit .quit .q'.split(' ');\\n     *   const hits = completions.filter((c) => c.startsWith(line));\\n     *   // Show all completions if none found\\n     *   return [hits.length ? hits : completions, line];\\n     * }\\n     * ```\\n     *\\n     * The `completer` function can also returns a `Promise`, or be asynchronous:\\n     *\\n     * ```js\\n     * async function completer(linePartial) {\\n     *   await someAsyncWork();\\n     *   return [['123'], linePartial];\\n     * }\\n     * ```\\n     */\\n    function createInterface(\\n        input: NodeJS.ReadableStream,\\n        output?: NodeJS.WritableStream,\\n        completer?: Completer | AsyncCompleter,\\n        terminal?: boolean,\\n    ): Interface;\\n    function createInterface(options: ReadLineOptions): Interface;\\n}\\ndeclare module 'node:readline/promises' {\\n    export * from 'readline/promises';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/stream/consumers.d.ts\":\"declare module 'stream/consumers' {\\n    import { Blob as NodeBlob } from \\\"node:buffer\\\";\\n    import { Readable } from 'node:stream';\\n    function buffer(stream: NodeJS.ReadableStream | Readable | AsyncIterator<any>): Promise<Buffer>;\\n    function text(stream: NodeJS.ReadableStream | Readable | AsyncIterator<any>): Promise<string>;\\n    function arrayBuffer(stream: NodeJS.ReadableStream | Readable | AsyncIterator<any>): Promise<ArrayBuffer>;\\n    function blob(stream: NodeJS.ReadableStream | Readable | AsyncIterator<any>): Promise<NodeBlob>;\\n    function json(stream: NodeJS.ReadableStream | Readable | AsyncIterator<any>): Promise<unknown>;\\n}\\ndeclare module 'node:stream/consumers' {\\n    export * from 'stream/consumers';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/stream/promises.d.ts\":\"declare module 'stream/promises' {\\n    import { FinishedOptions, PipelineSource, PipelineTransform, PipelineDestination, PipelinePromise, PipelineOptions } from 'node:stream';\\n    function finished(stream: NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream, options?: FinishedOptions): Promise<void>;\\n    function pipeline<A extends PipelineSource<any>, B extends PipelineDestination<A, any>>(source: A, destination: B, options?: PipelineOptions): PipelinePromise<B>;\\n    function pipeline<A extends PipelineSource<any>, T1 extends PipelineTransform<A, any>, B extends PipelineDestination<T1, any>>(\\n        source: A,\\n        transform1: T1,\\n        destination: B,\\n        options?: PipelineOptions\\n    ): PipelinePromise<B>;\\n    function pipeline<A extends PipelineSource<any>, T1 extends PipelineTransform<A, any>, T2 extends PipelineTransform<T1, any>, B extends PipelineDestination<T2, any>>(\\n        source: A,\\n        transform1: T1,\\n        transform2: T2,\\n        destination: B,\\n        options?: PipelineOptions\\n    ): PipelinePromise<B>;\\n    function pipeline<\\n        A extends PipelineSource<any>,\\n        T1 extends PipelineTransform<A, any>,\\n        T2 extends PipelineTransform<T1, any>,\\n        T3 extends PipelineTransform<T2, any>,\\n        B extends PipelineDestination<T3, any>\\n    >(source: A, transform1: T1, transform2: T2, transform3: T3, destination: B, options?: PipelineOptions): PipelinePromise<B>;\\n    function pipeline<\\n        A extends PipelineSource<any>,\\n        T1 extends PipelineTransform<A, any>,\\n        T2 extends PipelineTransform<T1, any>,\\n        T3 extends PipelineTransform<T2, any>,\\n        T4 extends PipelineTransform<T3, any>,\\n        B extends PipelineDestination<T4, any>\\n    >(source: A, transform1: T1, transform2: T2, transform3: T3, transform4: T4, destination: B, options?: PipelineOptions): PipelinePromise<B>;\\n    function pipeline(streams: ReadonlyArray<NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream>, options?: PipelineOptions): Promise<void>;\\n    function pipeline(\\n        stream1: NodeJS.ReadableStream,\\n        stream2: NodeJS.ReadWriteStream | NodeJS.WritableStream,\\n        ...streams: Array<NodeJS.ReadWriteStream | NodeJS.WritableStream | PipelineOptions>\\n    ): Promise<void>;\\n}\\ndeclare module 'node:stream/promises' {\\n    export * from 'stream/promises';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/stream/web.d.ts\":\"declare module 'stream/web' {\\n    // stub module, pending copy&paste from .d.ts or manual impl\\n    // copy from lib.dom.d.ts\\n    interface ReadableWritablePair<R = any, W = any> {\\n        readable: ReadableStream<R>;\\n        /**\\n         * Provides a convenient, chainable way of piping this readable stream\\n         * through a transform stream (or any other { writable, readable }\\n         * pair). It simply pipes the stream into the writable side of the\\n         * supplied pair, and returns the readable side for further use.\\n         *\\n         * Piping a stream will lock it for the duration of the pipe, preventing\\n         * any other consumer from acquiring a reader.\\n         */\\n        writable: WritableStream<W>;\\n    }\\n    interface StreamPipeOptions {\\n        preventAbort?: boolean;\\n        preventCancel?: boolean;\\n        /**\\n         * Pipes this readable stream to a given writable stream destination.\\n         * The way in which the piping process behaves under various error\\n         * conditions can be customized with a number of passed options. It\\n         * returns a promise that fulfills when the piping process completes\\n         * successfully, or rejects if any errors were encountered.\\n         *\\n         * Piping a stream will lock it for the duration of the pipe, preventing\\n         * any other consumer from acquiring a reader.\\n         *\\n         * Errors and closures of the source and destination streams propagate\\n         * as follows:\\n         *\\n         * An error in this source readable stream will abort destination,\\n         * unless preventAbort is truthy. The returned promise will be rejected\\n         * with the source's error, or with any error that occurs during\\n         * aborting the destination.\\n         *\\n         * An error in destination will cancel this source readable stream,\\n         * unless preventCancel is truthy. The returned promise will be rejected\\n         * with the destination's error, or with any error that occurs during\\n         * canceling the source.\\n         *\\n         * When this source readable stream closes, destination will be closed,\\n         * unless preventClose is truthy. The returned promise will be fulfilled\\n         * once this process completes, unless an error is encountered while\\n         * closing the destination, in which case it will be rejected with that\\n         * error.\\n         *\\n         * If destination starts out closed or closing, this source readable\\n         * stream will be canceled, unless preventCancel is true. The returned\\n         * promise will be rejected with an error indicating piping to a closed\\n         * stream failed, or with any error that occurs during canceling the\\n         * source.\\n         *\\n         * The signal option can be set to an AbortSignal to allow aborting an\\n         * ongoing pipe operation via the corresponding AbortController. In this\\n         * case, this source readable stream will be canceled, and destination\\n         * aborted, unless the respective options preventCancel or preventAbort\\n         * are set.\\n         */\\n        preventClose?: boolean;\\n        signal?: AbortSignal;\\n    }\\n    interface ReadableStreamGenericReader {\\n        readonly closed: Promise<undefined>;\\n        cancel(reason?: any): Promise<void>;\\n    }\\n    interface ReadableStreamDefaultReadValueResult<T> {\\n        done: false;\\n        value: T;\\n    }\\n    interface ReadableStreamDefaultReadDoneResult {\\n        done: true;\\n        value?: undefined;\\n    }\\n    type ReadableStreamController<T> = ReadableStreamDefaultController<T>;\\n    type ReadableStreamDefaultReadResult<T> = ReadableStreamDefaultReadValueResult<T> | ReadableStreamDefaultReadDoneResult;\\n    interface ReadableByteStreamControllerCallback {\\n        (controller: ReadableByteStreamController): void | PromiseLike<void>;\\n    }\\n    interface UnderlyingSinkAbortCallback {\\n        (reason?: any): void | PromiseLike<void>;\\n    }\\n    interface UnderlyingSinkCloseCallback {\\n        (): void | PromiseLike<void>;\\n    }\\n    interface UnderlyingSinkStartCallback {\\n        (controller: WritableStreamDefaultController): any;\\n    }\\n    interface UnderlyingSinkWriteCallback<W> {\\n        (chunk: W, controller: WritableStreamDefaultController): void | PromiseLike<void>;\\n    }\\n    interface UnderlyingSourceCancelCallback {\\n        (reason?: any): void | PromiseLike<void>;\\n    }\\n    interface UnderlyingSourcePullCallback<R> {\\n        (controller: ReadableStreamController<R>): void | PromiseLike<void>;\\n    }\\n    interface UnderlyingSourceStartCallback<R> {\\n        (controller: ReadableStreamController<R>): any;\\n    }\\n    interface TransformerFlushCallback<O> {\\n        (controller: TransformStreamDefaultController<O>): void | PromiseLike<void>;\\n    }\\n    interface TransformerStartCallback<O> {\\n        (controller: TransformStreamDefaultController<O>): any;\\n    }\\n    interface TransformerTransformCallback<I, O> {\\n        (chunk: I, controller: TransformStreamDefaultController<O>): void | PromiseLike<void>;\\n    }\\n    interface UnderlyingByteSource {\\n        autoAllocateChunkSize?: number;\\n        cancel?: ReadableStreamErrorCallback;\\n        pull?: ReadableByteStreamControllerCallback;\\n        start?: ReadableByteStreamControllerCallback;\\n        type: 'bytes';\\n    }\\n    interface UnderlyingSource<R = any> {\\n        cancel?: UnderlyingSourceCancelCallback;\\n        pull?: UnderlyingSourcePullCallback<R>;\\n        start?: UnderlyingSourceStartCallback<R>;\\n        type?: undefined;\\n    }\\n    interface UnderlyingSink<W = any> {\\n        abort?: UnderlyingSinkAbortCallback;\\n        close?: UnderlyingSinkCloseCallback;\\n        start?: UnderlyingSinkStartCallback;\\n        type?: undefined;\\n        write?: UnderlyingSinkWriteCallback<W>;\\n    }\\n    interface ReadableStreamErrorCallback {\\n        (reason: any): void | PromiseLike<void>;\\n    }\\n    /** This Streams API interface represents a readable stream of byte data. */\\n    interface ReadableStream<R = any> {\\n        readonly locked: boolean;\\n        cancel(reason?: any): Promise<void>;\\n        getReader(): ReadableStreamDefaultReader<R>;\\n        pipeThrough<T>(transform: ReadableWritablePair<T, R>, options?: StreamPipeOptions): ReadableStream<T>;\\n        pipeTo(destination: WritableStream<R>, options?: StreamPipeOptions): Promise<void>;\\n        tee(): [ReadableStream<R>, ReadableStream<R>];\\n        values(options?: { preventCancel?: boolean }): AsyncIterableIterator<R>;\\n        [Symbol.asyncIterator](): AsyncIterableIterator<R>;\\n    }\\n    const ReadableStream: {\\n        prototype: ReadableStream;\\n        new (underlyingSource: UnderlyingByteSource, strategy?: QueuingStrategy<Uint8Array>): ReadableStream<Uint8Array>;\\n        new <R = any>(underlyingSource?: UnderlyingSource<R>, strategy?: QueuingStrategy<R>): ReadableStream<R>;\\n    };\\n    interface ReadableStreamDefaultReader<R = any> extends ReadableStreamGenericReader {\\n        read(): Promise<ReadableStreamDefaultReadResult<R>>;\\n        releaseLock(): void;\\n    }\\n    const ReadableStreamDefaultReader: {\\n        prototype: ReadableStreamDefaultReader;\\n        new <R = any>(stream: ReadableStream<R>): ReadableStreamDefaultReader<R>;\\n    };\\n    const ReadableStreamBYOBReader: any;\\n    const ReadableStreamBYOBRequest: any;\\n    interface ReadableByteStreamController {\\n        readonly byobRequest: undefined;\\n        readonly desiredSize: number | null;\\n        close(): void;\\n        enqueue(chunk: ArrayBufferView): void;\\n        error(error?: any): void;\\n    }\\n    const ReadableByteStreamController: {\\n        prototype: ReadableByteStreamController;\\n        new (): ReadableByteStreamController;\\n    };\\n    interface ReadableStreamDefaultController<R = any> {\\n        readonly desiredSize: number | null;\\n        close(): void;\\n        enqueue(chunk?: R): void;\\n        error(e?: any): void;\\n    }\\n    const ReadableStreamDefaultController: {\\n        prototype: ReadableStreamDefaultController;\\n        new (): ReadableStreamDefaultController;\\n    };\\n    interface Transformer<I = any, O = any> {\\n        flush?: TransformerFlushCallback<O>;\\n        readableType?: undefined;\\n        start?: TransformerStartCallback<O>;\\n        transform?: TransformerTransformCallback<I, O>;\\n        writableType?: undefined;\\n    }\\n    interface TransformStream<I = any, O = any> {\\n        readonly readable: ReadableStream<O>;\\n        readonly writable: WritableStream<I>;\\n    }\\n    const TransformStream: {\\n        prototype: TransformStream;\\n        new <I = any, O = any>(transformer?: Transformer<I, O>, writableStrategy?: QueuingStrategy<I>, readableStrategy?: QueuingStrategy<O>): TransformStream<I, O>;\\n    };\\n    interface TransformStreamDefaultController<O = any> {\\n        readonly desiredSize: number | null;\\n        enqueue(chunk?: O): void;\\n        error(reason?: any): void;\\n        terminate(): void;\\n    }\\n    const TransformStreamDefaultController: {\\n        prototype: TransformStreamDefaultController;\\n        new (): TransformStreamDefaultController;\\n    };\\n    /**\\n     * This Streams API interface provides a standard abstraction for writing\\n     * streaming data to a destination, known as a sink. This object comes with\\n     * built-in back pressure and queuing.\\n     */\\n    interface WritableStream<W = any> {\\n        readonly locked: boolean;\\n        abort(reason?: any): Promise<void>;\\n        close(): Promise<void>;\\n        getWriter(): WritableStreamDefaultWriter<W>;\\n    }\\n    const WritableStream: {\\n        prototype: WritableStream;\\n        new <W = any>(underlyingSink?: UnderlyingSink<W>, strategy?: QueuingStrategy<W>): WritableStream<W>;\\n    };\\n    /**\\n     * This Streams API interface is the object returned by\\n     * WritableStream.getWriter() and once created locks the < writer to the\\n     * WritableStream ensuring that no other streams can write to the underlying\\n     * sink.\\n     */\\n    interface WritableStreamDefaultWriter<W = any> {\\n        readonly closed: Promise<undefined>;\\n        readonly desiredSize: number | null;\\n        readonly ready: Promise<undefined>;\\n        abort(reason?: any): Promise<void>;\\n        close(): Promise<void>;\\n        releaseLock(): void;\\n        write(chunk?: W): Promise<void>;\\n    }\\n    const WritableStreamDefaultWriter: {\\n        prototype: WritableStreamDefaultWriter;\\n        new <W = any>(stream: WritableStream<W>): WritableStreamDefaultWriter<W>;\\n    };\\n    /**\\n     * This Streams API interface represents a controller allowing control of a\\n     * WritableStream's state. When constructing a WritableStream, the\\n     * underlying sink is given a corresponding WritableStreamDefaultController\\n     * instance to manipulate.\\n     */\\n    interface WritableStreamDefaultController {\\n        error(e?: any): void;\\n    }\\n    const WritableStreamDefaultController: {\\n        prototype: WritableStreamDefaultController;\\n        new (): WritableStreamDefaultController;\\n    };\\n    interface QueuingStrategy<T = any> {\\n        highWaterMark?: number;\\n        size?: QueuingStrategySize<T>;\\n    }\\n    interface QueuingStrategySize<T = any> {\\n        (chunk?: T): number;\\n    }\\n    interface QueuingStrategyInit {\\n        /**\\n         * Creates a new ByteLengthQueuingStrategy with the provided high water\\n         * mark.\\n         *\\n         * Note that the provided high water mark will not be validated ahead of\\n         * time. Instead, if it is negative, NaN, or not a number, the resulting\\n         * ByteLengthQueuingStrategy will cause the corresponding stream\\n         * constructor to throw.\\n         */\\n        highWaterMark: number;\\n    }\\n    /**\\n     * This Streams API interface provides a built-in byte length queuing\\n     * strategy that can be used when constructing streams.\\n     */\\n    interface ByteLengthQueuingStrategy extends QueuingStrategy<ArrayBufferView> {\\n        readonly highWaterMark: number;\\n        readonly size: QueuingStrategySize<ArrayBufferView>;\\n    }\\n    const ByteLengthQueuingStrategy: {\\n        prototype: ByteLengthQueuingStrategy;\\n        new (init: QueuingStrategyInit): ByteLengthQueuingStrategy;\\n    };\\n    /**\\n     * This Streams API interface provides a built-in byte length queuing\\n     * strategy that can be used when constructing streams.\\n     */\\n    interface CountQueuingStrategy extends QueuingStrategy {\\n        readonly highWaterMark: number;\\n        readonly size: QueuingStrategySize;\\n    }\\n    const CountQueuingStrategy: {\\n        prototype: CountQueuingStrategy;\\n        new (init: QueuingStrategyInit): CountQueuingStrategy;\\n    };\\n    interface TextEncoderStream {\\n        /** Returns \\\"utf-8\\\". */\\n        readonly encoding: 'utf-8';\\n        readonly readable: ReadableStream<Uint8Array>;\\n        readonly writable: WritableStream<string>;\\n        readonly [Symbol.toStringTag]: string;\\n    }\\n    const TextEncoderStream: {\\n        prototype: TextEncoderStream;\\n        new (): TextEncoderStream;\\n    };\\n    interface TextDecoderOptions {\\n        fatal?: boolean;\\n        ignoreBOM?: boolean;\\n    }\\n    type BufferSource = ArrayBufferView | ArrayBuffer;\\n    interface TextDecoderStream {\\n        /** Returns encoding's name, lower cased. */\\n        readonly encoding: string;\\n        /** Returns `true` if error mode is \\\"fatal\\\", and `false` otherwise. */\\n        readonly fatal: boolean;\\n        /** Returns `true` if ignore BOM flag is set, and `false` otherwise. */\\n        readonly ignoreBOM: boolean;\\n        readonly readable: ReadableStream<string>;\\n        readonly writable: WritableStream<BufferSource>;\\n        readonly [Symbol.toStringTag]: string;\\n    }\\n    const TextDecoderStream: {\\n        prototype: TextDecoderStream;\\n        new (label?: string, options?: TextDecoderOptions): TextDecoderStream;\\n    };\\n}\\ndeclare module 'node:stream/web' {\\n    export * from 'stream/web';\\n}\\n\",\"file:///node_modules/@types/node/ts4.8/timers/promises.d.ts\":\"/**\\n * The `timers/promises` API provides an alternative set of timer functions\\n * that return `Promise` objects. The API is accessible via`require('timers/promises')`.\\n *\\n * ```js\\n * import {\\n *   setTimeout,\\n *   setImmediate,\\n *   setInterval,\\n * } from 'timers/promises';\\n * ```\\n * @since v15.0.0\\n */\\ndeclare module 'timers/promises' {\\n    import { TimerOptions } from 'node:timers';\\n    /**\\n     * ```js\\n     * import {\\n     *   setTimeout,\\n     * } from 'timers/promises';\\n     *\\n     * const res = await setTimeout(100, 'result');\\n     *\\n     * console.log(res);  // Prints 'result'\\n     * ```\\n     * @since v15.0.0\\n     * @param [delay=1] The number of milliseconds to wait before fulfilling the promise.\\n     * @param value A value with which the promise is fulfilled.\\n     */\\n    function setTimeout<T = void>(delay?: number, value?: T, options?: TimerOptions): Promise<T>;\\n    /**\\n     * ```js\\n     * import {\\n     *   setImmediate,\\n     * } from 'timers/promises';\\n     *\\n     * const res = await setImmediate('result');\\n     *\\n     * console.log(res);  // Prints 'result'\\n     * ```\\n     * @since v15.0.0\\n     * @param value A value with which the promise is fulfilled.\\n     */\\n    function setImmediate<T = void>(value?: T, options?: TimerOptions): Promise<T>;\\n    /**\\n     * Returns an async iterator that generates values in an interval of `delay` ms.\\n     *\\n     * ```js\\n     * import {\\n     *   setInterval,\\n     * } from 'timers/promises';\\n     *\\n     * const interval = 100;\\n     * for await (const startTime of setInterval(interval, Date.now())) {\\n     *   const now = Date.now();\\n     *   console.log(now);\\n     *   if ((now - startTime) > 1000)\\n     *     break;\\n     * }\\n     * console.log(Date.now());\\n     * ```\\n     * @since v15.9.0\\n     */\\n    function setInterval<T = void>(delay?: number, value?: T, options?: TimerOptions): AsyncIterable<T>;\\n\\n    interface Scheduler {\\n        /**\\n         * ```js\\n         * import { scheduler } from 'node:timers/promises';\\n         *\\n         * await scheduler.wait(1000); // Wait one second before continuing\\n         * ```\\n         * An experimental API defined by the Scheduling APIs draft specification being developed as a standard Web Platform API.\\n         * Calling timersPromises.scheduler.wait(delay, options) is roughly equivalent to calling timersPromises.setTimeout(delay, undefined, options) except that the ref option is not supported.\\n         * @since v16.14.0\\n         * @experimental\\n         * @param [delay=1] The number of milliseconds to wait before fulfilling the promise.\\n         */\\n        wait: (delay?: number, options?: TimerOptions) => Promise<void>;\\n        /**\\n         * An experimental API defined by the Scheduling APIs draft specification being developed as a standard Web Platform API.\\n         * Calling timersPromises.scheduler.yield() is equivalent to calling timersPromises.setImmediate() with no arguments.\\n         * @since v16.14.0\\n         * @experimental\\n         */\\n        yield: () => Promise<void>;\\n    }\\n\\n    const scheduler: Scheduler;\\n}\\ndeclare module 'node:timers/promises' {\\n    export * from 'timers/promises';\\n}\\n\",\"file:///node_modules/@types/node/package.json\":\"{\\n    \\\"name\\\": \\\"@types/node\\\",\\n    \\\"version\\\": \\\"18.16.9\\\",\\n    \\\"description\\\": \\\"TypeScript definitions for Node.js\\\",\\n    \\\"homepage\\\": \\\"https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/node\\\",\\n    \\\"license\\\": \\\"MIT\\\",\\n    \\\"contributors\\\": [\\n        {\\n            \\\"name\\\": \\\"Microsoft TypeScript\\\",\\n            \\\"url\\\": \\\"https://github.com/Microsoft\\\",\\n            \\\"githubUsername\\\": \\\"Microsoft\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"DefinitelyTyped\\\",\\n            \\\"url\\\": \\\"https://github.com/DefinitelyTyped\\\",\\n            \\\"githubUsername\\\": \\\"DefinitelyTyped\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Alberto Schiabel\\\",\\n            \\\"url\\\": \\\"https://github.com/jkomyno\\\",\\n            \\\"githubUsername\\\": \\\"jkomyno\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Alvis HT Tang\\\",\\n            \\\"url\\\": \\\"https://github.com/alvis\\\",\\n            \\\"githubUsername\\\": \\\"alvis\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Andrew Makarov\\\",\\n            \\\"url\\\": \\\"https://github.com/r3nya\\\",\\n            \\\"githubUsername\\\": \\\"r3nya\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Benjamin Toueg\\\",\\n            \\\"url\\\": \\\"https://github.com/btoueg\\\",\\n            \\\"githubUsername\\\": \\\"btoueg\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Chigozirim C.\\\",\\n            \\\"url\\\": \\\"https://github.com/smac89\\\",\\n            \\\"githubUsername\\\": \\\"smac89\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"David Junger\\\",\\n            \\\"url\\\": \\\"https://github.com/touffy\\\",\\n            \\\"githubUsername\\\": \\\"touffy\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Deividas Bakanas\\\",\\n            \\\"url\\\": \\\"https://github.com/DeividasBakanas\\\",\\n            \\\"githubUsername\\\": \\\"DeividasBakanas\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Eugene Y. Q. Shen\\\",\\n            \\\"url\\\": \\\"https://github.com/eyqs\\\",\\n            \\\"githubUsername\\\": \\\"eyqs\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Hannes Magnusson\\\",\\n            \\\"url\\\": \\\"https://github.com/Hannes-Magnusson-CK\\\",\\n            \\\"githubUsername\\\": \\\"Hannes-Magnusson-CK\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Huw\\\",\\n            \\\"url\\\": \\\"https://github.com/hoo29\\\",\\n            \\\"githubUsername\\\": \\\"hoo29\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Kelvin Jin\\\",\\n            \\\"url\\\": \\\"https://github.com/kjin\\\",\\n            \\\"githubUsername\\\": \\\"kjin\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Klaus Meinhardt\\\",\\n            \\\"url\\\": \\\"https://github.com/ajafff\\\",\\n            \\\"githubUsername\\\": \\\"ajafff\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Lishude\\\",\\n            \\\"url\\\": \\\"https://github.com/islishude\\\",\\n            \\\"githubUsername\\\": \\\"islishude\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Mariusz Wiktorczyk\\\",\\n            \\\"url\\\": \\\"https://github.com/mwiktorczyk\\\",\\n            \\\"githubUsername\\\": \\\"mwiktorczyk\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Mohsen Azimi\\\",\\n            \\\"url\\\": \\\"https://github.com/mohsen1\\\",\\n            \\\"githubUsername\\\": \\\"mohsen1\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Nicolas Even\\\",\\n            \\\"url\\\": \\\"https://github.com/n-e\\\",\\n            \\\"githubUsername\\\": \\\"n-e\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Nikita Galkin\\\",\\n            \\\"url\\\": \\\"https://github.com/galkin\\\",\\n            \\\"githubUsername\\\": \\\"galkin\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Parambir Singh\\\",\\n            \\\"url\\\": \\\"https://github.com/parambirs\\\",\\n            \\\"githubUsername\\\": \\\"parambirs\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Sebastian Silbermann\\\",\\n            \\\"url\\\": \\\"https://github.com/eps1lon\\\",\\n            \\\"githubUsername\\\": \\\"eps1lon\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Simon Schick\\\",\\n            \\\"url\\\": \\\"https://github.com/SimonSchick\\\",\\n            \\\"githubUsername\\\": \\\"SimonSchick\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Thomas den Hollander\\\",\\n            \\\"url\\\": \\\"https://github.com/ThomasdenH\\\",\\n            \\\"githubUsername\\\": \\\"ThomasdenH\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Wilco Bakker\\\",\\n            \\\"url\\\": \\\"https://github.com/WilcoBakker\\\",\\n            \\\"githubUsername\\\": \\\"WilcoBakker\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"wwwy3y3\\\",\\n            \\\"url\\\": \\\"https://github.com/wwwy3y3\\\",\\n            \\\"githubUsername\\\": \\\"wwwy3y3\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Samuel Ainsworth\\\",\\n            \\\"url\\\": \\\"https://github.com/samuela\\\",\\n            \\\"githubUsername\\\": \\\"samuela\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Kyle Uehlein\\\",\\n            \\\"url\\\": \\\"https://github.com/kuehlein\\\",\\n            \\\"githubUsername\\\": \\\"kuehlein\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Thanik Bhongbhibhat\\\",\\n            \\\"url\\\": \\\"https://github.com/bhongy\\\",\\n            \\\"githubUsername\\\": \\\"bhongy\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Marcin Kopacz\\\",\\n            \\\"url\\\": \\\"https://github.com/chyzwar\\\",\\n            \\\"githubUsername\\\": \\\"chyzwar\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Trivikram Kamat\\\",\\n            \\\"url\\\": \\\"https://github.com/trivikr\\\",\\n            \\\"githubUsername\\\": \\\"trivikr\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Junxiao Shi\\\",\\n            \\\"url\\\": \\\"https://github.com/yoursunny\\\",\\n            \\\"githubUsername\\\": \\\"yoursunny\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Ilia Baryshnikov\\\",\\n            \\\"url\\\": \\\"https://github.com/qwelias\\\",\\n            \\\"githubUsername\\\": \\\"qwelias\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"ExE Boss\\\",\\n            \\\"url\\\": \\\"https://github.com/ExE-Boss\\\",\\n            \\\"githubUsername\\\": \\\"ExE-Boss\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Piotr B\u0142a\u017cejewicz\\\",\\n            \\\"url\\\": \\\"https://github.com/peterblazejewicz\\\",\\n            \\\"githubUsername\\\": \\\"peterblazejewicz\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Anna Henningsen\\\",\\n            \\\"url\\\": \\\"https://github.com/addaleax\\\",\\n            \\\"githubUsername\\\": \\\"addaleax\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Victor Perin\\\",\\n            \\\"url\\\": \\\"https://github.com/victorperin\\\",\\n            \\\"githubUsername\\\": \\\"victorperin\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Yongsheng Zhang\\\",\\n            \\\"url\\\": \\\"https://github.com/ZYSzys\\\",\\n            \\\"githubUsername\\\": \\\"ZYSzys\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"NodeJS Contributors\\\",\\n            \\\"url\\\": \\\"https://github.com/NodeJS\\\",\\n            \\\"githubUsername\\\": \\\"NodeJS\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Linus Unneb\xe4ck\\\",\\n            \\\"url\\\": \\\"https://github.com/LinusU\\\",\\n            \\\"githubUsername\\\": \\\"LinusU\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"wafuwafu13\\\",\\n            \\\"url\\\": \\\"https://github.com/wafuwafu13\\\",\\n            \\\"githubUsername\\\": \\\"wafuwafu13\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Matteo Collina\\\",\\n            \\\"url\\\": \\\"https://github.com/mcollina\\\",\\n            \\\"githubUsername\\\": \\\"mcollina\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"Dmitry Semigradsky\\\",\\n            \\\"url\\\": \\\"https://github.com/Semigradsky\\\",\\n            \\\"githubUsername\\\": \\\"Semigradsky\\\"\\n        }\\n    ],\\n    \\\"main\\\": \\\"\\\",\\n    \\\"types\\\": \\\"index.d.ts\\\",\\n    \\\"typesVersions\\\": {\\n        \\\"<=4.8\\\": {\\n            \\\"*\\\": [\\n                \\\"ts4.8/*\\\"\\n            ]\\n        }\\n    },\\n    \\\"repository\\\": {\\n        \\\"type\\\": \\\"git\\\",\\n        \\\"url\\\": \\\"https://github.com/DefinitelyTyped/DefinitelyTyped.git\\\",\\n        \\\"directory\\\": \\\"types/node\\\"\\n    },\\n    \\\"scripts\\\": {},\\n    \\\"dependencies\\\": {},\\n    \\\"typesPublisherContentHash\\\": \\\"29fe5d40e23dc41e805a3341ce551db6978006f4595a628937779cb9bfb917e2\\\",\\n    \\\"typeScriptVersion\\\": \\\"4.3\\\"\\n}\"}")}}]);