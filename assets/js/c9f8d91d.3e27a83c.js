"use strict";(self.webpackChunk_cli_forge_docs_site=self.webpackChunk_cli_forge_docs_site||[]).push([[415],{19154:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>i});var s=n(62540),a=n(43023);const o={id:"interactive-subshell",title:"Interactive Subshell",description:"This example demonstrates how to create an interactive subshell using cli-forge. The subshell is a simple REPL that can execute commands or shell commands. To launch the subshell, run the script with no arguments, or a command that contains subcommands and no handler.\nThe subshell presents a prompt that includes the current command chain, and executes the command when the user presses enter. If the command is not recognized, it is executed as a shell command. Notably, the subshell is very basic. It does not currently support command history, tab completion, or other advanced features.\n",hide_title:!0},r="Interactive Subshell",l={id:"examples/interactive-subshell",title:"Interactive Subshell",description:"This example demonstrates how to create an interactive subshell using cli-forge. The subshell is a simple REPL that can execute commands or shell commands. To launch the subshell, run the script with no arguments, or a command that contains subcommands and no handler.\nThe subshell presents a prompt that includes the current command chain, and executes the command when the user presses enter. If the command is not recognized, it is executed as a shell command. Notably, the subshell is very basic. It does not currently support command history, tab completion, or other advanced features.\n",source:"@site/docs/examples/interactive-subshell.md",sourceDirName:"examples",slug:"/examples/interactive-subshell",permalink:"/cli-forge/examples/interactive-subshell",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"interactive-subshell",title:"Interactive Subshell",description:"This example demonstrates how to create an interactive subshell using cli-forge. The subshell is a simple REPL that can execute commands or shell commands. To launch the subshell, run the script with no arguments, or a command that contains subcommands and no handler.\nThe subshell presents a prompt that includes the current command chain, and executes the command when the user presses enter. If the command is not recognized, it is executed as a shell command. Notably, the subshell is very basic. It does not currently support command history, tab completion, or other advanced features.\n",hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Environment Options",permalink:"/cli-forge/examples/env-options"},next:{title:"Middleware",permalink:"/cli-forge/examples/middleware"}},c={},i=[{value:"Code",id:"code",level:2}];function h(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"interactive-subshell",children:"Interactive Subshell"})}),"\n",(0,s.jsx)(t.p,{children:"This example demonstrates how to create an interactive subshell using cli-forge. The subshell is a simple REPL that can execute commands or shell commands. To launch the subshell, run the script with no arguments, or a command that contains subcommands and no handler.\nThe subshell presents a prompt that includes the current command chain, and executes the command when the user presses enter. If the command is not recognized, it is executed as a shell command. Notably, the subshell is very basic. It does not currently support command history, tab completion, or other advanced features."}),"\n",(0,s.jsx)(t.h2,{id:"code",children:"Code"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="Interactive Subshell" showLineNumbers',children:"import cliForge from 'cli-forge';\n\nconst state = {\n  defaultHost: 'example.com',\n  auth: {} as Record<string, { user: string; pass?: string }>,\n};\n\nconst cli = cliForge('interactive-subshell')\n  // Enables launching an interactive subshell.\n  // For this example, the subshell would be launched if the user\n  // runs either:\n  // - `node ./interactive-subshell.ts`\n  // - `node ./interactive-subshell.ts foo`\n  .enableInteractiveShell()\n  .command('auth', {\n    builder: (args) =>\n      args\n        .option('host', { type: 'string', default: state.defaultHost })\n        .command('login', {\n          builder: (args) => {\n            return args\n              .positional('user', { type: 'string', required: true })\n              .option('pass', { type: 'string' });\n          },\n          handler: (args) => {\n            state.auth ??= {};\n            state.auth[args.host] = {\n              user: args.user,\n              pass: args.pass,\n            };\n            console.log('Logged in to', args.host, 'as', args.user);\n          },\n        })\n        .command('logout', {\n          handler: (args) => {\n            delete state.auth[args.host];\n            console.log('Logged out of', args.host);\n          },\n        }),\n  })\n  .command('lorem', {\n    handler: (args) => {\n      console.log('lorem ipsum');\n    },\n  });\n\n// We export the CLI for a few reasons:\n// - Testing\n// - Composition (a CLI can be a subcommand of another CLI)\n// - Docs generation\nexport default cli;\n\n"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"/playground/#PTAEBUAsFNQMwPYBskIO4EsB2BzUTtYATBaAZywHIAXUE0AQywE9rJs8AnaBlZgGlCcGbaJ1AZa1aCjIAoEKFERmAB2gBlAMacMq2qqQNmOTggCuWIksgibGMqDI69tMpAtJrAI1jQAbrzmItDWDI4MoFgIRNAAVo7OuvoAdHIYALaqCJy0AN4AvvBmGaCU0bEAXHBklHLpWTm0WgQAYjk4sHAlZS0YALSInJ2UANz1WghYZG7UIaAAvKB5cqB00HAM5kjUABIIM5Vl0AAeDFlI0CmTGZT8q4zmbEeFjI4AStCTnEQAPDO6XCCPKgcxkMRHAEcUagVThMgAfkh1EBeAKAD57gVxnJJtNmgRFqA+u1htAABSUbDSYRaagYfzQfpkczedwyJCUACUD0UAFEsAxvJdHEZLFp2LhGFgJFgaQw6QzYCy2TAUGk1opSfZHKdzoZoIJlCr2ShQGhPD5YGKsBLQhI4DZYGCxLywJxLLrJDBOJU3aB+qAAAYVWApYDUsQK+mM5ms01IFLUMhB-2BkMxMMRuVRxWxk1qxPJ+AIBCptYpaCC4XQACSOdpMc0hfJPIrNwyTCIlK2bDuywea285gwXghoHJDGGZC5i3Rg7WjGnC8XoBSCH0GCmlI8M37IOoamgR0oUNw-dim221GRIRSl62O32M1ABTbq8X1wQGU7VkpqBwbB9xXD9h1HWJfQnKccBnOcBw-BChGgahzE4GVoPkRDEJSbIyEkLdBSQSkXU4fclCPE8zxwftuAARxHbgiCOFFzFgN8QKw9dN23Sg4TIWpgXI9RKJRDhKFfLlxiwtYCnuaTQFsKxLkgydp1nBZ0Xg+SnDmaQUl7SBQARBElkKKTtJmO8DIAbQwlJd2oABdIkVm0xcSKOOySLktzYXhTzpxw+EfPk7EOI-PEyGQK4AMpAAZBAcE6axsCUBB+zshzBEocIMsCkjJPCmSQo-djOI7Lt-0SixqGA+TFKIZSjlUmD1M01ztNiS5pB0qynkgWzAocxzzPkyLopSWLKASpL7Rq0AEDgPKYPsg5qEK0KStXN8fLKtcKr-ShUG4W5gQXBqmqgtS4I61dxsuSbEqqk6JFUFlbg2xdZIeN8cUUAB1PwTmyXInVAABhOLaxLcRIjgaA0CQ8IpjIP1FEDcByHpXAFDAQNwe-XD8KmKCIah4kmFAXxGCcVkDusRbpQQURxEh2seXR0AABEEC0RxOiwKN6SmORThB2gH2vYkCHGIA",children:"View on TypeScript Playground"})}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:"These examples are ran as e2e tests on pull-requests and releases to verify they are accurate and up to date. If you see any issues, please open an issue on the github repo."}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},43023:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var s=n(63696);const a={},o=s.createContext(a);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);